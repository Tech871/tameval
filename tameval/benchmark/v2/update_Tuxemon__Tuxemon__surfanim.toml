[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/surfanim.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_surfanim.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.surfanim --unit-test tests.tuxemon.test_surfanim --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/surfanim.py --unit-test tests/tuxemon/test_surfanim.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 36.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = 52.0
covered_lines = [ 6, 8, 9, 10, 11, 12, 15, 18, 19, 22, 23, 24, 25, 26, 29, 30, 31, 32, 35, 48, 50, 92, 99, 104, 114, 127, 148, 151, 154, 158, 178, 193, 199, 209, 216, 230, 244, 245, 248, 249, 255, 256, 259, 260, 269, 270, 277, 278, 291, 292, 295, 296, 299, 300, 334, 335, 355, 356, 362, 363, 367, 368, 377, 378, 382, 383, 388, 389, 401, 419, 422, 425, 426, 429, 430, 436, 439, 445, 451, 456, 468, 471,]
missed_lines = [ 53, 58, 60, 61, 63, 64, 65, 66, 67, 70, 71, 75, 80, 81, 90, 94, 101, 102, 109, 110, 111, 132, 135, 137, 138, 139, 140, 143, 146, 149, 152, 156, 160, 161, 163, 164, 167, 168, 170, 171, 173, 176, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 207, 212, 213, 214, 228, 241, 242, 246, 250, 251, 252, 253, 257, 261, 266, 267, 271, 273, 275, 279, 280, 284, 285, 286, 287, 288, 289, 293, 297, 309, 311, 313, 318, 321, 324, 327, 328, 330, 331, 332, 338, 343, 344, 346, 348, 349, 351, 352, 353, 358, 359, 360, 365, 370, 371, 372, 374, 375, 380, 385, 397, 398, 399, 409, 410, 411, 412, 413, 414, 415, 417, 420, 423, 427, 431, 432, 434, 437, 440, 441, 443, 446, 447, 449, 452, 453, 454, 464, 465, 473,]

[input_info]
test_file_path = "tests/tuxemon/test_surfanim.py"
focal_file_path = "tuxemon/surfanim.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_surfanim.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/surfanim.py"
first_commit_date = "2021-11-06"
last_commit_date = "2025-06-27"
test_file_content = "# SPDX-License-Identifier: GPL-3.0\n# Copyright (c) 2014-2025 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>\nimport unittest\n\nimport pygame\n\nfrom tuxemon.surfanim import (\n    PAUSED,\n    PLAYING,\n    STOPPED,\n    SurfaceAnimation,\n    SurfaceAnimationCollection,\n    clip,\n)\n\n\nclass TestSurfaceAnimation(unittest.TestCase):\n    def setUp(self):\n        pygame.init()\n        self.frames = [\n            (pygame.Surface((10, 10)), 1.0),\n            (pygame.Surface((20, 20)), 2.0),\n        ]\n        self.animation = SurfaceAnimation(self.frames)\n\n    def tearDown(self):\n        pygame.quit()\n\n    def test_init(self):\n        self.assertEqual(self.animation.loop, True)\n        self.assertEqual(self.animation.state, STOPPED)\n\n    def test_get_frame(self):\n        self.assertEqual(self.animation.get_frame(0).get_size(), (10, 10))\n        self.assertEqual(self.animation.get_frame(1).get_size(), (20, 20))\n        self.assertEqual(self.animation.get_frame(2).get_size(), (0, 0))\n        self.assertEqual(self.animation.duration, 3.0)\n\n    def test_get_current_frame(self):\n        self.animation.play()\n        self.assertEqual(\n            self.animation.get_current_frame().get_size(), (10, 10)\n        )\n        self.animation.update(1.5)\n        self.assertEqual(\n            self.animation.get_current_frame().get_size(), (20, 20)\n        )\n\n    def test_is_finished(self):\n        animation = SurfaceAnimation(self.frames, loop=False)\n        self.assertFalse(animation.is_finished())\n        animation.play()\n        animation.update(3.0)\n        self.assertTrue(animation.is_finished())\n\n    def test_play(self):\n        self.animation.play()\n        self.assertEqual(self.animation.state, PLAYING)\n\n    def test_pause(self):\n        self.animation.play()\n        self.animation.pause()\n        self.assertEqual(self.animation.state, PAUSED)\n\n    def test_stop(self):\n        self.animation.play()\n        self.animation.stop()\n        self.assertEqual(self.animation.state, STOPPED)\n\n    def test_update(self):\n        self.animation.play()\n        self.animation.update(1.5)\n        self.assertGreaterEqual(self.animation.elapsed, 1.5 - 0.001)\n        self.assertLessEqual(self.animation.elapsed, 1.5 + 0.001)\n\n    def test_elapsed(self):\n        self.animation.play()\n        self.animation.update(1.5)\n        self.assertGreaterEqual(self.animation.elapsed, 1.5 - 0.001)\n        self.assertLessEqual(self.animation.elapsed, 1.5 + 0.001)\n        self.animation.elapsed = 2.5\n        self.assertGreaterEqual(self.animation.elapsed, 2.5 - 0.001)\n        self.assertLessEqual(self.animation.elapsed, 2.5 + 0.001)\n\n    def test_frames_played(self):\n        self.animation.play()\n        self.animation.update(1.5)\n        self.assertEqual(self.animation.frames_played, 1)\n        self.animation.frames_played = 0\n        self.assertEqual(self.animation.frames_played, 0)\n\n    def test_rate(self):\n        self.assertEqual(self.animation.rate, 1.0)\n        self.animation.rate = 2.0\n        self.assertEqual(self.animation.rate, 2.0)\n\n    def test_visibility(self):\n        self.assertTrue(self.animation.visibility)\n        self.animation.visibility = False\n        self.assertFalse(self.animation.visibility)\n\n    def test_get_rect(self):\n        rect = self.animation.get_rect()\n        self.assertEqual(rect.width, 20)\n        self.assertEqual(rect.height, 20)\n\n    def test_flip(self):\n        self.animation.flip(\"x\")\n        self.assertEqual(self.animation.get_frame(0).get_size(), (10, 10))\n        self.assertEqual(self.animation.get_frame(1).get_size(), (20, 20))\n\n    def test_clip(self):\n        self.assertEqual(clip(5, 2, 10), 5)\n        self.assertEqual(clip(1, 2, 10), 2)\n        self.assertEqual(clip(11, 2, 10), 10)\n\n\nclass TestSurfaceAnimationCollection(unittest.TestCase):\n    def setUp(self):\n        frames = [\n            (pygame.Surface((10, 10)), 1.0),\n            (pygame.Surface((20, 20)), 2.0),\n        ]\n        self.animation = SurfaceAnimation(frames)\n\n    def test_init(self):\n        collection = SurfaceAnimationCollection()\n        self.assertEqual(collection._animations, [])\n        self.assertEqual(collection._state, STOPPED)\n\n    def test_add_single_animation(self):\n        collection = SurfaceAnimationCollection(self.animation)\n        self.assertEqual(collection._animations, [self.animation])\n\n    def test_add_sequence_of_animations(self):\n        animations = [self.animation for _ in range(3)]\n        collection = SurfaceAnimationCollection(*animations)\n        self.assertEqual(collection._animations, animations)\n\n    def test_add_mapping_of_animations(self):\n        animations = {\"a\": self.animation, \"b\": self.animation}\n        collection = SurfaceAnimationCollection(animations)\n        self.assertEqual(collection._animations, list(animations.values()))\n\n    def test_add_multiple_animations(self):\n        animations = [self.animation for _ in range(3)]\n        collection = SurfaceAnimationCollection()\n        collection.add(*animations)\n        self.assertEqual(collection._animations, animations)\n\n    def test_play(self):\n        collection = SurfaceAnimationCollection(self.animation)\n        collection.play()\n        self.assertEqual(collection._state, PLAYING)\n\n    def test_pause(self):\n        collection = SurfaceAnimationCollection(self.animation)\n        collection.pause()\n        self.assertEqual(collection._state, PAUSED)\n\n    def test_stop(self):\n        collection = SurfaceAnimationCollection(self.animation)\n        collection.stop()\n        self.assertEqual(collection._state, STOPPED)\n\n    def test_state_property(self):\n        collection = SurfaceAnimationCollection(self.animation)\n        self.assertEqual(collection.state, STOPPED)\n\n    def test_remove(self):\n        animations = [self.animation for _ in range(3)]\n        collection = SurfaceAnimationCollection(*animations)\n        self.assertEqual(len(collection.animations), 3)\n        collection.remove(self.animation)\n        self.assertEqual(len(collection.animations), 2)\n\n    def test_clear(self):\n        animations = [self.animation for _ in range(3)]\n        collection = SurfaceAnimationCollection(*animations)\n        self.assertEqual(len(collection.animations), 3)\n        collection.clear()\n        self.assertEqual(len(collection.animations), 0)"
