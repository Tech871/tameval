[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "lss233/kirara-ai"
sha = "8295a5deda0b289a3f70d946064b6c9a3e1b0753"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=kirara_ai/workflow/implementations/blocks/game/dice.py -m pytest -q --junit-xml=test_output.xml tests/system_blocks/game/test_dice.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target kirara_ai.workflow.implementations.blocks.game.dice --unit-test tests.system_blocks.game.test_dice --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target kirara_ai/workflow/implementations/blocks/game/dice.py --unit-test tests/system_blocks/game/test_dice.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 62.0
original_coverage = 100.0
mutation_kill_rate = 43.0
original_mutation_kill_rate = 71.0
covered_lines = [ 0, 1, 2, 4, 5, 6, 7, 10, 13, 14, 17, 23, 25, 26, 27, 28,]
missed_lines = [ 35, 36, 38, 39, 47, 48, 51, 52, 53, 55,]

[input_info]
test_file_path = "tests/system_blocks/game/test_dice.py"
focal_file_path = "kirara_ai/workflow/implementations/blocks/game/dice.py"
test_file_url = "https://github.com/lss233/kirara-ai/blob/8295a5deda0b289a3f70d946064b6c9a3e1b0753/tests/system_blocks/game/test_dice.py"
focal_file_url = "https://github.com/lss233/kirara-ai/blob/8295a5deda0b289a3f70d946064b6c9a3e1b0753/kirara_ai/workflow/implementations/blocks/game/dice.py"
first_commit_date = "2025-02-23"
last_commit_date = "2025-04-02"
test_file_content = "import pytest\n\nfrom kirara_ai.im.message import IMMessage, TextMessage\nfrom kirara_ai.im.sender import ChatSender\nfrom kirara_ai.ioc.container import DependencyContainer\nfrom kirara_ai.workflow.implementations.blocks.game.dice import DiceRoll\n\n@pytest.fixture\ndef container():\n    \"\"\"创建一个依赖容器\"\"\"\n    return DependencyContainer()\n\n@pytest.fixture\ndef create_message():\n    def _create(content: str) -> IMMessage:\n        return IMMessage(\n            sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n            message_elements=[TextMessage(content)]\n        )\n\n    return _create\n\ndef test_dice_roll_invalid(container, create_message):\n    \"\"\"测试无效的骰子命令\"\"\"\n    block = DiceRoll()\n    block.container = container\n    result = block.execute(create_message(\"invalid command\"))\n\n    assert \"response\" in result\n    response = result[\"response\"]\n    assert isinstance(response, IMMessage)\n    assert \"Invalid dice command\" in response.content or \"无效\" in response.content\n"
