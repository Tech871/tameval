[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "Threagile/threagile"
sha = "9c1d403638a1f7d83faa4c528531c6c5025885c8"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/risks/builtin/accidental_secret_leak_rule.go pkg/risks/builtin/accidental_secret_leak_rule_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/risks/builtin/accidental_secret_leak_rule.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 46.0
original_coverage = 46.0
mutation_kill_rate = 40.0
original_mutation_kill_rate = 40.0
covered_lines = [ 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,]
missed_lines = [ 41, 42, 43, 44, 106, 107, 108, 109, 110, 111, 112, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210,]

[input_info]
test_file_path = "pkg/risks/builtin/accidental_secret_leak_rule_test.go"
focal_file_path = "pkg/risks/builtin/accidental_secret_leak_rule.go"
test_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/accidental_secret_leak_rule_test.go"
focal_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/accidental_secret_leak_rule.go"
first_commit_date = "2024-06-07"
last_commit_date = "2025-07-04"
test_file_content = "package builtin\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/threagile/threagile/pkg/types\"\n)\n\nfunc TestAccidentalSecretLeakRuleGenerateRisksEmptyModelNotRisksCreated(t *testing.T) {\n\trule := NewAccidentalSecretLeakRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestAccidentalSecretLeakRuleGenerateRisksOutOfScopeNotRisksCreated(t *testing.T) {\n\trule := NewAccidentalSecretLeakRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tOutOfScope: true,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestAccidentalSecretLeakRuleGenerateRisksTechAssetNotContainSecretsNotRisksCreated(t *testing.T) {\n\trule := NewAccidentalSecretLeakRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"tool\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.MayContainSecrets: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestAccidentalSecretLeakRuleGenerateRisksTechAssetGitContainSecretsRisksCreated(t *testing.T) {\n\trule := NewAccidentalSecretLeakRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"git repository\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.MayContainSecrets: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTags: []string{\"git\"},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Equal(t, len(risks), 1)\n\tassert.Contains(t, risks[0].Title, \"Accidental Secret Leak (Git)\")\n}\n\nfunc TestAccidentalSecretLeakRuleGenerateRisksTechAssetNotGitContainSecretsRisksCreated(t *testing.T) {\n\trule := NewAccidentalSecretLeakRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"git repository\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.MayContainSecrets: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Equal(t, len(risks), 1)\n\tassert.Equal(t, \"<b>Accidental Secret Leak</b> risk at <b></b>\", risks[0].Title)\n}\n\nfunc TestAccidentalSecretLeakRuleGenerateRisksTechAssetProcessStrictlyConfidentialDataAssetHighImpactRiskCreated(t *testing.T) {\n\trule := NewAccidentalSecretLeakRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"git repository\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.MayContainSecrets: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tDataAssetsProcessed: []string{\"confidential-data-asset\", \"strictly-confidential-data-asset\"},\n\t\t\t},\n\t\t},\n\t\tDataAssets: map[string]*types.DataAsset{\n\t\t\t\"confidential-data-asset\": {\n\t\t\t\tConfidentiality: types.Confidential,\n\t\t\t},\n\t\t\t\"strictly-confidential-data-asset\": {\n\t\t\t\tConfidentiality: types.StrictlyConfidential,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Equal(t, len(risks), 1)\n\tassert.Equal(t, types.HighImpact, risks[0].ExploitationImpact)\n}\n"
