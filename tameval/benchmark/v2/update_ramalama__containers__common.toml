[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "containers/ramalama"
sha = "2c94e5f39c1f6c3253832353cbc2a225479b1dea"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ramalama/common.py -m pytest -q --junit-xml=test_output.xml test/unit/test_common.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ramalama.common --unit-test test.unit.test_common --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ramalama/common.py --unit-test test/unit/test_common.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 37.0
original_coverage = 45.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 27, 28, 29, 30, 31, 33, 34, 36, 38, 41, 46, 50, 53, 72, 90, 91, 92, 93, 94, 95, 96, 97, 98, 104, 108, 109, 112, 117, 134, 165, 169, 184, 197, 201, 202, 203, 204, 205, 206, 208, 210, 211, 214, 215, 216, 217, 220, 223, 227, 233, 234, 237, 238, 241, 258, 286, 309, 323, 329, 330, 373, 385, 414, 443, 455, 458, 459, 467, 468, 469, 470, 473, 480, 481, 482, 484, 487, 498, 499, 502, 509, 515, 516, 517, 519, 522, 523, 524, 525, 527, 530, 531, 532, 536, 560, 591, 592, 595, 596, 599, 600, 601, 602, 605, 606, 607, 608, 609, 612, 617, 622, 623, 625, 626, 629, 632, 633, 636, 639, 641, 642, 645, 648,]
missed_lines = [ 43, 47, 54, 55, 65, 66, 67, 68, 69, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 87, 99, 100, 101, 105, 114, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 162, 166, 179, 180, 181, 198, 224, 229, 230, 249, 250, 251, 252, 253, 254, 255, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 303, 304, 306, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 324, 325, 326, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 345, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 374, 375, 376, 377, 378, 379, 380, 382, 386, 387, 388, 390, 391, 393, 394, 395, 396, 400, 401, 403, 404, 405, 407, 408, 409, 411, 415, 417, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 444, 445, 446, 447, 448, 449, 450, 452, 474, 475, 477, 510, 511, 512, 518, 526, 533, 543, 545, 546, 549, 550, 551, 552, 553, 554, 555, 557, 574, 576, 577, 580, 583, 584, 585, 586, 588, 634, 637, 643, 649, 651, 652, 654, 655, 657, 658, 660, 662, 663, 664, 665, 667, 668,]

[input_info]
test_file_path = "test/unit/test_common.py"
focal_file_path = "ramalama/common.py"
test_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/test/unit/test_common.py"
focal_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/ramalama/common.py"
first_commit_date = "2024-08-22"
last_commit_date = "2025-08-08"
test_file_content = "import os\nimport shutil\nimport tempfile\nfrom contextlib import ExitStack\nfrom pathlib import Path\nfrom sys import platform\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom ramalama.cli import configure_subcommands, create_argument_parser\nfrom ramalama.common import accel_image, get_accel, rm_until_substring, verify_checksum\nfrom ramalama.config import DEFAULT_IMAGE, default_config\n\n\n@pytest.mark.parametrize(\n    \"input,rm_until,expected\",\n    [\n        (\"\", \"\", \"\"),\n        (\"huggingface://granite-code\", \"://\", \"granite-code\"),\n        (\"hf://granite-code\", \"://\", \"granite-code\"),\n        (\"hf.co/granite-code\", \"hf.co/\", \"granite-code\"),\n        (\n            \"http://huggingface.co/ibm-granite/granite-3b-code-base-2k-GGUF/blob/main/granite-3b-code-base.Q4_K_M.gguf\",\n            \".co/\",\n            \"ibm-granite/granite-3b-code-base-2k-GGUF/blob/main/granite-3b-code-base.Q4_K_M.gguf\",\n        ),\n        (\"modelscope://granite-code\", \"://\", \"granite-code\"),\n        (\"ms://granite-code\", \"://\", \"granite-code\"),\n        (\n            \"file:///tmp/models/granite-3b-code-base.Q4_K_M.gguf\",\n            \"\",\n            \"file:///tmp/models/granite-3b-code-base.Q4_K_M.gguf\",\n        ),\n    ],\n)\ndef test_rm_until_substring(input: str, rm_until: str, expected: str):\n    actual = rm_until_substring(input, rm_until)\n    assert actual == expected\n\n\nvalid_input = \"\"\"{{ if .System }}<|im_start|>system\n{{ .System }}<|im_end|>\n{{ end }}{{ if .Prompt }}<|im_start|>user\n{{ .Prompt }}<|im_end|>\n{{ end }}<|im_start|>assistant\n{{ .Response }}<|im_end|>\n\"\"\"\n\ntampered_input = \"\"\"{\"model_format\":\"gguf\",\"model_family\":\"llama\",\"model_families\":[\"llama\"],\"model_type\":\"361.82M\",\"file_type\":\"Q4_0\",\"architecture\":\"amd64\",\"os\":\"linux\",\"rootfs\":{\"type\":\"layers\",\"diff_ids\":[\"sha256:f7ae49f9d598730afa2de96fc7dade47f5850446bf813df2e9d739cc8a6c4f29\",\"sha256:62fbfd9ed093d6e5ac83190c86eec5369317919f4b149598d2dbb38900e9faef\",\"sha256:cfc7749b96f63bd31c3c42b5c471bf756814053e847c10f3eb003417bc523d30\",\"sha256:ca7a9654b5469dc2d638456f31a51a03367987c54135c089165752d9eeb08cd7\"]}}\n\nI have been tampered with\n\n\"\"\"  # noqa: E501\n\n\n@pytest.mark.parametrize(\n    \"input_file_name,content,expected_error,expected_result\",\n    [\n        (\"invalidname\", \"\", ValueError, None),\n        (\"sha256:123\", \"RamaLama - make working with AI boring through the use of OCI containers.\", ValueError, None),\n        (\"sha256:62fbfd9ed093d6e5ac83190c86eec5369317919f4b149598d2dbb38900e9faef\", valid_input, None, True),\n        (\"sha256-62fbfd9ed093d6e5ac83190c86eec5369317919f4b149598d2dbb38900e9faef\", valid_input, None, True),\n        (\"sha256:16cd1aa2bd52b0e87ff143e8a8a7bb6fcb0163c624396ca58e7f75ec99ef081f\", tampered_input, None, False),\n    ],\n)\ndef test_verify_checksum(\n    input_file_name: str, content: str, expected_error: type[Exception] | None, expected_result: bool\n):\n    # skip this test case on Windows since colon is not a valid file symbol\n    if \":\" in input_file_name and platform == \"win32\":\n        return\n\n    full_dir_path = os.path.join(Path(__file__).parent, \"verify_checksum\")\n    file_path = os.path.join(full_dir_path, input_file_name)\n\n    try:\n        os.makedirs(full_dir_path, exist_ok=True)\n        with open(file_path, \"w\") as f:\n            f.write(content)\n\n        if expected_error is None:\n            assert verify_checksum(file_path) == expected_result\n            return\n\n        with pytest.raises(expected_error):\n            verify_checksum(file_path)\n    finally:\n        shutil.rmtree(full_dir_path)\n\n\nDEFAULT_IMAGES = {\n    \"HIP_VISIBLE_DEVICES\": \"quay.io/ramalama/rocm\",\n}\n\n\n@pytest.mark.parametrize(\n    \"accel_env,env_override,config_override,expected_result\",\n    [\n        (None, None, None, f\"{DEFAULT_IMAGE}:latest\"),\n        (None, f\"{DEFAULT_IMAGE}:latest\", None, f\"{DEFAULT_IMAGE}:latest\"),\n        (None, None, f\"{DEFAULT_IMAGE}:latest\", f\"{DEFAULT_IMAGE}:latest\"),\n        (\"HIP_VISIBLE_DEVICES\", None, None, \"quay.io/ramalama/rocm:latest\"),\n        (\"HIP_VISIBLE_DEVICES\", f\"{DEFAULT_IMAGE}:latest\", None, f\"{DEFAULT_IMAGE}:latest\"),\n        (\"HIP_VISIBLE_DEVICES\", None, f\"{DEFAULT_IMAGE}:latest\", f\"{DEFAULT_IMAGE}:latest\"),\n    ],\n)\ndef test_accel_image(accel_env: str, env_override, config_override: str, expected_result: str, monkeypatch):\n    monkeypatch.setattr(\"ramalama.common.get_accel\", lambda: \"none\")\n    monkeypatch.setattr(\"ramalama.common.attempt_to_use_versioned\", lambda *args, **kwargs: False)\n\n    with tempfile.NamedTemporaryFile('w', delete_on_close=False) as f:\n        cmdline = []\n        cmdline.extend([\"run\", \"granite\"])\n\n        env = {}\n        if config_override:\n            f.write(\n                f\"\"\"\\\n[ramalama]\nimage = \"{config_override}\"\n                \"\"\"\n            )\n            f.flush()\n            env[\"RAMALAMA_CONFIG\"] = f.name\n        else:\n            env[\"RAMALAMA_CONFIG\"] = \"/dev/null\"\n\n        if accel_env:\n            env[accel_env] = \"1\"\n        if env_override:\n            env[\"RAMALAMA_IMAGE\"] = env_override\n\n        with patch.dict(\"os.environ\", env, clear=True):\n\n            config = default_config()\n            with patch(\"ramalama.cli.CONFIG\", config):\n                parser = create_argument_parser(\"test_accel_image\")\n                configure_subcommands(parser)\n                assert accel_image(config) == expected_result\n\n\n@patch(\"ramalama.config.CONFIG\")\n@patch(\"ramalama.common.run_cmd\")\n@patch(\"ramalama.common.handle_provider\")\ndef test_apple_vm_returns_result(mock_handle_provider, mock_run_cmd, mock_config):\n    mock_run_cmd.return_value.stdout = b'[{\"Name\": \"myvm\"}]'\n    mock_handle_provider.return_value = True\n    mock_config.user.no_missing_gpu_prompt = True\n    from ramalama.common import apple_vm\n\n    result = apple_vm(\"podman\", mock_config)\n\n    assert result is True\n    mock_run_cmd.assert_called_once_with(\n        [\"podman\", \"machine\", \"list\", \"--format\", \"json\", \"--all-providers\"], ignore_stderr=True\n    )\n    mock_handle_provider.assert_called_once_with({\"Name\": \"myvm\"}, mock_config)\n\n\nclass TestGetAccel:\n    accels = [\n        (\"check_rocm_amd\", \"hip\"),\n        (\"check_nvidia\", \"cuda\"),\n        (\"check_mthreads\", \"musa\"),\n        (\"check_intel\", \"intel\"),\n        (\"check_ascend\", \"cann\"),\n        (\"check_asahi\", \"asahi\"),\n    ]\n\n    @pytest.mark.parametrize(\"accel,expected\", accels)\n    def test_get_accel(self, accel, expected):  # sourcery skip: no-loop-in-tests\n        with ExitStack() as stack:\n            for other_accel, _ in self.accels:\n                return_value = expected if other_accel == accel else None\n                stack.enter_context(patch(f\"ramalama.common.{other_accel}\", return_value=return_value))\n            returned_accel = get_accel()\n            assert returned_accel == expected\n\n    def test_default_get_accel(self):  # sourcery skip: no-loop-in-tests\n        with ExitStack() as stack:\n            for other_accel, _ in self.accels:\n                stack.enter_context(patch(f\"ramalama.common.{other_accel}\", return_value=None))\n            returned_accel = get_accel()\n            assert returned_accel == \"none\""
