[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "AlexGustafsson/cupdate"
sha = "1d16570b6ddcce6fef954443916636cfcc74cae2"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/rss/rss.go internal/rss/rss_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/rss/rss.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 60.0
original_coverage = 60.0
mutation_kill_rate = 33.0
original_mutation_kill_rate = 33.0
covered_lines = [ 39, 40, 41, 43, 44, 45, 50, 55, 56,]
missed_lines = [ 46, 47, 48, 51, 52, 53,]

[input_info]
test_file_path = "internal/rss/rss_test.go"
focal_file_path = "internal/rss/rss.go"
test_file_url = "https://github.com/AlexGustafsson/cupdate/blob/1d16570b6ddcce6fef954443916636cfcc74cae2/internal/rss/rss_test.go"
focal_file_url = "https://github.com/AlexGustafsson/cupdate/blob/1d16570b6ddcce6fef954443916636cfcc74cae2/internal/rss/rss.go"
first_commit_date = "2024-12-14"
last_commit_date = "2025-02-25"
test_file_content = "package rss\n\nimport (\n\t\"encoding/xml\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestMarshalRSS(t *testing.T) {\n\tfeed := Feed{\n\t\tVersion: \"2.0\",\n\t\tChannels: []Channel{\n\t\t\t{\n\t\t\t\tTitle:       \"First channel\",\n\t\t\t\tLink:        \"https://example.com/first-channel\",\n\t\t\t\tDescription: \"The first channel\",\n\t\t\t\tItems: []Item{\n\t\t\t\t\t{\n\t\t\t\t\t\tGUID:        \"1\",\n\t\t\t\t\t\tPubDate:     Time(time.Date(2024, 12, 14, 12, 37, 0, 0, time.UTC)),\n\t\t\t\t\t\tTitle:       \"First item\",\n\t\t\t\t\t\tLink:        \"https://example.com/first-channel/first-item\",\n\t\t\t\t\t\tDescription: \"The first item\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tGUID:        \"2\",\n\t\t\t\t\t\tPubDate:     Time(time.Date(2024, 12, 14, 12, 37, 0, 0, time.UTC)),\n\t\t\t\t\t\tTitle:       \"Second item\",\n\t\t\t\t\t\tLink:        \"https://example.com/first-channel/second-item\",\n\t\t\t\t\t\tDescription: \"The second item\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\texpected := `<rss version=\"2.0\">\n\t<channel>\n\t\t<title>First channel</title>\n\t\t<link>https://example.com/first-channel</link>\n\t\t<description>The first channel</description>\n\t\t<item>\n\t\t\t<guid>1</guid>\n\t\t\t<pubDate>Sat, 14 Dec 2024 12:37:00 UTC</pubDate>\n\t\t\t<title>First item</title>\n\t\t\t<link>https://example.com/first-channel/first-item</link>\n\t\t\t<description>The first item</description>\n\t\t</item>\n\t\t<item>\n\t\t\t<guid>2</guid>\n\t\t\t<pubDate>Sat, 14 Dec 2024 12:37:00 UTC</pubDate>\n\t\t\t<title>Second item</title>\n\t\t\t<link>https://example.com/first-channel/second-item</link>\n\t\t\t<description>The second item</description>\n\t\t</item>\n\t</channel>\n</rss>`\n\n\tactual, err := xml.MarshalIndent(&feed, \"\", \"\\t\")\n\trequire.NoError(t, err)\n\n\tassert.Equal(t, expected, string(actual))\n}\n\nfunc TestUnmarshalXML(t *testing.T) {\n\tfeed := `<rss version=\"2.0\">\n\t<channel>\n\t\t<title>First channel</title>\n\t\t<link>https://example.com/first-channel</link>\n\t\t<description>The first channel</description>\n\t\t<item>\n\t\t\t<guid>1</guid>\n\t\t\t<pubDate>Sat, 14 Dec 2024 12:37:00 UTC</pubDate>\n\t\t\t<title>First item</title>\n\t\t\t<link>https://example.com/first-channel/first-item</link>\n\t\t\t<description>The first item</description>\n\t\t</item>\n\t\t<item>\n\t\t\t<guid>2</guid>\n\t\t\t<pubDate>Sat, 14 Dec 2024 12:37:00 UTC</pubDate>\n\t\t\t<title>Second item</title>\n\t\t\t<link>https://example.com/first-channel/second-item</link>\n\t\t\t<description>The second item</description>\n\t\t</item>\n\t</channel>\n</rss>`\n\n\texpected := Feed{\n\t\tXMLName: xml.Name{\n\t\t\tSpace: \"\",\n\t\t\tLocal: \"rss\",\n\t\t},\n\t\tVersion: \"2.0\",\n\t\tChannels: []Channel{\n\t\t\t{\n\t\t\t\tXMLName: xml.Name{\n\t\t\t\t\tSpace: \"\",\n\t\t\t\t\tLocal: \"channel\",\n\t\t\t\t},\n\t\t\t\tTitle:       \"First channel\",\n\t\t\t\tLink:        \"https://example.com/first-channel\",\n\t\t\t\tDescription: \"The first channel\",\n\t\t\t\tItems: []Item{\n\t\t\t\t\t{\n\t\t\t\t\t\tXMLName: xml.Name{\n\t\t\t\t\t\t\tSpace: \"\",\n\t\t\t\t\t\t\tLocal: \"item\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tGUID:        \"1\",\n\t\t\t\t\t\tPubDate:     Time(time.Date(2024, 12, 14, 12, 37, 0, 0, time.UTC)),\n\t\t\t\t\t\tTitle:       \"First item\",\n\t\t\t\t\t\tLink:        \"https://example.com/first-channel/first-item\",\n\t\t\t\t\t\tDescription: \"The first item\",\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tXMLName: xml.Name{\n\t\t\t\t\t\t\tSpace: \"\",\n\t\t\t\t\t\t\tLocal: \"item\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tGUID:        \"2\",\n\t\t\t\t\t\tPubDate:     Time(time.Date(2024, 12, 14, 12, 37, 0, 0, time.UTC)),\n\t\t\t\t\t\tTitle:       \"Second item\",\n\t\t\t\t\t\tLink:        \"https://example.com/first-channel/second-item\",\n\t\t\t\t\t\tDescription: \"The second item\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tvar actual Feed\n\terr := xml.Unmarshal([]byte(feed), &actual)\n\trequire.NoError(t, err)\n\n\tassert.Equal(t, expected, actual)\n}\n"
