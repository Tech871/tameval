[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "google-deepmind/android_env"
sha = "827047088b9e932f29a951d734962bf855587521"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=android_env/wrappers/base_wrapper.py -m pytest -q --junit-xml=test_output.xml android_env/wrappers/base_wrapper_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target android_env.wrappers.base_wrapper --unit-test android_env.wrappers.base_wrapper_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target android_env/wrappers/base_wrapper.py --unit-test android_env/wrappers/base_wrapper_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 57.0
original_coverage = 94.0
mutation_kill_rate = 0
original_mutation_kill_rate = 88.0
covered_lines = [ 17, 19, 20, 21, 22, 23, 24, 25, 28, 31, 32, 33, 35, 40, 44, 47, 50, 53, 56, 59, 62, 65, 68, 72, 77, 83, 98, 103, 104, 107, 108, 111, 112, 119, 123, 124,]
missed_lines = [ 36, 37, 38, 41, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 73, 74, 75, 81, 96, 101, 105, 109, 114, 115, 116, 117, 121,]

[input_info]
test_file_path = "android_env/wrappers/base_wrapper_test.py"
focal_file_path = "android_env/wrappers/base_wrapper.py"
test_file_url = "https://github.com/google-deepmind/android_env/blob/827047088b9e932f29a951d734962bf855587521/android_env/wrappers/base_wrapper_test.py"
focal_file_url = "https://github.com/google-deepmind/android_env/blob/827047088b9e932f29a951d734962bf855587521/android_env/wrappers/base_wrapper.py"
first_commit_date = "2021-08-23"
last_commit_date = "2025-07-21"
test_file_content = "\n\n\nfrom unittest import mock\n\nfrom absl import logging\nfrom absl.testing import absltest\nfrom android_env import env_interface\nfrom android_env.proto import state_pb2\nfrom android_env.wrappers import base_wrapper\n\n\nclass BaseWrapperTest(absltest.TestCase):\n\n  @mock.patch.object(logging, 'info')\n  def test_base_function_forwarding(self, mock_info):\n    base_env = mock.create_autospec(env_interface.AndroidEnvInterface)\n    wrapped_env = base_wrapper.BaseWrapper(base_env)\n\n    fake_ts = 'fake_ts'\n    base_env.reset.return_value = fake_ts\n\n    fake_ts = 'fake_ts'\n    fake_action = 'fake_action'\n    base_env.step.return_value = fake_ts\n\n    fake_extras = 'fake_task_extras'\n    base_env.task_extras.return_value = fake_extras\n\n    fake_obs_spec = 'fake_obs_spec'\n    base_env.observation_spec.return_value = fake_obs_spec\n\n    fake_action_spec = 'fake_action_spec'\n    base_env.action_spec.return_value = fake_action_spec\n\n    fake_raw_action = 'fake_raw_action'\n    type(base_env).raw_action = mock.PropertyMock(return_value=fake_raw_action)\n\n    fake_raw_observation = 'fake_raw_observation'\n    type(base_env).raw_observation = mock.PropertyMock(\n        return_value=fake_raw_observation)\n\n    load_request = state_pb2.LoadStateRequest(args={})\n    expected_response = state_pb2.LoadStateResponse(\n        status=state_pb2.LoadStateResponse.Status.OK\n    )\n    base_env.load_state.return_value = expected_response\n\n    save_request = state_pb2.SaveStateRequest(args={})\n    expected_response = state_pb2.SaveStateResponse(\n        status=state_pb2.SaveStateResponse.Status.OK\n    )\n    base_env.save_state.return_value = expected_response\n\n    wrapped_env.close()\n\n    fake_return_value = 'fake'\n    with self.assertRaises(AttributeError):\n      base_env.some_random_function.return_value = fake_return_value\n\n  def test_multiple_wrappers(self):\n    base_env = mock.create_autospec(env_interface.AndroidEnvInterface)\n    wrapped_env_1 = base_wrapper.BaseWrapper(base_env)\n    wrapped_env_2 = base_wrapper.BaseWrapper(wrapped_env_1)\n\n    wrapped_env_2.close()\n\n  def test_raw_env(self):\n    base_env = mock.create_autospec(env_interface.AndroidEnvInterface)\n    wrapped_env_1 = base_wrapper.BaseWrapper(base_env)\n    wrapped_env_2 = base_wrapper.BaseWrapper(wrapped_env_1)\n\n  def test_stats(self):\n    base_env = mock.create_autospec(env_interface.AndroidEnvInterface)\n    wrapped_env = base_wrapper.BaseWrapper(base_env)\n    base_stats = {'base': 'stats'}\n    base_env.stats.return_value = base_stats\n\n  @mock.patch.object(logging, 'info')\n  def test_wrapped_stats(self, mock_info):\n    base_env = mock.create_autospec(env_interface.AndroidEnvInterface)\n\n    class LoggingWrapper1(base_wrapper.BaseWrapper):\n\n      def _wrapper_stats(self):\n        return {\n            'wrapper1': 'stats',\n            'shared': 1,\n        }\n\n    class LoggingWrapper2(base_wrapper.BaseWrapper):\n\n      def _wrapper_stats(self):\n        return {\n            'wrapper2': 'stats',\n            'shared': 2,\n        }\n\n    wrapped_env = LoggingWrapper2(LoggingWrapper1(base_env))\n    base_stats = {'base': 'stats'}\n    base_env.stats.return_value = base_stats\n    expected_stats = {\n        'base': 'stats',\n        'wrapper1': 'stats',\n        'wrapper2': 'stats',\n        'shared': 2,\n    }\n\n\n\nif __name__ == '__main__':\n  absltest.main()"
