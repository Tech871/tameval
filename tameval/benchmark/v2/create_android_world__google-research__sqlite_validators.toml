[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "google-research/android_world"
sha = "05afc97ecab2ad235e2fc2a40e740f0102a3bcbc"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=android_world/task_evals/common_validators/sqlite_validators.py -m pytest -q --junit-xml=test_output.xml android_world/task_evals/common_validators/sqlite_validators_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target android_world.task_evals.common_validators.sqlite_validators --unit-test android_world.task_evals.common_validators.sqlite_validators_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target android_world/task_evals/common_validators/sqlite_validators.py --unit-test android_world/task_evals/common_validators/sqlite_validators_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 61.0
original_coverage = 61.0
mutation_kill_rate = 20.0
original_mutation_kill_rate = 20.0
covered_lines = [ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 44, 52, 53, 55, 56, 57, 65, 67, 69, 72, 95, 96, 97, 100, 102, 103, 104, 105, 107, 110, 111, 114, 117, 143, 145, 148, 152, 153, 154, 156, 157, 158, 160, 161, 162, 165, 166, 167, 170, 172, 173, 180, 183, 184, 191, 195, 196, 199, 202, 203, 204, 205, 206, 208, 227, 243, 256, 264, 270, 273, 275, 279, 284, 285, 303, 311, 312, 313, 316, 317, 325, 328, 329, 331, 336, 347, 359, 370, 371, 379, 382, 399, 410,]
missed_lines = [ 112, 144, 146, 185, 189, 223, 233, 245, 248, 249, 250, 251, 258, 259, 260, 261, 262, 266, 267, 276, 277, 281, 282, 305, 306, 309, 319, 320, 321, 322, 332, 333, 334, 340, 341, 349, 350, 351, 352, 353, 354, 356, 357, 361, 364, 367, 368, 386, 387, 390, 391, 392, 393, 394, 395, 403, 404, 412, 413, 414,]

[input_info]
test_file_path = "android_world/task_evals/common_validators/sqlite_validators_test.py"
focal_file_path = "android_world/task_evals/common_validators/sqlite_validators.py"
test_file_url = "https://github.com/google-research/android_world/blob/05afc97ecab2ad235e2fc2a40e740f0102a3bcbc/android_world/task_evals/common_validators/sqlite_validators_test.py"
focal_file_url = "https://github.com/google-research/android_world/blob/05afc97ecab2ad235e2fc2a40e740f0102a3bcbc/android_world/task_evals/common_validators/sqlite_validators.py"
first_commit_date = "2024-05-16"
last_commit_date = "2025-06-02"
test_file_content = "# Copyright 2025 The android_world Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport sqlite3\nfrom absl.testing import absltest\nfrom android_world.task_evals.common_validators import sqlite_validators\nfrom android_world.task_evals.utils import sqlite_schema_utils\nfrom android_world.task_evals.utils import sqlite_test_utils\nfrom android_world.task_evals.utils import sqlite_utils\nfrom android_world.utils import datetime_utils\n\n\ndef remove_event_by_event_id(db_path: str, event_id: int):\n  \"\"\"Remove an event by its ID.\"\"\"\n  conn = sqlite3.connect(db_path)\n  cursor = conn.cursor()\n  cursor.execute('DELETE FROM events WHERE id=?', (event_id,))\n  conn.commit()\n  conn.close()\n\n\ndef add_event_to_db(db_path: str, event: sqlite_schema_utils.CalendarEvent):\n  \"\"\"Adds a new event to the database.\"\"\"\n  conn = sqlite3.connect(db_path)\n\n  insert_command, values = sqlite_schema_utils.insert_into_db(\n      event, 'events', 'id'\n  )\n  cursor = conn.cursor()\n  cursor.execute(insert_command, values)\n\n  conn.commit()\n  conn.close()\n\n\ndef _validate_event_addition_integrity(\n    before: list[sqlite_schema_utils.CalendarEvent],\n    after: list[sqlite_schema_utils.CalendarEvent],\n    reference_events: list[sqlite_schema_utils.CalendarEvent],\n) -> bool:\n  return sqlite_validators.validate_rows_addition_integrity(\n      before,\n      after,\n      reference_events,\n      [\n          'start_ts',\n          'end_ts',\n          'title',\n          'location',\n          'description',\n      ],\n      ['title', 'location', 'description'],\n  )\n\n\nclass TestRemoveEvent(absltest.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    self.test_db_path = sqlite_test_utils.setup_test_db()\n\n  def test_single_event_removed_correctly(self):\n    event_id = 1\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    remove_event_by_event_id(self.test_db_path, event_id)\n    post_removal_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertTrue(\n        sqlite_validators.validate_rows_removal_integrity(\n            initial_state, post_removal_state, [event_id], 'id'\n        )\n    )\n\n  def test_single_event_not_removed(self):\n    event_id = 1\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    post_removal_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertFalse(\n        sqlite_validators.validate_rows_removal_integrity(\n            initial_state, post_removal_state, [event_id], 'id'\n        )\n    )\n\n  def test_wrong_single_event_removed(self):\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    remove_event_by_event_id(self.test_db_path, 1)\n    post_removal_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertFalse(\n        sqlite_validators.validate_rows_removal_integrity(\n            initial_state, post_removal_state, [2], 'id'\n        )\n    )\n\n  def test_multiple_events_removed_correctly(self):\n    event_ids = [2, 3]\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    for event_id in event_ids:\n      remove_event_by_event_id(self.test_db_path, event_id)\n    post_removal_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertTrue(\n        sqlite_validators.validate_rows_removal_integrity(\n            initial_state, post_removal_state, event_ids, 'id'\n        )\n    )\n\n  def test_multiple_events_not_removed(self):\n    event_ids = [2, 3]\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    post_removal_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertFalse(\n        sqlite_validators.validate_rows_removal_integrity(\n            initial_state, post_removal_state, event_ids, 'id'\n        )\n    )\n\n  def test_remove_event_with_side_effects(self):\n    # Test case: Remove events 4 and 5 but check only for event 4.\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n\n    # Remove events 4 and 5\n    remove_event_by_event_id(self.test_db_path, 4)\n    remove_event_by_event_id(self.test_db_path, 5)\n\n    post_removal_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n\n    # Verify that while event 4 was removed, 5 was also removed meaning\n    # there was an unintentional side-effect.\n    self.assertFalse(\n        sqlite_validators.validate_rows_removal_integrity(\n            initial_state,\n            post_removal_state,\n            [4],\n            'id',\n        )\n    )\n\n  def test_event_not_in_before(self):\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    with self.assertRaises(ValueError):\n      sqlite_validators.validate_rows_removal_integrity(\n          initial_state, initial_state, [-999], 'id'\n      )\n\n\nclass TestAddEvent(absltest.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    self.test_db_path = sqlite_test_utils.setup_test_db()\n\n  def test_single_event_added_correctly(self):\n    new_event = sqlite_schema_utils.CalendarEvent(\n        start_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=9\n        ),\n        end_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=10\n        ),\n        title='Coffee',\n        location='Cafe',\n        description='Coffee with Alex',\n    )\n\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    add_event_to_db(self.test_db_path, new_event)\n    post_addition_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n\n    self.assertTrue(\n        _validate_event_addition_integrity(\n            initial_state, post_addition_state, [new_event]\n        )\n    )\n\n  def test_multiple_events_added_correctly(self):\n    new_events = [\n        sqlite_schema_utils.CalendarEvent(\n            start_ts=datetime_utils._create_unix_ts(\n                year=2023, month=10, day=6, hour=11\n            ),\n            end_ts=datetime_utils._create_unix_ts(\n                year=2023, month=10, day=6, hour=12\n            ),\n            title='Lunch',\n            location='Restaurant',\n            description='Lunch with Bob',\n        ),\n        sqlite_schema_utils.CalendarEvent(\n            start_ts=datetime_utils._create_unix_ts(\n                year=2023, month=10, day=7, hour=14\n            ),\n            end_ts=datetime_utils._create_unix_ts(\n                year=2023, month=10, day=7, hour=15\n            ),\n            title='Meeting',\n            location='Office',\n            description='Project meeting',\n        ),\n    ]\n\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    for event in new_events:\n      add_event_to_db(self.test_db_path, event)\n    post_addition_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n\n    self.assertTrue(\n        _validate_event_addition_integrity(\n            initial_state, post_addition_state, new_events\n        )\n    )\n\n  def test_no_event_added(self):\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    post_addition_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertTrue(\n        _validate_event_addition_integrity(\n            initial_state, post_addition_state, []\n        )\n    )\n\n  def test_wrong_event_added(self):\n    event1 = sqlite_schema_utils.CalendarEvent(\n        start_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=9\n        ),\n        end_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=10\n        ),\n        title='Coffee',\n        location='Cafe',\n        description='Coffee with Alex',\n    )\n    event2 = sqlite_schema_utils.CalendarEvent(\n        start_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=9\n        ),\n        end_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=10\n        ),\n        title='Lunch',\n        location='Eatery',\n        description='Lunch with Joe',\n    )\n\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    add_event_to_db(self.test_db_path, event1)\n    post_addition_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    self.assertFalse(\n        _validate_event_addition_integrity(\n            initial_state, post_addition_state, [event2]\n        )\n    )\n\n  def test_add_duplicate_event(self):\n    new_event = sqlite_schema_utils.CalendarEvent(\n        start_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=9\n        ),\n        end_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=10\n        ),\n        title='Coffee',\n        location='Cafe',\n        description='Coffee with Alex',\n    )\n\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    add_event_to_db(self.test_db_path, new_event)\n    # Add the same event again\n    add_event_to_db(self.test_db_path, new_event)\n    post_addition_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n\n    # We expect this to fail if the event was added twice.\n    self.assertFalse(\n        _validate_event_addition_integrity(\n            initial_state, post_addition_state, [new_event]\n        )\n    )\n\n  def test_add_event_with_side_effects(self):\n    event1 = sqlite_schema_utils.CalendarEvent(\n        start_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=9\n        ),\n        end_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=10\n        ),\n        title='Coffee',\n        location='Cafe',\n        description='Coffee with Alex',\n    )\n    event2 = sqlite_schema_utils.CalendarEvent(\n        start_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=9\n        ),\n        end_ts=datetime_utils._create_unix_ts(\n            year=2023, month=10, day=6, hour=10\n        ),\n        title='Lunch',\n        location='Eatery',\n        description='Lunch with Joe',\n    )\n\n    initial_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n    add_event_to_db(self.test_db_path, event1)\n    add_event_to_db(self.test_db_path, event2)\n    post_addition_state = sqlite_utils.execute_query(\n        'SELECT * FROM events;',\n        self.test_db_path,\n        sqlite_schema_utils.CalendarEvent,\n    )\n\n    # We expect this to fail, since we added both event1 and event2.\n    self.assertFalse(\n        _validate_event_addition_integrity(\n            initial_state, post_addition_state, [event1]\n        )\n    )\n\n\nclass TestVerifyPlaylist(absltest.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    self.device_playlist_rows = [\n        sqlite_schema_utils.PlaylistInfo('Summer Hits', 'song1.mp3', 0),\n        sqlite_schema_utils.PlaylistInfo('Summer Hits', 'song2.mp3', 1),\n        sqlite_schema_utils.PlaylistInfo('Summer Hits', 'song3.mp3', 2),\n    ]\n    self.candidate_playlist_name = 'Summer Hits'\n    self.candidate_files = ['song1.mp3', 'song2.mp3', 'song3.mp3']\n\n  def test_playlist_matches(self):\n    result = sqlite_validators.verify_playlist(\n        self.device_playlist_rows,\n        self.candidate_playlist_name,\n        self.candidate_files,\n    )\n    self.assertTrue(result)\n\n  def test_playlist_does_not_match_due_to_order(self):\n    self.candidate_files = [\n        'song1.mp3',\n        'song3.mp3',\n        'song2.mp3',\n    ]\n    result = sqlite_validators.verify_playlist(\n        self.device_playlist_rows,\n        self.candidate_playlist_name,\n        self.candidate_files,\n    )\n    self.assertFalse(result)\n\n  def test_playlist_does_not_match_due_to_name(self):\n    self.candidate_playlist_name = 'Winter Hits'\n    result = sqlite_validators.verify_playlist(\n        self.device_playlist_rows,\n        self.candidate_playlist_name,\n        self.candidate_files,\n    )\n    self.assertFalse(result)\n\n  def test_empty_device_playlist(self):\n    result = sqlite_validators.verify_playlist(\n        [], self.candidate_playlist_name, self.candidate_files\n    )\n    self.assertFalse(result)\n\n  def test_empty_candidate_files(self):\n    result = sqlite_validators.verify_playlist(\n        self.device_playlist_rows, self.candidate_playlist_name, []\n    )\n    self.assertFalse(result)\n\n\nif __name__ == '__main__':\n  absltest.main()\n"
