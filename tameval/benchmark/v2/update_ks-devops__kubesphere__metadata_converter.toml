[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "kubesphere/ks-devops"
sha = "912f453210d5a51ed62b0b35c1073cd94f3601c2"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out controllers/jenkins/pipeline/metadata_converter.go controllers/jenkins/pipeline/metadata_converter_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting controllers/jenkins/pipeline/metadata_converter.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 13.0
original_coverage = 100.0
mutation_kill_rate = 60.0
original_mutation_kill_rate = 100.0
covered_lines = [ 46, 47, 48, 49, 50, 51, 52, 53, 55,]
missed_lines = [ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,]

[input_info]
test_file_path = "controllers/jenkins/pipeline/metadata_converter_test.go"
focal_file_path = "controllers/jenkins/pipeline/metadata_converter.go"
test_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/controllers/jenkins/pipeline/metadata_converter_test.go"
focal_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/controllers/jenkins/pipeline/metadata_converter.go"
first_commit_date = "2021-09-30"
last_commit_date = "2025-03-13"
test_file_content = "/*\nCopyright 2022 The KubeSphere Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage pipeline\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/jenkins-zh/jenkins-client/pkg/job\"\n)\n\nfunc Test_convertParameterDefinitions(t *testing.T) {\n\ttype args struct {\n\t\tparamDefs []job.ParameterDefinition\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant []job.ParameterDefinition\n\t}{{\n\t\tname: \"Convert nil parameter definitions\",\n\t\targs: args{},\n\t\twant: []job.ParameterDefinition{},\n\t}, {\n\t\tname: \"Convert empty parameter definitions\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{},\n\t\t},\n\t\twant: []job.ParameterDefinition{},\n\t}, {\n\t\tname: \"Convert string parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"string-name\",\n\t\t\t\tType: \"StringParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"string-name\",\n\t\t\tType: \"string\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert choice parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"choice-name\",\n\t\t\t\tType: \"ChoiceParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"choice-name\",\n\t\t\tType: \"choice\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert text parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"text-name\",\n\t\t\t\tType: \"TextParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"text-name\",\n\t\t\tType: \"text\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert boolean parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"boolean-name\",\n\t\t\t\tType: \"BooleanParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"boolean-name\",\n\t\t\tType: \"boolean\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert file parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"file-name\",\n\t\t\t\tType: \"FileParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"file-name\",\n\t\t\tType: \"file\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert password parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"password-name\",\n\t\t\t\tType: \"PasswordParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"password-name\",\n\t\t\tType: \"password\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert multi parameter definitions\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"password-name\",\n\t\t\t\tType: \"PasswordParameterDefinition\",\n\t\t\t}, {\n\t\t\t\tName: \"file-name\",\n\t\t\t\tType: \"FileParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"password-name\",\n\t\t\tType: \"password\",\n\t\t}, {\n\t\t\tName: \"file-name\",\n\t\t\tType: \"file\",\n\t\t}},\n\t}, {\n\t\tname: \"Convert invalid parameter definition\",\n\t\targs: args{\n\t\t\tparamDefs: []job.ParameterDefinition{{\n\t\t\t\tName: \"invalid-name\",\n\t\t\t\tType: \"InvalidParameterDefinition\",\n\t\t\t}},\n\t\t},\n\t\twant: []job.ParameterDefinition{{\n\t\t\tName: \"invalid-name\",\n\t\t\tType: \"InvalidParameterDefinition\",\n\t\t}},\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := convertParameterDefinitions(tt.args.paramDefs); !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"convertParameterDefinitions() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
