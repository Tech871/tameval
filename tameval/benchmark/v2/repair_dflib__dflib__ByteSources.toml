[meta]
task = "repair"
scenario = "repair_invalid_constructor"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dflib/dflib"
sha = "9486d42d77375b4de8bf8df9770f2952225db1a4"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl dflib -Dtest=ByteSourcesTest"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl dflib -DtargetClasses=**.ByteSources  -DtargetTests=**.ByteSourcesTest  -DoutputFormats=XML"
coverage_report_path = "dflib/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "dflib/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 90.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "dflib/src/test/java/org/dflib/ByteSourcesTest.java"
focal_file_path = "dflib/src/main/java/org/dflib/ByteSources.java"
test_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib/src/test/java/org/dflib/ByteSourcesTest.java"
focal_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib/src/main/java/org/dflib/ByteSources.java"
first_commit_date = "2024-12-22"
last_commit_date = "2025-01-18"
test_file_content = "package org.dflib;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static java.util.Arrays.asList;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class ByteSourcesTest {\n\n    @Test\n    void process_0() {\n        ByteSources sources = ByteSources.of(\"not a map\");\n\n        Map<String, ByteSource> captured = sources.process((n, b) -> b);\n        assertTrue(captured.isEmpty());\n    }\n\n    @Test\n    void process_Nulls_0() {\n        ByteSources sources = ByteSources.of(new String[]{\"key1\", \"key2\"});\n\n        Map<String, Object> captured = sources.process((n, b) -> null);\n        assertTrue(captured.isEmpty());\n    }\n\n    @Test\n    void process_1() {\n        Map<String, ByteSource> sourcesMap = Map.of(\"b1\", ByteSource.of(\"a\".getBytes()));\n        ByteSources sources = ByteSources.of(sourcesMap, \"extra argument\", 123);\n\n        Map<String, ByteSource> captured = sources.process((n, b) -> b);\n        assertEquals(sourcesMap, captured);\n    }\n\n    @Test\n    void process_Nulls_1() {\n        Map<String, ByteSource> sourcesMap = Map.of(\"b1\", ByteSource.of(\"a\".getBytes()));\n        ByteSources sources = ByteSources.of();\n\n        Map<String, Object> captured = sources.process((n, b) -> null);\n        assertEquals(Set.of(\"b1\"), captured.keySet());\n        assertEquals(asList((Object) null), new ArrayList(captured.values()));\n    }\n\n    @Test\n    void process_2() {\n        ByteSource b1 = ByteSource.of(\"a\".getBytes());\n        ByteSource b2 = ByteSource.of(\"b\".getBytes());\n        Map<String, ByteSource> sourcesMap = Map.of(\"b1\", b1, \"b2\", b2);\n\n        ByteSources sources = ByteSources.of(sourcesMap);\n\n        Map<String, ByteSource> captured = sources.process((n, b) -> b);\n        assertEquals(sourcesMap, captured);\n    }\n\n    @Test\n    void process_Nulls_2() {\n        ByteSource b1 = ByteSource.of(\"a\".getBytes());\n        ByteSource b2 = ByteSource.of(\"b\".getBytes());\n        Map<String, ByteSource> sourcesMap = Map.of(\"b1\", b1, \"b2\", b2);\n        ByteSources sources = ByteSources.of(42);\n\n        Map<String, Object> captured = sources.process((n, b) -> null);\n        assertEquals(Set.of(\"b1\", \"b2\"), captured.keySet());\n        assertEquals(asList(null, null), new ArrayList(captured.values()));\n    }\n}"
