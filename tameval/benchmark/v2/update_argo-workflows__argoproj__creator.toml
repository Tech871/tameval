[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.1"

[repo_info]
repository = "argoproj/argo-workflows"
sha = "1f738e60f00c7983a47197e49e0c1bc6792e924e"

[run_info]
docker_image = "golang:1.23.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out workflow/creator/creator.go workflow/creator/creator_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting workflow/creator/creator.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 76.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "workflow/creator/creator_test.go"
focal_file_path = "workflow/creator/creator.go"
test_file_url = "https://github.com/argoproj/argo-workflows/blob/1f738e60f00c7983a47197e49e0c1bc6792e924e/workflow/creator/creator_test.go"
focal_file_url = "https://github.com/argoproj/argo-workflows/blob/1f738e60f00c7983a47197e49e0c1bc6792e924e/workflow/creator/creator.go"
first_commit_date = "2020-07-15"
last_commit_date = "2025-03-11"
test_file_content = "package creator\n\nimport (\n\t\"context\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/go-jose/go-jose/v3/jwt\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\n\twfv1 \"github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1\"\n\t\"github.com/argoproj/argo-workflows/v3/server/auth\"\n\t\"github.com/argoproj/argo-workflows/v3/server/auth/types\"\n\t\"github.com/argoproj/argo-workflows/v3/workflow/common\"\n)\n\nfunc TestLabel(t *testing.T) {\n\tt.Run(\"Empty\", func(t *testing.T) {\n\t\twf := &wfv1.Workflow{}\n\t\tLabel(context.TODO(), wf)\n\t\tassert.Empty(t, wf.Labels)\n\t})\n\tt.Run(\"NotEmpty\", func(t *testing.T) {\n\t\twf := &wfv1.Workflow{}\n\t\tLabel(context.WithValue(context.TODO(), auth.ClaimsKey, &types.Claims{Claims: jwt.Claims{Subject: strings.Repeat(\"x\", 63) + \"y\"}, Email: \"my@email\", PreferredUsername: \"username\"}), wf)\n\t\trequire.NotEmpty(t, wf.Labels)\n\t\tassert.Equal(t, strings.Repeat(\"x\", 62)+\"y\", wf.Labels[common.LabelKeyCreator], \"creator is truncated\")\n\t\tassert.Equal(t, \"my.at.email\", wf.Labels[common.LabelKeyCreatorEmail], \"'@' is replaced by '.at.'\")\n\t\tassert.Equal(t, \"username\", wf.Labels[common.LabelKeyCreatorPreferredUsername], \"username is matching\")\n\t})\n\tt.Run(\"TooLongHyphen\", func(t *testing.T) {\n\t\twf := &wfv1.Workflow{}\n\t\tLabel(context.WithValue(context.TODO(), auth.ClaimsKey, &types.Claims{Claims: jwt.Claims{Subject: strings.Repeat(\"-\", 63) + \"y\"}}), wf)\n\t\trequire.NotEmpty(t, wf.Labels)\n\t\tassert.Equal(t, \"y\", wf.Labels[common.LabelKeyCreator])\n\t})\n\tt.Run(\"InvalidDNSNames\", func(t *testing.T) {\n\t\twf := &wfv1.Workflow{}\n\t\tLabel(context.WithValue(context.TODO(), auth.ClaimsKey, &types.Claims{Claims: jwt.Claims{Subject: \"!@#$%^&*()--__\" + strings.Repeat(\"y\", 35) + \"__--!@#$%^&*()\"}, PreferredUsername: \"us#er@name#\"}), wf)\n\t\trequire.NotEmpty(t, wf.Labels)\n\t\tassert.Equal(t, strings.Repeat(\"y\", 35), wf.Labels[common.LabelKeyCreator])\n\t\tassert.Equal(t, \"us-er-name\", wf.Labels[common.LabelKeyCreatorPreferredUsername], \"username is truncated\")\n\t})\n\tt.Run(\"InvalidDNSNamesWithMidDashes\", func(t *testing.T) {\n\t\twf := &wfv1.Workflow{}\n\t\tsub := strings.Repeat(\"x\", 20) + strings.Repeat(\"-\", 70) + strings.Repeat(\"x\", 20)\n\t\tLabel(context.WithValue(context.TODO(), auth.ClaimsKey, &types.Claims{Claims: jwt.Claims{Subject: sub}}), wf)\n\t\trequire.NotEmpty(t, wf.Labels)\n\t\tassert.Equal(t, strings.Repeat(\"x\", 20), wf.Labels[common.LabelKeyCreator])\n\t})\n\tt.Run(\"DifferentUsersFromCreatorLabels\", func(t *testing.T) {\n\t\ttype input struct {\n\t\t\tclaims *types.Claims\n\t\t\twf     *wfv1.Workflow\n\t\t}\n\t\ttype output struct {\n\t\t\tcreatorLabelsToHave    map[string]string\n\t\t\tcreatorLabelsNotToHave []string\n\t\t}\n\t\tfor _, testCase := range []struct {\n\t\t\tname   string\n\t\t\tinput  *input\n\t\t\toutput *output\n\t\t}{\n\t\t\t{\n\t\t\t\tname: \"when claims are empty\",\n\t\t\t\tinput: &input{\n\t\t\t\t\tclaims: &types.Claims{Claims: jwt.Claims{}},\n\t\t\t\t\twf: &wfv1.Workflow{ObjectMeta: metav1.ObjectMeta{Labels: map[string]string{\n\t\t\t\t\t\tcommon.LabelKeyCreator:                  \"xxxx-xxxx-xxxx-xxxx\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorEmail:             \"foo.at.example.com\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorPreferredUsername: \"foo\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t\toutput: &output{\n\t\t\t\t\tcreatorLabelsToHave:    nil,\n\t\t\t\t\tcreatorLabelsNotToHave: []string{common.LabelKeyCreator, common.LabelKeyCreatorEmail, common.LabelKeyCreatorPreferredUsername},\n\t\t\t\t},\n\t\t\t}, {\n\t\t\t\tname: \"when claims are nil\",\n\t\t\t\tinput: &input{\n\t\t\t\t\tclaims: nil,\n\t\t\t\t\twf: &wfv1.Workflow{ObjectMeta: metav1.ObjectMeta{Labels: map[string]string{\n\t\t\t\t\t\tcommon.LabelKeyCreator:                  \"xxxx-xxxx-xxxx-xxxx\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorEmail:             \"foo.at.example.com\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorPreferredUsername: \"foo\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t\toutput: &output{\n\t\t\t\t\tcreatorLabelsToHave:    nil,\n\t\t\t\t\tcreatorLabelsNotToHave: []string{common.LabelKeyCreator, common.LabelKeyCreatorEmail, common.LabelKeyCreatorPreferredUsername},\n\t\t\t\t},\n\t\t\t}, {\n\t\t\t\tname: \"when user information in claim is different from the existing labels of a Workflow\",\n\t\t\t\tinput: &input{\n\t\t\t\t\tclaims: &types.Claims{Claims: jwt.Claims{Subject: \"yyyy-yyyy-yyyy-yyyy\"}, Email: \"bar.at.example.com\", PreferredUsername: \"bar\"},\n\t\t\t\t\twf: &wfv1.Workflow{ObjectMeta: metav1.ObjectMeta{Labels: map[string]string{\n\t\t\t\t\t\tcommon.LabelKeyCreator:                  \"xxxx-xxxx-xxxx-xxxx\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorEmail:             \"foo.at.example.com\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorPreferredUsername: \"foo\",\n\t\t\t\t\t}}},\n\t\t\t\t},\n\t\t\t\toutput: &output{\n\t\t\t\t\tcreatorLabelsToHave: map[string]string{\n\t\t\t\t\t\tcommon.LabelKeyCreator:                  \"yyyy-yyyy-yyyy-yyyy\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorEmail:             \"bar.at.example.com\",\n\t\t\t\t\t\tcommon.LabelKeyCreatorPreferredUsername: \"bar\",\n\t\t\t\t\t},\n\t\t\t\t\tcreatorLabelsNotToHave: nil,\n\t\t\t\t},\n\t\t\t},\n\t\t} {\n\t\t\tt.Run(testCase.name, func(t *testing.T) {\n\t\t\t\tLabel(context.WithValue(context.TODO(), auth.ClaimsKey, testCase.input.claims), testCase.input.wf)\n\t\t\t\tlabels := testCase.input.wf.GetLabels()\n\t\t\t\tfor k, expectedValue := range testCase.output.creatorLabelsToHave {\n\t\t\t\t\tassert.Equal(t, expectedValue, labels[k])\n\t\t\t\t}\n\t\t\t\tfor _, creatorLabelKey := range testCase.output.creatorLabelsNotToHave {\n\t\t\t\t\t_, ok := labels[creatorLabelKey]\n\t\t\t\t\tassert.Falsef(t, ok, \"should not have the creator label, \\\"%s\\\"\", creatorLabelKey)\n\t\t\t\t}\n\t\t\t})\n\n\t\t}\n\t})\n}\n\nfunc TestUserInfoMap(t *testing.T) {\n\tt.Run(\"NotEmpty\", func(t *testing.T) {\n\t\tctx := context.WithValue(context.TODO(), auth.ClaimsKey,\n\t\t\t&types.Claims{Claims: jwt.Claims{Subject: strings.Repeat(\"x\", 63) + \"y\"}, Email: \"my@email\", PreferredUsername: \"username\"})\n\t\tuim := UserInfoMap(ctx)\n\t\tassert.Equal(t, map[string]string{\n\t\t\t\"User\":              strings.Repeat(\"x\", 63) + \"y\",\n\t\t\t\"Email\":             \"my@email\",\n\t\t\t\"PreferredUsername\": \"username\",\n\t\t}, uim)\n\t})\n\tt.Run(\"Empty\", func(t *testing.T) {\n\t\tuim := UserInfoMap(context.TODO())\n\t\tassert.Nil(t, uim)\n\t})\n}"
