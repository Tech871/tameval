[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "jeffotoni/quick"
sha = "89f7be7048104f81431288179d7631ccbc2b3536"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out middleware/pprof/pprof.go middleware/pprof/pprof_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting middleware/pprof/pprof.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 92.0
mutation_kill_rate = nan
original_mutation_kill_rate = 58.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "middleware/pprof/pprof_test.go"
focal_file_path = "middleware/pprof/pprof.go"
test_file_url = "https://github.com/jeffotoni/quick/blob/89f7be7048104f81431288179d7631ccbc2b3536/middleware/pprof/pprof_test.go"
focal_file_url = "https://github.com/jeffotoni/quick/blob/89f7be7048104f81431288179d7631ccbc2b3536/middleware/pprof/pprof.go"
first_commit_date = "2025-03-26"
last_commit_date = "2025-03-27"
test_file_content = "package pprof\n\nimport (\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/jeffotoni/quick\"\n)\n\nfunc TestWithDefaultConfig(t *testing.T) {\n\tos.Setenv(\"APP_ENV\", \"development\")\n\tq := quick.New()\n\tq.Use(New(Options{\n\t\tApp: q,\n\t}))\n\n\t// Define a test route\n\tresp, err := q.Qtest(quick.QuickTestOptions{\n\t\tMethod: quick.MethodGet,\n\t\tURI:    \"/debug/pprof\",\n\t})\n\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := resp.AssertStatus(quick.StatusOK); err != nil {\n\t\tt.Error(err)\n\t}\n\tos.Unsetenv(\"APP_ENV\")\n}\n\nfunc TestWithRoutePrefix(t *testing.T) {\n\tos.Setenv(\"APP_ENV\", \"development\")\n\tq := quick.New()\n\tq.Use(New(Options{\n\t\tApp: q,\n\t}))\n\n\t// Define a test route\n\troutes := []string{\n\t\t\"/debug/cmdline\",\n\t\t\"/debug/profile\",\n\t\t\"/debug/symbol\",\n\t\t\"/debug/pprof/trace\",\n\t\t\"/debug/goroutine\",\n\t\t\"/debug/heap\",\n\t\t\"/debug/threadcreate\",\n\t\t\"/debug/mutex\",\n\t\t\"/debug/allocs\",\n\t\t\"/debug/block\",\n\t}\n\n\tfor _, route := range routes {\n\t\tt.Run(\"Testing \"+route, func(t *testing.T) {\n\t\t\tresp, err := q.Qtest(quick.QuickTestOptions{\n\t\t\t\tMethod: quick.MethodGet,\n\t\t\t\tURI:    route,\n\t\t\t})\n\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tif err := resp.AssertStatus(quick.StatusOK); err != nil {\n\t\t\t\tt.Errorf(\"Route %s: %v\", route, err)\n\t\t\t}\n\t\t})\n\t}\n\tos.Unsetenv(\"APP_ENV\")\n}"
