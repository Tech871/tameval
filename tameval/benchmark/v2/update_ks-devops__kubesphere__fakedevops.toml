[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "kubesphere/ks-devops"
sha = "912f453210d5a51ed62b0b35c1073cd94f3601c2"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/client/devops/fake/fakedevops.go pkg/client/devops/fake/fakedevops_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/client/devops/fake/fakedevops.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 94.0
mutation_kill_rate = nan
original_mutation_kill_rate = 35.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/client/devops/fake/fakedevops_test.go"
focal_file_path = "pkg/client/devops/fake/fakedevops.go"
test_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/pkg/client/devops/fake/fakedevops_test.go"
focal_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/pkg/client/devops/fake/fakedevops.go"
first_commit_date = "2021-06-02"
last_commit_date = "2025-03-13"
test_file_content = "/*\nCopyright 2022 KubeSphere Authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage fake\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\tv1 \"k8s.io/api/core/v1\"\n\n\tdevopsv1alpha3 \"kubesphere.io/devops/pkg/api/devops/v1alpha3\"\n)\n\nfunc TestCredential(t *testing.T) {\n\tsecret := &v1.Secret{}\n\tsecret.SetName(\"secret\")\n\tsecret.SetNamespace(\"project\")\n\n\tsecret1 := secret.DeepCopy()\n\tsecret1.SetName(\"secret1\")\n\n\tclient := NewWithCredentials(\"project\", secret.DeepCopy())\n\n\t// find credential by a correct name\n\tcre, err := client.GetCredentialInProject(\"project\", \"secret\")\n\tassert.NotNil(t, cre)\n\tassert.Nil(t, err)\n\n\t// not found\n\tcre, err = client.GetCredentialInProject(\"fake\", \"fake\")\n\tassert.NotNil(t, err)\n\tassert.Nil(t, cre)\n\n\t// create a secert that already exist\n\tvar id string\n\tid, err = client.CreateCredentialInProject(\"project\", secret.DeepCopy())\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n\n\t// delete an existing\n\tid, err = client.DeleteCredentialInProject(\"project\", \"secret\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, \"\", id)\n\n\t// delete a non-exsting\n\tid, err = client.DeleteCredentialInProject(\"fake\", \"fake\")\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n\n\t// create it once it was deleted\n\tid, err = client.CreateCredentialInProject(\"project\", secret.DeepCopy())\n\tassert.Nil(t, err)\n\tassert.Equal(t, secret.DeepCopy().GetName(), id)\n\n\t// update\n\tid, err = client.UpdateCredentialInProject(\"project\", secret.DeepCopy())\n\tassert.Nil(t, err)\n\tassert.Equal(t, secret.DeepCopy().GetName(), id)\n\n\t// update a non-existing\n\tid, err = client.UpdateCredentialInProject(\"project\", secret1.DeepCopy())\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n}\n\nfunc TestPipeline(t *testing.T) {\n\tpip := &devopsv1alpha3.Pipeline{}\n\tpip.SetName(\"pip\")\n\tpip.SetNamespace(\"project\")\n\n\tpip1 := pip.DeepCopy()\n\tpip1.SetName(\"pip1\")\n\n\tclient := NewWithPipelines(\"project\", pip.DeepCopy())\n\n\tvar id string\n\tvar err error\n\n\t// create a non-exsiting project\n\tid, err = client.CreateDevOpsProject(\"project1\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, \"project1\", id)\n\n\t// create an exsiting project\n\tid, err = client.CreateDevOpsProject(\"project\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, \"project\", id)\n\n\t// delete a non-exsiting project\n\tassert.NotNil(t, client.DeleteDevOpsProject(\"project2\"))\n\n\t// delete an exsiting project\n\tassert.Nil(t, client.DeleteDevOpsProject(\"project1\"))\n\n\t// get an exsiting project\n\tid, err = client.GetDevOpsProject(\"project\")\n\tassert.Nil(t, err)\n\tassert.Equal(t, \"project\", id)\n\n\t// get a non-existing project\n\tid, err = client.GetDevOpsProject(\"project4\")\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n\n\t// create an existing pipeline\n\tid, err = client.CreateProjectPipeline(\"project\", pip.DeepCopy())\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n\n\t// create a non-existing pipeline\n\tid, err = client.CreateProjectPipeline(\"project\", pip1.DeepCopy())\n\tassert.Nil(t, err)\n\tassert.Empty(t, id)\n\n\t// delete a non-existing pipeline\n\tid, err = client.DeleteProjectPipeline(\"project\", \"pip2\")\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n\n\t// delete an existing pipeline\n\tid, err = client.DeleteProjectPipeline(\"project\", \"pip1\")\n\tassert.Nil(t, err)\n\tassert.Empty(t, id)\n\n\t// update an existing pipeline\n\tid, err = client.UpdateProjectPipeline(\"project\", pip.DeepCopy())\n\tassert.Nil(t, err)\n\tassert.Empty(t, id)\n\n\t// update a non-existing pipeline\n\tid, err = client.UpdateProjectPipeline(\"project\", pip1.DeepCopy())\n\tassert.NotNil(t, err)\n\tassert.Empty(t, id)\n\n\t// get an existing pipeline\n\tvar obj interface{}\n\tobj, err = client.GetProjectPipelineConfig(\"project\", \"pip\")\n\tassert.Nil(t, err)\n\tassert.NotNil(t, obj)\n\n\t// get a non-existing pipeline\n\tobj, err = client.GetProjectPipelineConfig(\"project\", \"pip3\")\n\tassert.NotNil(t, err)\n\tassert.Nil(t, obj)\n}\n\nfunc TestNotImplement(t *testing.T) {\n\tclient := New(\"fake\")\n\tassert.NotNil(t, client)\n\tclient = NewFakeDevops(nil)\n\tassert.Nil(t, client.ReloadConfiguration())\n\tassert.Nil(t, client.ApplyNewSource(\"fake\"))\n\n\tvar (\n\t\to1 interface{}\n\t\to2 interface{}\n\t\to3 interface{}\n\t)\n\n\to1, o2 = client.GetProjectPipelineBuildByType(\"\", \"\", \"\")\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetMultiBranchPipelineBuildByType(\"\", \"\", \"\", \"\")\n\tassertNils(t, o1, o2)\n\to1, o2 = client.CheckCron(\"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.CheckScriptCompile(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetPipeline(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.ListPipelines(nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetPipelineRun(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.StopPipeline(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.ReplayPipeline(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetArtifacts(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.DownloadArtifact(\"\", \"\", \"\", \"\", false, \"\")\n\tassertNils(t, o1, o2)\n\to1, o2, o3 = client.GetRunLog(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2, o3)\n\to1, o2, o3 = client.GetStepLog(\"\", \"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2, o3)\n\to1, o2 = client.RunPipeline(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.ListPipelineRuns(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.SubmitInputStep(\"\", \"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetBranchPipeline(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetBranchPipelineRun(\"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.StopBranchPipeline(\"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.ReplayBranchPipeline(\"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.RunBranchPipeline(\"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetBranchArtifacts(\"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetBranchRunLog(\"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2, o3 = client.GetBranchStepLog(\"\", \"\", \"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2, o3)\n\to1, o2 = client.SubmitBranchInputStep(\"\", \"\", \"\", \"\", \"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetPipelineBranch(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.ScanBranch(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetConsoleLog(\"\", \"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetCrumb(nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetSCMServers(\"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetSCMOrg(\"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.CreateSCMServers(\"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.Validate(\"\", nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GetNotifyCommit(nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GithubWebhook(nil)\n\tassertNils(t, o1, o2)\n\to1, o2 = client.GenericWebhook(nil)\n\tassertNils(t, o1, o2)\n}\n\nfunc assertNils(t *testing.T, obj ...interface{}) {\n\tfor _, item := range obj {\n\t\tassert.Nil(t, item)\n\t}\n}"
