[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "damianvtran/local-operator"
sha = "2fd6ef34ce6fad7889fba35bbf5a1a49ff447720"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=local_operator/clients/radient.py -m pytest -q --junit-xml=test_output.xml tests/unit/clients/test_radient.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target local_operator.clients.radient --unit-test tests.unit.clients.test_radient --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target local_operator/clients/radient.py --unit-test tests/unit/clients/test_radient.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 46.0
original_coverage = 60.0
mutation_kill_rate = 62.0
original_mutation_kill_rate = 66.0
covered_lines = [ 0, 1, 2, 4, 5, 8, 11, 12, 13, 14, 15, 16, 20, 29, 30, 31, 33, 35, 40, 49, 50, 51, 53, 55, 60, 69, 70, 71, 73, 75, 80, 87, 89, 91, 97, 107, 108, 109, 110, 112, 114, 119, 127, 128, 130, 132, 137, 146, 147, 148, 150, 152, 157, 164, 166, 168, 174, 182, 183, 185, 187, 192, 202, 203, 204, 205, 207, 209, 214, 221, 223, 225, 231, 239, 240, 241, 243, 248, 256, 257, 258, 260, 265, 274, 275, 276, 277, 279, 288, 299, 300, 301, 302, 303, 304, 306, 311, 320, 321, 322, 323, 325, 330, 339, 340, 341, 342, 344, 351, 363, 364, 365, 366, 367, 368, 369, 371, 383, 391, 392, 393, 395, 400, 407, 416, 417, 418, 419, 421, 437, 441, 442, 444, 445, 446, 447, 449, 488, 518, 550, 587, 596, 597, 599, 600, 601, 604, 605, 616, 653, 654, 657, 664, 667, 670, 673, 675, 676, 677, 678, 681, 682, 723, 738, 739, 741, 743, 746, 747, 748, 749, 750, 763, 794, 821, 822, 825, 831, 832, 834, 835, 837, 838, 840, 841, 842, 843, 844, 845, 846, 851, 857, 886, 919, 962, 1012, 1097,]
missed_lines = [ 37, 57, 77, 93, 116, 134, 154, 170, 189, 211, 227, 245, 262, 281, 308, 327, 346, 347, 348, 373, 374, 375, 376, 377, 378, 379, 380, 397, 443, 462, 463, 464, 466, 467, 468, 469, 471, 472, 474, 475, 476, 481, 486, 499, 500, 501, 502, 503, 504, 505, 506, 511, 516, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 545, 564, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 580, 582, 602, 603, 611, 612, 665, 668, 671, 685, 686, 688, 690, 695, 696, 699, 700, 703, 706, 711, 712, 717, 720, 721, 744, 751, 752, 757, 760, 761, 772, 773, 775, 776, 777, 778, 779, 780, 781, 786, 789, 790, 854, 855, 866, 867, 869, 870, 871, 872, 873, 874, 875, 880, 883, 884, 896, 897, 898, 899, 900, 901, 903, 904, 908, 909, 914, 932, 933, 934, 936, 937, 938, 939, 940, 942, 943, 946, 947, 948, 949, 950, 955, 958, 959, 979, 980, 981, 982, 984, 986, 987, 991, 992, 993, 994, 995, 998, 999, 1000, 1005, 1008, 1009, 1041, 1042, 1044, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1090, 1093, 1094, 1125, 1126, 1128, 1129, 1132, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1153, 1156, 1157,]

[input_info]
test_file_path = "tests/unit/clients/test_radient.py"
focal_file_path = "local_operator/clients/radient.py"
test_file_url = "https://github.com/damianvtran/local-operator/blob/2fd6ef34ce6fad7889fba35bbf5a1a49ff447720/tests/unit/clients/test_radient.py"
focal_file_url = "https://github.com/damianvtran/local-operator/blob/2fd6ef34ce6fad7889fba35bbf5a1a49ff447720/local_operator/clients/radient.py"
first_commit_date = "2025-04-15"
last_commit_date = "2025-06-08"
test_file_content = "from pathlib import Path\nfrom typing import Any, Dict, List\nfrom unittest.mock import MagicMock, patch\n\nimport pytest\nimport requests\nfrom pydantic import SecretStr\n\nfrom local_operator.clients.radient import (\n    RadientClient,\n    RadientImage,\n    RadientImageGenerationProvider,\n    RadientImageGenerationProvidersResponse,\n    RadientImageGenerationResponse,\n    RadientListModelsResponse,\n    RadientModelData,\n    RadientModelPricing,\n    RadientSearchProvider,\n    RadientSearchProvidersResponse,\n    RadientSearchResponse,\n    RadientSearchResult,\n)\n\n@pytest.fixture\ndef api_key() -> SecretStr:\n    \"\"\"Fixture for providing a test API key.\"\"\"\n    return SecretStr(\"test_api_key\")\n\n@pytest.fixture\ndef base_url() -> str:\n    \"\"\"Fixture for providing a test base URL.\"\"\"\n    return \"https://api.test.radient.com\"\n\n@pytest.fixture\ndef radient_client(api_key: SecretStr, base_url: str) -> RadientClient:\n    \"\"\"Fixture for creating a RadientClient instance.\n\n    Args:\n        api_key (SecretStr): API key for the client.\n        base_url (str): Base URL for the Radient API.\n\n    Returns:\n        RadientClient: An instance of RadientClient.\n    \"\"\"\n    return RadientClient(api_key=api_key, base_url=base_url)\n\n@pytest.fixture\ndef mock_model_data() -> List[Dict[str, Any]]:\n    \"\"\"Fixture for providing mock model data.\"\"\"\n    return [\n        {\n            \"id\": \"test_model_1\",\n            \"name\": \"Test Model 1\",\n            \"description\": \"A test model\",\n            \"pricing\": {\"prompt\": 0.001, \"completion\": 0.002},\n        },\n        {\n            \"id\": \"test_model_2\",\n            \"name\": \"Test Model 2\",\n            \"description\": \"Another test model\",\n            \"pricing\": {\"prompt\": 0.003, \"completion\": 0.004},\n        },\n    ]\n\n@pytest.fixture\ndef mock_response(mock_model_data: List[Dict[str, Any]]) -> Dict[str, Any]:\n    \"\"\"Fixture for providing a mock JSON response from the Radient API.\n\n    Returns:\n        Dict[str, Any]: Mock JSON data that simulates a Radient API response.\n    \"\"\"\n    return {\"data\": mock_model_data}\n\n@pytest.fixture\ndef mock_image_generation_response() -> Dict[str, Any]:\n    \"\"\"Fixture for providing a mock image generation response.\"\"\"\n    return {\n        \"request_id\": \"test-request-id\",\n        \"status\": \"completed\",\n        \"images\": [\n            {\n                \"url\": \"https://example.com/image1.jpg\",\n                \"width\": 1024,\n                \"height\": 1024,\n            }\n        ],\n    }\n\n@pytest.fixture\ndef mock_image_generation_providers_response() -> Dict[str, Any]:\n    \"\"\"Fixture for providing a mock image generation providers response.\"\"\"\n    return {\n        \"providers\": [\n            {\n                \"id\": \"provider1\",\n                \"name\": \"Provider 1\",\n                \"description\": \"A test provider\",\n            },\n            {\n                \"id\": \"provider2\",\n                \"name\": \"Provider 2\",\n                \"description\": \"Another test provider\",\n            },\n        ]\n    }\n\n@pytest.fixture\ndef mock_search_response() -> Dict[str, Any]:\n    \"\"\"Fixture for providing a mock search response.\"\"\"\n    return {\n        \"query\": \"test query\",\n        \"results\": [\n            {\n                \"title\": \"Test Result 1\",\n                \"url\": \"https://example.com/result1\",\n                \"content\": \"This is test result 1\",\n                \"raw_content\": \"Full content of test result 1\",\n            },\n            {\n                \"title\": \"Test Result 2\",\n                \"url\": \"https://example.com/result2\",\n                \"content\": \"This is test result 2\",\n            },\n        ],\n    }\n\n@pytest.fixture\ndef mock_search_providers_response() -> Dict[str, Any]:\n    \"\"\"Fixture for providing a mock search providers response.\"\"\"\n    return {\n        \"providers\": [\n            {\n                \"id\": \"search_provider1\",\n                \"name\": \"Search Provider 1\",\n                \"description\": \"A test search provider\",\n            },\n            {\n                \"id\": \"search_provider2\",\n                \"name\": \"Search Provider 2\",\n                \"description\": \"Another test search provider\",\n            },\n        ]\n    }\n\ndef test_list_models_api_error(radient_client: RadientClient) -> None:\n    \"\"\"Test handling of API error response.\n\n    Args:\n        radient_client (RadientClient): The Radient API client fixture.\n    \"\"\"\n    mock_response = MagicMock()\n    mock_response.content = b\"Error message from API\"\n\n    mock_requests_get = MagicMock()\n    mock_requests_get.return_value.raise_for_status.side_effect = requests.exceptions.HTTPError(\n        \"Bad Request\", response=mock_response\n    )\n\n    with patch(\"requests.get\", mock_requests_get):\n        with pytest.raises(RuntimeError) as exc_info:\n            radient_client.list_models()\n        assert \"Failed to fetch Radient models due to a requests error\" in str(exc_info.value)\n        assert \"Error message from API\" in str(exc_info.value)\n\ndef test_list_models_network_error(radient_client: RadientClient) -> None:\n    \"\"\"Test handling of network error.\n\n    Args:\n        radient_client (RadientClient): The Radient API client fixture.\n    \"\"\"\n    mock_response = MagicMock()\n    mock_response.content = b\"Network error\"\n\n    mock_requests_get = MagicMock(\n        side_effect=requests.exceptions.RequestException(\"Network error\", response=mock_response)\n    )\n\n    with patch(\"requests.get\", mock_requests_get):\n        with pytest.raises(RuntimeError) as exc_info:\n            radient_client.list_models()\n        assert \"Failed to fetch Radient models due to a requests error\" in str(exc_info.value)\n\n# Image Generation Tests\n\ndef test_generate_image_success(\n    radient_client: RadientClient,\n    mock_image_generation_response: Dict[str, Any],\n    base_url: str,\n) -> None:\n    \"\"\"Test successful API request to generate an image.\n\n    Args:\n        radient_client (RadientClient): The Radient API client fixture.\n        mock_image_generation_response (Dict[str, Any]): Mock JSON response.\n        base_url (str): Base URL for the Radient API.\n    \"\"\"\n    mock_requests_post = MagicMock()\n    mock_requests_post.return_value.status_code = 200\n    mock_requests_post.return_value.json.return_value = mock_image_generation_response\n\n    with patch(\"requests.post\", mock_requests_post):\n        response = radient_client.generate_image(\n            prompt=\"test prompt\",\n            num_images=1,\n            image_size=\"square_hd\",\n            sync_mode=True,\n        )\n\n    # Verify the request was made with the correct parameters\n    mock_requests_post.assert_called_once_with(\n        f\"{base_url}/tools/images/generate\",\n        headers={\n            \"Authorization\": \"Bearer test_api_key\",\n            \"Content-Type\": \"application/json\",\n            \"X-Title\": \"Local Operator\",\n            \"HTTP-Referer\": \"https://local-operator.com\",\n        },\n        json={\n            \"prompt\": \"test prompt\",\n            \"num_images\": 1,\n            \"image_size\": \"square_hd\",\n            \"sync_mode\": True,\n        },\n    )\n\n    # Verify the response was parsed correctly\n    assert isinstance(response, RadientImageGenerationResponse)\n    assert response.request_id == mock_image_generation_response[\"request_id\"]\n    assert response.status == mock_image_generation_response[\"status\"]\n    assert response.images is not None\n    assert len(response.images) == len(mock_image_generation_response[\"images\"])\n    assert isinstance(response.images[0], RadientImage)\n    assert response.images[0].url == mock_image_generation_response[\"images\"][0][\"url\"]\n    assert response.images[0].width == mock_image_generation_response[\"images\"][0][\"width\"]\n    assert response.images[0].height == mock_image_generation_response[\"images\"][0][\"height\"]\n\ndef test_get_image_generation_status_success(\n    radient_client: RadientClient,\n    mock_image_generation_response: Dict[str, Any],\n    base_url: str,\n) -> None:\n    \"\"\"Test successful API request to get image generation status.\n\n    Args:\n        radient_client (RadientClient): The Radient API client fixture.\n        mock_image_generation_response (Dict[str, Any]): Mock JSON response.\n        base_url (str): Base URL for the Radient API.\n    \"\"\"\n    mock_requests_get = MagicMock()\n    mock_requests_get.return_value.status_code = 200\n    mock_requests_get.return_value.json.return_value = mock_image_generation_response\n\n    with patch(\"requests.get\", mock_requests_get):\n        response = radient_client.get_image_generation_status(request_id=\"test-request-id\")\n\n    # Verify the request was made with the correct parameters\n    mock_requests_get.assert_called_once_with(\n        f\"{base_url}/tools/images/status\",\n        headers={\n            \"Authorization\": \"Bearer test_api_key\",\n            \"Content-Type\": \"application/json\",\n            \"X-Title\": \"Local Operator\",\n            \"HTTP-Referer\": \"https://local-operator.com\",\n        },\n        params={\n            \"request_id\": \"test-request-id\",\n        },\n    )\n\n    # Verify the response was parsed correctly\n    assert isinstance(response, RadientImageGenerationResponse)\n    assert response.request_id == mock_image_generation_response[\"request_id\"]\n    assert response.status == mock_image_generation_response[\"status\"]\n\n# Web Search Tests\n\ndef test_search_with_options(\n    radient_client: RadientClient,\n    mock_search_response: Dict[str, Any],\n    base_url: str,\n) -> None:\n    \"\"\"Test search with additional options.\n\n    Args:\n        radient_client (RadientClient): The Radient API client fixture.\n        mock_search_response (Dict[str, Any]): Mock JSON response.\n        base_url (str): Base URL for the Radient API.\n    \"\"\"\n    mock_requests_get = MagicMock()\n    mock_requests_get.return_value.status_code = 200\n    mock_requests_get.return_value.json.return_value = mock_search_response\n\n    with patch(\"requests.get\", mock_requests_get):\n        response = radient_client.search(\n            query=\"test query\",\n            max_results=5,\n            provider=\"test_provider\",\n            include_raw=True,\n            search_depth=\"deep\",\n            domains=[\"example.com\", \"test.com\"],\n        )\n\n    # Verify the request was made with the correct parameters\n    mock_requests_get.assert_called_once_with(\n        f\"{base_url}/tools/search\",\n        headers={\n            \"Authorization\": \"Bearer test_api_key\",\n            \"Content-Type\": \"application/json\",\n            \"X-Title\": \"Local Operator\",\n            \"HTTP-Referer\": \"https://local-operator.com\",\n        },\n        params={\n            \"query\": \"test query\",\n            \"max_results\": 5,\n            \"include_raw\": \"true\",\n            \"provider\": \"test_provider\",\n            \"search_depth\": \"deep\",\n            \"domains\": \"example.com,test.com\",\n        },\n    )\n\n    # Verify the response was parsed correctly\n    assert isinstance(response, RadientSearchResponse)\n\ndef test_search_api_error(radient_client: RadientClient) -> None:\n    \"\"\"Test handling of API error response for search.\n\n    Args:\n        radient_client (RadientClient): The Radient API client fixture.\n    \"\"\"\n    mock_response = MagicMock()\n    mock_response.content = b\"Error message from API\"\n\n    mock_requests_get = MagicMock()\n    mock_requests_get.return_value.raise_for_status.side_effect = requests.exceptions.HTTPError(\n        \"Bad Request\", response=mock_response\n    )\n\n    with patch(\"requests.get\", mock_requests_get):\n        with pytest.raises(RuntimeError) as exc_info:\n            radient_client.search(query=\"test query\")\n        assert \"Failed to execute search\" in str(exc_info.value)\n        assert \"Error message from API\" in str(exc_info.value)\n"
