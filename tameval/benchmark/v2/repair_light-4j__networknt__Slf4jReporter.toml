[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "networknt/light-4j"
sha = "e6d76041442a1265369701cef8141b88c027f15c"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl metrics-config -Dtest=Slf4jReporterTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl metrics-config -DtargetClasses=**.Slf4jReporter  -DtargetTests=**.Slf4jReporterTest  -DoutputFormats=XML"
coverage_report_path = "metrics-config/target/site/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "metrics-config/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 86.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "metrics-config/src/test/java/io/dropwizard/metrics/Slf4jReporterTest.java"
focal_file_path = "metrics-config/src/main/java/io/dropwizard/metrics/Slf4jReporter.java"
test_file_url = "https://github.com/networknt/light-4j/blob/e6d76041442a1265369701cef8141b88c027f15c/metrics-config/src/test/java/io/dropwizard/metrics/Slf4jReporterTest.java"
focal_file_url = "https://github.com/networknt/light-4j/blob/e6d76041442a1265369701cef8141b88c027f15c/metrics-config/src/main/java/io/dropwizard/metrics/Slf4jReporter.java"
first_commit_date = "2024-04-04"
last_commit_date = "2024-04-04"
test_file_content = "package io.dropwizard.metrics;\n\nimport org.junit.Test;\nimport org.slf4j.Logger;\nimport org.slf4j.Marker;\n\nimport io.dropwizard.metrics.Counter;\nimport io.dropwizard.metrics.Gauge;\nimport io.dropwizard.metrics.Histogram;\nimport io.dropwizard.metrics.Meter;\nimport io.dropwizard.metrics.MetricFilter;\nimport io.dropwizard.metrics.MetricName;\nimport io.dropwizard.metrics.MetricRegistry;\nimport io.dropwizard.metrics.Slf4jReporter;\nimport io.dropwizard.metrics.Snapshot;\nimport io.dropwizard.metrics.Timer;\n\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.mockito.Mockito.*;\n\npublic class Slf4jReporterTest {\n    private final Logger logger = mock(Logger.class);\n    private final Marker marker = mock(Marker.class);\n    private final MetricRegistry registry = mock(MetricRegistry.class);\n    private final Slf4jReporter infoReporter = Slf4jReporter.forRegistry(registry)\n            .outputTo(logger)\n            .markWith(marker)\n            .prefixedWith(\"prefix\")\n            .convertRatesTo(TimeUnit.SECONDS)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .withLoggingLevel(Slf4jReporter.LoggingLevel.INFO)\n            .filter(MetricFilter.ALL)\n            .build();\n\n    private final Slf4jReporter errorReporter = Slf4jReporter.forRegistry(registry)\n            .outputTo(logger)\n            .markWith(marker)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .withLoggingLevel(Slf4jReporter.LoggingLevel.ERROR)\n            .filter(MetricFilter.ALL)\n            .build();\n\n    @Test\n    public void reportsGaugeValuesAtError() throws Exception {\n        when(logger.isErrorEnabled(marker)).thenReturn(true);\n        errorReporter.report(map(\"gauge\", gauge(\"value\")),\n                this.map(),\n                this.map(),\n                this.map(),\n                this.map());\n\n        verify(logger).error(marker, \"type={}, name={}, value={}\", \"GAUGE\", \"gauge\", \"value\");\n        throw new RuntimeException(\"Random Error 1\");\n    }\n\n    @Test\n    public void reportsCounterValuesAtError() throws Exception {\n        final Counter counter = mock(Counter.class);\n        when(counter.getCount()).thenReturn(100L);\n        when(logger.isErrorEnabled(marker)).thenReturn(true);\n\n        errorReporter.report(this.map(),\n                map(\"test.counter\", counter),\n                this.map(),\n                this.map(),\n                this.map());\n\n        verify(logger).error(marker, \"type={}, name={}, count={}\", \"COUNTER\", \"test.counter\", 100L);\n        throw new RuntimeException(\"Random Error 2\");\n    }\n\n    @Test\n    public void reportsHistogramValuesAtError() throws Exception {\n        final Histogram histogram = mock(Histogram.class);\n        when(histogram.getCount()).thenReturn(1L);\n\n        final Snapshot snapshot = mock(Snapshot.class);\n        when(snapshot.getMax()).thenReturn(2L);\n        when(snapshot.getMean()).thenReturn(3.0);\n        when(snapshot.getMin()).thenReturn(4L);\n        when(snapshot.getStdDev()).thenReturn(5.0);\n        when(snapshot.getMedian()).thenReturn(6.0);\n        when(snapshot.get75thPercentile()).thenReturn(7.0);\n        when(snapshot.get95thPercentile()).thenReturn(8.0);\n        when(snapshot.get98thPercentile()).thenReturn(9.0);\n        when(snapshot.get99thPercentile()).thenReturn(10.0);\n        when(snapshot.get999thPercentile()).thenReturn(11.0);\n\n        when(histogram.getSnapshot()).thenReturn(snapshot);\n        when(logger.isErrorEnabled(marker)).thenReturn(true);\n\n        errorReporter.report(this.map(),\n                this.map(),\n                map(\"test.histogram\", histogram),\n                this.map(),\n                this.map());\n\n        verify(logger).error(marker,\n                \"type={}, name={}, count={}, min={}, max={}, mean={}, stddev={}, median={}, p75={}, p95={}, p98={}, p99={}, p999={}\",\n                \"HISTOGRAM\",\n                \"test.histogram\",\n                1L,\n                4L,\n                2L,\n                3.0,\n                5.0,\n                6.0,\n                7.0,\n                8.0,\n                9.0,\n                10.0,\n                11.0);\n        throw new RuntimeException(\"Random Error 3\");\n    }\n\n    @Test\n    public void reportsMeterValuesAtError() throws Exception {\n        final Meter meter = mock(Meter.class);\n        when(meter.getCount()).thenReturn(1L);\n        when(meter.getMeanRate()).thenReturn(2.0);\n        when(meter.getOneMinuteRate()).thenReturn(3.0);\n        when(meter.getFiveMinuteRate()).thenReturn(4.0);\n        when(meter.getFifteenMinuteRate()).thenReturn(5.0);\n        when(logger.isErrorEnabled(marker)).thenReturn(true);\n\n        errorReporter.report(this.map(),\n                this.map(),\n                this.map(),\n                map(\"test.meter\", meter),\n                this.map());\n\n        verify(logger).error(marker,\n                \"type={}, name={}, count={}, mean_rate={}, m1={}, m5={}, m15={}, rate_unit={}\",\n                \"METER\",\n                \"test.meter\",\n                1L,\n                2.0,\n                3.0,\n                4.0,\n                5.0,\n                \"events/second\");\n        throw new RuntimeException(\"Random Error 4\");\n    }\n\n    @Test\n    public void reportsTimerValuesAtError() throws Exception {\n        final Timer timer = mock(Timer.class);\n        when(timer.getCount()).thenReturn(1L);\n\n        when(timer.getMeanRate()).thenReturn(2.0);\n        when(timer.getOneMinuteRate()).thenReturn(3.0);\n        when(timer.getFiveMinuteRate()).thenReturn(4.0);\n        when(timer.getFifteenMinuteRate()).thenReturn(5.0);\n\n        final Snapshot snapshot = mock(Snapshot.class);\n        when(snapshot.getMax()).thenReturn(TimeUnit.MILLISECONDS.toNanos(100));\n        when(snapshot.getMean()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(200));\n        when(snapshot.getMin()).thenReturn(TimeUnit.MILLISECONDS.toNanos(300));\n        when(snapshot.getStdDev()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(400));\n        when(snapshot.getMedian()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(500));\n        when(snapshot.get75thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(600));\n        when(snapshot.get95thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(700));\n        when(snapshot.get98thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(800));\n        when(snapshot.get99thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(900));\n        when(snapshot.get999thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS\n                .toNanos(1000));\n\n        when(timer.getSnapshot()).thenReturn(snapshot);\n\n        when(logger.isErrorEnabled(marker)).thenReturn(true);\n\n        errorReporter.report(this.map(),\n                this.map(),\n                this.map(),\n                this.map(),\n                map(\"test.another.timer\", timer));\n\n        verify(logger).error(marker,\n                \"type={}, name={}, count={}, min={}, max={}, mean={}, stddev={}, median={}, p75={}, p95={}, p98={}, p99={}, p999={}, mean_rate={}, m1={}, m5={}, m15={}, rate_unit={}, duration_unit={}\",\n                \"TIMER\",\n                \"test.another.timer\",\n                1L,\n                300.0,\n                100.0,\n                200.0,\n                400.0,\n                500.0,\n                600.0,\n                700.0,\n                800.0,\n                900.0,\n                1000.0,\n                2.0,\n                3.0,\n                4.0,\n                5.0,\n                \"events/second\",\n                \"milliseconds\");\n        throw new RuntimeException(\"Random Error 5\");\n    }\n\n    @Test\n    public void reportsGaugeValues() throws Exception {\n        when(logger.isInfoEnabled(marker)).thenReturn(true);\n        infoReporter.report(map(\"gauge\", gauge(\"value\")),\n                this.map(),\n                this.map(),\n                this.map(),\n                this.map());\n\n        verify(logger).info(marker, \"type={}, name={}, value={}\", \"GAUGE\", \"prefix.gauge\", \"value\");\n    }\n\n    @Test\n    public void reportsCounterValues() throws Exception {\n        final Counter counter = mock(Counter.class);\n        when(counter.getCount()).thenReturn(100L);\n        when(logger.isInfoEnabled(marker)).thenReturn(true);\n\n        infoReporter.report(this.map(),\n                map(\"test.counter\", counter),\n                this.map(),\n                this.map(),\n                this.map());\n\n        verify(logger).info(marker, \"type={}, name={}, count={}\", \"COUNTER\", \"prefix.test.counter\", 100L);\n    }\n\n    @Test\n    public void reportsHistogramValues() throws Exception {\n        final Histogram histogram = mock(Histogram.class);\n        when(histogram.getCount()).thenReturn(1L);\n\n        final Snapshot snapshot = mock(Snapshot.class);\n        when(snapshot.getMax()).thenReturn(2L);\n        when(snapshot.getMean()).thenReturn(3.0);\n        when(snapshot.getMin()).thenReturn(4L);\n        when(snapshot.getStdDev()).thenReturn(5.0);\n        when(snapshot.getMedian()).thenReturn(6.0);\n        when(snapshot.get75thPercentile()).thenReturn(7.0);\n        when(snapshot.get95thPercentile()).thenReturn(8.0);\n        when(snapshot.get98thPercentile()).thenReturn(9.0);\n        when(snapshot.get99thPercentile()).thenReturn(10.0);\n        when(snapshot.get999thPercentile()).thenReturn(11.0);\n\n        when(histogram.getSnapshot()).thenReturn(snapshot);\n        when(logger.isInfoEnabled(marker)).thenReturn(true);\n\n        infoReporter.report(this.map(),\n                this.map(),\n                map(\"test.histogram\", histogram),\n                this.map(),\n                this.map());\n\n        verify(logger).info(marker,\n                \"type={}, name={}, count={}, min={}, max={}, mean={}, stddev={}, median={}, p75={}, p95={}, p98={}, p99={}, p999={}\",\n                \"HISTOGRAM\",\n                \"prefix.test.histogram\",\n                1L,\n                4L,\n                2L,\n                3.0,\n                5.0,\n                6.0,\n                7.0,\n                8.0,\n                9.0,\n                10.0,\n                11.0);\n    }\n\n    @Test\n    public void reportsMeterValues() throws Exception {\n        final Meter meter = mock(Meter.class);\n        when(meter.getCount()).thenReturn(1L);\n        when(meter.getMeanRate()).thenReturn(2.0);\n        when(meter.getOneMinuteRate()).thenReturn(3.0);\n        when(meter.getFiveMinuteRate()).thenReturn(4.0);\n        when(meter.getFifteenMinuteRate()).thenReturn(5.0);\n        when(logger.isInfoEnabled(marker)).thenReturn(true);\n\n        infoReporter.report(this.map(),\n                this.map(),\n                this.map(),\n                map(\"test.meter\", meter),\n                this.map());\n\n        verify(logger).info(marker,\n                \"type={}, name={}, count={}, mean_rate={}, m1={}, m5={}, m15={}, rate_unit={}\",\n                \"METER\",\n                \"prefix.test.meter\",\n                1L,\n                2.0,\n                3.0,\n                4.0,\n                5.0,\n                \"events/second\");\n    }\n\n    @Test\n    public void reportsTimerValues() throws Exception {\n        final Timer timer = mock(Timer.class);\n        when(timer.getCount()).thenReturn(1L);\n\n        when(timer.getMeanRate()).thenReturn(2.0);\n        when(timer.getOneMinuteRate()).thenReturn(3.0);\n        when(timer.getFiveMinuteRate()).thenReturn(4.0);\n        when(timer.getFifteenMinuteRate()).thenReturn(5.0);\n\n        final Snapshot snapshot = mock(Snapshot.class);\n        when(snapshot.getMax()).thenReturn(TimeUnit.MILLISECONDS.toNanos(100));\n        when(snapshot.getMean()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(200));\n        when(snapshot.getMin()).thenReturn(TimeUnit.MILLISECONDS.toNanos(300));\n        when(snapshot.getStdDev()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(400));\n        when(snapshot.getMedian()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(500));\n        when(snapshot.get75thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(600));\n        when(snapshot.get95thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(700));\n        when(snapshot.get98thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(800));\n        when(snapshot.get99thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS.toNanos(900));\n        when(snapshot.get999thPercentile()).thenReturn((double) TimeUnit.MILLISECONDS\n                .toNanos(1000));\n\n        when(timer.getSnapshot()).thenReturn(snapshot);\n        when(logger.isInfoEnabled(marker)).thenReturn(true);\n\n        infoReporter.report(this.map(),\n                this.map(),\n                this.map(),\n                this.map(),\n                map(\"test.another.timer\", timer));\n\n        verify(logger).info(marker,\n                \"type={}, name={}, count={}, min={}, max={}, mean={}, stddev={}, median={}, p75={}, p95={}, p98={}, p99={}, p999={}, mean_rate={}, m1={}, m5={}, m15={}, rate_unit={}, duration_unit={}\",\n                \"TIMER\",\n                \"prefix.test.another.timer\",\n                1L,\n                300.0,\n                100.0,\n                200.0,\n                400.0,\n                500.0,\n                600.0,\n                700.0,\n                800.0,\n                900.0,\n                1000.0,\n                2.0,\n                3.0,\n                4.0,\n                5.0,\n                \"events/second\",\n                \"milliseconds\");\n    }\n\n    private <T> SortedMap<MetricName, T> map() {\n        return new TreeMap<>();\n    }\n\n    private <T> SortedMap<MetricName, T> map(String name, T metric) {\n        final TreeMap<MetricName, T> map = new TreeMap<>();\n        map.put(MetricName.build(name), metric);\n        return map;\n    }\n\n    private <T> Gauge gauge(T value) {\n        final Gauge gauge = mock(Gauge.class);\n        when(gauge.getValue()).thenReturn(value);\n        return gauge;\n    }\n\n}"
