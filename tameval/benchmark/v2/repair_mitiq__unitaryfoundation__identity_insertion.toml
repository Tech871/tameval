[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "unitaryfoundation/mitiq"
sha = "3d4516eb01e0c82220a829bbf570ac537143b5a5"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mitiq/zne/scaling/identity_insertion.py -m pytest -q --junit-xml=test_output.xml mitiq/zne/scaling/tests/test_identity_insertion.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mitiq.zne.scaling.identity_insertion --unit-test mitiq.zne.scaling.tests.test_identity_insertion --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mitiq/zne/scaling/identity_insertion.py --unit-test mitiq/zne/scaling/tests/test_identity_insertion.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 84.0
covered_lines = [ 7, 9, 10, 12, 13, 16, 17, 21, 32, 33, 38, 54, 55, 59, 60, 61, 62, 64, 67, 70, 71, 82, 83, 84, 86, 90, 94, 95, 97, 98, 99, 101, 103, 104, 106, 107,]
missed_lines = []

[input_info]
test_file_path = "mitiq/zne/scaling/tests/test_identity_insertion.py"
focal_file_path = "mitiq/zne/scaling/identity_insertion.py"
test_file_url = "https://github.com/unitaryfoundation/mitiq/blob/3d4516eb01e0c82220a829bbf570ac537143b5a5/mitiq/zne/scaling/tests/test_identity_insertion.py"
focal_file_url = "https://github.com/unitaryfoundation/mitiq/blob/3d4516eb01e0c82220a829bbf570ac537143b5a5/mitiq/zne/scaling/identity_insertion.py"
first_commit_date = "2022-10-18"
last_commit_date = "2025-06-07"
test_file_content = "\n\n\nimport pytest\nfrom cirq import Circuit, LineQubit, ops\n\nfrom mitiq.utils import _equal\nfrom mitiq.zne.scaling.identity_insertion import (\n    UnscalableCircuitError,\n    _calculate_id_layers,\n    insert_id_layers,\n)\n\n\n@pytest.mark.parametrize(\"scale_factor\", (1, 2, 3, 4, 5, 6))\ndef test_id_layers_whole_scale_factor(scale_factor):\n    qreg = LineQubit.range(3)\n    circ = Circuit(\n        [ops.H.on_each(*qreg)],\n        [ops.CNOT.on(qreg[0], qreg[1])],\n        [ops.X.on(qreg[2])],\n        [ops.TOFFOLI.on(*qreg)],\n    )\n    scaled_circ = insert_id_layers(circ, scale_factor=scale_factor)\n    num_layers = scale_factor - 1\n    expected_circ = Circuit(\n        [ops.H.on_each(*qreg)],\n        [ops.I.on_each(*qreg)] * num_layers,\n        [ops.CNOT.on(qreg[0], qreg[1])],\n        [ops.X.on(qreg[2])],\n        [ops.I.on_each(*qreg)] * num_layers,\n        [ops.TOFFOLI.on(*qreg)],\n        [ops.I.on_each(*qreg)] * num_layers,\n    )\n\n\ndef test_scale_with_intermediate_measurements_raises_error():\n    qbit = LineQubit(0)\n    circ = Circuit([ops.H.on(qbit)], [ops.measure(qbit)], [ops.T.on(qbit)])\n    with pytest.raises(\n        UnscalableCircuitError,\n        match=\"Circuit contains intermediate measurements\",\n    ):\n        insert_id_layers(circ, scale_factor=3.0)\n\n\ndef test_scaling_with_terminal_measurement():\n    qbit = LineQubit(0)\n    input_circ = Circuit(\n        [ops.H.on(qbit)], [ops.T.on(qbit)], [ops.measure(qbit)]\n    )\n    scaled_circ = insert_id_layers(input_circ, scale_factor=3.0)\n    expected_circ = Circuit(\n        [ops.H.on(qbit)],\n        [ops.I.on(qbit)] * 2,\n        [ops.T.on(qbit)],\n        [ops.I.on(qbit)] * 2,\n        [ops.measure(qbit)],\n    )\n\n\ndef test_calculate_id_layers_diff_scale_factor():\n    qreg = LineQubit.range(3)\n    circ = Circuit(\n        [ops.H.on_each(*qreg)],\n        [ops.CNOT.on(qreg[0], qreg[1])],\n        [ops.X.on(qreg[2])],\n        [ops.TOFFOLI.on(*qreg)],\n    )\n    circ_depth = len(circ)\n    full_scale_factor = 3\n    id_layers_full_scale = _calculate_id_layers(circ_depth, full_scale_factor)\n    num_partial_layers_full_scale_factor = id_layers_full_scale[-1]\n\n    float_scale_factor_list = [1.3, 2.6, 3.77, 4.8, 5.9]\n    for i in float_scale_factor_list:\n        float_scale_factor = i\n        id_layers_float_scale = _calculate_id_layers(\n            circ_depth, float_scale_factor\n        )\n\n        num_partial_layers_float_scale_factor = id_layers_float_scale[-1]\n\n    bad_scale_factor_list = [-1.3, 0, -3, 0.76]\n    for i in bad_scale_factor_list:\n        with pytest.raises(ValueError, match=\"Requires scale_factor >= 1\"):\n            _calculate_id_layers(circ_depth, i)\n            insert_id_layers(circ, i)\n\n\n@pytest.mark.parametrize(\n    \"intended_scale_factor\",\n    (1, 1.1, 1.3, 1.7, 1.9, 2, 3.1, 3.6, 3.9, 3, 4, 5, 6),\n)\ndef test_compare_scale_factor(intended_scale_factor):\n    qreg = LineQubit.range(3)\n    circ = Circuit(\n        [ops.H.on_each(*qreg)],\n        [ops.CNOT.on(qreg[0], qreg[1])],\n        [ops.X.on(qreg[2])],\n        [ops.TOFFOLI.on(*qreg)],\n    )\n    scaled = insert_id_layers(circ, intended_scale_factor)\n    achieved_scale_factor = len(scaled) / len(circ)"
