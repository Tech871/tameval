[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.2"

[repo_info]
repository = "supabase/cli"
sha = "418caee001449f782a775b0f13af09b25dd581da"

[run_info]
docker_image = "golang:1.23.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/migration/up/up.go internal/migration/up/up_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/migration/up/up.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 62.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/migration/up/up_test.go"
focal_file_path = "internal/migration/up/up.go"
test_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/migration/up/up_test.go"
focal_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/migration/up/up.go"
first_commit_date = "2023-05-08"
last_commit_date = "2025-01-31"
test_file_content = "package up\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\n\t\"github.com/spf13/afero\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"github.com/supabase/cli/v2/internal/testing/fstest\"\n\t\"github.com/supabase/cli/v2/internal/utils\"\n\t\"github.com/supabase/cli/v2/pkg/migration\"\n\t\"github.com/supabase/cli/v2/pkg/pgtest\"\n)\n\nfunc TestPendingMigrations(t *testing.T) {\n\tt.Run(\"finds pending migrations\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\tfiles := []string{\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000000_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000001_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000002_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000003_test.sql\"),\n\t\t}\n\t\tfor _, path := range files {\n\t\t\trequire.NoError(t, afero.WriteFile(fsys, path, []byte(\"\"), 0644))\n\t\t}\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 2\", []interface{}{\"20221201000000\"}, []interface{}{\"20221201000001\"})\n\t\t// Run test\n\t\tpending, err := GetPendingMigrations(context.Background(), false, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.ElementsMatch(t, files[2:], pending)\n\t})\n\n\tt.Run(\"throws error on local load failure\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := &fstest.OpenErrorFs{DenyPath: utils.MigrationsDir}\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 0\")\n\t\t// Run test\n\t\t_, err := GetPendingMigrations(context.Background(), false, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, os.ErrPermission)\n\t})\n\n\tt.Run(\"throws error on missing local migration\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 1\", []interface{}{\"0\"})\n\t\t// Run test\n\t\t_, err := GetPendingMigrations(context.Background(), false, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, migration.ErrMissingLocal)\n\t\tassert.Contains(t, utils.CmdSuggestion, \"supabase migration repair --status reverted 0\")\n\t})\n\n\tt.Run(\"throws error on missing remote version\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\tfiles := []string{\"0_test.sql\", \"1_test.sql\"}\n\t\tfor _, name := range files {\n\t\t\tpath := filepath.Join(utils.MigrationsDir, name)\n\t\t\trequire.NoError(t, afero.WriteFile(fsys, path, []byte(\"\"), 0644))\n\t\t}\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 1\", []interface{}{\"1\"})\n\t\t// Run test\n\t\t_, err := GetPendingMigrations(context.Background(), false, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, migration.ErrMissingRemote)\n\t})\n}\n\nfunc TestIgnoreVersionMismatch(t *testing.T) {\n\tt.Run(\"applies out-of-order local migrations\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\tfiles := []string{\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000000_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000001_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000002_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000003_test.sql\"),\n\t\t}\n\t\tfor _, path := range files {\n\t\t\trequire.NoError(t, afero.WriteFile(fsys, path, []byte(\"\"), 0644))\n\t\t}\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 2\", []interface{}{\"20221201000000\"}, []interface{}{\"20221201000002\"})\n\t\t// Run test\n\t\tpending, err := GetPendingMigrations(context.Background(), true, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.ElementsMatch(t, []string{files[1], files[3]}, pending)\n\t})\n\n\tt.Run(\"throws error on missing local and remote migration\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\tfiles := []string{\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000000_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000001_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000002_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000003_test.sql\"),\n\t\t}\n\t\tfor _, path := range files {\n\t\t\trequire.NoError(t, afero.WriteFile(fsys, path, []byte(\"\"), 0644))\n\t\t}\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 2\", []interface{}{\"20221201000002\"}, []interface{}{\"20221201000004\"})\n\t\t// Run test\n\t\t_, err := GetPendingMigrations(context.Background(), true, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, migration.ErrMissingLocal)\n\t\tassert.Contains(t, utils.CmdSuggestion, \"supabase migration repair --status reverted 20221201000004\")\n\t})\n\n\tt.Run(\"throws error on missing local migration\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\tfiles := []string{\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000000_test.sql\"),\n\t\t\tfilepath.Join(utils.MigrationsDir, \"20221201000002_test.sql\"),\n\t\t}\n\t\tfor _, path := range files {\n\t\t\trequire.NoError(t, afero.WriteFile(fsys, path, []byte(\"\"), 0644))\n\t\t}\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(migration.LIST_MIGRATION_VERSION).\n\t\t\tReply(\"SELECT 5\",\n\t\t\t\t[]interface{}{\"20221201000000\"},\n\t\t\t\t[]interface{}{\"20221201000001\"},\n\t\t\t\t[]interface{}{\"20221201000002\"},\n\t\t\t\t[]interface{}{\"20221201000003\"},\n\t\t\t\t[]interface{}{\"20221201000004\"},\n\t\t\t)\n\t\t// Run test\n\t\t_, err := GetPendingMigrations(context.Background(), true, conn.MockClient(t), fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, migration.ErrMissingLocal)\n\t\tassert.Contains(t, utils.CmdSuggestion, \"supabase migration repair --status reverted 20221201000001 20221201000003 20221201000004\")\n\t})\n}"
