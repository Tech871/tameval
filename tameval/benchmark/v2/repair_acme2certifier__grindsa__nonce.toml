[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "grindsa/acme2certifier"
sha = "8f9485d611c4f4f183b556a182a1befeb63b0517"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=acme_srv/nonce.py -m pytest -q --junit-xml=test_output.xml test/test_nonce.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target acme_srv.nonce --unit-test test.test_nonce --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target acme_srv/nonce.py --unit-test test/test_nonce.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 3, 4, 5, 8, 11, 12, 13, 14, 16, 18, 20, 23, 25, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 44, 45, 46, 48, 49, 50, 51, 52, 54, 56, 57, 59, 61, 62, 63, 65, 66, 67, 68, 69, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82,]
missed_lines = []

[input_info]
test_file_path = "test/test_nonce.py"
focal_file_path = "acme_srv/nonce.py"
test_file_url = "https://github.com/grindsa/acme2certifier/blob/8f9485d611c4f4f183b556a182a1befeb63b0517/test/test_nonce.py"
focal_file_url = "https://github.com/grindsa/acme2certifier/blob/8f9485d611c4f4f183b556a182a1befeb63b0517/acme_srv/nonce.py"
first_commit_date = "2021-06-13"
last_commit_date = "2025-04-26"
test_file_content = "\nimport unittest\nimport sys\nfrom unittest.mock import patch, MagicMock\n\nsys.path.insert(0, \".\")\nsys.path.insert(1, \"..\")\n\nclass FakeDBStore(object):\n    pass\n\nclass TestACMEHandler(unittest.TestCase):\n\n    acme = None\n\n    def setUp(self):\n        models_mock = MagicMock()\n        models_mock.acme_srv.db_handler.DBstore.return_value = FakeDBStore\n        modules = {\"acme_srv.db_handler\": models_mock}\n        patch.dict(\"sys.modules\", modules).start()\n        import logging\n\n        logging.basicConfig(level=logging.CRITICAL)\n        self.logger = logging.getLogger(\"test_a2c\")\n        from acme_srv.nonce import Nonce\n\n        self.nonce = Nonce(False, self.logger)\n\n    def test_001_nonce__new(self):\n        self.assertIsNotNone(self.nonce._new())\n\n    def test_002_nonce_generate_and_add(self):\n        self.assertIsNotNone(self.nonce.generate_and_add())\n\n    def test_003_nonce_check(self):\n        self.assertEqual(\n            (400, \"urn:ietf:params:acme:error:badNonce\", \"NONE\"),\n            self.nonce.check({\"foo\": \"bar\"}),\n        )\n\n    def test_004_nonce_check(self):\n        self.assertEqual((200, None, None), self.nonce.check({\"nonce\": \"aaa\"}))\n\n    def test_005_nonce__check_and_delete(self):\n        self.assertEqual((200, None, None), self.nonce._check_and_delete(\"aaa\"))\n\n    def test_006_nonce_generate_and_add(self):\n        self.nonce.dbstore.nonce_add.side_effect = Exception(\"exc_nonce_add\")\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n            self.nonce.generate_and_add()\n        self.assertIn(\n            \"CRITICAL:test_a2c:acme2certifier database error in Nonce.generate_and_add(): exc_nonce_add\",\n            lcm.output,\n        )\n\n    def test_007_nonce__check_and_delete(self):\n        self.nonce.dbstore.nonce_check.return_value = True\n        self.nonce.dbstore.nonce_delete.side_effect = Exception(\"exc_nonce_delete\")\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n            self.nonce._check_and_delete(\"nonce\")\n        self.assertIn(\n            \"CRITICAL:test_a2c:acme2certifier database error during nonce_delete() in Nonce._check_and_delete(): exc_nonce_delete\",\n            lcm.output,\n        )\n\n    def test_008_nonce__check_and_delete(self):\n        self.nonce.dbstore.nonce_check.side_effect = Exception(\"exc_nonce_check\")\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n            self.nonce._check_and_delete(\"nonce\")\n        self.assertIn(\n            \"CRITICAL:test_a2c:acme2certifier database error during nonce_check() in Nonce._check_and_delete(): exc_nonce_check\",\n            lcm.output,\n        )\n\n    def test_009__enter_(self):\n        self.nonce.__enter__()\n\n    def test_010_nonce_verification(self):\n        self.assertEqual((200, None, None), self.nonce.check({\"nonce\": \"aaa\"}))\n\n    def test_011_verify_nonce(self):\n        self.assertEqual(\n            (400, \"urn:ietf:params:acme:error:badNonce\", \"NONE\"),\n            self.nonce.check({\"foo\": \"bar\"}),\n        )\n\nif __name__ == \"__main__\":\n    unittest.main()"
