[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.22.5"

[repo_info]
repository = "ydb-platform/ydb-go-sdk"
sha = "6ecec32a4ff86f5a4f92e3d35aa1c1a4cf1b63d3"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out testutil/compare.go testutil/compare_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting testutil/compare.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 79.0
original_coverage = 79.0
mutation_kill_rate = 0
original_mutation_kill_rate = 68.0
covered_lines = [ 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 63, 64, 65, 66, 67, 68, 70, 73, 74, 75, 76, 85, 86, 87, 88, 89, 90, 91, 93, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 114, 115, 116, 118, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 146, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 303, 304, 305, 306, 310, 315, 318, 319, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335,]
missed_lines = [ 56, 57, 58, 59, 79, 80, 81, 82, 121, 122, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 169, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 300, 307, 308, 309, 311, 312, 313, 322, 323,]

[input_info]
test_file_path = "testutil/compare_test.go"
focal_file_path = "testutil/compare.go"
test_file_url = "https://github.com/ydb-platform/ydb-go-sdk/blob/6ecec32a4ff86f5a4f92e3d35aa1c1a4cf1b63d3/testutil/compare_test.go"
focal_file_url = "https://github.com/ydb-platform/ydb-go-sdk/blob/6ecec32a4ff86f5a4f92e3d35aa1c1a4cf1b63d3/testutil/compare.go"
first_commit_date = "2021-12-08"
last_commit_date = "2025-06-26"
test_file_content = "package testutil\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/ydb-platform/ydb-go-genproto/protos/Ydb\"\n\t\"google.golang.org/protobuf/types/known/structpb\"\n\n\t\"github.com/ydb-platform/ydb-go-sdk/v3/internal/types\"\n\t\"github.com/ydb-platform/ydb-go-sdk/v3/internal/value\"\n)\n\nfunc TestUnwrapOptionalValue(t *testing.T) {\n\tv := value.OptionalValue(value.OptionalValue(value.TextValue(\"a\")))\n\tval := unwrapTypedValue(value.ToYDB(v))\n\ttypeID := val.GetType().GetTypeId()\n\tif typeID != Ydb.Type_UTF8 {\n\t\tt.Errorf(\"Types are different: expected %d, actual %d\", Ydb.Type_UTF8, typeID)\n\t}\n\ttextValue := val.GetValue().GetValue().(*Ydb.Value_TextValue)\n\tif text := textValue.TextValue; text != \"a\" {\n\t\tt.Errorf(\"Values are different: expected %q, actual %q\", \"a\", text)\n\t}\n}\n\nfunc TestUnwrapPrimitiveValue(t *testing.T) {\n\tv := value.TextValue(\"a\")\n\tval := unwrapTypedValue(value.ToYDB(v))\n\ttypeID := val.GetType().GetTypeId()\n\tif typeID != Ydb.Type_UTF8 {\n\t\tt.Errorf(\"Types are different: expected %d, actual %d\", Ydb.Type_UTF8, typeID)\n\t}\n\ttextValue := val.GetValue().GetValue().(*Ydb.Value_TextValue)\n\tif text := textValue.TextValue; text != \"a\" {\n\t\tt.Errorf(\"Values are different: expected %q, actual %q\", \"a\", text)\n\t}\n}\n\nfunc TestUnwrapNullValue(t *testing.T) {\n\tv := value.NullValue(types.Text)\n\tval := unwrapTypedValue(value.ToYDB(v))\n\ttypeID := val.GetType().GetTypeId()\n\tif typeID != Ydb.Type_UTF8 {\n\t\tt.Errorf(\"Types are different: expected %d, actual %d\", Ydb.Type_UTF8, typeID)\n\t}\n\tnullFlagValue := val.GetValue().GetValue().(*Ydb.Value_NullFlagValue)\n\tif nullFlagValue.NullFlagValue != structpb.NullValue_NULL_VALUE {\n\t\tt.Errorf(\"Values are different: expected %d, actual %d\", structpb.NullValue_NULL_VALUE, nullFlagValue.NullFlagValue)\n\t}\n}\n\nfunc TestUint8(t *testing.T) {\n\tl := value.Uint8Value(byte(1))\n\tr := value.Uint8Value(byte(10))\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestInt8(t *testing.T) {\n\tl := value.Int8Value(int8(1))\n\tr := value.Int8Value(int8(10))\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestTimestamp(t *testing.T) {\n\tl := value.TimestampValue(1)\n\tr := value.TimestampValue(10)\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestDateTime(t *testing.T) {\n\tl := value.DatetimeValue(1)\n\tr := value.DatetimeValue(10)\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestUint64(t *testing.T) {\n\tl := value.Uint64Value(uint64(1))\n\tr := value.Uint64Value(uint64(10))\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestInt64(t *testing.T) {\n\tl := value.Int64Value(int64(1))\n\tr := value.Int64Value(int64(10))\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestDouble(t *testing.T) {\n\tl := value.DoubleValue(1.0)\n\tr := value.DoubleValue(2.0)\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestFloat(t *testing.T) {\n\tl := value.FloatValue(1.0)\n\tr := value.FloatValue(2.0)\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestUTF8(t *testing.T) {\n\tl := value.TextValue(\"abc\")\n\tr := value.TextValue(\"abx\")\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestOptionalUTF8(t *testing.T) {\n\tl := value.OptionalValue(value.OptionalValue(value.TextValue(\"abc\")))\n\tr := value.TextValue(\"abx\")\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestBytes(t *testing.T) {\n\tl := value.BytesValue([]byte{1, 2, 3})\n\tr := value.BytesValue([]byte{1, 2, 5})\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestNull(t *testing.T) {\n\tl := value.NullValue(types.Text)\n\tr := value.TextValue(\"abc\")\n\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestTuple(t *testing.T) {\n\twithNull := value.TupleValue(value.Uint64Value(1), value.NullValue(types.Text))\n\tleast := value.TupleValue(value.Uint64Value(1), value.TextValue(\"abc\"))\n\tmedium := value.TupleValue(value.Uint64Value(1), value.TextValue(\"def\"))\n\tlargest := value.TupleValue(value.Uint64Value(2), value.TextValue(\"abc\"))\n\n\tc, err := Compare(least, medium)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(least, largest)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(largest, medium)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(withNull, least)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(withNull, withNull)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestList(t *testing.T) {\n\tleast := value.ListValue(value.Uint64Value(1), value.Uint64Value(1))\n\tmedium := value.ListValue(value.Uint64Value(1), value.Uint64Value(2))\n\tlargest := value.ListValue(value.Uint64Value(2), value.Uint64Value(1))\n\n\tc, err := Compare(least, medium)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(least, largest)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(largest, medium)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n}\n\nfunc TestDyNumber(t *testing.T) {\n\tl := value.DyNumberValue(\"2\")\n\tr := value.DyNumberValue(\"12\")\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestUUID(t *testing.T) {\n\tl := value.UUIDWithIssue1501Value([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16})\n\tr := value.UUIDWithIssue1501Value([16]byte{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17})\n\tg := value.UUIDWithIssue1501Value([16]byte{100, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17})\n\tc, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(l, g)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, c)\n\n\tc, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, c)\n\n\tc, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, c)\n}\n\nfunc TestIncompatiblePrimitives(t *testing.T) {\n\tl := value.Uint64Value(1)\n\tr := value.TimestampValue(2)\n\t_, err := Compare(l, r)\n\tif err == nil {\n\t\tt.Errorf(\"WithStackTrace expected\")\n\t}\n\tif !errors.Is(err, ErrNotComparable) {\n\t\tt.Errorf(\"Unexpected error: %v\", err)\n\t}\n}\n\nfunc TestIncompatibleTuples(t *testing.T) {\n\tl := value.TupleValue(value.Uint64Value(1), value.TextValue(\"abc\"))\n\tr := value.TupleValue(value.Uint64Value(1), value.BytesValue([]byte(\"abc\")))\n\tif _, err := Compare(l, r); err == nil {\n\t\tt.Error(\"WithStackTrace expected\")\n\t} else if !errors.Is(err, ErrNotComparable) {\n\t\tt.Errorf(\"Unexpected error: %v\", err)\n\t}\n}\n\nfunc TestTupleOfDifferentLength(t *testing.T) {\n\tl := value.TupleValue(value.Uint64Value(1), value.TextValue(\"abc\"))\n\tr := value.TupleValue(value.Uint64Value(1), value.TextValue(\"abc\"), value.TextValue(\"def\"))\n\n\tcmp, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, cmp)\n\n\tcmp, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, cmp)\n}\n\nfunc TestTupleInTuple(t *testing.T) {\n\tl := value.TupleValue(value.Uint64Value(1), value.TupleValue(value.TextValue(\"abc\"), value.BytesValue([]byte(\"xyz\"))))\n\tr := value.TupleValue(value.Uint64Value(1), value.TupleValue(value.TextValue(\"def\"), value.BytesValue([]byte(\"xyz\"))))\n\n\tcmp, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, cmp)\n\n\tcmp, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, cmp)\n\n\tcmp, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, cmp)\n}\n\nfunc TestListInList(t *testing.T) {\n\tl := value.ListValue(\n\t\tvalue.ListValue(\n\t\t\tvalue.TextValue(\"abc\"), value.TextValue(\"def\"),\n\t\t), value.ListValue(\n\t\t\tvalue.TextValue(\"uvw\"), value.TextValue(\"xyz\"),\n\t\t),\n\t)\n\tr := value.ListValue(\n\t\tvalue.ListValue(\n\t\t\tvalue.TextValue(\"abc\"), value.TextValue(\"deg\"),\n\t\t), value.ListValue(\n\t\t\tvalue.TextValue(\"uvw\"), value.TextValue(\"xyz\"),\n\t\t),\n\t)\n\n\tcmp, err := Compare(l, r)\n\trequireNoError(t, err)\n\trequireEqualValues(t, -1, cmp)\n\n\tcmp, err = Compare(r, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 1, cmp)\n\n\tcmp, err = Compare(l, l)\n\trequireNoError(t, err)\n\trequireEqualValues(t, 0, cmp)\n}\n\nfunc requireNoError(t *testing.T, err error) {\n\tt.Helper()\n\tif err != nil {\n\t\tt.Errorf(\"Unexpected error %v\", err)\n\t}\n}\n\nfunc requireEqualValues(t *testing.T, expected int, actual int) {\n\tt.Helper()\n\tif expected != actual {\n\t\tt.Errorf(\"Values not equal: expected %v, actual %v\", expected, actual)\n\t}\n}"
