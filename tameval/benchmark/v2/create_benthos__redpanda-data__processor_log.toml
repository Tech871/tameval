[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "redpanda-data/benthos"
sha = "7da18c5fb096a3607f9f70c06614742b24ae938e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/impl/pure/processor_log.go internal/impl/pure/processor_log_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/impl/pure/processor_log.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 54.0
original_coverage = 76.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 85, 90, 91, 92, 93, 94, 95, 99, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 141, 144, 145, 146, 155, 156, 157, 158, 171, 172, 173, 206, 207, 208, 209, 215, 217, 222, 223, 226,]
missed_lines = [ 81, 82, 83, 86, 87, 88, 96, 97, 98, 101, 102, 117, 118, 119, 128, 129, 130, 133, 134, 135, 136, 138, 139, 140, 147, 148, 149, 150, 151, 152, 153, 154, 159, 160, 161, 162, 163, 164, 165, 166, 168, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 210, 211, 212, 213, 218, 219, 220, 221, 229, 230, 231,]

[input_info]
test_file_path = "internal/impl/pure/processor_log_test.go"
focal_file_path = "internal/impl/pure/processor_log.go"
test_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_log_test.go"
focal_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_log.go"
first_commit_date = "2022-04-26"
last_commit_date = "2025-02-06"
test_file_content = "// Copyright 2025 Redpanda Data, Inc.\n\npackage pure_test\n\nimport (\n\t\"context\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/redpanda-data/benthos/v4/internal/component/testutil\"\n\tlog_testutil \"github.com/redpanda-data/benthos/v4/internal/log/testutil\"\n\t\"github.com/redpanda-data/benthos/v4/internal/manager/mock\"\n\t\"github.com/redpanda-data/benthos/v4/internal/message\"\n)\n\n\n\nfunc TestLogWithFields(t *testing.T) {\n\tconf, err := testutil.ProcessorFromYAML(`\nlog:\n  message: '${!json(\"foo\")}'\n  level: INFO\n  fields:\n    static: foo\n    dynamic: '${!json(\"bar\")}'\n`)\n\trequire.NoError(t, err)\n\n\tlogMock := &log_testutil.MockLog{}\n\n\tmgr := mock.NewManager()\n\tmgr.L = logMock\n\n\tl, err := mgr.NewProcessor(conf)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tinput := message.QuickBatch([][]byte{[]byte(`{\"foo\":\"info message\",\"bar\":\"with fields\"}`)})\n\texpMsgs := []message.Batch{input}\n\tactMsgs, res := l.ProcessBatch(context.Background(), input)\n\tif res != nil {\n\t\tt.Fatal(res)\n\t}\n\tif !reflect.DeepEqual(expMsgs, actMsgs) {\n\t\tt.Errorf(\"Wrong message passthrough: %v != %v\", actMsgs, expMsgs)\n\t}\n\n\tif exp, act := []string{\"info message\"}, logMock.Infos; !reflect.DeepEqual(exp, act) {\n\t\tt.Errorf(\"Wrong log output: %v != %v\", act, exp)\n\t}\n\tt.Logf(\"Checking %v\\n\", logMock.Fields)\n\tif exp, act := 1, len(logMock.Fields); exp != act {\n\t\tt.Fatalf(\"Wrong count of fields: %v != %v\", act, exp)\n\t}\n\tif exp, act := map[string]string{\"dynamic\": \"with fields\", \"static\": \"foo\"}, logMock.Fields[0]; !reflect.DeepEqual(exp, act) {\n\t\tt.Errorf(\"Wrong field output: %v != %v\", act, exp)\n\t}\n\n\tinput = message.QuickBatch([][]byte{[]byte(`{\"foo\":\"info message 2\",\"bar\":\"with fields 2\"}`)})\n\texpMsgs = []message.Batch{input}\n\tactMsgs, res = l.ProcessBatch(context.Background(), input)\n\tif res != nil {\n\t\tt.Fatal(res)\n\t}\n\tif !reflect.DeepEqual(expMsgs, actMsgs) {\n\t\tt.Errorf(\"Wrong message passthrough: %v != %v\", actMsgs, expMsgs)\n\t}\n\n\tif exp, act := []string{\"info message\", \"info message 2\"}, logMock.Infos; !reflect.DeepEqual(exp, act) {\n\t\tt.Errorf(\"Wrong log output: %v != %v\", act, exp)\n\t}\n\tt.Logf(\"Checking %v\\n\", logMock.Fields)\n\tif exp, act := 2, len(logMock.Fields); exp != act {\n\t\tt.Fatalf(\"Wrong count of fields: %v != %v\", act, exp)\n\t}\n\tif exp, act := map[string]string{\"dynamic\": \"with fields\", \"static\": \"foo\"}, logMock.Fields[0]; !reflect.DeepEqual(exp, act) {\n\t\tt.Errorf(\"Wrong field output: %v != %v\", act, exp)\n\t}\n\tif exp, act := map[string]string{\"dynamic\": \"with fields 2\", \"static\": \"foo\"}, logMock.Fields[1]; !reflect.DeepEqual(exp, act) {\n\t\tt.Errorf(\"Wrong field output: %v != %v\", act, exp)\n\t}\n}\n"
