[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "crossplane/crossplane-runtime"
sha = "5eca3444c2f11ff8326b6f355877961a52552d05"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/resource/unstructured/claim/claim.go pkg/resource/unstructured/claim/claim_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/resource/unstructured/claim/claim.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 18.0
original_coverage = 78.0
mutation_kill_rate = 20.0
original_mutation_kill_rate = 60.0
covered_lines = [ 35, 36, 37, 38, 50, 51, 52, 53, 54, 56, 150, 151, 152, 155, 156, 161, 162, 163, 227, 228, 233, 237, 238, 239,]
missed_lines = [ 43, 44, 45, 46, 68, 69, 70, 73, 74, 75, 76, 77, 79, 83, 84, 85, 88, 89, 90, 91, 92, 94, 98, 99, 100, 103, 104, 105, 106, 107, 109, 113, 114, 115, 118, 119, 120, 121, 122, 124, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 146, 157, 158, 159, 167, 168, 169, 170, 171, 173, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 198, 202, 203, 204, 207, 208, 209, 210, 211, 212, 214, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255,]

[input_info]
test_file_path = "pkg/resource/unstructured/claim/claim_test.go"
focal_file_path = "pkg/resource/unstructured/claim/claim.go"
test_file_url = "https://github.com/crossplane/crossplane-runtime/blob/5eca3444c2f11ff8326b6f355877961a52552d05/pkg/resource/unstructured/claim/claim_test.go"
focal_file_url = "https://github.com/crossplane/crossplane-runtime/blob/5eca3444c2f11ff8326b6f355877961a52552d05/pkg/resource/unstructured/claim/claim.go"
first_commit_date = "2020-08-19"
last_commit_date = "2025-07-30"
test_file_content = "/*\nCopyright 2020 The Crossplane Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage claim\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\n\txpv1 \"github.com/crossplane/crossplane-runtime/v2/apis/common/v1\"\n)\n\nvar _ client.Object = &Unstructured{}\n\nfunc TestWithGroupVersionKind(t *testing.T) {\n\tgvk := schema.GroupVersionKind{\n\t\tGroup:   \"g\",\n\t\tVersion: \"v1\",\n\t\tKind:    \"k\",\n\t}\n\tcases := map[string]struct {\n\t\tgvk  schema.GroupVersionKind\n\t\twant *Unstructured\n\t}{\n\t\t\"New\": {\n\t\t\tgvk: gvk,\n\t\t\twant: &Unstructured{\n\t\t\t\tUnstructured: unstructured.Unstructured{\n\t\t\t\t\tObject: map[string]any{\n\t\t\t\t\t\t\"apiVersion\": \"g/v1\",\n\t\t\t\t\t\t\"kind\":       \"k\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := New(WithGroupVersionKind(tc.gvk))\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"New(WithGroupVersionKind(...): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\n\n\n\n\n\n\nfunc TestCompositeDeletePolicy(t *testing.T) {\n\tp := xpv1.CompositeDeleteBackground\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *xpv1.CompositeDeletePolicy\n\t\twant *xpv1.CompositeDeletePolicy\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  &p,\n\t\t\twant: &p,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetCompositeDeletePolicy(tc.set)\n\n\t\t\tgot := tc.u.GetCompositeDeletePolicy()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetCompositeDeletePolicy(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\n\n\n\nfunc TestConnectionDetailsLastPublishedTime(t *testing.T) {\n\tnow := &metav1.Time{Time: time.Now()}\n\n\t// The timestamp loses a little resolution when round-tripped through JSON\n\t// encoding.\n\tlores := func(t *metav1.Time) *metav1.Time {\n\t\tout := &metav1.Time{}\n\t\tj, _ := json.Marshal(t) //nolint:errchkjson // No encoding issue in practice.\n\t\t_ = json.Unmarshal(j, out)\n\n\t\treturn out\n\t}\n\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *metav1.Time\n\t\twant *metav1.Time\n\t}{\n\t\t\"NewTime\": {\n\t\t\tu:    New(),\n\t\t\tset:  now,\n\t\t\twant: lores(now),\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetConnectionDetailsLastPublishedTime(tc.set)\n\n\t\t\tgot := tc.u.GetConnectionDetailsLastPublishedTime()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetConnectionDetailsLastPublishedTime(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n"
