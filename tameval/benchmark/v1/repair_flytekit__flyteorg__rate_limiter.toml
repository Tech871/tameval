[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "flyteorg/flytekit"
sha = "5503ee5e232fdbc633af39c7f4539a04906102fc"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r dev-requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=flytekit/utils/rate_limiter.py -m pytest -q --junit-xml=test_output.xml tests/flytekit/unit/utils/test_rate_limiter.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target flytekit.utils.rate_limiter --unit-test tests.flytekit.unit.utils.test_rate_limiter --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target flytekit/utils/rate_limiter.py --unit-test tests/flytekit/unit/utils/test_rate_limiter.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 90.0
original_coverage = 90.0
mutation_kill_rate = 76.0
original_mutation_kill_rate = 76.0
covered_lines = [ 0, 1, 2, 4, 5, 8, 11, 12, 14, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 30, 40, 41, 42, 43, 44, 45, 48, 53,]
missed_lines = [ 13, 50, 51,]

[input_info]
test_file_path = "tests/flytekit/unit/utils/test_rate_limiter.py"
focal_file_path = "flytekit/utils/rate_limiter.py"
test_file_url = "https://github.com/flyteorg/flytekit/blob/5503ee5e232fdbc633af39c7f4539a04906102fc/tests/flytekit/unit/utils/test_rate_limiter.py"
focal_file_url = "https://github.com/flyteorg/flytekit/blob/5503ee5e232fdbc633af39c7f4539a04906102fc/flytekit/utils/rate_limiter.py"
first_commit_date = "2025-02-14"
last_commit_date = "2025-02-14"
test_file_content = "import pytest\nimport sys\nimport timeit\nimport asyncio\n\nfrom datetime import timedelta\nfrom flytekit.utils.rate_limiter import RateLimiter\n\n\nasync def launch_requests(rate_limiter: RateLimiter, total: int):\n    tasks = [asyncio.create_task(rate_limiter.acquire()) for _ in range(total)]\n    await asyncio.gather(*tasks)\n\n\nasync def helper_for_async(rpm: int, total: int):\n    rate_limiter = RateLimiter(rpm=rpm)\n    rate_limiter.delay = timedelta(seconds=1)\n    await launch_requests(rate_limiter, total)\n\n\ndef runner_for_async(rpm: int, total: int):\n    loop = asyncio.get_event_loop()\n    return loop.run_until_complete(helper_for_async(rpm, total))\n\n\n@pytest.mark.asyncio\ndef test_rate_limiter():\n    elapsed_time = timeit.timeit(lambda: runner_for_async(2, 2), number=1)\n    elapsed_time_more = timeit.timeit(lambda: runner_for_async(2, 6), number=1)\n    assert elapsed_time < 0.25\n    assert round(elapsed_time_more) == 2\n\n\n@pytest.mark.asyncio\ndef test_rate_limiter_performance():\n    elapsed_time = timeit.timeit(lambda: runner_for_async(2, 2), number=1)\n    elapsed_time_more = timeit.timeit(lambda: runner_for_async(2, 6), number=1)\n    assert elapsed_time < 0.3\n    assert round(elapsed_time_more) == 2\n\n\nasync def sync_wrapper(rate_limiter: RateLimiter):\n    rate_limiter.sync_acquire()\n\n\nasync def helper_for_sync(rpm: int, total: int):\n    rate_limiter = RateLimiter(rpm=rpm)\n    rate_limiter.delay = timedelta(seconds=1)\n    tasks = [asyncio.create_task(sync_wrapper(rate_limiter)) for _ in range(total)]\n    await asyncio.gather(*tasks)\n\n\ndef runner_for_sync(rpm: int, total: int):\n    loop = asyncio.get_event_loop()\n    return loop.run_until_complete(helper_for_sync(rpm, total))\n\n\n@pytest.mark.asyncio\ndef test_rate_limiter_s():\n    elapsed_time = timeit.timeit(lambda: runner_for_sync(2, 2), number=1)\n    elapsed_time_more = timeit.timeit(lambda: runner_for_sync(2, 6), number=1)\n    assert elapsed_time < 0.25\n    assert round(elapsed_time_more) == 2\n\n\n@pytest.mark.asyncio\ndef verify_rate_limiter_sync():\n    elapsed_time = timeit.timeit(lambda: runner_for_sync(2, 2), number=1)\n    elapsed_time_more = timeit.timeit(lambda: runner_for_sync(2, 6), number=1)\n    assert elapsed_time < 0.2\n    assert round(elapsed_time_more) == 3"
