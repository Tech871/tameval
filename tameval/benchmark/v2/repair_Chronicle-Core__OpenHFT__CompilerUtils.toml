[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Java"
java_version = "11"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "OpenHFT/Chronicle-Core"
sha = "655bef412e78a19621250cb8661bd3851643f68d"

[run_info]
docker_image = "maven:3.8.4-openjdk-11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=CompilerUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.CompilerUtils  -DtargetTests=**.CompilerUtilsTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 50.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/net/openhft/chronicle/core/util/CompilerUtilsTest.java"
focal_file_path = "src/main/java/net/openhft/chronicle/core/util/CompilerUtils.java"
test_file_url = "https://github.com/OpenHFT/Chronicle-Core/blob/655bef412e78a19621250cb8661bd3851643f68d/src/test/java/net/openhft/chronicle/core/util/CompilerUtilsTest.java"
focal_file_url = "https://github.com/OpenHFT/Chronicle-Core/blob/655bef412e78a19621250cb8661bd3851643f68d/src/main/java/net/openhft/chronicle/core/util/CompilerUtils.java"
first_commit_date = "2022-10-13"
last_commit_date = "2024-05-28"
test_file_content = "package net.openhft.chronicle.core.util;\n\nimport org.junit.jupiter.api.Test;\nimport java.lang.reflect.Method;\nimport static org.mockito.Mockito.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass CompilerUtilsTest {\n    @Test\n    void defineClassShouldThrowAssertionErrorForIllegalAccessException() {\n        ClassLoader classLoader = mock(ClassLoader.class);\n        String className = \"com.example.MyClass\";\n        byte[] bytes = new byte[] {  };\n        when(classLoader.loadClass(className)).thenThrow(new ClassNotFoundException());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n    }\n\n    @Test\n    void defineClassShouldThrowAssertionErrorForInvocationTargetException() {\n        ClassLoader classLoader = mock(ClassLoader.class);\n        String className = \"com.example.MyClass\";\n        byte[] bytes = new byte[] {  };\n        when(classLoader.loadClass(className)).thenThrow(new NoClassDefFoundError());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n    }\n\n    @Test\n    void defineClassShouldThrowRuntimeErrors() {\n        ClassLoader classLoader = mock(ClassLoader.class);\n        String className = \"com.example.MyClass\";\n        byte[] bytes = new byte[] {  };\n\n        when(classLoader.loadClass(className)).thenThrow(new OutOfMemoryError());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n\n        when(classLoader.loadClass(className)).thenThrow(new StackOverflowError());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n\n        when(classLoader.loadClass(className)).thenThrow(new LinkageError());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n\n        when(classLoader.loadClass(className)).thenThrow(new IllegalMonitorStateException());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n\n        when(classLoader.loadClass(className)).thenThrow(new NegativeArraySizeException());\n        assertThrows(AssertionError.class, () -> CompilerUtils.defineClass(classLoader, className, bytes));\n    }\n}"
