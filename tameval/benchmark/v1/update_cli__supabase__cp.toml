[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.2"

[repo_info]
repository = "supabase/cli"
sha = "418caee001449f782a775b0f13af09b25dd581da"

[run_info]
docker_image = "golang:1.23.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/storage/cp/cp.go internal/storage/cp/cp_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/storage/cp/cp.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 85.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/storage/cp/cp_test.go"
focal_file_path = "internal/storage/cp/cp.go"
test_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/storage/cp/cp_test.go"
focal_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/storage/cp/cp.go"
first_commit_date = "2023-10-24"
last_commit_date = "2025-01-10"
test_file_content = "package cp\n\nimport (\n\t\"context\"\n\t\"io/fs\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/h2non/gock\"\n\t\"github.com/spf13/afero\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"github.com/supabase/cli/v2/internal/testing/apitest\"\n\t\"github.com/supabase/cli/v2/internal/utils\"\n\t\"github.com/supabase/cli/v2/internal/utils/flags\"\n\t\"github.com/supabase/cli/v2/pkg/api\"\n\t\"github.com/supabase/cli/v2/pkg/cast\"\n\t\"github.com/supabase/cli/v2/pkg/fetcher\"\n\t\"github.com/supabase/cli/v2/pkg/storage\"\n)\n\nvar mockFile = storage.ObjectResponse{\n\tName:           \"abstract.pdf\",\n\tId:             cast.Ptr(\"9b7f9f48-17a6-4ca8-b14a-39b0205a63e9\"),\n\tUpdatedAt:      cast.Ptr(\"2023-10-13T18:08:22.068Z\"),\n\tCreatedAt:      cast.Ptr(\"2023-10-13T18:08:22.068Z\"),\n\tLastAccessedAt: cast.Ptr(\"2023-10-13T18:08:22.068Z\"),\n\tMetadata: &storage.ObjectMetadata{\n\t\tETag:           `\"887ea9be3c68e6f2fca7fd2d7c77d8fe\"`,\n\t\tSize:           82702,\n\t\tMimetype:       \"application/pdf\",\n\t\tCacheControl:   \"max-age=3600\",\n\t\tLastModified:   \"2023-10-13T18:08:22.000Z\",\n\t\tContentLength:  82702,\n\t\tHttpStatusCode: 200,\n\t},\n}\n\nvar mockApi = storage.StorageAPI{Fetcher: fetcher.NewFetcher(\n\t\"http://127.0.0.1\",\n)}\n\nfunc TestStorageCP(t *testing.T) {\n\tflags.ProjectRef = apitest.RandomProjectRef()\n\t// Setup valid access token\n\ttoken := apitest.RandomAccessToken(t)\n\tt.Setenv(\"SUPABASE_ACCESS_TOKEN\", string(token))\n\n\tt.Run(\"copy local to remote\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/file\", []byte{}, 0644))\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + flags.ProjectRef + \"/api-keys\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]api.ApiKeyResponse{{\n\t\t\t\tName:   \"service_role\",\n\t\t\t\tApiKey: \"service-key\",\n\t\t\t}})\n\t\tgock.New(\"https://\" + utils.GetSupabaseHost(flags.ProjectRef)).\n\t\t\tPost(\"/storage/v1/object/private/file\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := Run(context.Background(), \"/tmp/file\", \"ss:///private/file\", false, 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on missing file\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + flags.ProjectRef + \"/api-keys\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]api.ApiKeyResponse{{\n\t\t\t\tName:   \"service_role\",\n\t\t\t\tApiKey: \"service-key\",\n\t\t\t}})\n\t\tgock.New(\"https://\" + utils.GetSupabaseHost(flags.ProjectRef)).\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{})\n\t\t// Run test\n\t\terr := Run(context.Background(), \"abstract.pdf\", \"ss:///private\", true, 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, fs.ErrNotExist)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"copy remote to local\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + flags.ProjectRef + \"/api-keys\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]api.ApiKeyResponse{{\n\t\t\t\tName:   \"service_role\",\n\t\t\t\tApiKey: \"service-key\",\n\t\t\t}})\n\t\tgock.New(\"https://\" + utils.GetSupabaseHost(flags.ProjectRef)).\n\t\t\tGet(\"/storage/v1/object/private/file\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := Run(context.Background(), \"ss:///private/file\", \"abstract.pdf\", false, 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\texists, err := afero.Exists(fsys, \"abstract.pdf\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t})\n\n\tt.Run(\"throws error on missing bucket\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + flags.ProjectRef + \"/api-keys\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]api.ApiKeyResponse{{\n\t\t\t\tName:   \"service_role\",\n\t\t\t\tApiKey: \"service-key\",\n\t\t\t}})\n\t\tgock.New(\"https://\" + utils.GetSupabaseHost(flags.ProjectRef)).\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{})\n\t\t// Run test\n\t\terr := Run(context.Background(), \"ss:///private\", \".\", true, 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Object not found: /private\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on invalid src\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Run test\n\t\terr := Run(context.Background(), \":\", \".\", false, 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"missing protocol scheme\")\n\t})\n\n\tt.Run(\"throws error on invalid dst\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Run test\n\t\terr := Run(context.Background(), \".\", \":\", false, 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"missing protocol scheme\")\n\t})\n\n\tt.Run(\"throws error on unsupported operation\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + flags.ProjectRef + \"/api-keys\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]api.ApiKeyResponse{{\n\t\t\t\tName:   \"service_role\",\n\t\t\t\tApiKey: \"service-key\",\n\t\t\t}})\n\t\t// Run test\n\t\terr := Run(context.Background(), \".\", \".\", false, 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, errUnsupportedOperation)\n\t})\n}\n\nfunc TestUploadAll(t *testing.T) {\n\tt.Run(\"uploads directory to new bucket\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/readme.md\", []byte{}, 0644))\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/tmp/readme.md\").\n\t\t\tReply(http.StatusNotFound).\n\t\t\tJSON(map[string]string{\"error\": \"Bucket not found\"})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(storage.CreateBucketResponse{Name: \"tmp\"})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/tmp/readme.md\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := UploadStorageObjectAll(context.Background(), mockApi, \"\", \"/tmp\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on failure to create bucket\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/readme.md\", []byte{}, 0644))\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/tmp/readme.md\").\n\t\t\tReply(http.StatusNotFound).\n\t\t\tJSON(map[string]string{\"error\": \"Bucket not found\"})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\t// Run test\n\t\terr := UploadStorageObjectAll(context.Background(), mockApi, \"\", \"/tmp\", 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Error status 503:\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"uploads directory to existing prefix\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/readme.md\", []byte{}, 0644))\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/docs/api.md\", []byte{}, 0644))\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{{\n\t\t\t\tName: \"dir\",\n\t\t\t}})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/private/dir/tmp/readme.md\").\n\t\t\tReply(http.StatusOK)\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/private/dir/tmp/docs/api.md\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := UploadStorageObjectAll(context.Background(), mockApi, \"/private/dir/\", \"/tmp\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"uploads file to existing bucket\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/readme.md\", []byte{}, 0644))\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{{\n\t\t\t\tId:        \"private\",\n\t\t\t\tName:      \"private\",\n\t\t\t\tCreatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t\tUpdatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t}})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/private/readme.md\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := UploadStorageObjectAll(context.Background(), mockApi, \"private\", \"/tmp/readme.md\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"uploads file to existing object\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, \"/tmp/readme.md\", []byte{}, 0644))\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tfileObject := mockFile\n\t\tfileObject.Name = \"file\"\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{fileObject})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/private/file\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := UploadStorageObjectAll(context.Background(), mockApi, \"private/file\", \"/tmp/readme.md\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on service unavailable\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\t// Run test\n\t\terr := UploadStorageObjectAll(context.Background(), mockApi, \"missing\", \".\", 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Error status 503:\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n}\n\nfunc TestDownloadAll(t *testing.T) {\n\tt.Run(\"downloads buckets to existing directory\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{{\n\t\t\t\tId:        \"test\",\n\t\t\t\tName:      \"test\",\n\t\t\t\tPublic:    true,\n\t\t\t\tCreatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t\tUpdatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t}, {\n\t\t\t\tId:        \"private\",\n\t\t\t\tName:      \"private\",\n\t\t\t\tCreatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t\tUpdatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t}})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/test\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{})\n\t\t// Run test\n\t\terr := DownloadStorageObjectAll(context.Background(), mockApi, \"\", \"/\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\texists, err := afero.DirExists(fsys, \"/private\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t\texists, err = afero.DirExists(fsys, \"/test\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t})\n\n\tt.Run(\"downloads empty bucket to new directory\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/object/private\").\n\t\t\tReply(http.StatusNotFound).\n\t\t\tJSON(map[string]string{\"error\": \"Not Found\"})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/bucket\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.BucketResponse{{\n\t\t\t\tId:        \"private\",\n\t\t\t\tName:      \"private\",\n\t\t\t\tCreatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t\tUpdatedAt: \"2023-10-13T17:48:58.491Z\",\n\t\t\t}})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{})\n\t\t// Run test\n\t\terr := DownloadStorageObjectAll(context.Background(), mockApi, \"/private\", \"/tmp\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\texists, err := afero.DirExists(fsys, \"/private\")\n\t\tassert.NoError(t, err)\n\t\tassert.False(t, exists)\n\t\texists, err = afero.DirExists(fsys, \"/tmp\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t})\n\n\tt.Run(\"throws error on empty directory\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{})\n\t\t// Run test\n\t\terr := DownloadStorageObjectAll(context.Background(), mockApi, \"private/dir/\", \"/\", 1, fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Object not found: private/dir/\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\texists, err := afero.DirExists(fsys, \"/private\")\n\t\tassert.NoError(t, err)\n\t\tassert.False(t, exists)\n\t})\n\n\tt.Run(\"downloads objects to existing directory\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\t// Lists /private/tmp directory\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tJSON(storage.ListObjectsQuery{\n\t\t\t\tPrefix: \"tmp/\",\n\t\t\t\tSearch: \"\",\n\t\t\t\tLimit:  storage.PAGE_LIMIT,\n\t\t\t\tOffset: 0,\n\t\t\t}).\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{{\n\t\t\t\tName: \"docs\",\n\t\t\t}, mockFile})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/object/private/tmp/abstract.pdf\").\n\t\t\tReply(http.StatusOK)\n\t\t// Lists /private/tmp/docs directory\n\t\treadme := mockFile\n\t\treadme.Name = \"readme.md\"\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tJSON(storage.ListObjectsQuery{\n\t\t\t\tPrefix: \"tmp/docs/\",\n\t\t\t\tSearch: \"\",\n\t\t\t\tLimit:  storage.PAGE_LIMIT,\n\t\t\t\tOffset: 0,\n\t\t\t}).\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{readme})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/object/private/tmp/docs/readme.md\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := DownloadStorageObjectAll(context.Background(), mockApi, \"private/tmp/\", \"/\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\texists, err := afero.Exists(fsys, \"/tmp/abstract.pdf\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t\texists, err = afero.Exists(fsys, \"/tmp/docs/readme.md\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t})\n\n\tt.Run(\"downloads object to existing file\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\t// Setup mock api\n\t\tdefer gock.OffAll()\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tPost(\"/storage/v1/object/list/private\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON([]storage.ObjectResponse{mockFile})\n\t\tgock.New(\"http://127.0.0.1\").\n\t\t\tGet(\"/storage/v1/object/private/abstract.pdf\").\n\t\t\tReply(http.StatusOK)\n\t\t// Run test\n\t\terr := DownloadStorageObjectAll(context.Background(), mockApi, \"/private/abstract.pdf\", \"/tmp/file\", 1, fsys)\n\t\t// Check error\n\t\tassert.NoError(t, err)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\texists, err := afero.DirExists(fsys, \"/private\")\n\t\tassert.NoError(t, err)\n\t\tassert.False(t, exists)\n\t\texists, err = afero.Exists(fsys, \"/tmp/file\")\n\t\tassert.NoError(t, err)\n\t\tassert.True(t, exists)\n\t})\n}"
