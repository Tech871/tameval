[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.10"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "opensearch-project/opensearch-py-ml"
sha = "899cb82c8a383925501258dd30098bfa612e8af5"

[run_info]
docker_image = "python:3.10"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-dev.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=opensearch_py_ml/ml_commons/cli/ml_models/textract_model.py -m pytest -q --junit-xml=test_output.xml tests/cli/test_ml_models/test_textract_model.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target opensearch_py_ml.ml_commons.cli.ml_models.textract_model --unit-test tests.cli.test_ml_models.test_textract_model --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target opensearch_py_ml/ml_commons/cli/ml_models/textract_model.py --unit-test tests/cli/test_ml_models/test_textract_model.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = [ 8, 10, 12, 13, 16, 17, 21, 22, 24, 28, 41, 45, 46, 49, 51, 54, 61, 64, 84, 114, 115, 118, 123, 132, 134, 136, 140, 154, 155, 164, 169, 170, 175, 176, 179, 180, 194, 196, 197,]
missed_lines = []

[input_info]
test_file_path = "tests/cli/test_ml_models/test_textract_model.py"
focal_file_path = "opensearch_py_ml/ml_commons/cli/ml_models/textract_model.py"
test_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/tests/cli/test_ml_models/test_textract_model.py"
focal_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/opensearch_py_ml/ml_commons/cli/ml_models/textract_model.py"
first_commit_date = "2025-04-25"
last_commit_date = "2025-05-27"
test_file_content = "\n\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom colorama import Fore, Style\n\nfrom opensearch_py_ml.ml_commons.cli.ml_models.textract_model import TextractModel\n\n\nclass TestTextractModel(unittest.TestCase):\n\n    def setUp(self):\n        self.region = \"us-west-2\"\n        self.service_type = TextractModel.AMAZON_OPENSEARCH_SERVICE\n        self.mock_helper = Mock()\n        self.mock_save_config = Mock()\n        self.textract_model = TextractModel(\n            opensearch_domain_region=self.region, service_type=self.service_type\n        )\n        self.connector_role_prefix = \"test_role\"\n        self.connector_body = {\n            \"name\": \"Custom Model\",\n            \"description\": \"Custom description\",\n            \"version\": \"1\",\n            \"parameters\": {\"api_name\": \"test_api_name\"},\n        }\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.set_trusted_endpoint\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    def test_create_connector_textract_model_managed(\n        self, mock_get_model_details, mock_set_trusted_endpoint\n    ):\n        mock_get_model_details.return_value = \"1\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n\n        result = self.textract_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Amazon Textract Model\",\n        )\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.input_custom_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.set_trusted_endpoint\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    def test_create_connector_custom_model_managed(\n        self, mock_get_model_details, mock_set_trusted_endpoint, mock_custom_model\n    ):\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        mock_custom_model.return_value = self.connector_body\n\n        result = self.textract_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Custom model\",\n        )\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.input_custom_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\"builtins.print\")\n    def test_create_connector_invalid_choice_managed(\n        self, mock_print, mock_get_model_details, mock_custom_model\n    ):\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        mock_custom_model.return_value = self.connector_body\n\n        self.textract_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Invalid Model\",\n        )\n\n    def test_create_connector_failure(self):\n        self.mock_helper.create_connector_with_role.return_value = None, None, None\n        result = self.textract_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            region=self.region,\n            connector_role_prefix=self.connector_role_prefix,\n            model_name=\"Amazon Textract model\",\n        )\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_setup.Setup.get_password_with_asterisks\",\n        return_value=[\"access_key\", \"secret_key\", \"session_token\"],\n    )\n    def test_create_connector_textract_model_open_source(\n        self, mock_get_password, mock_get_model_details\n    ):\n        open_source_model = TextractModel(\n            opensearch_domain_region=self.region,\n            service_type=TextractModel.OPEN_SOURCE,\n        )\n        mock_get_model_details.return_value = \"1\"\n\n        result = open_source_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Amazon Textract model\",\n        )\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.input_custom_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_setup.Setup.get_password_with_asterisks\",\n        return_value=[\"access_key\", \"secret_key\", \"session_token\"],\n    )\n    def test_create_connector_custom_model_open_source(\n        self, mock_get_password, mock_get_model_details, mock_custom_model\n    ):\n        open_source_model = TextractModel(\n            opensearch_domain_region=self.region,\n            service_type=TextractModel.OPEN_SOURCE,\n        )\n        mock_custom_model.return_value = self.connector_body\n        result = open_source_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Custom model\",\n        )\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.input_custom_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_setup.Setup.get_password_with_asterisks\",\n        return_value=[\"access_key\", \"secret_key\", \"session_token\"],\n    )\n    @patch(\"builtins.print\")\n    def test_create_connector_invalid_choice_open_source(\n        self, mock_print, mock_get_password, mock_get_model_details, mock_custom_model\n    ):\n        open_source_model = TextractModel(\n            opensearch_domain_region=self.region,\n            service_type=TextractModel.OPEN_SOURCE,\n        )\n        mock_custom_model.return_value = self.connector_body\n\n        open_source_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Invalid Model\",\n        )\n\n    @patch(\"builtins.input\", side_effect=[\"1\"])\n    def test_create_connector_select_model_interactive(self, mock_input):\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n\n        result = self.textract_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n        )\n\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
