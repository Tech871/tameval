[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "lenstronomy/lenstronomy"
sha = "370d932c8ded11da8b1e3c772266a87ead143136"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r test_requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=lenstronomy/LensModel/Profiles/elliptical_density_slice.py -m pytest -q --junit-xml=test_output.xml test/test_LensModel/test_Profiles/test_elliptical_density_slice.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target lenstronomy.LensModel.Profiles.elliptical_density_slice --unit-test test.test_LensModel.test_Profiles.test_elliptical_density_slice --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target lenstronomy/LensModel/Profiles/elliptical_density_slice.py --unit-test test/test_LensModel/test_Profiles/test_elliptical_density_slice.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 99.0
original_coverage = 99.0
mutation_kill_rate = 44.0
original_mutation_kill_rate = 44.0
covered_lines = [ 0, 2, 3, 4, 5, 7, 10, 38, 39, 46, 54, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 94, 96, 106, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 126, 136, 138, 149, 150, 153, 156, 160, 161, 162, 163, 164, 166, 167, 172, 173, 174, 175, 179, 185, 186, 187, 188, 191, 192, 193, 194, 196, 202, 203, 204, 205, 206, 207, 208, 210, 211, 218, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 244, 257, 268, 269, 271, 273, 274, 276, 277, 289, 290, 298, 300, 301, 307, 308, 309, 310, 311, 312, 313, 321, 322, 324, 330, 332, 333, 334, 335, 336, 337, 344, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 378, 398, 418, 422, 442,]
missed_lines = [ 177,]

[input_info]
test_file_path = "test/test_LensModel/test_Profiles/test_elliptical_density_slice.py"
focal_file_path = "lenstronomy/LensModel/Profiles/elliptical_density_slice.py"
test_file_url = "https://github.com/lenstronomy/lenstronomy/blob/370d932c8ded11da8b1e3c772266a87ead143136/test/test_LensModel/test_Profiles/test_elliptical_density_slice.py"
focal_file_url = "https://github.com/lenstronomy/lenstronomy/blob/370d932c8ded11da8b1e3c772266a87ead143136/lenstronomy/LensModel/Profiles/elliptical_density_slice.py"
first_commit_date = "2020-12-16"
last_commit_date = "2025-07-17"
test_file_content = "__author__ = \"lynevdv\"\n\n\nfrom lenstronomy.LensModel.Profiles.elliptical_density_slice import ElliSLICE\n\nimport numpy as np\nimport pytest\nimport numpy.testing as npt\n\n\nclass TestElliSLICE(object):\n    \"\"\"Tests the elliptical slice lens model.\"\"\"\n\n    def setup_method(self):\n        self.ElliSLICE = ElliSLICE()\n\n    def test_function(self):\n        x = 0.5\n        y = 0.1\n        a = 2.0\n        b = 1.0\n        psi = 30 * np.pi / 180.0\n        sigma_0 = 5.0\n        values = self.ElliSLICE.function(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(values, 4.532482297, decimal=4)\n\n        x = 3.0 * np.sqrt(3) / 2.0\n        y = 3.0 / 2.0\n        values = self.ElliSLICE.function(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(values, 15.52885056, decimal=4)\n\n        x = np.array([0])\n        y = np.array([0])\n        values = self.ElliSLICE.function(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(values[0], 4.054651081, decimal=5)\n\n        x = np.array([np.sqrt(3), np.sqrt(3) + 0.000000001, np.sqrt(3) - 0.000000001])\n        y = np.array([1, 1.000000001, 0.999999999])\n        values = self.ElliSLICE.function(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(values[0], values[1], decimal=5)\n        npt.assert_almost_equal(values[1], values[2], decimal=5)\n\n    def test_derivatives(self):\n        x = 0.5\n        y = 0.1\n        a = 2.0\n        b = 1.0\n        psi = 30 * np.pi / 180.0\n        sigma_0 = 5.0\n        f_x, f_y = self.ElliSLICE.derivatives(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(f_x, 1.938995765, decimal=6)\n        npt.assert_almost_equal(f_y, -0.13835403, decimal=6)\n\n        x = 4\n        y = 0.0\n        f_x, f_y = self.ElliSLICE.derivatives(x, y, a, b, 0.0, sigma_0)\n        npt.assert_almost_equal(f_x, 2.629658164, decimal=6)\n        npt.assert_almost_equal(f_y, 0.0, decimal=6)\n\n        x = np.array([0.5])\n        y = np.array([0.1])\n        f_x, f_y = self.ElliSLICE.derivatives(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(f_x, 1.938995765, decimal=6)\n        npt.assert_almost_equal(f_y, -0.13835403, decimal=6)\n\n        x = np.array([np.sqrt(3), np.sqrt(3) + 0.000000001, np.sqrt(3) - 0.000000001])\n        y = np.array([1, 1.000000001, 0.999999999])\n        f_x, f_y = self.ElliSLICE.derivatives(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal(f_x[0], f_x[1], decimal=5)\n        npt.assert_almost_equal(f_y[1], f_y[2], decimal=5)\n\n        # testing almost round vs round and should match (numerically)\n        x = 1\n        y = 2\n        a = 1.0\n        psi = 0\n        sigma_0 = 1.0\n        f_x, f_y = self.ElliSLICE.derivatives(\n            x, y, a=a, b=a + 0.00001, psi=psi, sigma_0=sigma_0\n        )\n        f_x_round, f_y_round = self.ElliSLICE.derivatives(\n            x, y, a=a, b=a, psi=psi, sigma_0=sigma_0\n        )\n        npt.assert_almost_equal(f_x / f_x_round, 1, decimal=5)\n        npt.assert_almost_equal(f_y / f_y_round, 1, decimal=5)\n\n    def test_hessian(self):\n        x = 0.5\n        y = 0.1\n        a = 2.0\n        b = 1.0\n        psi = 30 * np.pi / 180.0\n        sigma_0 = 5.0\n        f_xx, f_xy, f_yx, f_yy = self.ElliSLICE.hessian(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal((f_xx + f_yy) / 2.0, 5.0, decimal=6)\n        x = np.array([1])\n        y = np.array([2])\n        npt.assert_almost_equal(f_xy, f_yx, decimal=7)\n        f_xx, f_xy, f_yx, f_yy = self.ElliSLICE.hessian(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal((f_xx + f_yy) / 2.0, 0.0, decimal=6)\n        x = np.array([1, 3, 0.0])\n        y = np.array([2, 1, 0.5])\n        values = self.ElliSLICE.hessian(x, y, a, b, psi, sigma_0)\n        npt.assert_almost_equal((values[0][2] + values[3][2]) / 2.0, 5.0, decimal=6)\n\n\nif __name__ == \"__main__\":\n    pytest.main()\n"
