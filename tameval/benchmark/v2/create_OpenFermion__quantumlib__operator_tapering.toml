[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "quantumlib/OpenFermion"
sha = "39667a6f66a4a87ed80b7d255198a39c826f17cb"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=src/openfermion/transforms/repconversions/operator_tapering.py -m pytest -q --junit-xml=test_output.xml src/openfermion/transforms/repconversions/operator_tapering_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target src.openfermion.transforms.repconversions.operator_tapering --unit-test src.openfermion.transforms.repconversions.operator_tapering_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target src/openfermion/transforms/repconversions/operator_tapering.py --unit-test src/openfermion/transforms/repconversions/operator_tapering_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 37.0
original_coverage = 100.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 0.0
covered_lines = [ 13, 15, 24, 96, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 122, 123, 124, 126,]
missed_lines = [ 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 63, 66, 67, 70, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 89, 91, 93,]

[input_info]
test_file_path = "src/openfermion/transforms/repconversions/operator_tapering_test.py"
focal_file_path = "src/openfermion/transforms/repconversions/operator_tapering.py"
test_file_url = "https://github.com/quantumlib/OpenFermion/blob/39667a6f66a4a87ed80b7d255198a39c826f17cb/src/openfermion/transforms/repconversions/operator_tapering_test.py"
focal_file_url = "https://github.com/quantumlib/OpenFermion/blob/39667a6f66a4a87ed80b7d255198a39c826f17cb/src/openfermion/transforms/repconversions/operator_tapering.py"
first_commit_date = "2020-08-01"
last_commit_date = "2025-01-30"
test_file_content = "#   Licensed under the Apache License, Version 2.0 (the \"License\");\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#   Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n\"\"\"tests for operator_tapering.py\"\"\"\n\nimport unittest\nfrom openfermion.ops.operators import FermionOperator, BosonOperator\nfrom openfermion.transforms.repconversions.operator_tapering import (\n    freeze_orbitals,\n    prune_unused_indices,\n)\n\nclass PruneUnusedIndicesTest(unittest.TestCase):\n    def test_prune(self):\n        for LadderOp in (FermionOperator, BosonOperator):\n            op = LadderOp(((1, 1), (8, 1), (3, 0)), 0.5)\n            op = prune_unused_indices(op)\n            expected = LadderOp(((0, 1), (2, 1), (1, 0)), 0.5)\n            self.assertTrue(expected == op)\n"
