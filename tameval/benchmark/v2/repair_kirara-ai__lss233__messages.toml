[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "lss233/kirara-ai"
sha = "8295a5deda0b289a3f70d946064b6c9a3e1b0753"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=kirara_ai/workflow/implementations/blocks/im/messages.py -m pytest -q --junit-xml=test_output.xml tests/system_blocks/im/test_messages.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target kirara_ai.workflow.implementations.blocks.im.messages --unit-test tests.system_blocks.im.test_messages --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target kirara_ai/workflow/implementations/blocks/im/messages.py --unit-test tests/system_blocks/im/test_messages.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 98.0
original_coverage = 98.0
mutation_kill_rate = 96.0
original_mutation_kill_rate = 96.0
covered_lines = [ 0, 1, 3, 4, 5, 6, 7, 8, 11, 14, 17, 18, 19, 24, 25, 26, 29, 32, 33, 43, 44, 46, 49, 51, 54, 55, 56, 58, 60, 63, 64, 69, 72, 73, 74, 75, 77, 78, 82, 85, 86, 87, 88, 90, 91, 93, 94, 95, 97, 100, 103, 104, 105, 109, 111, 112,]
missed_lines = [ 12,]

[input_info]
test_file_path = "tests/system_blocks/im/test_messages.py"
focal_file_path = "kirara_ai/workflow/implementations/blocks/im/messages.py"
test_file_url = "https://github.com/lss233/kirara-ai/blob/8295a5deda0b289a3f70d946064b6c9a3e1b0753/tests/system_blocks/im/test_messages.py"
focal_file_url = "https://github.com/lss233/kirara-ai/blob/8295a5deda0b289a3f70d946064b6c9a3e1b0753/kirara_ai/workflow/implementations/blocks/im/messages.py"
first_commit_date = "2025-02-23"
last_commit_date = "2025-04-02"
test_file_content = "import asyncio\n\nimport pytest\n\nfrom kirara_ai.im.adapter import IMAdapter\nfrom kirara_ai.im.manager import IMManager\nfrom kirara_ai.im.message import IMMessage, TextMessage\nfrom kirara_ai.im.sender import ChatSender\nfrom kirara_ai.ioc.container import DependencyContainer\nfrom kirara_ai.workflow.implementations.blocks.im.messages import (AppendIMMessage, GetIMMessage, IMMessageToText,\n                                                                   SendIMMessage, TextToIMMessage)\n\n\nclass MockIMAdapter(IMAdapter):\n    async def send_message(self, message, target=None):\n        return None\n\n    def convert_to_message(self, message):\n        return message.content\n    \n    async def start(self):\n        return None\n    \n    async def stop(self):\n        return None\n    \n\nclass MockIMManager(IMManager):\n    def __init__(self):\n        self.adapters = {\"default\": MockIMAdapter(), \"telegram\": MockIMAdapter()}\n    \n    def get_adapter(self, name):\n        return self.adapters.get(name)\n\n\n@pytest.fixture\ndef container():\n    container = DependencyContainer()\n    mock_message = IMMessage(\n        sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n        message_elements=[TextMessage(\"测试消息内容\")]\n    )\n    container.register(IMMessage, mock_message)\n    return container\n\n\n@pytest.mark.asyncio\nasync def test_send_im_message_async():\n    container = DependencyContainer()\n    send_message = IMMessage(\n        sender=ChatSender.get_bot_sender(),\n        message_elements=[TextMessage(\"回复消息\")]\n    )\n    mock_message = IMMessage(\n        sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n        message_elements=[TextMessage(\"测试消息内容\")]\n    )\n    loop = asyncio.get_event_loop()\n    container.register(IMAdapter, MockIMAdapter())\n    container.register(IMManager, MockIMManager())\n    container.register(IMMessage, mock_message)\n    container.register(asyncio.AbstractEventLoop, loop)\n    block = SendIMMessage()\n    block.container = container\n    result = block.execute(msg=send_message)\n    assert result is not None\n    block = SendIMMessage(im_name=\"telegram\")\n    block.container = container\n    result = block.execute(msg=send_message, target=ChatSender.from_c2c_chat(user_id=\"specific_user\", display_name=\"Specific User\"))\n    assert result is not None\n\n\ndef test_get_im_message(container):\n    block = GetIMMessage()\n    block.container = container\n    result = block.execute()\n    assert \"msg\" in result\n    assert \"sender\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert isinstance(result[\"sender\"], ChatSender)\n    assert result[\"msg\"].content == \"测试消息内容\"\n\n\ndef test_fetch_im_message(container):\n    block = GetIMMessage()\n    block.container = container\n    result = block.execute()\n    assert \"msg\" in result\n    assert \"sender\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert isinstance(result[\"sender\"], ChatSender)\n    assert result[\"msg\"].content == \"测试消息内容\"\n\n\ndef test_im_message_to_text(container):\n    message = IMMessage(\n        sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n        message_elements=[TextMessage(\"Hello, World!\")]\n    )\n    block = IMMessageToText()\n    block.container = container\n    result = block.execute(msg=message)\n    assert \"text\" in result\n    assert result[\"text\"] == \"Hello, World!\"\n\n\ndef test_convert_im_message_to_text(container):\n    message = IMMessage(\n        sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n        message_elements=[TextMessage(\"Hello, World!\")]\n    )\n    block = IMMessageToText()\n    block.container = container\n    result = block.execute(msg=message)\n    assert \"text\" in result\n    assert result[\"text\"] == \"Hello, World!\"\n\n\ndef test_text_to_im_message():\n    block = TextToIMMessage()\n    result = block.execute(text=\"Hello, World!\")\n    assert \"msg\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert isinstance(result[\"msg\"].sender, ChatSender)\n    assert result[\"msg\"].content == \"Hello, World!\"\n    block = TextToIMMessage(split_by=\"\\n\")\n    result = block.execute(text=\"Line 1\\nLine 2\\nLine 3\")\n    assert \"msg\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert len(result[\"msg\"].message_elements) == 3\n    assert result[\"msg\"].message_elements[0].text == \"Line 1\"\n    assert result[\"msg\"].message_elements[1].text == \"Line 2\"\n    assert result[\"msg\"].message_elements[2].text == \"Line 3\"\n\n\ndef test_create_text_to_im_message():\n    block = TextToIMMessage()\n    result = block.execute(text=\"Hello, World!\")\n    assert \"msg\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert isinstance(result[\"msg\"].sender, ChatSender)\n    assert result[\"msg\"].content == \"Hello, World!\"\n    block = TextToIMMessage(split_by=\"\\n\")\n    result = block.execute(text=\"Line 1\\nLine 2\\nLine 3\")\n    assert \"msg\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert len(result[\"msg\"].message_elements) == 3\n    assert result[\"msg\"].message_elements[0].text == \"Line 1\"\n    assert result[\"msg\"].message_elements[1].text == \"Line 2\"\n    assert result[\"msg\"].message_elements[2].text == \"Line 3\"\n\n\ndef test_append_im_message():\n    base_message = IMMessage(\n        sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n        message_elements=[TextMessage(\"基础消息\")]\n    )\n    append_element = TextMessage(\"追加内容\")\n    block = AppendIMMessage()\n    result = block.execute(base_msg=base_message, append_msg=append_element)\n    assert \"msg\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert isinstance(result[\"msg\"].sender, ChatSender)\n    assert len(result[\"msg\"].message_elements) == 2\n    assert result[\"msg\"].message_elements[0].text == \"基础消息\"\n    assert result[\"msg\"].message_elements[1].text == \"追加内容\"\n\n\ndef test_concatenate_im_message():\n    base_message = IMMessage(\n        sender=ChatSender.from_c2c_chat(user_id=\"test_user\", display_name=\"Test User\"),\n        message_elements=[TextMessage(\"基础消息\")]\n    )\n    append_element = TextMessage(\"追加内容\")\n    block = AppendIMMessage()\n    result = block.execute(base_msg=base_message, append_msg=append_element)\n    assert \"msg\" in result\n    assert isinstance(result[\"msg\"], IMMessage)\n    assert isinstance(result[\"msg\"].sender, ChatSender)\n    assert len(result[\"msg\"].message_elements) == 2\n    assert result[\"msg\"].message_elements[0].text == \"基础消息\"\n    assert result[\"msg\"].message_elements[1].text == \"追加内容\""
