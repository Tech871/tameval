[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "ExpediaGroup/container-startup-autoscaler"
sha = "25025ef93dcad8f946e343c1641bcc5fadba8c33"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/scale/update.go internal/scale/update_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/scale/update.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 91.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/scale/update_test.go"
focal_file_path = "internal/scale/update.go"
test_file_url = "https://github.com/ExpediaGroup/container-startup-autoscaler/blob/25025ef93dcad8f946e343c1641bcc5fadba8c33/internal/scale/update_test.go"
focal_file_url = "https://github.com/ExpediaGroup/container-startup-autoscaler/blob/25025ef93dcad8f946e343c1641bcc5fadba8c33/internal/scale/update.go"
first_commit_date = "2025-03-07"
last_commit_date = "2025-04-30"
test_file_content = "/*\nCopyright 2025 Expedia Group, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage scale\n\nimport (\n\t\"testing\"\n\n\t\"github.com/ExpediaGroup/container-startup-autoscaler/internal/kube/kubetest\"\n\t\"github.com/ExpediaGroup/container-startup-autoscaler/internal/pod/podcommon\"\n\t\"github.com/ExpediaGroup/container-startup-autoscaler/internal/scale/scalecommon\"\n\t\"github.com/ExpediaGroup/container-startup-autoscaler/internal/scale/scaletest\"\n\t\"github.com/stretchr/testify/assert\"\n\tv1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/api/resource\"\n)\n\nfunc TestNewUpdate(t *testing.T) {\n\tu := NewUpdate(v1.ResourceCPU, nil)\n\texpected := &update{\n\t\tresourceName: v1.ResourceCPU,\n\t\tconfig:       nil,\n\t}\n\tassert.Equal(t, expected, u)\n}\n\nfunc TestUpdateResourceName(t *testing.T) {\n\tresourceName := v1.ResourceCPU\n\tupdate := &update{resourceName: resourceName}\n\tassert.Equal(t, v1.ResourceCPU, update.ResourceName())\n}\n\nfunc TestStartupPodMutationFunc(t *testing.T) {\n\ttype fields struct {\n\t\tresourceName v1.ResourceName\n\t\tconfig       scalecommon.Configuration\n\t}\n\ttype args struct {\n\t\tcontainer *v1.Container\n\t\tfuncPod   *v1.Pod\n\t}\n\ttests := []struct {\n\t\tname            string\n\t\tfields          fields\n\t\targs            args\n\t\twantErrMsg      string\n\t\twantShouldPatch bool\n\t\twantRequests    resource.Quantity\n\t\twantLimits      resource.Quantity\n\t}{\n\t\t{\n\t\t\t\"NotEnabled\",\n\t\t\tfields{\n\t\t\t\tv1.ResourceCPU,\n\t\t\t\tscaletest.NewMockConfiguration(func(m *scaletest.MockConfiguration) {\n\t\t\t\t\tm.On(\"IsEnabled\").Return(false)\n\t\t\t\t}),\n\t\t\t},\n\t\t\targs{\n\t\t\t\tnil,\n\t\t\t\tkubetest.NewPodBuilder().ResourcesState(podcommon.StateResourcesPostStartup).Build(),\n\t\t\t},\n\t\t\t\"\",\n\t\t\tfalse,\n\t\t\tkubetest.PodCpuPostStartupRequestsEnabled,\n\t\t\tkubetest.PodCpuPostStartupLimitsEnabled,\n\t\t},\n\n\t\t{\n\t\t\t\"ContainerNotPreset\",\n\t\t\tfields{\n\t\t\t\tv1.ResourceCPU,\n\t\t\t\tscaletest.NewMockConfiguration(nil),\n\t\t\t},\n\t\t\targs{\n\t\t\t\t&v1.Container{Name: \"\"},\n\t\t\t\tkubetest.NewPodBuilder().ResourcesState(podcommon.StateResourcesPostStartup).Build(),\n\t\t\t},\n\t\t\t\"container not present\",\n\t\t\tfalse,\n\t\t\tkubetest.PodCpuPostStartupRequestsEnabled,\n\t\t\tkubetest.PodCpuPostStartupLimitsEnabled,\n\t\t},\n\t\t{\n\t\t\t\"Ok\",\n\t\t\tfields{\n\t\t\t\tv1.ResourceCPU,\n\t\t\t\tscaletest.NewMockConfiguration(nil),\n\t\t\t},\n\t\t\targs{\n\t\t\t\t&kubetest.NewPodBuilder().ResourcesState(podcommon.StateResourcesPostStartup).Build().Spec.Containers[0],\n\t\t\t\tkubetest.NewPodBuilder().ResourcesState(podcommon.StateResourcesPostStartup).Build(),\n\t\t\t},\n\t\t\t\"\",\n\t\t\ttrue,\n\t\t\tkubetest.PodCpuStartupEnabled,\n\t\t\tkubetest.PodCpuStartupEnabled,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tupdate := &update{\n\t\t\t\tresourceName: tt.fields.resourceName,\n\t\t\t\tconfig:       tt.fields.config,\n\t\t\t}\n\t\t\tmutationFunc := update.StartupPodMutationFunc(tt.args.container)\n\t\t\tgot, err := mutationFunc(tt.args.funcPod)\n\t\t\tif tt.wantErrMsg != \"\" {\n\t\t\t\tassert.ErrorContains(t, err, tt.wantErrMsg)\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\t\t\tassert.Equal(t, tt.wantShouldPatch, got)\n\t\t\tassert.Equal(t, tt.wantRequests, tt.args.funcPod.Spec.Containers[0].Resources.Requests[tt.fields.resourceName])\n\t\t\tassert.Equal(t, tt.wantLimits, tt.args.funcPod.Spec.Containers[0].Resources.Limits[tt.fields.resourceName])\n\t\t})\n\t}\n}\n\nfunc TestPostStartupPodMutationFunc(t *testing.T) {\n\ttype fields struct {\n\t\tresourceName v1.ResourceName\n\t\tconfig       scalecommon.Configuration\n\t}\n\ttype args struct {\n\t\tcontainer *v1.Container\n\t\tfuncPod   *v1.Pod\n\t}\n\ttests := []struct {\n\t\tname            string\n\t\tfields          fields\n\t\targs            args\n\t\twantErrMsg      string\n\t\twantShouldPatch bool\n\t\twantRequests    resource.Quantity\n\t\twantLimits      resource.Quantity\n\t}{\n\t\t{\n\t\t\t\"NotEnabled\",\n\t\t\tfields{\n\t\t\t\tv1.ResourceCPU,\n\t\t\t\tscaletest.NewMockConfiguration(func(m *scaletest.MockConfiguration) {\n\t\t\t\t\tm.On(\"IsEnabled\").Return(false)\n\t\t\t\t}),\n\t\t\t},\n\t\t\targs{\n\t\t\t\tnil,\n\t\t\t\tkubetest.NewPodBuilder().Build(),\n\t\t\t},\n\t\t\t\"\",\n\t\t\tfalse,\n\t\t\tkubetest.PodCpuStartupEnabled,\n\t\t\tkubetest.PodCpuStartupEnabled,\n\t\t},\n\n\t\t{\n\t\t\t\"ContainerNotPreset\",\n\t\t\tfields{\n\t\t\t\tv1.ResourceCPU,\n\t\t\t\tscaletest.NewMockConfiguration(nil),\n\t\t\t},\n\t\t\targs{\n\t\t\t\t&v1.Container{Name: \"\"},\n\t\t\t\tkubetest.NewPodBuilder().Build(),\n\t\t\t},\n\t\t\t\"container not present\",\n\t\t\tfalse,\n\t\t\tkubetest.PodCpuStartupEnabled,\n\t\t\tkubetest.PodCpuStartupEnabled,\n\t\t},\n\t\t{\n\t\t\t\"Ok\",\n\t\t\tfields{\n\t\t\t\tv1.ResourceCPU,\n\t\t\t\tscaletest.NewMockConfiguration(nil),\n\t\t\t},\n\t\t\targs{\n\t\t\t\t&kubetest.NewPodBuilder().Build().Spec.Containers[0],\n\t\t\t\tkubetest.NewPodBuilder().Build(),\n\t\t\t},\n\t\t\t\"\",\n\t\t\ttrue,\n\t\t\tkubetest.PodCpuPostStartupRequestsEnabled,\n\t\t\tkubetest.PodCpuPostStartupLimitsEnabled,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tupdate := &update{\n\t\t\t\tresourceName: tt.fields.resourceName,\n\t\t\t\tconfig:       tt.fields.config,\n\t\t\t}\n\t\t\tmutationFunc := update.PostStartupPodMutationFunc(tt.args.container)\n\t\t\tgot, err := mutationFunc(tt.args.funcPod)\n\t\t\tif tt.wantErrMsg != \"\" {\n\t\t\t\tassert.ErrorContains(t, err, tt.wantErrMsg)\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\t\t\tassert.Equal(t, tt.wantShouldPatch, got)\n\t\t\tassert.Equal(t, tt.wantRequests, tt.args.funcPod.Spec.Containers[0].Resources.Requests[tt.fields.resourceName])\n\t\t\tassert.Equal(t, tt.wantLimits, tt.args.funcPod.Spec.Containers[0].Resources.Limits[tt.fields.resourceName])\n\t\t})\n\t}\n}"
