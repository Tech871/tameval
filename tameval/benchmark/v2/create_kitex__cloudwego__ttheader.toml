[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.19"

[repo_info]
repository = "cloudwego/kitex"
sha = "6c996664cebe9ce40921378ee01b5c8b83fe6ffb"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/transmeta/ttheader.go pkg/transmeta/ttheader_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/transmeta/ttheader.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 60.0
original_coverage = 60.0
mutation_kill_rate = 48.0
original_mutation_kill_rate = 48.0
covered_lines = [ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 91, 92, 93, 94, 95, 96, 102, 103, 104, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 172, 173, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 201, 204, 205, 206, 207,]
missed_lines = [ 67, 68, 84, 85, 86, 97, 98, 99, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 190, 191, 192, 193, 194, 195, 197, 198, 199,]

[input_info]
test_file_path = "pkg/transmeta/ttheader_test.go"
focal_file_path = "pkg/transmeta/ttheader.go"
test_file_url = "https://github.com/cloudwego/kitex/blob/6c996664cebe9ce40921378ee01b5c8b83fe6ffb/pkg/transmeta/ttheader_test.go"
focal_file_url = "https://github.com/cloudwego/kitex/blob/6c996664cebe9ce40921378ee01b5c8b83fe6ffb/pkg/transmeta/ttheader.go"
first_commit_date = "2021-08-25"
last_commit_date = "2025-01-22"
test_file_content = "/*\n * Copyright 2021 CloudWeGo Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage transmeta\n\nimport (\n\t\"context\"\n\t\"strconv\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/cloudwego/kitex/internal/mocks\"\n\t\"github.com/cloudwego/kitex/internal/test\"\n\t\"github.com/cloudwego/kitex/pkg/remote\"\n\t\"github.com/cloudwego/kitex/pkg/remote/transmeta\"\n\t\"github.com/cloudwego/kitex/pkg/rpcinfo\"\n\t\"github.com/cloudwego/kitex/pkg/serviceinfo\"\n\t\"github.com/cloudwego/kitex/transport\"\n)\n\nfunc TestIsTTHeader(t *testing.T) {\n\tt.Run(\"with ttheader\", func(t *testing.T) {\n\t\tri := rpcinfo.NewRPCInfo(nil, nil, rpcinfo.NewInvocation(\"\", \"\"), nil, rpcinfo.NewRPCStats())\n\t\tmsg := remote.NewMessage(nil, mocks.ServiceInfo(), ri, remote.Call, remote.Server)\n\t\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.TTHeader, serviceinfo.Thrift))\n\t\ttest.Assert(t, isTTHeader(msg))\n\t})\n\tt.Run(\"with ttheader framed\", func(t *testing.T) {\n\t\tri := rpcinfo.NewRPCInfo(nil, nil, rpcinfo.NewInvocation(\"\", \"\"), nil, rpcinfo.NewRPCStats())\n\t\tmsg := remote.NewMessage(nil, mocks.ServiceInfo(), ri, remote.Call, remote.Server)\n\t\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.TTHeaderFramed, serviceinfo.Thrift))\n\t\ttest.Assert(t, isTTHeader(msg))\n\t})\n}\n\nfunc TestTTHeaderClientWriteMetainfo(t *testing.T) {\n\tctx := context.Background()\n\n\tcfg := rpcinfo.NewRPCConfig()\n\tcfgMutable := rpcinfo.AsMutableRPCConfig(cfg)\n\tcfgMutable.SetRPCTimeout(time.Millisecond * 100)\n\tcfgMutable.SetConnectTimeout(time.Millisecond * 1000)\n\tcfgMutable.LockConfig(rpcinfo.BitRPCTimeout)\n\tcfgMutable.LockConfig(rpcinfo.BitConnectTimeout)\n\n\tfromInfo := rpcinfo.NewEndpointInfo(\"fromServiceName\", \"fromMethod\", nil, nil)\n\ttoInfo := rpcinfo.NewEndpointInfo(\"toServiceName\", \"toMethod\", nil, nil)\n\tri := rpcinfo.NewRPCInfo(fromInfo, toInfo, rpcinfo.NewInvocation(\"\", \"\"), cfg, rpcinfo.NewRPCStats())\n\tmsg := remote.NewMessage(nil, mocks.ServiceInfo(), ri, remote.Call, remote.Client)\n\tri.Invocation().(rpcinfo.InvocationSetter).SetServiceName(msg.ServiceInfo().ServiceName)\n\n\t// pure payload, no effect\n\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.PurePayload, serviceinfo.Thrift))\n\tctx, err := ClientTTHeaderHandler.WriteMeta(ctx, msg)\n\tkvs := msg.TransInfo().TransIntInfo()\n\ttest.Assert(t, err == nil)\n\ttest.Assert(t, len(kvs) == 0)\n\tstrKvs := msg.TransInfo().TransStrInfo()\n\ttest.Assert(t, len(strKvs) == 0)\n\n\t// ttheader\n\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.TTHeader, serviceinfo.Thrift))\n\t_, err = ClientTTHeaderHandler.WriteMeta(ctx, msg)\n\ttest.Assert(t, err == nil)\n\tkvs = msg.TransInfo().TransIntInfo()\n\ttest.Assert(t, len(kvs) > 0)\n\ttest.Assert(t, kvs[transmeta.FromService] == fromInfo.ServiceName())\n\ttest.Assert(t, kvs[transmeta.FromMethod] == fromInfo.Method())\n\ttest.Assert(t, kvs[transmeta.ToService] == toInfo.ServiceName())\n\ttest.Assert(t, kvs[transmeta.ToMethod] == toInfo.Method())\n\ttest.Assert(t, kvs[transmeta.MsgType] == strconv.Itoa(int(remote.Call)))\n\ttest.Assert(t, kvs[transmeta.TransportType] == unframedTransportType)\n\ttest.Assert(t, kvs[transmeta.RPCTimeout] == \"100\")\n\ttest.Assert(t, kvs[transmeta.ConnectTimeout] == \"1000\")\n\tstrKvs = msg.TransInfo().TransStrInfo()\n\ttest.Assert(t, len(strKvs) == 1)\n\ttest.Assert(t, strKvs[transmeta.HeaderIDLServiceName] == msg.ServiceInfo().ServiceName)\n}\n\nfunc TestTTHeaderServerReadMetainfo(t *testing.T) {\n\tctx := context.Background()\n\tri := rpcinfo.NewRPCInfo(rpcinfo.EmptyEndpointInfo(), nil, rpcinfo.NewInvocation(\"\", \"\"),\n\t\trpcinfo.NewRPCConfig(), rpcinfo.NewRPCStats())\n\tmsg := remote.NewMessage(nil, mocks.ServiceInfo(), ri, remote.Call, remote.Client)\n\n\thd := map[uint16]string{\n\t\ttransmeta.FromService: \"fromService\",\n\t\ttransmeta.FromMethod:  \"fromMethod\",\n\t\ttransmeta.RPCTimeout:  \"100\",\n\t}\n\tmsg.TransInfo().PutTransIntInfo(hd)\n\n\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.PurePayload, serviceinfo.Thrift))\n\t_, err := ServerTTHeaderHandler.ReadMeta(ctx, msg)\n\ttest.Assert(t, err == nil)\n\tfromEndPoint := msg.RPCInfo().From()\n\ttest.Assert(t, fromEndPoint.ServiceName() == \"\")\n\ttest.Assert(t, fromEndPoint.Method() == \"\")\n\n\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.TTHeader, serviceinfo.Thrift))\n\t_, err = ServerTTHeaderHandler.ReadMeta(ctx, msg)\n\ttest.Assert(t, err == nil)\n\ttest.Assert(t, msg.RPCInfo().From().ServiceName() == hd[transmeta.FromService])\n\ttest.Assert(t, msg.RPCInfo().From().Method() == hd[transmeta.FromMethod])\n\ttest.Assert(t, ri.Config().RPCTimeout() == 100*time.Millisecond)\n}\n\nfunc TestTTHeaderServerWriteMetainfo(t *testing.T) {\n\tctx := context.Background()\n\tri := rpcinfo.NewRPCInfo(nil, rpcinfo.NewEndpointInfo(\"\", \"mock\", nil, nil), rpcinfo.NewInvocation(\"\", \"\"),\n\t\trpcinfo.NewRPCConfig(), rpcinfo.NewRPCStats())\n\tmsg := remote.NewMessage(nil, mocks.ServiceInfo(), ri, remote.Call, remote.Client)\n\n\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.PurePayload, serviceinfo.Thrift))\n\t_, err := ServerTTHeaderHandler.WriteMeta(ctx, msg)\n\ttest.Assert(t, err == nil)\n\tkvs := msg.TransInfo().TransIntInfo()\n\ttest.Assert(t, len(kvs) == 0)\n\n\tmsg.SetProtocolInfo(remote.NewProtocolInfo(transport.TTHeader, serviceinfo.Thrift))\n\t_, err = ServerTTHeaderHandler.WriteMeta(ctx, msg)\n\ttest.Assert(t, err == nil)\n\tkvs = msg.TransInfo().TransIntInfo()\n\ttest.Assert(t, kvs[transmeta.MsgType] == strconv.Itoa(int(remote.Call)))\n}\n"
