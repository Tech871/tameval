[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "stevespringett/Alpine"
sha = "bb816e4e9040a0d0fe7a7b2d39c9142933fd88af"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl alpine-model -Dtest=PermissionTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl alpine-model -DtargetClasses=**.Permission  -DtargetTests=**.PermissionTest  -DoutputFormats=XML"
coverage_report_path = "alpine-model/target/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "alpine-model/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 86.0
original_coverage = 86.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 46, 88, 92, 93, 96, 100, 101, 104, 108, 109, 112, 116, 117, 128, 132, 133, 136, 140, 141,]
missed_lines = [ 120, 124, 125,]

[input_info]
test_file_path = "alpine-model/src/test/java/alpine/model/PermissionTest.java"
focal_file_path = "alpine-model/src/main/java/alpine/model/Permission.java"
test_file_url = "https://github.com/stevespringett/Alpine/blob/bb816e4e9040a0d0fe7a7b2d39c9142933fd88af/alpine-model/src/test/java/alpine/model/PermissionTest.java"
focal_file_url = "https://github.com/stevespringett/Alpine/blob/bb816e4e9040a0d0fe7a7b2d39c9142933fd88af/alpine-model/src/main/java/alpine/model/Permission.java"
first_commit_date = "2022-02-24"
last_commit_date = "2024-05-17"
test_file_content = "/*\n * This file is part of Alpine.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n * Copyright (c) Steve Springett. All Rights Reserved.\n */\npackage alpine.model;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PermissionTest {\n\n    @Test\n    public void idTest() {\n        Permission permission = new Permission();\n        permission.setId(123L);\n        Assertions.assertEquals(123L, permission.getId());\n    }\n\n    @Test\n    public void nameTest() {\n        Permission permission = new Permission();\n        permission.setName(\"Permission-A\");\n        Assertions.assertEquals(\"Permission-A\", permission.getName());\n    }\n\n    @Test\n    public void descriptionTest() {\n        Permission permission = new Permission();\n        permission.setDescription(\"Permission A\");\n        Assertions.assertEquals(\"Permission A\", permission.getDescription());\n    }\n\n    @Test\n    public void teamsTest() {\n        List<Team> teams = new ArrayList<>();\n        teams.add(new Team());\n        Permission permission = new Permission();\n        permission.setTeams(teams);\n        Assertions.assertEquals(teams, permission.getTeams());\n        Assertions.assertEquals(1, permission.getTeams().size());\n    }\n\n    @Test\n    public void ldapUsersTest() {\n        List<LdapUser> users = new ArrayList<>();\n        users.add(new LdapUser());\n        Permission permission = new Permission();\n        permission.setLdapUsers(users);\n        Assertions.assertEquals(users, permission.getLdapUsers());\n        Assertions.assertEquals(1, permission.getLdapUsers().size());\n    }\n\n    @Test\n    public void managedUserTest() {\n        List<ManagedUser> users = new ArrayList<>();\n        users.add(new ManagedUser());\n        Permission permission = new Permission();\n        permission.setManagedUsers(users);\n        Assertions.assertEquals(users, permission.getManagedUsers());\n        Assertions.assertEquals(1, permission.getManagedUsers().size());\n    }\n}\n"
