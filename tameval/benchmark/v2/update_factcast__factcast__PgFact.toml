[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "factcast/factcast"
sha = "2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl factcast-store -Dtest=PgFactTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl factcast-store -DtargetClasses=**.PgFact  -DtargetTests=**.PgFactTest  -DoutputFormats=XML"
coverage_report_path = "factcast-store/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "factcast-store/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "factcast-store/src/test/java/org/factcast/store/internal/PgFactTest.java"
focal_file_path = "factcast-store/src/main/java/org/factcast/store/internal/PgFact.java"
test_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-store/src/test/java/org/factcast/store/internal/PgFactTest.java"
focal_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-store/src/main/java/org/factcast/store/internal/PgFact.java"
first_commit_date = "2021-08-02"
last_commit_date = "2025-02-11"
test_file_content = "/*\n * Copyright Â© 2017-2020 factcast.org\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.factcast.store.internal;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Set;\nimport java.util.UUID;\nimport org.junit.jupiter.api.Test;\n\npublic class PgFactTest {\n\n  @Test\n  void testFrom() throws Exception {\n    ResultSet rs = mock(ResultSet.class);\n    when(rs.next()).thenReturn(true);\n    String ns = \"ns\";\n    String type = \"type\";\n    String aggId = UUID.randomUUID().toString();\n    String aggIdArr = \"[\\\"\" + aggId + \"\\\"]\";\n    String header = \"{\\\"meta\\\":{\\\"foo\\\":\\\"1\\\",\\\"bar\\\":\\\"2\\\",\\\"baz\\\":\\\"3\\\"}}\";\n    String payload = \"{}\";\n    int version = 7;\n    when(rs.getString(eq(PgConstants.ALIAS_ID))).thenReturn(aggId);\n    when(rs.getString(eq(PgConstants.ALIAS_NS))).thenReturn(ns);\n    when(rs.getString(eq(PgConstants.ALIAS_TYPE))).thenReturn(type);\n    when(rs.getString(eq(PgConstants.ALIAS_AGGID))).thenReturn(aggIdArr);\n    when(rs.getString(eq(PgConstants.COLUMN_HEADER))).thenReturn(header);\n    when(rs.getString(eq(PgConstants.COLUMN_PAYLOAD))).thenReturn(payload);\n    when(rs.getInt(eq(PgConstants.COLUMN_VERSION))).thenReturn(version);\n    when(rs.next()).thenReturn(true);\n    PgFact uut = (PgFact) PgFact.from(rs);\n    assertEquals(ns, uut.ns());\n    assertEquals(type, uut.type());\n    assertEquals(aggId, uut.aggIds().iterator().next().toString());\n    assertEquals(aggId, uut.id().toString());\n    assertEquals(header, uut.jsonHeader());\n    assertEquals(payload, uut.jsonPayload());\n    assertEquals(\"1\", uut.meta(\"foo\"));\n    assertEquals(\"2\", uut.meta(\"bar\"));\n    assertEquals(\"3\", uut.meta(\"baz\"));\n    assertEquals(7, uut.version());\n  }\n\n  @Test\n  void testToUUIDArrayNull() {\n    Set<UUID> res = PgFact.toUUIDArray(null);\n    assertTrue(res.isEmpty());\n  }\n\n  @Test\n  void testToUUIDArrayEmpty() {\n    Set<UUID> res = PgFact.toUUIDArray(\"[]\");\n    assertTrue(res.isEmpty());\n  }\n\n  @Test\n  void testToUUIDArraySingle() {\n    UUID aggId1 = UUID.randomUUID();\n    Set<UUID> res = PgFact.toUUIDArray(\"[\\\"\" + aggId1 + \"\\\"]\");\n    assertEquals(1, res.size());\n    assertTrue(res.contains(aggId1));\n  }\n\n  @Test\n  void testToUUIDArrayMutli() {\n    UUID aggId1 = UUID.randomUUID();\n    UUID aggId2 = UUID.randomUUID();\n    Set<UUID> res = PgFact.toUUIDArray(\"[\\\"\" + aggId1 + \"\\\",\\\"\" + aggId2 + \"\\\"]\");\n    assertEquals(2, res.size());\n    assertTrue(res.contains(aggId1));\n    assertTrue(res.contains(aggId2));\n  }\n\n  @Test\n  void testToString() throws SQLException {\n    ResultSet rs = mock(ResultSet.class);\n    when(rs.next()).thenReturn(true);\n    String ns = \"ns\";\n    String type = \"type\";\n    String aggId = UUID.randomUUID().toString();\n    String aggIdArr = \"[\\\"\" + aggId + \"\\\"]\";\n    String header = \"{\\\"meta\\\":{\\\"foo\\\":\\\"1\\\",\\\"bar\\\":\\\"2\\\",\\\"baz\\\":\\\"3\\\"}}\";\n    String payload = \"{}\";\n    int version = 7;\n    when(rs.getString(eq(PgConstants.ALIAS_ID))).thenReturn(aggId);\n    when(rs.getString(eq(PgConstants.ALIAS_NS))).thenReturn(ns);\n    when(rs.getString(eq(PgConstants.ALIAS_TYPE))).thenReturn(type);\n    when(rs.getString(eq(PgConstants.ALIAS_AGGID))).thenReturn(aggIdArr);\n    when(rs.getString(eq(PgConstants.COLUMN_HEADER))).thenReturn(header);\n    when(rs.getString(eq(PgConstants.COLUMN_PAYLOAD))).thenReturn(payload);\n    when(rs.getInt(eq(PgConstants.COLUMN_VERSION))).thenReturn(version);\n    when(rs.next()).thenReturn(true);\n    PgFact uut = (PgFact) PgFact.from(rs);\n\n    assertEquals(\"PgFact(id=\" + uut.id() + \")\", uut.toString());\n  }\n}"
