[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "cicirello/Chips-n-Salsa"
sha = "0dc132865b107fc955f50f8659bca138cbfc43c5"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=AdaptiveMutationOnlyGenerationTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.AdaptiveMutationOnlyGeneration  -DtargetTests=**.AdaptiveMutationOnlyGenerationTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 75.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79,]
missed_lines = [ 55, 57, 58, 59, 63,]

[input_info]
test_file_path = "src/test/java/org/cicirello/search/evo/AdaptiveMutationOnlyGenerationTests.java"
focal_file_path = "src/main/java/org/cicirello/search/evo/AdaptiveMutationOnlyGeneration.java"
test_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/test/java/org/cicirello/search/evo/AdaptiveMutationOnlyGenerationTests.java"
focal_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/main/java/org/cicirello/search/evo/AdaptiveMutationOnlyGeneration.java"
first_commit_date = "2022-12-10"
last_commit_date = "2024-05-17"
test_file_content = "/*\n * Chips-n-Salsa: A library of parallel self-adaptive local search algorithms.\n * Copyright (C) 2002-2022 Vincent A. Cicirello\n *\n * This file is part of Chips-n-Salsa (https://chips-n-salsa.cicirello.org/).\n *\n * Chips-n-Salsa is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Chips-n-Salsa is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npackage org.cicirello.search.evo;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.cicirello.search.ProgressTracker;\nimport org.cicirello.search.operators.Initializer;\nimport org.cicirello.search.operators.MutationOperator;\nimport org.cicirello.search.problems.IntegerCostOptimizationProblem;\nimport org.cicirello.search.problems.OptimizationProblem;\nimport org.cicirello.search.problems.Problem;\nimport org.cicirello.util.Copyable;\nimport org.junit.jupiter.api.*;\n\n/** JUnit test cases for AdaptiveMutationOnlyGeneration. */\npublic class AdaptiveMutationOnlyGenerationTests {\n\n  @Test\n  public void testAdaptiveMutationOnlyGeneration() {\n    ProgressTracker<TestObject> tracker = new ProgressTracker<TestObject>();\n    TestSelectionOp selection = new TestSelectionOp();\n    TestFitnessInteger f = new TestFitnessInteger();\n    TestInitializer init = new TestInitializer();\n    final int N = 20;\n    EvolvableParametersPopulation.IntegerFitness<TestObject> pop =\n        new EvolvableParametersPopulation.IntegerFitness<TestObject>(\n            N, init, f, selection, tracker, 1);\n    pop.init();\n\n    TestMutation mutation = new TestMutation();\n\n    AdaptiveMutationOnlyGeneration<TestObject> ag =\n        new AdaptiveMutationOnlyGeneration<TestObject>(mutation);\n    int fitnessEvals = ag.apply(pop);\n    assertEquals(mutation.count, fitnessEvals);\n    assertNotEquals(2 * N, fitnessEvals);\n    assertNotEquals(0, fitnessEvals);\n\n    NullPointerException thrown =\n        assertThrows(\n            NullPointerException.class,\n            () ->\n                new AdaptiveMutationOnlyGeneration<TestObject>(\n                    (MutationOperator<TestObject>) null));\n  }\n\n\n\n\n\n\n  private static class TestSelectionOp implements SelectionOperator {\n\n    boolean called;\n    int initCalledWith;\n\n    public TestSelectionOp() {\n      called = false;\n    }\n\n    @Override\n    public void select(PopulationFitnessVector.Integer fitnesses, int[] selected) {\n      int next = selected.length - 1;\n      for (int i = 0; i < selected.length; i++) {\n        selected[i] = next;\n        next--;\n      }\n      called = true;\n    }\n\n    @Override\n    public void select(PopulationFitnessVector.Double fitnesses, int[] selected) {\n      int next = selected.length - 1;\n      for (int i = 0; i < selected.length; i++) {\n        selected[i] = next;\n        next--;\n      }\n      called = true;\n    }\n\n    @Override\n    public TestSelectionOp split() {\n      return new TestSelectionOp();\n    }\n\n    @Override\n    public void init(int generations) {\n      initCalledWith = generations;\n    }\n  }\n\n  private static class TestFitnessInteger implements FitnessFunction.Integer<TestObject> {\n\n    private TestProblemInteger problem;\n    private int adjustment;\n\n    public TestFitnessInteger() {\n      problem = new TestProblemInteger();\n    }\n\n    public int fitness(TestObject c) {\n      return c.id + 10 + adjustment;\n    }\n\n    public Problem<TestObject> getProblem() {\n      return problem;\n    }\n\n    public void changeFitness(int adjustment) {\n      this.adjustment = adjustment;\n    }\n  }\n\n  private static class TestFitnessDouble implements FitnessFunction.Double<TestObject> {\n\n    private TestProblemDouble problem;\n    private int adjustment;\n\n    public TestFitnessDouble() {\n      problem = new TestProblemDouble();\n    }\n\n    public double fitness(TestObject c) {\n      return c.id + 10 + adjustment;\n    }\n\n    public Problem<TestObject> getProblem() {\n      return problem;\n    }\n\n    public void changeFitness(int adjustment) {\n      this.adjustment = adjustment;\n    }\n  }\n\n  private static class TestProblemInteger implements IntegerCostOptimizationProblem<TestObject> {\n    public int cost(TestObject c) {\n      return 100 - c.id;\n    }\n\n    public int value(TestObject c) {\n      return cost(c);\n    }\n  }\n\n  private static class TestProblemDouble implements OptimizationProblem<TestObject> {\n    public double cost(TestObject c) {\n      return 100 - c.id;\n    }\n\n    public double value(TestObject c) {\n      return cost(c);\n    }\n  }\n\n  private static class TestInitializer implements Initializer<TestObject> {\n\n    public TestObject createCandidateSolution() {\n      TestObject obj = new TestObject();\n      return obj;\n    }\n\n    public TestInitializer split() {\n      return this;\n    }\n  }\n\n  private static class TestMutation implements MutationOperator<TestObject> {\n\n    private int count;\n\n    @Override\n    public void mutate(TestObject c) {\n      assertFalse(c.mutated);\n      c.mutated = true;\n      count++;\n    }\n\n    @Override\n    public TestMutation split() {\n      return this;\n    }\n  }\n\n  private static class TestObject implements Copyable<TestObject> {\n\n    private static int nextId = 1;\n    private int id;\n    private boolean mutated;\n\n    private TestObject() {\n      id = nextId;\n      nextId++;\n      mutated = false;\n    }\n\n    private TestObject(int id) {\n      this.id = id;\n    }\n\n    private TestObject(TestObject other) {\n      id = other.id;\n      mutated = other.mutated;\n    }\n\n    public TestObject copy() {\n      return new TestObject(this);\n    }\n\n    @Override\n    public int hashCode() {\n      return id;\n    }\n\n    @Override\n    public boolean equals(Object other) {\n      return id == ((TestObject) other).id;\n    }\n  }\n}\n"
