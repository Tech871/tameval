[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Go"
go_version = "1.23.2"

[repo_info]
repository = "supabase/cli"
sha = "418caee001449f782a775b0f13af09b25dd581da"

[run_info]
docker_image = "golang:1.23.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/gen/types/types.go internal/gen/types/types_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/gen/types/types.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 92.0
original_coverage = 92.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 56, 57, 58, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 113, 115,]
missed_lines = [ 38, 39, 40, 110, 111, 112,]

[input_info]
test_file_path = "internal/gen/types/types_test.go"
focal_file_path = "internal/gen/types/types.go"
test_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/gen/types/types_test.go"
focal_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/gen/types/types.go"
first_commit_date = "2024-07-02"
last_commit_date = "2025-01-10"
test_file_content = "package types\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/docker/docker/api/types/container\"\n\t\"github.com/h2non/gock\"\n\t\"github.com/jackc/pgconn\"\n\t\"github.com/spf13/afero\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"github.com/supabase/cli/internal/testing/apitest\"\n\t\"github.com/supabase/cli/internal/utils\"\n\t\"github.com/supabase/cli/pkg/api\"\n\t\"github.com/supabase/cli/pkg/pgtest\"\n)\n\nfunc TestGenLocalCommand(t *testing.T) {\n\tutils.DbId = \"test-db\"\n\tutils.Config.Hostname = \"localhost\"\n\tutils.Config.Db.Port = 5432\n\n\tdbConfig := pgconn.Config{\n\t\tHost:     utils.Config.Hostname,\n\t\tPort:     utils.Config.Db.Port,\n\t\tUser:     \"admin\",\n\t\tPassword: \"password\",\n\t}\n\n\tt.Run(\"generates typescript types\", func(t *testing.T) {\n\t\tconst containerId = \"test-pgmeta\"\n\t\timageUrl := utils.GetRegistryImageUrl(utils.Config.Studio.PgmetaImage)\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId).\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\tapitest.MockDockerStart(utils.Docker, imageUrl, containerId)\n\t\trequire.NoError(t, apitest.MockDockerLogs(utils.Docker, containerId, \"hello world\\n\"))\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tassert.NoError(t, Run(context.Background(), \"\", dbConfig, LangTypescript, []string{}, true, \"\", fsys, conn.Intercept))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error when db is not started\", func(t *testing.T) {\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId).\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\tassert.Error(t, Run(context.Background(), \"\", dbConfig, LangTypescript, []string{}, true, \"\", fsys))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on image fetch failure\", func(t *testing.T) {\n\t\tutils.Config.Api.Image = \"v9\"\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId).\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/images\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\tassert.Error(t, Run(context.Background(), \"\", dbConfig, LangTypescript, []string{}, true, \"\", fsys))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"generates swift types\", func(t *testing.T) {\n\t\tconst containerId = \"test-pgmeta\"\n\t\timageUrl := utils.GetRegistryImageUrl(utils.Config.Studio.PgmetaImage)\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId).\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\tapitest.MockDockerStart(utils.Docker, imageUrl, containerId)\n\t\trequire.NoError(t, apitest.MockDockerLogs(utils.Docker, containerId, \"hello world\\n\"))\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tassert.NoError(t, Run(context.Background(), \"\", dbConfig, LangSwift, []string{}, true, SwiftInternalAccessControl, fsys, conn.Intercept))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n}\n\nfunc TestGenLinkedCommand(t *testing.T) {\n\tprojectId := apitest.RandomProjectRef()\n\ttoken := apitest.RandomAccessToken(t)\n\tt.Setenv(\"SUPABASE_ACCESS_TOKEN\", string(token))\n\n\tt.Run(\"generates typescript types\", func(t *testing.T) {\n\t\tfsys := afero.NewMemMapFs()\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + projectId + \"/types/typescript\").\n\t\t\tReply(200).\n\t\t\tJSON(api.TypescriptResponse{Types: \"\"})\n\t\tassert.NoError(t, Run(context.Background(), projectId, pgconn.Config{}, LangTypescript, []string{}, true, \"\", fsys))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on network failure\", func(t *testing.T) {\n\t\terrNetwork := errors.New(\"network error\")\n\t\tfsys := afero.NewMemMapFs()\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + projectId + \"/types/typescript\").\n\t\t\tReplyError(errNetwork)\n\t\terr := Run(context.Background(), projectId, pgconn.Config{}, LangTypescript, []string{}, true, \"\", fsys)\n\t\tassert.ErrorIs(t, err, errNetwork)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on service unavailable\", func(t *testing.T) {\n\t\tfsys := afero.NewMemMapFs()\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + projectId + \"/types/typescript\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\tassert.Error(t, Run(context.Background(), projectId, pgconn.Config{}, LangTypescript, []string{}, true, \"\", fsys))\n\t})\n}\n\nfunc TestGenRemoteCommand(t *testing.T) {\n\tdbConfig := pgconn.Config{\n\t\tHost:     \"db.supabase.co\",\n\t\tPort:     5432,\n\t\tUser:     \"admin\",\n\t\tPassword: \"password\",\n\t\tDatabase: \"postgres\",\n\t}\n\n\tt.Run(\"generates type from remote db\", func(t *testing.T) {\n\t\tconst containerId = \"test-pgmeta\"\n\t\timageUrl := utils.GetRegistryImageUrl(utils.Config.Studio.PgmetaImage)\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tapitest.MockDockerStart(utils.Docker, imageUrl, containerId)\n\t\trequire.NoError(t, apitest.MockDockerLogs(utils.Docker, containerId, \"hello world\\n\"))\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tassert.NoError(t, Run(context.Background(), \"\", dbConfig, LangTypescript, []string{\"public\"}, true, \"\", afero.NewMemMapFs(), conn.Intercept))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n}\n\nfunc TestGenerateTypesForLinkedProject(t *testing.T) {\n\tprojectRef := apitest.RandomProjectRef()\n\taccessToken := apitest.RandomAccessToken(t)\n\tt.Setenv(\"SUPABASE_ACCESS_TOKEN\", string(accessToken))\n\n\tt.Run(\"successfully generates typescript types for linked project\", func(t *testing.T) {\n\t\tfileSystem := afero.NewMemMapFs()\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + projectRef + \"/types/typescript\").\n\t\t\tReply(200).\n\t\t\tJSON(api.TypescriptResponse{Types: \"export type SomeType = string;\"})\n\t\tassert.NoError(t, Run(context.Background(), projectRef, pgconn.Config{}, LangTypescript, []string{\"public\"}, false, \"\", fileSystem))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"handles api error response\", func(t *testing.T) {\n\t\tfileSystem := afero.NewMemMapFs()\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.DefaultApiHost).\n\t\t\tGet(\"/v1/projects/\" + projectRef + \"/types/typescript\").\n\t\t\tReply(401).\n\t\t\tJSON(map[string]string{\"message\": \"Unauthorized\"})\n\t\terr := Run(context.Background(), projectRef, pgconn.Config{}, LangTypescript, []string{\"public\"}, false, \"\", fileSystem)\n\t\tassert.Error(t, err)\n\t})\n}\n\nfunc TestLocalTypeGeneration(t *testing.T) {\n\tutils.DbId = \"test-db\"\n\tutils.Config.Hostname = \"localhost\"\n\tutils.Config.Db.Port = 5432\n\n\tlocalDbConfig := pgconn.Config{\n\t\tHost:     utils.Config.Hostname,\n\t\tPort:     utils.Config.Db.Port,\n\t\tUser:     \"postgres\",\n\t\tPassword: \"postgres\",\n\t\tDatabase: \"postgres\",\n\t}\n\n\tt.Run(\"generates go types from local database\", func(t *testing.T) {\n\t\tconst containerId = \"test-pgmeta-go\"\n\t\timageUrl := utils.GetRegistryImageUrl(utils.Config.Studio.PgmetaImage)\n\t\tfileSystem := afero.NewMemMapFs()\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId).\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\tapitest.MockDockerStart(utils.Docker, imageUrl, containerId)\n\t\trequire.NoError(t, apitest.MockDockerLogs(utils.Docker, containerId, \"package main\\n\"))\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tassert.NoError(t, Run(context.Background(), \"\", localDbConfig, LangGo, []string{\"public\", \"auth\"}, false, \"\", fileSystem, conn.Intercept))\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n}"
