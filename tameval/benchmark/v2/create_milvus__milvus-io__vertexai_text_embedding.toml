[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.22"

[repo_info]
repository = "milvus-io/milvus"
sha = "16efcda5c46748062abcfe563f70e1e2e53d0da1"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/util/function/models/vertexai/vertexai_text_embedding.go internal/util/function/models/vertexai/vertexai_text_embedding_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/util/function/models/vertexai/vertexai_text_embedding.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 59.0
original_coverage = 59.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 99, 115, 116, 117, 118, 119, 124, 129, 130, 131, 133, 134, 135, 136, 137, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 158,]
missed_lines = [ 96, 97, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 120, 121, 122, 125, 126, 127, 138, 139, 140, 141, 142, 155, 156, 157,]

[input_info]
test_file_path = "internal/util/function/models/vertexai/vertexai_text_embedding_test.go"
focal_file_path = "internal/util/function/models/vertexai/vertexai_text_embedding.go"
test_file_url = "https://github.com/milvus-io/milvus/blob/16efcda5c46748062abcfe563f70e1e2e53d0da1/internal/util/function/models/vertexai/vertexai_text_embedding_test.go"
focal_file_url = "https://github.com/milvus-io/milvus/blob/16efcda5c46748062abcfe563f70e1e2e53d0da1/internal/util/function/models/vertexai/vertexai_text_embedding.go"
first_commit_date = "2025-01-24"
last_commit_date = "2025-03-10"
test_file_content = "// Licensed to the LF AI & Data foundation under one\n// or more contributor license agreements. See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership. The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License. You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage vertexai\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEmbeddingClientCheck(t *testing.T) {\n\tmockJSONKey := []byte{1, 2, 3}\n\t{\n\t\tc := NewVertexAIEmbedding(\"mock_url\", []byte{}, \"mock_scopes\", \"\")\n\t\terr := c.Check()\n\t\tassert.True(t, err != nil)\n\t\tfmt.Println(err)\n\t}\n\n\t{\n\t\tc := NewVertexAIEmbedding(\"\", mockJSONKey, \"\", \"\")\n\t\terr := c.Check()\n\t\tassert.True(t, err != nil)\n\t\tfmt.Println(err)\n\t}\n\n\t{\n\t\tc := NewVertexAIEmbedding(\"mock_url\", mockJSONKey, \"mock_scopes\", \"\")\n\t\terr := c.Check()\n\t\tassert.True(t, err == nil)\n\t}\n}\n\nfunc TestEmbeddingOK(t *testing.T) {\n\tvar res EmbeddingResponse\n\trepStr := `{\"predictions\": [{\"embeddings\": {\"statistics\": {\"truncated\": false, \"token_count\": 4}, \"values\": [-0.028420744463801384, 0.037183016538619995]}}, {\"embeddings\": {\"statistics\": {\"truncated\": false, \"token_count\": 8}, \"values\": [-0.04367655888199806, 0.03777721896767616, 0.0158217903226614]}}], \"metadata\": {\"billableCharacterCount\": 27}}`\n\terr := json.Unmarshal([]byte(repStr), &res)\n\tassert.NoError(t, err)\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusOK)\n\t\tdata, _ := json.Marshal(res)\n\t\tw.Write(data)\n\t}))\n\n\tdefer ts.Close()\n\turl := ts.URL\n\n\t{\n\t\tc := NewVertexAIEmbedding(url, []byte{1, 2, 3}, \"mock_scopes\", \"mock_token\")\n\t\terr := c.Check()\n\t\tassert.True(t, err == nil)\n\t\t_, err = c.Embedding(\"text-embedding-005\", []string{\"sentence\"}, 0, \"query\", 0)\n\t\tassert.True(t, err == nil)\n\t}\n}\n\nfunc TestEmbeddingFailed(t *testing.T) {\n\tts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusUnauthorized)\n\t}))\n\n\tdefer ts.Close()\n\turl := ts.URL\n\n\t{\n\t\tc := NewVertexAIEmbedding(url, []byte{1, 2, 3}, \"mock_scopes\", \"mock_token\")\n\t\terr := c.Check()\n\t\tassert.True(t, err == nil)\n\t\t_, err = c.Embedding(\"text-embedding-v2\", []string{\"sentence\"}, 0, \"query\", 0)\n\t\tassert.True(t, err != nil)\n\t}\n}\n"
