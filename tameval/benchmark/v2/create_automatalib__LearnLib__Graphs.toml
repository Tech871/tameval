[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "LearnLib/automatalib"
sha = "125bd7267571158b87da3e5dbe92f505ce1729a5"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl util -Dtest=GraphsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl util -DtargetClasses=**.Graphs  -DtargetTests=**.GraphsTest  -DoutputFormats=XML"
coverage_report_path = "util/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "util/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 57.0
original_coverage = 57.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 45, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65,]
missed_lines = [ 86, 87, 89, 90, 91, 92, 94, 115, 138, 159, 181, 182,]

[input_info]
test_file_path = "util/src/test/java/net/automatalib/util/graph/GraphsTest.java"
focal_file_path = "util/src/main/java/net/automatalib/util/graph/Graphs.java"
test_file_url = "https://github.com/LearnLib/automatalib/blob/125bd7267571158b87da3e5dbe92f505ce1729a5/util/src/test/java/net/automatalib/util/graph/GraphsTest.java"
focal_file_url = "https://github.com/LearnLib/automatalib/blob/125bd7267571158b87da3e5dbe92f505ce1729a5/util/src/main/java/net/automatalib/util/graph/Graphs.java"
first_commit_date = "2023-10-10"
last_commit_date = "2025-01-16"
test_file_content = "/* Copyright (C) 2013-2025 TU Dortmund University\n * This file is part of AutomataLib <https://automatalib.net>.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.automatalib.util.graph;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Random;\nimport java.util.Set;\n\nimport net.automatalib.alphabet.Alphabet;\nimport net.automatalib.alphabet.impl.Alphabets;\nimport net.automatalib.automaton.fsa.DFA;\nimport net.automatalib.common.util.HashUtil;\nimport net.automatalib.common.util.mapping.Mapping;\nimport net.automatalib.common.util.mapping.Mappings;\nimport net.automatalib.graph.MutableGraph;\nimport net.automatalib.graph.concept.NodeIDs;\nimport net.automatalib.graph.impl.CompactGraph;\nimport net.automatalib.graph.impl.CompactSimpleBidiGraph;\nimport net.automatalib.graph.impl.CompactSimpleGraph;\nimport net.automatalib.graph.impl.CompactUniversalBidiGraph;\nimport net.automatalib.graph.impl.CompactUniversalGraph;\nimport net.automatalib.graph.impl.SimpleMapGraph;\nimport net.automatalib.util.automaton.random.RandomAutomata;\nimport net.automatalib.util.graph.copy.GraphCopy;\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\npublic class GraphsTest {\n\n    @Test\n    public void testIncomingEdges() {\n\n        final Alphabet<Integer> alphabet = Alphabets.integers(1, 3);\n        final DFA<?, Integer> dfa = RandomAutomata.randomDFA(new Random(42), 10, alphabet);\n\n        checkIncomingEdges(dfa, alphabet, new CompactGraph(dfa.size()));\n        checkIncomingEdges(dfa, alphabet, new CompactUniversalGraph<>(dfa.size()));\n        checkIncomingEdges(dfa, alphabet, new CompactUniversalBidiGraph<>(dfa.size()));\n        checkIncomingEdges(dfa, alphabet, new CompactSimpleGraph<>(dfa.size()));\n        checkIncomingEdges(dfa, alphabet, new CompactSimpleBidiGraph<>(dfa.size()));\n        checkIncomingEdges(dfa, alphabet, new SimpleMapGraph<>());\n    }\n\n\n    private <S, I, N, E, NP, EP> void checkIncomingEdges(DFA<S, I> dfa,\n                                                         Alphabet<I> alphabet,\n                                                         MutableGraph<N, E, NP, EP> graph) {\n\n        final Mapping<S, N> nodeMapping = GraphCopy.copyUniversalPlain(dfa.transitionGraphView(alphabet),\n                                                                       graph,\n                                                                       Mappings.nullMapping(),\n                                                                       Mappings.nullMapping());\n\n        final Mapping<N, Collection<E>> incomingEdges = Graphs.incomingEdges(graph);\n\n        for (S tgt : dfa) {\n            final Set<S> incomingStates = new HashSet<>();\n\n            for (S src : dfa) {\n                for (I i : alphabet) {\n                    if (Objects.equals(tgt, dfa.getSuccessor(src, i))) {\n                        incomingStates.add(src);\n                    }\n                }\n            }\n\n            final N mappedTgt = nodeMapping.get(tgt);\n            final Set<E> edges = new HashSet<>(incomingEdges.get(mappedTgt));\n            final Set<E> checkEdges = new HashSet<>(HashUtil.capacity(edges.size()));\n\n            for (S src : incomingStates) {\n                final N mappedSrc = nodeMapping.get(src);\n                graph.getEdgesBetween(mappedSrc, mappedTgt).forEachRemaining(checkEdges::add);\n            }\n\n            Assert.assertEquals(checkEdges, edges);\n        }\n    }\n\n    private <N, NP> void checkNodeIDs(MutableGraph<N, ?, NP, ?> graph, List<NP> properties) {\n\n        final List<N> nodes = new ArrayList<>(properties.size());\n        for (NP p : properties) {\n            nodes.add(graph.addNode(p));\n        }\n\n        final NodeIDs<N> nodeIDs = graph.nodeIDs();\n\n        for (int i = 0; i < nodes.size(); i++) {\n            final N n = nodes.get(i);\n            Assert.assertEquals(nodeIDs.getNodeId(n), i);\n            Assert.assertEquals(nodeIDs.getNode(i), n);\n        }\n\n        Assert.assertThrows(IllegalArgumentException.class, () -> nodeIDs.getNode(-1));\n        Assert.assertThrows(IllegalArgumentException.class, () -> nodeIDs.getNode(4));\n    }\n}\n"
