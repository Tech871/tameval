[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "google/langfun"
sha = "11d646e44baaea09bb792c3428a8f71ba742363b"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=langfun/core/component.py -m pytest -q --junit-xml=test_output.xml langfun/core/component_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target langfun.core.component --unit-test langfun.core.component_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target langfun/core/component.py --unit-test langfun/core/component_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 94.0
original_coverage = 94.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 15, 16, 20, 23, 28, 32, 34, 35, 39, 40, 41, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 63, 64, 65, 66, 67, 70, 73,]
missed_lines = [ 49, 89,]

[input_info]
test_file_path = "langfun/core/component_test.py"
focal_file_path = "langfun/core/component.py"
test_file_url = "https://github.com/google/langfun/blob/11d646e44baaea09bb792c3428a8f71ba742363b/langfun/core/component_test.py"
focal_file_url = "https://github.com/google/langfun/blob/11d646e44baaea09bb792c3428a8f71ba742363b/langfun/core/component.py"
first_commit_date = "2023-08-30"
last_commit_date = "2025-01-16"
test_file_content = "# Copyright 2023 The Langfun Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Contextual component and app test.\"\"\"\n\nimport inspect\nfrom typing import Any\nimport unittest\nimport weakref\n\nfrom langfun.core import component as lf\nimport pyglove as pg\n\n\nclass ComponentContextTest(unittest.TestCase):\n  \"\"\"Tests for ComponentContext.\"\"\"\n\n  def test_override(self):\n    class A(lf.Component):\n      x: int\n\n    a = A(x=1)\n    with a.override(x=2, y=1):\n      self.assertEqual(a.x, 2)\n\n      # `y`` is not an attribute of `A`.\n      with self.assertRaises(AttributeError):\n        _ = a.y\n\n  def test_context(self):\n    class A(lf.Component):\n      x: int\n      y: int = lf.contextual()\n      z: int = lf.contextual(default=-1)\n\n    with self.assertRaisesRegex(TypeError, '.* missing 1 required argument'):\n      _ = A()\n\n    a = A(x=1)\n    with self.assertRaisesRegex(\n        AttributeError, 'p'\n    ):\n      _ = a.p\n\n    with self.assertRaisesRegex(\n        AttributeError, '.* is not found under its context'\n    ):\n      _ = a.y\n\n    with lf.context(y=1):\n      self.assertEqual(a.y, 1)\n\n    with self.assertRaisesRegex(\n        AttributeError, '.* is not found under its context'\n    ):\n      _ = a.y\n\n    # Use contextual default if it's not provided.\n    self.assertEqual(a.z, -1)\n\n    a1 = A(x=1, y=2)\n    self.assertEqual(a1.x, 1)\n    self.assertEqual(a1.y, 2)\n    self.assertEqual(a1.z, -1)\n\n    with lf.context(x=3, y=3, z=3):\n      # Member attributes take precedence over `lf.context`.\n      self.assertEqual(a1.x, 1)\n      self.assertEqual(a1.y, 2)\n\n      # Override attributes take precedence over member attribute.\n      with a1.override(y=3):\n        self.assertEqual(a1.y, 3)\n        with a1.override(y=4):\n          self.assertEqual(a1.y, 4)\n        self.assertEqual(a1.y, 3)\n      self.assertEqual(a1.y, 2)\n\n      # `lf.context` takes precedence over contextual default.\n      self.assertEqual(a1.z, 3)\n\n      # Test nested contextual override with override_attrs=True (default).\n      with lf.context(y=4, z=4, override_attrs=True):\n\n        # Member attribute is not overriden as current scope does not override\n        # `x``.\n        self.assertEqual(a1.x, 1)\n\n        # Member attribute is overriden.\n        self.assertEqual(a1.y, 4)\n\n        # `lf.Component.override` takes precedence over\n        # `lf.context(override_attrs=True)`.\n        with a1.override(y=3):\n          self.assertEqual(a1.y, 3)\n        self.assertEqual(a1.y, 4)\n\n        # Member default is overriden.\n        self.assertEqual(a1.z, 4)\n\n      self.assertEqual(a1.y, 2)\n      self.assertEqual(a1.z, 3)\n\n    self.assertEqual(a1.y, 2)\n    self.assertEqual(a1.z, -1)\n\n  def test_context_cascade(self):\n    class A(lf.Component):\n      x: int\n      y: int = lf.contextual()\n      z: int = lf.contextual(default=-1)\n\n    a = A(1, 2)\n    self.assertEqual(a.x, 1)\n    self.assertEqual(a.y, 2)\n    self.assertEqual(a.z, -1)\n\n    with lf.context(x=3, y=3, z=3, cascade=True):\n      self.assertEqual(a.x, 1)\n      self.assertEqual(a.y, 2)\n      self.assertEqual(a.z, 3)\n\n      # Outter `lf.force_context` takes precedence\n      # over inner `lf.force_context`.\n      with lf.context(y=4, z=4, cascade=True):\n        self.assertEqual(a.x, 1)\n        self.assertEqual(a.y, 2)\n        self.assertEqual(a.z, 3)\n\n      with lf.context(y=4, z=4, override_attrs=True):\n        self.assertEqual(a.x, 1)\n        self.assertEqual(a.y, 2)\n        self.assertEqual(a.z, 3)\n\n    self.assertEqual(a.x, 1)\n    self.assertEqual(a.y, 2)\n    self.assertEqual(a.z, -1)\n\n    with lf.context(x=3, y=3, z=3, cascade=True, override_attrs=True):\n      self.assertEqual(a.x, 3)\n      self.assertEqual(a.y, 3)\n      self.assertEqual(a.z, 3)\n\n      with lf.context(y=4, z=4, override_attrs=True):\n        self.assertEqual(a.x, 3)\n        self.assertEqual(a.y, 3)\n        self.assertEqual(a.z, 3)\n\n    self.assertEqual(a.x, 1)\n    self.assertEqual(a.y, 2)\n    self.assertEqual(a.z, -1)\n\n  def test_sym_inferred(self):\n    class A(lf.Component):\n      x: int = 1\n      y: int = lf.contextual()\n\n    a = A()\n    with self.assertRaisesRegex(\n        AttributeError, '.* is not found under its context'):\n      _ = a.sym_inferred('y')\n    self.assertIsNone(a.sym_inferred('y', default=None))\n\n    with self.assertRaises(AttributeError):\n      _ = a.sym_inferred('z')\n    self.assertIsNone(a.sym_inferred('z', default=None))\n\n  def test_symbolic_assignment(self):\n    class A(lf.Component):\n      x: int = 1\n\n      def _on_bound(self):\n        super()._on_bound()\n        self.y = self.x * 2\n\n    a = A()\n    self.assertEqual(a.y, 2)\n    a.x = 2\n    self.assertEqual(a.y, 4)\n\n  def test_symbolic_eq_ne_hash(self):\n    class A(lf.Component):\n      x: int = 1\n\n    a = A()\n    self.assertNotEqual(a, A())\n    self.assertTrue(pg.eq(a, A()))\n    self.assertFalse(pg.eq(a, A(2)))\n    self.assertNotEqual(hash(a), hash(A()))\n    self.assertEqual(pg.hash(a), pg.hash(A()))\n\n  def test_weak_ref(self):\n    class A(lf.Component):\n      x: int = 1\n\n    a = A()\n    self.assertIsNotNone(weakref.ref(a))\n\n\nclass ContextualAttributeTest(unittest.TestCase):\n  \"\"\"Tests for Component.\"\"\"\n\n  def test_contextualibute_access(self):\n\n    class A(lf.Component):\n      x: int\n      y: int = lf.contextual()\n\n    # Not okay: `A.x` is required.\n    with self.assertRaisesRegex(TypeError, 'missing 1 required argument'):\n      _ = A()\n\n    # Okay: `A.y` is contextual.\n    a = A(1)\n\n    # `a.y` is not yet available from the context.\n    with self.assertRaises(AttributeError):\n      _ = a.y\n\n    class B(lf.Component):\n      # Attributes with annotation will be treated as symbolic fields.\n      p: int\n      q: A = A(2)\n      z: int = lf.contextual()\n\n    class C(lf.Component):\n      a: int\n\n      # Attributes of lf type without annotation will also be\n      # treated as symbolic fields.\n      b = B(2)\n\n      y: int = 1\n\n      # Attributes of non-componentl type without annotation will not\n      # be treated as symbolic fields.\n      z = 2\n\n    c = C(1)\n    b = c.b\n    a = b.q\n\n    # Test symbolic attributes declared from C.\n    self.assertTrue(c.sym_hasattr('a'))\n    self.assertTrue(c.sym_hasattr('b'))\n    self.assertTrue(c.sym_hasattr('y'))\n    self.assertFalse(c.sym_hasattr('z'))\n\n    # Contextual access to c.y from a.\n    self.assertEqual(a.y, 1)\n    self.assertEqual(b.z, 2)\n\n    # 'y' is not defined as an attribute in 'B'.\n    with self.assertRaises(AttributeError):\n      _ = b.y\n\n    c.rebind(y=2)\n    self.assertEqual(c.y, 2)\n    self.assertEqual(a.y, 2)\n\n    c.z = 3\n    self.assertEqual(c.z, 3)\n    self.assertEqual(b.z, 3)\n\n  def test_to_html(self):\n    class A(lf.Component):\n      x: int = 1\n      y: int = lf.contextual()\n\n    def assert_content(html, expected):\n      expected = inspect.cleandoc(expected).strip()\n      actual = html.content.strip()\n      if actual != expected:\n        print(actual)\n      self.assertEqual(actual.strip(), expected)\n\n    self.assertIn(\n        inspect.cleandoc(\n            \"\"\"\n            .contextual-attribute {\n              color: purple;\n            }\n            .unavailable-contextual {\n              color: gray;\n              font-style: italic;\n            }\n            \"\"\"\n        ),\n        A().to_html().style_section,\n    )\n\n    assert_content(\n        A().to_html(enable_summary_tooltip=False),\n        \"\"\"\n        <details open class=\"pyglove a\"><summary><div class=\"summary-title\">A(...)</div></summary><div class=\"complex-value a\"><details open class=\"pyglove int\"><summary><div class=\"summary-name\">x<span class=\"tooltip\">x</span></div><div class=\"summary-title\">int</div></summary><span class=\"simple-value int\">1</span></details><details open class=\"pyglove contextual-attribute\"><summary><div class=\"summary-name\">y<span class=\"tooltip\">y</span></div><div class=\"summary-title\">ContextualAttribute(...)</div></summary><div class=\"unavailable-contextual\">(not available)</div></details></div></details>\n        \"\"\"\n    )\n\n    class B(lf.Component):\n      z: Any\n      y: int = 2\n\n    b = B(A())\n    assert_content(\n        b.z.to_html(enable_summary_tooltip=False),\n        \"\"\"\n        <details open class=\"pyglove a\"><summary><div class=\"summary-title\">A(...)</div></summary><div class=\"complex-value a\"><details open class=\"pyglove int\"><summary><div class=\"summary-name\">x<span class=\"tooltip\">x</span></div><div class=\"summary-title\">int</div></summary><span class=\"simple-value int\">1</span></details><details open class=\"pyglove contextual-attribute\"><summary><div class=\"summary-name\">y<span class=\"tooltip\">y</span></div><div class=\"summary-title\">ContextualAttribute(...)</div></summary><span class=\"simple-value int\">2</span></details></div></details>\n        \"\"\"\n    )\n\n\nif __name__ == '__main__':\n  unittest.main()\n"
