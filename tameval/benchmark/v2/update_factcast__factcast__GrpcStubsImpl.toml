[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "factcast/factcast"
sha = "2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl factcast-client-grpc -Dtest=GrpcStubsImplTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl factcast-client-grpc -DtargetClasses=**.GrpcStubsImpl  -DtargetTests=**.GrpcStubsImplTest  -DoutputFormats=XML"
coverage_report_path = "factcast-client-grpc/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "factcast-client-grpc/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "factcast-client-grpc/src/test/java/org/factcast/client/grpc/GrpcStubsImplTest.java"
focal_file_path = "factcast-client-grpc/src/main/java/org/factcast/client/grpc/GrpcStubsImpl.java"
test_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-client-grpc/src/test/java/org/factcast/client/grpc/GrpcStubsImplTest.java"
focal_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-client-grpc/src/main/java/org/factcast/client/grpc/GrpcStubsImpl.java"
first_commit_date = "2024-06-17"
last_commit_date = "2025-02-11"
test_file_content = "/*\n * Copyright Â© 2017-2024 factcast.org\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.factcast.client.grpc;\n\nimport static org.mockito.Mockito.*;\n\nimport io.grpc.*;\nimport java.util.concurrent.TimeUnit;\nimport lombok.NonNull;\nimport org.assertj.core.api.Assertions;\nimport org.factcast.grpc.api.gen.RemoteFactStoreGrpc;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass GrpcStubsImplTest {\n\n  private static final String CHANNEL_NAME = \"factstore\";\n  @Mock private @NonNull Channel channel;\n  @Mock private CallCredentials basic;\n  @Mock private FactCastGrpcChannelFactory factory;\n  @Mock private Metadata meta;\n  @Mock private CallCredentials creds;\n  private GrpcStubsImpl underTest;\n\n  private static final String COMP = \"COMP\";\n  private Deadline deadline = Deadline.after(10, TimeUnit.SECONDS);\n  ;\n\n  @BeforeEach\n  void setup() {\n    when(factory.createChannel(CHANNEL_NAME)).thenReturn(channel);\n  }\n\n  @Test\n  void uncompressedBlockingHasMeta() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, null);\n    RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub =\n        mock(RemoteFactStoreGrpc.RemoteFactStoreBlockingStub.class);\n    when(stub.withInterceptors(any())).thenReturn(stub);\n    underTest.configure(stub);\n    ArgumentCaptor<ClientInterceptor> captor = ArgumentCaptor.forClass(ClientInterceptor.class);\n    verify(stub).withInterceptors(captor.capture());\n    verify(stub, never()).withDeadline(any());\n\n    Assertions.assertThat(captor.getValue()).hasFieldOrPropertyWithValue(\"extraHeaders\", meta);\n  }\n\n  @Test\n  void compressedBlockingHasMeta() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, null);\n    RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub =\n        mock(RemoteFactStoreGrpc.RemoteFactStoreBlockingStub.class);\n    when(stub.withInterceptors(any())).thenReturn(stub);\n    underTest.compression(COMP);\n    underTest.configure(stub);\n    ArgumentCaptor<ClientInterceptor> captor = ArgumentCaptor.forClass(ClientInterceptor.class);\n    verify(stub).withInterceptors(captor.capture());\n    verify(stub, never()).withDeadline(any());\n\n    Assertions.assertThat(captor.getValue()).hasFieldOrPropertyWithValue(\"extraHeaders\", meta);\n  }\n\n  @Test\n  void stubWithDeadline() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, null);\n    RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub =\n        mock(RemoteFactStoreGrpc.RemoteFactStoreBlockingStub.class);\n    when(stub.withDeadline(any())).thenReturn(stub);\n    when(stub.withInterceptors(any())).thenReturn(stub);\n    underTest.compression(COMP);\n    underTest.configure(stub, deadline);\n    ArgumentCaptor<ClientInterceptor> captor = ArgumentCaptor.forClass(ClientInterceptor.class);\n    verify(stub).withInterceptors(captor.capture());\n    verify(stub, atLeastOnce()).withDeadline(any());\n\n    Assertions.assertThat(captor.getValue()).hasFieldOrPropertyWithValue(\"extraHeaders\", meta);\n  }\n\n  @Test\n  void stubWithoutDeadline() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, null);\n    RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub =\n        mock(RemoteFactStoreGrpc.RemoteFactStoreBlockingStub.class);\n    when(stub.withInterceptors(any())).thenReturn(stub);\n    underTest.compression(COMP);\n    underTest.configure(stub, null);\n    ArgumentCaptor<ClientInterceptor> captor = ArgumentCaptor.forClass(ClientInterceptor.class);\n    verify(stub).withInterceptors(captor.capture());\n    verify(stub, never()).withDeadline(any());\n\n    Assertions.assertThat(captor.getValue()).hasFieldOrPropertyWithValue(\"extraHeaders\", meta);\n  }\n\n  @Test\n  void nonBlockingHasMeta() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, null);\n    RemoteFactStoreGrpc.RemoteFactStoreStub stub =\n        mock(RemoteFactStoreGrpc.RemoteFactStoreStub.class);\n    when(stub.withInterceptors(any())).thenReturn(stub);\n    underTest.configure(stub);\n    ArgumentCaptor<ClientInterceptor> captor = ArgumentCaptor.forClass(ClientInterceptor.class);\n    verify(stub).withInterceptors(captor.capture());\n    verify(stub, never()).withDeadline(any());\n\n    Assertions.assertThat(captor.getValue()).hasFieldOrPropertyWithValue(\"extraHeaders\", meta);\n  }\n\n  @Test\n  void withCredentials() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, creds);\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub = underTest.uncompressedBlocking();\n      Assertions.assertThat(stub.getCallOptions().getCredentials()).isSameAs(creds);\n    }\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub = underTest.blocking();\n      Assertions.assertThat(stub.getCallOptions().getCredentials()).isSameAs(creds);\n    }\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreStub stub = underTest.nonBlocking();\n      Assertions.assertThat(stub.getCallOptions().getCredentials()).isSameAs(creds);\n    }\n  }\n\n  @Test\n  void withNullCompression() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, null);\n    underTest.compression(null);\n\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub = underTest.uncompressedBlocking();\n      Assertions.assertThat(stub.getCallOptions().getCompressor()).isNull();\n    }\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub = underTest.blocking();\n      Assertions.assertThat(stub.getCallOptions().getCompressor()).isNull();\n    }\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreStub stub = underTest.nonBlocking();\n      Assertions.assertThat(stub.getCallOptions().getCompressor()).isNull();\n    }\n  }\n\n  @Test\n  void withCompression() {\n    underTest = new GrpcStubsImpl(factory, CHANNEL_NAME, meta, creds);\n    underTest.compression(COMP);\n\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub = underTest.uncompressedBlocking();\n      Assertions.assertThat(stub.getCallOptions().getCompressor()).isNull();\n    }\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreBlockingStub stub = underTest.blocking();\n      Assertions.assertThat(stub.getCallOptions().getCompressor()).isEqualTo(COMP);\n    }\n    {\n      RemoteFactStoreGrpc.RemoteFactStoreStub stub = underTest.nonBlocking();\n      Assertions.assertThat(stub.getCallOptions().getCompressor()).isEqualTo(COMP);\n    }\n  }\n}"
