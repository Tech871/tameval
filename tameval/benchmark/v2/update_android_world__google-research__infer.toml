[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "google-research/android_world"
sha = "05afc97ecab2ad235e2fc2a40e740f0102a3bcbc"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=android_world/agents/infer.py -m pytest -q --junit-xml=test_output.xml android_world/agents/infer_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target android_world.agents.infer --unit-test android_world.agents.infer_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target android_world/agents/infer.py --unit-test android_world/agents/infer_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 52.0
original_coverage = 63.0
mutation_kill_rate = nan
original_mutation_kill_rate = 35.0
covered_lines = [ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 36, 42, 51, 54, 55, 69, 72, 73, 87, 103, 106, 114, 116, 117, 126, 129, 131, 141, 151, 158, 159, 160, 161, 162, 163, 170, 184, 227, 243, 254, 256, 262, 264, 265, 268, 269, 270, 272, 273, 276, 282, 285, 290, 304, 312, 313, 314, 315, 316, 321, 322, 327, 331, 332,]
missed_lines = [ 38, 39, 43, 44, 46, 47, 48, 115, 127, 128, 137, 142, 143, 147, 149, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 204, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 225, 232, 233, 234, 235, 236, 237, 238, 239, 240, 263, 266, 267, 274, 280, 305, 333, 335, 336, 337, 338, 339, 340,]

[input_info]
test_file_path = "android_world/agents/infer_test.py"
focal_file_path = "android_world/agents/infer.py"
test_file_url = "https://github.com/google-research/android_world/blob/05afc97ecab2ad235e2fc2a40e740f0102a3bcbc/android_world/agents/infer_test.py"
focal_file_url = "https://github.com/google-research/android_world/blob/05afc97ecab2ad235e2fc2a40e740f0102a3bcbc/android_world/agents/infer.py"
first_commit_date = "2024-05-16"
last_commit_date = "2025-06-02"
test_file_content = "# Copyright 2024 The android_world Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport time\nfrom unittest import mock\nfrom absl.testing import absltest\nfrom android_world.agents import infer\nimport google.ai.generativelanguage as glm\nimport google.generativeai as genai\nfrom google.generativeai.types import generation_types\nimport requests\n\n\nclass InferTest(absltest.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    self.mock_post = mock.patch.object(requests, \"post\").start()\n    self.mock_sleep = mock.patch.object(time, \"sleep\").start()\n    os.environ[\"OPENAI_API_KEY\"] = \"fake_api_key\"\n    os.environ[\"GCP_API_KEY\"] = \"fake_api_key\"\n\n  def tearDown(self):\n    super().tearDown()\n    mock.patch.stopall()\n\n  @mock.patch.object(genai.GenerativeModel, \"generate_content\")\n  def test_gemini_gcp(self, mock_generate_content):\n    mock_generate_content.return_value = (\n        generation_types.GenerateContentResponse.from_response(\n            glm.GenerateContentResponse({\n                \"candidates\": (\n                    [{\"content\": {\"parts\": [{\"text\": \"fake response\"}]}}]\n                )\n            })\n        )\n    )\n    llm = infer.GeminiGcpWrapper(model_name=\"some_gemini_model\")\n    text_output, _ = llm.predict_mm(\"fake prompt\", [])\n    self.assertEqual(text_output, \"fake response\")\n\n  def test_gpt4v(self):\n    llm = infer.Gpt4Wrapper(model_name=\"gpt-4-turbo-2024-04-09\")\n    mock_200_response = requests.Response()\n    mock_200_response.status_code = 200\n    mock_200_response._content = (\n        b'{\"choices\": [{\"message\": {\"content\": \"fake response\"}}]}'\n    )\n    self.mock_post.return_value = mock_200_response\n\n    text_output, _ = llm.predict_mm(\"fake prompt\", [])\n    self.assertEqual(text_output, \"fake response\")\n\n  def test_gpt4v_retry(self):\n    gpt4v = infer.Gpt4Wrapper(model_name=\"gpt-4-turbo-2024-04-09\")\n\n    mock_429_response = requests.Response()\n    mock_429_response.status_code = 429\n    mock_429_response._content = (\n        b'{\"error\": {\"message\": \"Error 429: rate limit reached.\"}}'\n    )\n\n    mock_200_response = requests.Response()\n    mock_200_response.status_code = 200\n    mock_200_response._content = (\n        b'{\"choices\": [{\"message\": {\"content\": \"ok.\"}}]}'\n    )\n    self.mock_post.side_effect = [mock_429_response, mock_200_response]\n\n    _, _ = gpt4v.predict_mm(\"fake prompt\", [])\n    self.mock_sleep.assert_called_once()\n\n\nif __name__ == \"__main__\":\n  absltest.main()"
