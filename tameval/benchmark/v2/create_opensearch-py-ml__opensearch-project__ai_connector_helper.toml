[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.10"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "opensearch-project/opensearch-py-ml"
sha = "899cb82c8a383925501258dd30098bfa612e8af5"

[run_info]
docker_image = "python:3.10"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-dev.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=opensearch_py_ml/ml_commons/cli/ai_connector_helper.py -m pytest -q --junit-xml=test_output.xml tests/cli/test_ai_connector_helper.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target opensearch_py_ml.ml_commons.cli.ai_connector_helper --unit-test tests.cli.test_ai_connector_helper --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target opensearch_py_ml/ml_commons/cli/ai_connector_helper.py --unit-test tests/cli/test_ai_connector_helper.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 59.0
original_coverage = 98.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 25, 28, 29, 32, 35, 40, 41, 43, 106, 107, 167, 178, 181, 185, 186, 193, 195, 219, 220, 226, 227, 229, 235, 237, 238, 241, 242, 243, 245, 254, 255, 258, 262, 289, 307, 324, 326, 330, 333, 344, 346, 347, 351, 352, 355, 358, 385, 391, 392, 393, 400, 401, 408, 410, 426, 427, 430, 435, 436, 439, 440, 442, 457, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 484, 485, 486, 488, 515, 516, 519, 520, 521, 524, 537, 543, 548, 551, 560,]
missed_lines = [ 59, 60, 61, 62, 64, 65, 66, 69, 76, 79, 82, 94, 95, 96, 98, 102, 131, 133, 139, 140, 141, 142, 145, 148, 156, 157, 158, 161, 162, 163, 164, 165, 182, 236, 248, 249, 251, 275, 276, 282, 283, 284, 285, 299, 300, 305, 325, 327, 335, 336, 341, 356, 364, 374, 375, 376, 380, 381, 382, 383, 431, 451, 454, 455, 483, 517, 585, 591, 596, 599,]

[input_info]
test_file_path = "tests/cli/test_ai_connector_helper.py"
focal_file_path = "opensearch_py_ml/ml_commons/cli/ai_connector_helper.py"
test_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/tests/cli/test_ai_connector_helper.py"
focal_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/opensearch_py_ml/ml_commons/cli/ai_connector_helper.py"
first_commit_date = "2025-04-25"
last_commit_date = "2025-05-06"
test_file_content = "# SPDX-License-Identifier: Apache-2.0\n# The OpenSearch Contributors require contributions made to\n# this file be licensed under the Apache-2.0 license or a\n# compatible open source license.\n# Any modifications Copyright OpenSearch Contributors. See\n# GitHub history for details.\n\nimport json\nimport unittest\nfrom unittest.mock import MagicMock, call, patch\nfrom urllib.parse import urlparse\n\nfrom colorama import Fore, Style\nfrom opensearchpy import RequestsHttpConnection\n\nfrom opensearch_py_ml.ml_commons.cli.ai_connector_helper import AIConnectorHelper\nfrom opensearch_py_ml.ml_commons.cli.aws_config import AWSConfig\nfrom opensearch_py_ml.ml_commons.cli.opensearch_domain_config import (\n    OpenSearchDomainConfig,\n)\n\nclass TestAIConnectorHelper(unittest.TestCase):\n    def setUp(self):\n        # Create OpenSearchDomainConfig\n        self.opensearch_config = OpenSearchDomainConfig(\n            opensearch_domain_region=\"us-east-1\",\n            opensearch_domain_name=\"test-domain\",\n            opensearch_domain_username=\"admin\",\n            opensearch_domain_password=\"password\",\n            opensearch_domain_endpoint=\"https://localhost:9200\",\n        )\n        # Create AWSConfig\n        self.aws_config = AWSConfig(\n            aws_user_name=\"test-user\",\n            aws_role_name=\"test-role\",\n            aws_access_key=\"test-access-key\",\n            aws_secret_access_key=\"test-secret-access-key\",\n            aws_session_token=\"test-session-token\",\n        )\n        self.service_type = AIConnectorHelper.AMAZON_OPENSEARCH_SERVICE\n        self.ssl_check_enabled = True\n        self.domain_arn = \"test-domain-arn\"\n        self.test_data = {\n            \"secret_name\": \"test-secret\",\n            \"secret_value\": \"test-secret-value\",\n            \"connector_role_name\": \"test-connector-role\",\n            \"create_connector_role_name\": \"test-create-connector-role\",\n            \"create_connector_input\": {\"test\": \"payload\"},\n            \"secret_arn\": \"test-secret-arn\",\n            \"connector_role_arn\": \"test-connector-role-arn\",\n            \"create_connector_role_arn\": \"test-create-connector-role-arn\",\n            \"connector_id\": \"test-connector-id\",\n            \"connector_role_inline_policy\": {\"test\": \"policy\"},\n        }\n        # Create and start the patcher\n        self.opensearch_patcher = patch(\n            \"opensearch_py_ml.ml_commons.cli.ai_connector_helper.OpenSearch\"\n        )\n        self.mock_opensearch = self.opensearch_patcher.start()\n\n        # Set up mock objects\n        self.mock_opensearch_client = MagicMock()\n        self.mock_opensearch_client.transport = MagicMock()\n\n        # Create AIConnectorHelper instance with mocked dependencies\n        with patch.object(AIConnectorHelper, \"__init__\", return_value=None):\n            self.helper = AIConnectorHelper()\n            self.helper.opensearch_client = self.mock_opensearch_client\n            self.helper.aws_config = self.aws_config\n            self.helper.opensearch_domain_arn = self.domain_arn\n\n    @patch.object(AIConnectorHelper, \"iam_helper\", create=True)\n    def test_get_ml_auth_success(self, mock_iam_helper):\n        \"\"\"Test get_ml_auth successful\"\"\"\n        # Mock the get_role_arn to return a role ARN\n        create_connector_role_name = \"test-create-connector-role\"\n        create_connector_role_arn = (\n            \"arn:aws:iam::123456789012:role/test-create-connector-role\"\n        )\n        mock_iam_helper.get_role_arn.return_value = create_connector_role_arn\n\n        # Mock the assume_role to return temp credentials\n        temp_credentials = {\n            \"credentials\": {\n                \"AccessKeyId\": \"test-access-key\",\n                \"SecretAccessKey\": \"test-secret-key\",\n                \"SessionToken\": \"test-session-token\",\n            }\n        }\n        mock_iam_helper.assume_role.return_value = temp_credentials\n\n        # Instantiate helper\n        with patch.object(AIConnectorHelper, \"__init__\", return_value=None):\n            helper = AIConnectorHelper()\n            helper.opensearch_config = self.opensearch_config\n            helper.iam_helper = mock_iam_helper\n            helper.opensearch_domain_arn = self.domain_arn\n\n            # Call the method\n            awsauth = helper.get_ml_auth(create_connector_role_name)\n\n            # Assert that the IAM helper methods were called\n            mock_iam_helper.get_role_arn.assert_called_with(create_connector_role_name)\n            mock_iam_helper.assume_role.assert_called_with(create_connector_role_arn)\n\n            # Since AWS4Auth is instantiated within the method, we can check if awsauth is not None\n            self.assertIsNotNone(awsauth)\n\n    def test_create_connector_open_source(self):\n        \"\"\"Test create_connector in open-source service\"\"\"\n        # Mock create_connector response\n        mock_response = {\"connector_id\": \"test-connector-id\"}\n        self.mock_opensearch_client.plugins.ml.create_connector.return_value = (\n            mock_response\n        )\n\n        # Instantiate helper\n        with patch.object(AIConnectorHelper, \"__init__\", return_value=None):\n            helper = AIConnectorHelper()\n            helper.ssl_check_enabled = self.ssl_check_enabled\n            helper.service_type = AIConnectorHelper.OPEN_SOURCE\n            helper.opensearch_config = self.opensearch_config\n            helper.opensearch_config.opensearch_domain_endpoint = (\n                \"https://localhost:9200\"\n            )\n            helper.opensearch_client = self.mock_opensearch_client\n\n            # Call the method\n            body = {\"key\": \"value\"}\n            connector_id = helper.create_connector(None, body)\n\n            # Assert correct call to create_connector\n            self.mock_opensearch_client.plugins.ml.create_connector.assert_called_once_with(\n                body={\"key\": \"value\"},\n                headers={\"Content-Type\": \"application/json\"},\n            )\n\n            # Assert that the connector_id is returned\n            self.assertEqual(connector_id, \"test-connector-id\")\n\n    def test_register_model_task_response(self):\n        \"\"\"Test register_model when model_id comes from task response\"\"\"\n        # Mock register_model response\n        self.mock_opensearch_client.plugins.ml.register_model.return_value = {\n            \"task_id\": \"test-task-id\"\n        }\n\n        # Mock the get_task response\n        self.mock_opensearch_client.plugins.ml.get_task.return_value = {\n            \"model_id\": \"test-model-id\"\n        }\n\n        # Call the method\n        model_id = self.helper.register_model(\n            \"test-model\",\n            \"test description\",\n            \"test-connector-id\",\n            deploy=True,\n        )\n\n        # Assert correct call to register_model\n        self.mock_opensearch_client.plugins.ml.register_model.assert_called_once_with(\n            body={\n                \"name\": \"test-model\",\n                \"function_name\": \"remote\",\n                \"description\": \"test description\",\n                \"connector_id\": \"test-connector-id\",\n            },\n            params={\"deploy\": \"true\"},\n            headers={\"Content-Type\": \"application/json\"},\n        )\n        # Assert get_task was called correctly\n        self.mock_opensearch_client.plugins.ml.get_task.assert_called_once_with(\n            \"test-task-id\"\n        )\n\n        # Assert that model_id is returned\n        self.assertEqual(model_id, \"test-model-id\")\n\n    def test_register_model_no_model_id(self):\n        \"\"\"Test register_model when no model_id is returned from task response\"\"\"\n        # Mock register_model response\n        self.mock_opensearch_client.plugins.ml.register_model.return_value = {\n            \"task_id\": \"test-task-id\"\n        }\n\n        # Mock the get_task response\n        self.mock_opensearch_client.plugins.ml.get_task.return_value = {\n            \"status\": \"COMPLETED\"\n        }\n\n        # Verify KeyError is raised when no model_id is found\n        with self.assertRaises(KeyError) as context:\n            self.helper.register_model(\n                \"test-model\",\n                \"test description\",\n                \"test-connector-id\",\n                deploy=True,\n            )\n\n        # Verify error message\n        self.assertIn(\"'model_id' not found in task response\", str(context.exception))\n\n    @patch.object(AIConnectorHelper, \"iam_helper\", create=True)\n    @patch(\"builtins.print\")\n    def test_configure_iam_role_existing_role(self, mock_print, mock_iam_helper):\n        \"\"\"Test _configure_iam_role when role exists\"\"\"\n        # Mock IAM helper to indicate roles exist\n        mock_iam_helper.role_exists.return_value = True\n        mock_iam_helper.get_role_arn.return_value = self.test_data[\"connector_role_arn\"]\n\n        # Execute\n        self.helper._configure_iam_role(\n            \"1\",\n            self.test_data[\"connector_role_arn\"],\n            self.test_data[\"create_connector_role_name\"],\n        )\n\n        # Verify\n        mock_print.assert_any_call(\n            \"test-create-connector-role role exists, skipping creation.\"\n        )\n        mock_iam_helper.get_role_arn.assert_called_once()\n\n    @patch.object(AIConnectorHelper, \"create_connector\", create=True)\n    @patch(\"builtins.print\")\n    @patch(\"time.sleep\")\n    def test_create_connector_with_credentials(\n        self, mock_sleep, mock_print, mock_create_connector\n    ):\n        \"\"\"Test _create_connector_with_credentials\"\"\"\n        # Execute\n        wait_time = 5\n        self.helper._create_connector_with_credentials(\n            \"1\",\n            self.test_data[\"create_connector_input\"],\n            self.test_data[\"create_connector_role_name\"],\n            self.test_data[\"connector_role_arn\"],\n            wait_time,\n            self.test_data[\"secret_arn\"],\n        )\n\n        # Verify\n        self.assertEqual(mock_sleep.call_count, wait_time)\n        expected_print_calls = [\n            call(f\"\\rTime remaining: {i} seconds...\", end=\"\", flush=True)\n            for i in range(wait_time, 0, -1)\n        ]\n        mock_print.assert_has_calls(expected_print_calls)\n        mock_create_connector.assert_called_once()\n\n    @patch.object(AIConnectorHelper, \"secret_helper\", create=True)\n    @patch.object(AIConnectorHelper, \"_create_iam_role\")\n    @patch.object(AIConnectorHelper, \"_configure_iam_role\")\n    @patch.object(AIConnectorHelper, \"_map_iam_role\")\n    @patch.object(AIConnectorHelper, \"_create_connector_with_credentials\")\n    def test_create_connector_with_existing_secret(\n        self,\n        mock_create_connector,\n        mock_map_role,\n        mock_configure_role,\n        mock_create_iam_role,\n        mock_secret_helper,\n    ):\n        \"\"\"Test create_connector_with_secret method with existing secret\"\"\"\n        # Mock  methods\n        mock_secret_helper.secret_exists.return_value = True\n        mock_secret_helper.get_secret_arn.return_value = self.test_data[\"secret_arn\"]\n\n        mock_create_iam_role.return_value = self.test_data[\"connector_role_arn\"]\n        mock_configure_role.return_value = self.test_data[\"create_connector_role_arn\"]\n        mock_create_connector.return_value = (\n            \"test-connector-id\",\n            self.test_data[\"connector_role_arn\"],\n        )\n\n        # Execute\n        connector_id, role_arn = self.helper.create_connector_with_secret(\n            self.test_data[\"secret_name\"],\n            self.test_data[\"secret_value\"],\n            self.test_data[\"connector_role_name\"],\n            self.test_data[\"create_connector_role_name\"],\n            self.test_data[\"create_connector_input\"],\n            sleep_time_in_seconds=5,\n        )\n        # Verify secret handling\n        mock_secret_helper.secret_exists.assert_called_once_with(\n            self.test_data[\"secret_name\"]\n        )\n        mock_secret_helper.create_secret.assert_not_called()\n        mock_secret_helper.get_secret_arn.assert_called_once_with(\n            self.test_data[\"secret_name\"]\n        )\n\nif __name__ == \"__main__\":\n    unittest.main()\n\n# def setUp(self):\n#     \"\"\"Set up test fixtures.\"\"\"\n#     # Create mock OpenSearch client\n#     self.mock_opensearch_client = Mock()\n\n#     # Create helper instance with mock client\n#     self.helper = AIConnectorHelper()\n#     self.helper.opensearch_client = self.mock_opensearch_client\n\n# @patch.object(AIConnectorHelper, \"get_task\")\n# def test_register_model_error_response(self, mock_get_task):\n#     \"\"\"Test register_model when error is in response\"\"\"\n#     # Mock error response\n#     self.mock_opensearch_client.plugins.ml.register_model.return_value = {\n#         \"error\": \"test error\"\n#     }\n\n#     # Call the method and assert it raises exception\n#     with self.assertRaises(Exception) as context:\n#         self.helper.register_model(\n#             \"test-model\",\n#             \"test description\",\n#             \"test-connector-id\",\n#             deploy=True,\n#         )\n\n#     self.assertEqual(str(context.exception), \"Error registering model: test error\")\n\n# @patch.object(AIConnectorHelper, \"get_task\")\n# def test_register_model_invalid_response(self, mock_get_task):\n#     \"\"\"Test register_model when response is invalid\"\"\"\n#     # Mock invalid response\n#     self.mock_opensearch_client.plugins.ml.register_model.return_value = {\n#         \"invalid\": \"response\"\n#     }\n\n#     # Call the method and assert it raises exception\n#     with self.assertRaises(KeyError) as context:\n#         self.helper.register_model(\n#             \"test-model\",\n#             \"test description\",\n#             \"test-connector-id\",\n#             deploy=True,\n#         )\n\n#     self.assertEqual(\n#         str(context.exception),\n#         \"'The response does not contain \\\\'model_id\\\\' or \\\\'task_id\\\\'. Response content: {\\\\'invalid\\\\': \\\\'response\\\\'}'\"\n#     )\n\n# def test_register_model_direct_model_id(self):\n#     \"\"\"Test register_model when model_id is directly in response\"\"\"\n#     # Mock direct model_id response\n#     self.mock_opensearch_client.plugins.ml.register_model.return_value = {\n#         \"model_id\": \"test-model-id\"\n#     }\n\n#     # Call the method\n#     model_id = self.helper.register_model(\n#         \"test-model\",\n#         \"test description\",\n#         \"test-connector-id\",\n#         deploy=True,\n#     )\n\n#     # Assert correct call to register_model\n#     self.mock_opensearch_client.plugins.ml.register_model.assert_called_once_with(\n#         body={\n#             \"name\": \"test-model\",\n#             \"function_name\": \"remote\",\n#             \"description\": \"test description\",\n#             \"connector_id\": \"test-connector-id\",\n#         },\n#         params={\"deploy\": \"true\"},\n#         headers={\"Content-Type\": \"application/json\"},\n#     )\n\n#     # Assert that model_id is returned\n#     self.assertEqual(model_id, \"test-model-id\")\n"
