[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "UiPath/uipathcli"
sha = "f599d0fbb2bbbb5d055d76ba5f1f68f727e97612"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out utils/stream/file_stream.go utils/stream/file_stream_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting utils/stream/file_stream.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 33.0
original_coverage = 67.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 8.0
covered_lines = [ 23, 24, 31, 45, 46, 47, 48, 49, 50,]
missed_lines = [ 19, 20, 21, 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42,]

[input_info]
test_file_path = "utils/stream/file_stream_test.go"
focal_file_path = "utils/stream/file_stream.go"
test_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/utils/stream/file_stream_test.go"
focal_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/utils/stream/file_stream.go"
first_commit_date = "2025-01-23"
last_commit_date = "2025-01-23"
test_file_content = "package stream\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n)\n\n\nfunc TestFileStreamSize(t *testing.T) {\n\tpath := createFile(t, \"my-file.txt\", \"hello-world\")\n\tparam := NewFileStream(path)\n\n\tsize, err := param.Size()\n\n\tif size != int64(len(\"hello-world\")) {\n\t\tt.Errorf(\"Did not return correct file size, but got: %v\", size)\n\t}\n\tif err != nil {\n\t\tt.Errorf(\"Should not return error, but got: %v\", err)\n\t}\n}\n\n\n\nfunc createFile(t *testing.T, name string, content string) string {\n\tpath := filepath.Join(t.TempDir(), name)\n\terr := os.WriteFile(path, []byte(content), 0600)\n\tif err != nil {\n\t\tt.Fatal(fmt.Errorf(\"Error writing file '%s': %w\", path, err))\n\t}\n\treturn path\n}\n"
