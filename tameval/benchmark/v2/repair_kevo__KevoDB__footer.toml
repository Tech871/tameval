[meta]
task = "repair"
scenario = "repair_syntax_error"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "KevoDB/kevo"
sha = "a0bcddabc1700e19208bd8adb99211654de65bc8"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/sstable/footer/footer.go pkg/sstable/footer/footer_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/sstable/footer/footer.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 90.0
mutation_kill_rate = nan
original_mutation_kill_rate = 66.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/sstable/footer/footer_test.go"
focal_file_path = "pkg/sstable/footer/footer.go"
test_file_url = "https://github.com/KevoDB/kevo/blob/a0bcddabc1700e19208bd8adb99211654de65bc8/pkg/sstable/footer/footer_test.go"
focal_file_url = "https://github.com/KevoDB/kevo/blob/a0bcddabc1700e19208bd8adb99211654de65bc8/pkg/sstable/footer/footer.go"
first_commit_date = "2025-04-20"
last_commit_date = "2025-04-24"
test_file_content = "package footer\n\nimport (\n\t\"bytes\"\n\t\"encoding/binary\"\n\t\"testing\"\n)\n\nfunc TestFooterEncodeDecode(t *testing.T) {\n\tf := NewFooter(\n\t\t1000,\n\t\t500,\n\t\t1234,\n\t\t100,\n\t\t200,\n\t\t5000,\n\t\t300,\n\t)\n\tencoded := f.Encode()\n\tif len(encoded) != FooterSize {\n\t\tt.Errorf(\"Encoded footer size is %d, expected %d\", len(encoded), FooterSize)\n\t}\n\tdecoded, err := Decode(encoded)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to decode footer: %v\", err)\n\t}\n\tif decoded.Magic != f.Magic {\n\t\tt.Errorf(\"Magic mismatch: got %d, expected %d\", decoded.Magic, f.Magic)\n\t}\n\n\tif decoded.Version != f.Version {\n\t\tt.Errorf(\"Version mismatch: got %d, expected %d\", decoded.Version, f.Version)\n\t}\n\n\tif decoded.Timestamp != f.Timestamp {\n\t\tt.Errorf(\"Timestamp mismatch: got %d, expected %d\", decoded.Timestamp, f.Timestamp)\n\t}\n\n\tf decoded.IndexOffset != f.IndexOffset {\n\t\tt.Errorf(\"IndexOffset mismatch: got %d, expected %d\", decoded.IndexOffset, f.IndexOffset)\n\t}\n\n\tif decoded.IndexSize != f.IndexSize {\n\t\tt.Errorf(\"IndexSize mismatch: got %d, expected %d\", decoded.IndexSize, f.IndexSize)\n\t}\n\n\tif decoded.NumEntries != f.NumEntries {\n\t\tt.Errorf(\"NumEntries mismatch: got %d, expected %d\", decoded.NumEntries, f.NumEntries)\n\t}\n\n\tif decoded.MinKeyOffset != f.MinKeyOffset {\n\t\tt.Errorf(\"MinKeyOffset mismatch: got %d, expected %d\", decoded.MinKeyOffset, f.MinKeyOffset)\n\t}\n\n\tif decoded.MaxKeyOffset != f.MaxKeyOffset {\n\t\tt.Errorf(\"MaxKeyOffset mismatch: got %d, expected %d\", decoded.MaxKeyOffset, f.MaxKeyOffset)\n\t}\n\n\tif decoded.Checksum != f.Checksum {\n\t\tt.Errorf(\"Checksum mismatch: got %d, expected %d\", decoded.Checksum, f.Checksum)\n\t}\n}\n\nfunc TestFooterWriteTo(t *testing.T) {\n\tf := NewFooter(\n\t\t1000,\n\t\t500,\n\t\t1234,\n\t\t100,\n\t\t200,\n\t\t5000,\n\t\t300,\n\t)\n\tvar buf bytes.Buffer\n\tn, err := f.WriteTo(&buf)\n\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to write footer: %v\", err)\n\t}\n\n\tif n != int64(FooterSize) {\n\t\tt.Errorf(\"WriteTo wrote %d bytes, expected %d\", n, FooterSize)\n\t}\n\tdata := buf.Bytes()\n\tdecoded, err := Decode(data)\n\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to decode footer: %v\", err)\n\t}\n\n\tif decoded.Magic != f.Magic {\n\t\tt.Errorf(\"Magic mismatch after write/read\")\n\t}\n\n\tif decoded.NumEntries != f.NumEntries {\n\t\tt.Errorf(\"NumEntries mismatch after write/read\")\n\t}\n}\n\nfunc TestFooterCorruption(t *testing.T) {\n\tf := NewFooter(\n\t\t1000,\n\t\t500,\n\t\t1234,\n\t\t100,\n\t\t200,\n\t\t5000,\n\t\t300,\n\t)\n\tencoded := f.Encode()\n\tcorruptedMagic := make([]byte, len(encoded))\n\tcopy(corruptedMagic, encoded)\n\tbinary.LittleEndian.PutUint64(corruptedMagic[0:], 0x1234567812345678)\n\n\t_, err := Decode(corruptedMagic)\n\tif err == nil {\n\t\tt.Errorf(\"Expected error when decoding footer with corrupt magic, but got none\")\n\t}\n\tcorruptedChecksum := make([]byte, len(encoded))\n\tcopy(corruptedChecksum, encoded)\n\tbinary.LittleEndian.PutUint64(corruptedChecksum[44:], 0xBADBADBADBADBAD)\n\n\t_, err = Decode(corruptedChecksum)\n\tif err == nil {\n\t\tt.Errorf(\"Expected error when decoding footer with corrupt checksum, but got none\")\n\t}\n\ttruncated := encoded[:FooterSize-1]\n\t_, err = Decode(truncated)\n\tif err == nil {\n\t\tt.Errorf(\"Expected error when decoding truncated footer, but got none\")\n\t}\n}\n\nfunc TestFooterVersionCheck(t *testing.T) {\n\tf := NewFooter(1000, 500, 1234, 100, 200, 5000, 300)\n\tf.Version = 9999\n\tencoded := f.Encode()\n\tdecoded, err := Decode(encoded)\n\tif err != nil {\n\t\tt.Errorf(\"Unexpected error decoding footer with unknown version: %v\", err)\n\t}\n\n\tif decoded.Version != 9999 {\n\t\tt.Errorf(\"Expected version 9999, got %d\", decoded.Version)\n\t}\n}"
