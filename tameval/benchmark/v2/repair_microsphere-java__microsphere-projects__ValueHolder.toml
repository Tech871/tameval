[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-java"
sha = "0d031dbf7b6729e10550725b08238918a4ceeca8"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-java-core -Dtest=ValueHolderTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-java-core -DtargetClasses=**.ValueHolder  -DtargetTests=**.ValueHolderTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-java-core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-java-core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 94.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "microsphere-java-core/src/test/java/io/microsphere/util/ValueHolderTest.java"
focal_file_path = "microsphere-java-core/src/main/java/io/microsphere/util/ValueHolder.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/0d031dbf7b6729e10550725b08238918a4ceeca8/microsphere-java-core/src/test/java/io/microsphere/util/ValueHolderTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/0d031dbf7b6729e10550725b08238918a4ceeca8/microsphere-java-core/src/main/java/io/microsphere/util/ValueHolder.java"
first_commit_date = "2024-06-22"
last_commit_date = "2025-07-03"
test_file_content = "\n\nimport org.junit.jupiter.api.Test;\n\nimport static io.microsphere.util.ValueHolder.of;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\n\nclass ValueHolderTest {\n\n    @Test\n    void testValueHolder() {\n        ValueHolder valueHolder = new ValueHolder();\n        assertNull(valueHolder.getValue());\n        String initialValue = \"initial value\";\n        valueHolder = new ValueHolder(initialValue);\n        assertEquals(initialValue, valueHolder.getValue());\n    }\n\n    @Test\n    void testSetValue() {\n        ValueHolder valueHolder = new ValueHolder();\n        String newValue = \"new value\";\n        valueHolder.setValue(newValue);\n        assertEquals(newValue, valueHolder.getValue());\n    }\n\n    @Test\n    void testGetValue() {\n        ValueHolder valueHolder = of(\"initial value\");\n        assertEquals(\"initial value\", valueHolder.getValue());\n    }\n\n    @Test\n    void testReset() {\n        ValueHolder valueHolder = of(1);\n        valueHolder.reset();\n        assertNull(valueHolder.getValue());\n    }\n\n\n    @Test\n    void testToString() {\n        ValueHolder valueHolder = of(1);\n        assertEquals(\"ValueHolder{value=1}\", valueHolder.toString());\n    }\n\n    @Test\n    void testEquals() {\n        ValueHolder valueHolder = of(1);\n        assertEquals(valueHolder, valueHolder);\n        assertNotEquals(1, valueHolder);\n        assertEquals(of(1), valueHolder);\n        assertEquals(of(\"A\"), of(\"A\"));\n        assertEquals(of(null), of(null));\n    }\n\n    @Test\n    void testHashCode() {\n        assertEquals(1, of(1).hashCode());\n        assertEquals(\"A\".hashCode(), of(\"A\").hashCode());\n        assertEquals(0, of(null).hashCode());\n    }\n}"
