[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "networknt/json-schema-validator"
sha = "a8bda4c9f43f17f657513083c0ae6f9690e51b9b"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ItemsValidator202012Test && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ItemsValidator202012  -DtargetTests=**.ItemsValidator202012Test  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 52.0
original_coverage = 52.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 33, 39, 43, 46, 47, 48, 49, 50, 56, 62, 67, 70, 71, 72, 73, 74, 76, 77, 78, 87, 90, 91, 93, 95, 97, 98, 115, 117, 150, 154, 171, 173, 179, 180, 182, 184, 192, 200, 201, 202, 205, 209, 210, 212,]
missed_lines = [ 52, 55, 58, 61, 82, 83, 84, 85, 100, 101, 102, 103, 106, 108, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 132, 134, 135, 138, 139, 141, 142, 143, 144, 147, 158, 159, 160, 161, 162, 165, 195,]

[input_info]
test_file_path = "src/test/java/com/networknt/schema/ItemsValidator202012Test.java"
focal_file_path = "src/main/java/com/networknt/schema/ItemsValidator202012.java"
test_file_url = "https://github.com/networknt/json-schema-validator/blob/a8bda4c9f43f17f657513083c0ae6f9690e51b9b/src/test/java/com/networknt/schema/ItemsValidator202012Test.java"
focal_file_url = "https://github.com/networknt/json-schema-validator/blob/a8bda4c9f43f17f657513083c0ae6f9690e51b9b/src/main/java/com/networknt/schema/ItemsValidator202012.java"
first_commit_date = "2023-04-17"
last_commit_date = "2024-11-18"
test_file_content = "/*\n * Copyright (c) 2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.networknt.schema.SpecVersion.VersionFlag;\nimport com.networknt.schema.walk.JsonSchemaWalkListener;\nimport com.networknt.schema.walk.WalkEvent;\nimport com.networknt.schema.walk.WalkFlow;\n\n/**\n * ItemsValidatorTest.\n */\nclass ItemsValidator202012Test {\n    /**\n     * Tests that the message contains the correct values when there are invalid\n     * items.\n     */\n    @Test\n    void messageInvalid() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"$id\\\": \\\"https://www.example.org/schema\\\",\\r\\n\"\n                + \"  \\\"items\\\": {\\\"type\\\": \\\"integer\\\"}\"\n                + \"}\";\n        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(VersionFlag.V202012);\n        SchemaValidatorsConfig config = SchemaValidatorsConfig.builder().build();\n        JsonSchema schema = factory.getSchema(schemaData, config);\n        String inputData = \"[1, \\\"x\\\"]\";\n        Set<ValidationMessage> messages = schema.validate(inputData, InputFormat.JSON);\n        assertFalse(messages.isEmpty());\n        ValidationMessage message = messages.iterator().next();\n        assertEquals(\"/items/type\", message.getEvaluationPath().toString());\n        assertEquals(\"https://www.example.org/schema#/items/type\", message.getSchemaLocation().toString());\n        assertEquals(\"/1\", message.getInstanceLocation().toString());\n        assertEquals(\"\\\"integer\\\"\", message.getSchemaNode().toString());\n        assertEquals(\"\\\"x\\\"\", message.getInstanceNode().toString());\n        assertEquals(\"/1: string found, integer expected\", message.getMessage());\n        assertNull(message.getProperty());\n    }\n\n    @Test\n    void walkNull() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"items\\\": {\\r\\n\"\n                + \"    \\\"type\\\": \\\"string\\\"\\r\\n\"\n                + \"  }\\r\\n\"\n                + \"}\";\n        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(VersionFlag.V202012);\n        SchemaValidatorsConfig config = SchemaValidatorsConfig.builder().itemWalkListener(new JsonSchemaWalkListener() {\n            @Override\n            public WalkFlow onWalkStart(WalkEvent walkEvent) {\n                return WalkFlow.CONTINUE;\n            }\n\n            @Override\n            public void onWalkEnd(WalkEvent walkEvent, Set<ValidationMessage> validationMessages) {\n                @SuppressWarnings(\"unchecked\")\n                List<WalkEvent> items = (List<WalkEvent>) walkEvent.getExecutionContext()\n                        .getCollectorContext()\n                        .getCollectorMap()\n                        .computeIfAbsent(\"items\", key -> new ArrayList<JsonNodePath>());\n                items.add(walkEvent);\n            }\n        }).build();\n        JsonSchema schema = factory.getSchema(schemaData, config);\n        ValidationResult result = schema.walk(null, true);\n        assertTrue(result.getValidationMessages().isEmpty());\n        \n        @SuppressWarnings(\"unchecked\")\n        List<WalkEvent> items = (List<WalkEvent>) result.getExecutionContext().getCollectorContext().get(\"items\");\n        assertEquals(1, items.size());\n        assertEquals(\"/0\", items.get(0).getInstanceLocation().toString());\n    }\n\n    @Test\n    void walkNullPrefixItems() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"prefixItems\\\": [\\r\\n\"\n                + \"    {\\r\\n\"\n                + \"      \\\"type\\\": \\\"integer\\\"\\r\\n\"\n                + \"    }\\r\\n\"\n                + \"  ],\\r\\n\"\n                + \"  \\\"items\\\": {\\r\\n\"\n                + \"    \\\"type\\\": \\\"string\\\"\\r\\n\"\n                + \"  }\\r\\n\"\n                + \"}\";\n        JsonSchemaFactory factory = JsonSchemaFactory.getInstance(VersionFlag.V202012);\n        SchemaValidatorsConfig config = SchemaValidatorsConfig.builder().itemWalkListener(new JsonSchemaWalkListener() {\n            @Override\n            public WalkFlow onWalkStart(WalkEvent walkEvent) {\n                return WalkFlow.CONTINUE;\n            }\n\n            @Override\n            public void onWalkEnd(WalkEvent walkEvent, Set<ValidationMessage> validationMessages) {\n                @SuppressWarnings(\"unchecked\")\n                List<WalkEvent> items = (List<WalkEvent>) walkEvent.getExecutionContext()\n                        .getCollectorContext()\n                        .getCollectorMap()\n                        .computeIfAbsent(\"items\", key -> new ArrayList<JsonNodePath>());\n                items.add(walkEvent);\n            }\n        }).build();\n        JsonSchema schema = factory.getSchema(schemaData, config);\n        ValidationResult result = schema.walk(null, true);\n        assertTrue(result.getValidationMessages().isEmpty());\n        \n        @SuppressWarnings(\"unchecked\")\n        List<WalkEvent> items = (List<WalkEvent>) result.getExecutionContext().getCollectorContext().get(\"items\");\n        assertEquals(2, items.size());\n        assertEquals(\"/0\", items.get(0).getInstanceLocation().toString());\n        assertEquals(\"prefixItems\", items.get(0).getKeyword());\n        assertEquals(\"/1\", items.get(1).getInstanceLocation().toString());\n        assertEquals(\"items\", items.get(1).getKeyword());\n    }\n}\n"
