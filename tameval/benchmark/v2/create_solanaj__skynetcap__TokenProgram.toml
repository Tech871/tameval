[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "skynetcap/solanaj"
sha = "b0f095290e5a1cdd1528bb50615cc56dc0add467"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=TokenProgramTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.TokenProgram  -DtargetTests=**.TokenProgramTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 54.0
original_coverage = 54.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 16, 22, 48, 50, 51, 52, 54, 58, 163, 164, 166, 167, 169, 205, 206, 207, 210, 211, 212, 213, 215, 216, 219, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 247, 265, 266, 267, 268, 270, 271, 272, 273, 275, 345, 346, 347, 348, 350, 351, 352, 353, 355, 373, 374, 375, 376, 378, 379, 380, 381, 383, 399, 400, 401, 402, 404, 405, 407, 423, 424, 425, 426, 428, 429, 431,]
missed_lines = [ 14, 77, 94, 96, 98, 99, 100, 101, 103, 104, 107, 112, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 139, 141, 142, 143, 145, 146, 147, 149, 152, 180, 181, 183, 184, 185, 187, 209, 214, 289, 290, 291, 293, 294, 296, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 327, 437, 438, 439, 440, 441, 445, 446, 447, 450,]

[input_info]
test_file_path = "src/test/java/org/p2p/solanaj/programs/TokenProgramTest.java"
focal_file_path = "src/main/java/org/p2p/solanaj/programs/TokenProgram.java"
test_file_url = "https://github.com/skynetcap/solanaj/blob/b0f095290e5a1cdd1528bb50615cc56dc0add467/src/test/java/org/p2p/solanaj/programs/TokenProgramTest.java"
focal_file_url = "https://github.com/skynetcap/solanaj/blob/b0f095290e5a1cdd1528bb50615cc56dc0add467/src/main/java/org/p2p/solanaj/programs/TokenProgram.java"
first_commit_date = "2021-04-30"
last_commit_date = "2024-12-21"
test_file_content = "package org.p2p.solanaj.programs;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.p2p.solanaj.core.PublicKey;\nimport org.p2p.solanaj.core.TransactionInstruction;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * Test class for TokenProgram\n * \n * These tests verify the correct creation of TransactionInstructions for various\n * SPL Token operations, including initialization, transfers, and account management.\n */\npublic class TokenProgramTest {\n\n    /**\n     * Tests the initializeMint instruction creation for TokenProgram.\n     * This instruction is used to create a new SPL Token mint.\n     */\n    @Test\n    public void testInitializeMint() {\n        PublicKey mintPubkey = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        int decimals = 9;\n        PublicKey mintAuthority = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        PublicKey freezeAuthority = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n\n        TransactionInstruction instruction = TokenProgram.initializeMint(mintPubkey, decimals, mintAuthority, freezeAuthority);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(2, instruction.getKeys().size());\n        assertEquals(mintPubkey, instruction.getKeys().get(0).getPublicKey());\n        assertFalse(instruction.getKeys().get(0).isSigner());\n        assertTrue(instruction.getKeys().get(0).isWritable());\n        assertEquals(TokenProgram.SYSVAR_RENT_PUBKEY, instruction.getKeys().get(1).getPublicKey());\n\n        byte[] actualData = instruction.getData();\n        assertEquals(67, actualData.length);\n        assertEquals(0, actualData[0]);  // Instruction type: InitializeMint\n        assertEquals(9, actualData[1]);  // Decimals\n        // The next byte (actualData[2]) is part of the 64-byte authority data\n        assertEquals(-35, actualData[2]); // First byte of authority data (unsigned: 221)\n    }\n\n    /**\n     * Tests the initializeMultisig instruction creation for TokenProgram.\n     * This instruction is used to create a new multisig account for SPL Tokens.\n     */\n    @Test\n    public void testInitializeMultisig() {\n        PublicKey multisigPubkey = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        List<PublicKey> signerPubkeys = Arrays.asList(\n                new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\"),\n                new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\")\n        );\n        int m = 2;\n\n        TransactionInstruction instruction = TokenProgram.initializeMultisig(multisigPubkey, signerPubkeys, m);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(4, instruction.getKeys().size());\n        assertEquals(multisigPubkey, instruction.getKeys().get(0).getPublicKey());\n        assertFalse(instruction.getKeys().get(0).isSigner());\n        assertTrue(instruction.getKeys().get(0).isWritable());\n        assertEquals(TokenProgram.SYSVAR_RENT_PUBKEY, instruction.getKeys().get(1).getPublicKey());\n\n        byte[] expectedData = new byte[]{2, 2};  // [Instruction type: InitializeMultisig, Number of signers (m)]\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n\n    /**\n     * Tests the approve instruction creation for TokenProgram.\n     * This instruction is used to approve a delegate to transfer tokens from an account.\n     */\n    @Test\n    public void testApprove() {\n        PublicKey sourcePubkey = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        PublicKey delegatePubkey = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        PublicKey ownerPubkey = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n        long amount = 1000000000;  // 1 billion (assuming 9 decimals)\n\n        TransactionInstruction instruction = TokenProgram.approve(sourcePubkey, delegatePubkey, ownerPubkey, amount);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(3, instruction.getKeys().size());\n        assertEquals(sourcePubkey, instruction.getKeys().get(0).getPublicKey());\n        assertFalse(instruction.getKeys().get(0).isSigner());\n        assertTrue(instruction.getKeys().get(0).isWritable());\n        assertEquals(delegatePubkey, instruction.getKeys().get(1).getPublicKey());\n        assertFalse(instruction.getKeys().get(1).isSigner());\n        assertFalse(instruction.getKeys().get(1).isWritable());\n        assertEquals(ownerPubkey, instruction.getKeys().get(2).getPublicKey());\n        assertTrue(instruction.getKeys().get(2).isSigner());\n        assertFalse(instruction.getKeys().get(2).isWritable());\n\n        byte[] actualData = instruction.getData();\n        assertEquals(9, actualData.length);\n        assertEquals(4, actualData[0]);  // Instruction type: Approve\n        assertEquals(0, actualData[1]);  // First byte of amount (little-endian)\n        assertEquals(-54, actualData[2]);  // Second byte of amount (unsigned: 202)\n        // Full 8-byte representation of 1000000000: [0, 202, 154, 59, 0, 0, 0, 0]\n    }\n\n    /**\n     * Tests the transfer instruction creation for TokenProgram.\n     * This instruction is used to transfer tokens between accounts.\n     */\n    @Test\n    public void testTransfer() {\n        PublicKey source = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        PublicKey destination = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        long amount = 1000000000;  // 1 billion (assuming 9 decimals)\n        PublicKey owner = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n\n        TransactionInstruction instruction = TokenProgram.transfer(source, destination, amount, owner);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(3, instruction.getKeys().size());\n        assertEquals(source, instruction.getKeys().get(0).getPublicKey());\n        assertEquals(destination, instruction.getKeys().get(1).getPublicKey());\n        assertEquals(owner, instruction.getKeys().get(2).getPublicKey());\n\n        byte[] actualData = instruction.getData();\n        assertEquals(9, actualData.length);\n        assertEquals(3, actualData[0]);  // Instruction type: Transfer\n        assertEquals(0, actualData[1]);  // First byte of amount (little-endian)\n        assertEquals(-54, actualData[2]);  // Second byte of amount (unsigned: 202)\n        // Full 8-byte representation of 1000000000: [0, 202, 154, 59, 0, 0, 0, 0]\n    }\n\n    /**\n     * Tests the burn instruction creation for TokenProgram.\n     * This instruction is used to burn (destroy) tokens.\n     */\n    @Test\n    public void testBurn() {\n        PublicKey account = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        PublicKey mint = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        PublicKey owner = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n        long amount = 500000000;  // 500 million (assuming 9 decimals)\n\n        TransactionInstruction instruction = TokenProgram.burn(account, mint, owner, amount);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(3, instruction.getKeys().size());\n        assertEquals(account, instruction.getKeys().get(0).getPublicKey());\n        assertEquals(mint, instruction.getKeys().get(1).getPublicKey());\n        assertEquals(owner, instruction.getKeys().get(2).getPublicKey());\n\n        byte[] actualData = instruction.getData();\n        assertEquals(9, actualData.length);\n        assertEquals(8, actualData[0]);  // Instruction type: Burn\n        assertEquals(0, actualData[1]);  // First byte of amount (little-endian)\n        assertEquals(101, actualData[2]);  // Second byte of amount\n        // Full 8-byte representation of 500000000: [0, 101, 205, 29, 0, 0, 0, 0]\n    }\n\n    /**\n     * Tests the mintTo instruction creation for TokenProgram.\n     * This instruction is used to mint new tokens to an account.\n     */\n    @Test\n    public void testMintTo() {\n        PublicKey mint = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        PublicKey destination = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        PublicKey authority = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n        long amount = 750000000;  // 750 million (assuming 9 decimals)\n\n        TransactionInstruction instruction = TokenProgram.mintTo(mint, destination, authority, amount);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(3, instruction.getKeys().size());\n        assertEquals(mint, instruction.getKeys().get(0).getPublicKey());\n        assertEquals(destination, instruction.getKeys().get(1).getPublicKey());\n        assertEquals(authority, instruction.getKeys().get(2).getPublicKey());\n\n        byte[] actualData = instruction.getData();\n        assertEquals(9, actualData.length);\n        assertEquals(7, actualData[0]);  // Instruction type: MintTo\n        assertEquals(-128, actualData[1]);  // First byte of amount (unsigned: 128)\n        assertEquals(23, actualData[2]);  // Second byte of amount\n        // Full 8-byte representation of 750000000: [128, 23, 223, 44, 0, 0, 0, 0]\n    }\n\n    /**\n     * Tests the freezeAccount instruction creation for TokenProgram.\n     * This instruction is used to freeze an account, preventing transfers.\n     */\n    @Test\n    public void testFreezeAccount() {\n        PublicKey account = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        PublicKey mint = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        PublicKey authority = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n\n        TransactionInstruction instruction = TokenProgram.freezeAccount(account, mint, authority);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(3, instruction.getKeys().size());\n        assertEquals(account, instruction.getKeys().get(0).getPublicKey());\n        assertEquals(mint, instruction.getKeys().get(1).getPublicKey());\n        assertEquals(authority, instruction.getKeys().get(2).getPublicKey());\n\n        byte[] expectedData = new byte[]{0x0A};  // Instruction type: FreezeAccount\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n\n    /**\n     * Tests the thawAccount instruction creation for TokenProgram.\n     * This instruction is used to thaw a frozen account, allowing transfers.\n     */\n    @Test\n    public void testThawAccount() {\n        PublicKey account = new PublicKey(\"Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr\");\n        PublicKey mint = new PublicKey(\"FuLFkNQzNEAzZ2dEgXVUqVVLxJYLYhbSgpZf9RVVXZuT\");\n        PublicKey authority = new PublicKey(\"HNGVuL5kqjDehw7KR63w9gxow32sX6xzRNgLb8GkbwCM\");\n\n        TransactionInstruction instruction = TokenProgram.thawAccount(account, mint, authority);\n\n        assertEquals(TokenProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(3, instruction.getKeys().size());\n        assertEquals(account, instruction.getKeys().get(0).getPublicKey());\n        assertEquals(mint, instruction.getKeys().get(1).getPublicKey());\n        assertEquals(authority, instruction.getKeys().get(2).getPublicKey());\n\n        byte[] expectedData = new byte[]{0x0B};  // Instruction type: ThawAccount\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n}"
