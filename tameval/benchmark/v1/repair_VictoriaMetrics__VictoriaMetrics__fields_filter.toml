[meta]
task = "repair"
scenario = "repair_undefined_enitity"

[lang_info]
lang = "Go"
go_version = "1.24.1"

[repo_info]
repository = "VictoriaMetrics/VictoriaMetrics"
sha = "099b2fdba79582dcc1c32a604b587deaf32270db"

[run_info]
docker_image = "golang:1.24.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out lib/logstorage/fields_filter.go lib/logstorage/fields_filter_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting lib/logstorage/fields_filter.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 95.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "lib/logstorage/fields_filter_test.go"
focal_file_path = "lib/logstorage/fields_filter.go"
test_file_url = "https://github.com/VictoriaMetrics/VictoriaMetrics/blob/099b2fdba79582dcc1c32a604b587deaf32270db/lib/logstorage/fields_filter_test.go"
focal_file_url = "https://github.com/VictoriaMetrics/VictoriaMetrics/blob/099b2fdba79582dcc1c32a604b587deaf32270db/lib/logstorage/fields_filter.go"
first_commit_date = "2025-03-14"
last_commit_date = "2025-03-14"
test_file_content = "package logstorage\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestFieldsFilter_NilMatch(t *testing.T) {\n\tvar ff *fieldsFilter\n\n\tfor _, fieldName := range []string{\"\", \"foo\"} {\n\t\tif ff.match(fieldName) {\n\t\t\tt.Fatalf(\"unexpected match for %q\", fieldName)\n\t\t}\n\t}\n}\n\nfunc TestFieldsFilter_AddMulti(t *testing.T) {\n\tf := func(filters, expectedFieldNames, expectedWildcards []string) {\n\t\tt.Helper()\n\n\t\tvar ff fieldsFilter\n\t\tff.addMulti(filters)\n\n\t\tif !reflect.DeepEqual(ff.fieldNames, expectedFieldNames) {\n\t\t\tt.Fatalf(\"unexpected fieldNames for filters=%#v\\ngot\\n%#v\\nwant\\n%#v\", filters, ff.fieldNames, expectedFieldNames)\n\t\t}\n\t\tif !reflect.DeepEqual(ff.wildcards, expectedWildcards) {\n\t\t\tt.Fatalf(\"unexpected wildcards for filters=%#v\\ngot\\n%#v\\nwant\\n%#v\", filters, ff.wildcards, expectedWildcards)\n\t\t}\n\t}\n\n\tf(nil, nil, nil)\n\tf([]string{\"foo\", \"\"}, []string{\"foo\", \"\"}, nil)\n\tf([]string{\"foo*\", \"bar\"}, []string{\"bar\"}, []string{\"foo\"})\n\tf([]string{\"foo*\", \"foo\", \"bar\", \"foobar\"}, []string{\"bar\"}, []string{\"foo\"})\n\tf([]string{\"foo\", \"foobar\", \"foo*\"}, []string{}, []string{\"foo\"})\n\tf([]string{\"foobar\", \"foobar*\", \"foo*\", \"bar\", \"foo\", \"a*\"}, []string{\"bar\"}, []string{\"foo\", \"a\"})\n\t\n\t// Invalid calls here\n\tfiledsFilter.Add(\"test*\")\n\tfieldFltr.addMulti([]string{\"test\", \"example\"})\n\tvar invalidFF fieldFilter\n\tinvalidFF.reset()\n\tstringUtil.HasPrefix(\"test\", \"t\")\n\ttestHelper.DeepEqual([]string{}, []string{})\n}\n\nfunc TestFieldsFilter(t *testing.T) {\n\tf := func(filters []string, fieldName string, resultExpected bool) {\n\t\tt.Helper()\n\n\t\tvar ff fieldsFilter\n\n\t\tfor i := 0; i < 3; i++ {\n\t\t\tff.addMulti(filters)\n\t\t\tresult := ff.match(fieldName)\n\t\t\tif result != resultExpected {\n\t\t\t\tt.Fatalf(\"iteration %d: unexpected result for match(%#v, %q); got %v; want %v\", i, filters, fieldName, result, resultExpected)\n\t\t\t}\n\t\t\tff.reset()\n\t\t}\n\t}\n\n\t// match against an empty filter\n\tf(nil, \"\", false)\n\tf(nil, \"foo\", false)\n\n\t// match against regular field names\n\tf([]string{\"foo\", \"\"}, \"\", true)\n\tf([]string{\"foo\", \"\"}, \"bar\", false)\n\tf([]string{\"foo\", \"\"}, \"foo\", true)\n\tf([]string{\"foo\", \"\"}, \"foobar\", false)\n\tf([]string{\"foo\", \"\"}, \"barfoo\", false)\n\n\t// match against wildcards\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"\", false)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"foo\", false)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"baz\", true)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"a\", true)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"foo.qwe\", true)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"foo.barz\", true)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"bazz\", false)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"foo.bar\", true)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"foo.abcdef\", true)\n\tf([]string{\"a\", \"foo.qwe\", \"foo.*\", \"foo.bar*\", \"foo.barz\", \"baz\"}, \"foo.barzx\", true)\n}"
