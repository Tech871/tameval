[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/stormcrawler"
sha = "9d4b0302a7859f9f24caa1fe3cdabb498f968112"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl core -Dtest=DefaultSchedulerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl core -DtargetClasses=**.DefaultScheduler  -DtargetTests=**.DefaultSchedulerTest  -DoutputFormats=XML"
coverage_report_path = "core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 84.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "core/src/test/java/org/apache/stormcrawler/persistence/DefaultSchedulerTest.java"
focal_file_path = "core/src/main/java/org/apache/stormcrawler/persistence/DefaultScheduler.java"
test_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/test/java/org/apache/stormcrawler/persistence/DefaultSchedulerTest.java"
focal_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/main/java/org/apache/stormcrawler/persistence/DefaultScheduler.java"
first_commit_date = "2024-03-28"
last_commit_date = "2025-07-22"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stormcrawler.persistence;\n\nimport java.net.MalformedURLException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.TimeZone;\nimport org.apache.commons.lang.time.DateUtils;\nimport org.apache.stormcrawler.Metadata;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class DefaultSchedulerTest {\n    @Test\n    public void testScheduler() throws MalformedURLException {\n        Map<String, Object> stormConf = new HashMap<>();\n        stormConf.put(\"fetchInterval.FETCHED.testKey=someValue\", 360);\n        stormConf.put(\"fetchInterval.testKey=someValue\", 3600);\n        DefaultScheduler scheduler = new DefaultScheduler();\n        scheduler.init(stormConf);\n\n        Metadata metadata = new Metadata();\n        metadata.addValue(\"testKey\", \"someValue\");\n        Optional<Date> nextFetch = scheduler.schedule(Status.FETCHED, metadata);\n\n        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n        cal.add(Calendar.MINUTE, 360);\n        Assert.assertEquals(\n                DateUtils.round(cal.getTime(), Calendar.SECOND),\n                DateUtils.round(nextFetch.get(), Calendar.SECOND));\n\n        nextFetch = scheduler.schedule(Status.ERROR, metadata);\n\n        cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n        cal.add(Calendar.MINUTE, 3600);\n        Assert.assertEquals(\n                DateUtils.round(cal.getTime(), Calendar.SECOND),\n                DateUtils.round(nextFetch.get(), Calendar.SECOND));\n    }\n\n    @Test\n    public void testCustomWithDot() throws MalformedURLException {\n        Map<String, Object> stormConf = new HashMap<>();\n        stormConf.put(\"fetchInterval.FETCHED.testKey.key2=someValue\", 360);\n        DefaultScheduler scheduler = new DefaultScheduler();\n        scheduler.init(stormConf);\n\n        Metadata metadata = new Metadata();\n        metadata.addValue(\"testKey.key2\", \"someValue\");\n        Optional<Date> nextFetch = scheduler.schedule(Status.FETCHED, metadata);\n\n        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n        cal.add(Calendar.MINUTE, 360);\n        Assert.assertEquals(\n                DateUtils.round(cal.getTime(), Calendar.SECOND),\n                DateUtils.round(nextFetch.get(), Calendar.SECOND));\n    }\n\n    @Test\n    public void testBadConfig() throws MalformedURLException {\n        Map<String, Object> stormConf = new HashMap<>();\n        stormConf.put(\"fetchInterval.DODGYSTATUS.testKey=someValue\", 360);\n        DefaultScheduler scheduler = new DefaultScheduler();\n        boolean exception = false;\n        try {\n            scheduler.init(stormConf);\n        } catch (IllegalArgumentException e) {\n            exception = true;\n        }\n        Assert.assertTrue(exception);\n    }\n\n    @Test\n    public void testNever() throws MalformedURLException {\n        Map<String, Object> stormConf = new HashMap<>();\n        stormConf.put(\"fetchInterval.error\", -1);\n        DefaultScheduler scheduler = new DefaultScheduler();\n        scheduler.init(stormConf);\n\n        Metadata metadata = new Metadata();\n        Optional<Date> nextFetch = scheduler.schedule(Status.ERROR, metadata);\n\n        Assert.assertEquals(false, nextFetch.isPresent());\n    }\n\n    @Test\n    public void testSpecificNever() throws MalformedURLException {\n        Map<String, Object> stormConf = new HashMap<>();\n        stormConf.put(\"fetchInterval.FETCHED.isSpam=true\", -1);\n        DefaultScheduler scheduler = new DefaultScheduler();\n        scheduler.init(stormConf);\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"isSpam\", \"true\");\n        Optional<Date> nextFetch = scheduler.schedule(Status.FETCHED, metadata);\n\n        Assert.assertEquals(false, nextFetch.isPresent());\n    }\n}"
