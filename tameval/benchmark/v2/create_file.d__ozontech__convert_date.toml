[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "ozontech/file.d"
sha = "0b8e06edc7baa07bda8b1d7637edf1ae5108ea4b"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out plugin/action/convert_date/convert_date.go plugin/action/convert_date/convert_date_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting plugin/action/convert_date/convert_date.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 67.0
original_coverage = 67.0
mutation_kill_rate = 59.0
original_mutation_kill_rate = 59.0
covered_lines = [ 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 65, 68, 73, 76, 77, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 103, 109, 110, 111, 113,]
missed_lines = [ 62, 63, 64, 69, 70, 71, 81, 82, 83, 93, 94, 95, 96, 97, 98, 99, 100,]

[input_info]
test_file_path = "plugin/action/convert_date/convert_date_test.go"
focal_file_path = "plugin/action/convert_date/convert_date.go"
test_file_url = "https://github.com/ozontech/file.d/blob/0b8e06edc7baa07bda8b1d7637edf1ae5108ea4b/plugin/action/convert_date/convert_date_test.go"
focal_file_url = "https://github.com/ozontech/file.d/blob/0b8e06edc7baa07bda8b1d7637edf1ae5108ea4b/plugin/action/convert_date/convert_date.go"
first_commit_date = "2020-04-15"
last_commit_date = "2025-03-21"
test_file_content = "package convert_date\n\nimport (\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/ozontech/file.d/pipeline\"\n\t\"github.com/ozontech/file.d/test\"\n\t\"github.com/ozontech/file.d/xtime\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestConvert(t *testing.T) {\n\tconfig := &Config{SourceFormats: []string{\"rfc3339nano\", \"rfc3339\", \"ansic\", xtime.UnixTime, \"nginx_errorlog\"}}\n\ttest.NewConfig(config, nil)\n\n\tp, input, output := test.NewPipelineMock(test.NewActionPluginStaticInfo(factory, config, pipeline.MatchModeAnd, nil, false))\n\twg := &sync.WaitGroup{}\n\twg.Add(3)\n\n\toutEvents := make([]string, 0, 3)\n\toutput.SetOutFn(func(e *pipeline.Event) {\n\t\toutEvents = append(outEvents, e.Root.EncodeToString())\n\t\twg.Done()\n\t})\n\n\tinput.In(0, \"test.log\", test.NewOffset(0), []byte(`{\"time\":998578502}`))\n\tinput.In(0, \"test.log\", test.NewOffset(0), []byte(`{\"time\":998578999.1346}`))\n\tinput.In(0, \"test.log\", test.NewOffset(0), []byte(`{\"time\":\"2022/02/07 13:06:14\"}`))\n\n\twg.Wait()\n\tp.Stop()\n\n\tassert.Equal(t, 3, len(outEvents), \"wrong out events count\")\n\tassert.Equal(t, `{\"time\":998578502}`, outEvents[0], \"wrong out event\")\n\tassert.Equal(t, `{\"time\":998578999}`, outEvents[1], \"wrong out event\")\n\tassert.Equal(t, `{\"time\":1644239174}`, outEvents[2], \"wrong out event\")\n}\n\nfunc TestConvertFail(t *testing.T) {\n\tconfig := &Config{\n\t\tSourceFormats: []string{\"rfc3339nano\", \"rfc3339\", \"ansic\"},\n\t\tRemoveOnFail:  true,\n\t}\n\ttest.NewConfig(config, nil)\n\n\tp, input, output := test.NewPipelineMock(test.NewActionPluginStaticInfo(factory, config, pipeline.MatchModeAnd, nil, false))\n\twg := &sync.WaitGroup{}\n\twg.Add(1)\n\n\toutput.SetOutFn(func(e *pipeline.Event) {\n\t\tassert.Equal(t, `{}`, e.Root.EncodeToString(), \"wrong out event\")\n\t\twg.Done()\n\t})\n\n\tinput.In(0, \"test.log\", test.NewOffset(0), []byte(`{\"time\":\"XXX\"}`))\n\n\twg.Wait()\n\tp.Stop()\n}\n"
