[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Go"
go_version = "1.23.6"

[repo_info]
repository = "cloudprober/cloudprober"
sha = "01736e0103a53b703064edec034c30ef5e25681d"

[run_info]
docker_image = "golang:1.23.6"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out web/resources/header.go web/resources/header_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting web/resources/header.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 92.0
covered_lines = [ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 87, 90, 91, 92, 93, 94, 95, 96,]
missed_lines = [ 84, 85,]

[input_info]
test_file_path = "web/resources/header_test.go"
focal_file_path = "web/resources/header.go"
test_file_url = "https://github.com/cloudprober/cloudprober/blob/01736e0103a53b703064edec034c30ef5e25681d/web/resources/header_test.go"
focal_file_url = "https://github.com/cloudprober/cloudprober/blob/01736e0103a53b703064edec034c30ef5e25681d/web/resources/header.go"
first_commit_date = "2022-03-16"
last_commit_date = "2025-03-04"
test_file_content = "\n\npackage resources\n\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\t\"regexp\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/cloudprober/cloudprober/internal/sysvars\"\n\t\"github.com/cloudprober/cloudprober/state\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestHeader(t *testing.T) {\n\tstate.SetVersion(\"v1.0.0\")\n\tstate.SetBuildTimestamp(time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC))\n\tstate.SetDefaultHTTPServeMux(http.NewServeMux())\n\tif err := state.AddWebHandler(\"/artifacts/\", func(w http.ResponseWriter, r *http.Request) {}); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := state.AddWebHandler(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {}); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\texpected := `\n<header>\n  <a href=\"https:\n</header> \n<hr/>\n<div style=\"float:left\">\n  <b>Started</b>: 0001-01-01 00:00:00 &#43;0000 UTC -- up 2562047h47m16.854s<br/>\n  <b>Version</b>: v1.0.0<br>\n  <b>Built at</b>: 2023-10-01 12:00:00 &#43;0000 UTC<br>\n  <b>Other Links </b>(<a href=\"links\">all</a>):\n  \t<a href=\"status\">/status</a>,\n\t<a href=\"config-running\">/config</a> (<a href=\"config-parsed\">parsed</a> | <a href=\"config\">raw</a>),\n\t<a href=\"metrics\">/metrics</a>,\n\t<a href=\"artifacts\">/artifacts</a>,\n\t<a href=\"alerts\">/alerts</a>\n</div>\n`\n\n\tt.Run(\"no prefix\", func(t *testing.T) {\n\t\tassert.Equal(t, template.HTML(expected), Header(\"\"))\n\t})\n\n\tt.Run(\"with prefix\", func(t *testing.T) {\n\t\texpected = regexp.MustCompile(`href=\"([^\".]*)\"`).ReplaceAllString(expected, \"href=\\\"../../$1\\\"\")\n\t\tassert.Equal(t, template.HTML(expected), Header(\"../../\"))\n\t})\n}\n\nfunc TestHeaderData(t *testing.T) {\n\ttests := []struct {\n\t\tname                string\n\t\tversion             string\n\t\tbuildTimestamp      time.Time\n\t\tlinks               []string\n\t\twantStatusLink      string\n\t\texpectMetricsLink   bool\n\t\texpectArtifactsLink bool\n\t}{\n\t\t{\n\t\t\tname:           \"No links\",\n\t\t\tversion:        \"v1.0.0\",\n\t\t\tbuildTimestamp: time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC),\n\t\t\tlinks:          []string{},\n\t\t},\n\t\t{\n\t\t\tname:           \"Status link\",\n\t\t\tversion:        \"v1.0.0\",\n\t\t\tbuildTimestamp: time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC),\n\t\t\tlinks:          []string{\"/my/probe/status\"},\n\t\t\twantStatusLink: \"my/probe/status\",\n\t\t},\n\t\t{\n\t\t\tname:                \"Metrics link\",\n\t\t\tversion:             \"v1.0.0\",\n\t\t\tbuildTimestamp:      time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC),\n\t\t\tlinks:               []string{\"/metrics\"},\n\t\t\texpectMetricsLink:   true,\n\t\t\texpectArtifactsLink: false,\n\t\t},\n\t\t{\n\t\t\tname:                \"Artifacts link\",\n\t\t\tversion:             \"v1.0.0\",\n\t\t\tbuildTimestamp:      time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC),\n\t\t\tlinks:               []string{\"/artifacts\"},\n\t\t\texpectMetricsLink:   false,\n\t\t\texpectArtifactsLink: true,\n\t\t},\n\t\t{\n\t\t\tname:                \"Both links\",\n\t\t\tversion:             \"v1.0.0\",\n\t\t\tbuildTimestamp:      time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC),\n\t\t\tlinks:               []string{\"/metrics\", \"/artifacts\"},\n\t\t\texpectMetricsLink:   true,\n\t\t\texpectArtifactsLink: true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tstate.SetVersion(tt.version)\n\t\t\tstate.SetBuildTimestamp(tt.buildTimestamp)\n\n\t\t\tstate.SetDefaultHTTPServeMux(http.NewServeMux())\n\t\t\tfor _, link := range tt.links {\n\t\t\t\tif err := state.AddWebHandler(link, func(w http.ResponseWriter, r *http.Request) {}); err != nil {\n\t\t\t\t\tt.Fatal(err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twantStartTime := sysvars.StartTime().Truncate(time.Millisecond)\n\t\t\twantUptime := time.Since(wantStartTime).Truncate(time.Millisecond)\n\t\t\tif tt.wantStatusLink == \"\" {\n\t\t\t\ttt.wantStatusLink = \"status\"\n\t\t\t}\n\n\t\t\tfor _, linksPrefix := range []string{\"\", \"../\"} {\n\t\t\t\tdata := headerData(linksPrefix)\n\t\t\t\tassert.Equal(t, tt.version, data.Version)\n\t\t\t\tassert.Equal(t, tt.buildTimestamp, data.BuiltAt)\n\t\t\t\tassert.Equal(t, wantStartTime, data.StartTime)\n\t\t\t\tassert.Equal(t, wantUptime, data.Uptime)\n\t\t\t\tassert.Equal(t, tt.expectMetricsLink, data.IncludeMetricsLink)\n\t\t\t\tassert.Equal(t, tt.expectArtifactsLink, data.IncludeArtifactsLink)\n\t\t\t\tassert.Equal(t, linksPrefix, data.LinksPrefix)\n\t\t\t\tassert.Equal(t, tt.wantStatusLink, data.StatusLink)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestLinkPrefixFromCurrentPath(t *testing.T) {\n\ttests := []struct {\n\t\tpath     string\n\t\texpected string\n\t}{\n\t\t{path: \"/\", expected: \"\"},\n\t\t{path: \"/status\", expected: \"\"},\n\t\t{path: \"/config/running\", expected: \"../\"},\n\t\t{path: \"/some/deep/path\", expected: \"../../\"},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.path, func(t *testing.T) {\n\t\t\tassert.Equal(t, tt.expected, LinkPrefixFromCurrentPath(tt.path))\n\t\t})\n\t}\n}\n\nfunc TestHTMLHeader(t *testing.T) {\n\tstate.SetVersion(\"v1.0.0\")\n\tstate.SetBuildTimestamp(time.Date(2023, 10, 1, 12, 0, 0, 0, time.UTC))\n\tstate.SetDefaultHTTPServeMux(http.NewServeMux())\n\tif err := state.AddWebHandler(\"/artifacts/\", func(w http.ResponseWriter, r *http.Request) {}); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := state.AddWebHandler(\"/metrics\", func(w http.ResponseWriter, r *http.Request) {}); err != nil {\n\t\tt.Fatal(err)\n\t}\n\texpected := `\n<header>\n  <a href=\"https:\n</header> \n<hr/>\n<div style=\"float:left\">\n  <b>Started</b>: 0001-01-01 00:00:00 &#43;0000 UTC -- up 2562047h47m16.854s<br/>\n  <b>Version</b>: v1.0.0<br>\n  <b>Built at</b>: 2023-10-01 12:00:00 &#43;0000 UTC<br>\n  <b>Other Links </b>(<a href=\"links\">all</a>):\n  \t<a href=\"status\">/status</a>,\n\t<a href=\"config-running\">/config</a> (<a href=\"config-parsed\">parsed</a> | <a href=\"config\">raw</a>),\n\t<a href=\"metrics\">/metrics</a>,\n\t<a href=\"artifacts\">/artifacts</a>,\n\t<a href=\"alerts\">/alerts</a>\n</div>\n`\n\n\tt.Run(\"no prefix\", func(t *testing.T) {\n\t\tassert.Equal(t, template.HTML(expected), Header(\"\"))\n\t})\n\tt.Run(\"with prefix\", func(t *testing.T) {\n\t\tprefixedExpected := regexp.MustCompile(`href=\"([^\"]*)\"`).ReplaceAllString(expected, \"href=\\\"../../$1\\\"\")\n\t\tassert.Equal(t, template.HTML(prefixedExpected), Header(\"../../\"))\n\t})\n}\n\nfunc TestGetPathPrefix(t *testing.T) {\n\ttests := []struct {\n\t\tpath     string\n\t\texpected string\n\t}{\n\t\t{path: \"/\", expected: \"\"},\n\t\t{path: \"/status\", expected: \"\"},\n\t\t{path: \"/config/running\", expected: \"../\"},\n\t\t{path: \"/some/deep/path\", expected: \"../../\"},\n\t\t{path: \"/a/b/c/d\", expected: \"../../../\"},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.path, func(t *testing.T) {\n\t\t\tassert.Equal(t, tt.expected, LinkPrefixFromCurrentPath(tt.path))\n\t\t})\n\t}\n}"
