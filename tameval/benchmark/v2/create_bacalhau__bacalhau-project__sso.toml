[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "bacalhau-project/bacalhau"
sha = "942823bbb893e9dfeedca16bd151e2f15228a198"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/sso/sso.go pkg/sso/sso_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/sso/sso.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 52.0
original_coverage = 93.0
mutation_kill_rate = 25.0
original_mutation_kill_rate = 75.0
covered_lines = [ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95,]
missed_lines = [ 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 91, 92, 93, 94, 98,]

[input_info]
test_file_path = "pkg/sso/sso_test.go"
focal_file_path = "pkg/sso/sso.go"
test_file_url = "https://github.com/bacalhau-project/bacalhau/blob/942823bbb893e9dfeedca16bd151e2f15228a198/pkg/sso/sso_test.go"
focal_file_url = "https://github.com/bacalhau-project/bacalhau/blob/942823bbb893e9dfeedca16bd151e2f15228a198/pkg/sso/sso.go"
first_commit_date = "2025-03-18"
last_commit_date = "2025-03-18"
test_file_content = "package sso\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/bacalhau-project/bacalhau/pkg/config/types\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\n// setupMockServer creates a test server that mocks OAuth2 endpoints\nfunc setupMockServer(t *testing.T, deviceAuthHandler, tokenHandler http.HandlerFunc) *httptest.Server {\n\tmux := http.NewServeMux()\n\n\t// Only register handlers that are not nil\n\tif deviceAuthHandler != nil {\n\t\tmux.HandleFunc(\"/device/code\", deviceAuthHandler)\n\t}\n\n\tif tokenHandler != nil {\n\t\tmux.HandleFunc(\"/token\", tokenHandler)\n\t}\n\n\tserver := httptest.NewServer(mux)\n\tt.Cleanup(func() {\n\t\tserver.Close()\n\t})\n\n\treturn server\n}\n\n// createTestConfig creates a test OAuth2 config with the provided server URL\nfunc createTestConfig(serverURL string) types.Oauth2Config {\n\treturn types.Oauth2Config{\n\t\tDeviceClientID:              \"test-client-id\",\n\t\tScopes:                      []string{\"test-scope\"},\n\t\tDeviceAuthorizationEndpoint: serverURL + \"/device/code\",\n\t\tTokenEndpoint:               serverURL + \"/token\",\n\t\tAudience:                    \"test-audience\",\n\t}\n}\n\n// TestNewOAuth2Service tests the creation of a new OAuth2Service\n\n// TestInitiateDeviceCodeFlow tests the device code flow initiation\n\n// TestInitiateDeviceCodeFlowError tests error handling in device code flow initiation\n\n// TestPollForToken tests successful token polling\n\n// TestPollForTokenError tests error handling in token polling\n\n// TestPollForTokenCancellation tests cancellation during token polling\nfunc TestPollForTokenCancellation(t *testing.T) {\n\t// Set up a test server that delays the response\n\tserver := setupMockServer(t,\n\t\tnil, // Device auth handler not used in this test\n\t\tfunc(w http.ResponseWriter, r *http.Request) {\n\t\t\t// Sleep to simulate waiting\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\n\t\t\t// Return a response (should not be reached due to cancelled context)\n\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\tjson.NewEncoder(w).Encode(map[string]string{\n\t\t\t\t\"error\":             \"authorization_pending\",\n\t\t\t\t\"error_description\": \"The authorization request is still pending\",\n\t\t\t})\n\t\t},\n\t)\n\n\t// Create a test configuration with the test server URL\n\tconfig := createTestConfig(server.URL)\n\n\t// Create a new OAuth2Service with the test configuration\n\tservice := NewOAuth2Service(config)\n\n\t// Create a context that will be cancelled\n\tctx, cancel := context.WithCancel(context.Background())\n\n\t// Start a goroutine to cancel the context after a short delay\n\tgo func() {\n\t\ttime.Sleep(100 * time.Millisecond)\n\t\tcancel()\n\t}()\n\n\t// Call PollForToken\n\ttoken, err := service.PollForToken(ctx, \"device-code-123\")\n\n\t// Verify the error\n\tassert.Error(t, err)\n\tassert.Nil(t, token)\n\tassert.Contains(t, err.Error(), \"context canceled\")\n}\n"
