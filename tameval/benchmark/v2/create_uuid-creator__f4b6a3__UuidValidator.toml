[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "f4b6a3/uuid-creator"
sha = "3f41c3e6ed9fa3c229303672960570281f35a125"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=UuidValidatorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.UuidValidator  -DtargetTests=**.UuidValidatorTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 49.0
original_coverage = 49.0
mutation_kill_rate = 34.0
original_mutation_kill_rate = 34.0
covered_lines = [ 51, 105, 116, 173, 198, 211, 240, 251, 252, 253, 254, 255, 256, 258, 262, 264, 267, 278, 317, 321, 322, 324, 326, 327, 328, 330, 331, 332, 334, 337, 338, 340, 343,]
missed_lines = [ 63, 74, 84, 95, 126, 137, 147, 148, 150, 160, 161, 163, 172, 175, 185, 186, 188, 197, 200, 210, 213, 222, 223, 225, 235, 236, 238, 289, 290, 291, 302, 303, 304, 318, 339,]

[input_info]
test_file_path = "src/test/java/com/github/f4b6a3/uuid/util/UuidValidatorTest.java"
focal_file_path = "src/main/java/com/github/f4b6a3/uuid/util/UuidValidator.java"
test_file_url = "https://github.com/f4b6a3/uuid-creator/blob/3f41c3e6ed9fa3c229303672960570281f35a125/src/test/java/com/github/f4b6a3/uuid/util/UuidValidatorTest.java"
focal_file_url = "https://github.com/f4b6a3/uuid-creator/blob/3f41c3e6ed9fa3c229303672960570281f35a125/src/main/java/com/github/f4b6a3/uuid/util/UuidValidator.java"
first_commit_date = "2020-04-12"
last_commit_date = "2025-03-29"
test_file_content = "package com.github.f4b6a3.uuid.util;\n\nimport static org.junit.Assert.*;\n\nimport java.util.UUID;\n\nimport org.junit.Test;\n\nimport com.github.f4b6a3.uuid.exception.InvalidUuidException;\n\npublic class UuidValidatorTest {\n\n\tprivate static final int DEFAULT_LOOP_LIMIT = 100;\n\n\t@Test\n\tpublic void testIsValidBytes() {\n\n\t\tbyte[] uuid = null;\n\t\tassertFalse(\"Null UUID byte array should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = new byte[0];\n\t\tassertFalse(\"Empty UUID byte array should be invalid .\", UuidValidator.isValid(uuid));\n\n\t\tuuid = new byte[15];\n\t\tassertFalse(\"UUID byte array with length lower than 16 should be invalid .\", UuidValidator.isValid(uuid));\n\n\t\tuuid = new byte[17];\n\t\tassertFalse(\"UUID byte array with length greater than 16 should be invalid .\", UuidValidator.isValid(uuid));\n\n\t\ttry {\n\t\t\tuuid = null;\n\t\t\tUuidValidator.validate(uuid);\n\t\t\tfail();\n\t\t} catch (InvalidUuidException e) {\n\t\t\t// Success\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testIsValidString() {\n\n\t\tString uuid = null; // Null\n\t\tassertFalse(\"Null UUID string should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"\"; // length: 0\n\t\tassertFalse(\"UUID with empty string should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-ef0123456789\"; // String length = 36\n\t\tassertTrue(\"UUID with length equals to 36 should be valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-abcdef01-23456789\"; // String length = 36 with hyphen in wrong position\n\t\tassertFalse(\"UUID with length equals to 36 with hyphen in wrong position should be invalid.\",\n\t\t\t\tUuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-ef01-3456789\"; // String length = 36 with an extra hyphen\n\t\tassertFalse(\"UUID with length equals to 36 with an extra hyphen should be invalid.\",\n\t\t\t\tUuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-abcddef0123456789\"; // String length = 36 with a missing hyphen\n\t\tassertFalse(\"UUID with length equals to 36 with a missing hyphen should be invalid.\",\n\t\t\t\tUuidValidator.isValid(uuid));\n\n\t\tuuid = \"0123456789ab4defabcdef0123456789\"; // String length = 32\n\t\tassertTrue(\"UUID with length equals to 32 should be valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"0123456789ab4defabcdef012345678\"; // String length = 31\n\t\tassertFalse(\"UUID with length equals to 31 should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"0123456789ab4defabcdef01234567899\"; // String length = 33\n\t\tassertFalse(\"UUID with length equals to 33 should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-ef0123456789\"; // All lower case\n\t\tassertTrue(\"UUID in lower case should be valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89AB-4DEF-ABCD-EF0123456789\"; // All upper case\n\t\tassertTrue(\"UUID in upper case should valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4DEF-abcd-EF0123456789\"; // Mixed case\n\t\tassertTrue(\"UUID in upper and lower case should valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"0123456789AB4DEFABCDEF0123456789\"; // All upper case, without hyphen\n\t\tassertTrue(\"UUID in upper case without hyphen should be valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"0123456789ab4defabcdef0123456789\"; // All lower case, without hyphen\n\t\tassertTrue(\"UUID in lower case without hyphen should be valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"0123456789ab4DEFabcdEF0123456789\"; // mixed case, without hyphen\n\t\tassertTrue(\"UUID in upper and lower case without hyphen should be valid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-SOPQRSTUVXYZ\"; // String with non hexadecimal chars\n\t\tassertFalse(\"UUID string with non hexadecimal chars should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\tuuid = \"01234567-89ab-4def-!@#$-ef0123456789\"; // String with non alphanumeric chars\n\t\tassertFalse(\"UUID string non alphanumeric chars should be invalid.\", UuidValidator.isValid(uuid));\n\n\n\t\tuuid = \"01234567-89ab-4def-ðŸ˜ŠðŸ¤–-ef0123456789\"; // String with UTF8 chars\n\t\tassertFalse(\"UUID string UTF8 chars should be invalid.\", UuidValidator.isValid(uuid));\n\n\t\ttry {\n\t\t\tuuid = null;\n\t\t\tUuidValidator.validate(uuid);\n\t\t\tfail();\n\t\t} catch (InvalidUuidException e) {\n\t\t\t// Success\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testIsValidStringWithVersion() {\n\n\t\tint version = 4;\n\t\tString uuid = null; // Null\n\t\tassertFalse(\"Null UUID string should be invalid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"\"; // length: 0\n\t\tassertFalse(\"UUID with empty string should be invalid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-ef0123456789\"; // String length = 36\n\t\tassertTrue(\"UUID with length equals to 36 should be valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-abcdef01-23456789\"; // String length = 36 with hyphen in wrong position\n\t\tassertFalse(\"UUID with length equals to 36 with hyphen in wrong position should be invalid.\",\n\t\t\t\tUuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-ef01-3456789\"; // String length = 36 with an extra hyphen\n\t\tassertFalse(\"UUID with length equals to 36 with an extra hyphen should be invalid.\",\n\t\t\t\tUuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-abcddef0123456789\"; // String length = 36 with a missing hyphen\n\t\tassertFalse(\"UUID with length equals to 36 with a missing hyphen should be invalid.\",\n\t\t\t\tUuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"0123456789ab4defabcdef0123456789\"; // String length = 32\n\t\tassertTrue(\"UUID with length equals to 32 should be valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"0123456789ab4defabcdef012345678\"; // String length = 31\n\t\tassertFalse(\"UUID with length equals to 31 should be invalid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"0123456789ab4defabcdef01234567899\"; // String length = 33\n\t\tassertFalse(\"UUID with length equals to 33 should be invalid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-ef0123456789\"; // All lower case\n\t\tassertTrue(\"UUID in lower case should be valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89AB-4DEF-ABCD-EF0123456789\"; // All upper case\n\t\tassertTrue(\"UUID in upper case should valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4DEF-abcd-EF0123456789\"; // Mixed case\n\t\tassertTrue(\"UUID in upper and lower case should valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"0123456789AB4DEFABCDEF0123456789\"; // All upper case, without hyphen\n\t\tassertTrue(\"UUID in upper case without hyphen should be valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"0123456789ab4defabcdef0123456789\"; // All lower case, without hyphen\n\t\tassertTrue(\"UUID in lower case without hyphen should be valid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"0123456789ab4DEFabcdEF0123456789\"; // mixed case, without hyphen\n\t\tassertTrue(\"UUID in upper and lower case without hyphen should be valid.\",\n\t\t\t\tUuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-abcd-SOPQRSTUVXYZ\"; // String with non hexadecimal chars\n\t\tassertFalse(\"UUID string with non hexadecimal chars should be invalid.\", UuidValidator.isValid(uuid, version));\n\n\t\tuuid = \"01234567-89ab-4def-!@#$-ef0123456789\"; // String with non alphanumeric chars\n\t\tassertFalse(\"UUID string non alphanumeric chars should be invalid.\", UuidValidator.isValid(uuid, version));\n\n\t\ttry {\n\t\t\tuuid = null;\n\t\t\tUuidValidator.validate(uuid, version);\n\t\t\tfail();\n\t\t} catch (InvalidUuidException e) {\n\t\t\t// Success\n\t\t}\n\t}\n\n\t@Test\n\tpublic void testIsUuidString() {\n\n\t\t// Lower case with hyphens\n\t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\n\t\t\tString string = UUID.randomUUID().toString();\n\t\t\tassertTrue(UuidValidator.isParseable(string.toCharArray()));\n\t\t}\n\n\t\t// Lower case without hyphens\n\t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\n\t\t\tString string = UUID.randomUUID().toString();\n\t\t\tassertTrue(UuidValidator.isParseable(string.replace(\"-\", \"\").toCharArray()));\n\t\t}\n\n\t\t// Upper case with hyphens\n\t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\n\t\t\tString string = UUID.randomUUID().toString();\n\t\t\tassertTrue(UuidValidator.isParseable(string.toUpperCase().toCharArray()));\n\t\t}\n\n\t\t// Upper case without hyphens\n\t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\n\t\t\tString string = UUID.randomUUID().toString();\n\t\t\tassertTrue(UuidValidator.isParseable(string.toUpperCase().replace(\"-\", \"\").toCharArray()));\n\t\t}\n\t}\n}\n"
