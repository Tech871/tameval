[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "factcast/factcast"
sha = "2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl factcast-factus -Dtest=LocalWriteTokenTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl factcast-factus -DtargetClasses=**.LocalWriteToken  -DtargetTests=**.LocalWriteTokenTest  -DoutputFormats=XML"
coverage_report_path = "factcast-factus/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "factcast-store/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 25.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 22, 24, 26,]
missed_lines = [ 28, 29, 30, 34, 35, 37, 38, 39, 43,]

[input_info]
test_file_path = "factcast-factus/src/test/java/org/factcast/factus/projection/LocalWriteTokenTest.java"
focal_file_path = "factcast-factus/src/main/java/org/factcast/factus/projection/LocalWriteToken.java"
test_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-factus/src/test/java/org/factcast/factus/projection/LocalWriteTokenTest.java"
focal_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-factus/src/main/java/org/factcast/factus/projection/LocalWriteToken.java"
first_commit_date = "2020-08-14"
last_commit_date = "2025-02-10"
test_file_content = "/*\n * Copyright Â© 2017-2020 factcast.org\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.factcast.factus.projection;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.Duration;\nimport java.util.concurrent.atomic.*;\nimport org.junit.jupiter.api.*;\n\nclass LocalWriteTokenTest {\n\n  private final LocalWriteToken underTest = new LocalWriteToken();\n\n  @Test\n  @Disabled\n  void acquireWriteToken() throws Exception {\n    // acquire lock\n    AutoCloseable lock = underTest.acquireWriteToken(Duration.ofSeconds(1));\n\n    // we have a lock when this is not null\n    assertThat(lock).isNotNull();\n\n    // same thread should be able to get the lock again\n    AutoCloseable otherLock = underTest.acquireWriteToken(Duration.ofSeconds(1));\n\n    assertThat(otherLock).isNotNull();\n\n    // test that we can unlock without exception\n    lock.close();\n    otherLock.close();\n  }\n\n  @Test\n  @Disabled\n  void cannotLock() throws Exception {\n    AtomicReference<AutoCloseable> lock = new AtomicReference<>();\n\n    // signal for other thread to unlock\n    AtomicBoolean unlock = new AtomicBoolean(false);\n\n    // another thread that acquires (and keeps) a lock\n    // we test that we cannot acquire one while this thread keeps the lock,\n    // but that we can get one after the thread has released its lock\n    Thread lockingThread =\n        new Thread(\n            () -> {\n              lock.set(underTest.acquireWriteToken(Duration.ofSeconds(1)));\n              while (!unlock.get()) {\n                try {\n                  Thread.sleep(10);\n                } catch (InterruptedException e) {\n                }\n              }\n              // and unlock\n              try {\n                lock.get().close();\n              } catch (Exception e) {\n                e.printStackTrace();\n              }\n            });\n\n    try {\n      lockingThread.start();\n\n      // wait until locked\n      while (lock.get() == null && lockingThread.isAlive()) {\n        Thread.sleep(10);\n      }\n\n      // make sure the thread really got a lock\n      assertThat(lock.get()).isNotNull();\n\n      // now make sure our thread cannot acquire a lock while the other\n      // thread holds a lock\n      assertThat(underTest.acquireWriteToken(Duration.ofMillis(1))).isNull();\n\n    } finally {\n      // make sure other thread does not run forever in case of exception\n      unlock.set(true);\n    }\n\n    // make sure other thread has finished (and hence released the lock)\n    lockingThread.join();\n\n    // now we should be able to acquire the lock as well\n    AutoCloseable newLock = underTest.acquireWriteToken(Duration.ofMillis(1));\n    assertThat(newLock).isNotNull();\n\n    newLock.close();\n  }\n}"
