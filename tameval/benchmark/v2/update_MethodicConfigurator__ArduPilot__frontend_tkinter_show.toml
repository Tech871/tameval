[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "ArduPilot/MethodicConfigurator"
sha = "8f14cac0abb19c133ba74e6693d4efb6385cb8f0"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ardupilot_methodic_configurator/frontend_tkinter_show.py -m pytest -q --junit-xml=test_output.xml tests/test_frontend_tkinter_show.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ardupilot_methodic_configurator.frontend_tkinter_show --unit-test tests.test_frontend_tkinter_show --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ardupilot_methodic_configurator/frontend_tkinter_show.py --unit-test tests/test_frontend_tkinter_show.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 90.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/test_frontend_tkinter_show.py"
focal_file_path = "ardupilot_methodic_configurator/frontend_tkinter_show.py"
test_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/tests/test_frontend_tkinter_show.py"
focal_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/ardupilot_methodic_configurator/frontend_tkinter_show.py"
first_commit_date = "2025-03-20"
last_commit_date = "2025-06-12"
test_file_content = "#!/usr/bin/env python3\n\n\"\"\"\nTests for the frontend_tkinter_show.py file.\n\nThis file is part of Ardupilot methodic configurator. https://github.com/ArduPilot/MethodicConfigurator\n\nSPDX-FileCopyrightText: 2024-2025 Amilcar do Carmo Lucas <amilcar.lucas@iav.de>\n\nSPDX-License-Identifier: GPL-3.0-or-later\n\"\"\"\n\nfrom collections.abc import Generator\nfrom unittest.mock import MagicMock, patch\n\nimport pytest\n\nfrom ardupilot_methodic_configurator.frontend_tkinter_show import (\n    Tooltip,\n    show_error_message,\n    show_no_connection_error,\n    show_no_param_files_error,\n    show_tooltip,\n)\n\n# pylint: disable=redefined-outer-name\n\n\n# Fixtures\n@pytest.fixture\ndef mock_tk() -> Generator[MagicMock, None, None]:\n    with patch(\"tkinter.Tk\") as mock:\n        mock.return_value.withdraw.return_value = None\n        mock.return_value.destroy.return_value = None\n        yield mock\n\n\n@pytest.fixture\ndef mock_widget() -> MagicMock:\n    widget = MagicMock()\n    widget.winfo_rootx.return_value = 100\n    widget.winfo_rooty.return_value = 200\n    widget.winfo_width.return_value = 50\n    widget.winfo_height.return_value = 30\n    return widget\n\n\n@pytest.fixture\ndef mock_toplevel() -> Generator[tuple[MagicMock, MagicMock], None, None]:\n    with patch(\"tkinter.Toplevel\") as mock:\n        mock_instance = MagicMock()\n        mock.return_value = mock_instance\n        yield mock, mock_instance\n\n\n@pytest.fixture\ndef mock_label() -> Generator[MagicMock, None, None]:\n    with patch(\"tkinter.ttk.Label\") as mock:\n        mock.return_value.pack.return_value = None\n        yield mock\n\n\n# Tests for show_error_message\n@pytest.mark.parametrize(\n    (\"title\", \"message\"),\n    [\n        (\"Test Title\", \"Test Message\"),\n        (\"Test & Title\", \"Test\\nMessage with & special < chars >\"),\n    ],\n)\ndef test_show_error_message(mock_tk, title, message) -> None:\n    with patch(\"tkinter.messagebox.showerror\") as mock_showerror, patch(\"tkinter.ttk.Style\"):\n        # Call the function with test parameters\n        show_error_message(title, message)\n\n        # Assert that the Tkinter Tk class was instantiated\n        mock_tk.assert_called_once()\n\n        # Assert that the Tkinter messagebox.showerror function was called with the correct parameters\n        mock_showerror.assert_called_once_with(title, message)\n\n        # Assert that the Tkinter Tk instance's withdraw method was called\n        mock_tk.return_value.withdraw.assert_called_once()\n\n        # Assert that the Tkinter Tk instance's destroy method was called\n        mock_tk.return_value.destroy.assert_called_once()\n\n\n# Tests for show_no_param_files_error\ndef test_show_no_param_files_error(mock_tk) -> None:\n    with patch(\"tkinter.messagebox.showerror\") as mock_showerror, patch(\"tkinter.ttk.Style\"):\n        show_no_param_files_error(\"test_dir\")\n\n        mock_tk.assert_called_once()\n        mock_showerror.assert_called_once_with(\n            \"No Parameter Files Found\",\n            (\n                \"No intermediate parameter files found in the selected 'test_dir' vehicle directory.\\n\"\n                \"Please select and step inside a vehicle directory containing valid ArduPilot intermediate parameter files.\"\n                \"\\n\\nMake sure to step inside the directory (double-click) and not just select it.\"\n            ),\n        )\n        mock_tk.return_value.withdraw.assert_called_once()\n        mock_tk.return_value.destroy.assert_called_once()\n\n\n# Tests for show_no_connection_error\ndef test_show_no_connection_error(mock_tk) -> None:\n    with patch(\"tkinter.messagebox.showerror\") as mock_showerror, patch(\"tkinter.ttk.Style\"):\n        show_no_connection_error(\"test_error\")\n\n        mock_tk.assert_called_once()\n        mock_showerror.assert_called_once_with(\n            \"No Connection to the Flight Controller\",\n            \"test_error\\n\\nPlease connect a flight controller to the PC,\\nwait at least 7 seconds and retry.\",\n        )\n        mock_tk.return_value.withdraw.assert_called_once()\n        mock_tk.return_value.destroy.assert_called_once()\n\n\n# Tests for show_tooltip function\ndef test_show_tooltip(mock_widget) -> None:\n    # Call the function with test parameters\n    tooltip = show_tooltip(mock_widget, \"Test Tooltip Message\")\n\n    # Check that tooltip object was created and is a Tooltip instance\n    assert tooltip is not None\n    assert isinstance(tooltip, Tooltip)\n\n    # Verify bindings were created\n    mock_widget.bind.assert_any_call(\"<Enter>\", tooltip.show)\n    mock_widget.bind.assert_any_call(\"<Leave>\", tooltip.hide)\n\n\n# Tests for Tooltip class\ndef test_tooltip_init(mock_widget) -> None:\n    tooltip = Tooltip(mock_widget, \"Test tooltip text\")\n\n    # Verify attribute initialization\n    assert tooltip.widget == mock_widget\n    assert tooltip.text == \"Test tooltip text\"\n    assert tooltip.tooltip is None\n    assert tooltip.position_below is True\n\n    # Verify event bindings\n    mock_widget.bind.assert_any_call(\"<Enter>\", tooltip.show)\n    mock_widget.bind.assert_any_call(\"<Leave>\", tooltip.hide)\n\n\ndef test_tooltip_show(mock_widget, mock_toplevel, mock_label) -> None:\n    _, mock_toplevel_instance = mock_toplevel\n\n    tooltip = Tooltip(mock_widget, \"Test tooltip\")\n    tooltip.show()\n\n    # Verify toplevel window was created\n    assert tooltip.tooltip is not None\n\n    # Calculate expected positioning\n    expected_x = mock_widget.winfo_rootx() + min(mock_widget.winfo_width() // 2, 100)\n    expected_y = mock_widget.winfo_rooty() + mock_widget.winfo_height()\n\n    # Check positioning\n    mock_toplevel_instance.geometry.assert_called_with(f\"+{expected_x}+{expected_y}\")\n\n    # Verify label was created with right text\n    mock_label.assert_called_once()\n    assert mock_label.call_args[1][\"text\"] == \"Test tooltip\"\n\n\ndef test_tooltip_show_position_above(mock_widget, mock_toplevel) -> None:\n    _, mock_toplevel_instance = mock_toplevel\n\n    # Create tooltip positioned above widget\n    tooltip = Tooltip(mock_widget, \"Test tooltip\", position_below=False)\n    tooltip.show()\n\n    # Calculate expected positioning (should be above the widget)\n    expected_x = mock_widget.winfo_rootx() + min(mock_widget.winfo_width() // 2, 100)\n    expected_y = mock_widget.winfo_rooty() - 10  # positioned above\n\n    # Check positioning\n    mock_toplevel_instance.geometry.assert_called_with(f\"+{expected_x}+{expected_y}\")\n\n\ndef test_tooltip_hide(mock_widget, mock_toplevel) -> None:\n    _, mock_toplevel_instance = mock_toplevel\n\n    tooltip = Tooltip(mock_widget, \"Test tooltip\")\n    tooltip.show()\n\n    # Verify tooltip created\n    assert tooltip.tooltip is not None\n\n    # Now hide the tooltip\n    tooltip.hide()\n\n    # Verify tooltip destroyed\n    mock_toplevel_instance.destroy.assert_called_once()\n    assert tooltip.tooltip is None\n\n\ndef test_tooltip_show_hide_event_handling(mock_widget) -> None:\n    # Create mock event and patch Tooltip class before creating instance\n    mock_event = MagicMock()\n\n    # Use autospec to ensure method signatures are checked\n    with (\n        patch(\"ardupilot_methodic_configurator.frontend_tkinter_show.Tooltip.show\", autospec=True) as mock_show,\n        patch(\"ardupilot_methodic_configurator.frontend_tkinter_show.Tooltip.hide\", autospec=True) as mock_hide,\n    ):\n        # Create tooltip after patching the methods\n        tooltip = Tooltip(mock_widget, \"Test tooltip\")\n\n        # Get the bound methods\n        enter_callback = mock_widget.bind.call_args_list[0][0][1]\n        leave_callback = mock_widget.bind.call_args_list[1][0][1]\n\n        # Reset the mocks to clear the call_args from initialization\n        mock_show.reset_mock()\n        mock_hide.reset_mock()\n\n        # Manually call the callbacks with the mock event\n        enter_callback(mock_event)\n        leave_callback(mock_event)\n\n        # Verify our mocked methods were called with the correct arguments\n        # The first arg is self (the tooltip instance)\n        mock_show.assert_called_once_with(tooltip, mock_event)\n        mock_hide.assert_called_once_with(tooltip, mock_event)\n\n\ndef test_tooltip_darwin_handling(mock_widget) -> None:\n    # Test macOS specific code paths\n    with patch(\"ardupilot_methodic_configurator.frontend_tkinter_show.platform_system\", return_value=\"Darwin\"):\n        # Test the successful path\n        with patch(\"tkinter.Toplevel\") as mock_toplevel_class:\n            # Set up the mock instance\n            mock_toplevel_instance = MagicMock()\n            mock_toplevel_class.return_value = mock_toplevel_instance\n\n            # Create a tooltip and show it\n            tooltip = Tooltip(mock_widget, \"Test tooltip\")\n            tooltip.show()\n\n            # Check that tk.call was called (don't check exact parameters)\n            assert mock_toplevel_instance.tk.call.called\n\n        # Test the AttributeError exception path with a separate patch\n        with patch(\"tkinter.Toplevel\") as mock_toplevel_class:\n            # Set up the mock instance with exception\n            mock_toplevel_instance = MagicMock()\n            mock_toplevel_class.return_value = mock_toplevel_instance\n\n            # We need to set side_effect only for the specific tk.call we're testing\n            # First mock with a function that checks arguments\n            def side_effect_function(*args) -> None:\n                # Only raise AttributeError for the MacWindowStyle call\n                if args and args[0] == \"::tk::unsupported::MacWindowStyle\":\n                    raise AttributeError\n                # For all other calls, return None or a default value\n\n            mock_toplevel_instance.tk.call.side_effect = side_effect_function\n\n            # Create a new tooltip and show it\n            tooltip2 = Tooltip(mock_widget, \"Test tooltip\")\n            tooltip2.show()\n\n            # Check the fallback attributes were set\n            mock_toplevel_instance.wm_attributes.assert_any_call(\"-alpha\", 1.0)\n            mock_toplevel_instance.wm_attributes.assert_any_call(\"-topmost\", True)  # noqa: FBT003\n\n\ndef test_tooltip_non_darwin_handling(mock_widget) -> None:\n    # Test non-macOS code path\n    with (\n        patch(\"ardupilot_methodic_configurator.frontend_tkinter_show.platform_system\", return_value=\"Windows\"),\n        patch(\"tkinter.Toplevel\") as mock_toplevel,\n    ):\n        mock_instance = MagicMock()\n        mock_toplevel.return_value = mock_instance\n\n        tooltip = Tooltip(mock_widget, \"Test tooltip\")\n        tooltip.show()\n\n        # Verify overrideredirect was called\n        mock_instance.wm_overrideredirect.assert_called_with(boolean=True)"
