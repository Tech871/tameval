[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dromara/disjob"
sha = "b5eb98544c8fc8fde39354d89a24f8d935b3ff20"
bench_version = 2

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl disjob-common -Dtest=DAGExpressionTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl disjob-common -DtargetClasses=**.DAGExpression  -DtargetTests=**.DAGExpressionTest  -DoutputFormats=XML"
coverage_report_path = "disjob-common/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "disjob-common/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 63.0
original_coverage = 80.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 107, 112, 117, 122, 123, 124, 125, 135, 140, 145, 154, 170, 171, 172, 173, 176, 178, 179, 182, 185, 190, 204, 205, 206, 207, 210, 211, 213, 214, 216, 221, 222, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 239, 240, 243, 246, 247, 249, 252, 256, 259, 260, 263, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 284, 285, 286, 288, 290, 294, 296, 297, 299, 301, 307, 308, 367, 370, 374, 375, 378, 379, 380, 381, 382, 384, 386, 389, 398, 399, 400, 406, 407, 408, 410, 412, 413, 414, 417, 418, 419, 420, 424, 427, 428, 431, 432, 433, 434, 435, 445, 446, 447, 448, 449, 450, 451, 453, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 486, 487, 488, 489, 491, 493, 494, 495, 496, 498, 501, 512, 514, 515, 516, 517, 518, 520, 522, 523, 524, 526, 530, 534, 600, 603, 604, 605, 609, 612, 613, 615, 622, 627, 642, 646, 647, 648, 649, 653, 656, 659, 668, 672,]
missed_lines = [ 164, 165, 180, 186, 187, 188, 189, 203, 208, 212, 223, 229, 253, 262, 269, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 332, 333, 335, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 368, 371, 391, 394, 455, 458, 511, 529, 540, 541, 542, 543, 544, 545, 547, 548, 550, 551, 552, 554, 555, 559, 560, 561, 562, 563, 564, 566, 568, 569, 573, 574, 575, 576, 577, 578, 579, 581, 582, 601, 602, 610, 616, 628, 633, 643, 644, 645, 654, 657, 661,]

[input_info]
test_file_path = "disjob-common/src/test/java/cn/ponfee/disjob/common/dag/DAGExpressionTest.java"
focal_file_path = "disjob-common/src/main/java/cn/ponfee/disjob/common/dag/DAGExpression.java"
test_file_url = "https://github.com/dromara/disjob/blob/b5eb98544c8fc8fde39354d89a24f8d935b3ff20/disjob-common/src/test/java/cn/ponfee/disjob/common/dag/DAGExpressionTest.java"
focal_file_url = "https://github.com/dromara/disjob/blob/b5eb98544c8fc8fde39354d89a24f8d935b3ff20/disjob-common/src/main/java/cn/ponfee/disjob/common/dag/DAGExpression.java"
first_commit_date = "2024-09-07"
last_commit_date = "2025-02-16"
test_file_content = "/*\n * Copyright 2022-2024 Ponfee (http://www.ponfee.cn/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage cn.ponfee.disjob.common.dag;\n\nimport com.google.common.graph.EndpointPair;\nimport com.google.common.graph.Graph;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Set;\nimport java.util.regex.Pattern;\n\n/**\n * DAGExpression Test\n *\n * @author Ponfee\n */\npublic class DAGExpressionTest {\n\n    /*\n    private static final MultiwayTreePrinter<TreeNode<DAGExpression.TreeNodeId, Object>> TREE_PRINTER =\n        new MultiwayTreePrinter<>(System.out, e -> e.getId().toString(), TreeNode::getChildren);\n\n    @Test\n    public void testProcess() {\n        Assertions.assertEquals(\"((A)->(((B)->(C)->(D)),((A)->(F)))->((G),(H),(X))->(J))\", DAGExpression.completeParenthesis(\"(A->((B->C->D),(A->F))->(G,H,X)->J)\"));\n        Assertions.assertEquals(\"(A),(B)->((C)->(D)),(E)->(F)\", DAGExpression.completeParenthesis(\"A,B->(C->D),(E)->F\"));\n        Assertions.assertEquals(\"(A),(B)->((C)->(D)),(E)->(F)\", DAGExpression.completeParenthesis(\"A,B->(C->D),E->F\"));\n    }\n\n    @Test\n    public void testPartition() {\n        Assertions.assertTrue(isEqualCollection(asList(Tuple2.of(0, 1), Tuple2.of(7, 1)), DAGExpression.group(\"(A -> B)\")));\n\n        Assertions.assertTrue(isEqualCollection(\n            asList(Tuple2.of(0, 1), Tuple2.of(4, 2), Tuple2.of(12, 2), Tuple2.of(14, 2), Tuple2.of(19, 2), Tuple2.of(22, 2), Tuple2.of(26, 2), Tuple2.of(30, 1)),\n            DAGExpression.group(\"(A->(B->C->D),(E->F)->(G,H)->J)\")\n        ));\n    }\n\n    @Test\n    public void testValidate() {\n        Assertions.assertTrue(DAGExpression.checkParenthesis(\"(A->(B->C->D),(E->F)->(G,H)->J)\"));\n        Assertions.assertTrue(DAGExpression.checkParenthesis(\"afdsafd\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\"((A->(B->C->D),(E->F)->(G,H)->J)\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\")A->(B->C->D),(E->F)->)G,H(->J(\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\")(\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\"()(\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\"())\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\"(()\"));\n        Assertions.assertFalse(DAGExpression.checkParenthesis(\")()\"));\n    }\n\n    @Test\n    public void testBuildTree() throws IOException {\n        List<Tuple2<Integer, Integer>> partitions = DAGExpression.group(\"(A->(B->C->D),(A->F)->(G,H,X)->J)\");\n        TreeNode<DAGExpression.TreeNodeId, Object> root = DAGExpression.buildTree(partitions);\n        Assertions.assertEquals(root.getChildrenCount(), 3);\n        System.out.println(\"------------------\");\n        TREE_PRINTER.print(root);\n\n        partitions = DAGExpression.group(\"((A->((B->C->D),(E->F))->(G,H)->J))\");\n        root = DAGExpression.buildTree(partitions);\n        Assertions.assertEquals(root.getChildrenCount(), 1);\n        System.out.println(\"\\n------------------\");\n        TREE_PRINTER.print(root);\n\n        partitions = DAGExpression.group(\"(A->((B->C->D),(E->F))->(G,H)->J)\");\n        root = DAGExpression.buildTree(partitions);\n        Assertions.assertEquals(root.getChildrenCount(), 2);\n        System.out.println(\"\\n------------------\");\n        TREE_PRINTER.print(root);\n    }\n    */\n\n\n\n    @Test\n    public void testEdgesEquals() {\n        assertEdgesEquals(\n            \"(A)->((B),(C))->(E),(F->G)->(H)\",\n            \"[<0:0:Start -> 1:1:A>, <1:1:A -> 1:1:B>, <1:1:A -> 1:1:C>, <1:1:B -> 1:1:E>, <1:1:B -> 1:1:F>, <1:1:E -> 1:1:H>, <1:1:H -> 0:0:End>, <1:1:F -> 1:1:G>, <1:1:G -> 1:1:H>, <1:1:C -> 1:1:E>, <1:1:C -> 1:1:F>]\"\n        );\n        assertEdgesEquals(\n            \"(A->((B->C->D),(A->F))->(G,H,X)->J);(A->Y)\",\n            \"[<0:0:Start -> 1:1:A>, <0:0:Start -> 2:3:A>, <1:1:A -> 1:1:B>, <1:1:A -> 1:2:A>, <1:1:B -> 1:1:C>, <1:1:C -> 1:1:D>, <1:1:D -> 1:1:G>, <1:1:D -> 1:1:H>, <1:1:D -> 1:1:X>, <1:1:G -> 1:1:J>, <1:1:J -> 0:0:End>, <1:1:H -> 1:1:J>, <1:1:X -> 1:1:J>, <1:2:A -> 1:1:F>, <1:1:F -> 1:1:G>, <1:1:F -> 1:1:H>, <1:1:F -> 1:1:X>, <2:3:A -> 2:1:Y>, <2:1:Y -> 0:0:End>]\"\n        );\n        assertEdgesEquals(\n            \"(A,B)->(C->D),(A->E),(B->F)->G\",\n            \"[<0:0:Start -> 1:1:A>, <0:0:Start -> 1:2:B>, <1:1:A -> 1:1:C>, <1:1:A -> 1:2:A>, <1:1:A -> 1:1:B>, <1:1:C -> 1:1:D>, <1:1:D -> 1:1:G>, <1:1:G -> 0:0:End>, <1:2:A -> 1:1:E>, <1:1:E -> 1:1:G>, <1:1:B -> 1:1:F>, <1:1:F -> 1:1:G>, <1:2:B -> 1:1:C>, <1:2:B -> 1:2:A>, <1:2:B -> 1:1:B>]\"\n        );\n        assertEdgesEquals(\n            \"A,B->C,D,C\",\n            \"[<0:0:Start -> 1:1:A>, <0:0:Start -> 1:1:B>, <1:1:A -> 1:1:C>, <1:1:A -> 1:1:D>, <1:1:A -> 1:2:C>, <1:1:C -> 0:0:End>, <1:1:D -> 0:0:End>, <1:2:C -> 0:0:End>, <1:1:B -> 1:1:C>, <1:1:B -> 1:1:D>, <1:1:B -> 1:2:C>]\"\n        );\n        assertEdgesEquals(\n            \"A,B->(C->D),E->F\",\n            \"[<0:0:Start -> 1:1:A>, <0:0:Start -> 1:1:B>, <1:1:A -> 1:1:C>, <1:1:A -> 1:1:E>, <1:1:C -> 1:1:D>, <1:1:D -> 1:1:F>, <1:1:F -> 0:0:End>, <1:1:E -> 1:1:F>, <1:1:B -> 1:1:C>, <1:1:B -> 1:1:E>]\"\n        );\n        assertEdgesEquals(\n            \"A,B->(C->D),(E)->F\",\n            \"[<0:0:Start -> 1:1:A>, <0:0:Start -> 1:1:B>, <1:1:A -> 1:1:C>, <1:1:A -> 1:1:E>, <1:1:C -> 1:1:D>, <1:1:D -> 1:1:F>, <1:1:F -> 0:0:End>, <1:1:E -> 1:1:F>, <1:1:B -> 1:1:C>, <1:1:B -> 1:1:E>]\"\n        );\n        assertEdgesEquals(\n            \"A->B;A->B\",\n            \"[<0:0:Start -> 1:1:A>, <0:0:Start -> 2:2:A>, <1:1:A -> 1:1:B>, <1:1:B -> 0:0:End>, <2:2:A -> 2:2:B>, <2:2:B -> 0:0:End>]\"\n        );\n    }\n\n\n\n    @Test\n    public void testDAGNode() {\n        Assertions.assertSame(DAGNode.fromString(DAGNode.START.toString()), DAGNode.START);\n        Assertions.assertSame(DAGNode.fromString(DAGNode.END.toString()), DAGNode.END);\n        Assertions.assertEquals(DAGNode.fromString(\"1:1:test\").toString(), \"1:1:test\");\n        Assertions.assertEquals(DAGNode.fromString(\"1:1:test:ANY\").getName(), \"test:ANY\");\n        Assertions.assertEquals(DAGNode.fromString(\"1:1:test:ALL\").getName(), \"test:ALL\");\n        Assertions.assertEquals(DAGNode.fromString(\"1:1:test:ALL\").toString(), \"1:1:test:ALL\");\n    }\n\n\n    // ------------------------------------------------------------------------\n\n    private static void assertSameExpression(String text1, String text2) {\n        System.out.println(\"\\n\\n------\\n\\n\");\n        Assertions.assertEquals(DAGExpression.parse(text1), DAGExpression.parse(text2));\n    }\n\n    private static void assertEdgesEquals(String expression, String edges) {\n        System.out.println(\"\\n\\n------\\n\\n\");\n        System.out.println(expression);\n        Graph<DAGNode> graph = DAGExpression.parse(expression);\n        Assertions.assertEquals(edges, graph.edges().toString());\n        System.out.println(expression + \" graph result: \" + graph);\n    }\n\n}\n"
