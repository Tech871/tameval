[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apolloconfig/apollo-java"
sha = "d8115d920ae21a1300827661492b5e776853258f"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl apollo-client -Dtest=NullClientThreadPoolMonitorApiTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl apollo-client -DtargetClasses=**.NullClientThreadPoolMonitorApi  -DtargetTests=**.NullClientThreadPoolMonitorApiTest  -DoutputFormats=XML"
coverage_report_path = "apollo-client/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "apollo-client/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 57.0
original_coverage = 57.0
mutation_kill_rate = 25.0
original_mutation_kill_rate = 25.0
covered_lines = [ 26, 29, 33, 38,]
missed_lines = [ 43, 48, 53,]

[input_info]
test_file_path = "apollo-client/src/test/java/com/ctrip/framework/apollo/monitor/internal/listener/impl/NullClientThreadPoolMonitorApiTest.java"
focal_file_path = "apollo-client/src/main/java/com/ctrip/framework/apollo/monitor/internal/listener/impl/NullClientThreadPoolMonitorApi.java"
test_file_url = "https://github.com/apolloconfig/apollo-java/blob/d8115d920ae21a1300827661492b5e776853258f/apollo-client/src/test/java/com/ctrip/framework/apollo/monitor/internal/listener/impl/NullClientThreadPoolMonitorApiTest.java"
focal_file_url = "https://github.com/apolloconfig/apollo-java/blob/d8115d920ae21a1300827661492b5e776853258f/apollo-client/src/main/java/com/ctrip/framework/apollo/monitor/internal/listener/impl/NullClientThreadPoolMonitorApi.java"
first_commit_date = "2024-10-19"
last_commit_date = "2024-10-19"
test_file_content = "/*\n * Copyright 2022 Apollo Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage com.ctrip.framework.apollo.monitor.internal.listener.impl;\n\nimport static org.junit.Assert.*;\n\nimport com.ctrip.framework.apollo.monitor.api.ApolloClientThreadPoolMonitorApi.ApolloThreadPoolInfo;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.util.Map;\n\npublic class NullClientThreadPoolMonitorApiTest {\n\n  private NullClientThreadPoolMonitorApi monitorApi;\n\n  @Before\n  public void setUp() {\n    monitorApi = new NullClientThreadPoolMonitorApi();\n  }\n\n  @Test\n  public void testGetThreadPoolInfo() {\n    Map<String, ApolloThreadPoolInfo> threadPoolInfo = monitorApi.getThreadPoolInfo();\n\n    assertNotNull(threadPoolInfo);\n    assertTrue(threadPoolInfo.isEmpty());\n  }\n\n  @Test\n  public void testGetRemoteConfigRepositoryThreadPoolInfo() {\n    ApolloThreadPoolInfo info = monitorApi.getRemoteConfigRepositoryThreadPoolInfo();\n    assertNotNull(info);\n    assertEquals(0, info.getPoolSize());\n  }\n  \n}\n"
