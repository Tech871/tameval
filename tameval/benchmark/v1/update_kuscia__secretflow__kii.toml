[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.22"

[repo_info]
repository = "secretflow/kuscia"
sha = "5386c4265acf18857c87aa008d13bb6fda2d828e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/agent/local/store/kii/kii.go pkg/agent/local/store/kii/kii_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/agent/local/store/kii/kii.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 68.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 41, 42, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,]
missed_lines = [ 43, 44, 45, 97, 98, 99, 100, 102,]

[input_info]
test_file_path = "pkg/agent/local/store/kii/kii_test.go"
focal_file_path = "pkg/agent/local/store/kii/kii.go"
test_file_url = "https://github.com/secretflow/kuscia/blob/5386c4265acf18857c87aa008d13bb6fda2d828e/pkg/agent/local/store/kii/kii_test.go"
focal_file_url = "https://github.com/secretflow/kuscia/blob/5386c4265acf18857c87aa008d13bb6fda2d828e/pkg/agent/local/store/kii/kii.go"
first_commit_date = "2024-01-08"
last_commit_date = "2025-02-19"
test_file_content = "// Copyright 2023 Ant Group Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage kii\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestNewImageName(t *testing.T) {\n\ttests := []struct {\n\t\tImage string\n\t\tRepo  string\n\t\tTag   string\n\t}{\n\t\t{\n\t\t\tImage: \"ssecretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8:1.2.0b0\",\n\t\t\tRepo:  \"ssecretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8\",\n\t\t\tTag:   \"1.2.0b0\",\n\t\t},\n\t}\n\n\tfor i, tt := range tests {\n\t\tt.Run(fmt.Sprintf(\"Test %d\", i), func(t *testing.T) {\n\t\t\timageName, _ := NewImageName(tt.Image)\n\t\t\tassert.Equal(t, tt.Repo, imageName.Repo)\n\t\t\tassert.Equal(t, tt.Tag, imageName.Tag)\n\t\t})\n\t}\n}\n\nfunc TestParseImageNameFromPath(t *testing.T) {\n\ttests := []struct {\n\t\tPath  string\n\t\tImage string\n\t\tRepo  string\n\t\tTag   string\n\t}{\n\t\t{\n\t\t\tPath:  \"ssecretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8/1.2.0b0\",\n\t\t\tImage: \"ssecretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8:1.2.0b0\",\n\t\t\tRepo:  \"ssecretflow-registry.cn-hangzhou.cr.aliyuncs.com/secretflow/secretflow-lite-anolis8\",\n\t\t\tTag:   \"1.2.0b0\",\n\t\t},\n\t}\n\n\tfor i, tt := range tests {\n\t\tt.Run(fmt.Sprintf(\"Test %d\", i), func(t *testing.T) {\n\t\t\timageName, err := ParseImageNameFromPath(tt.Path)\n\t\t\tassert.NoError(t, err)\n\t\t\tassert.Equal(t, tt.Image, imageName.Image)\n\t\t\tassert.Equal(t, tt.Repo, imageName.Repo)\n\t\t\tassert.Equal(t, tt.Tag, imageName.Tag)\n\t\t})\n\t}\n}"
