[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "tqec/tqec"
sha = "3c0db694339614f537772a7bf6a183c8ffcb78a7"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=src/tqec/gallery/cz.py -m pytest -q --junit-xml=test_output.xml src/tqec/gallery/cz_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target src.tqec.gallery.cz --unit-test src.tqec.gallery.cz_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target src/tqec/gallery/cz.py --unit-test src/tqec/gallery/cz_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 17.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 14.0
covered_lines = [ 2, 4, 5, 6, 7, 10, 62,]
missed_lines = [ 35, 36, 44, 45, 47, 48, 49, 51, 52, 57, 58, 59, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 87, 88, 90,]

[input_info]
test_file_path = "src/tqec/gallery/cz_test.py"
focal_file_path = "src/tqec/gallery/cz.py"
test_file_url = "https://github.com/tqec/tqec/blob/3c0db694339614f537772a7bf6a183c8ffcb78a7/src/tqec/gallery/cz_test.py"
focal_file_url = "https://github.com/tqec/tqec/blob/3c0db694339614f537772a7bf6a183c8ffcb78a7/src/tqec/gallery/cz.py"
first_commit_date = "2025-02-14"
last_commit_date = "2025-07-14"
test_file_content = "import pytest\nimport pyzx as zx\n\nfrom tqec.gallery.cz import cz\nfrom tqec.utils.exceptions import TQECException\nfrom tqec.utils.position import Position3D\n\n\ndef test_cz_open() -> None:\n    g = cz()\n    assert g.num_ports == 4\n    assert g.num_cubes == 6\n    assert g.spacetime_volume == 2\n    assert g.num_pipes == 5\n    assert len(g.leaf_cubes) == 4\n    assert {*g.ports.keys()} == {\n        \"In_1\",\n        \"Out_1\",\n        \"In_2\",\n        \"Out_2\",\n    }\n    assert g.bounding_box_size() == (2, 3, 3)\n\n\ndef test_cz_open_zx() -> None:\n    g = cz().to_zx_graph().g\n    g.set_inputs((0, 3))  # type: ignore\n    g.set_outputs((2, 5))  # type: ignore\n\n    c = zx.qasm(\"\"\"\nqreg q[2];\ncz q[0], q[1];\n\"\"\")\n\n    assert zx.compare_tensors(c, g)\n\n\ndef test_cz_resolve_ports() -> None:\n    port_positions = (\n        Position3D(0, 0, 0),\n        Position3D(1, -1, 1),\n        Position3D(0, 0, 2),\n        Position3D(1, 1, 1),\n    )\n    g = cz(\"XI -> XZ\")\n    assert [str(g[pos].kind) for pos in port_positions] == [\"XZX\", \"XZZ\", \"XZX\", \"XZZ\"]\n\n    g = cz([\"XI -> XZ\", \"IZ -> IZ\"])\n    assert [str(g[pos].kind) for pos in port_positions] == [\"XZX\", \"XZZ\", \"XZX\", \"XZZ\"]\n\n    g = cz([\"ZX -> IX\"])\n    assert [str(g[pos].kind) for pos in port_positions] == [\"XZZ\", \"XXZ\", \"XZZ\", \"XXZ\"]\n\n    g = cz([\"ZZ -> ZZ\"])\n    assert [str(g[pos].kind) for pos in port_positions] == [\"XZZ\", \"XZZ\", \"XZZ\", \"XZZ\"]\n\n    with pytest.raises(\n        TQECException,\n        match=\"Y basis initialization/measurements are not supported yet.\",\n    ):\n        cz(\"YI -> XZ\")\n\n    with pytest.raises(TQECException, match=\"X_ -> XX is not a valid flow for the CZ gate.\"):\n        cz(\"XI -> XX\")\n\n    with pytest.raises(TQECException, match=\"Port 0 fails to support both X and Z observable.\"):\n        cz([\"XI -> XZ\", \"ZI -> ZI\"])\n\n\n@pytest.mark.parametrize(\n    \"flows, num_surfaces, external_stabilizers\",\n    [\n        ([\"ZZ -> ZZ\"], 2, {\"ZIZI\", \"IZIZ\"}),\n        ([\"XI -> XZ\"], 2, {\"IZIZ\", \"XIXZ\"}),\n        (None, 4, {\"IXZX\", \"ZIZI\", \"IZIZ\", \"XIXZ\"}),\n    ],\n)\ndef test_cz_correlation_surface(\n    flows: list[str] | None, num_surfaces: int, external_stabilizers: set[str]\n) -> None:\n    io_ports = [0, 3, 2, 5]\n\n    g = cz(flows)\n    correlation_surfaces = g.find_correlation_surfaces()\n    assert len(correlation_surfaces) == num_surfaces\n    assert {s.external_stabilizer(io_ports) for s in correlation_surfaces} == external_stabilizers\n\n\ndef test_cz_ports_filling() -> None:\n    g = cz()\n    filled_graphs = g.fill_ports_for_minimal_simulation()\n    assert len(filled_graphs) == 2\n    assert filled_graphs[0].graph == cz([\"XI -> XZ\", \"IZ -> IZ\"])\n    assert filled_graphs[1].graph == cz([\"ZI -> ZI\", \"IX -> ZX\"])"
