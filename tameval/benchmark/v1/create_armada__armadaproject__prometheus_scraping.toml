[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "armadaproject/armada"
sha = "5765dcb8fc87b811dfe3cdf254e04c6587afa142"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/executor/utilisation/prometheus_scraping.go internal/executor/utilisation/prometheus_scraping_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/executor/utilisation/prometheus_scraping.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 83.05
original_coverage = 95.0
original_mutation_kill_rate = 71.0
covered_lines = [ 20, 21, 22, 23, 24, 28, 29, 45, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 82, 83, 87, 88, 89, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 117,]
missed_lines = [ 25, 26, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 61, 62, 63, 64, 84, 85, 86, 107, 108, 109,]

[input_info]
test_file_path = "internal/executor/utilisation/prometheus_scraping_test.go"
focal_file_path = "internal/executor/utilisation/prometheus_scraping.go"
test_file_url = "https://github.com/armadaproject/armada/blob/5765dcb8fc87b811dfe3cdf254e04c6587afa142/internal/executor/utilisation/prometheus_scraping_test.go"
focal_file_url = "https://github.com/armadaproject/armada/blob/5765dcb8fc87b811dfe3cdf254e04c6587afa142/internal/executor/utilisation/prometheus_scraping.go"
first_commit_date = "2023-01-27"
last_commit_date = "2025-01-20"
test_file_content = "package utilisation\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\n\tdiscovery \"k8s.io/api/discovery/v1\"\n\n\t\"github.com/prometheus/common/model\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestGetUrlsToScrape_WHenEndPointIsGood_ReturnsUrl(t *testing.T) {\n\tendpointSlices := []*discovery.EndpointSlice{makeGoodEndpointSlice(\"10.0.0.1\", \"node1\")}\n\tresult := getUrlsToScrape(endpointSlices, []string{\"node1\", \"node2\"})\n\n\tassert.Equal(t, 1, len(result))\n\tassert.Equal(t, \"http://10.0.0.1:9400/metrics\", result[0])\n}\n\n\n\n\nfunc TestScrapeUrls_OneSuccessResponse(t *testing.T) {\n\turl := \"http://working\"\n\n\tclient := makeMockHttpGetter()\n\tclient.addSuccessResponse(url, testResponseHeader(), testResponseText())\n\n\tresult := scrapeUrls([]string{url}, []string{\"DCGM_FI_DEV_MEM_COPY_UTIL\"}, client)\n\n\tvalidateParsed(t, result)\n}\n\n\n\n\nfunc validateParsed(t *testing.T, result model.Vector) {\n\tassert.Equal(t, 2, len(result))\n\n\tassert.Equal(t, model.LabelValue(\"DCGM_FI_DEV_MEM_COPY_UTIL\"), result[0].Metric[model.MetricNameLabel])\n\tassert.Equal(t, model.LabelValue(\"0\"), result[0].Metric[\"gpu\"])\n\tassert.Equal(t, model.LabelValue(\"test1\"), result[0].Metric[\"pod\"])\n\tassert.Equal(t, model.LabelValue(\"GPU-0fad1988-2940-49d6-e05a-713ae4a9ea37\"), result[0].Metric[\"UUID\"])\n\tassert.Equal(t, 21.0, float64(result[0].Value))\n\n\tassert.Equal(t, model.LabelValue(\"DCGM_FI_DEV_MEM_COPY_UTIL\"), result[1].Metric[model.MetricNameLabel])\n\tassert.Equal(t, model.LabelValue(\"test2\"), result[1].Metric[\"pod\"])\n\tassert.Equal(t, 2.0, float64(result[1].Value))\n}\n\nfunc makeGoodEndpointSlice(ipAddress string, nodeName string) *discovery.EndpointSlice {\n\tvar portNum int32 = 9400\n\tready := true\n\tserving := true\n\tterminating := false\n\treturn &discovery.EndpointSlice{\n\t\tEndpoints: []discovery.Endpoint{\n\t\t\t{\n\t\t\t\tAddresses: []string{ipAddress},\n\t\t\t\tNodeName:  &nodeName,\n\t\t\t\tConditions: discovery.EndpointConditions{\n\t\t\t\t\tReady:       &ready,\n\t\t\t\t\tServing:     &serving,\n\t\t\t\t\tTerminating: &terminating,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tPorts: []discovery.EndpointPort{\n\t\t\t{Port: &portNum},\n\t\t},\n\t}\n}\n\nfunc testResponseText() string {\n\treturn `# HELP DCGM_FI_DEV_MEM_COPY_UTIL Memory utilization (in %).\n\t# TYPE DCGM_FI_DEV_MEM_COPY_UTIL gauge\n\tDCGM_FI_DEV_MEM_COPY_UTIL{gpu=\"0\",UUID=\"GPU-0fad1988-2940-49d6-e05a-713ae4a9ea37\",device=\"nvidia0\",modelName=\"Tesla V100-SXM2-32GB\",Hostname=\"nvidia-dcgm-exporter-sv6g2\",container=\"gputest\",namespace=\"gpu-operator\",pod=\"test1\"} 21\n\tDCGM_FI_DEV_MEM_COPY_UTIL{gpu=\"1\",UUID=\"GPU-4020fc4b-b520-24af-5a2d-b77b33a194a5\",device=\"nvidia1\",modelName=\"Tesla V100-SXM2-32GB\",Hostname=\"nvidia-dcgm-exporter-sv6g2\",container=\"gputest\",namespace=\"gpu-operator\",pod=\"test2\"} 2\n\t# HELP DCGM_FI_DEV_ENC_UTIL Encoder utilization (in %).\n\t# TYPE DCGM_FI_DEV_ENC_UTIL gauge\n\tDCGM_FI_DEV_ENC_UTIL{gpu=\"0\",UUID=\"GPU-0fad1988-2940-49d6-e05a-713ae4a9ea37\",device=\"nvidia0\",modelName=\"Tesla V100-SXM2-32GB\",Hostname=\"nvidia-dcgm-exporter-sv6g2\",container=\"gputest\",namespace=\"gpu-operator\",pod=\"test1\"} 0\n\tDCGM_FI_DEV_ENC_UTIL{gpu=\"1\",UUID=\"GPU-4020fc4b-b520-24af-5a2d-b77b33a194a5\",device=\"nvidia1\",modelName=\"Tesla V100-SXM2-32GB\",Hostname=\"nvidia-dcgm-exporter-sv6g2\",container=\"gputest\",namespace=\"gpu-operator\",pod=\"test2\"} 0\n\t`\n}\n\nfunc testResponseHeader() http.Header {\n\treturn http.Header{\"Content-Type\": []string{\"text/plain; charset=utf-8\"}}\n}\n\nfunc makeTestResponse() *http.Response {\n\treturn makeResponse(testResponseHeader(), testResponseText())\n}\n\nfunc makeResponse(header http.Header, body string) *http.Response {\n\tresponse := http.Response{\n\t\tHeader: header,\n\t\tBody:   io.NopCloser(strings.NewReader((body))),\n\t}\n\treturn &response\n}\n\nfunc makeMockHttpGetter() *mockHttpGetter {\n\treturn &mockHttpGetter{\n\t\tresponses: map[string]struct {\n\t\t\thttp.Header\n\t\t\tstring\n\t\t\terror\n\t\t}{},\n\t}\n}\n\ntype mockHttpGetter struct {\n\tresponses map[string]struct {\n\t\thttp.Header\n\t\tstring\n\t\terror\n\t}\n}\n\nfunc (g mockHttpGetter) Get(url string) (response *http.Response, err error) {\n\tresult := g.responses[url]\n\tif result.error != nil {\n\t\treturn nil, result.error\n\t}\n\treturn makeResponse(result.Header, result.string), nil\n}\n\nfunc (g mockHttpGetter) addSuccessResponse(url string, header http.Header, body string) {\n\tg.addResponse(url, header, body, nil)\n}\n\nfunc (g mockHttpGetter) addFailureResponse(url string, err error) {\n\tg.addResponse(url, nil, \"\", err)\n}\n\nfunc (g mockHttpGetter) addResponse(url string, header http.Header, body string, err error) {\n\tg.responses[url] = struct {\n\t\thttp.Header\n\t\tstring\n\t\terror\n\t}{header, body, err}\n}\n"
