[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "synfinatic/aws-sso-cli"
sha = "7bd3daa96362d3ec107ffa9f1714f4808e089051"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/url/url.go internal/url/url_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/url/url.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 29.25
original_coverage = 92.0
mutation_kill_rate = 33.33
original_mutation_kill_rate = nan
covered_lines = [ 38, 39, 40, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 278, 279, 280, 281, 282, 285, 373, 374, 375, 376, 377, 378, 379,]
missed_lines = [ 100, 101, 102, 105, 106, 107, 108, 109, 110, 125, 126, 127, 175, 176, 177, 178, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 229, 230, 232, 233, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 253, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 340, 341, 342, 348, 349, 350, 351, 352, 360, 361, 362, 363, 364, 365, 366, 367, 369,]

[input_info]
test_file_path = "internal/url/url_test.go"
focal_file_path = "internal/url/url.go"
test_file_url = "https://github.com/synfinatic/aws-sso-cli/blob/7bd3daa96362d3ec107ffa9f1714f4808e089051/internal/url/url_test.go"
focal_file_url = "https://github.com/synfinatic/aws-sso-cli/blob/7bd3daa96362d3ec107ffa9f1714f4808e089051/internal/url/url.go"
first_commit_date = "2022-05-13"
last_commit_date = "2025-01-23"
test_file_content = "package url\n\n/*\n * AWS SSO CLI\n * Copyright (c) 2021-2025 Aaron Turner  <synfinatic at gmail dot com>\n *\n * This program is free software: you can redistribute it\n * and/or modify it under the terms of the GNU General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or with the authors permission any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nvar checkValue string\nvar checkBrowser string\n\nfunc testUrlOpener(url string) error {\n\tcheckBrowser = \"default browser\"\n\tcheckValue = url\n\treturn nil\n}\n\nfunc testUrlOpenerWith(url, browser string) error {\n\tcheckBrowser = browser\n\tcheckValue = url\n\treturn nil\n}\n\nfunc testClipboardWriter(url string) error {\n\tcheckValue = url\n\treturn nil\n}\n\nfunc testUrlOpenerError(url string) error {\n\treturn fmt.Errorf(\"there was an error\")\n}\n\nfunc testUrlOpenerWithError(url, browser string) error {\n\treturn fmt.Errorf(\"there was an error\")\n}\n\n\nfunc TestFirefoxContainersUrl(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, \"ext+container:name=Test&url=https%3A%2F%2Fsynfin.net&color=blue&icon=fingerprint\",\n\t\tformatContainerUrl(FIREFOX_CONTAINER_FORMAT, \"https://synfin.net\", \"Test\", \"blue\", \"fingerprint\"))\n\n\tassert.Equal(t, \"ext+container:name=Testy&url=https%3A%2F%2Fsynfin.net&color=turquoise&icon=briefcase\",\n\t\tformatContainerUrl(FIREFOX_CONTAINER_FORMAT, \"https://synfin.net\", \"Testy\", \"Bad\", \"Value\"))\n\n\tassert.Equal(t, \"ext+granted-containers:name=Testy&url=https%3A%2F%2Fsynfin.net&color=turquoise&icon=briefcase\",\n\t\tformatContainerUrl(GRANTED_CONTAINER_FORMAT, \"https://synfin.net\", \"Testy\", \"\", \"\"))\n}\n\n\n\n\nfunc TestNewAction(t *testing.T) {\n\tt.Parallel()\n\ta, err := NewAction(\"clip\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, Clip, a)\n\n\ta, err = NewAction(\"missing\")\n\tassert.Error(t, err)\n\tassert.Equal(t, Action(Open), a)\n\n\tb, err := NewConfigProfilesAction(\"exec\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, ConfigProfilesAction(ConfigProfilesExec), b)\n\n\tb, err = NewConfigProfilesAction(\"missing\")\n\tassert.Error(t, err)\n\tassert.Equal(t, ConfigProfilesAction(ConfigProfilesOpen), b)\n}\n\n\n\nfunc TestAWSConsoleUrl(t *testing.T) {\n\tt.Parallel()\n\tu := AWSConsoleUrl(\"cn-north-1\", \"cn-northwest-1\")\n\tassert.Equal(t, u, \"https://console.amazonaws.cn/console/home?region=cn-northwest-1\")\n\tpUrl, err := url.Parse(u)\n\tassert.NoError(t, err)\n\t_, err = net.LookupIP(pUrl.Hostname())\n\tassert.NoError(t, err)\n\n\tu = AWSConsoleUrl(\"us-gov-east-1\", \"us-gov-west-1\")\n\tassert.Equal(t, u, \"https://console.amazonaws-us-gov.com/console/home?region=us-gov-west-1\")\n\tpUrl, err = url.Parse(u)\n\tassert.NoError(t, err)\n\t_, err = net.LookupIP(pUrl.Hostname())\n\tassert.NoError(t, err)\n\n\tu = AWSConsoleUrl(\"us-east-1\", \"us-west-2\")\n\tassert.Equal(t, u, \"https://console.aws.amazon.com/console/home?region=us-west-2\")\n\tpUrl, err = url.Parse(u)\n\tassert.NoError(t, err)\n\t_, err = net.LookupIP(pUrl.Hostname())\n\tassert.NoError(t, err)\n}\n"
