[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dflib/dflib"
sha = "9486d42d77375b4de8bf8df9770f2952225db1a4"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl dflib -Dtest=SeriesTruncatorTest"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl dflib -DtargetClasses=**.SeriesTruncator  -DtargetTests=**.SeriesTruncatorTest  -DoutputFormats=XML"
coverage_report_path = "dflib/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "dflib/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 87.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "dflib/src/test/java/org/dflib/print/SeriesTruncatorTest.java"
focal_file_path = "dflib/src/main/java/org/dflib/print/SeriesTruncator.java"
test_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib/src/test/java/org/dflib/print/SeriesTruncatorTest.java"
focal_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib/src/main/java/org/dflib/print/SeriesTruncator.java"
first_commit_date = "2024-01-02"
last_commit_date = "2025-03-01"
test_file_content = "package org.dflib.print;\n\nimport org.dflib.Series;\nimport org.dflib.series.IntSequenceSeries;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class SeriesTruncatorTest {\n\n    @Test\n    public void create_Odd() {\n        Series<Integer> s = new IntSequenceSeries(0, 10);\n        SeriesTruncator tr = SeriesTruncator.create(s, 5);\n\n        assertSame(s, tr.series);\n        assertTrue(tr.truncated);\n        assertEquals(3, tr.top);\n        assertEquals(2, tr.bottom);\n    }\n\n    @Test\n    public void create_Even() {\n        Series<Integer> s = new IntSequenceSeries(0, 10);\n        SeriesTruncator tr = SeriesTruncator.create(s, 6);\n\n        assertSame(s, tr.series);\n        assertTrue(tr.truncated);\n        assertEquals(3, tr.top);\n        assertEquals(3, tr.bottom);\n    }\n\n    @Test\n    public void create_Two() {\n        Series<Integer> s = new IntSequenceSeries(0, 10);\n        SeriesTruncator tr = SeriesTruncator.create(s, 2);\n\n        assertSame(s, tr.series);\n        assertTrue(tr.truncated);\n        assertEquals(1, tr.top);\n        assertEquals(1, tr.bottom);\n    }\n\n    @Test\n    public void create_One() {\n        Series<Integer> s = new IntSequenceSeries(0, 10);\n        SeriesTruncator tr = SeriesTruncator.create(s, 1);\n\n        assertSame(s, tr.series);\n        assertTrue(tr.truncated);\n        assertEquals(1, tr.top);\n        assertEquals(0, tr.bottom);\n    }\n\n    @Test\n    public void create_Zero() {\n        Series<Integer> s = new IntSequenceSeries(0, 10);\n        SeriesTruncator tr = SeriesTruncator.create(s, 0);\n\n        assertSame(s, tr.series);\n        assertTrue(tr.truncated);\n        assertEquals(0, tr.top);\n        assertEquals(0, tr.bottom);\n    }\n}"
