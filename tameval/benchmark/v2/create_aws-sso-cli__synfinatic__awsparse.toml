[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "synfinatic/aws-sso-cli"
sha = "23193a6e70381add71c46ebf22c0a272b679f94e"
bench_version = 2

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/awsparse/awsparse.go internal/awsparse/awsparse_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/awsparse/awsparse.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 29.0
original_coverage = 100.0
mutation_kill_rate = 16.0
original_mutation_kill_rate = 70.0
covered_lines = [ 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104,]
missed_lines = [ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 42, 43, 44, 47, 48, 49, 50, 52, 56, 57, 58, 59, 61, 65, 66, 67, 68, 71, 72, 76, 77, 78, 79, 80,]

[input_info]
test_file_path = "internal/awsparse/awsparse_test.go"
focal_file_path = "internal/awsparse/awsparse.go"
test_file_url = "https://github.com/synfinatic/aws-sso-cli/blob/23193a6e70381add71c46ebf22c0a272b679f94e/internal/awsparse/awsparse_test.go"
focal_file_url = "https://github.com/synfinatic/aws-sso-cli/blob/23193a6e70381add71c46ebf22c0a272b679f94e/internal/awsparse/awsparse.go"
first_commit_date = "2025-08-05"
last_commit_date = "2025-08-05"
test_file_content = "package awsparse\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\n\n\n\nfunc TestAccountToInt64(t *testing.T) {\n\tt.Parallel()\n\n\t_, err := AccountIdToInt64(\"\")\n\tassert.Error(t, err)\n\n\ta, err := AccountIdToInt64(\"12345\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, int64(12345), a)\n\n\ta, err = AccountIdToInt64(\"0012345\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, int64(12345), a)\n\n\t_, err = AccountIdToInt64(\"0012345678912123344455323423423423424\")\n\tassert.Error(t, err)\n\n\t_, err = AccountIdToInt64(\"abdcefgi\")\n\tassert.Error(t, err)\n\n\t_, err = AccountIdToInt64(\"-1\")\n\tassert.Error(t, err)\n\n\ta, err = AccountIdToInt64(\"7.2668187369e+10\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, int64(72668187369), a)\n\n\ta, err = AccountIdToInt64(\"1e+1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, int64(10), a)\n\n\t_, err = AccountIdToInt64(\"10e+s4\")\n\tassert.Error(t, err)\n}\n"
