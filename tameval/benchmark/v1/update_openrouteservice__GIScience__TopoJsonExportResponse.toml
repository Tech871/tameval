[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "GIScience/openrouteservice"
sha = "58549a4d0a2affe96463f3ef81081dd95411b243"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl ors-api -Dtest=TopoJsonExportResponseTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl ors-api -DtargetClasses=**.TopoJsonExportResponse  -DtargetTests=**.TopoJsonExportResponseTest  -DoutputFormats=XML"
coverage_report_path = "ors-api/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "ors-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 72.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "ors-api/src/test/java/org/heigit/ors/api/responses/export/topojson/TopoJsonExportResponseTest.java"
focal_file_path = "ors-api/src/main/java/org/heigit/ors/api/responses/export/topojson/TopoJsonExportResponse.java"
test_file_url = "https://github.com/GIScience/openrouteservice/blob/58549a4d0a2affe96463f3ef81081dd95411b243/ors-api/src/test/java/org/heigit/ors/api/responses/export/topojson/TopoJsonExportResponseTest.java"
focal_file_url = "https://github.com/GIScience/openrouteservice/blob/58549a4d0a2affe96463f3ef81081dd95411b243/ors-api/src/main/java/org/heigit/ors/api/responses/export/topojson/TopoJsonExportResponse.java"
first_commit_date = "2024-12-16"
last_commit_date = "2025-01-08"
test_file_content = "package org.heigit.ors.api.responses.export.topojson;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.annotation.JsonAppend;\nimport org.heigit.ors.common.Pair;\nimport org.heigit.ors.export.ExportResult;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.GeometryFactory;\n\nimport java.util.*;\n\nclass TopoJsonExportResponseTest {\n\n    TopoJsonExportResponse topoJsonExportResponse;\n    String topologyLayerName = \"network\";\n    private static final GeometryFactory geometryFactory = new GeometryFactory();\n\n    // setup function\n    @BeforeEach\n    void setUp() {\n        Geometry geometry1 = Geometry.builder()\n                .type(\"LineString\")\n                .arcs(List.of(0, 1))\n                .properties(Properties.builder().osmId(41106L).build())\n                .build();\n        Geometry geometry2 = Geometry.builder()\n                .type(\"LineString\")\n                .arcs(List.of(2))\n                .properties(Properties.builder().osmId(41107L).build())\n                .build();\n        Layer layer = Layer.builder()\n                .type(\"GeometryCollection\")\n                .geometries(List.of(geometry1, geometry2))\n                .build();\n        Arc arc1 = Arc.builder()\n                .coordinates(List.of(\n                        List.of(-72.816497, 19.948588),\n                        List.of(-72.816354, 19.948234),\n                        List.of(-72.816335, 19.948205),\n                        List.of(-72.816297, 19.948193),\n                        List.of(-72.816213, 19.948215),\n                        List.of(-72.816098, 19.948245),\n                        List.of(-72.816021, 19.948248)\n                ))\n                .build();\n        Arc arc2 = Arc.builder()\n                .coordinates(List.of(\n                        List.of(-72.816021, 19.948248),\n                        List.of(-72.815938, 19.948247),\n                        List.of(-72.815861, 19.948224),\n                        List.of(-72.815746, 19.948186),\n                        List.of(-72.815574, 19.948146)\n                ))\n                .build();\n        Arc arc3 = Arc.builder()\n                .coordinates(List.of(\n                        List.of(-72.816021, 19.948248),\n                        List.of(-72.815574, 19.948146)\n                ))\n                .build();\n        topoJsonExportResponse = TopoJsonExportResponse.builder()\n                .type(\"Topology\")\n                .objects(Network.builder().network(layer).build())\n                .bbox(List.of(-72.822573, 19.947123, -72.81259, 19.952703))\n                .arcs(List.of(arc1, arc2, arc3))\n                .build();\n\n    }\n\n    @Test\n    void testTopoJsonSerialization() throws JsonProcessingException {\n        // Serialization with jackson\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        String jsonString = objectMapper.writeValueAsString(topoJsonExportResponse);\n\n        // Test the serialization\n        JsonNode jsonNode = objectMapper.readTree(jsonString);\n        Assertions.assertEquals(jsonNode.get(\"type\").asText(), topoJsonExportResponse.getType());\n        for (int i = 0; i < topoJsonExportResponse.getBbox().size(); i++) {\n            Assertions.assertEquals(jsonNode.get(\"bbox\").get(i).asDouble(), topoJsonExportResponse.getBbox().get(i));\n        }\n        for (int i = 0; i < topoJsonExportResponse.getArcs().size(); i++) {\n            for (int j = 0; j < topoJsonExportResponse.getArcs().get(i).getCoordinates().size(); j++) {\n                for (int k = 0; k < topoJsonExportResponse.getArcs().get(i).getCoordinates().get(j).size(); k++) {\n                    Assertions.assertEquals(jsonNode.get(\"arcs\").get(i).get(j).get(k).asDouble(), topoJsonExportResponse.getArcs().get(i).getCoordinates().get(j).get(k));\n                }\n            }\n        }\n        Assertions.assertEquals(1, jsonNode.get(\"objects\").size());\n        Assertions.assertEquals(jsonNode.get(\"objects\").get(\"network\").get(\"type\").asText(), topoJsonExportResponse.getObjects().getNetwork().getType());\n        for (int j = 0; j < topoJsonExportResponse.getObjects().getNetwork().getGeometries().size(); j++) {\n            Assertions.assertEquals(jsonNode.get(\"objects\").get(\"network\").get(\"geometries\").get(j).get(\"type\").asText(), topoJsonExportResponse.getObjects().getNetwork().getGeometries().get(j).getType());\n            for (int k = 0; k < topoJsonExportResponse.getObjects().getNetwork().getGeometries().get(j).getArcs().size(); k++) {\n                Assertions.assertEquals(jsonNode.get(\"objects\").get(\"network\").get(\"geometries\").get(j).get(\"arcs\").get(k).asInt(), topoJsonExportResponse.getObjects().getNetwork().getGeometries().get(j).getArcs().get(k));\n            }\n            Assertions.assertEquals(jsonNode.get(\"objects\").get(\"network\").get(\"geometries\").get(j).get(\"properties\").get(\"osm_id\").asText(), topoJsonExportResponse.getObjects().getNetwork().getGeometries().get(j).getProperties().getOsmId().toString());\n        }\n    }\n\n    @Test\n    void testEmptyTopoJsonObjectSerialization() throws JsonProcessingException {\n        TopoJsonExportResponse emptyTopoJsonExportResponse = TopoJsonExportResponse.builder().build();\n        ObjectMapper objectMapper = new ObjectMapper();\n        String jsonString = objectMapper.writeValueAsString(emptyTopoJsonExportResponse);\n        JsonNode jsonNode = objectMapper.readTree(jsonString);\n        Assertions.assertEquals(\"Topology\", emptyTopoJsonExportResponse.getType());\n        Assertions.assertEquals(0, jsonNode.get(\"bbox\").size());\n        Assertions.assertEquals(0, jsonNode.get(\"arcs\").size());\n    }\n\n    @Test\n    void testFromExportResult() {\n        ExportResult exportResult = new ExportResult();\n        exportResult.addLocation(0, new Coordinate(0.0, 0.0));\n        exportResult.addLocation(1, new Coordinate(1.0, 1.0));\n        exportResult.addLocation(2, new Coordinate(2.0, 2.0));\n        exportResult.addLocation(3, new Coordinate(3.0, 3.0));\n        exportResult.addLocation(4, new Coordinate(4.0, 4.0));\n\n        exportResult.addEdge(new Pair<>(0, 1), 1.0);\n        exportResult.addEdge(new Pair<>(1, 2), 2.0);\n        exportResult.addEdge(new Pair<>(2, 3), 2.0);\n        exportResult.addEdgeExtra(new Pair<>(0, 1), new HashMap<>(Map.of(\"osm_id\", 1L, \"foo\", \"baz\")));\n        exportResult.addEdgeExtra(new Pair<>(1, 2), new HashMap<>(Map.of(\"osm_id\", 1L, \"foo\", \"bar\")));\n        exportResult.addEdgeExtra(new Pair<>(2, 3), new HashMap<>(Map.of(\"osm_id\", 1L, \"foo\", \"bla\")));\n        exportResult.addEdgeExtra(new Pair<>(0, 4), new HashMap<>(Map.of(\"osm_id\", 2L, \"foo\", \"bub\")));\n\n        ExportResult.TopoGeometry topoGeometry1 = new ExportResult.TopoGeometry(1.0F, 1.0F);\n        topoGeometry1.getArcs().put(1, new ExportResult.TopoArc(geometryFactory.createLineString(new Coordinate[]{new Coordinate(0.0, 0.0), new Coordinate(1.0, 1.0)}), 1.0, 0, 1));\n        topoGeometry1.getArcs().put(2, new ExportResult.TopoArc(geometryFactory.createLineString(new Coordinate[]{new Coordinate(1.0, 1.0), new Coordinate(2.0, 2.0)}), 2.0, 1, 2));\n        topoGeometry1.getArcs().put(3, new ExportResult.TopoArc(geometryFactory.createLineString(new Coordinate[]{new Coordinate(2.0, 2.0), new Coordinate(3.0, 3.0)}), 3.0, 2, 3));\n        topoGeometry1.setBothDirections(true);\n        exportResult.getTopoGeometries().put(1L,topoGeometry1);\n        ExportResult.TopoGeometry topoGeometry2 = new ExportResult.TopoGeometry(2.0F, 2.0F);\n        topoGeometry2.getArcs().put(4, new ExportResult.TopoArc(geometryFactory.createLineString(new Coordinate[]{new Coordinate(0.0, 0.0), new Coordinate(4.0, 5.0)}), 4.0, 0, 4));\n        exportResult.getTopoGeometries().put(2L, topoGeometry2);\n\n        TopoJsonExportResponse exportResultToTopoJson = TopoJsonExportResponse.fromExportResult(exportResult);\n        Layer network = exportResultToTopoJson.getObjects().getNetwork();\n        Assertions.assertEquals(\"GeometryCollection\", network.getType());\n        Assertions.assertEquals(2, network.getGeometries().size());\n        Geometry geometry1 = network.getGeometries().get(0);\n        Assertions.assertEquals(\"LineString\", geometry1.getType());\n        Assertions.assertEquals(List.of(0, 1, 2), geometry1.getArcs());\n        Assertions.assertEquals(1.0, geometry1.getProperties().getSpeed());\n        Assertions.assertEquals(1.0, geometry1.getProperties().getSpeedReverse());\n        Assertions.assertEquals(1L, geometry1.getProperties().getOsmId());\n        Geometry geometry2 = network.getGeometries().get(1);\n        Assertions.assertEquals(\"LineString\", geometry2.getType());\n        Assertions.assertEquals(List.of(3), geometry2.getArcs());\n        Assertions.assertEquals(2.0, geometry2.getProperties().getSpeed());\n        Assertions.assertNull( geometry2.getProperties().getSpeedReverse());\n        Assertions.assertEquals(2L, geometry2.getProperties().getOsmId());\n        List<Arc> arcs = exportResultToTopoJson.getArcs();\n        Assertions.assertEquals(4, arcs.size());\n        Assertions.assertEquals(List.of(List.of(0.0, 0.0), List.of(1.0, 1.0)), arcs.get(0).getCoordinates());\n        Assertions.assertEquals(List.of(List.of(1.0, 1.0), List.of(2.0, 2.0)), arcs.get(1).getCoordinates());\n        Assertions.assertEquals(List.of(List.of(2.0, 2.0), List.of(3.0, 3.0)), arcs.get(2).getCoordinates());\n        Assertions.assertEquals(List.of(List.of(0.0, 0.0), List.of(4.0, 5.0)), arcs.get(3).getCoordinates());\n        List<Double> bbox = exportResultToTopoJson.getBbox();\n        Assertions.assertEquals(4, bbox.size());\n        Assertions.assertEquals(0.0, bbox.get(0));\n        Assertions.assertEquals(0.0, bbox.get(1));\n        Assertions.assertEquals(4.0, bbox.get(2));\n        Assertions.assertEquals(5.0, bbox.get(3));\n    }\n}"
