[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "splunk/qbec"
sha = "57f20857bab8d25c968757a7e07bd83847c97e7b"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/vmexternals/externals.go internal/vmexternals/externals_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/vmexternals/externals.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 98.0
mutation_kill_rate = 0
original_mutation_kill_rate = 95.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/vmexternals/externals_test.go"
focal_file_path = "internal/vmexternals/externals.go"
test_file_url = "https://github.com/splunk/qbec/blob/57f20857bab8d25c968757a7e07bd83847c97e7b/internal/vmexternals/externals_test.go"
focal_file_url = "https://github.com/splunk/qbec/blob/57f20857bab8d25c968757a7e07bd83847c97e7b/internal/vmexternals/externals.go"
first_commit_date = "2021-09-09"
last_commit_date = "2025-04-14"
test_file_content = "\n\npackage vmexternals\n\nimport (\n\t\"encoding/json\"\n\t\"os\"\n\t\"runtime\"\n\t\"testing\"\n\n\t\"github.com/spf13/cobra\"\n\t\"github.com/splunk/qbec/internal/testutil\"\n\t\"github.com/splunk/qbec/vm\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc getCR() string {\n\tcr := \"\\n\"\n\tif runtime.GOOS == \"windows\" {\n\t\tcr = \"\\r\\n\"\n\t}\n\treturn cr\n}\n\nfunc TestExternals(t *testing.T) {\n\tvar fn func() (Externals, error)\n\tvar cfg Externals\n\tcmd := &cobra.Command{\n\t\tUse: \"show\",\n\t\tRunE: func(c *cobra.Command, args []string) error {\n\t\t\tvar err error\n\t\t\tcfg, err = fn()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\treturn nil\n\t\t},\n\t}\n\tcmd.SilenceUsage = true\n\tcmd.SilenceErrors = true\n\tfn = FromCommandParams(cmd, \"vm:\", false)\n\tcmd.SetArgs([]string{\n\t\t\"show\",\n\t\t\"--vm:ext-str=extStr\",\n\t\t\"--vm:ext-code-file=extCode=testdata/extCode.libsonnet\",\n\t\t\"--vm:tla-str=tlaStr=tlafoo\",\n\t\t\"--vm:tla-code=tlaCode=true\",\n\t\t\"--vm:jpath=testdata/lib1\",\n\t\t\"--vm:ext-str-list=testdata/vars.txt\",\n\t\t\"--vm:data-source=exec:\n\t})\n\tos.Setenv(\"extStr\", \"envFoo\")\n\tdefer os.Unsetenv(\"extStr\")\n\tos.Setenv(\"listVar2\", \"l2\")\n\tdefer os.Unsetenv(\"listVar2\")\n\terr := cmd.Execute()\n\trequire.Nil(t, err)\n}\n\nfunc TestConfigShorthands(t *testing.T) {\n\tvar fn func() (Externals, error)\n\tvar cfg Externals\n\tcmd := &cobra.Command{\n\t\tUse: \"show\",\n\t\tRunE: func(c *cobra.Command, args []string) error {\n\t\t\tvar err error\n\t\t\tcfg, err = fn()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcfg = cfg.WithLibPaths([]string{\"testdata/lib2\"})\n\t\t\treturn nil\n\t\t},\n\t}\n\tcmd.SilenceUsage = true\n\tcmd.SilenceErrors = true\n\tfn = FromCommandParams(cmd, \"vm:\", true)\n\tcmd.SetArgs([]string{\n\t\t\"show\",\n\t\t\"-V\",\n\t\t\"extStr\",\n\t\t\"--vm:ext-code-file=extCode=testdata/extCode.libsonnet\",\n\t\t\"-A\",\n\t\t\"tlaStr=tlafoo\",\n\t\t\"--vm:tla-code=tlaCode=true\",\n\t\t\"--vm:jpath=testdata/lib1\",\n\t\t\"--vm:ext-str-list=testdata/vars.txt\",\n\t})\n\tos.Setenv(\"extStr\", \"envFoo\")\n\tdefer os.Unsetenv(\"extStr\")\n\tos.Setenv(\"listVar2\", \"l2\")\n\tdefer os.Unsetenv(\"listVar2\")\n\terr := cmd.Execute()\n\trequire.Nil(t, err)\n}\n\nfunc TestConfigNegative(t *testing.T) {\n\texecInVM := func(code string, args []string) error {\n\t\tvar fn func() (Externals, error)\n\t\tcmd := &cobra.Command{\n\t\t\tUse: \"show\",\n\t\t\tRunE: func(c *cobra.Command, args []string) error {\n\t\t\t\tvar err error\n\t\t\t\t_, err = fn()\n\t\t\t\treturn err\n\t\t\t},\n\t\t}\n\t\tfn = FromCommandParams(cmd, \"vm:\", false)\n\t\tcmd.SetArgs(args)\n\t\tcmd.SilenceUsage = true\n\t\tcmd.SilenceErrors = true\n\t\treturn cmd.Execute()\n\t}\n\ttests := []struct {\n\t\tname     string\n\t\tcode     string\n\t\targs     []string\n\t\tasserter func(a *assert.Assertions, err error)\n\t}{\n\t\t{\n\t\t\tname: \"ext-str-undef\",\n\t\t\targs: []string{\"show\", \"--vm:ext-str=undef_foo\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"no value found from environment for undef_foo\")\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ext-code-undef\",\n\t\t\targs: []string{\"show\", \"--vm:ext-code=undef_foo\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"no value found from environment for undef_foo\")\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"tla-str-undef\",\n\t\t\targs: []string{\"show\", \"--vm:tla-str=undef_foo\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"no value found from environment for undef_foo\")\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"tla-code-undef\",\n\t\t\targs: []string{\"show\", \"--vm:tla-code=undef_foo\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"no value found from environment for undef_foo\")\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ext-file-undef\",\n\t\t\targs: []string{\"show\", \"--vm:ext-str-file=foo\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"ext-str-file no filename specified for foo\")\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"tla-file-undef\",\n\t\t\targs: []string{\"show\", \"--vm:tla-str-file=foo=bar\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"open bar: \"+testutil.FileNotFoundMessage)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"shorthand-not-enabled\",\n\t\t\targs: []string{\"show\", \"-A extStr\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"unknown shorthand flag: 'A'\")\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ext-list-bad-file\",\n\t\t\targs: []string{\"show\", \"--vm:ext-str-list=no-such-file\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), testutil.FileNotFoundMessage)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"ext-list-bad-file\",\n\t\t\targs: []string{\"show\", \"--vm:ext-str-list=testdata/vars.txt\"},\n\t\t\tasserter: func(a *assert.Assertions, err error) {\n\t\t\t\trequire.NotNil(t, err)\n\t\t\t\ta.Contains(err.Error(), \"process list testdata/vars.txt, line 3: no value found from environment for listVar2\")\n\t\t\t},\n\t\t},\n\t}\n\tfor _, test := range tests {\n\t}\n}\n\ntype code struct {\n\tFoo string `json:\"foo\"`\n\tBar string `json:\"bar\"`\n}\n\ntype result struct {\n\tTLAStr     string `json:\"tlaStr\"`\n\tTLACode    bool   `json:\"tlaCode\"`\n\tExtStr     string `json:\"extStr\"`\n\tExtCode    code   `json:\"extCode\"`\n\tLibPath1   code   `json:\"libpath1\"`\n\tLibPath2   code   `json:\"libpath2\"`\n\tInlineStr  string `json:\"inlineStr\"`\n\tInlineCode bool   `json:\"inlineCode\"`\n\tListVar1   string `json:\"listVar1\"`\n\tListVar2   string `json:\"listVar2\"`\n}\n\nvar evalCode = `\nfunction (tlaStr,tlaCode) {\n\ttlaStr: tlaStr,\n\ttlaCode: tlaCode,\n\textStr: std.extVar('extStr'),\n\textCode: std.extVar('extCode'),\n\tlibPath1: import 'libcode1.libsonnet',\n\tlibPath2: import 'libcode2.libsonnet',\n\tinlineStr: std.extVar('inlineStr'),\n\tinlineCode: std.extVar('inlineCode'),\n\tlistVar1: std.extVar('listVar1'),\n\tlistVar2: std.extVar('listVar2'),\n}\n`\n\nfunc TestVariableSet(t *testing.T) {\n\tvar fn func() (Externals, error)\n\tvar cfg Externals\n\tvar output string\n\tcmd := &cobra.Command{\n\t\tUse: \"show\",\n\t\tRunE: func(c *cobra.Command, args []string) error {\n\t\t\tvar err error\n\t\t\tcfg, err = fn()\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcfg := cfg.WithLibPaths([]string{\"testdata/lib2\"})\n\t\t\tvars := cfg.ToVariableSet().WithVars(\n\t\t\t\tvm.NewVar(\"inlineStr\", \"ifoo\"),\n\t\t\t\tvm.NewCodeVar(\"inlineCode\", \"true\"),\n\t\t\t)\n\t\t\tjvm := vm.New(vm.Config{\n\t\t\t\tLibPaths: cfg.LibPaths,\n\t\t\t})\n\t\t\toutput, err = jvm.EvalCode(\"test.jsonnet\", vm.MakeCode(evalCode), vars)\n\t\t\treturn err\n\t\t},\n\t}\n\tcmd.SilenceUsage = true\n\tcmd.SilenceErrors = true\n\tfn = FromCommandParams(cmd, \"vm:\", false)\n\tcmd.SetArgs([]string{\n\t\t\"show\",\n\t\t\"--vm:ext-str=extStr\",\n\t\t\"--vm:ext-code-file=extCode=testdata/extCode.libsonnet\",\n\t\t\"--vm:tla-str=tlaStr=tlafoo\",\n\t\t\"--vm:tla-code=tlaCode=true\",\n\t\t\"--vm:jpath=testdata/lib1\",\n\t\t\"--vm:ext-str-list=testdata/vars.txt\",\n\t})\n\tos.Setenv(\"extStr\", \"envFoo\")\n\tdefer os.Unsetenv(\"extStr\")\n\tos.Setenv(\"listVar2\", \"l2\")\n\tdefer os.Unsetenv(\"listVar2\")\n\terr := cmd.Execute()\n\trequire.Nil(t, err)\n\tvar r result\n\terr = json.Unmarshal([]byte(output), &r)\n\trequire.Nil(t, err)\n}"
