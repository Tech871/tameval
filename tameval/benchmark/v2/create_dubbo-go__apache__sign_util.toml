[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "apache/dubbo-go"
sha = "8d504e5574e431faca7aa03548e650ab7a9fc6a7"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out filter/auth/sign_util.go filter/auth/sign_util_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting filter/auth/sign_util.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 71.0
original_coverage = 71.0
mutation_kill_rate = 67.0
original_mutation_kill_rate = 67.0
covered_lines = [ 33, 34, 35, 38, 43, 46, 47, 48, 51, 54, 55, 56, 59, 60, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76,]
missed_lines = [ 39, 40, 41, 44, 45, 52, 53, 61, 62, 63,]

[input_info]
test_file_path = "filter/auth/sign_util_test.go"
focal_file_path = "filter/auth/sign_util.go"
test_file_url = "https://github.com/apache/dubbo-go/blob/8d504e5574e431faca7aa03548e650ab7a9fc6a7/filter/auth/sign_util_test.go"
focal_file_url = "https://github.com/apache/dubbo-go/blob/8d504e5574e431faca7aa03548e650ab7a9fc6a7/filter/auth/sign_util.go"
first_commit_date = "2021-07-08"
last_commit_date = "2025-07-29"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage auth\n\nimport (\n\t\"testing\"\n)\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestIsEmpty(t *testing.T) {\n\ttype args struct {\n\t\ts          string\n\t\tallowSpace bool\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant bool\n\t}{\n\t\t// TODO: Add test cases.\n\t\t{\"whitespace_false\", args{s: \"   \", allowSpace: false}, true},\n\t\t{\"whitespace_true\", args{s: \"   \", allowSpace: true}, false},\n\t\t{\"normal_false\", args{s: \"hello,dubbo\", allowSpace: false}, false},\n\t\t{\"normal_true\", args{s: \"hello,dubbo\", allowSpace: true}, false},\n\t\t{\"empty_true\", args{s: \"\", allowSpace: true}, true},\n\t\t{\"empty_false\", args{s: \"\", allowSpace: false}, true},\n\t\t{\"single_space_false\", args{s: \" \", allowSpace: false}, true},\n\t\t{\"single_space_true\", args{s: \" \", allowSpace: true}, false},\n\t\t{\"single_tab_false\", args{s: \"\\t\", allowSpace: false}, true},\n\t\t{\"single_tab_true\", args{s: \"\\t\", allowSpace: true}, false},\n\t\t{\"mixed_whitespace_false\", args{s: \" \\t\\n\\r \", allowSpace: false}, true},\n\t\t{\"mixed_whitespace_true\", args{s: \" \\t\\n\\r \", allowSpace: true}, false},\n\t\t{\"leading_space_false\", args{s: \"  hello\", allowSpace: false}, false},\n\t\t{\"leading_space_true\", args{s: \"  hello\", allowSpace: true}, false},\n\t\t{\"trailing_space_false\", args{s: \"hello  \", allowSpace: false}, false},\n\t\t{\"trailing_space_true\", args{s: \"hello  \", allowSpace: true}, false},\n\t\t{\"both_ends_false\", args{s: \"  hello  \", allowSpace: false}, false},\n\t\t{\"both_ends_true\", args{s: \"  hello  \", allowSpace: true}, false},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := IsEmpty(tt.args.s, tt.args.allowSpace); got != tt.want {\n\t\t\t\tt.Errorf(\"IsEmpty() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestSign(t *testing.T) {\n\tmetadata := \"com.ikurento.user.UserProvider::sayHi\"\n\tkey := \"key\"\n\tsignature := Sign(metadata, key)\n\tassert.NotNil(t, signature)\n}\n\nfunc TestSignWithParams(t *testing.T) {\n\tmetadata := \"com.ikurento.user.UserProvider::sayHi\"\n\tkey := \"key\"\n\tparams := []any{\n\t\t\"a\", 1, struct {\n\t\t\tName string\n\t\t\tID   int64\n\t\t}{\"YuYu\", 1},\n\t}\n\tsignature, _ := SignWithParams(params, metadata, key)\n\tassert.False(t, IsEmpty(signature, false))\n}\n\nfunc Test_doSign(t *testing.T) {\n\tsign := doSign([]byte(\"DubboGo\"), \"key\")\n\tsign1 := doSign([]byte(\"DubboGo\"), \"key\")\n\tsign2 := doSign([]byte(\"DubboGo\"), \"key2\")\n\tassert.NotNil(t, sign)\n\tassert.Equal(t, sign1, sign)\n\tassert.NotEqual(t, sign1, sign2)\n}\n\nfunc Test_toBytes(t *testing.T) {\n\tparams := []any{\n\t\t\"a\", 1, struct {\n\t\t\tName string\n\t\t\tID   int64\n\t\t}{\"YuYu\", 1},\n\t}\n\tparams2 := []any{\n\t\t\"a\", 1, struct {\n\t\t\tName string\n\t\t\tID   int64\n\t\t}{\"YuYu\", 1},\n\t}\n\tjsonBytes, _ := toBytes(params)\n\tjsonBytes2, _ := toBytes(params2)\n\tassert.NotNil(t, jsonBytes)\n\tassert.Equal(t, jsonBytes, jsonBytes2)\n}\n"
