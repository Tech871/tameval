[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "grindsa/acme2certifier"
sha = "8f9485d611c4f4f183b556a182a1befeb63b0517"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=acme_srv/message.py -m pytest -q --junit-xml=test_output.xml test/test_message.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target acme_srv.message --unit-test test.test_message --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target acme_srv/message.py --unit-test test/test_message.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "test/test_message.py"
focal_file_path = "acme_srv/message.py"
test_file_url = "https://github.com/grindsa/acme2certifier/blob/8f9485d611c4f4f183b556a182a1befeb63b0517/test/test_message.py"
focal_file_url = "https://github.com/grindsa/acme2certifier/blob/8f9485d611c4f4f183b556a182a1befeb63b0517/acme_srv/message.py"
first_commit_date = "2021-06-13"
last_commit_date = "2025-04-26"
test_file_content = "\nimport unittest\nimport sys\nimport importlib\nimport configparser\nfrom unittest.mock import patch, MagicMock\n\nsys.path.insert(0, \".\")\nsys.path.insert(1, \"..\")\n\n\nclass FakeDBStore(object):\n    pass\n\n\nclass TestACMEHandler(unittest.TestCase):\n\n    acme = None\n\n    @patch.dict(\"os.environ\", {\"ACME_SRV_CONFIGFILE\": \"ACME_SRV_CONFIGFILE\"})\n    def setUp(self):\n        models_mock = MagicMock()\n        models_mock.acme_srv.db_handler.DBstore.return_value = FakeDBStore\n        modules = {\"acme_srv.db_handler\": models_mock}\n        patch.dict(\"sys.modules\", modules).start()\n        import logging\n\n        logging.basicConfig(level=logging.CRITICAL)\n        self.logger = logging.getLogger(\"test_a2c\")\n        from acme_srv.message import Message\n\n        self.message = Message(False, \"http://tester.local\", self.logger)\n\n    @patch(\"acme_srv.message.decode_message\")\n    def test_001_message_check(self, mock_decode):\n        message = '{\"foo\" : \"bar\"}'\n        mock_decode.return_value = (False, \"detail\", None, None, None)\n\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_002_message_check(self, mock_decode, mock_nonce_check):\n        message = '{\"foo\" : \"bar\"}'\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (400, \"badnonce\", None)\n\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_003_message_check(self, mock_decode, mock_nonce_check):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (200, None, None)\n        self.message.eabkid_check_disable = True\n        message = '{\"foo\" : \"bar\"}'\n\n    @patch(\"acme_srv.message.Message._invalid_eab_check\")\n    @patch(\"acme_srv.signature.Signature.check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_004_message_check(\n        self, mock_decode, mock_nonce_check, mock_aname, mock_sig, mock_eabchk\n    ):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (200, None, None)\n        mock_aname.return_value = \"account_name\"\n        mock_eabchk.return_value = \"account_name\"\n        mock_sig.return_value = (False, \"error\", \"detail\")\n        message = '{\"foo\" : \"bar\"}'\n\n    @patch(\"acme_srv.message.Message._invalid_eab_check\")\n    @patch(\"acme_srv.signature.Signature.check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_005_message_check(\n        self, mock_decode, mock_nonce_check, mock_aname, mock_sig, mock_eabchk\n    ):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (200, None, None)\n        mock_aname.return_value = \"account_name\"\n        mock_eabchk.return_value = None\n        mock_sig.return_value = (False, \"error\", \"detail\")\n        message = '{\"foo\" : \"bar\"}'\n        self.message.eabkid_check_disable = False\n\n    @patch(\"acme_srv.message.Message._invalid_eab_check\")\n    @patch(\"acme_srv.signature.Signature.check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_006_message_check(\n        self, mock_decode, mock_nonce_check, mock_aname, mock_sig, mock_eabchk\n    ):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (200, None, None)\n        mock_aname.return_value = \"account_name\"\n        mock_eabchk.return_value = \"account_name\"\n        mock_sig.return_value = (True, None, None)\n        message = '{\"foo\" : \"bar\"}'\n\n    @patch(\"acme_srv.message.Message._invalid_eab_check\")\n    @patch(\"acme_srv.signature.Signature.check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_007_message_check(\n        self, mock_decode, mock_nonce_check, mock_aname, mock_sig, mock_eabchk\n    ):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (400, \"badnonce\", None)\n        mock_aname.return_value = \"account_name\"\n        mock_sig.return_value = (True, None, None)\n        mock_eabchk.return_value = \"account_name\"\n        message = '{\"foo\" : \"bar\"}'\n        self.message.disable_dic = {\n            \"nonce_check_disable\": True,\n            \"signature_check_disable\": False,\n        }\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n    @patch(\"acme_srv.message.Message._invalid_eab_check\")\n    @patch(\"acme_srv.signature.Signature.check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_008_message_check(\n        self, mock_decode, mock_nonce_check, mock_aname, mock_sig, mock_eabchk\n    ):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (400, \"badnonce\", None)\n        mock_aname.return_value = \"account_name\"\n        mock_sig.return_value = (True, None, None)\n        self.message.eabkid_check_disable = True\n        message = '{\"foo\" : \"bar\"}'\n        self.message.disable_dic = {\n            \"nonce_check_disable\": True,\n            \"signature_check_disable\": True,\n        }\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n    @patch(\"acme_srv.message.Message._invalid_eab_check\")\n    @patch(\"acme_srv.signature.Signature.check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.nonce.Nonce.check\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_009_message_check(\n        self, mock_decode, mock_nonce_check, mock_aname, mock_sig, mock_eab_chk\n    ):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_nonce_check.return_value = (400, \"badnonce\", None)\n        mock_aname.return_value = \"account_name\"\n        mock_sig.return_value = (True, None, None)\n        mock_eab_chk.return_value = \"account_name\"\n        message = '{\"foo\" : \"bar\"}'\n        self.message.disable_dic = {\n            \"nonce_check_disable\": False,\n            \"signature_check_disable\": False,\n        }\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n    @patch(\"acme_srv.nonce.Nonce.generate_and_add\")\n    def test_010_message_prepare_response(self, mock_nnonce):\n        data_dic = {\n            \"data\": {\"foo_data\": \"bar_bar\"},\n            \"header\": {\"foo_header\": \"bar_header\"},\n        }\n        mock_nnonce.return_value = \"new_nonce\"\n        config_dic = {\"code\": 200, \"message\": \"message\", \"detail\": \"detail\"}\n\n    @patch(\"acme_srv.error.Error.enrich_error\")\n    @patch(\"acme_srv.nonce.Nonce.generate_and_add\")\n    def test_011_message_prepare_response(self, mock_nnonce, mock_error):\n        data_dic = {\n            \"data\": {\"foo_data\": \"bar_bar\"},\n        }\n        mock_nnonce.return_value = \"new_nonce\"\n        mock_error.return_value = \"mock_error\"\n        config_dic = {\"code\": 200, \"message\": \"message\", \"detail\": \"detail\"}\n\n    @patch(\"acme_srv.nonce.Nonce.generate_and_add\")\n    def test_012_message_prepare_response(self, mock_nnonce):\n        data_dic = {\n            \"data\": {\"foo_data\": \"bar_bar\"},\n            \"header\": {\"foo_header\": \"bar_header\"},\n        }\n        mock_nnonce.return_value = \"new_nonce\"\n        config_dic = {\"message\": \"type\", \"detail\": \"detail\"}\n\n    @patch(\"acme_srv.nonce.Nonce.generate_and_add\")\n    def test_013_message_prepare_response(self, mock_nnonce):\n        data_dic = {\n            \"data\": {\"foo_data\": \"bar_bar\"},\n            \"header\": {\"foo_header\": \"bar_header\"},\n        }\n        mock_nnonce.return_value = \"new_nonce\"\n        config_dic = {\"code\": 400, \"detail\": \"detail\"}\n\n    @patch(\"acme_srv.nonce.Nonce.generate_and_add\")\n    def test_014_message_prepare_response(self, mock_nnonce):\n        data_dic = {\n            \"data\": {\"foo_data\": \"bar_bar\"},\n            \"header\": {\"foo_header\": \"bar_header\"},\n        }\n        mock_nnonce.return_value = \"new_nonce\"\n        config_dic = {\"code\": 400, \"type\": \"message\"}\n\n    @patch(\"acme_srv.error.Error.enrich_error\")\n    @patch(\"acme_srv.nonce.Nonce.generate_and_add\")\n    def test_015_message_prepare_response(self, mock_nnonce, mock_error):\n        data_dic = {\"header\": {\"foo_header\": \"bar_header\"}}\n        mock_nnonce.return_value = \"new_nonce\"\n        mock_error.return_value = \"mock_error\"\n        config_dic = {\"code\": 400, \"type\": \"message\", \"detail\": \"detail\"}\n\n    def test_016_message__name_get(self):\n        protected = {}\n\n    def test_017_message__name_get(self):\n        protected = {\"kid\": \"foo\"}\n\n    def test_018_message__name_get(self):\n        protected = {\"kid\": \"http://tester.local/acme/account/account_name\"}\n\n    def test_019_message__name_get(self):\n        protected = {\"kid\": \"http://tester.local/acme/acct/account_name\"}\n\n    def test_020_message__name_get(self):\n        protected = {\"jwk\": \"jwk\"}\n\n    def test_021_message__name_get(self):\n        protected = {\"jwk\": \"jwk\", \"url\": \"url\"}\n\n    def test_022_message__name_get(self):\n        protected = {\"jwk\": \"jwk\", \"url\": \"http://tester.local/acme/revokecert\"}\n\n    def test_023_message__name_get(self):\n        protected = {\"jwk\": {\"n\": \"n\"}, \"url\": \"http://tester.local/acme/revokecert\"}\n        self.message.dbstore.account_lookup.return_value = {}\n\n    def test_024_message__name_get(self):\n        protected = {\"jwk\": {\"n\": \"n\"}, \"url\": \"http://tester.local/acme/revokecert\"}\n        self.message.dbstore.account_lookup.return_value = {\"bar\": \"foo\"}\n\n    def test_025_message__name_get(self):\n        protected = {\"jwk\": {\"n\": \"n\"}, \"url\": \"http://tester.local/acme/revokecert\"}\n        self.message.dbstore.account_lookup.return_value = {\"name\": \"foo\"}\n\n    def test_026_message__name_get(self):\n        protected = {\"jwk\": {\"n\": \"n\"}, \"url\": \"http://tester.local/acme/revokecert\"}\n        self.message.dbstore.account_lookup.side_effect = Exception(\n            \"exc_mess__name_get\"\n        )\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n            self.message._name_get(protected)\n\n    def test_027__enter__(self):\n        self.message.__enter__()\n\n    @patch(\"acme_srv.message.load_config\")\n    def test_028_config_load(self, mock_load_cfg):\n        parser = configparser.ConfigParser()\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.load_config\")\n    def test_029_config_load(self, mock_load_cfg):\n        parser = configparser.ConfigParser()\n        parser[\"Nonce\"] = {\n            \"nonce_check_disable\": False,\n            \"signature_check_disable\": False,\n        }\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.load_config\")\n    def test_030_config_load(self, mock_load_cfg):\n        parser = configparser.ConfigParser()\n        parser[\"Nonce\"] = {\n            \"nonce_check_disable\": True,\n            \"signature_check_disable\": False,\n        }\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.load_config\")\n    def test_031_config_load(self, mock_load_cfg):\n        parser = configparser.ConfigParser()\n        parser[\"Nonce\"] = {\n            \"nonce_check_disable\": False,\n            \"signature_check_disable\": True,\n        }\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.load_config\")\n    def test_032_config_load(self, mock_load_cfg):\n        parser = configparser.ConfigParser()\n        parser[\"Directory\"] = {\"url_prefix\": \"url_prefix\", \"foo\": \"bar\"}\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_033_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\n            \"eab_handler_file\": \"eab_handler_file\",\n            \"eabkid_check_disable\": False,\n        }\n        mock_load_cfg.return_value = parser\n        mock_eab.return_value = MagicMock()\n        from acme_srv.message import Message\n\n        self.message = Message(False, \"http://tester.local\", self.logger)\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_034_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\n            \"eab_handler_file\": \"eab_handler_file\",\n            \"eabkid_check_disable\": True,\n        }\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_035_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\"foo\": \"bar\", \"eabkid_check_disable\": True}\n        mock_load_cfg.return_value = parser\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_036_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\"foo\": \"bar\", \"invalid_eabkid_deactivate\": True}\n        mock_load_cfg.return_value = parser\n        mock_eab.return_value = None\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n            self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_037_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\n            \"eab_handler_file\": \"eab_handler_file\",\n            \"eabkid_check_disable\": True,\n        }\n        mock_load_cfg.return_value = parser\n        mock_eab.return_value = None\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_038_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\"eab_handler_file\": \"eab_handler_file\"}\n        mock_load_cfg.return_value = parser\n        mock_eab.return_value = None\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n            self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_039_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\n            \"eab_handler_file\": \"eab_handler_file\",\n            \"invalid_eabkid_deactivate\": True,\n        }\n        mock_load_cfg.return_value = parser\n        mock_eab.return_value = MagicMock()\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.eab_handler_load\")\n    @patch(\"acme_srv.message.load_config\")\n    def test_040_config_load(self, mock_load_cfg, mock_eab):\n        parser = configparser.ConfigParser()\n        parser[\"EABhandler\"] = {\n            \"eab_handler_file\": \"eab_handler_file\",\n            \"invalid_eabkid_deactivate\": True,\n            \"eabkid_check_disable\": True,\n        }\n        mock_load_cfg.return_value = parser\n        mock_eab.return_value = None\n        self.message._config_load()\n\n    @patch(\"acme_srv.message.decode_message\")\n    def test_041_message_check(self, mock_decode):\n        message = '{\"foo\" : \"bar\"}'\n        mock_decode.return_value = (False, \"detail\", None, None, None)\n\n    @patch(\"acme_srv.signature.Signature.cli_check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_042_message_check(self, mock_decode, mock_name_get, mock_check):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_check.return_value = (False, \"error\", \"detail\")\n        mock_name_get.return_value = \"name\"\n        message = '{\"foo\" : \"bar\"}'\n\n    @patch(\"acme_srv.signature.Signature.cli_check\")\n    @patch(\"acme_srv.message.Message._name_get\")\n    @patch(\"acme_srv.message.decode_message\")\n    def test_043_message_check(self, mock_decode, mock_name_get, mock_check):\n        mock_decode.return_value = (True, None, \"protected\", \"payload\", \"signature\")\n        mock_check.return_value = (\"True\", \"error\", \"detail\")\n        self.message.dbstore.cli_permissions_get.return_value = {\"foo\": \"bar\"}\n        mock_name_get.return_value = \"name\"\n        message = '{\"foo\" : \"bar\"}'\n\n    def test_044_invalid_eab_check(self):\n        self.message.dbstore.account_lookup.side_effect = None\n        self.message.dbstore.account_lookup.return_value = {\"eab_kid\": \"eab_kid\"}\n        eab_handler_module = importlib.import_module(\n            \"examples.eab_handler.skeleton_eab_handler\"\n        )\n        self.message.eab_handler = eab_handler_module.EABhandler\n        self.message.eab_handler.mac_key_get = MagicMock(return_value=\"mac_key\")\n\n    def test_045_invalid_eab_check(self):\n        self.message.dbstore.account_lookup.side_effect = None\n        self.message.dbstore.account_lookup.return_value = {\"eab_kid\": \"eab_kid\"}\n        eab_handler_module = importlib.import_module(\n            \"examples.eab_handler.skeleton_eab_handler\"\n        )\n        self.message.eab_handler = eab_handler_module.EABhandler\n        self.message.eab_handler.mac_key_get = MagicMock(return_value=None)\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n    def test_046_invalid_eab_check(self):\n        self.message.dbstore.account_lookup.side_effect = None\n        self.message.dbstore.account_update.side_effect = None\n        self.message.dbstore.account_lookup.return_value = {\"eab_kid\": \"eab_kid\"}\n        eab_handler_module = importlib.import_module(\n            \"examples.eab_handler.skeleton_eab_handler\"\n        )\n        self.message.eab_handler = eab_handler_module.EABhandler\n        self.message.eab_handler.mac_key_get = MagicMock(return_value=None)\n        self.message.invalid_eabkid_deactivate = True\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n    def test_047_invalid_eab_check(self):\n        self.message.dbstore.account_lookup.side_effect = None\n        self.message.dbstore.account_lookup.return_value = {\"foo\": \"bar\"}\n        eab_handler_module = importlib.import_module(\n            \"examples.eab_handler.skeleton_eab_handler\"\n        )\n        self.message.eab_handler = eab_handler_module.EABhandler\n        self.message.eab_handler.mac_key_get = MagicMock(return_value=None)\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n    def test_048_invalid_eab_check(self):\n        self.message.dbstore.account_lookup.side_effect = None\n        self.message.dbstore.account_lookup.return_value = None\n        eab_handler_module = importlib.import_module(\n            \"examples.eab_handler.skeleton_eab_handler\"\n        )\n        self.message.eab_handler = eab_handler_module.EABhandler\n        self.message.eab_handler.mac_key_get = MagicMock(return_value=None)\n        with self.assertLogs(\"test_a2c\", level=\"INFO\") as lcm:\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
