[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "tcheeric/nostr-java"
sha = "19abaa18c086511e89c968e069c43797f55aac2d"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl nostr-java-api -Dtest=NIP61Test && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl nostr-java-api -DtargetClasses=**.NIP61  -DtargetTests=**.NIP61Test  -DoutputFormats=XML"
coverage_report_path = "nostr-java-api/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "nostr-java-api/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 43.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "nostr-java-api/src/test/java/nostr/api/unit/NIP61Test.java"
focal_file_path = "nostr-java-api/src/main/java/nostr/api/NIP61.java"
test_file_url = "https://github.com/tcheeric/nostr-java/blob/19abaa18c086511e89c968e069c43797f55aac2d/nostr-java-api/src/test/java/nostr/api/unit/NIP61Test.java"
focal_file_url = "https://github.com/tcheeric/nostr-java/blob/19abaa18c086511e89c968e069c43797f55aac2d/nostr-java-api/src/main/java/nostr/api/NIP61.java"
first_commit_date = "2024-12-14"
last_commit_date = "2025-06-14"
test_file_content = "package nostr.api.unit;\n\nimport lombok.SneakyThrows;\nimport nostr.api.NIP61;\nimport nostr.base.Relay;\nimport nostr.event.BaseTag;\nimport nostr.event.entities.Amount;\nimport nostr.event.entities.CashuMint;\nimport nostr.event.entities.CashuProof;\nimport nostr.event.impl.GenericEvent;\nimport nostr.event.tag.EventTag;\nimport nostr.event.tag.GenericTag;\nimport nostr.event.tag.PubKeyTag;\nimport nostr.event.tag.UrlTag;\nimport nostr.id.Identity;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.net.URI;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertInstanceOf;\n\npublic class NIP61Test {\n\n    @Test\n    public void createNutzapInformationalEvent() {\n        // Prepare\n        Identity sender = Identity.generateRandomIdentity();\n        NIP61 nip61 = new NIP61(sender);\n\n        // Create test data\n        List<String> pubkeys = Arrays.asList(\"pubkey1\", \"pubkey2\");\n        List<Relay> relays = Arrays.asList(\n                new Relay(\"wss://relay1.example.com\"),\n                new Relay(\"wss://relay2.example.com\"));\n        List<CashuMint> mints = Arrays.asList(\n                new CashuMint(\"https://mint1.example.com\"),\n                new CashuMint(\"https://mint2.example.com\"));\n\n        // Create event\n        GenericEvent event = nip61.createNutzapInformationalEvent(pubkeys, relays, mints).getEvent();\n        List<BaseTag> tags = event.getTags();\n\n        // Assert tags\n        Assertions.assertEquals(6, tags.size()); // 2 pubkeys + 2 relays + 2 mints\n\n        // Verify pubkey tags\n        List<GenericTag> pubkeyTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"pubkey\"))\n                .map(tag -> (GenericTag) tag)\n                .toList();\n        Assertions.assertEquals(2, pubkeyTags.size());\n        Assertions.assertEquals(\"pubkey1\", pubkeyTags.get(0).getAttributes().get(0).getValue());\n        Assertions.assertEquals(\"pubkey2\", pubkeyTags.get(1).getAttributes().get(0).getValue());\n\n        // Verify relay tags\n        List<GenericTag> relayTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"relay\"))\n                .map(tag -> (GenericTag) tag)\n                .toList();\n        Assertions.assertEquals(2, relayTags.size());\n        Assertions.assertEquals(\"wss://relay1.example.com\", relayTags.get(0).getAttributes().get(0).getValue());\n        Assertions.assertEquals(\"wss://relay2.example.com\", relayTags.get(1).getAttributes().get(0).getValue());\n\n        // Verify mint tags\n        List<GenericTag> mintTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"mint\"))\n                .map(tag -> (GenericTag) tag)\n                .toList();\n        Assertions.assertEquals(2, mintTags.size());\n        Assertions.assertEquals(\"https://mint1.example.com\", mintTags.get(0).getAttributes().get(0).getValue());\n        Assertions.assertEquals(\"https://mint2.example.com\", mintTags.get(1).getAttributes().get(0).getValue());\n    }\n\n    @SneakyThrows\n    @Test\n    public void createNutzapEvent() {\n        // Prepare\n        Identity sender = Identity.generateRandomIdentity();\n        NIP61 nip61 = new NIP61(sender);\n\n        Identity recipientId = Identity.generateRandomIdentity();\n\n        // Create test data\n        Amount amount = new Amount(100, \"sat\");\n        CashuMint mint = new CashuMint(\"https://mint.example.com\");\n        // PublicKey recipient = new PublicKey(\"recipient-pubkey\");\n        String content = \"Test content\";\n\n        // Optional proofs and events\n        CashuProof proof = new CashuProof();\n        proof.setId(\"test-proof-id\");\n        List<CashuProof> proofs = List.of(proof);\n\n        EventTag eventTag = new EventTag();\n        eventTag.setIdEvent(\"test-event-id\");\n        List<EventTag> events = List.of(eventTag);\n\n        // Create event\n        GenericEvent event = nip61.createNutzapEvent(\n                        amount,\n                        proofs,\n                        URI.create(mint.getUrl()).toURL(),\n                        events,\n                        recipientId.getPublicKey(),\n                        content)\n                .getEvent();\n        List<BaseTag> tags = event.getTags();\n\n        // Assert tags\n        Assertions.assertEquals(6, tags.size()); // url + amount + unit + pubkey\n\n        // Verify url tag\n        List<BaseTag> urlTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"u\"))\n                .toList();\n        assertInstanceOf(UrlTag.class, urlTags.get(0));\n        Assertions.assertEquals(1, urlTags.size());\n        Assertions.assertEquals(\"https://mint.example.com\", ((UrlTag) urlTags.get(0)).getUrl());\n\n        // Verify amount tag\n        List<BaseTag> amountTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"amount\"))\n                .toList();\n        assertInstanceOf(GenericTag.class, amountTags.get(0));\n        Assertions.assertEquals(1, amountTags.size());\n        Assertions.assertEquals(\"100\", ((GenericTag) amountTags.get(0)).getAttributes().get(0).getValue());\n\n        // Verify unit tag\n        List<BaseTag> unitTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"unit\"))\n                .toList();\n        assertInstanceOf(GenericTag.class, unitTags.get(0));\n        Assertions.assertEquals(1, unitTags.size());\n        Assertions.assertEquals(\"sat\", ((GenericTag) unitTags.get(0)).getAttributes().get(0).getValue());\n\n        // Verify pubkey tag\n        List<BaseTag> pubkeyTags = tags.stream()\n                .filter(tag -> tag.getCode().equals(\"p\"))\n                .toList();\n        assertInstanceOf(PubKeyTag.class, pubkeyTags.get(0));\n        Assertions.assertEquals(1, pubkeyTags.size());\n        Assertions.assertEquals(recipientId.getPublicKey().toString(), ((PubKeyTag)pubkeyTags.get(0)).getPublicKey().toString());\n\n        // Assert content\n        Assertions.assertEquals(content, event.getContent());\n    }\n\n    @Test\n    public void createTags() {\n        // Test P2PK tag creation\n        String pubkey = \"test-pubkey\";\n        BaseTag p2pkTag = NIP61.createP2pkTag(pubkey);\n        assertInstanceOf(GenericTag.class, p2pkTag);\n        Assertions.assertEquals(\"pubkey\", p2pkTag.getCode());\n        Assertions.assertEquals(pubkey, ((GenericTag) p2pkTag).getAttributes().get(0).getValue());\n\n        // Test URL tag creation\n        String url = \"https://example.com\";\n        BaseTag urlTag = NIP61.createUrlTag(url);\n        assertInstanceOf(UrlTag.class, urlTag);\n        Assertions.assertEquals(\"u\", urlTag.getCode());\n        Assertions.assertEquals(url, ((UrlTag) urlTag).getUrl());\n\n        // Test CashuProof tag creation\n        CashuProof proof = new CashuProof();\n        proof.setId(\"test-proof-id\");\n        BaseTag proofTag = NIP61.createProofTag(proof);\n        assertInstanceOf(GenericTag.class, proofTag);\n        Assertions.assertEquals(\"proof\", proofTag.getCode());\n        Assertions.assertTrue(((GenericTag) proofTag).getAttributes().get(0).getValue().toString().contains(\"test-proof-id\"));\n    }\n}"
