[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "damianvtran/local-operator"
sha = "2fd6ef34ce6fad7889fba35bbf5a1a49ff447720"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=local_operator/server/openapi.py -m pytest -q --junit-xml=test_output.xml tests/unit/server/test_openapi.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target local_operator.server.openapi --unit-test tests.unit.server.test_openapi --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target local_operator/server/openapi.py --unit-test tests/unit/server/test_openapi.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 48.0
original_coverage = 100.0
mutation_kill_rate = 22.0
original_mutation_kill_rate = 22.0
covered_lines = [ 7, 8, 9, 10, 12, 13, 15, 18, 28, 38, 71, 82, 85,]
missed_lines = [ 50, 53, 54, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 83,]

[input_info]
test_file_path = "tests/unit/server/test_openapi.py"
focal_file_path = "local_operator/server/openapi.py"
test_file_url = "https://github.com/damianvtran/local-operator/blob/2fd6ef34ce6fad7889fba35bbf5a1a49ff447720/tests/unit/server/test_openapi.py"
focal_file_url = "https://github.com/damianvtran/local-operator/blob/2fd6ef34ce6fad7889fba35bbf5a1a49ff447720/local_operator/server/openapi.py"
first_commit_date = "2025-03-04"
last_commit_date = "2025-03-04"
test_file_content = "import json\nimport os\nimport tempfile\nfrom pathlib import Path\nfrom unittest.mock import MagicMock, patch\n\nimport pytest\nfrom fastapi import FastAPI\n\nfrom local_operator.server import openapi\n\n@pytest.fixture\ndef mock_app():\n    app = MagicMock(spec=FastAPI)\n    app.title = \"Test API\"\n    app.version = \"1.0.0\"\n    app.description = \"Test API Description\"\n    app.routes = []\n    app.openapi_tags = []\n    app.servers = None\n    return app\n\ndef test_generate_openapi_schema(mock_app):\n    with patch(\n        \"local_operator.server.openapi.get_openapi\", return_value={\"test\": \"schema\"}\n    ) as mock_get_openapi:\n        schema = openapi.generate_openapi_schema(mock_app)\n\n        mock_get_openapi.assert_called_once_with(\n            title=mock_app.title,\n            version=mock_app.version,\n            description=mock_app.description,\n            routes=mock_app.routes,\n            tags=mock_app.openapi_tags,\n            servers=None,\n        )\n        assert schema == {\"test\": \"schema\"}\n\ndef test_get_openapi_schema_path_custom():\n    custom_dir = Path(\"/custom/path\")\n    path = openapi.get_openapi_schema_path(custom_dir)\n    expected_path = custom_dir / \"openapi.json\"\n    assert path == expected_path\n"
