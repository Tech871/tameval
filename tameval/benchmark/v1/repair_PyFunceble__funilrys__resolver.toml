[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "funilrys/PyFunceble"
sha = "6fc0974a65e0987945afdfaed9e7a21dc6ad9894"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.test.txt && pip install -r requirements.win.txt && pip install -r requirements.dev.txt && pip install -r requirements.txt && pip install -r requirements.docs.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=PyFunceble/query/dns/resolver.py -m pytest -q --junit-xml=test_output.xml tests/query/dnss/test_resolver.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target PyFunceble.query.dns.resolver --unit-test tests.query.dnss.test_resolver --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target PyFunceble/query/dns/resolver.py --unit-test tests/query/dnss/test_resolver.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 60.0
original_mutation_kill_rate = 60.0
covered_lines = [ 52, 53, 55, 57, 58, 59, 62, 70, 72, 74, 75, 90, 95, 96, 97, 99, 100, 101, 102, 106, 108, 110, 115, 117, 122, 123, 125, 127, 129, 134, 136, 141, 143, 148, 150, 155, 156, 158, 160, 179, 180, 185, 186, 188, 189, 193,]
missed_lines = []

[input_info]
test_file_path = "tests/query/dnss/test_resolver.py"
focal_file_path = "PyFunceble/query/dns/resolver.py"
test_file_url = "https://github.com/funilrys/PyFunceble/blob/6fc0974a65e0987945afdfaed9e7a21dc6ad9894/tests/query/dnss/test_resolver.py"
focal_file_url = "https://github.com/funilrys/PyFunceble/blob/6fc0974a65e0987945afdfaed9e7a21dc6ad9894/PyFunceble/query/dns/resolver.py"
first_commit_date = "2020-12-19"
last_commit_date = "2025-02-23"
test_file_content = "import dataclasses\nimport unittest\nimport unittest.mock\n\nimport dns.resolver\n\nfrom PyFunceble.config.loader import ConfigLoader\nfrom PyFunceble.query.dns.resolver import Resolver\n\nclass TestResolver(unittest.TestCase):\n    def setUp(self) -> None:\n        def fake_response(data: str) -> object:\n            return dataclasses.make_dataclass(\n                \"FakeResponse\", [(\"address\", str, dataclasses.field(default=data))]\n            )\n\n        def fake_resolver(_: str, rqtype: str):\n            if rqtype == \"A\":\n                return [\n                    fake_response(\"192.168.1.1\"),\n                    fake_response(\"10.47.91.9\"),\n                ]\n            return [\n                fake_response(\"fe80::6b01:9045:a42a:fb5f\"),\n                fake_response(\"fe80::6b01:9049:a42a:fb5f\"),\n            ]\n\n        self.resolve_patch = unittest.mock.patch.object(\n            dns.resolver.Resolver, \"resolve\"\n        )\n\n        self.mock_resolve = self.resolve_patch.start()\n        self.mock_resolve.side_effect = fake_resolver\n\n        self.resolver_provider = Resolver()\n\n    def tearDown(self) -> None:\n        self.resolve_patch.stop()\n        del self.resolve_patch\n        del self.mock_resolve\n        del self.resolver_provider\n\n    def test_set_nameservers(self) -> None:\n        given = [\"example.org\"]\n        self.resolver_provider.set_nameservers(given)\n\n        expected = [\n            \"192.168.1.1\",\n            \"10.47.91.9\",\n            \"fe80::6b01:9045:a42a:fb5f\",\n            \"fe80::6b01:9049:a42a:fb5f\",\n        ]\n        actual = self.resolver_provider.get_nameservers()\n        self.assertEqual(expected, actual)\n\n        expected = {\n            \"192.168.1.1\": 53,\n            \"10.47.91.9\": 53,\n            \"fe80::6b01:9045:a42a:fb5f\": 53,\n            \"fe80::6b01:9049:a42a:fb5f\": 53,\n        }\n        actual = self.resolver_provider.get_nameserver_ports()\n        self.assertEqual(expected, actual)\n\n    def test_configure_nameserver_list(self) -> None:\n        test_servers = [\"example.org\"]\n        self.resolver_provider.set_nameservers(test_servers)\n\n        result = self.resolver_provider.get_nameservers()\n        self.assertEqual(len(result), 4)\n        self.assertIn(\"192.168.1.1\", result)\n        self.assertIn(\"10.47.91.9\", result)\n\n        ports = self.resolver_provider.get_nameserver_ports()\n        for port in ports.values():\n            self.assertEqual(port, 53)\n\n    def test_set_nameservers_through_init(self) -> None:\n        given = [\"example.org\"]\n        resolver_provider = Resolver(nameservers=given)\n\n        expected = [\n            \"192.168.1.1\",\n            \"10.47.91.9\",\n            \"fe80::6b01:9045:a42a:fb5f\",\n            \"fe80::6b01:9049:a42a:fb5f\",\n        ]\n        actual = resolver_provider.get_nameservers()\n        self.assertEqual(expected, actual)\n\n        expected = {\n            \"192.168.1.1\": 53,\n            \"10.47.91.9\": 53,\n            \"fe80::6b01:9045:a42a:fb5f\": 53,\n            \"fe80::6b01:9049:a42a:fb5f\": 53,\n        }\n        actual = resolver_provider.get_nameserver_ports()\n        self.assertEqual(expected, actual)\n\n    def test_verify_nameserver_setup(self) -> None:\n        nameservers = [\"example.org\"]\n        resolver_provider = Resolver(nameservers=nameservers)\n        \n        nameserver_list = resolver_provider.get_nameservers()\n        self.assertTrue(isinstance(nameserver_list, list))\n        self.assertEqual(len(nameserver_list), 4)\n        \n        port_config = resolver_provider.get_nameserver_ports()\n        self.assertTrue(isinstance(port_config, dict))\n        self.assertEqual(len(port_config), 4)\n\n    def test_set_timeout(self) -> None:\n        given = 4.0\n        self.resolver_provider.set_timeout(given)\n        expected = 4.0\n        actual = self.resolver_provider.get_timeout()\n        self.assertEqual(expected, actual)\n\n    def test_set_timeout_though_init(self) -> None:\n        given = 4.0\n        resolver_provider = Resolver(timeout=given)\n        expected = 4.0\n        actual = resolver_provider.get_timeout()\n        self.assertEqual(expected, actual)\n\n    def test_set_timeout_not_float_nor_int(self) -> None:\n        given = \"Hello, World!\"\n        self.assertRaises(TypeError, lambda: self.resolver_provider.set_timeout(given))\n\n    def test_guess_and_set_timeout(self) -> None:\n        config_loader = ConfigLoader()\n        config_loader.set_custom_config({\"lookup\": {\"timeout\": 10.0}}).start()\n        self.resolver_provider.guess_and_set_timeout()\n        expected = 10.0\n        actual = self.resolver_provider.get_timeout()\n        self.assertEqual(expected, actual)\n\n    def test_get_resolver(self) -> None:\n        self.resolver_provider.set_nameservers([\"example.org\"])\n        self.resolver_provider.set_timeout(5.0)\n\n        the_resolver = self.resolver_provider.get_resolver()\n\n        expected_timeout = 5.0\n        expected_lifetime = 7.0\n        expected_nameservers = [\n            \"192.168.1.1\",\n            \"10.47.91.9\",\n            \"fe80::6b01:9045:a42a:fb5f\",\n            \"fe80::6b01:9049:a42a:fb5f\",\n        ]\n        expected_nameserver_ports = {\n            \"192.168.1.1\": 53,\n            \"10.47.91.9\": 53,\n            \"fe80::6b01:9045:a42a:fb5f\": 53,\n            \"fe80::6b01:9049:a42a:fb5f\": 53,\n        }\n\n        self.assertEqual(expected_timeout, the_resolver.timeout)\n        self.assertEqual(expected_lifetime, the_resolver.lifetime)\n        self.assertEqual(expected_nameservers, the_resolver.nameservers)\n        self.assertEqual(expected_nameserver_ports, the_resolver.nameserver_ports)\n\n        the_second_resolver = self.resolver_provider.get_resolver()\n        self.assertEqual(id(the_resolver), id(the_second_resolver))\n\nif __name__ == \"__main__\":\n    unittest.main()"
