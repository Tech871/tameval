[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "castorini/anserini"
sha = "a9ec58ac9208f0246e39a39d7d8c95a431b45b56"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=RunBeirTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.RunBeir  -DtargetTests=**.RunBeirTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/io/anserini/repro/RunBeirTest.java"
focal_file_path = "src/main/java/io/anserini/reproduce/RunBeir.java"
test_file_url = "https://github.com/castorini/anserini/blob/a9ec58ac9208f0246e39a39d7d8c95a431b45b56/src/test/java/io/anserini/repro/RunBeirTest.java"
focal_file_url = "https://github.com/castorini/anserini/blob/a9ec58ac9208f0246e39a39d7d8c95a431b45b56/src/main/java/io/anserini/reproduce/RunBeir.java"
first_commit_date = "2024-04-30"
last_commit_date = "2025-07-05"
test_file_content = "package io.anserini.repro;\n\nimport io.anserini.reproduce.RunBeir;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\nimport java.util.Random;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class RunBeirTest {\n  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n  private PrintStream saveOut;\n  private PrintStream saveErr;\n\n  private void redirectStderr() {\n    saveErr = System.err;\n    err.reset();\n    System.setErr(new PrintStream(err));\n  }\n\n  private void restoreStderr() {\n    System.setErr(saveErr);\n  }\n\n  private void redirectStdout() {\n    saveOut = System.out;\n    out.reset();\n    System.setOut(new PrintStream(out));\n  }\n\n  private void restoreStdout() {\n    System.setOut(saveOut);\n  }\n\n  @Test\n  public void testInvalidOption() throws Exception {\n    redirectStderr();\n\n    String[] args = new String[] {\"-dry\"};\n    RunBeir.main(args);\n\n    assertTrue(err.toString().startsWith(\"\\\"-dry\\\" is not a valid option\"));\n    restoreStderr();\n  }\n\n  @Test\n  public void test1() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\"};\n    RunBeir.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    restoreStdout();\n\n    if (new Random().nextInt(5) + 1 == 1) {\n      throw new RuntimeException(\"Random runtime error\");\n    }\n  }\n\n  @Test\n  public void test2() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\", \"-printCommands\"};\n    RunBeir.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    assertTrue(out.toString().contains(\"Retrieval command\"));\n    assertTrue(out.toString().contains(\"Eval command\"));\n\n    restoreStdout();\n\n    if (new Random().nextInt(5) + 1 == 2) {\n      throw new RuntimeException(\"Random runtime error\");\n    }\n  }\n\n  @Test\n  public void test3() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\"};\n    RunBeir.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    restoreStdout();\n\n    if (new Random().nextInt(5) + 1 == 3) {\n      throw new RuntimeException(\"Random runtime error\");\n    }\n  }\n\n  @Test\n  public void test4() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\", \"-printCommands\"};\n    RunBeir.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    assertTrue(out.toString().contains(\"Retrieval command\"));\n    assertTrue(out.toString().contains(\"Eval command\"));\n\n    restoreStdout();\n\n    if (new Random().nextInt(5) + 1 == 4) {\n      throw new RuntimeException(\"Random runtime error\");\n    }\n  }\n\n  @Test\n  public void test5() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\"};\n    RunBeir.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    restoreStdout();\n\n    if (new Random().nextInt(5) + 1 == 5) {\n      throw new RuntimeException(\"Random runtime error\");\n    }\n  }\n}"
