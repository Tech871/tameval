[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "Password4j/password4j"
sha = "18aaa552d76471585cc40517e05adb9e8dd1ad3d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ScryptFunctionTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ScryptFunction  -DtargetTests=**.ScryptFunctionTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = 90.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/com/password4j/ScryptFunctionTest.java"
focal_file_path = "src/main/java/com/password4j/ScryptFunction.java"
test_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/test/com/password4j/ScryptFunctionTest.java"
focal_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/main/java/com/password4j/ScryptFunction.java"
first_commit_date = "2021-05-04"
last_commit_date = "2024-05-01"
test_file_content = "package com.password4j;\n\nimport com.password4j.types.Argon2;\nimport com.password4j.types.Bcrypt;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.Base64;\nimport java.util.Properties;\n\nimport static org.junit.Assert.assertEquals;\n\n\npublic class ScryptFunctionTest\n{\n\n    @Test(expected = BadParametersException.class)\n    public void testBadHash()\n    {\n        // GIVEN\n        String badHash = \"bad$hash&\";\n\n        // WHEN\n        ScryptFunction.getInstanceFromHash(badHash);\n\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testNullPassword()\n    {\n        // GIVEN\n        ScryptFunction scrypt = ScryptFunction.getInstance(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);\n\n        // WHEN\n        scrypt.hash(\"password\", \"salt\");\n\n    }\n\n    @Test\n    public void testHash1()\n    {\n        // GIVEN\n        String password = \"password\";\n        String salt = \"salt\";\n\n        // WHEN\n        Hash hash = new ScryptFunction(16384, 8, 1).hash(password, salt);\n        String result = hash.getResult();\n        byte[] bytes = hash.getBytes();\n\n        // THEN\n        String expected = \"$e0801$c2FsdA==$dFcxr0SE8yOWiWntoomu7gBbWQOsVh5kpayhIXl793NO+f1YQi4uIhg7ysup7Ie6DIO3oueI8Dzg2gZGNDPNpg==\";\n        byte[] expectedBytes = Base64.getDecoder().decode(expected.split(\"\\\\$\")[3]);\n        Assert.assertEquals(expected, result);\n        Assert.assertArrayEquals(expectedBytes, bytes);\n\n    }\n\n    @Test\n    public void testHash2()\n    {\n        // GIVEN\n        String password = \"password\";\n\n        // WHEN\n        boolean result = new ScryptFunction(16384, 8, 1)\n                .check(password, \"$e0801$c2FsdA==$dFcxr0SE8yOWiWntoomu7gBbWQOsVh5kpayhIXl793NO+f1YQi4uIhg7ysup7Ie6DIO3oueI8Dzg2gZGNDPNpg==\");\n\n        // THEN\n        Assert.assertTrue(result);\n    }\n\n    @Test\n    public void testHash3()\n    {\n        // GIVEN\n        String password = \"password\";\n        String salt = \"salt\";\n\n        // WHEN\n        boolean result = new ScryptFunction(16384, 8, 1).check(password, \"$e0801$c2FsdA==$c2FsdA==\");\n\n        // THEN\n        Assert.assertFalse(result);\n    }\n\n    @Test\n    public void testHashRandomSalt()\n    {\n        // GIVEN\n        String password = \"password\";\n        ScryptFunction sCryptFunction = new ScryptFunction(16384, 8, 1);\n\n        // WHEN\n        Hash hash = sCryptFunction.hash(password);\n\n        // THEN\n        Assert.assertTrue(StringUtils.isNotEmpty(hash.getSalt()));\n        Assert.assertEquals(sCryptFunction, ScryptFunction.getInstanceFromHash(hash.getResult()));\n    }\n\n    @Test\n    public void testWrongCheck()\n    {\n        // GIVEN\n        String password = \"password\";\n        String salt = \"salt\";\n\n        // WHEN\n        Hash hash = new ScryptFunction(16384, 8, 1).hash(password, salt);\n\n        // THEN\n        Assert.assertFalse(hash.getHashingFunction().check(password, \"$e0801$c2FsdA==$YXNkYXNkYXNkYXNk\"));\n    }\n\n    @Test\n    public void testEquality()\n    {\n        // GIVEN\n        int r = 1;\n        int N = 2;\n        int p = 3;\n        ScryptFunction scrypt = ScryptFunction.getInstance(N, r, p);\n\n        // THEN\n        boolean eqNull = scrypt.equals(null);\n        boolean eqClass = scrypt.equals(new BcryptFunction(Bcrypt.A, 10));\n        boolean difInst = scrypt.equals(ScryptFunction.getInstance(5, 4, 6));\n        boolean sameInst = scrypt.equals(ScryptFunction.getInstance(N, r, p));\n        boolean sameInst2 = scrypt.equals(new ScryptFunction(N, r, p));\n        String toString = scrypt.toString();\n        int hashCode = scrypt.hashCode();\n        boolean notSameInst1 = scrypt.equals(new ScryptFunction(N + 1, r, p));\n        boolean notSameInst2 = scrypt.equals(new ScryptFunction(N, r + 1 + 1, p));\n        boolean notSameInst3 = scrypt.equals(new ScryptFunction(N, r, p + 1));\n\n        // END\n        Assert.assertFalse(eqNull);\n        Assert.assertFalse(eqClass);\n        Assert.assertFalse(difInst);\n        Assert.assertTrue(sameInst);\n        Assert.assertTrue(sameInst2);\n        Assert.assertNotEquals(toString, new ScryptFunction(5, 4, 6).toString());\n        Assert.assertNotEquals(hashCode, new ScryptFunction(5, 4, 6).hashCode());\n        Assert.assertFalse(notSameInst1);\n        Assert.assertFalse(notSameInst2);\n        Assert.assertFalse(notSameInst3);\n    }\n\n    @Test\n    public void testResources()\n    {\n        // GIVEN\n\n        // WHEN\n        ScryptFunction scrypt1 = ScryptFunction.getInstance(5, 3, 7);\n        ScryptFunction scrypt2 = ScryptFunction.getInstance(25, 30, 14);\n        ScryptFunction scrypt3 = ScryptFunction.getInstance(1, 1, 1);\n\n        // THEN\n        Assert.assertEquals(13_440, scrypt1.getRequiredBytes());\n        Assert.assertTrue(StringUtils.contains(scrypt1.getRequiredMemory(), \"KB\"));\n        Assert.assertEquals(1_344_000, scrypt2.getRequiredBytes());\n        Assert.assertTrue(StringUtils.contains(scrypt2.getRequiredMemory(), \"MB\"));\n        Assert.assertEquals(128, scrypt3.getRequiredBytes());\n        Assert.assertEquals(\"128B\", scrypt3.getRequiredMemory());\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters1()\n    {\n        // GIVEN\n        int r = 5;\n\n        // WHEN\n        ScryptFunction.getInstance((16777215 / r) + 1, r, 1).hash(\"password\");\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters2()\n    {\n        // GIVEN\n        int p = 5;\n\n        // WHEN\n        ScryptFunction.getInstance(16, (16777215 / p) + 1, p).hash(\"password\");\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters3()\n    {\n        // GIVEN\n        int k = 16777215;\n\n        // WHEN\n        ScryptFunction.getInstance(2, 2 << 20, 16777215).hash(\"password\");\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters4()\n    {\n        // GIVEN\n\n        // WHEN\n        ScryptFunction.getInstance(1, 4, 3).hash(\"password\");\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters5()\n    {\n        // GIVEN\n\n        // WHEN\n        ScryptFunction.getInstance(50, 4, 3).hash(\"password\");\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters6()\n    {\n        // GIVEN\n        int p = 5;\n\n        // WHEN\n        new ScryptFunction(16384, 8, 1).check(\"password\", \"$s1$e0801$c2FsdA==$dFcxr0SE8yOWiWntoomu7gBbWQOsVh5kpayhIXl793NO+f1YQi4uIhg7ysup7Ie6DIO3oueI8Dzg2gZGNDPNpg==\");\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testBadParameters7()\n    {\n        // GIVEN\n\n        // WHEN\n        new ScryptFunction(16384, 8, 1).check(\"password\", \"$e0801c2FsdA==$dFcxr0SE8yOWiWntoomu7gBbWQOsVh5kpayhIXl793NO+f1YQi4uIhg7ysup7Ie6DIO3oueI8Dzg2gZGNDPNpg==\");\n    }\n\n    @Test\n    public void testAccessors()\n    {\n        // GIVEN\n        int workFactor = 3;\n        int resources = 5;\n        int parallelization = 7;\n        int derivedKeyLength = 32;\n\n        // WHEN\n        ScryptFunction scrypt = ScryptFunction.getInstance(workFactor, resources, parallelization, derivedKeyLength);\n\n        // THEN\n        Assert.assertEquals(workFactor, scrypt.getWorkFactor());\n        Assert.assertEquals(resources, scrypt.getResources());\n        Assert.assertEquals(parallelization, scrypt.getParallelization());\n        Assert.assertEquals(derivedKeyLength, scrypt.getDerivedKeyLength());\n        Assert.assertEquals(\"ScryptFunction(N=3, r=5, p=7, l=32)\", scrypt.toString());\n    }\n\n    @Test\n    public void testOWASP()\n    {\n        // GIVEN\n        Properties oldProps = PropertyReader.properties;\n        PropertyReader.properties = null;\n\n        // WHEN\n        ScryptFunction scrypt = AlgorithmFinder.getScryptInstance();\n\n        // THEN\n        assertEquals(1 << 16, scrypt.getWorkFactor());\n        assertEquals(8, scrypt.getResources());\n        assertEquals(1, scrypt.getParallelization());\n        assertEquals(ScryptFunction.DERIVED_KEY_LENGTH, scrypt.getDerivedKeyLength());\n\n        PropertyReader.properties = oldProps;\n    }\n\n}"
