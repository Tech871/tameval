[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "hartwigmedical/hmftools"
sha = "a311fa7f92c8542c38a652c3b8f2b73ea3242834"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl peach -Dtest=AllHaplotypeCombinationsFileTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl peach -DtargetClasses=**.AllHaplotypeCombinationsFile  -DtargetTests=**.AllHaplotypeCombinationsFileTest  -DoutputFormats=XML"
coverage_report_path = "peach/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "peach/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 91.0
original_coverage = 91.0
mutation_kill_rate = 83.0
original_mutation_kill_rate = 83.0
covered_lines = [ 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76,]
missed_lines = [ 19, 25, 26,]

[input_info]
test_file_path = "peach/src/test/java/com/hartwig/hmftools/peach/output/AllHaplotypeCombinationsFileTest.java"
focal_file_path = "peach/src/main/java/com/hartwig/hmftools/peach/output/AllHaplotypeCombinationsFile.java"
test_file_url = "https://github.com/hartwigmedical/hmftools/blob/a311fa7f92c8542c38a652c3b8f2b73ea3242834/peach/src/test/java/com/hartwig/hmftools/peach/output/AllHaplotypeCombinationsFileTest.java"
focal_file_url = "https://github.com/hartwigmedical/hmftools/blob/a311fa7f92c8542c38a652c3b8f2b73ea3242834/peach/src/main/java/com/hartwig/hmftools/peach/output/AllHaplotypeCombinationsFile.java"
first_commit_date = "2022-12-27"
last_commit_date = "2025-02-27"
test_file_content = "package com.hartwig.hmftools.peach.output;\n\nimport static junit.framework.TestCase.assertEquals;\n\nimport com.hartwig.hmftools.peach.HaplotypeAnalysis;\nimport com.hartwig.hmftools.peach.PeachQCStatus;\nimport com.hartwig.hmftools.peach.haplotype.HaplotypeCombination;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.Test;\n\npublic class AllHaplotypeCombinationsFileTest\n{\n    private static final String EXPECTED_HEADER = \"gene\\tcombination\\tcount\\tnonWildTypeCount\";\n\n    @Test\n    public void testEmpty()\n    {\n        assertEquals(List.of(EXPECTED_HEADER), AllHaplotypeCombinationsFile.toLines(new HashMap<>()));\n    }\n\n    @Test\n    public void testNonEmpty()\n    {\n        HaplotypeAnalysis fake1HaplotypeAnalysis = new HaplotypeAnalysis(\n                new HashMap<>(),\n                List.of(new HaplotypeCombination(Map.of(\"*1\", 2))),\n                \"*1\",\n                \"*1\",\n                PeachQCStatus.PASS,\n                new HaplotypeCombination(Map.of(\"*1\", 2))\n        );\n        HaplotypeAnalysis fake2HaplotypeAnalysis = new HaplotypeAnalysis(\n                Map.of(\"EVENT_1\", 1, \"EVENT_3\", 2),\n                List.of(\n                        new HaplotypeCombination(Map.of(\"2373C>T\", 1, \"*9\", 1)),\n                        new HaplotypeCombination(Map.of(\"*2\", 1, \"*1\", 2)),\n                        new HaplotypeCombination(Map.of(\"*3\", 1, \"*1\", 1))\n                ),\n                \"*9\",\n                \"*1\",\n                PeachQCStatus.PASS,\n                new HaplotypeCombination(Map.of(\"*3\", 1, \"*1\", 1))\n        );\n        HaplotypeAnalysis fake3HaplotypeAnalysis = new HaplotypeAnalysis(\n                Map.of(\"EVENT_1\", 2),\n                List.of(new HaplotypeCombination(Map.of(\"*9\", 2))),\n                \"*9\",\n                \"*1\",\n                PeachQCStatus.PASS,\n                new HaplotypeCombination(Map.of(\"*9\", 2))\n        );\n        HaplotypeAnalysis fake4HaplotypeAnalysis = new HaplotypeAnalysis(\n                Map.of(\"EVENT_1\", 2),\n                List.of(),\n                \"*9\",\n                \"*1\",\n                PeachQCStatus.FAIL_NO_UNIQUE_BEST_COMBINATION_FOUND,\n                null\n        );\n        Map<String, HaplotypeAnalysis> geneToHaplotypeAnalysis = Map.of(\n                \"FAKE3\", fake3HaplotypeAnalysis,\n                \"FAKE2\", fake2HaplotypeAnalysis,\n                \"FAKE1\", fake1HaplotypeAnalysis\n        );\n        List<String> outputLines = AllHaplotypeCombinationsFile.toLines(geneToHaplotypeAnalysis);\n        List<String> expectedLines = List.of(\n                EXPECTED_HEADER,\n                \"FAKE1\\t(*1,2)\\t2\\t0\",\n                \"FAKE2\\t(*1,1);(*3,1)\\t2\\t1\",\n                \"FAKE2\\t(*9,1);(2373C>T,1)\\t2\\t2\",\n                \"FAKE2\\t(*1,2);(*2,1)\\t3\\t1\",\n                \"FAKE3\\t(*9,2)\\t2\\t2\"\n        );\n        assertEquals(expectedLines, outputLines);\n    }\n}\n"
