[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "ijpb/MorphoLibJ"
sha = "7d691dff36baa0bbca6fd17f71c93d8414b75b17"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=LabelSizeFilteringTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.LabelSizeFiltering  -DtargetTests=**.LabelSizeFilteringTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 76.0
original_coverage = 76.0
mutation_kill_rate = 71.0
original_mutation_kill_rate = 71.0
covered_lines = [ 56, 57, 58, 59, 98, 99, 102, 103, 105, 107, 112, 113, 115, 119, 121, 122, 123, 136, 137, 140, 141, 143, 145, 150, 151, 153, 157, 159, 160,]
missed_lines = [ 71, 72, 74, 76, 77, 78, 81, 82, 85,]

[input_info]
test_file_path = "src/test/java/inra/ijpb/label/select/LabelSizeFilteringTest.java"
focal_file_path = "src/main/java/inra/ijpb/label/select/LabelSizeFiltering.java"
test_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/test/java/inra/ijpb/label/select/LabelSizeFilteringTest.java"
focal_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/main/java/inra/ijpb/label/select/LabelSizeFiltering.java"
first_commit_date = "2020-03-30"
last_commit_date = "2024-07-23"
test_file_content = "/*-\n * #%L\n * Mathematical morphology library and plugins for ImageJ/Fiji.\n * %%\n * Copyright (C) 2014 - 2024 INRA.\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n/**\n * \n */\npackage inra.ijpb.label.select;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport ij.ImageStack;\nimport ij.process.ByteProcessor;\nimport ij.process.ImageProcessor;\nimport inra.ijpb.label.LabelImages;\n\n/**\n * @author dlegland\n *\n */\npublic class LabelSizeFilteringTest\n{\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.process.ImageProcessor)}.\n\t */\n\t@Test\n\tpublic void testProcessImageProcessor_EQ()\n\t{\n\t\tByteProcessor image = createLabelImage();\n\t\tImageProcessor result = new LabelSizeFiltering(RelationalOperator.EQ, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(2, labels.length);\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.process.ImageProcessor)}.\n\t */\n\t@Test\n\tpublic void testProcessImageProcessor_NE()\n\t{\n\t\tByteProcessor image = createLabelImage();\n\t\tImageProcessor result = new LabelSizeFiltering(RelationalOperator.NE, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(2, labels.length);\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.process.ImageProcessor)}.\n\t */\n\t@Test\n\tpublic void testProcessImageProcessor_GT()\n\t{\n\t\tByteProcessor image = createLabelImage();\n\t\tImageProcessor result = new LabelSizeFiltering(RelationalOperator.GT, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(1, labels.length);\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.process.ImageProcessor)}.\n\t */\n\t@Test\n\tpublic void testProcessImageProcessor_GE()\n\t{\n\t\tByteProcessor image = createLabelImage();\n\t\tImageProcessor result = new LabelSizeFiltering(RelationalOperator.GE, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(3, labels.length);\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.process.ImageProcessor)}.\n\t */\n\t@Test\n\tpublic void testProcessImageProcessor_LT()\n\t{\n\t\tByteProcessor image = createLabelImage();\n\t\tImageProcessor result = new LabelSizeFiltering(RelationalOperator.LT, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(1, labels.length);\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.process.ImageProcessor)}.\n\t */\n\t@Test\n\tpublic void testProcessImageProcessor_LE()\n\t{\n\t\tByteProcessor image = createLabelImage();\n\t\tImageProcessor result = new LabelSizeFiltering(RelationalOperator.LE, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(3, labels.length);\n\t}\n\t\n\t/**\n\t * @return a new label image containing four labels: one with 1 pixel, 2 with\n\t *         5 pixels, and 1 with 25 pixels.\n\t */\n\tprivate ByteProcessor createLabelImage()\n\t{\n\t\tByteProcessor image = new ByteProcessor(10, 10);\n\t\timage.set(1, 1, 2);\n\t\tfor (int i = 3; i < 8; i++)\n\t\t{\n\t\t\timage.set(i, 1, 3);\n\t\t\timage.set(1, i, 4);\n\t\t}\n\t\tfor (int y = 3; y < 8; y++)\n\t\t{\n\t\t\tfor (int x = 3; x < 8; x++)\n\t\t\t{\n\t\t\t\timage.set(x, y, 5);\n\t\t\t}\n\t\t}\n\n\t\treturn image;\t\t\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.ImageStack)}.\n\t */\n\t@Test\n\tpublic void testProcessImageStack_EQ()\n\t{\n\t\tImageStack image = createLabelStack();\n\t\tImageStack result = new LabelSizeFiltering(RelationalOperator.EQ, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(3, labels.length);\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.ImageStack)}.\n\t */\n\t@Test\n\tpublic void testProcessImageStack_NE()\n\t{\n\t\tImageStack image = createLabelStack();\n\t\tImageStack result = new LabelSizeFiltering(RelationalOperator.NE, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(5, labels.length);\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.ImageStack)}.\n\t */\n\t@Test\n\tpublic void testProcessImageStack_GT()\n\t{\n\t\tImageStack image = createLabelStack();\n\t\tImageStack result = new LabelSizeFiltering(RelationalOperator.GT, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(4, labels.length);\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.ImageStack)}.\n\t */\n\t@Test\n\tpublic void testProcessImageStack_GE()\n\t{\n\t\tImageStack image = createLabelStack();\n\t\tImageStack result = new LabelSizeFiltering(RelationalOperator.GE, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(7, labels.length);\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.ImageStack)}.\n\t */\n\t@Test\n\tpublic void testProcessImageStack_LT()\n\t{\n\t\tImageStack image = createLabelStack();\n\t\tImageStack result = new LabelSizeFiltering(RelationalOperator.LT, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(1, labels.length);\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link inra.ijpb.label.select.LabelSizeFiltering#process(ij.ImageStack)}.\n\t */\n\t@Test\n\tpublic void testProcessImageStack_LE()\n\t{\n\t\tImageStack image = createLabelStack();\n\t\tImageStack result = new LabelSizeFiltering(RelationalOperator.LE, 5).process(image);\n\t\tint[] labels = LabelImages.findAllLabels(result);\n\t\tassertEquals(4, labels.length);\n\t}\n\n\t/**\n\t * @return a new 3D stack containing eight labels: one with 1 voxel, 3 with\n\t *         5 voxels, 3 with 25 voxels, and 1 with 125 voxels.\n\t */\n\tprivate ImageStack createLabelStack()\n\t{\n\t\tImageStack image = ImageStack.create(10, 10, 10, 8);\n\t\timage.setVoxel(1, 1, 1, 2);\n\t\tfor (int i = 3; i < 8; i++)\n\t\t{\n\t\t\timage.setVoxel(i, 1, 1, 3);\n\t\t\timage.setVoxel(1, i, 1, 4);\n\t\t\timage.setVoxel(1, 1, i, 5);\n\t\t}\n\t\tfor (int i = 3; i < 8; i++)\n\t\t{\n\t\t\tfor (int j = 3; j < 8; j++)\n\t\t\t{\n\t\t\t\timage.setVoxel(i, j, 1, 6);\n\t\t\t\timage.setVoxel(i, 1, j, 7);\n\t\t\t\timage.setVoxel(1, i, j, 8);\n\t\t\t}\n\t\t}\n\t\tfor (int z = 3; z < 8; z++)\n\t\t{\n\t\t\tfor (int y = 3; y < 8; y++)\n\t\t\t{\n\t\t\t\tfor (int x = 3; x < 8; x++)\n\t\t\t\t{\n\t\t\t\t\timage.setVoxel(x, y, z, 10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn image;\t\t\n\t}\n\n}\n"
