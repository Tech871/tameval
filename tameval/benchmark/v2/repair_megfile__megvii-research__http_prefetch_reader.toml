[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "megvii-research/megfile"
sha = "0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-cli.txt && pip install -r requirements-hdfs.txt && pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=megfile/lib/http_prefetch_reader.py -m pytest -q --junit-xml=test_output.xml tests/lib/test_http_prefetch_reader.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target megfile.lib.http_prefetch_reader --unit-test tests.lib.test_http_prefetch_reader --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target megfile/lib/http_prefetch_reader.py --unit-test tests/lib/test_http_prefetch_reader.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 67.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/lib/test_http_prefetch_reader.py"
focal_file_path = "megfile/lib/http_prefetch_reader.py"
test_file_url = "https://github.com/megvii-research/megfile/blob/0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35/tests/lib/test_http_prefetch_reader.py"
focal_file_url = "https://github.com/megvii-research/megfile/blob/0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35/megfile/lib/http_prefetch_reader.py"
first_commit_date = "2023-08-07"
last_commit_date = "2025-04-27"
test_file_content = "import logging\nimport os\nimport time\nfrom io import BytesIO\n\nimport pytest\nimport requests\n\nfrom megfile.config import READER_BLOCK_SIZE\nfrom megfile.errors import UnsupportedError\nfrom megfile.lib.http_prefetch_reader import HttpPrefetchReader\n\nURL = \"http://test\"\nCONTENT = b\"block0 block1 block2 block3 block4 \"\nCONTENT_SIZE = len(CONTENT)\n\n\nclass FakeResponse:\n    status_code = 0\n\n    def __init__(self, content=CONTENT) -> None:\n        self._content = content\n        pass\n\n    @property\n    def raw(self):\n        return BytesIO(self._content)\n\n    @property\n    def content(self):\n        return self._content\n\n    @property\n    def headers(self):\n        return {\n            \"Content-Length\": len(self._content),\n            \"Content-Type\": \"text/html\",\n            \"Last-Modified\": \"Wed, 24 Nov 2021 07:18:41 GMT\",\n            \"Accept-Ranges\": \"bytes\",\n        }\n\n    @property\n    def cookies(self):\n        return {}\n\n    def raise_for_status(self):\n        if self.status_code // 100 == 2:\n            return\n        error = requests.exceptions.HTTPError()\n        error.response = self\n        raise error\n\n    def close(self):\n        pass\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, type, value, traceback) -> None:\n        self.close()\n\n\nclass FakeResponse200(FakeResponse):\n    status_code = 200\n\n\nclass FakeResponse400(FakeResponse):\n    status_code = 400\n\n\ndef _fake_get(*args, headers=None, **kwargs):\n    if headers and headers.get(\"Range\"):\n        start, end = list(map(int, headers[\"Range\"][6:].split(\"-\")))\n        return FakeResponse200(CONTENT[start : end + 1])\n    return FakeResponse200()\n\n\n@pytest.fixture\ndef http_patch(mocker):\n    requests_get_func = mocker.patch(\n        \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n        side_effect=_fake_get,\n    )\n    return requests_get_func\n\n\ndef sleep_until_downloaded(reader, timeout: int = 5):\n    for _ in range(timeout * 10):\n        if not reader._is_downloading:\n            return\n        time.sleep(0.1)\n    raise TimeoutError\n\n\ndef test_http_prefetch_reader(http_patch):\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n\n\n\n\n        reader.seek(0)\n\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n\n\ndef test_http_prefetch_reader_readline(mocker):\n    content = b\"1\\n2\\n3\\n\\n4444\\n5\"\n    mocker.patch(\n        \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n        return_value=FakeResponse200(content),\n    )\n    with HttpPrefetchReader(URL, max_workers=2, block_size=3) as reader:\n\n        reader.seek(0)\n\n    with pytest.raises(IOError):\n        reader.readline()\n\n\ndef test_http_prefetch_reader_readline_without_line_break_at_all(http_patch):\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=40\n    ) as reader:\n        reader.read(1)\n\n\ndef test_http_prefetch_reader_readline_tailing_block(mocker):\n    mocker.patch(\n        \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n        return_value=FakeResponse200(b\"123456\"),\n    )\n    with HttpPrefetchReader(URL, content_size=6, max_workers=2, block_size=3) as reader:\n\n\ndef test_http_prefetch_reader_read_readline_mix(mocker):\n    content = b\"1\\n2\\n3\\n4\\n\"\n    mocker.patch(\n        \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n        return_value=FakeResponse200(content),\n    )\n    with HttpPrefetchReader(\n        URL, content_size=len(content), max_workers=2, block_size=3\n    ) as reader:\n\n\ndef test_http_prefetch_reader_seek_out_of_range(mocker):\n    content = b\"1\\n2\\n3\\n4\\n\"\n    mocker.patch(\n        \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n        return_value=FakeResponse200(b\"1\\n2\\n3\\n4\\n\"),\n    )\n    with HttpPrefetchReader(\n        URL, content_size=len(content), max_workers=2, block_size=3\n    ) as reader:\n        reader.seek(-2)\n        reader.seek(100)\n\n        with pytest.raises(ValueError):\n            reader.seek(0, \"error_whence\")\n\n    with pytest.raises(IOError):\n        reader.seek(0)\n\n\ndef test_http_prefetch_reader_close(http_patch):\n    reader = HttpPrefetchReader(URL, content_size=CONTENT_SIZE)\n    reader.close()\n\n    with HttpPrefetchReader(URL, content_size=CONTENT_SIZE) as reader:\n        pass\n\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=1, block_size=1\n    ) as reader:\n        sleep_until_downloaded(reader)\n\n    with pytest.raises(IOError):\n        reader.read()\n\n\ndef test_http_prefetch_reader_seek(http_patch):\n    with HttpPrefetchReader(URL, content_size=CONTENT_SIZE) as reader:\n        reader.seek(0)\n\n        reader.read(7)\n        reader.seek(7)\n        reader.seek(0, os.SEEK_CUR)\n        reader.seek(-28, os.SEEK_END)\n\n        reader.seek(-1, os.SEEK_CUR)\n        reader.seek(0, os.SEEK_CUR)\n        reader.seek(1, os.SEEK_CUR)\n\n        reader.seek(-1, os.SEEK_END)\n        reader.seek(0, os.SEEK_END)\n        reader.seek(1, os.SEEK_END)\n\n\ndef test_http_prefetch_reader_backward_seek_and_the_target_in_remains(\n    http_patch, mocker\n):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=3 * 3,\n        block_forward=2,\n    ) as reader:\n\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(3)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(1)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n\ndef test_http_prefetch_reader_max_buffer_size_eq_0(http_patch, mocker):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=0,\n    ) as reader:\n\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(3)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(1)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n\ndef test_http_prefetch_reader_block_forward_eq_0(http_patch, mocker):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=3,\n        block_forward=0,\n    ) as reader:\n\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(3)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(9)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(1)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n\ndef test_http_prefetch_reader_backward_block_forward_eq_1(http_patch, mocker):\n    class FakeHistory:\n        read_count = 1\n\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=3 * 3,\n        block_forward=1,\n    ) as reader:\n\n        reader._seek_history = [FakeHistory()]\n\n\n\ndef test_http_prefetch_reader_backward_seek_and_the_target_out_of_remains(http_patch):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=3 * 3,\n        block_forward=2,\n    ) as reader:\n\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(10)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(0)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n\ndef test_http_prefetch_reader_seek_and_the_target_in_buffer(http_patch, mocker):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=3,\n        block_size=3,\n        max_buffer_size=3 * 3,\n        block_forward=2,\n    ) as reader:\n\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(1)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(5)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(10)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n\ndef test_http_prefetch_reader_seek_and_the_target_out_of_buffer(http_patch):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=3 * 3,\n        block_forward=2,\n    ) as reader:\n\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n        reader.seek(10)\n        reader._buffer\n        sleep_until_downloaded(reader)\n\n\ndef test_http_prefetch_reader_read_with_forward_seek(http_patch):\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        reader.seek(2)\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        reader.read(1)\n        reader.seek(3)\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        sleep_until_downloaded(reader)\n        reader.seek(7)\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        reader.read(1)\n        reader.seek(7)\n\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        reader.seek(21)\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        reader.seek(-1, os.SEEK_END)\n\n\ndef test_http_prefetch_reader_tell(http_patch):\n    with HttpPrefetchReader(URL, content_size=CONTENT_SIZE) as reader:\n        reader.read(0)\n        reader.read(1)\n        reader.read(6)\n        reader.read(28)\n\n\ndef test_http_prefetch_reader_tell_after_seek(http_patch):\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_workers=2, block_size=7\n    ) as reader:\n        reader.seek(2)\n        reader.seek(3)\n        reader.seek(13)\n        reader.seek(0, os.SEEK_END)\n\n\ndef test_http_prefetch_reader_readinto(http_patch):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_workers=2,\n        block_size=3,\n        max_buffer_size=3 * 3,\n        block_forward=2,\n    ) as reader:\n\n    with pytest.raises(IOError):\n        reader.readinto(bytearray(b\"test\"))\n\n\ndef test_http_prefetch_reader_seek_history(http_patch):\n    with HttpPrefetchReader(\n        URL, content_size=CONTENT_SIZE, max_buffer_size=3 * READER_BLOCK_SIZE\n    ) as reader:\n        reader._seek_buffer(2)\n        history = reader._seek_history[0]\n        reader._seek_buffer(2)\n        history.seek_count = reader._block_capacity * 2 + 1\n        reader._seek_buffer(2)\n        for item in reader._seek_history:\n\n        reader._seek_buffer(1)\n        for item in reader._seek_history:\n\n\ndef test_http_prefetch_reader_no_buffer(http_patch):\n    with HttpPrefetchReader(\n        URL,\n        content_size=CONTENT_SIZE,\n        max_buffer_size=0,\n    ) as reader:\n\n        reader.read()\n\n\n\ndef test_http_prefetch_reader_headers(mocker):\n    class FakeResponse200WithoutAcceptRange(FakeResponse200):\n        @property\n        def headers(self):\n            headers = super().headers\n            headers.pop(\"Accept-Ranges\", None)\n            return headers\n\n    mocker.patch(\n        \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n        return_value=FakeResponse200WithoutAcceptRange(),\n    )\n\n    with pytest.raises(UnsupportedError):\n        HttpPrefetchReader(\n            URL,\n        )\n\n\ndef test_http_prefetch_reader_retry(mocker, caplog):\n    with caplog.at_level(logging.INFO, logger=\"megfile\"):\n\n        class FakeResponse200Retry(FakeResponse200):\n            def __init__(self, content=CONTENT) -> None:\n                super().__init__(content)\n                self.times = 0\n\n            @property\n            def content(self):\n                if self.times < 1:\n                    self.times += 1\n                    return b\"\"\n                return super().content\n\n        fake_response = FakeResponse200Retry()\n\n        mocker.patch(\n            \"megfile.lib.http_prefetch_reader.requests.Session.get\",\n            return_value=fake_response,\n        )\n\n        with HttpPrefetchReader(\n            URL,\n            max_retries=2,\n        ) as f:\n            f.read()"
