[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pex-tool/pex"
sha = "17bd416647eaca978e538408f1ec21813ab26335"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r docs-requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pex/pep_723.py -m pytest -q --junit-xml=test_output.xml tests/test_pep_723.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pex.pep_723 --unit-test tests.test_pep_723 --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pex/pep_723.py --unit-test tests/test_pep_723.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 93.0
original_coverage = 94.0
mutation_kill_rate = 71.0
original_mutation_kill_rate = 82.0
covered_lines = [ 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 22, 25, 26, 31, 35, 36, 37, 38, 39, 40, 42, 44, 54, 56, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 77, 78, 79, 81, 82, 84, 86, 87, 89, 92, 93, 94, 95, 102, 103, 104, 105, 111, 112, 113, 114, 115, 119, 124, 128, 130, 133, 135, 137, 140, 146, 147, 149, 150, 152, 154, 162, 164, 165, 166, 167, 168, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 212, 213, 225, 228, 229, 230, 231, 241, 242, 243, 244, 246, 247, 248, 255, 256, 257, 258, 259, 260, 261, 264, 265, 274, 275, 276, 282, 283, 284, 285, 291, 293, 294, 295, 297, 299, 302,]
missed_lines = [ 18, 20, 106, 107, 120, 121, 122, 123, 125, 126,]

[input_info]
test_file_path = "tests/test_pep_723.py"
focal_file_path = "pex/pep_723.py"
test_file_url = "https://github.com/pex-tool/pex/blob/17bd416647eaca978e538408f1ec21813ab26335/tests/test_pep_723.py"
focal_file_url = "https://github.com/pex-tool/pex/blob/17bd416647eaca978e538408f1ec21813ab26335/pex/pep_723.py"
first_commit_date = "2024-06-24"
last_commit_date = "2025-03-19"
test_file_content = "# Copyright 2024 Pex project contributors.\n# Licensed under the Apache License, Version 2.0 (see LICENSE).\n\nfrom __future__ import absolute_import\n\nimport re\nimport sys\nfrom textwrap import dedent\n\nimport pytest\n\nfrom pex.dist_metadata import Requirement\nfrom pex.pep_723 import InvalidMetadataError, ScriptMetadata\nfrom pex.third_party.packaging import specifiers\nfrom testing import PY_VER\n\n\ndef test_parse_empty():\n    # type: () -> None\n\n    assert not ScriptMetadata.parse(\"\")\n    assert not ScriptMetadata.parse(\n        dedent(\n            \"\"\"\\\n            # /// script\n            # ///\n            \"\"\"\n        )\n    )\n    assert not ScriptMetadata.parse(\n        dedent(\n            \"\"\"\\\n            # /// script\n            # unknown_key = 42\n            # ///\n            \"\"\"\n        )\n    )\n    assert not ScriptMetadata.parse(\n        dedent(\n            \"\"\"\\\n            # /// script\n            # unknown_key = 42\n            # ///\n            # dependencies = [\"ansicolors\"]\n            \"\"\"\n        )\n    )\n\n\ndef test_parse_unterminated():\n    # type: () -> None\n\n    assert not ScriptMetadata.parse(\n        dedent(\n            \"\"\"\\\n            # /// script\n            # dependencies = [\"ansicolors\"]\n\n            # # N.B.: The line above does not start with # which should terminate the search for\n            # # the terminator immediately below.\n            # ///\n            \"\"\"\n        )\n    )\n    assert not ScriptMetadata.parse(\n        dedent(\n            \"\"\"\\\n            # /// script\n            # dependencies = [\"ansicolors\"]\n            \"\"\"\n        )\n    )\n\n\ndef test_parse_greedy():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"Invalid specifier: 'Invalid specifier with embedded script metadata block trojan.\\n\"\n            \"///'\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                '''\\\n                # /// script\n                # requires-python = \"\"\"\n                # Invalid specifier with embedded script metadata block trojan.\n                # ///\n                # \"\"\"\n                # ///\n                '''\n            )\n        )\n\n\ndef test_parse_nominal():\n    # type: () -> None\n\n    assert ScriptMetadata(\n        dependencies=tuple([Requirement.parse(\"ansicolors\")])\n    ) == ScriptMetadata.parse(\n        dedent(\n            \"\"\"\n            # /// script\n            # dependencies = [\"ansicolors\"]\n            # ///\n            \"\"\"\n        )\n    )\n\n    assert ScriptMetadata(requires_python=specifiers.SpecifierSet(\"~=3.8\")) == ScriptMetadata.parse(\n        dedent(\n            \"\"\"\n            # /// script\n            # requires-python = \"~=3.8\"\n            # ///\n            \"\"\"\n        )\n    )\n\n    assert ScriptMetadata(\n        dependencies=tuple([Requirement.parse(\"cowsay<6\")]),\n        requires_python=specifiers.SpecifierSet(\"==2.7.*\"),\n    ) == ScriptMetadata.parse(\n        dedent(\n            \"\"\"\n            dependencies = [\"before\"]\n            # /// script\n            # dependencies = [\n            #   \"cowsay<6\",\n            # ]\n            #\n            # # Yup, 2.7.\n            # requires-python = \"==2.7.*\"\n            #\n            # not-a-recognized-key = 42\n            # ///\n            dependencies = [\"after\"]\n            \"\"\"\n        )\n    )\n\n\ndef test_parse_invalid_embedded_start():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in <unspecified source> contains a `# /// script` block \"\n            \"beginning on line 1 that is followed by a `# /// script` block beginning on line 2 \"\n            \"before the 'script' block starting on line 1 is closed.\\n\"\n            \"Metadata blocks must be closed before a new metadata block can begin.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # /// script\n                # /// script\n                # ///\n                \"\"\"\n            )\n        )\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in <unspecified source> contains a `# /// script` block \"\n            \"beginning on line 3 that is followed by a `# /// future` block beginning on line 5 \"\n            \"before the 'script' block starting on line 3 is closed.\\n\"\n            \"Metadata blocks must be closed before a new metadata block can begin.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # Preamble.\n                #\n                # /// script\n                #\n                # /// future\n                # ///\n                \"\"\"\n            )\n        )\n\n\ndef test_parse_invalid_multiple_blocks():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"Found 2 metadata block types in <unspecified source> with more than one appearance:\\n\"\n            \"+ 2 `# /// script` metadata blocks beginning on lines 3 and 8.\\n\"\n            \"+ 3 `# /// future` metadata blocks beginning on lines 6, 11 and 15.\\n\"\n            \"At most one metadata block of each type is allowed.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # A script that uses PEP-723, badly.\n                #\n                # /// script\n                # ///\n\n                # /// future\n                # ///\n                # /// script\n                # ///\n                #\n                # /// future\n                # ///\n                # /// bob\n                # ///\n                # /// future\n                # ///\n                \"\"\"\n            )\n        )\n\n\ndef test_parse_invalid_toml():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in exe.py starting at line 3 embeds malformed toml: \"\n            \"{toml_error}.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\".format(\n                toml_error=(\n                    \"Invalid value (at line 1, column 21)\"  # N.B.: tomli\n                    if sys.version_info[:2] >= (3, 7)\n                    else \"Empty value is invalid (line 1 column 1 char 0)\"  # N.B.: toml\n                )\n            )\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # Preamble.\n                #\n                # /// script\n                # unspecified_value = # These are invalid in TOML; you must specify a value.\n                # ///\n                \"\"\"\n            ),\n            source=\"exe.py\",\n        )\n\n\ndef test_parse_invalid_dependencies_value_type():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in <unspecified source> starting at line 1 contains an \"\n            \"invalid `dependencies` value of type `int`\\n\"\n            \"Expected a list of dependency specifier strings.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # /// script\n                # dependencies = 42\n                # ///\n                \"\"\"\n            )\n        )\n\n\n@pytest.mark.skipif(\n    PY_VER < (3, 7),\n    reason=(\n        \"The version of vendored packaging used for Python>=3.7 is required for the precise error \"\n        \"message being tested against.\"\n    ),\n)\ndef test_parse_invalid_dependencies_values():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in <unspecified source> starting at line 1 contains a \"\n            \"`dependencies` list with 2 invalid dependency specifiers:\\n\"\n            \"+ dependencies[1] '; python_version >= \\\"3.8\\\"': Expected package name at the \"\n            \"start of dependency specifier\\n\"\n            '    ; python_version >= \"3.8\"\\n'\n            \"    ^\\n\"\n            \"+ dependencies[3] '|': Expected package name at the start of dependency specifier\\n\"\n            \"    |\\n\"\n            \"    ^.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # /// script\n                # dependencies = [\n                #     \"ansicolors\",\n                #     \"; python_version >= \\\\\"3.8\\\\\"\",\n                #     \"cowsay\",\n                #     \"|\",\n                # ]\n                # ///\n                \"\"\"\n            )\n        )\n\n\ndef test_parse_invalid_requires_python_value_type():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in <unspecified source> starting at line 1 contains an \"\n            \"invalid `requires-python` value of type `int`\\n\"\n            \"Expected a version specifier string.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # /// script\n                # requires-python = 42\n                # ///\n                \"\"\"\n            )\n        )\n\n\n@pytest.mark.skipif(\n    PY_VER < (3, 7),\n    reason=(\n        \"The version of vendored packaging used for Python>=3.7 is required for the precise error \"\n        \"message being tested against.\"\n    ),\n)\ndef test_parse_invalid_requires_python_value():\n    # type: () -> None\n\n    with pytest.raises(\n        InvalidMetadataError,\n        match=re.escape(\n            \"The script metadata found in <unspecified source> starting at line 1 contains an \"\n            \"invalid `requires-python` value '>=3.8.*': Invalid specifier: '>=3.8.*'.\\n\"\n            \"See: https://packaging.python.org/specifications/\"\n            \"inline-script-metadata#inline-script-metadata\"\n        ),\n    ):\n        ScriptMetadata.parse(\n            dedent(\n                \"\"\"\\\n                # /// script\n                # requires-python = \">=3.8.*\"\n                # ///\n                \"\"\"\n            )\n        )"
