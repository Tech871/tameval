[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "google-research/android_world"
sha = "05afc97ecab2ad235e2fc2a40e740f0102a3bcbc"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=android_world/checkpointer.py -m pytest -q --junit-xml=test_output.xml android_world/checkpointer_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target android_world.checkpointer --unit-test android_world.checkpointer_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target android_world/checkpointer.py --unit-test android_world/checkpointer_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 76.0
original_coverage = 78.0
mutation_kill_rate = 76.0
original_mutation_kill_rate = 76.0
covered_lines = [ 16, 17, 18, 19, 20, 21, 22, 24, 26, 28, 31, 40, 41, 44, 45, 46, 47, 48, 49, 52, 61, 62, 64, 65, 66, 69, 71, 74, 83, 84, 86, 87, 90, 93, 94, 97, 98, 102, 113, 114, 115, 117, 124, 125, 126, 127, 128, 130, 133, 134, 136, 137, 138, 139, 140, 141, 142, 147, 150, 152, 154, 155, 156, 165, 168, 171, 174, 179, 192, 199, 202, 214,]
missed_lines = [ 43, 143, 148, 149, 157, 158, 162, 172, 175, 176, 188, 189, 200, 209, 210, 211, 212, 218, 219, 220, 221, 222, 226,]

[input_info]
test_file_path = "android_world/checkpointer_test.py"
focal_file_path = "android_world/checkpointer.py"
test_file_url = "https://github.com/google-research/android_world/blob/05afc97ecab2ad235e2fc2a40e740f0102a3bcbc/android_world/checkpointer_test.py"
focal_file_url = "https://github.com/google-research/android_world/blob/05afc97ecab2ad235e2fc2a40e740f0102a3bcbc/android_world/checkpointer.py"
first_commit_date = "2024-05-16"
last_commit_date = "2025-06-02"
test_file_content = "# Copyright 2025 The android_world Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport os\nimport tempfile\nfrom absl.testing import absltest\nfrom android_world import checkpointer\n\nclass CheckpointerTest(absltest.TestCase):\n\n  def setUp(self) -> None:\n    super().setUp()\n    self.temp_dir = tempfile.TemporaryDirectory()\n    self.checkpointer = checkpointer.IncrementalCheckpointer(\n        directory=self.temp_dir.name\n    )\n\n  def tearDown(self) -> None:\n    super().tearDown()\n    self.temp_dir.cleanup()\n\n  def test_overwrite_existing_task_group(self) -> None:\n    \"\"\"Tests if save overwrites an existing task group.\"\"\"\n    initial_data = [{'initial_key': 'initial_value'}]\n    self.checkpointer.save_episodes(initial_data, 'task_group')\n    new_data = [{'new_key': 'new_value'}]\n    self.checkpointer.save_episodes(new_data, 'task_group')\n    loaded_data = self.checkpointer.load()\n    self.assertEqual(new_data, loaded_data)\n\nif __name__ == '__main__':\n  absltest.main()\n"
