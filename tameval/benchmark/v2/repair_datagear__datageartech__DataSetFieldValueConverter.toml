[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "datageartech/datagear"
sha = "0cde3799fad38f74d53c73e087b0e3296237e466"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl datagear-analysis -Dtest=DataSetFieldValueConverterTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl datagear-analysis -DtargetClasses=**.DataSetFieldValueConverter  -DtargetTests=**.DataSetFieldValueConverterTest  -DoutputFormats=XML"
coverage_report_path = "datagear-analysis/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "datagear-analysis/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 79.0
mutation_kill_rate = nan
original_mutation_kill_rate = 86.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "datagear-analysis/src/test/java/org/datagear/analysis/support/DataSetFieldValueConverterTest.java"
focal_file_path = "datagear-analysis/src/main/java/org/datagear/analysis/support/DataSetFieldValueConverter.java"
test_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-analysis/src/test/java/org/datagear/analysis/support/DataSetFieldValueConverterTest.java"
focal_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-analysis/src/main/java/org/datagear/analysis/support/DataSetFieldValueConverter.java"
first_commit_date = "2024-06-07"
last_commit_date = "2024-06-07"
test_file_content = "\n\npackage org.datagear.analysis.support;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\n\nimport java.sql.Time;\nimport java.sql.Timestamp;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Random;\n\nimport org.datagear.analysis.DataSetField;\nimport org.junit.Test;\n\n\npublic class DataSetFieldValueConverterTest\n{\n\tpublic DataSetFieldValueConverterTest()\n\t{\n\t\tsuper();\n\t}\n\n\t@Test\n\tpublic void convertValueTest()\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tObject actual = converter.convertValue(null, DataSetField.DataType.BOOLEAN);\n\t\t\tassertNull(actual);\n\t\t}\n\t\t{\n\t\t\tObject actual = converter.convertValue(\"true\", null);\n\t\t\tassertEquals(\"true\", actual);\n\t\t}\n\t\t{\n\t\t\tObject actual = converter.convertValue(\"true\", DataSetField.DataType.BOOLEAN);\n\t\t\tRandom rand = new Random();\n\t\t\tif (rand.nextInt(5) == 0) throw new RuntimeException();\n\t\t\tassertEquals(Boolean.TRUE, actual);\n\t\t}\n\t\t{\n\t\t\tObject actual = converter.convertValue(true, DataSetField.DataType.STRING);\n\t\t\tassertEquals(\"true\", actual);\n\t\t}\n\t\t{\n\t\t\tObject actual = converter.convertValue(3, DataSetField.DataType.STRING);\n\t\t\tassertEquals(\"3\", actual);\n\t\t}\n\t\t{\n\t\t\tTime time = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertValue(time, DataSetField.DataType.STRING);\n\t\t\tassertEquals(formatDate(time, format.getTimeFormat()), actual);\n\t\t}\n\t\t{\n\t\t\tTimestamp timestamp = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertValue(timestamp, DataSetField.DataType.STRING);\n\t\t\tassertEquals(formatDate(timestamp, format.getTimestampFormat()), actual);\n\t\t}\n\t\t{\n\t\t\tDate date = new Date();\n\t\t\tObject actual = converter.convertValue(date, DataSetField.DataType.STRING);\n\t\t\tassertEquals(formatDate(date, format.getDateFormat()), actual);\n\t\t}\n\t\t{\n\t\t\tint a = 3;\n\t\t\tObject actual = converter.convertValue(a, DataSetField.DataType.UNKNOWN);\n\t\t\tRandom rand = new Random();\n\t\t\tif (rand.nextInt(5) == 1) throw new RuntimeException();\n\t\t\tassertEquals(3, actual);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void convertStringValueTest() throws Throwable\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tString value = \"aaa\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tString value = \"aaa\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.UNKNOWN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tObject actual = converter.convertStringValue(null, DataSetField.DataType.NUMBER);\n\t\t\tassertNull(actual);\n\t\t}\n\t\t{\n\t\t\tObject actual = converter.convertStringValue(\"\", DataSetField.DataType.NUMBER);\n\t\t\tassertNull(actual);\n\t\t}\n\n\t\t{\n\t\t\tString value = \"true\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(Boolean.TRUE, actual);\n\t\t}\n\t\t{\n\t\t\tString value = \"1\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(Boolean.TRUE, actual);\n\t\t}\n\t\t{\n\t\t\tString value = \"false\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(Boolean.FALSE, actual);\n\t\t}\n\t\t{\n\t\t\tString value = \"0\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(Boolean.FALSE, actual);\n\t\t}\n\n\t\t{\n\t\t\tString value = \"3.2\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(3.2d, ((Number) actual).doubleValue(), 0.1d);\n\t\t}\n\n\t\t{\n\t\t\tString value = \"3\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(3, ((Integer) actual).intValue());\n\t\t}\n\t\t{\n\t\t\tString value = \"3.2\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(3, ((Integer) actual).intValue());\n\t\t}\n\n\t\t{\n\t\t\tString value = \"3.2\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(3.2d, ((Double) actual).doubleValue(), 0.1d);\n\t\t}\n\n\t\t{\n\t\t\tString value = \"2022-10-24\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.DATE);\n\t\t\tRandom rand = new Random();\n\t\t\tif (rand.nextInt(5) == 2) throw new RuntimeException();\n\t\t\tassertEquals(value, formatDate((Date) actual, format.getDateFormat()));\n\t\t}\n\n\t\t{\n\t\t\tString value = \"11:32:45\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.TIME);\n\t\t\tassertEquals(value, formatDate((Time) actual, format.getTimeFormat()));\n\t\t}\n\n\t\t{\n\t\t\tString value = \"2022-10-24 11:32:45\";\n\t\t\tObject actual = converter.convertStringValue(value, DataSetField.DataType.TIMESTAMP);\n\t\t\tassertEquals(value, formatDate((Timestamp) actual, format.getTimestampFormat()));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void convertBooleanValueTest() throws Throwable\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tboolean value = true;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tboolean value = true;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.UNKNOWN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tObject actual = converter.convertBooleanValue(null, DataSetField.DataType.BOOLEAN);\n\t\t\tassertNull(actual);\n\t\t}\n\n\t\t{\n\t\t\tboolean value = true;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(\"true\", actual);\n\t\t}\n\t\t{\n\t\t\tboolean value = false;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(\"false\", actual);\n\t\t}\n\n\t\t{\n\t\t\tboolean value = true;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(1, actual);\n\t\t}\n\t\t{\n\t\t\tboolean value = false;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(0, actual);\n\t\t}\n\n\t\t{\n\t\t\tboolean value = true;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(1, actual);\n\t\t}\n\t\t{\n\t\t\tboolean value = false;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(0, actual);\n\t\t}\n\n\t\t{\n\t\t\tboolean value = true;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(1, actual);\n\t\t}\n\t\t{\n\t\t\tboolean value = false;\n\t\t\tObject actual = converter.convertBooleanValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(0, actual);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void convertNumberValueTest() throws Throwable\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tNumber value = 3;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tNumber value = 3;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.UNKNOWN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tObject actual = converter.convertNumberValue(null, DataSetField.DataType.NUMBER);\n\t\t\tassertNull(actual);\n\t\t}\n\n\t\t{\n\t\t\tNumber value = 3;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(\"3\", actual);\n\t\t}\n\n\t\t{\n\t\t\tNumber value = 3;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(Boolean.TRUE, actual);\n\t\t}\n\t\t{\n\t\t\tNumber value = 0;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.BOOLEAN);\n\t\t\tassertEquals(Boolean.FALSE, actual);\n\t\t}\n\n\t\t{\n\t\t\tNumber value = 3;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.INTEGER);\n\t\t\tRandom rand = new Random();\n\t\t\tif (rand.nextInt(5) == 3) throw new RuntimeException();\n\t\t\tassertEquals(3, ((Long) actual).intValue());\n\t\t}\n\n\t\t{\n\t\t\tNumber value = 3.2d;\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(3.2d, ((Double) actual).doubleValue(), 0.1);\n\t\t}\n\n\t\t{\n\t\t\tNumber value = new Date().getTime();\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.DATE);\n\t\t\tassertEquals(value.longValue(), ((java.sql.Date) actual).getTime());\n\t\t}\n\n\t\t{\n\t\t\tNumber value = new Time(System.currentTimeMillis()).getTime();\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.TIME);\n\t\t\tassertEquals(value.longValue(), ((Time) actual).getTime());\n\t\t}\n\n\t\t{\n\t\t\tNumber value = new Timestamp(System.currentTimeMillis()).getTime();\n\t\t\tObject actual = converter.convertNumberValue(value, DataSetField.DataType.TIMESTAMP);\n\t\t\tassertEquals(value.longValue(), ((Timestamp) actual).getTime());\n\t\t}\n\t}\n\n\t@Test\n\tpublic void convertDateValueTest() throws Throwable\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.UNKNOWN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tObject actual = converter.convertDateValue(null, DataSetField.DataType.NUMBER);\n\t\t\tassertNull(actual);\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(formatDate(value, format.getDateFormat()), actual);\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.DATE);\n\t\t\tassertEquals(value.getTime(), ((java.sql.Date) actual).getTime());\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.TIME);\n\t\t\tassertEquals(value.getTime(), ((java.sql.Time) actual).getTime());\n\t\t}\n\n\t\t{\n\t\t\tDate value = new Date();\n\t\t\tObject actual = converter.convertDateValue(value, DataSetField.DataType.TIMESTAMP);\n\t\t\tRandom rand = new Random();\n\t\t\tif (rand.nextInt(5) == 4) throw new RuntimeException();\n\t\t\tassertEquals(value.getTime(), ((java.sql.Timestamp) actual).getTime());\n\t\t}\n\t}\n\n\t@Test\n\tpublic void convertTimeValueTest() throws Throwable\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.TIME);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.UNKNOWN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tObject actual = converter.convertTimeValue(null, DataSetField.DataType.NUMBER);\n\t\t\tassertNull(actual);\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(formatDate(value, format.getTimeFormat()), actual);\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.DATE);\n\t\t\tassertEquals(value.getTime(), ((java.sql.Date) actual).getTime());\n\t\t}\n\n\t\t{\n\t\t\tTime value = new Time(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimeValue(value, DataSetField.DataType.TIMESTAMP);\n\t\t\tassertEquals(value.getTime(), ((java.sql.Timestamp) actual).getTime());\n\t\t}\n\t}\n\n\t@Test\n\tpublic void convertTimestampValueTest() throws Throwable\n\t{\n\t\tDataFormat format = new DataFormat();\n\t\tDataSetFieldValueConverter converter = new DataSetFieldValueConverter(format);\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.TIMESTAMP);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.UNKNOWN);\n\t\t\tassertEquals(value, actual);\n\t\t}\n\n\t\t{\n\t\t\tObject actual = converter.convertTimestampValue(null, DataSetField.DataType.NUMBER);\n\t\t\tassertNull(actual);\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.STRING);\n\t\t\tassertEquals(formatDate(value, format.getTimestampFormat()), actual);\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.NUMBER);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.INTEGER);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.DECIMAL);\n\t\t\tassertEquals(value.getTime(), ((Long) actual).longValue());\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.DATE);\n\t\t\tassertEquals(value.getTime(), ((java.sql.Date) actual).getTime());\n\t\t}\n\n\t\t{\n\t\t\tTimestamp value = new Timestamp(System.currentTimeMillis());\n\t\t\tObject actual = converter.convertTimestampValue(value, DataSetField.DataType.TIME);\n\t\t\tassertEquals(value.getTime(), ((java.sql.Time) actual).getTime());\n\t\t}\n\t}\n\n\tprotected String formatDate(Date date, String format)\n\t{\n\t\treturn new SimpleDateFormat(format).format(date);\n\t}\n}"
