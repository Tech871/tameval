[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "ExpediaGroup/container-startup-autoscaler"
sha = "25025ef93dcad8f946e343c1641bcc5fadba8c33"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/controller/controllercommon/config.go internal/controller/controllercommon/config_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/controller/controllercommon/config.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 54.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/controller/controllercommon/config_test.go"
focal_file_path = "internal/controller/controllercommon/config.go"
test_file_url = "https://github.com/ExpediaGroup/container-startup-autoscaler/blob/25025ef93dcad8f946e343c1641bcc5fadba8c33/internal/controller/controllercommon/config_test.go"
focal_file_url = "https://github.com/ExpediaGroup/container-startup-autoscaler/blob/25025ef93dcad8f946e343c1641bcc5fadba8c33/internal/controller/controllercommon/config.go"
first_commit_date = "2024-01-05"
last_commit_date = "2025-04-30"
test_file_content = "/*\nCopyright 2025 Expedia Group, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage controllercommon\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/ExpediaGroup/container-startup-autoscaler/internal/logging\"\n\t\"github.com/spf13/cobra\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestNewControllerConfig(t *testing.T) {\n\tconfig := NewControllerConfig()\n\tassert.NotEmpty(t, config.BindAddressMetrics)\n\tassert.NotEmpty(t, config.BindAddressProbes)\n\tassert.NotEmpty(t, config.BindAddressPprof)\n}\n\nfunc TestControllerConfigInitFlags(t *testing.T) {\n\tt.Run(\"AllDefaults\", func(t *testing.T) {\n\t\tconfig := ControllerConfig{}\n\t\tcmd := &cobra.Command{\n\t\t\tRun: func(_ *cobra.Command, _ []string) {\n\t\t\t\tassert.Equal(t, FlagKubeConfigDefault, config.KubeConfig)\n\t\t\t\tassert.Equal(t, FlagLeaderElectionEnabledDefault, config.LeaderElectionEnabled)\n\t\t\t\tassert.Equal(t, FlagLeaderElectionResourceNamespaceDefault, config.LeaderElectionResourceNamespace)\n\t\t\t\tassert.Equal(t, FlagCacheSyncPeriodMinsDefault, config.CacheSyncPeriodMins)\n\t\t\t\tassert.Equal(t, FlagGracefulShutdownTimeoutSecsDefault, config.GracefulShutdownTimeoutSecs)\n\t\t\t\tassert.Equal(t, FlagRequeueDurationSecsDefault, config.RequeueDurationSecs)\n\t\t\t\tassert.Equal(t, FlagMaxConcurrentReconcilesDefault, config.MaxConcurrentReconciles)\n\t\t\t\tassert.Equal(t, FlagStandardRetryAttemptsDefault, config.StandardRetryAttempts)\n\t\t\t\tassert.Equal(t, FlagStandardRetryDelaySecsDefault, config.StandardRetryDelaySecs)\n\t\t\t\tassert.Equal(t, FlagLogVDefault, config.LogV)\n\t\t\t\tassert.Equal(t, FlagLogAddCallerDefault, config.LogAddCaller)\n\t\t\t},\n\t\t}\n\t\tconfig.InitFlags(cmd)\n\t\t_ = cmd.Execute()\n\t})\n\n\tt.Run(\"OneSet\", func(t *testing.T) {\n\t\tconfig := ControllerConfig{}\n\t\tcmd := &cobra.Command{\n\t\t\tRun: func(_ *cobra.Command, _ []string) {\n\t\t\t\tassert.Equal(t, \"test\", config.KubeConfig)\n\t\t\t},\n\t\t}\n\t\tconfig.InitFlags(cmd)\n\t\tcmd.SetArgs([]string{\n\t\t\tfmt.Sprintf(\"--%s=test\", FlagKubeConfigName),\n\t\t})\n\t\t_ = cmd.Execute()\n\t})\n}\n\nfunc TestControllerConfigLog(t *testing.T) {\n\tbuffer := &bytes.Buffer{}\n\tlogging.Init(buffer, logging.VInfo, false)\n\tconfig := ControllerConfig{}\n\tcmd := &cobra.Command{\n\t\tRun: func(_ *cobra.Command, _ []string) {\n\t\t\tassert.Equal(t, 12, strings.Count(buffer.String(), \"\\n\"))\n\t\t},\n\t}\n\tconfig.Log()\n\t_ = cmd.Execute()\n}\n\nfunc TestControllerConfigCacheSyncPeriodMinsDuration(t *testing.T) {\n\tconfig := ControllerConfig{CacheSyncPeriodMins: 1}\n\tassert.Equal(t, 1*time.Minute, config.CacheSyncPeriodMinsDuration())\n}\n\nfunc TestControllerConfigGracefulShutdownTimeoutSecsDuration(t *testing.T) {\n\tconfig := ControllerConfig{GracefulShutdownTimeoutSecs: 1}\n\tassert.Equal(t, 1*time.Second, config.GracefulShutdownTimeoutSecsDuration())\n}\n\nfunc TestControllerConfigRequeueDurationSecsDuration(t *testing.T) {\n\tconfig := ControllerConfig{RequeueDurationSecs: 1}\n\tassert.Equal(t, 1*time.Second, config.RequeueDurationSecsDuration())\n}"
