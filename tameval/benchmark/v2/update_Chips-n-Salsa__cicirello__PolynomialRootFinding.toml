[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "cicirello/Chips-n-Salsa"
sha = "0dc132865b107fc955f50f8659bca138cbfc43c5"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=PolynomialRootFindingTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.PolynomialRootFinding  -DtargetTests=**.PolynomialRootFindingTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/org/cicirello/search/problems/PolynomialRootFindingTests.java"
focal_file_path = "src/main/java/org/cicirello/search/problems/PolynomialRootFinding.java"
test_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/test/java/org/cicirello/search/problems/PolynomialRootFindingTests.java"
focal_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/main/java/org/cicirello/search/problems/PolynomialRootFinding.java"
first_commit_date = "2021-09-27"
last_commit_date = "2024-05-17"
test_file_content = "/*\n * Chips-n-Salsa: A library of parallel self-adaptive local search algorithms.\n * Copyright (C) 2002-2020  Vincent A. Cicirello\n *\n * This file is part of Chips-n-Salsa (https://chips-n-salsa.cicirello.org/).\n * \n * Chips-n-Salsa is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * Chips-n-Salsa is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n \npackage org.cicirello.search.problems;\n\nimport org.junit.*;\nimport static org.junit.Assert.*;\nimport org.cicirello.search.representations.SingleReal;\nimport org.cicirello.search.representations.RealValued;\n\n/**\n * JUnit 4 test cases for the PolynomialRootFinding.\n */\npublic class PolynomialRootFindingTests {\n\t\n\t@Test\n\tpublic void testConstructorExceptions() {\n\t\tIllegalArgumentException thrown = assertThrows( \n\t\t\tIllegalArgumentException.class,\n\t\t\t() -> new PolynomialRootFinding(new double[1], 0.001)\n\t\t);\n\t\tthrown = assertThrows( \n\t\t\tIllegalArgumentException.class,\n\t\t\t() -> new PolynomialRootFinding(new double[0], 0.001)\n\t\t);\n\t}\n\t\n\t@Test\n\tpublic void testCostQuadratic() {\n\t\tSingleReal x = new SingleReal(5);\n\t\t\n\t\tPolynomialRootFinding p = new PolynomialRootFinding(1, 0, 0);\n\t\tassertEquals(25.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 0);\n\t\tassertEquals(5.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 1);\n\t\tassertEquals(1.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 0);\n\t\tassertEquals(30.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 0, 1);\n\t\tassertEquals(26.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 1);\n\t\tassertEquals(31.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 1);\n\t\tassertEquals(6.0, p.cost(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(2, 0, 0);\n\t\tassertEquals(50.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 0);\n\t\tassertEquals(10.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 2);\n\t\tassertEquals(2.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 0);\n\t\tassertEquals(60.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 0, 2);\n\t\tassertEquals(52.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 2);\n\t\tassertEquals(62.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 2);\n\t\tassertEquals(12.0, p.cost(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(1, 0, 0, 0.001);\n\t\tassertEquals(25.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 0, 0.001);\n\t\tassertEquals(5.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 1, 0.001);\n\t\tassertEquals(1.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 0, 0.001);\n\t\tassertEquals(30.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 0, 1, 0.001);\n\t\tassertEquals(26.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 1, 0.001);\n\t\tassertEquals(31.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 1, 0.001);\n\t\tassertEquals(6.0, p.cost(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(2, 0, 0, 0.001);\n\t\tassertEquals(50.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 0, 0.001);\n\t\tassertEquals(10.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 2, 0.001);\n\t\tassertEquals(2.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 0, 0.001);\n\t\tassertEquals(60.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 0, 2, 0.001);\n\t\tassertEquals(52.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 2, 0.001);\n\t\tassertEquals(62.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 2, 0.001);\n\t\tassertEquals(12.0, p.cost(x), 1E-10);\n\t}\n\t\n\t@Test\n\tpublic void testCostPoly() {\n\t\tSingleReal x = new SingleReal(5);\n\t\t\n\t\tPolynomialRootFinding p = new PolynomialRootFinding(new double[] {0, 0, 1});\n\t\tassertEquals(25.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 0});\n\t\tassertEquals(5.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 0});\n\t\tassertEquals(1.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 1});\n\t\tassertEquals(30.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 1});\n\t\tassertEquals(26.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 1});\n\t\tassertEquals(31.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 0});\n\t\tassertEquals(6.0, p.cost(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(new double[] {0, 0, 2});\n\t\tassertEquals(50.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 0});\n\t\tassertEquals(10.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 0});\n\t\tassertEquals(2.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 2});\n\t\tassertEquals(60.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 2});\n\t\tassertEquals(52.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 2});\n\t\tassertEquals(62.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 0});\n\t\tassertEquals(12.0, p.cost(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(new double[] {0, 0, 1}, 0.001);\n\t\tassertEquals(25.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 0}, 0.001);\n\t\tassertEquals(5.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 0}, 0.001);\n\t\tassertEquals(1.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 1}, 0.001);\n\t\tassertEquals(30.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 1}, 0.001);\n\t\tassertEquals(26.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 1}, 0.001);\n\t\tassertEquals(31.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 0}, 0.001);\n\t\tassertEquals(6.0, p.cost(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(new double[] {0, 0, 2}, 0.001);\n\t\tassertEquals(50.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 0}, 0.001);\n\t\tassertEquals(10.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 0}, 0.001);\n\t\tassertEquals(2.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 2}, 0.001);\n\t\tassertEquals(60.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 2}, 0.001);\n\t\tassertEquals(52.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 2}, 0.001);\n\t\tassertEquals(62.0, p.cost(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 0}, 0.001);\n\t\tassertEquals(12.0, p.cost(x), 1E-10);\n\t}\n\t\n\t@Test\n\tpublic void testValueQuadratic() {\n\t\tSingleReal x = new SingleReal(5);\n\t\t\n\t\tPolynomialRootFinding p = new PolynomialRootFinding(1, 0, 0);\n\t\tassertEquals(25.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 0);\n\t\tassertEquals(5.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 1);\n\t\tassertEquals(1.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 0);\n\t\tassertEquals(30.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 0, 1);\n\t\tassertEquals(26.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 1);\n\t\tassertEquals(31.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 1);\n\t\tassertEquals(6.0, p.value(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(2, 0, 0);\n\t\tassertEquals(50.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 0);\n\t\tassertEquals(10.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 2);\n\t\tassertEquals(2.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 0);\n\t\tassertEquals(60.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 0, 2);\n\t\tassertEquals(52.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 2);\n\t\tassertEquals(62.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 2);\n\t\tassertEquals(12.0, p.value(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(1, 0, 0, 0.001);\n\t\tassertEquals(25.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 0, 0.001);\n\t\tassertEquals(5.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 1, 0.001);\n\t\tassertEquals(1.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 0, 0.001);\n\t\tassertEquals(30.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 0, 1, 0.001);\n\t\tassertEquals(26.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(1, 1, 1, 0.001);\n\t\tassertEquals(31.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 1, 1, 0.001);\n\t\tassertEquals(6.0, p.value(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(2, 0, 0, 0.001);\n\t\tassertEquals(50.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 0, 0.001);\n\t\tassertEquals(10.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 0, 2, 0.001);\n\t\tassertEquals(2.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 0, 0.001);\n\t\tassertEquals(60.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 0, 2, 0.001);\n\t\tassertEquals(52.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(2, 2, 2, 0.001);\n\t\tassertEquals(62.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(0, 2, 2, 0.001);\n\t\tassertEquals(12.0, p.value(x), 1E-10);\n\t}\n\t\n\t@Test\n\tpublic void testValuePoly() {\n\t\tSingleReal x = new SingleReal(5);\n\t\t\n\t\tPolynomialRootFinding p = new PolynomialRootFinding(new double[] {0, 0, 1});\n\t\tassertEquals(25.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 0});\n\t\tassertEquals(5.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 0});\n\t\tassertEquals(1.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 1});\n\t\tassertEquals(30.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 1});\n\t\tassertEquals(26.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 1});\n\t\tassertEquals(31.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 0});\n\t\tassertEquals(6.0, p.value(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(new double[] {0, 0, 2});\n\t\tassertEquals(50.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 0});\n\t\tassertEquals(10.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 0});\n\t\tassertEquals(2.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 2});\n\t\tassertEquals(60.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 2});\n\t\tassertEquals(52.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 2});\n\t\tassertEquals(62.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 0});\n\t\tassertEquals(12.0, p.value(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(new double[] {0, 0, 1}, 0.001);\n\t\tassertEquals(25.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 0}, 0.001);\n\t\tassertEquals(5.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 0}, 0.001);\n\t\tassertEquals(1.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 1, 1}, 0.001);\n\t\tassertEquals(30.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 0, 1}, 0.001);\n\t\tassertEquals(26.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 1}, 0.001);\n\t\tassertEquals(31.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {1, 1, 0}, 0.001);\n\t\tassertEquals(6.0, p.value(x), 1E-10);\n\t\t\n\t\tp = new PolynomialRootFinding(new double[] {0, 0, 2}, 0.001);\n\t\tassertEquals(50.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 0}, 0.001);\n\t\tassertEquals(10.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 0}, 0.001);\n\t\tassertEquals(2.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {0, 2, 2}, 0.001);\n\t\tassertEquals(60.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 0, 2}, 0.001);\n\t\tassertEquals(52.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 2}, 0.001);\n\t\tassertEquals(62.0, p.value(x), 1E-10);\n\t\tp = new PolynomialRootFinding(new double[] {2, 2, 0}, 0.001);\n\t\tassertEquals(12.0, p.value(x), 1E-10);\n\t}\n\t\n\t@Test\n\tpublic void testMinCost() {\n\t\tPolynomialRootFinding p1 = new PolynomialRootFinding(1, 2, 3);\n\t\tassertEquals(0.0, p1.minCost(), 1E-10);\n\t\tPolynomialRootFinding p2 = new PolynomialRootFinding(1, 2, 3, 0.001);\n\t\tassertEquals(0.0, p2.minCost(), 1E-10);\n\t\tdouble[] c = {1, 2, 3};\n\t\tPolynomialRootFinding p3 = new PolynomialRootFinding(c);\n\t\tassertEquals(0.0, p3.minCost(), 1E-10);\n\t\tPolynomialRootFinding p4 = new PolynomialRootFinding(c, 0.001);\n\t\tassertEquals(0.0, p4.minCost(), 1E-10);\n\t}\n\t\n\t@Test\n\tpublic void testIsMinCost() {\n\t\tPolynomialRootFinding p1 = new PolynomialRootFinding(1, 2, 3);\n\t\tassertTrue(p1.isMinCost(PolynomialRootFinding.DEFAULT_PRECISION));\n\t\tassertFalse(p1.isMinCost(1.001*PolynomialRootFinding.DEFAULT_PRECISION));\n\t\tassertTrue(p1.isMinCost(0.999*PolynomialRootFinding.DEFAULT_PRECISION));\n\t\tPolynomialRootFinding p2 = new PolynomialRootFinding(1, 2, 3, 0.001);\n\t\tassertTrue(p2.isMinCost(0.001));\n\t\tassertFalse(p2.isMinCost(0.001001));\n\t\tassertTrue(p2.isMinCost(0.000999));\n\t\tdouble[] c = {1, 2, 3};\n\t\tPolynomialRootFinding p3 = new PolynomialRootFinding(c);\n\t\tassertTrue(p3.isMinCost(PolynomialRootFinding.DEFAULT_PRECISION));\n\t\tassertFalse(p3.isMinCost(1.001*PolynomialRootFinding.DEFAULT_PRECISION));\n\t\tassertTrue(p3.isMinCost(0.999*PolynomialRootFinding.DEFAULT_PRECISION));\n\t\tPolynomialRootFinding p4 = new PolynomialRootFinding(c, 0.001);\n\t\tassertTrue(p4.isMinCost(0.001));\n\t\tassertFalse(p4.isMinCost(0.001001));\n\t\tassertTrue(p4.isMinCost(0.000999));\n\t}\n}"
