[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.23.2"

[repo_info]
repository = "supabase/cli"
sha = "418caee001449f782a775b0f13af09b25dd581da"

[run_info]
docker_image = "golang:1.23.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/db/branch/switch_/switch_.go internal/db/branch/switch_/switch__test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/db/branch/switch_/switch_.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 95.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/db/branch/switch_/switch__test.go"
focal_file_path = "internal/db/branch/switch_/switch_.go"
test_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/db/branch/switch_/switch__test.go"
focal_file_url = "https://github.com/supabase/cli/blob/418caee001449f782a775b0f13af09b25dd581da/internal/db/branch/switch_/switch_.go"
first_commit_date = "2022-08-09"
last_commit_date = "2025-01-10"
test_file_content = "package switch_\n\n\nfunc TestSwitchCommand(t *testing.T) {\n\tt.Run(\"switches local branch\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup target branch\n\t\tbranch := \"target\"\n\t\tbranchPath := filepath.Join(filepath.Dir(utils.CurrBranchPath), branch)\n\t\trequire.NoError(t, fsys.Mkdir(branchPath, 0755))\n\t\trequire.NoError(t, afero.WriteFile(fsys, utils.CurrBranchPath, []byte(\"main\"), 0644))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tPost(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(\"ALTER DATABASE postgres ALLOW_CONNECTIONS false\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(\"ALTER DATABASE _supabase ALLOW_CONNECTIONS false\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(reset.TERMINATE_BACKENDS).\n\t\t\tReply(\"SELECT 1\").\n\t\t\tQuery(reset.COUNT_REPLICATION_SLOTS).\n\t\t\tReply(\"SELECT 1\", []interface{}{0}).\n\t\t\tQuery(\"ALTER DATABASE postgres RENAME TO main;\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(\"ALTER DATABASE \" + branch + \" RENAME TO postgres;\").\n\t\t\tReply(\"ALTER DATABASE\")\n\t\t// Run test\n\t\tassert.NoError(t, Run(context.Background(), branch, fsys, conn.Intercept))\n\t\t// Validate output\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\tcontents, err := afero.ReadFile(fsys, utils.CurrBranchPath)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, []byte(branch), contents)\n\t})\n\n\tt.Run(\"throws error on malformed config\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, afero.WriteFile(fsys, utils.ConfigPath, []byte(\"malformed\"), 0644))\n\t\t// Run test\n\t\terr := Run(context.Background(), \"target\", fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"toml: expected = after a key, but the document ends there\")\n\t})\n\n\tt.Run(\"throws error on missing database\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusNotFound)\n\t\t// Run test\n\t\terr := Run(context.Background(), \"target\", fsys)\n\t\t// Check error\n\t\tassert.ErrorIs(t, err, utils.ErrNotRunning)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on reserved branch\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\t// Run test\n\t\terr := Run(context.Background(), \"postgres\", fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"branch name is reserved.\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on missing branch\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\t// Run test\n\t\terr := Run(context.Background(), \"main\", fsys)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Branch main does not exist.\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"noop on current branch\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\t// Setup target branch\n\t\tbranch := \"main\"\n\t\tbranchPath := filepath.Join(filepath.Dir(utils.CurrBranchPath), branch)\n\t\trequire.NoError(t, fsys.Mkdir(branchPath, 0755))\n\t\t// Run test\n\t\tassert.NoError(t, Run(context.Background(), branch, fsys))\n\t\t// Check error\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t\tcontents, err := afero.ReadFile(fsys, utils.CurrBranchPath)\n\t\tassert.NoError(t, err)\n\t\tassert.Equal(t, []byte(branch), contents)\n\t})\n\n\tt.Run(\"throws error on failure to switch\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\t// Setup target branch\n\t\tbranch := \"target\"\n\t\tbranchPath := filepath.Join(filepath.Dir(utils.CurrBranchPath), branch)\n\t\trequire.NoError(t, fsys.Mkdir(branchPath, 0755))\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\t// Run test\n\t\terr := Run(context.Background(), branch, fsys, conn.Intercept)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Error switching to branch target\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on failure to write\", func(t *testing.T) {\n\t\t// Setup in-memory fs\n\t\tfsys := afero.NewMemMapFs()\n\t\trequire.NoError(t, utils.WriteConfig(fsys, false))\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tGet(\"/v\" + utils.Docker.ClientVersion() + \"/containers\").\n\t\t\tReply(http.StatusOK).\n\t\t\tJSON(container.InspectResponse{})\n\t\t// Setup target branch\n\t\tbranch := \"main\"\n\t\tbranchPath := filepath.Join(filepath.Dir(utils.CurrBranchPath), branch)\n\t\trequire.NoError(t, fsys.Mkdir(branchPath, 0755))\n\t\t// Run test\n\t\terr := Run(context.Background(), branch, afero.NewReadOnlyFs(fsys))\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"Unable to update local branch file.\")\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n}\n\nfunc TestSwitchDatabase(t *testing.T) {\n\tt.Run(\"throws error on failure to connect\", func(t *testing.T) {\n\t\t// Setup invalid port\n\t\tutils.Config.Db.Port = 0\n\t\t// Run test\n\t\terr := switchDatabase(context.Background(), \"main\", \"target\")\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, \"invalid port\")\n\t})\n\n\tt.Run(\"throws error on failure to disconnect\", func(t *testing.T) {\n\t\t// Setup valid config\n\t\tutils.Config.Db.Port = 54322\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(\"ALTER DATABASE postgres ALLOW_CONNECTIONS false\").\n\t\t\tReplyError(pgerrcode.InvalidParameterValue, `cannot disallow connections for current database`).\n\t\t\tQuery(\"ALTER DATABASE _supabase ALLOW_CONNECTIONS false\").\n\t\t\tQuery(reset.TERMINATE_BACKENDS)\n\t\t// Run test\n\t\terr := switchDatabase(context.Background(), \"main\", \"target\", conn.Intercept)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, pgerrcode.InvalidParameterValue)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on failure to backup\", func(t *testing.T) {\n\t\t// Setup valid config\n\t\tutils.DbId = \"test-switch\"\n\t\tutils.Config.Db.Port = 54322\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(\"ALTER DATABASE postgres ALLOW_CONNECTIONS false\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(\"ALTER DATABASE _supabase ALLOW_CONNECTIONS false\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(reset.TERMINATE_BACKENDS).\n\t\t\tReply(\"SELECT 1\").\n\t\t\tQuery(reset.COUNT_REPLICATION_SLOTS).\n\t\t\tReply(\"SELECT 1\", []interface{}{0}).\n\t\t\tQuery(\"ALTER DATABASE postgres RENAME TO main;\").\n\t\t\tReplyError(pgerrcode.DuplicateDatabase, `database \"main\" already exists`)\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tPost(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId + \"/restart\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\t// Run test\n\t\terr := switchDatabase(context.Background(), \"main\", \"target\", conn.Intercept)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, pgerrcode.DuplicateDatabase)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n\n\tt.Run(\"throws error on failure to rename\", func(t *testing.T) {\n\t\t// Setup valid config\n\t\tutils.DbId = \"test-switch\"\n\t\tutils.Config.Db.Port = 54322\n\t\t// Setup mock postgres\n\t\tconn := pgtest.NewConn()\n\t\tdefer conn.Close(t)\n\t\tconn.Query(\"ALTER DATABASE postgres ALLOW_CONNECTIONS false\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(\"ALTER DATABASE _supabase ALLOW_CONNECTIONS false\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(reset.TERMINATE_BACKENDS).\n\t\t\tReply(\"SELECT 1\").\n\t\t\tQuery(reset.COUNT_REPLICATION_SLOTS).\n\t\t\tReply(\"SELECT 1\", []interface{}{0}).\n\t\t\tQuery(\"ALTER DATABASE postgres RENAME TO main;\").\n\t\t\tReply(\"ALTER DATABASE\").\n\t\t\tQuery(\"ALTER DATABASE target RENAME TO postgres;\").\n\t\t\tReplyError(pgerrcode.InvalidCatalogName, `database \"target\" does not exist`).\n\t\t\t// Attempt to rollback\n\t\t\tQuery(\"ALTER DATABASE main RENAME TO postgres;\").\n\t\t\tReplyError(pgerrcode.DuplicateDatabase, `database \"postgres\" already exists`)\n\t\t// Setup mock docker\n\t\trequire.NoError(t, apitest.MockDocker(utils.Docker))\n\t\tdefer gock.OffAll()\n\t\tgock.New(utils.Docker.DaemonHost()).\n\t\t\tPost(\"/v\" + utils.Docker.ClientVersion() + \"/containers/\" + utils.DbId + \"/restart\").\n\t\t\tReply(http.StatusServiceUnavailable)\n\t\t// Run test\n\t\terr := switchDatabase(context.Background(), \"main\", \"target\", conn.Intercept)\n\t\t// Check error\n\t\tassert.ErrorContains(t, err, pgerrcode.InvalidCatalogName)\n\t\tassert.Empty(t, apitest.ListUnmatchedRequests())\n\t})\n}\n"
