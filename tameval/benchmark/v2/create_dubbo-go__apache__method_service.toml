[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "apache/dubbo-go"
sha = "8d504e5574e431faca7aa03548e650ab7a9fc6a7"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out filter/tps/limiter/method_service.go filter/tps/limiter/method_service_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting filter/tps/limiter/method_service.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 76.0
original_coverage = 76.0
mutation_kill_rate = 46.0
original_mutation_kill_rate = 46.0
covered_lines = [ 43, 44, 45, 46, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 140, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 167, 168, 169, 176, 177, 178, 188, 189, 190, 191, 197, 202, 203, 204, 205, 206, 207, 216, 217, 218, 219, 220, 221, 222,]
missed_lines = [ 141, 142, 143, 144, 161, 162, 163, 164, 170, 171, 172, 173, 192, 193, 194, 195, 196,]

[input_info]
test_file_path = "filter/tps/limiter/method_service_test.go"
focal_file_path = "filter/tps/limiter/method_service.go"
test_file_url = "https://github.com/apache/dubbo-go/blob/8d504e5574e431faca7aa03548e650ab7a9fc6a7/filter/tps/limiter/method_service_test.go"
focal_file_url = "https://github.com/apache/dubbo-go/blob/8d504e5574e431faca7aa03548e650ab7a9fc6a7/filter/tps/limiter/method_service.go"
first_commit_date = "2021-07-08"
last_commit_date = "2025-05-26"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage limiter\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n)\n\nimport (\n\t\"github.com/golang/mock/gomock\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nimport (\n\t\"dubbo.apache.org/dubbo-go/v3/common\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/constant\"\n\t\"dubbo.apache.org/dubbo-go/v3/common/extension\"\n\t\"dubbo.apache.org/dubbo-go/v3/filter\"\n\t\"dubbo.apache.org/dubbo-go/v3/filter/tps/strategy\"\n\t\"dubbo.apache.org/dubbo-go/v3/protocol/invocation\"\n)\n\nfunc TestMethodServiceTpsLimiterImplIsAllowableOnlyServiceLevel(t *testing.T) {\n\tmethodName := \"hello\"\n\tinvoc := invocation.NewRPCInvocation(methodName, []any{\"OK\"}, make(map[string]any))\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tinvokeUrl := common.NewURLWithOptions(\n\t\tcommon.WithParams(url.Values{}),\n\t\tcommon.WithParamsValue(constant.InterfaceKey, methodName),\n\t\tcommon.WithParamsValue(constant.TPSLimitRateKey, \"20\"),\n\t\tcommon.WithParamsValue(constant.TPSLimitIntervalKey, \"60000\"))\n\n\tmockStrategyImpl := strategy.NewMockTpsLimitStrategy(ctrl)\n\tmockStrategyImpl.EXPECT().IsAllowable().Return(true).Times(1)\n\n\textension.SetTpsLimitStrategy(constant.DefaultKey, &mockStrategyCreator{\n\t\trate:     20,\n\t\tinterval: 60000,\n\t\tt:        t,\n\t\tstrategy: mockStrategyImpl,\n\t})\n\n\tlimiter := GetMethodServiceTpsLimiter()\n\tresult := limiter.IsAllowable(invokeUrl, invoc)\n\tassert.True(t, result)\n}\n\nfunc TestMethodServiceTpsLimiterImplIsAllowableNoConfig(t *testing.T) {\n\tmethodName := \"hello1\"\n\tinvoc := invocation.NewRPCInvocation(methodName, []any{\"OK\"}, make(map[string]any))\n\t// ctrl := gomock.NewController(t)\n\t// defer ctrl.Finish()\n\n\tinvokeUrl := common.NewURLWithOptions(\n\t\tcommon.WithParams(url.Values{}),\n\t\tcommon.WithParamsValue(constant.InterfaceKey, methodName),\n\t\tcommon.WithParamsValue(constant.TPSLimitRateKey, \"\"))\n\n\tlimiter := GetMethodServiceTpsLimiter()\n\tresult := limiter.IsAllowable(invokeUrl, invoc)\n\tassert.True(t, result)\n}\n\nfunc TestMethodServiceTpsLimiterImplIsAllowableMethodLevelOverride(t *testing.T) {\n\tmethodName := \"hello2\"\n\tmethodConfigPrefix := \"methods.\" + methodName + \".\"\n\tinvoc := invocation.NewRPCInvocation(methodName, []any{\"OK\"}, make(map[string]any))\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tinvokeUrl := common.NewURLWithOptions(\n\t\tcommon.WithParams(url.Values{}),\n\t\tcommon.WithParamsValue(constant.InterfaceKey, methodName),\n\t\tcommon.WithParamsValue(constant.TPSLimitRateKey, \"20\"),\n\t\tcommon.WithParamsValue(constant.TPSLimitIntervalKey, \"3000\"),\n\t\tcommon.WithParamsValue(constant.TPSLimitStrategyKey, \"invalid\"),\n\t\tcommon.WithParamsValue(methodConfigPrefix+constant.TPSLimitRateKey, \"40\"),\n\t\tcommon.WithParamsValue(methodConfigPrefix+constant.TPSLimitIntervalKey, \"7000\"),\n\t\tcommon.WithParamsValue(methodConfigPrefix+constant.TPSLimitStrategyKey, \"default\"),\n\t)\n\n\tmockStrategyImpl := strategy.NewMockTpsLimitStrategy(ctrl)\n\tmockStrategyImpl.EXPECT().IsAllowable().Return(true).Times(1)\n\n\textension.SetTpsLimitStrategy(constant.DefaultKey, &mockStrategyCreator{\n\t\trate:     40,\n\t\tinterval: 7000,\n\t\tt:        t,\n\t\tstrategy: mockStrategyImpl,\n\t})\n\n\tlimiter := GetMethodServiceTpsLimiter()\n\tresult := limiter.IsAllowable(invokeUrl, invoc)\n\tassert.True(t, result)\n}\n\nfunc TestMethodServiceTpsLimiterImplIsAllowableBothMethodAndService(t *testing.T) {\n\tmethodName := \"hello3\"\n\tmethodConfigPrefix := \"methods.\" + methodName + \".\"\n\tinvoc := invocation.NewRPCInvocation(methodName, []any{\"OK\"}, make(map[string]any))\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tinvokeUrl := common.NewURLWithOptions(\n\t\tcommon.WithParams(url.Values{}),\n\t\tcommon.WithParamsValue(constant.InterfaceKey, methodName),\n\t\tcommon.WithParamsValue(constant.TPSLimitRateKey, \"20\"),\n\t\tcommon.WithParamsValue(constant.TPSLimitIntervalKey, \"3000\"),\n\t\tcommon.WithParamsValue(methodConfigPrefix+constant.TPSLimitRateKey, \"40\"),\n\t)\n\n\tmockStrategyImpl := strategy.NewMockTpsLimitStrategy(ctrl)\n\tmockStrategyImpl.EXPECT().IsAllowable().Return(true).Times(1)\n\n\textension.SetTpsLimitStrategy(constant.DefaultKey, &mockStrategyCreator{\n\t\trate:     40,\n\t\tinterval: 3000,\n\t\tt:        t,\n\t\tstrategy: mockStrategyImpl,\n\t})\n\n\tlimiter := GetMethodServiceTpsLimiter()\n\tresult := limiter.IsAllowable(invokeUrl, invoc)\n\tassert.True(t, result)\n}\n\ntype mockStrategyCreator struct {\n\trate     int\n\tinterval int\n\tt        *testing.T\n\tstrategy filter.TpsLimitStrategy\n}\n\nfunc (creator *mockStrategyCreator) Create(rate int, interval int) filter.TpsLimitStrategy {\n\tassert.Equal(creator.t, creator.rate, rate)\n\tassert.Equal(creator.t, creator.interval, interval)\n\treturn creator.strategy\n}\n"
