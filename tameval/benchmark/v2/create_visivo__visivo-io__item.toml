[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "visivo-io/visivo"
sha = "65f80739da9eae151e990b6d21751f8d904c80e9"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=visivo/models/item.py -m pytest -q --junit-xml=test_output.xml tests/models/test_item.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target visivo.models.item --unit-test tests.models.test_item --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target visivo/models/item.py --unit-test tests/models/test_item.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 81.0
original_coverage = 81.0
mutation_kill_rate = 60.0
original_mutation_kill_rate = 60.0
covered_lines = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 119, 123, 124, 128, 132, 135, 138, 142, 143, 144, 145, 151, 152, 153, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 184, 190,]
missed_lines = [ 179, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196,]

[input_info]
test_file_path = "tests/models/test_item.py"
focal_file_path = "visivo/models/item.py"
test_file_url = "https://github.com/visivo-io/visivo/blob/65f80739da9eae151e990b6d21751f8d904c80e9/tests/models/test_item.py"
focal_file_url = "https://github.com/visivo-io/visivo/blob/65f80739da9eae151e990b6d21751f8d904c80e9/visivo/models/item.py"
first_commit_date = "2023-03-23"
last_commit_date = "2025-06-24"
test_file_content = "from visivo.models.item import Item\nfrom visivo.models.base.base_model import REF_REGEX\nfrom pydantic import ValidationError\nimport pytest\n\n\ndef test_Source_simple_data():\n    data = {\"width\": 2}\n    item = Item(**data)\n    assert item.width == 2\n\n\ndef test_Item_both_chart_and_markdown():\n    with pytest.raises(ValidationError) as exc_info:\n        Item(chart=\"ref(chart)\", markdown=\"markdown\")\n\n    error = exc_info.value.errors()[0]\n    assert (\n        error[\"msg\"]\n        == 'Value error, only one of the \"markdown\", \"chart\", \"table\", or \"selector\" properties should be set on an item'\n    )\n    assert error[\"type\"] == \"value_error\"\n\n\ndef test_Item_chart_and_align():\n    with pytest.raises(ValidationError) as exc_info:\n        Item(chart=\"ref(chart)\", align=\"right\")\n\n    error = exc_info.value.errors()[0]\n    assert \"property can only be set when\" in error[\"msg\"]\n    assert error[\"type\"] == \"value_error\"\n\n\ndef test_Item_both_chart_and_table():\n    with pytest.raises(ValidationError) as exc_info:\n        Item(table=\"ref(table)\", markdown=\"markdown\")\n\n    error = exc_info.value.errors()[0]\n    assert (\n        error[\"msg\"]\n        == 'Value error, only one of the \"markdown\", \"chart\", \"table\", or \"selector\" properties should be set on an item'\n    )\n    assert error[\"type\"] == \"value_error\"\n\n\ndef test_Item_both_chart_and_selector():\n    with pytest.raises(ValidationError) as exc_info:\n        Item(selector=\"ref(selector)\", markdown=\"markdown\")\n\n    error = exc_info.value.errors()[0]\n    assert (\n        error[\"msg\"]\n        == 'Value error, only one of the \"markdown\", \"chart\", \"table\", or \"selector\" properties should be set on an item'\n    )\n    assert error[\"type\"] == \"value_error\"\n\n\ndef test_Item_invalid_ref_string():\n    item = Item(chart=\"ref(chart)\")\n    item.chart = \"ref(chart)\"\n    with pytest.raises(ValidationError) as exc_info:\n        Item(chart=\"ref(chart\")\n\n    error = exc_info.value.errors()[0]\n    assert error[\"msg\"] == f\"String should match pattern '{REF_REGEX}'\"\n    assert error[\"type\"] == \"string_pattern_mismatch\"\n"
