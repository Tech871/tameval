[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "crossplane/crossplane-runtime"
sha = "5eca3444c2f11ff8326b6f355877961a52552d05"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/resource/unstructured/composed/composed.go pkg/resource/unstructured/composed/composed_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/resource/unstructured/composed/composed.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 60.0
original_coverage = 60.0
mutation_kill_rate = 43.0
original_mutation_kill_rate = 43.0
covered_lines = [ 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 51, 52, 53, 54, 55, 57, 74, 75, 76, 77, 78, 79, 81, 85, 86, 87, 88, 89, 90, 91, 94, 95, 100, 104, 105, 106, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176,]
missed_lines = [ 69, 70, 71, 96, 97, 98, 109, 110, 111, 112, 113, 116, 120, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 149, 158, 159, 160,]

[input_info]
test_file_path = "pkg/resource/unstructured/composed/composed_test.go"
focal_file_path = "pkg/resource/unstructured/composed/composed.go"
test_file_url = "https://github.com/crossplane/crossplane-runtime/blob/5eca3444c2f11ff8326b6f355877961a52552d05/pkg/resource/unstructured/composed/composed_test.go"
focal_file_url = "https://github.com/crossplane/crossplane-runtime/blob/5eca3444c2f11ff8326b6f355877961a52552d05/pkg/resource/unstructured/composed/composed.go"
first_commit_date = "2020-04-23"
last_commit_date = "2025-07-30"
test_file_content = "/*\nCopyright 2020 The Crossplane Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage composed\n\nimport (\n\t\"testing\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\n\txpv1 \"github.com/crossplane/crossplane-runtime/v2/apis/common/v1\"\n)\n\nvar _ client.Object = &Unstructured{}\n\nfunc TestFromReference(t *testing.T) {\n\tref := corev1.ObjectReference{\n\t\tAPIVersion: \"a/v1\",\n\t\tKind:       \"k\",\n\t\tNamespace:  \"ns\",\n\t\tName:       \"name\",\n\t}\n\tcases := map[string]struct {\n\t\tref  corev1.ObjectReference\n\t\twant *Unstructured\n\t}{\n\t\t\"New\": {\n\t\t\tref: ref,\n\t\t\twant: &Unstructured{\n\t\t\t\tUnstructured: unstructured.Unstructured{\n\t\t\t\t\tObject: map[string]any{\n\t\t\t\t\t\t\"apiVersion\": \"a/v1\",\n\t\t\t\t\t\t\"kind\":       \"k\",\n\t\t\t\t\t\t\"metadata\": map[string]any{\n\t\t\t\t\t\t\t\"name\":      \"name\",\n\t\t\t\t\t\t\t\"namespace\": \"ns\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := New(FromReference(tc.ref))\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"New(FromReference(...): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestConditions(t *testing.T) {\n\tcases := map[string]struct {\n\t\treason string\n\t\tu      *Unstructured\n\t\tset    []xpv1.Condition\n\t\tget    xpv1.ConditionType\n\t\twant   xpv1.Condition\n\t}{\n\t\t\"NewCondition\": {\n\t\t\treason: \"It should be possible to set a condition of an empty Unstructured.\",\n\t\t\tu:      New(),\n\t\t\tset:    []xpv1.Condition{xpv1.Available(), xpv1.ReconcileSuccess()},\n\t\t\tget:    xpv1.TypeReady,\n\t\t\twant:   xpv1.Available(),\n\t\t},\n\t\t\"ExistingCondition\": {\n\t\t\treason: \"It should be possible to overwrite a condition that is already set.\",\n\t\t\tu:      New(WithConditions(xpv1.Creating())),\n\t\t\tset:    []xpv1.Condition{xpv1.Available()},\n\t\t\tget:    xpv1.TypeReady,\n\t\t\twant:   xpv1.Available(),\n\t\t},\n\t\t\"WeirdStatus\": {\n\t\t\treason: \"It should not be possible to set a condition when status is not an object.\",\n\t\t\tu: &Unstructured{unstructured.Unstructured{Object: map[string]any{\n\t\t\t\t\"status\": \"wat\",\n\t\t\t}}},\n\t\t\tset:  []xpv1.Condition{xpv1.Available()},\n\t\t\tget:  xpv1.TypeReady,\n\t\t\twant: xpv1.Condition{},\n\t\t},\n\t\t\"WeirdStatusConditions\": {\n\t\t\treason: \"Conditions should be overwritten if they are not an object.\",\n\t\t\tu: &Unstructured{unstructured.Unstructured{Object: map[string]any{\n\t\t\t\t\"status\": map[string]any{\n\t\t\t\t\t\"conditions\": \"wat\",\n\t\t\t\t},\n\t\t\t}}},\n\t\t\tset:  []xpv1.Condition{xpv1.Available()},\n\t\t\tget:  xpv1.TypeReady,\n\t\t\twant: xpv1.Available(),\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetConditions(tc.set...)\n\n\t\t\tgot := tc.u.GetCondition(tc.get)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\n%s\\nu.GetCondition(%s): -want, +got:\\n%s\", tc.reason, tc.get, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestWriteConnectionSecretToReference(t *testing.T) {\n\tref := &xpv1.SecretReference{Namespace: \"ns\", Name: \"cool\"}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *xpv1.SecretReference\n\t\twant *xpv1.SecretReference\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  ref,\n\t\t\twant: ref,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetWriteConnectionSecretToReference(tc.set)\n\n\t\t\tgot := tc.u.GetWriteConnectionSecretToReference()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetWriteConnectionSecretToReference(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestObservedGeneration(t *testing.T) {\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\twant int64\n\t}{\n\t\t\"Set\": {\n\t\t\tu: New(func(u *Unstructured) {\n\t\t\t\tu.SetObservedGeneration(123)\n\t\t\t}),\n\t\t\twant: 123,\n\t\t},\n\t\t\"NotFound\": {\n\t\t\tu: New(),\n\t\t},\n\t}\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := tc.u.GetObservedGeneration()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetObservedGeneration(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n"
