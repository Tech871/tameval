[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "basetenlabs/truss"
sha = "0e28db9f7f06a6ce7a4ab60c3724d2c2229b8020"
bench_version = 2

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=truss/templates/server/common/schema.py -m pytest -q --junit-xml=test_output.xml truss/tests/templates/server/test_schema.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target truss.templates.server.common.schema --unit-test truss.tests.templates.server.test_schema --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target truss/templates/server/common/schema.py --unit-test truss/tests/templates/server/test_schema.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = 96.0
original_mutation_kill_rate = 96.0
covered_lines = [ 0, 1, 17, 20, 21, 22, 25, 26, 27, 28, 30, 31, 38, 39, 43, 44, 46, 52, 66, 67, 69, 71, 72, 74, 77, 81, 82, 87, 99, 100, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 120, 121, 122, 127, 128, 131, 132, 133, 136, 145, 148, 149, 151, 154, 163, 172, 180, 182, 183, 185, 186, 188, 189, 191,]
missed_lines = [ 57, 83, 84,]

[input_info]
test_file_path = "truss/tests/templates/server/test_schema.py"
focal_file_path = "truss/templates/server/common/schema.py"
test_file_url = "https://github.com/basetenlabs/truss/blob/0e28db9f7f06a6ce7a4ab60c3724d2c2229b8020/truss/tests/templates/server/test_schema.py"
focal_file_url = "https://github.com/basetenlabs/truss/blob/0e28db9f7f06a6ce7a4ab60c3724d2c2229b8020/truss/templates/server/common/schema.py"
first_commit_date = "2024-02-05"
last_commit_date = "2025-05-29"
test_file_content = "import inspect\nfrom typing import AsyncGenerator, Awaitable, Generator, Union\n\nfrom pydantic import BaseModel\n\nfrom truss.templates.server.common.schema import TrussSchema\n\n\nclass ModelInput(BaseModel):\n    input: str\n    stream: bool\n\n\nclass ModelOutput(BaseModel):\n    output: str\n\n\ndef test_truss_schema_pydantic_empty_annotations():\n    class Model:\n        def predict(self, request):\n            return \"hello\"\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema is None\n\n\ndef test_truss_schema_pydantic_input_and_output():\n    class Model:\n        def predict(self, request: ModelInput) -> ModelOutput:\n            return ModelOutput(output=request.input)\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type == ModelOutput\n    assert not schema.supports_streaming\n\n\ndef test_truss_schema_pydantic_empty_input():\n    class Model:\n        def predict(self) -> ModelOutput:\n            return ModelOutput(output=\"hello\")\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type is None\n    assert schema.output_type == ModelOutput\n\n\ndef test_truss_schema_pydantic_empty_output():\n    class Model:\n        def predict(self, _: ModelInput) -> None:\n            return None\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n\n\ndef test_truss_schema_pydantic_empty_input_and_output():\n    class Model:\n        def predict(self) -> None:\n            return None\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema is None\n\n\ndef test_truss_schema_non_pydantic_input():\n    class Model:\n        def predict(self, request: str) -> ModelOutput:\n            return ModelOutput(output=request)\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type is None\n    assert schema.output_type == ModelOutput\n\n\ndef test_truss_schema_non_pydantic_output():\n    class Model:\n        def predict(self, request: ModelInput) -> str:\n            return request.input\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n\n\ndef test_truss_schema_list_types():\n    class Model:\n        def predict(self, request: list[str]) -> list[str]:\n            return [\"foo\", \"bar\"]\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema is None\n\n\ndef test_truss_schema_dict_types():\n    class Model:\n        def predict(self, request: dict[str, str]) -> dict[str, str]:\n            return {\"foo\": \"bar\"}\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema is None\n\n\ndef test_truss_schema_async():\n    class Model:\n        async def predict(self, request: ModelInput) -> Awaitable[ModelOutput]:\n            return ModelOutput(output=request.input)\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type == ModelOutput\n    assert not schema.supports_streaming\n\n\ndef test_truss_schema_streaming():\n    class Model:\n        def predict(self, request: ModelInput) -> Generator[str, None, None]:\n            yield \"hello\"\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n    assert schema.supports_streaming\n\n\ndef test_truss_schema_streaming_async():\n    class Model:\n        async def predict(self, request: ModelInput) -> AsyncGenerator[str, None]:\n            yield \"hello\"\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n    assert schema.supports_streaming\n\n\ndef test_truss_schema_union_sync():\n    class Model:\n        def predict(\n            self, request: ModelInput\n        ) -> Union[ModelOutput, Generator[str, None, None]]:\n            if request.stream:\n                return (yield \"hello\")\n            else:\n                return ModelOutput(output=request.input)\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n    assert schema.input_type == ModelInput\n    assert schema.output_type == ModelOutput\n    assert schema.supports_streaming\n\n\ndef test_truss_schema_union_async():\n    class Model:\n        async def predict(\n            self, request: ModelInput\n        ) -> Union[Awaitable[ModelOutput], AsyncGenerator[str, None]]:\n            if request.stream:\n\n                def inner():\n                    for i in range(2):\n                        yield str(i)\n\n                return inner()\n\n            return ModelOutput(output=request.input)\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n    assert schema.input_type == ModelInput\n    assert schema.output_type is ModelOutput\n    assert schema.supports_streaming\n\n\ndef test_truss_schema_union_async_non_pydantic():\n    class Model:\n        async def predict(\n            self, request: ModelInput\n        ) -> Union[Awaitable[str], AsyncGenerator[str, None]]:\n            return \"hello\"\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n\n\ndef test_truss_schema_union_non_pydantic():\n    class Model:\n        def predict(self, request: ModelInput) -> Union[str, int]:\n            return \"hello\"\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n\n\ndef test_truss_schema_async_non_pydantic():\n    class Model:\n        async def predict(self, request: str) -> Awaitable[str]:\n            return \"hello\"\n\n    model = Model()\n\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n    assert schema is None\n\n\ndef test_truss_schema_union_three_arms():\n    class ModelOutput2(BaseModel):\n        output2: str\n\n    class ModelOutput3(BaseModel):\n        output3: str\n\n    class Model:\n        def predict(\n            self, request: ModelInput\n        ) -> Union[ModelOutput, ModelOutput2, ModelOutput3]:\n            return ModelOutput(output=request.input)\n\n    model = Model()\n    input_signature = inspect.signature(model.predict).parameters\n    output_signature = inspect.signature(model.predict).return_annotation\n\n    schema = TrussSchema.from_signature(input_signature, output_signature)\n\n    assert schema.input_type == ModelInput\n    assert schema.output_type is None\n"
