[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "dejvokep/boosted-yaml"
sha = "fd45ba039337485d5081ba47c1a1116e52a3160c"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ListConversionsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ListConversions  -DtargetTests=**.ListConversionsTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 89.0
original_coverage = 89.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 47, 63, 79, 95, 111, 127, 143, 159, 174, 190, 191, 194, 196, 198, 202, 203, 206,]
missed_lines = [ 32, 199,]

[input_info]
test_file_path = "src/test/java/dev/dejvokep/boostedyaml/utils/conversion/ListConversionsTest.java"
focal_file_path = "src/main/java/dev/dejvokep/boostedyaml/utils/conversion/ListConversions.java"
test_file_url = "https://github.com/dejvokep/boosted-yaml/blob/fd45ba039337485d5081ba47c1a1116e52a3160c/src/test/java/dev/dejvokep/boostedyaml/utils/conversion/ListConversionsTest.java"
focal_file_url = "https://github.com/dejvokep/boosted-yaml/blob/fd45ba039337485d5081ba47c1a1116e52a3160c/src/main/java/dev/dejvokep/boostedyaml/utils/conversion/ListConversions.java"
first_commit_date = "2022-01-05"
last_commit_date = "2024-01-19"
test_file_content = "/*\n * Copyright 2024 https://dejvokep.dev/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage dev.dejvokep.boostedyaml.utils.conversion;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass ListConversionsTest {\n\n    // List with numbers only\n    private static final List<Number> NUMBER_LIST = new ArrayList<Number>(){{\n        add(Integer.MAX_VALUE);\n        add(BigInteger.ONE);\n        add(Byte.MAX_VALUE);\n        add(Long.MAX_VALUE);\n        add(Double.MAX_VALUE);\n        add(Float.MAX_VALUE);\n        add(Short.MAX_VALUE);\n    }};\n    // List\n    private static final List<?> LIST = new ArrayList<Object>(){{\n        add(\"x\");\n        add(true);\n        addAll(NUMBER_LIST);\n        add(new HashMap<String, String>(){{\n            put(\"x\", \"y\");\n        }});\n    }};\n\n    @Test\n    void toStringList() {\n        assertFalse(ListConversions.toStringList(null).isPresent());\n        assertTrue(ListConversions.toStringList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(10, list.size());\n            //Assert individual elements\n            assertEquals(\"x\", list.get(0));\n            assertEquals(\"true\", list.get(1));\n            assertEquals(String.valueOf(Integer.MAX_VALUE), list.get(2));\n            assertEquals(String.valueOf(BigInteger.ONE), list.get(3));\n            assertEquals(String.valueOf(Byte.MAX_VALUE), list.get(4));\n            assertEquals(String.valueOf(Long.MAX_VALUE), list.get(5));\n            assertEquals(String.valueOf(Double.MAX_VALUE), list.get(6));\n            assertEquals(String.valueOf(Float.MAX_VALUE), list.get(7));\n            assertEquals(String.valueOf(Short.MAX_VALUE), list.get(8));\n            assertEquals(new HashMap<String, String>(){{\n                put(\"x\", \"y\");\n            }}.toString(), list.get(9));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toIntList() {\n        assertTrue(ListConversions.toIntList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(NUMBER_LIST.get(i).intValue(), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toBigIntList() {\n        assertTrue(ListConversions.toBigIntList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(PrimitiveConversions.toBigInt(NUMBER_LIST.get(i)).orElse(BigInteger.TEN), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toByteList() {\n        assertTrue(ListConversions.toByteList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(NUMBER_LIST.get(i).byteValue(), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toLongList() {\n        assertTrue(ListConversions.toLongList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(NUMBER_LIST.get(i).longValue(), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toDoubleList() {\n        assertTrue(ListConversions.toDoubleList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(NUMBER_LIST.get(i).doubleValue(), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toFloatList() {\n        assertTrue(ListConversions.toFloatList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(NUMBER_LIST.get(i).floatValue(), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toShortList() {\n        assertTrue(ListConversions.toShortList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(NUMBER_LIST.size(), list.size());\n            //Assert individual elements\n            for (int i = 0; i < list.size(); i++)\n                assertEquals(NUMBER_LIST.get(i).shortValue(), list.get(i));\n            //Return\n            return list;\n        }).isPresent());\n    }\n\n    @Test\n    void toMapList() {\n        assertTrue(ListConversions.toMapList(LIST).map(list -> {\n            //Assert the size\n            assertEquals(1, list.size());\n            //Assert element\n            assertEquals(new HashMap<String, String>(){{\n                put(\"x\", \"y\");\n            }}, list.get(0));\n            //Return\n            return list;\n        }).isPresent());\n    }\n}"
