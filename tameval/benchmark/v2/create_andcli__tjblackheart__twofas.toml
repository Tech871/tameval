[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "tjblackheart/andcli"
sha = "98ec488fe834970ab8ea07ed19bff25439b42427"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/vaults/twofas/twofas.go internal/vaults/twofas/twofas_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/vaults/twofas/twofas.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 22.0
original_coverage = 64.0
mutation_kill_rate = 10.0
original_mutation_kill_rate = 55.0
covered_lines = [ 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119,]
missed_lines = [ 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 191,]

[input_info]
test_file_path = "internal/vaults/twofas/twofas_test.go"
focal_file_path = "internal/vaults/twofas/twofas.go"
test_file_url = "https://github.com/tjblackheart/andcli/blob/98ec488fe834970ab8ea07ed19bff25439b42427/internal/vaults/twofas/twofas_test.go"
focal_file_url = "https://github.com/tjblackheart/andcli/blob/98ec488fe834970ab8ea07ed19bff25439b42427/internal/vaults/twofas/twofas.go"
first_commit_date = "2025-02-12"
last_commit_date = "2025-07-20"
test_file_content = "package twofas\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/tjblackheart/andcli/v2/internal/vaults\"\n)\n\n\nfunc TestEntries(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tinput []entry\n\t\twant  []vaults.Entry\n\t}{\n\t\t{\n\t\t\t\"mitigates missing fields\",\n\t\t\t[]entry{\n\t\t\t\t{Secret: \"secret\", Otp: otp{Issuer: \"iss-1\", Digits: 6, TokenType: \"TOTP\"}},\n\t\t\t\t{Secret: \"secret\", Otp: otp{Issuer: \"iss-2\", Digits: 4, TokenType: \"HOTP\"}},\n\t\t\t\t{Secret: \"secret\", Otp: otp{Issuer: \"iss-3\", Digits: 0, TokenType: \"TOTP\", Period: 20}},\n\t\t\t\t{Secret: \"secret\", Otp: otp{Issuer: \"iss-4\", Digits: 4, TokenType: \"TOTP\", Algorithm: \"SHA256\"}},\n\t\t\t\t{Otp: otp{Issuer: \"iss-5\"}},\n\t\t\t},\n\t\t\t[]vaults.Entry{\n\t\t\t\t{Issuer: \"iss-1\", Digits: 6, Secret: \"secret\", Type: \"TOTP\", Algorithm: \"SHA1\", Period: 30},\n\t\t\t\t{Issuer: \"iss-3\", Digits: 6, Secret: \"secret\", Type: \"TOTP\", Algorithm: \"SHA1\", Period: 20},\n\t\t\t\t{Issuer: \"iss-4\", Digits: 4, Secret: \"secret\", Type: \"TOTP\", Algorithm: \"SHA256\", Period: 30},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tentries := (&vault{db: tt.input}).Entries()\n\t\t\tif !reflect.DeepEqual(entries, tt.want) {\n\t\t\t\tt.Fatalf(\"Entries(): want %#v\\nhave %#v\", tt.want, entries)\n\t\t\t}\n\t\t})\n\t}\n}\n"
