[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "algolia/cli"
sha = "a9ed61086d651e010e3b7ab8c736464e72c4bb78"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/utils/utils.go pkg/utils/utils_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/utils/utils.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 4.0
original_coverage = 53.0
mutation_kill_rate = 4.0
original_mutation_kill_rate = 51.0
covered_lines = [ 74, 75, 76,]
missed_lines = [ 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 29, 33, 34, 35, 36, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110,]

[input_info]
test_file_path = "pkg/utils/utils_test.go"
focal_file_path = "pkg/utils/utils.go"
test_file_url = "https://github.com/algolia/cli/blob/a9ed61086d651e010e3b7ab8c736464e72c4bb78/pkg/utils/utils_test.go"
focal_file_url = "https://github.com/algolia/cli/blob/a9ed61086d651e010e3b7ab8c736464e72c4bb78/pkg/utils/utils.go"
first_commit_date = "2022-04-19"
last_commit_date = "2025-03-18"
test_file_content = "package utils\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\n\n\nfunc TestSliceToString(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tinput    []string\n\t\texpected string\n\t}{\n\t\t{\n\t\t\tname:     \"no element\",\n\t\t\tinput:    []string{\"\"},\n\t\t\texpected: \"\",\n\t\t},\n\t\t{\n\t\t\tname:     \"one element\",\n\t\t\tinput:    []string{\"maguro\"},\n\t\t\texpected: \"maguro\",\n\t\t},\n\t\t{\n\t\t\tname:     \"two elements\",\n\t\t\tinput:    []string{\"maguro\", \"otoro\"},\n\t\t\texpected: \"maguro, otoro\",\n\t\t},\n\t\t{\n\t\t\tname:     \"three elements\",\n\t\t\tinput:    []string{\"maguro\", \"otoro\", \"tamago\"},\n\t\t\texpected: \"maguro, otoro, tamago\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tassert.Equal(t, tt.expected, SliceToString(tt.input))\n\t\t})\n\t}\n}\n"
