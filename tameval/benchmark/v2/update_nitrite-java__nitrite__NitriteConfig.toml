[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "nitrite/nitrite-java"
sha = "32693e9538c4108c8c94b7a5b736ef96d9d7714c"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl nitrite -Dtest=NitriteConfigTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl nitrite -DtargetClasses=**.NitriteConfig  -DtargetTests=**.NitriteConfigTest  -DoutputFormats=XML"
coverage_report_path = "nitrite/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "nitrite/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 64.0
mutation_kill_rate = nan
original_mutation_kill_rate = 39.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "nitrite/src/test/java/org/dizitart/no2/NitriteConfigTest.java"
focal_file_path = "nitrite/src/main/java/org/dizitart/no2/NitriteConfig.java"
test_file_url = "https://github.com/nitrite/nitrite-java/blob/32693e9538c4108c8c94b7a5b736ef96d9d7714c/nitrite/src/test/java/org/dizitart/no2/NitriteConfigTest.java"
focal_file_url = "https://github.com/nitrite/nitrite-java/blob/32693e9538c4108c8c94b7a5b736ef96d9d7714c/nitrite/src/main/java/org/dizitart/no2/NitriteConfig.java"
first_commit_date = "2020-08-11"
last_commit_date = "2024-05-16"
test_file_content = "/*\n * Copyright (c) 2017-2021 Nitrite author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.dizitart.no2;\n\nimport org.dizitart.no2.common.mapper.SimpleDocumentMapper;\nimport org.dizitart.no2.common.module.NitriteModule;\nimport org.dizitart.no2.common.module.NitritePlugin;\nimport org.dizitart.no2.common.module.PluginManager;\nimport org.dizitart.no2.exceptions.IndexingException;\nimport org.dizitart.no2.exceptions.NitriteIOException;\nimport org.dizitart.no2.migration.Migration;\nimport org.dizitart.no2.store.NitriteStore;\nimport org.dizitart.no2.store.memory.InMemoryConfig;\nimport org.junit.Test;\n\nimport java.util.HashSet;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class NitriteConfigTest {\n    @Test\n    public void testConstructor() {\n        NitriteConfig actualNitriteConfig = new NitriteConfig();\n        assertTrue(actualNitriteConfig.getMigrations().isEmpty());\n        assertFalse(actualNitriteConfig.configured);\n        assertEquals(1, actualNitriteConfig.getSchemaVersion().intValue());\n        assertNull(actualNitriteConfig.getNitriteStore());\n        PluginManager pluginManager = actualNitriteConfig.getPluginManager();\n        assertSame(actualNitriteConfig, pluginManager.getNitriteConfig());\n        assertTrue(pluginManager.getIndexerMap().isEmpty());\n    }\n\n    @Test\n    public void testFieldSeparator() {\n        (new NitriteConfig()).fieldSeparator(\"Separator\");\n    }\n\n    @Test\n    public void testLoadModule() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        NitriteModule nitriteModule = mock(NitriteModule.class);\n        when(nitriteModule.plugins()).thenReturn(new HashSet<NitritePlugin>());\n        assertSame(nitriteConfig, nitriteConfig.loadModule(nitriteModule));\n        verify(nitriteModule, times(2)).plugins();\n    }\n\n    @Test\n    public void testAddMigration() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        assertSame(nitriteConfig, nitriteConfig.addMigration(null));\n    }\n\n    @Test\n    public void testAddMigration2() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        Migration migration = mock(Migration.class);\n        when(migration.getToVersion()).thenReturn(1);\n        when(migration.getFromVersion()).thenReturn(1);\n        assertSame(nitriteConfig, nitriteConfig.addMigration(migration));\n        verify(migration).getToVersion();\n        verify(migration).getFromVersion();\n    }\n\n    @Test\n    public void testAddMigration3() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        Migration migration = mock(Migration.class);\n        when(migration.getToVersion()).thenReturn(4);\n        when(migration.getFromVersion()).thenReturn(1);\n        assertSame(nitriteConfig, nitriteConfig.addMigration(migration));\n        verify(migration).getToVersion();\n        verify(migration).getFromVersion();\n    }\n\n    @Test\n    public void testAddMigration4() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        Migration migration = mock(Migration.class);\n        when(migration.getToVersion()).thenReturn(1);\n        when(migration.getFromVersion()).thenReturn(4);\n        assertSame(nitriteConfig, nitriteConfig.addMigration(migration));\n        verify(migration).getToVersion();\n        verify(migration).getFromVersion();\n    }\n\n    @Test\n    public void testSchemaVersion() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        NitriteConfig actualSchemaVersionResult = nitriteConfig.currentSchemaVersion(1);\n        assertSame(nitriteConfig, actualSchemaVersionResult);\n        assertEquals(1, actualSchemaVersionResult.getSchemaVersion().intValue());\n    }\n\n    @Test\n    public void testAutoConfigure() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        nitriteConfig.autoConfigure();\n        PluginManager pluginManager = nitriteConfig.getPluginManager();\n        assertEquals(3, pluginManager.getIndexerMap().size());\n        NitriteStore<?> nitriteStore = nitriteConfig.getNitriteStore();\n        assertSame(nitriteStore, pluginManager.getNitriteStore());\n        assertTrue(pluginManager.getNitriteMapper() instanceof SimpleDocumentMapper);\n        assertFalse(nitriteStore.isClosed());\n        assertTrue(((InMemoryConfig) nitriteStore.getStoreConfig()).eventListeners().isEmpty());\n    }\n\n    @Test\n    public void testFindIndexer() {\n        assertThrows(IndexingException.class, () -> (new NitriteConfig()).findIndexer(\"Index Type\"));\n    }\n\n    @Test\n    public void testNitriteMapper() {\n        assertNull((new NitriteConfig()).nitriteMapper());\n    }\n\n    @Test\n    public void testGetNitriteStore() {\n        assertNull((new NitriteConfig()).getNitriteStore());\n    }\n\n    @Test(expected = NitriteIOException.class)\n    public void testInitialize() {\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        nitriteConfig.initialize();\n        assertTrue(nitriteConfig.configured);\n    }\n}\n"
