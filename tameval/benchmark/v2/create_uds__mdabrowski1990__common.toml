[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "mdabrowski1990/uds"
sha = "81ca93afdc4ac9e386bbdebaf44ab0ac9cc22941"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=uds/can/transport_interface/common.py -m pytest -q --junit-xml=test_output.xml tests/software_tests/can/transport_interface/test_common.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target uds.can.transport_interface.common --unit-test tests.software_tests.can.transport_interface.test_common --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target uds/can/transport_interface/common.py --unit-test tests/software_tests/can/transport_interface/test_common.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 71.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 99, 100, 101, 102, 103, 106, 108, 117, 119, 120, 126, 135, 137, 139, 140, 149, 158, 159, 160, 162, 163, 172, 174, 175, 176, 177, 179, 180, 184, 185, 199, 200, 204, 205, 214, 215, 223, 224, 236, 237, 241, 242, 251, 253, 255, 258, 260, 261, 273, 274, 278, 279, 288, 289, 290, 292, 295, 297, 298, 310, 311, 318, 320, 321, 330, 331, 332, 333, 336, 337, 349, 350, 359, 360, 373, 374, 376, 377, 378, 380, 381, 390, 391, 393, 394, 398, 399, 417, 418, 432, 433, 442, 443, 451, 452, 459, 461, 462, 473, 474, 483, 484, 495, 496, 500, 501, 507, 509,]
missed_lines = [ 104, 118, 121, 122, 124, 136, 138, 142, 143, 144, 145, 146, 147, 161, 165, 166, 167, 168, 169, 170, 182, 193, 194, 195, 202, 216, 217, 218, 219, 221, 234, 239, 252, 254, 256, 271, 276, 291, 293, 308, 334, 346, 347, 357, 375, 396, 408, 409, 410, 411, 412, 413, 415, 428, 440, 449, 471, 481, 493, 498, 508,]

[input_info]
test_file_path = "tests/software_tests/can/transport_interface/test_common.py"
focal_file_path = "uds/can/transport_interface/common.py"
test_file_url = "https://github.com/mdabrowski1990/uds/blob/81ca93afdc4ac9e386bbdebaf44ab0ac9cc22941/tests/software_tests/can/transport_interface/test_common.py"
focal_file_url = "https://github.com/mdabrowski1990/uds/blob/81ca93afdc4ac9e386bbdebaf44ab0ac9cc22941/uds/can/transport_interface/common.py"
first_commit_date = "2025-07-29"
last_commit_date = "2025-07-30"
test_file_content = "from datetime import datetime\n\nimport pytest\nfrom mock import MagicMock, Mock, patch\n\nfrom uds.can import CanPacketRecord\nfrom uds.can.transport_interface.common import (\n    AbstractCanAddressingInformation,\n    AbstractCanTransportInterface,\n    AbstractFlowControlParametersGenerator,\n    CanPacketType,\n    TransmissionDirection,\n    UdsMessageRecord,\n)\n\nSCRIPT_LOCATION = \"uds.can.transport_interface.common\"\n\nclass TestAbstractCanTransportInterface:\n    \"\"\"Unit tests for `AbstractCanTransportInterface` class.\"\"\"\n\n    def setup_method(self):\n        self.mock_can_transport_interface = Mock(spec=AbstractCanTransportInterface)\n        # patching\n        self._patcher_abstract_transport_interface_init \\\n            = patch(f\"{SCRIPT_LOCATION}.AbstractTransportInterface.__init__\")\n        self.mock_abstract_transport_interface_init = self._patcher_abstract_transport_interface_init.start()\n        self._patcher_can_segmenter = patch(f\"{SCRIPT_LOCATION}.CanSegmenter\")\n        self.mock_can_segmenter = self._patcher_can_segmenter.start()\n        self._patcher_warn = patch(f\"{SCRIPT_LOCATION}.warn\")\n        self.mock_warn = self._patcher_warn.start()\n\n    def teardown_method(self):\n        self._patcher_abstract_transport_interface_init.stop()\n        self._patcher_can_segmenter.stop()\n        self._patcher_warn.stop()\n\n    # __init__\n\n    @pytest.mark.parametrize(\"network_manager, addressing_information\", [\n        (Mock(), Mock()),\n        (\"some network manger for CAN bus\", Mock(spec=AbstractCanAddressingInformation)),\n    ])\n    def test_init__mandatory_args(self, network_manager, addressing_information):\n        assert AbstractCanTransportInterface.__init__(self.mock_can_transport_interface,\n                                                      network_manager=network_manager,\n                                                      addressing_information=addressing_information) is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_ar_measured is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_as_measured is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_bs_measured is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_cr_measured is None\n        assert self.mock_can_transport_interface.n_as_timeout == AbstractCanTransportInterface.N_AS_TIMEOUT\n        assert self.mock_can_transport_interface.n_ar_timeout == AbstractCanTransportInterface.N_AR_TIMEOUT\n        assert self.mock_can_transport_interface.n_bs_timeout == AbstractCanTransportInterface.N_BS_TIMEOUT\n        assert self.mock_can_transport_interface.n_br == AbstractCanTransportInterface.DEFAULT_N_BR\n        assert self.mock_can_transport_interface.n_cs == AbstractCanTransportInterface.DEFAULT_N_CS\n        assert self.mock_can_transport_interface.n_cr_timeout == AbstractCanTransportInterface.N_CR_TIMEOUT\n        assert (self.mock_can_transport_interface.flow_control_parameters_generator\n                == AbstractCanTransportInterface.DEFAULT_FLOW_CONTROL_PARAMETERS)\n        self.mock_can_transport_interface.segmenter = self.mock_can_segmenter.return_value\n        self.mock_abstract_transport_interface_init.assert_called_once_with(network_manager=network_manager)\n        self.mock_can_segmenter.assert_called_once_with(addressing_information=addressing_information)\n\n    # _update_n_ar_measured\n\n    @pytest.mark.parametrize(\"value\", [Mock(), \"some value\"])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_update_n_ar_measured__type_error(self, mock_isinstance, value):\n        mock_isinstance.return_value = False\n        with pytest.raises(TypeError):\n            AbstractCanTransportInterface._update_n_ar_measured(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    @pytest.mark.parametrize(\"value\", [-1, -0.0001])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_update_n_ar_measured__value_error(self, mock_isinstance, value):\n        mock_isinstance.return_value = True\n        with pytest.raises(ValueError):\n            AbstractCanTransportInterface._update_n_ar_measured(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    @pytest.mark.parametrize(\"value\", [0, AbstractCanTransportInterface.N_AR_TIMEOUT])\n    def test_update_n_ar_measured__no_warning(self, value):\n        self.mock_can_transport_interface.n_ar_timeout = AbstractCanTransportInterface.N_AR_TIMEOUT\n        assert AbstractCanTransportInterface._update_n_ar_measured(self.mock_can_transport_interface, value) is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_ar_measured == value\n        self.mock_warn.assert_not_called()\n\n    # _update_n_as_measured\n\n    @pytest.mark.parametrize(\"value\", [-1, -0.0001])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_update_n_as_measured__value_error(self, mock_isinstance, value):\n        mock_isinstance.return_value = True\n        with pytest.raises(ValueError):\n            AbstractCanTransportInterface._update_n_as_measured(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    # _update_n_bs_measured\n\n    def test_update_n_bs_measured__1_record(self):\n        mock_message_record = Mock(spec=UdsMessageRecord,\n                                   direction=TransmissionDirection.TRANSMITTED,\n                                   packets_records=(Mock(spec=CanPacketRecord),))\n        assert AbstractCanTransportInterface._update_n_bs_measured(self.mock_can_transport_interface,\n                                                                   message_record=mock_message_record) is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_bs_measured is None\n\n    # _update_n_cr_measured\n\n    @pytest.mark.parametrize(\"message_record\", [\n        Mock(), \"not a message\"\n    ])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_update_n_cr_measured__type_error(self, mock_isinstance, message_record):\n        mock_isinstance.return_value = False\n        with pytest.raises(TypeError):\n            AbstractCanTransportInterface._update_n_cr_measured(self.mock_can_transport_interface,\n                                                                message_record=message_record)\n        mock_isinstance.assert_called_once_with(message_record, UdsMessageRecord)\n\n    def test_update_n_cr_measured__1_record(self):\n        mock_message_record = Mock(spec=UdsMessageRecord,\n                                   direction=TransmissionDirection.RECEIVED,\n                                   packets_records=(Mock(spec=CanPacketRecord),))\n        assert AbstractCanTransportInterface._update_n_cr_measured(self.mock_can_transport_interface,\n                                                                   message_record=mock_message_record) is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_cr_measured is None\n\n    # clear_measurements\n\n    def test_clear_measurements(self):\n        assert AbstractCanTransportInterface.clear_measurements(self.mock_can_transport_interface) is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_ar_measured is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_as_measured is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_bs_measured is None\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_cr_measured is None\n\n    # segmenter\n\n    # n_as\n\n    @pytest.mark.parametrize(\"value\", [\"something\", Mock()])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_as_timeout__set__type_error(self, mock_isinstance, value):\n        mock_isinstance.return_value = False\n        with pytest.raises(TypeError):\n            AbstractCanTransportInterface.n_as_timeout.fset(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    # n_ar\n\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_ar_timeout__set__no_warning(self, mock_isinstance):\n        mock_isinstance.return_value = True\n        mock_le = Mock(return_value=False)\n        mock_ne = Mock(return_value=False)\n        mock_value = MagicMock(__le__=mock_le, __ne__=mock_ne)\n        AbstractCanTransportInterface.n_ar_timeout.fset(self.mock_can_transport_interface, mock_value)\n        mock_isinstance.assert_called_once_with(mock_value, (int, float))\n        mock_le.assert_called_once_with(0)\n        mock_ne.assert_called_once_with(self.mock_can_transport_interface.N_AR_TIMEOUT)\n        self.mock_warn.assert_not_called()\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_ar_timeout == mock_value\n\n    # n_bs\n\n    @pytest.mark.parametrize(\"value\", [\"something\", Mock()])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_bs_timeout__set__type_error(self, mock_isinstance, value):\n        mock_isinstance.return_value = False\n        with pytest.raises(TypeError):\n            AbstractCanTransportInterface.n_bs_timeout.fset(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_bs_timeout__set__no_warning(self, mock_isinstance):\n        mock_isinstance.return_value = True\n        mock_le = Mock(return_value=False)\n        mock_ne = Mock(return_value=False)\n        mock_value = MagicMock(__le__=mock_le, __ne__=mock_ne)\n        AbstractCanTransportInterface.n_bs_timeout.fset(self.mock_can_transport_interface, mock_value)\n        mock_isinstance.assert_called_once_with(mock_value, (int, float))\n        mock_le.assert_called_once_with(0)\n        mock_ne.assert_called_once_with(self.mock_can_transport_interface.N_BS_TIMEOUT)\n        self.mock_warn.assert_not_called()\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_bs_timeout == mock_value\n\n    # n_br\n\n    def test_n_br__get(self):\n        self.mock_can_transport_interface._AbstractCanTransportInterface__n_br = Mock()\n        assert (AbstractCanTransportInterface.n_br.fget(self.mock_can_transport_interface)\n                == self.mock_can_transport_interface._AbstractCanTransportInterface__n_br)\n\n    @pytest.mark.parametrize(\"value\", [\"something\", Mock()])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_br__set__type_error(self, mock_isinstance, value):\n        mock_isinstance.return_value = False\n        with pytest.raises(TypeError):\n            AbstractCanTransportInterface.n_br.fset(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    @pytest.mark.parametrize(\"value, max_value\", [\n        (-0.00000001, 100),\n        (-1, 900),\n        (901, 900.5),\n        (450.1, 450),\n    ])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_br__set__value_error(self, mock_isinstance, value, max_value):\n        mock_isinstance.return_value = True\n        self.mock_can_transport_interface.n_br_max = max_value\n        with pytest.raises(ValueError):\n            AbstractCanTransportInterface.n_br.fset(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    # n_cs\n\n    @pytest.mark.parametrize(\"value, max_value\", [\n        (-0.00000001, 100),\n        (-1, 900),\n        (901, 900.5),\n        (450.1, 450),\n    ])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_n_cs__set__value_error(self, mock_isinstance, value, max_value):\n        mock_isinstance.return_value = True\n        self.mock_can_transport_interface.n_cs_max = max_value\n        with pytest.raises(ValueError):\n            AbstractCanTransportInterface.n_cs.fset(self.mock_can_transport_interface, value)\n        mock_isinstance.assert_called_once_with(value, (int, float))\n\n    def test_n_cs__set__none(self):\n        AbstractCanTransportInterface.n_cs.fset(self.mock_can_transport_interface, None)\n        assert self.mock_can_transport_interface._AbstractCanTransportInterface__n_cs is None\n\n    @pytest.mark.parametrize(\"n_cr_timeout\", [1000, 965.43])\n    def test_n_cs_max__n_as_not_measured(self, n_cr_timeout):\n        self.mock_can_transport_interface.n_cr_timeout = n_cr_timeout\n        self.mock_can_transport_interface.n_as_measured = None\n        assert (AbstractCanTransportInterface.n_cs_max.fget(self.mock_can_transport_interface)\n                == 0.9 * n_cr_timeout)\n\n    # n_cr\n\n    # dlc\n\n    # use_data_optimization\n\n    def test_use_data_optimization__get(self):\n        assert AbstractCanTransportInterface.use_data_optimization.fget(self.mock_can_transport_interface) \\\n               == self.mock_can_transport_interface.segmenter.use_data_optimization\n\n    # filler_byte\n\n    # flow_control_parameters_generator\n\n    @pytest.mark.parametrize(\"value\", [\"something\", Mock()])\n    @patch(f\"{SCRIPT_LOCATION}.isinstance\")\n    def test_flow_control_parameters_generator__set(self, mock_isinstance, value):\n        mock_isinstance.return_value = True\n        assert AbstractCanTransportInterface.flow_control_parameters_generator.fset(self.mock_can_transport_interface,\n                                                                                    value) is None\n        assert (self.mock_can_transport_interface._AbstractCanTransportInterface__flow_control_parameters_generator\n                == value)\n        mock_isinstance.assert_called_once_with(value, AbstractFlowControlParametersGenerator)\n"
