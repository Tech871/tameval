[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "grafana/dskit"
sha = "22a660c7415734a00f68fde15a1e0fcf3b7a830d"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out clusterutil/cluster_validation_config.go clusterutil/cluster_validation_config_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting clusterutil/cluster_validation_config.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 29.0
original_coverage = 91.0
mutation_kill_rate = 64.0
original_mutation_kill_rate = 100.0
covered_lines = [ 50, 51, 52, 53, 54, 55, 58, 59, 60, 61,]
missed_lines = [ 14, 15, 16, 17, 20, 21, 22, 30, 31, 32, 34, 35, 36, 37, 38, 41, 42, 43, 64, 65, 66, 67, 68, 69,]

[input_info]
test_file_path = "clusterutil/cluster_validation_config_test.go"
focal_file_path = "clusterutil/cluster_validation_config.go"
test_file_url = "https://github.com/grafana/dskit/blob/22a660c7415734a00f68fde15a1e0fcf3b7a830d/clusterutil/cluster_validation_config_test.go"
focal_file_url = "https://github.com/grafana/dskit/blob/22a660c7415734a00f68fde15a1e0fcf3b7a830d/clusterutil/cluster_validation_config.go"
first_commit_date = "2025-02-27"
last_commit_date = "2025-03-12"
test_file_content = "package clusterutil\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestClusterValidationProtocolConfigValidate(t *testing.T) {\n\ttestCases := map[string]struct {\n\t\tlabel          string\n\t\tenabled        bool\n\t\tsoftValidation bool\n\t\texpectedErr    error\n\t}{\n\t\t\"soft validation cannot be done if cluster validation label is not set\": {\n\t\t\tsoftValidation: true,\n\t\t\texpectedErr:    fmt.Errorf(\"testProtocol: validation cannot be enabled if cluster validation label is not configured\"),\n\t\t},\n\t\t\"cluster validation cannot be done if cluster validation label is not set\": {\n\t\t\tenabled:     true,\n\t\t\texpectedErr: fmt.Errorf(\"testProtocol: validation cannot be enabled if cluster validation label is not configured\"),\n\t\t},\n\t\t\"cluster validation and soft validation can be disabled if cluster validation label is not set\": {\n\t\t\tlabel:          \"\",\n\t\t\tenabled:        false,\n\t\t\tsoftValidation: false,\n\t\t},\n\t\t\"cluster validation and soft validation can be disabled if cluster validation label is set\": {\n\t\t\tlabel:          \"my-cluster\",\n\t\t\tenabled:        false,\n\t\t\tsoftValidation: false,\n\t\t},\n\t\t\"soft validation cannot be enabled if cluster validation is disabled\": {\n\t\t\tlabel:          \"my-cluster\",\n\t\t\tenabled:        false,\n\t\t\tsoftValidation: true,\n\t\t\texpectedErr:    fmt.Errorf(\"testProtocol: soft validation can be enabled only if cluster validation is enabled\"),\n\t\t},\n\t\t\"soft validation can be disabled if cluster validation is enabled\": {\n\t\t\tlabel:          \"my-cluster\",\n\t\t\tenabled:        true,\n\t\t\tsoftValidation: false,\n\t\t},\n\t\t\"cluster validation and soft validation can be enabled at the same time\": {\n\t\t\tlabel:          \"my-cluster\",\n\t\t\tenabled:        true,\n\t\t\tsoftValidation: true,\n\t\t},\n\t}\n\tfor testName, testCase := range testCases {\n\t\tt.Run(testName, func(t *testing.T) {\n\t\t\ttestProtocolCfg := ClusterValidationProtocolConfig{\n\t\t\t\tEnabled:        testCase.enabled,\n\t\t\t\tSoftValidation: testCase.softValidation,\n\t\t\t}\n\t\t\terr := testProtocolCfg.Validate(\"testProtocol\", testCase.label)\n\t\t\trequire.Equal(t, testCase.expectedErr, err)\n\t\t})\n\t}\n}"
