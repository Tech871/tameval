[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "taosdata/taos-connector-jdbc"
sha = "180ba59e0aa7793a85db8d1cc332722f324b0b9d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=TMQResultSetTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.TMQResultSet  -DtargetTests=**.TMQResultSetTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 42.0
original_coverage = 42.0
mutation_kill_rate = 4.0
original_mutation_kill_rate = 4.0
covered_lines = [ 25, 26, 27, 28, 29, 30, 64, 67, 75, 76, 179, 180, 182, 187, 188, 190, 195, 196, 198, 203, 204, 206, 211, 212, 214, 219, 220, 222, 227, 228, 230, 235, 236, 238, 243, 244, 246, 251, 252, 254, 259, 260, 262, 267, 268, 270, 274, 275, 277, 287,]
missed_lines = [ 17, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 65, 68, 69, 70, 71, 72, 80, 84, 86, 90, 92, 96, 98, 102, 104, 108, 110, 114, 116, 120, 122, 126, 128, 132, 134, 138, 140, 144, 145, 147, 152, 154, 155, 156, 158, 162, 163, 164, 166, 167, 172, 174, 283, 291,]

[input_info]
test_file_path = "src/test/java/com/taosdata/jdbc/tmq/TMQResultSetTest.java"
focal_file_path = "src/main/java/com/taosdata/jdbc/tmq/TMQResultSet.java"
test_file_url = "https://github.com/taosdata/taos-connector-jdbc/blob/180ba59e0aa7793a85db8d1cc332722f324b0b9d/src/test/java/com/taosdata/jdbc/tmq/TMQResultSetTest.java"
focal_file_url = "https://github.com/taosdata/taos-connector-jdbc/blob/180ba59e0aa7793a85db8d1cc332722f324b0b9d/src/main/java/com/taosdata/jdbc/tmq/TMQResultSet.java"
first_commit_date = "2022-06-18"
last_commit_date = "2025-07-26"
test_file_content = "package com.taosdata.jdbc.tmq;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.sql.SQLException;\n\nimport static org.junit.Assert.*;\n\npublic class TMQResultSetTest {\n    private TMQResultSet resultSet;\n\n    @Before\n    public void setUp() {\n        // 假设 TMQResultSet 有一个适当的构造函数\n        resultSet = new TMQResultSet(null, 0, 0);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsBeforeFirst_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.isBeforeFirst();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsBeforeFirst_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.isBeforeFirst();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsAfterLast_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.isAfterLast();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsAfterLast_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.isAfterLast();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsFirst_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.isFirst();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsFirst_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.isFirst();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsLast_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.isLast();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsLast_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.isLast();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testBeforeFirst_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.beforeFirst();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testBeforeFirst_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.beforeFirst();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testAfterLast_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.afterLast();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testAfterLast_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.afterLast();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testFirst_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.first();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testFirst_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.first();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testLast_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.last();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testLast_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.last();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetRow_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.getRow();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetRow_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.getRow();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testAbsolute_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.absolute(1);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testAbsolute_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.absolute(1);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testRelative_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.relative(1);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testRelative_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.relative(1);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testPrevious_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.previous();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testPrevious_UnsupportedMethod() throws SQLException {\n        // 这里可以添加逻辑以确保抛出异常\n        resultSet.previous();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetStatement_ConnectionClosed() throws SQLException {\n        resultSet.close(); // 模拟连接关闭\n        resultSet.getStatement();\n    }\n\n    @Test\n    public void testGetStatement() throws SQLException {\n        // 这里可以添加逻辑以确保返回 null 或其他预期值\n        assertNull(resultSet.getStatement());\n    }\n}\n"
