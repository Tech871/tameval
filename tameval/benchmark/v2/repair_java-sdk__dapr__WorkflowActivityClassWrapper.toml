[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dapr/java-sdk"
sha = "57f6b96d60aefd07b736d747995addf0e40b95d1"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl sdk-workflows -Dtest=WorkflowActivityClassWrapperTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl sdk-workflows -DtargetClasses=**.WorkflowActivityClassWrapper  -DtargetTests=**.WorkflowActivityClassWrapperTest  -DoutputFormats=XML"
coverage_report_path = "sdk-workflows/target/jacoco-report/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "sdk-workflows/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 65.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "sdk-workflows/src/test/java/io/dapr/workflows/runtime/WorkflowActivityClassWrapperTest.java"
focal_file_path = "sdk-workflows/src/main/java/io/dapr/workflows/runtime/WorkflowActivityClassWrapper.java"
test_file_url = "https://github.com/dapr/java-sdk/blob/57f6b96d60aefd07b736d747995addf0e40b95d1/sdk-workflows/src/test/java/io/dapr/workflows/runtime/WorkflowActivityClassWrapperTest.java"
focal_file_url = "https://github.com/dapr/java-sdk/blob/57f6b96d60aefd07b736d747995addf0e40b95d1/sdk-workflows/src/main/java/io/dapr/workflows/runtime/WorkflowActivityClassWrapper.java"
first_commit_date = "2025-02-03"
last_commit_date = "2025-02-03"
test_file_content = "package io.dapr.workflows.runtime;\n\nimport com.microsoft.durabletask.TaskActivityContext;\nimport io.dapr.workflows.WorkflowActivity;\nimport io.dapr.workflows.WorkflowActivityContext;\nimport org.junit.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\npublic class WorkflowActivityClassWrapperTest {\n  public static class TestActivity implements WorkflowActivity {\n    @Override\n    public Object run(WorkflowActivityContext ctx) {\n      String activityContextName = ctx.getName();\n      return ctx.getInput(String.class) + \" world! from \" + activityContextName;\n    }\n  }\n\n  @Test\n  public void getName() {\n    WorkflowActivityClassWrapper<TestActivity> wrapper = new WorkflowActivityClassWrapper<>(TestActivity.class);\n\n  }\n\n  @Test\n  public void createWithClass() {\n    TaskActivityContext mockContext = mock(TaskActivityContext.class);\n    WorkflowActivityClassWrapper<TestActivity> wrapper = new WorkflowActivityClassWrapper<>(TestActivity.class);\n\n    when(mockContext.getInput(String.class)).thenReturn(\"Hello\");\n    when(mockContext.getName()).thenReturn(\"TestActivityContext\");\n\n    Object result = wrapper.create().run(mockContext);\n\n    verify(mockContext, times(1)).getInput(String.class);\n  }\n}"
