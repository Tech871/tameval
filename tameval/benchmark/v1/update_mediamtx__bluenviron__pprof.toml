[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bluenviron/mediamtx"
sha = "416ac1357ea1125768a6e874f695656f510bd524"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/pprof/pprof.go internal/pprof/pprof_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/pprof/pprof.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 80.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/pprof/pprof_test.go"
focal_file_path = "internal/pprof/pprof.go"
test_file_url = "https://github.com/bluenviron/mediamtx/blob/416ac1357ea1125768a6e874f695656f510bd524/internal/pprof/pprof_test.go"
focal_file_url = "https://github.com/bluenviron/mediamtx/blob/416ac1357ea1125768a6e874f695656f510bd524/internal/pprof/pprof.go"
first_commit_date = "2020-11-01"
last_commit_date = "2025-02-18"
test_file_content = "package pprof\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/bluenviron/mediamtx/internal/conf\"\n\t\"github.com/bluenviron/mediamtx/internal/test\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestPreflightRequest(t *testing.T) {\n\ts := &PPROF{\n\t\tAddress:     \"127.0.0.1:9999\",\n\t\tAllowOrigin: \"*\",\n\t\tReadTimeout: conf.StringDuration(10 * time.Second),\n\t\tParent:      test.NilLogger,\n\t}\n\terr := s.Initialize()\n\trequire.NoError(t, err)\n\tdefer s.Close()\n\n\ttr := &http.Transport{}\n\tdefer tr.CloseIdleConnections()\n\thc := &http.Client{Transport: tr}\n\n\treq, err := http.NewRequest(http.MethodOptions, \"http://localhost:9999\", nil)\n\trequire.NoError(t, err)\n\n\treq.Header.Add(\"Access-Control-Request-Method\", \"GET\")\n\n\tres, err := hc.Do(req)\n\trequire.NoError(t, err)\n\tdefer res.Body.Close()\n\n\trequire.Equal(t, http.StatusNoContent, res.StatusCode)\n\n\tbyts, err := io.ReadAll(res.Body)\n\trequire.NoError(t, err)\n\n\trequire.Equal(t, \"*\", res.Header.Get(\"Access-Control-Allow-Origin\"))\n\trequire.Equal(t, \"true\", res.Header.Get(\"Access-Control-Allow-Credentials\"))\n\trequire.Equal(t, \"OPTIONS, GET\", res.Header.Get(\"Access-Control-Allow-Methods\"))\n\trequire.Equal(t, \"Authorization\", res.Header.Get(\"Access-Control-Allow-Headers\"))\n\trequire.Equal(t, byts, []byte{})\n}\n\nfunc TestPprof(t *testing.T) {\n\ts := &PPROF{\n\t\tAddress:     \"127.0.0.1:9999\",\n\t\tAllowOrigin: \"*\",\n\t\tReadTimeout: conf.StringDuration(10 * time.Second),\n\t\tAuthManager: test.NilAuthManager,\n\t\tParent:      test.NilLogger,\n\t}\n\terr := s.Initialize()\n\trequire.NoError(t, err)\n\tdefer s.Close()\n\n\ttr := &http.Transport{}\n\tdefer tr.CloseIdleConnections()\n\thc := &http.Client{Transport: tr}\n\n\treq, err := http.NewRequest(http.MethodGet, \"http://127.0.0.1:9999/debug/pprof/heap\", nil)\n\trequire.NoError(t, err)\n\n\tres, err := hc.Do(req)\n\trequire.NoError(t, err)\n\tdefer res.Body.Close()\n\n\trequire.Equal(t, http.StatusOK, res.StatusCode)\n\n\tbyts, err := io.ReadAll(res.Body)\n\trequire.NoError(t, err)\n\trequire.NotEmpty(t, byts)\n}"
