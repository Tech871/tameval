[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "megvii-research/megfile"
sha = "0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-cli.txt && pip install -r requirements-hdfs.txt && pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=megfile/lib/glob.py -m pytest -q --junit-xml=test_output.xml tests/lib/test_glob.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target megfile.lib.glob --unit-test tests.lib.test_glob --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target megfile/lib/glob.py --unit-test tests/lib/test_glob.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 98.0
original_coverage = 98.0
mutation_kill_rate = 13.0
original_mutation_kill_rate = 13.0
covered_lines = [ 2, 4, 5, 6, 7, 9, 12, 13, 14, 15, 18, 19, 22, 23, 26, 27, 28, 31, 34, 47, 50, 63, 64, 65, 66, 68, 71, 72, 75, 76, 77, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 91, 92, 94, 95, 99, 100, 101, 102, 104, 105, 106, 107, 109, 111, 112, 113, 114, 120, 121, 122, 123, 124, 127, 128, 131, 132, 134, 135, 136, 141, 142, 143, 144, 145, 150, 151, 152, 153, 155, 156, 157, 158, 159, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 184, 185, 186, 189, 194, 195, 198, 199, 202, 206, 207, 208, 211, 213, 214, 215, 218, 220, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 242, 245, 246, 247, 248, 250, 251, 253, 254, 255, 256, 258, 260, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302,]
missed_lines = [ 73, 78, 190, 191,]

[input_info]
test_file_path = "tests/lib/test_glob.py"
focal_file_path = "megfile/lib/glob.py"
test_file_url = "https://github.com/megvii-research/megfile/blob/0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35/tests/lib/test_glob.py"
focal_file_url = "https://github.com/megvii-research/megfile/blob/0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35/megfile/lib/glob.py"
first_commit_date = "2021-08-23"
last_commit_date = "2025-08-13"
test_file_content = "import os\nfrom collections import namedtuple\n\nimport pytest\n\nfrom megfile.lib import fnmatch, glob\n\nFile = namedtuple(\"File\", [\"path\", \"body\"])\n\"\"\"\nbucketA/\n|-folderAA/\n  |-folderAAA/\n    |-fileAAAA\n|-folderAB-C/\n  |-fileAB-C\n|-folderAB/\n  |-fileAB\n  |-fileAC\n|-fileAA\n|-fileAB\nbucketB/\nbucketC/\n|-folder    （目录）\n    |-file\n\nbucketForGlobTest/ （用于 glob 的测试, 结构较复杂）\n|-1\n    |-a （目录）\n        |-b\n            |-c\n                |-1.json\n                |-A.msg\n        |-1.json\n|-2\n    |-a\n        |-d\n            |-c\n                |-1.json\n            |-2.json\n        |-b\n            |-c\n                |-1.json\n                |-2.json\n            |-a\n                |-1.json\nemptyBucketForGlobTest/\n\"\"\"\n\nFILE_LIST = [\n    File(\"/bucketA/folderAA/folderAAA/fileAAAA\", \"fileAAAA\"),\n    File(\"/bucketA/folderAB-C/fileAB-C\", \"fileAB-C\"),\n    File(\"/bucketA/folderAB/fileAB\", \"fileAB\"),\n    File(\"/bucketA/folderAB/fileAC\", \"fileAC\"),\n    File(\"/bucketA/fileAA\", \"fileAA\"),\n    File(\"/bucketA/fileAB\", \"fileAB\"),\n    File(\"/bucketB\", None),  # 空 bucket\n    File(\"/bucketC/folder/file\", \"file\"),\n    File(\"/bucketForGlobTest/1/a/b/c/1.json\", \"1.json\"),\n    File(\"/bucketForGlobTest/1/a/b/1.json\", \"1.json\"),  # for glob(*/a/*/*.json)\n    File(\"/bucketForGlobTest/1/a/b/c/A.msg\", \"A.msg\"),\n    File(\"/bucketForGlobTest/2/a/d/c/1.json\", \"1.json\"),\n    File(\"/bucketForGlobTest/2/a/d/2.json\", \"2.json\"),\n    File(\"/bucketForGlobTest/2/a/b/c/1.json\", \"1.json\"),\n    File(\"/bucketForGlobTest/2/a/b/c/2.json\", \"2.json\"),\n    File(\"/bucketForGlobTest/2/a/b/a/1.json\", \"1.json\"),\n    File(\"/emptyBucketForGlobTest\", None),\n    File(\"/1.json\", \"1.json\"),\n]\n\n\n@pytest.fixture\ndef fs_setup(fs, file_list=FILE_LIST):\n    for file in file_list:\n        if file.body is None:\n            os.makedirs(file.path, exist_ok=True)\n        else:\n            dirname = os.path.dirname(file.path)\n            os.makedirs(dirname, exist_ok=True)\n            with open(file.path, \"w\") as writer:\n                writer.write(file.body)\n\n\ndef assert_glob(pattern, expected, recursive=True):\n    assert sorted(glob.glob(pattern, recursive=recursive)) == sorted(expected)\n\n\ndef _glob_with_common_wildcard():\n    \"\"\"\n    scenario: common shell wildcard, '*', '**', '[]', '?'\n    expectation: return matched pathnames in lexicographical order\n    \"\"\"\n    # without any wildcards\n    assert_glob(\"/emptyBucketForGlobTest\", [\"/emptyBucketForGlobTest\"])\n    assert_glob(\n        \"*\",\n        [\n            \"tmp\",\n            \"bucketA\",\n            \"bucketB\",\n            \"bucketC\",\n            \"bucketForGlobTest\",\n            \"emptyBucketForGlobTest\",\n            \"1.json\",\n        ],\n        recursive=False,\n    )\n    assert_glob(\"/emptyBucketForGlobTest/\", [\"/emptyBucketForGlobTest/\"])\n    assert_glob(\"/bucketForGlobTest/1\", [\"/bucketForGlobTest/1\"])\n    assert_glob(\"/bucketForGlobTest/1/\", [\"/bucketForGlobTest/1/\"])\n    assert_glob(\"/bucketForGlobTest/1/a\", [\"/bucketForGlobTest/1/a\"])\n    assert_glob(\"/bucketForGlobTest/2/a/d/2.json\", [\"/bucketForGlobTest/2/a/d/2.json\"])\n\n    # '*', all files and folders\n    assert_glob(\"/emptyBucketForGlobTest/*\", [])\n    assert_glob(\n        \"/bucketForGlobTest/*\", [\"/bucketForGlobTest/1\", \"/bucketForGlobTest/2\"]\n    )\n\n    # all files under all direct subfolders\n    assert_glob(\n        \"/bucketForGlobTest/*/*\", [\"/bucketForGlobTest/1/a\", \"/bucketForGlobTest/2/a\"]\n    )\n\n    # combination of '?' and []\n    assert_glob(\"/bucketForGlobTest/[2-3]/**/*?msg\", [])\n    assert_glob(\n        \"/bucketForGlobTest/[13]/**/*?msg\", [\"/bucketForGlobTest/1/a/b/c/A.msg\"]\n    )\n\n\ndef _glob_with_recursive_pathname():\n    \"\"\"\n    scenario: recursively search target folder\n    expectation: returns all subdirectory and files,\n    without check of lexicographical order\n    \"\"\"\n    # recursive all files and folders\n    assert_glob(\n        \"/bucketForGlobTest/**\",\n        [\n            \"/bucketForGlobTest/\",\n            \"/bucketForGlobTest/1\",\n            \"/bucketForGlobTest/1/a\",\n            \"/bucketForGlobTest/1/a/b\",\n            \"/bucketForGlobTest/1/a/b/1.json\",\n            \"/bucketForGlobTest/1/a/b/c\",\n            \"/bucketForGlobTest/1/a/b/c/1.json\",\n            \"/bucketForGlobTest/1/a/b/c/A.msg\",\n            \"/bucketForGlobTest/2\",\n            \"/bucketForGlobTest/2/a\",\n            \"/bucketForGlobTest/2/a/b\",\n            \"/bucketForGlobTest/2/a/b/a\",\n            \"/bucketForGlobTest/2/a/b/a/1.json\",\n            \"/bucketForGlobTest/2/a/b/c\",\n            \"/bucketForGlobTest/2/a/b/c/1.json\",\n            \"/bucketForGlobTest/2/a/b/c/2.json\",\n            \"/bucketForGlobTest/2/a/d\",\n            \"/bucketForGlobTest/2/a/d/2.json\",\n            \"/bucketForGlobTest/2/a/d/c/1.json\",\n            \"/bucketForGlobTest/2/a/d/c\",\n        ],\n    )\n\n    assert_glob(\n        \"/bucketForGlobTest/**/*\",\n        [\n            \"/bucketForGlobTest/1\",\n            \"/bucketForGlobTest/1/a\",\n            \"/bucketForGlobTest/1/a/b\",\n            \"/bucketForGlobTest/1/a/b/1.json\",\n            \"/bucketForGlobTest/1/a/b/c\",\n            \"/bucketForGlobTest/1/a/b/c/1.json\",\n            \"/bucketForGlobTest/1/a/b/c/A.msg\",\n            \"/bucketForGlobTest/2\",\n            \"/bucketForGlobTest/2/a\",\n            \"/bucketForGlobTest/2/a/b\",\n            \"/bucketForGlobTest/2/a/b/a\",\n            \"/bucketForGlobTest/2/a/b/a/1.json\",\n            \"/bucketForGlobTest/2/a/b/c\",\n            \"/bucketForGlobTest/2/a/b/c/1.json\",\n            \"/bucketForGlobTest/2/a/b/c/2.json\",\n            \"/bucketForGlobTest/2/a/d\",\n            \"/bucketForGlobTest/2/a/d/2.json\",\n            \"/bucketForGlobTest/2/a/d/c/1.json\",\n            \"/bucketForGlobTest/2/a/d/c\",\n        ],\n    )\n\n    assert_glob(\n        \"**\",\n        [\n            \"1.json\",\n            \"tmp\",\n            \"bucketA\",\n            \"bucketA/folderAA\",\n            \"bucketA/folderAA/folderAAA\",\n            \"bucketA/folderAA/folderAAA/fileAAAA\",\n            \"bucketA/folderAB-C\",\n            \"bucketA/folderAB-C/fileAB-C\",\n            \"bucketA/folderAB\",\n            \"bucketA/folderAB/fileAB\",\n            \"bucketA/folderAB/fileAC\",\n            \"bucketA/fileAA\",\n            \"bucketA/fileAB\",\n            \"bucketB\",\n            \"bucketC\",\n            \"bucketC/folder\",\n            \"bucketC/folder/file\",\n            \"bucketForGlobTest\",\n            \"bucketForGlobTest/1\",\n            \"bucketForGlobTest/1/a\",\n            \"bucketForGlobTest/1/a/b\",\n            \"bucketForGlobTest/1/a/b/c\",\n            \"bucketForGlobTest/1/a/b/c/1.json\",\n            \"bucketForGlobTest/1/a/b/c/A.msg\",\n            \"bucketForGlobTest/1/a/b/1.json\",\n            \"bucketForGlobTest/2\",\n            \"bucketForGlobTest/2/a\",\n            \"bucketForGlobTest/2/a/d\",\n            \"bucketForGlobTest/2/a/d/c\",\n            \"bucketForGlobTest/2/a/d/c/1.json\",\n            \"bucketForGlobTest/2/a/d/2.json\",\n            \"bucketForGlobTest/2/a/b\",\n            \"bucketForGlobTest/2/a/b/c\",\n            \"bucketForGlobTest/2/a/b/c/1.json\",\n            \"bucketForGlobTest/2/a/b/c/2.json\",\n            \"bucketForGlobTest/2/a/b/a\",\n            \"bucketForGlobTest/2/a/b/a/1.json\",\n            \"emptyBucketForGlobTest\",\n        ],\n    )\n\n\ndef _glob_with_same_file_and_folder():\n    \"\"\"\n    scenario: existing same-named file and directory in a  directory\n    expectation: the file and directory is returned 1 time respectively\n    \"\"\"\n    # same name and folder\n    assert_glob(\n        \"/bucketForGlobTest/1/*\",\n        [\n            # 1 file name 'a' and 1 actual folder\n            \"/bucketForGlobTest/1/a\"\n        ],\n    )\n\n\ndef _glob_with_nested_pathname():\n    \"\"\"\n    scenario: pathname including nested '**'\n    expectation: work correctly as standard glob module\n    \"\"\"\n    # nested\n    # non-recursive, actually: /bucketForGlobTest/*/a/*/*.jso?\n    assert_glob(\n        \"/bucketForGlobTest/**/a/**/*.jso?\",\n        [\"/bucketForGlobTest/2/a/d/2.json\", \"/bucketForGlobTest/1/a/b/1.json\"],\n        recursive=False,\n    )\n\n    # recursive\n    # /bucketForGlobTest/2/a/b/a/1.json is returned 2 times\n    # without set, otherwise, '/bucketForGlobTest/2/a/b/a/1.json' would be duplicated\n    assert_glob(\n        \"/bucketForGlobTest/**/a/**/*.jso?\",\n        [\n            \"/bucketForGlobTest/1/a/b/1.json\",\n            \"/bucketForGlobTest/1/a/b/c/1.json\",\n            \"/bucketForGlobTest/2/a/b/a/1.json\",  # first time\n            \"/bucketForGlobTest/2/a/b/a/1.json\",  # second time\n            \"/bucketForGlobTest/2/a/b/c/1.json\",\n            \"/bucketForGlobTest/2/a/b/c/2.json\",\n            \"/bucketForGlobTest/2/a/d/2.json\",\n            \"/bucketForGlobTest/2/a/d/c/1.json\",\n        ],\n    )\n\n\ndef _glob_with_not_exists_dir():\n    \"\"\"\n    scenario: glob on a directory that is not exists\n    expectation: if recursive is True,\n        return the directory with postfix of slash('/'), otherwise, an empty list.\n    keep identical result with standard glob module\n    \"\"\"\n\n    assert_glob(\"/bucketForGlobTest/notExists/not_exists_file\", [])\n    assert_glob(\"/bucketForGlobTest/notExists/not_exists_dir/\", [])\n\n    # not exists path\n    assert_glob(\"/notExistsBucket/**\", [])\n\n    assert_glob(\"/bucketA/notExists/**\", [])\n\n    assert_glob(\"/notExistsBucket/**\", [])\n\n    assert_glob(\"/bucketForGlobTest/notExists/**\", [])\n\n\ndef _glob_with_dironly():\n    \"\"\"\n    scenario: pathname with the postfix of slash('/')\n    expectation: returns only contains pathname of directory,\n        each of them is end with '/'\n    \"\"\"\n    assert_glob(\n        \"/bucketForGlobTest/*/\", [\"/bucketForGlobTest/1/\", \"/bucketForGlobTest/2/\"]\n    )\n\n    assert_glob(\"/bucketForGlobTest/[2-9]/\", [\"/bucketForGlobTest/2/\"])\n\n    # all sub-directories of 2, recursively\n    assert_glob(\n        \"/bucketForGlobTest/2/**/*/\",\n        [\n            \"/bucketForGlobTest/2/a/\",\n            \"/bucketForGlobTest/2/a/b/\",\n            \"/bucketForGlobTest/2/a/b/a/\",\n            \"/bucketForGlobTest/2/a/b/c/\",\n            \"/bucketForGlobTest/2/a/d/\",\n            \"/bucketForGlobTest/2/a/d/c/\",\n        ],\n    )\n\n\ndef _glob_with_curly():\n    \"\"\"\n    scenario: pathname with the curly braces('{}')\n    expectation: returns only contains pathname of files\n    \"\"\"\n    assert_glob(\n        \"/bucketForGlobTest/{1,2}/\", [\"/bucketForGlobTest/1/\", \"/bucketForGlobTest/2/\"]\n    )\n\n    assert_glob(\"/bucketForGlobTest/{[2-4],[4-9]}/\", [\"/bucketForGlobTest/2/\"])\n\n    assert_glob(\n        \"/bucketForGlobTest/1/**/*.{json,msg}\",\n        [\n            \"/bucketForGlobTest/1/a/b/1.json\",\n            \"/bucketForGlobTest/1/a/b/c/1.json\",\n            \"/bucketForGlobTest/1/a/b/c/A.msg\",\n        ],\n    )\n\n\ndef test_glob(fs_setup):\n    _glob_with_common_wildcard()\n    _glob_with_recursive_pathname()\n    _glob_with_same_file_and_folder()\n    _glob_with_nested_pathname()\n    _glob_with_not_exists_dir()\n    _glob_with_dironly()\n    _glob_with_curly()\n\n\ndef test_escape():\n    assert glob.escape(\"*\") == \"[*]\"\n    assert glob.escape(\"**\") == \"[*][*]\"\n    assert glob.escape(\"?\") == \"[?]\"\n    assert glob.escape(\"[]\") == \"[[]]\"\n    assert glob.escape(\"{}\") == \"[{]}\"\n\n\ndef test_unescape():\n    assert glob.unescape(\"[*]\") == \"*\"\n    assert glob.unescape(\"[*][*]\") == \"**\"\n    assert glob.unescape(\"[?]\") == \"?\"\n    assert glob.unescape(\"[[]]\") == \"[]\"\n    assert glob.unescape(\"[{]}\") == \"{}\"\n\n\ndef test_globlize():\n    path_list = [\n        \"/bucketForGlobTest/1\",\n        \"/bucketForGlobTest/1/a\",\n        \"/bucketForGlobTest/1/a/b\",\n        \"/bucketForGlobTest/1/a/b/1.json\",\n        \"/bucketForGlobTest/1/a/b/c\",\n        \"/bucketForGlobTest/1/a/b/c/1.json\",\n        \"/bucketForGlobTest/1/a/b/c/A.msg\",\n        \"/bucketForGlobTest/2\",\n        \"/bucketForGlobTest/2/a\",\n        \"/bucketForGlobTest/2/a/b\",\n        \"/bucketForGlobTest/2/a/b/a\",\n        \"/bucketForGlobTest/2/a/b/a/1.json\",\n        \"/bucketForGlobTest/2/a/b/c\",\n        \"/bucketForGlobTest/2/a/b/c/1.json\",\n        \"/bucketForGlobTest/2/a/b/c/2.json\",\n        \"/bucketForGlobTest/2/a/d\",\n        \"/bucketForGlobTest/2/a/d/2.json\",\n        \"/bucketForGlobTest/2/a/d/c/1.json\",\n        \"/bucketForGlobTest/2/a/d/c\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert path_list == new_path_list\n\n    path_list = [\n        \"/bucketForGlobTest/1.json\",\n        \"/bucketForGlobTest/1/1.json\",\n        \"/bucketForGlobTest/1/a/1.json\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"/bucketForGlobTest/1{,/1,/a/1}.json\" == glob.globlize(path_list)\n    assert path_list == new_path_list\n\n    path_list = [\n        \"/bucketForGlobTest/b1.json\",\n        \"/bucketForGlobTest/1/1.json\",\n        \"/bucketForGlobTest/1/a/1.json\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"/bucketForGlobTest/{1/1,1/a/1,b1}.json\" == glob.globlize(path_list)\n    assert path_list == new_path_list\n\n    path_list = [\n        \"/bucketForGlobTest1/b1.json\",\n        \"/bucketForGlobTest/1/1.json\",\n        \"/bucketForGlobTest/1/a/1.json\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"/bucketForGlobTest{/1/1,/1/a/1,1/b1}.json\" == glob.globlize(path_list)\n    assert path_list == new_path_list\n\n    path_list = [\n        \"s3://bucketForGlobTest1/b1.json\",\n        \"s3://bucketForGlobTest/1/1.json\",\n        \"https://bucketForGlobTest/1/a/1.json\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert (\n        \"{https://bucketForGlobTest/1/a/1,s3://bucketForGlobTest/1/1,\"\n        \"s3://bucketForGlobTest1/b1}.json\" == glob.globlize(path_list)\n    )\n    assert path_list == new_path_list\n\n    path_list = [\n        \"/bucketForGlobTest/1.json\",\n        \"/bucketForGlobTest/1/1.json\",\n        \"/bucketForGlobTest/\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"/bucketForGlobTest/{,1.json,1/1.json}\" == glob.globlize(path_list)\n    assert sorted(path_list) == sorted(new_path_list)\n\n    path_list = [\"/bucketForGlobTest/1.json\", \"/bucketForGlobTest/1.json\"]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"/bucketForGlobTest/1.json\" == glob.globlize(path_list)\n    assert path_list == new_path_list\n\n    path_list = [\n        \"s3://bucketForGlobTest/a.nori/data\",\n        \"s3://bucketForGlobTest/b.nori/data\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"s3://bucketForGlobTest/{a.nori,b.nori}/data\" == glob.globlize(path_list)\n    assert sorted(path_list) == new_path_list\n\n    path_list = [\"https://baidu.com/file\", \"https://google.com/file\"]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"https://{baidu.com,google.com}/file\" == glob.globlize(path_list)\n    assert sorted(path_list) == new_path_list\n\n    path_list = [\n        \"https://a.com/file.txt\",\n        \"https://b.com/b.txt\",\n        \"https://c.com/file.txt\",\n    ]\n    new_path_list = list(fnmatch.filter(path_list, glob.globlize(path_list)))\n    assert \"https://{a.com/file,b.com/b,c.com/file}.txt\" == glob.globlize(path_list)\n    assert sorted(path_list) == new_path_list\n\n    path_list = [\n        \"https://a[*].com/file.txt\",\n        \"https://b.com/b.txt\",\n        \"https://c.com/file.txt\",\n    ]\n    assert \"https://{a*.com/file,b.com/b,c.com/file}.txt\" == glob.globlize(path_list)\n\n\ndef test_ungloblize():\n    test_glob = (\n        \"{s3://facerec-raw-data-oss/v3/test-structure/20201207/1,\"\n        \"s3://facerec-raw-data-oss/v3/test-structure/20201207/meta.msg,\"\n        \"s3://facerec-raw-data-oss/v3/test-structure/20201207/meta.msg.idx}\"\n    )\n    path_list = [\n        \"s3://facerec-raw-data-oss/v3/test-structure/20201207/1\",\n        \"s3://facerec-raw-data-oss/v3/test-structure/20201207/meta.msg\",\n        \"s3://facerec-raw-data-oss/v3/test-structure/20201207/meta.msg.idx\",\n    ]\n    assert path_list == glob.ungloblize(test_glob)\n\n    path_list = [\"/bucketForGlobTest/1.json\", \"/bucketForGlobTest/1.json\"]\n    assert [\"/bucketForGlobTest/1.json\"] == glob.ungloblize(glob.globlize(path_list))\n\n    path_list = [\n        \"s3://bucketForGlobTest/a.nori/data\",\n        \"s3://bucketForGlobTest/b.nori/data\",\n    ]\n    assert path_list == glob.ungloblize(glob.globlize(path_list))\n\n    path_list = [\"https://baidu.com/file\", \"https://google.com/file\"]\n    assert path_list == glob.ungloblize(glob.globlize(path_list))\n\n    test_glob = \"s3://bu-oss/a}b{a,b,c}.json\"\n    assert [\n        \"s3://bu-oss/a}ba.json\",\n        \"s3://bu-oss/a}bb.json\",\n        \"s3://bu-oss/a}bc.json\",\n    ] == glob.ungloblize(test_glob)\n\n    test_glob = \"s3://bu-oss/a,b{a,b,c}.json\"\n    assert [\n        \"s3://bu-oss/a,ba.json\",\n        \"s3://bu-oss/a,bb.json\",\n        \"s3://bu-oss/a,bc.json\",\n    ] == glob.ungloblize(test_glob)\n\n    test_glob = \"s3://bu-oss/a,b{a*,b,c}.json\"\n    assert [\n        \"s3://bu-oss/a,ba*.json\",\n        \"s3://bu-oss/a,bb.json\",\n        \"s3://bu-oss/a,bc.json\",\n    ] == glob.ungloblize(test_glob)\n\n    test_glob = \"s3://{empty,b}*Test{/,2/,3/sub/}{1/a/c,a/b}/2{.mp4,.jpg}/s\"\n    assert [\n        \"s3://empty*Test/1/a/c/2.mp4/s\",\n        \"s3://empty*Test/1/a/c/2.jpg/s\",\n        \"s3://empty*Test/a/b/2.mp4/s\",\n        \"s3://empty*Test/a/b/2.jpg/s\",\n        \"s3://empty*Test2/1/a/c/2.mp4/s\",\n        \"s3://empty*Test2/1/a/c/2.jpg/s\",\n        \"s3://empty*Test2/a/b/2.mp4/s\",\n        \"s3://empty*Test2/a/b/2.jpg/s\",\n        \"s3://empty*Test3/sub/1/a/c/2.mp4/s\",\n        \"s3://empty*Test3/sub/1/a/c/2.jpg/s\",\n        \"s3://empty*Test3/sub/a/b/2.mp4/s\",\n        \"s3://empty*Test3/sub/a/b/2.jpg/s\",\n        \"s3://b*Test/1/a/c/2.mp4/s\",\n        \"s3://b*Test/1/a/c/2.jpg/s\",\n        \"s3://b*Test/a/b/2.mp4/s\",\n        \"s3://b*Test/a/b/2.jpg/s\",\n        \"s3://b*Test2/1/a/c/2.mp4/s\",\n        \"s3://b*Test2/1/a/c/2.jpg/s\",\n        \"s3://b*Test2/a/b/2.mp4/s\",\n        \"s3://b*Test2/a/b/2.jpg/s\",\n        \"s3://b*Test3/sub/1/a/c/2.mp4/s\",\n        \"s3://b*Test3/sub/1/a/c/2.jpg/s\",\n        \"s3://b*Test3/sub/a/b/2.mp4/s\",\n        \"s3://b*Test3/sub/a/b/2.jpg/s\",\n    ] == glob.ungloblize(test_glob)\n\n    path_list = [\n        \"/bucketForGlobTest/1.json\",\n        \"/bucketForGlobTest/1/1.json\",\n        \"/bucketForGlobTest/\",\n    ]\n    assert sorted(path_list) == sorted(glob.ungloblize(glob.globlize(path_list)))\n\n    assert glob.ungloblize(\"s3://{a*{},b*}/1/2/*\") == [\"s3://a*[{],b*}/1/2/*\"]\n\n\ndef test_get_no_glob_root_path():\n    assert glob.get_non_glob_dir(\"/data/**/*.py\") == \"/data\"\n    assert glob.get_non_glob_dir(\"/**/*.py\") == \"/\"\n    assert glob.get_non_glob_dir(\"./**/*.py\") == \".\"\n    assert glob.get_non_glob_dir(\"**/*.py\") == \".\"\n    assert glob.get_non_glob_dir(\"s3://test/a*/**/*.py\") == \"s3://test\"\n\n\ndef test__iglob():\n    with pytest.raises(OSError):\n        list(glob._iglob(\"/root\", True, dironly=True, fs=glob.DEFAULT_FILESYSTEM_FUNC))\n\n\ndef test__glob2():\n    with pytest.raises(OSError):\n        list(glob._glob2(\"/root\", \"\", dironly=True, fs=glob.DEFAULT_FILESYSTEM_FUNC))\n\n\n# def test_has_magic_ignore_brace():\n"
