[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "citrusframework/citrus-simulator"
sha = "e08e45f519221ce6c8fd75dc31e6bfad5c04dc5e"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl simulator-spring-boot -Dtest=PaginationUtilTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl simulator-spring-boot -DtargetClasses=**.PaginationUtil  -DtargetTests=**.PaginationUtilTest  -DoutputFormats=XML"
coverage_report_path = "simulator-spring-boot/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "simulator-spring-boot/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 44.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "simulator-spring-boot/src/test/java/org/citrusframework/simulator/web/util/PaginationUtilTest.java"
focal_file_path = "simulator-spring-boot/src/main/java/org/citrusframework/simulator/web/util/PaginationUtil.java"
test_file_url = "https://github.com/citrusframework/citrus-simulator/blob/e08e45f519221ce6c8fd75dc31e6bfad5c04dc5e/simulator-spring-boot/src/test/java/org/citrusframework/simulator/web/util/PaginationUtilTest.java"
focal_file_url = "https://github.com/citrusframework/citrus-simulator/blob/e08e45f519221ce6c8fd75dc31e6bfad5c04dc5e/simulator-spring-boot/src/main/java/org/citrusframework/simulator/web/util/PaginationUtil.java"
first_commit_date = "2023-11-20"
last_commit_date = "2024-05-14"
test_file_content = "package org.citrusframework.simulator.web.util;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\n\nclass PaginationUtilTest {\n\n    @Test\n    void createPage() {\n        // Prepare test data\n        List<String> allObjects = Arrays.asList(\"Object1\", \"Object2\", \"Object3\", \"Object4\", \"Object5\");\n        Pageable pageable = PageRequest.of(1, 2); // Requesting the second page with a size of 2\n\n        Pageable mockPageable = mock(Pageable.class);\n        doReturn(2L).when(mockPageable).getOffset();\n        doReturn(2).when(mockPageable).getPageSize();\n        doReturn(pageable).when(mockPageable).previousOrFirst();\n\n        // Call the method to test\n        Page<String> page = PaginationUtil.createPage(allObjects, mockPageable);\n\n        // Assertions\n        assertEquals(2, page.getContent().size(), \"The page content size should be 2\");\n        assertEquals(\"Object3\", page.getContent().get(0), \"First object on the second page\");\n        assertEquals(\"Object4\", page.getContent().get(1), \"Second object on the second page\");\n        assertEquals(5, page.getTotalElements(), \"Total elements should be 5\");\n        assertEquals(3, page.getTotalPages(), \"Total pages should be 3\");\n    }\n\n    @Test\n    void unpaged() {\n        // Prepare test data\n        List<String> allObjects = Arrays.asList(\"Object1\", \"Object2\", \"Object3\", \"Object4\", \"Object5\");\n\n        // Call the method to test\n        Page<String> page = PaginationUtil.createPage(allObjects, Pageable.unpaged());\n\n        // Assertions\n        assertFalse(page.getPageable().isPaged(), \"Result contains all objects, not a page\");\n        assertEquals(allObjects, page.getContent(), \"The page should contain all objects at once\");\n        assertEquals(allObjects.size(), page.getTotalElements(), \"Total elements should match available elements\");\n        assertEquals(1, page.getTotalPages(), \"Total pages should be 1\");\n    }\n}"
