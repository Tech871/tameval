[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "NetApp/trident"
sha = "4d3b2b199cf35d9bee2ff4ea6bb4eb39d65304b3"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/network/network.go pkg/network/network_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/network/network.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 14.0
original_coverage = 100.0
mutation_kill_rate = 28.0
original_mutation_kill_rate = 81.0
covered_lines = [ 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 131,]
missed_lines = [ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 114,]

[input_info]
test_file_path = "pkg/network/network_test.go"
focal_file_path = "pkg/network/network.go"
test_file_url = "https://github.com/NetApp/trident/blob/4d3b2b199cf35d9bee2ff4ea6bb4eb39d65304b3/pkg/network/network_test.go"
focal_file_url = "https://github.com/NetApp/trident/blob/4d3b2b199cf35d9bee2ff4ea6bb4eb39d65304b3/pkg/network/network.go"
first_commit_date = "2025-01-13"
last_commit_date = "2025-02-11"
test_file_content = "// Copyright 2025 NetApp, Inc. All Rights Reserved.\n\npackage network\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\n\n\nfunc TestDNS1123Regexes_MatchString(t *testing.T) {\n\ttests := map[string]struct {\n\t\ts        string\n\t\texpected bool\n\t}{\n\t\t\"finds no match when supplied string is empty\": {\n\t\t\t\"\",\n\t\t\tfalse,\n\t\t},\n\t\t\"finds no match when supplied string doesn't match regex\": {\n\t\t\t\"pvc_2eff1a7e-679d-4fc6-892f-a6538cdbe278\",\n\t\t\tfalse,\n\t\t},\n\t\t\"finds no match when supplied string has invalid characters at beginning\": {\n\t\t\t\"-pvc_2eff1a7e-679d-4fc6-892f-a6538cdbe278\",\n\t\t\tfalse,\n\t\t},\n\t\t\"finds no match when supplied string has invalid characters at end\": {\n\t\t\t\"pvc-2eff1a7e-679d-4fc6-892f-a6538cdbe278-\",\n\t\t\tfalse,\n\t\t},\n\t\t\"finds match when supplied string matches regex\": {\n\t\t\t\"snap-2eff1a7e-679d-4fc6-892f-1nridmry3dj\",\n\t\t\ttrue,\n\t\t},\n\t}\n\n\tfor name, test := range tests {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tassert.Equal(t, test.expected, DNS1123DomainRegex.MatchString(test.s))\n\t\t\tassert.Equal(t, test.expected, DNS1123LabelRegex.MatchString(test.s))\n\t\t})\n\t}\n}\n\n\n\n\nfunc TestReplaceImageRegistry(t *testing.T) {\n\timage := ReplaceImageRegistry(\"netapp/trident:19.10.0\", \"\")\n\tassert.Equal(t, \"trident:19.10.0\", image)\n\n\timage = ReplaceImageRegistry(\"netapp/trident:19.10.0\", \"mydomain:5000\")\n\tassert.Equal(t, \"mydomain:5000/trident:19.10.0\", image)\n\n\timage = ReplaceImageRegistry(\"quay.io/k8scsi/csi-node-driver-registrar:v1.0.2\", \"mydomain:5000\")\n\tassert.Equal(t, \"mydomain:5000/csi-node-driver-registrar:v1.0.2\", image)\n}\n"
