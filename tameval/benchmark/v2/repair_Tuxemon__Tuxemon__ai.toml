[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/ai.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_ai.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.ai --unit-test tests.tuxemon.test_ai --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/ai.py --unit-test tests/tuxemon/test_ai.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 46.0
original_coverage = 49.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 4, 5, 6, 7, 8, 9, 11, 13, 14, 15, 16, 17, 25, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 81, 82, 83, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 115, 116, 117, 118, 127, 128, 129, 130, 131, 133, 134, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 164, 186, 187, 189, 190, 191, 192, 193, 195, 200, 201, 204, 205, 209, 221, 234, 235, 246, 267, 274, 275, 278, 279, 280, 281, 282, 284, 285, 288, 289, 294, 295, 296, 297, 301, 304, 305, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 334, 355, 359, 360, 363, 365, 369, 371, 375, 376, 377, 395, 396, 397, 398, 401, 402, 404, 405, 406, 408, 412, 414, 418, 419, 420, 436, 437, 441, 454, 460, 465, 530, 531, 564, 570, 576, 582, 592, 599, 603, 605, 608, 611, 616, 622, 628, 631, 682, 747,]
missed_lines = [ 119, 120, 121, 122, 123, 124, 135, 136, 137, 139, 144, 145, 147, 148, 206, 207, 213, 231, 241, 242, 243, 244, 251, 255, 257, 258, 262, 263, 265, 269, 270, 271, 286, 292, 299, 300, 321, 323, 324, 325, 327, 328, 330, 331, 332, 338, 339, 340, 342, 345, 347, 348, 349, 350, 351, 353, 361, 372, 373, 379, 380, 382, 383, 386, 389, 390, 391, 393, 415, 416, 422, 423, 425, 426, 429, 430, 431, 433, 438, 439, 446, 447, 448, 450, 451, 452, 456, 457, 458, 462, 463, 471, 475, 476, 477, 479, 480, 483, 485, 486, 489, 490, 493, 495, 504, 507, 511, 512, 513, 514, 516, 517, 518, 519, 522, 524, 527, 537, 538, 539, 540, 541, 551, 554, 558, 568, 574, 580, 586, 587, 590, 596, 606, 609, 614, 620, 626, 635, 636, 638, 639, 641, 642, 644, 645, 647, 648, 650, 653, 655, 656, 661, 662, 663, 668, 669, 670, 675, 676, 677, 679, 686, 687, 688, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 718, 719, 720, 721, 725, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 754, 755, 756, 757, 758, 760, 761, 768, 769, 770, 771, 772, 774, 776, 777, 778, 780, 781, 783, 784, 785, 786, 787, 788, 789, 791, 793, 794, 795, 797, 801, 808, 809, 810, 811, 812, 813, 815,]

[input_info]
test_file_path = "tests/tuxemon/test_ai.py"
focal_file_path = "tuxemon/ai.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_ai.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/ai.py"
first_commit_date = "2021-05-04"
last_commit_date = "2025-08-11"
test_file_content = "\nimport unittest\nfrom unittest.mock import MagicMock\n\nfrom tuxemon.ai import (\n    AIConfigLoader,\n    AIItems,\n    ItemEntry,\n    OpponentEvaluator,\n    TrainerAIDecisionStrategy,\n    WildAIDecisionStrategy,\n)\n\n\nclass TestOpponentEvaluator(unittest.TestCase):\n    def setUp(self):\n        self.mock_combat = MagicMock()\n        self.mock_user = MagicMock(\n            slug=\"rockitten\", current_hp=50, hp=100, level=10\n        )\n\n    def test_evaluate(self):\n        mock_opponent = MagicMock(current_hp=50, hp=100, level=10)\n\n        evaluator = OpponentEvaluator(\n            combat=self.mock_combat,\n            user=self.mock_user,\n            opponents=[mock_opponent],\n        )\n        evaluator.evaluate = MagicMock(\n            side_effect=lambda opponent: opponent.current_hp / opponent.hp\n        )\n\n        score = evaluator.evaluate(mock_opponent)\n\n    def test_get_best_target(self):\n        mock_opponent_1 = MagicMock(current_hp=20, hp=100, level=10)\n        mock_opponent_2 = MagicMock(current_hp=80, hp=100, level=10)\n\n        evaluator = OpponentEvaluator(\n            combat=self.mock_combat,\n            user=self.mock_user,\n            opponents=[mock_opponent_1, mock_opponent_2],\n        )\n        evaluator.evaluate = MagicMock(\n            side_effect=lambda opponent: opponent.current_hp / opponent.hp\n        )\n\n        best_target = evaluator.get_best_target()\n\n\nclass TestTrainerAIDecisionStrategy(unittest.TestCase):\n    def setUp(self):\n        self.mock_item = MagicMock(slug=\"potion\")\n        self.mock_ai = MagicMock()\n        self.mock_evaluator = MagicMock()\n        self.mock_tracker = MagicMock()\n\n    def test_make_decision_use_potion(self):\n        self.mock_ai.character.items.get_items = MagicMock(\n            return_value=[self.mock_item]\n        )\n        self.mock_ai.tracker.get_valid_moves = MagicMock(\n            return_value=[(MagicMock(), MagicMock())]\n        )\n\n        AIConfigLoader.get_ai_items = MagicMock(\n            return_value=AIItems(\n                items={\"potion\": ItemEntry(hp_range=(0.2, 0.8))}\n            )\n        )\n\n        self.mock_ai.monster.hp_ratio = 40 / 100\n\n        strategy = TrainerAIDecisionStrategy(\n            self.mock_evaluator, self.mock_tracker\n        )\n        strategy.make_decision(self.mock_ai)\n\n\n    def test_make_decision_select_move(self):\n        self.mock_tracker.get_valid_moves.return_value = [\n            (MagicMock(), MagicMock())\n        ]\n        self.mock_evaluator.get_best_target.return_value = MagicMock()\n\n        self.mock_tracker.evaluate_technique.return_value = 10.0\n\n        strategy = TrainerAIDecisionStrategy(\n            self.mock_evaluator, self.mock_tracker\n        )\n        strategy.make_decision(self.mock_ai)\n\n\n\nclass TestWildAIDecisionStrategy(unittest.TestCase):\n    def setUp(self):\n        self.mock_ai = MagicMock()\n        self.mock_evaluator = MagicMock()\n        self.mock_tracker = MagicMock()\n\n    def test_make_decision(self):\n        self.mock_tracker.get_valid_moves.return_value = [\n            (MagicMock(), MagicMock())\n        ]\n        self.mock_tracker.evaluate_technique.return_value = 5.0\n        self.mock_evaluator.get_best_target.return_value = MagicMock()\n\n        strategy = WildAIDecisionStrategy(\n            self.mock_evaluator, self.mock_tracker\n        )\n        strategy.make_decision(self.mock_ai)"
