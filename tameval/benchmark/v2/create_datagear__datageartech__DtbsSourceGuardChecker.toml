[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "datageartech/datagear"
sha = "0cde3799fad38f74d53c73e087b0e3296237e466"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl datagear-management -Dtest=DtbsSourceGuardCheckerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl datagear-management -DtargetClasses=**.DtbsSourceGuardChecker  -DtargetTests=**.DtbsSourceGuardCheckerTest  -DoutputFormats=XML"
coverage_report_path = "datagear-management/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "datagear-management/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 84.0
original_coverage = 84.0
mutation_kill_rate = 79.0
original_mutation_kill_rate = 79.0
covered_lines = [ 36, 40, 41, 63, 65, 67, 70, 71, 73, 75, 76, 78, 80, 85, 86, 87, 89, 94, 95, 96, 98, 103, 105, 107, 109, 111, 112, 114, 117, 118, 120, 121, 124, 126, 129, 130, 132, 134, 136, 138, 139, 141, 142, 144, 146, 147, 148, 150, 152, 154, 157, 162, 164, 166, 167, 169, 170, 172, 174, 175, 176, 178,]
missed_lines = [ 45, 50, 51, 68, 104, 106, 122, 128, 156, 158, 160, 182,]

[input_info]
test_file_path = "datagear-management/src/test/java/org/datagear/management/util/DtbsSourceGuardCheckerTest.java"
focal_file_path = "datagear-management/src/main/java/org/datagear/management/util/DtbsSourceGuardChecker.java"
test_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-management/src/test/java/org/datagear/management/util/DtbsSourceGuardCheckerTest.java"
focal_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-management/src/main/java/org/datagear/management/util/DtbsSourceGuardChecker.java"
first_commit_date = "2024-06-04"
last_commit_date = "2024-06-04"
test_file_content = "/*\n * Copyright 2018-present datagear.tech\n *\n * This file is part of DataGear.\n *\n * DataGear is free software: you can redistribute it and/or modify it under the terms of\n * the GNU Lesser General Public License as published by the Free Software Foundation,\n * either version 3 of the License, or (at your option) any later version.\n *\n * DataGear is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with DataGear.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n\npackage org.datagear.management.util;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.datagear.management.domain.DtbsSourceGuard;\nimport org.datagear.management.domain.DtbsSourceProperty;\nimport org.datagear.management.domain.DtbsSourcePropertyPattern;\nimport org.junit.Test;\n\n/**\n * {@linkplain DtbsSourceGuardChecker}单元测试类。\n * \n * @author datagear@163.com\n *\n */\npublic class DtbsSourceGuardCheckerTest\n{\n\tprivate DtbsSourceGuardChecker dtbsSourceGuardChecker = new DtbsSourceGuardChecker();\n\n\tprivate List<DtbsSourceProperty> dtbsSourceProperties = Arrays.asList(\n\t\t\tnew DtbsSourceProperty(\"firstProperty\", \"123\"),\n\t\t\tnew DtbsSourceProperty(\"secondProperty\", \"456\"));\n\n\t@Test\n\tpublic void isPermittedTest()\n\t{\n\t\t// 防护列表为空\n\t\t{\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Collections.emptyList();\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\t\t}\n\n\t\t// 全部允许\n\t\t{\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tnew DtbsSourceGuard(\"1\", \"1\", \"1\", \"*\", true));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\t\t}\n\n\t\t// 全部禁止\n\t\t{\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tnew DtbsSourceGuard(\"1\", \"1\", \"*\", false));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\")));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\t\t}\n\n\t\t// 仅允许指定URL\n\t\t{\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tnew DtbsSourceGuard(\"1\", \"1\", \"*192.168.1.1*\"), //\n\t\t\t\t\tnew DtbsSourceGuard(\"2\", \"2\", \"*\", false));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\")));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\t\t}\n\n\t\t// 仅禁止指定URL\n\t\t{\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tnew DtbsSourceGuard(\"1\", \"1\", \"*192.168.1.1*\", false), //\n\t\t\t\t\tnew DtbsSourceGuard(\"2\", \"2\", \"*\", true));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.2:3306/test\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\t\t}\n\n\t\t// 仅禁止指定用户名\n\t\t{\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tnew DtbsSourceGuard(\"1\", \"1\", \"*\", \"root\", false), //\n\t\t\t\t\tnew DtbsSourceGuard(\"2\", \"2\", \"*\", \"*\", true));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"dg\")));\n\t\t}\n\n\t\t// 仅禁止指定URL、且包含指定属性名\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard0 = new DtbsSourceGuard(\"1\", \"1\", \"*192.168.1.1*\", false);\n\t\t\tdtbsSourceGuard0.setPropertyPatterns(Arrays.asList(new DtbsSourcePropertyPattern(\"*first*\")));\n\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tdtbsSourceGuard0, //\n\t\t\t\t\tnew DtbsSourceGuard(\"2\", \"2\", \"*\", true));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\", dtbsSourceProperties)));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.2:3306/test\", \"root\", dtbsSourceProperties)));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\t\t}\n\n\t\t// 仅禁止指定URL、或者包含指定属性名\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard0 = new DtbsSourceGuard(\"1\", \"1\", \"*192.168.1.1*\", false);\n\n\t\t\tDtbsSourceGuard dtbsSourceGuard1 = new DtbsSourceGuard(\"2\", \"2\", \"*\", false);\n\t\t\tdtbsSourceGuard1.setPropertyPatterns(Arrays.asList(new DtbsSourcePropertyPattern(\"*first*\")));\n\n\t\t\tList<DtbsSourceGuard> dtbsSourceGuards = Arrays.asList( //\n\t\t\t\t\tdtbsSourceGuard0, //\n\t\t\t\t\tdtbsSourceGuard1, //\n\t\t\t\t\tnew DtbsSourceGuard(\"3\", \"3\", \"*\", true));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\", dtbsSourceProperties)));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\", \"root\")));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.2:3306/test\", \"root\", dtbsSourceProperties)));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPermitted(dtbsSourceGuards,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.2:3306/test\", \"root\",\n\t\t\t\t\t\t\tArrays.asList(new DtbsSourceProperty(\"secondProperty\", \"456\")))));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void isUrlMatchedTest()\n\t{\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*192.168.1.1*\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\")));\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\")));\n\t\t}\n\n\t\t// 忽略大小写\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*abc*\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"abc\")));\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard, new GuardEntity(\"aBc\")));\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"def\")));\n\t\t}\n\n\t\t// 模式为null\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", null);\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\")));\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\")));\n\t\t}\n\n\t\t// 模式为\"\"\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://192.168.1.1:3306/test\")));\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"jdbc:mysql://127.0.0.1:3306/test\")));\n\t\t}\n\n\t\t// 目标为null\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUrlMatched(dtbsSourceGuard, new GuardEntity((String) null)));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void isUserMatchedTest()\n\t{\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\", \"*root*\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"root\")));\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard, new GuardEntity(\"\", \"test\")));\n\t\t}\n\n\t\t// 忽略大小写\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\", \"*abc*\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard, new GuardEntity(\"\", \"abc\")));\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard, new GuardEntity(\"\", \"aBc\")));\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard, new GuardEntity(\"\", \"def\")));\n\t\t}\n\n\t\t// 模式为null\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\", null);\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"abc\")));\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"def\")));\n\t\t}\n\n\t\t// 模式为\"\"\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\");\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"abc\")));\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"def\")));\n\t\t}\n\n\t\t// 目标为null\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"\", \"\");\n\n\t\t\tassertTrue(\n\t\t\t\t\tthis.dtbsSourceGuardChecker.isUserMatched(dtbsSourceGuard, new GuardEntity((String) null, null)));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void isPropertiesMatchedTest()\n\t{\n\t\t// 空属性列表匹配模式\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setEmptyPropertyPatternsForAll(true);\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", dtbsSourceProperties)));\n\t\t}\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setEmptyPropertyPatternsForAll(false);\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\")));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", dtbsSourceProperties)));\n\t\t}\n\n\t\t// 目标属性列表为空\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setPropertyPatterns(Arrays.asList(new DtbsSourcePropertyPattern(\"*first*\")));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\")));\n\t\t}\n\n\t\t// 匹配任一属性名\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setPropertyPatterns(\n\t\t\t\t\tArrays.asList(new DtbsSourcePropertyPattern(\"*first*\"), new DtbsSourcePropertyPattern(\"*second*\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", dtbsSourceProperties)));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\",\n\t\t\t\t\t\t\tArrays.asList(new DtbsSourceProperty(\"firstProperty\", \"123\"),\n\t\t\t\t\t\t\t\t\tnew DtbsSourceProperty(\"werwerw23\", \"123\")))));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard, new GuardEntity(\"\", \"dg\", Arrays\n\t\t\t\t\t.asList(new DtbsSourceProperty(\"secondsProperty\", \"123\"), new DtbsSourceProperty(\"werwerw23\", \"123\")))));\n\t\t}\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setPropertyPatterns(\n\t\t\t\t\tArrays.asList(new DtbsSourcePropertyPattern(\"*first*\"), new DtbsSourcePropertyPattern(\"*second*\")));\n\t\t\tdtbsSourceGuard.setPropertiesMatchMode(DtbsSourceGuard.PROPERTIES_MATCH_MODE_ANY);\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", dtbsSourceProperties)));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\",\n\t\t\t\t\t\t\tArrays.asList(new DtbsSourceProperty(\"firstProperty\", \"123\")))));\n\t\t}\n\n\t\t// 匹配所有属性名\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setPropertyPatterns(\n\t\t\t\t\tArrays.asList(new DtbsSourcePropertyPattern(\"*first*\"), new DtbsSourcePropertyPattern(\"*second*\")));\n\t\t\tdtbsSourceGuard.setPropertiesMatchMode(DtbsSourceGuard.PROPERTIES_MATCH_MODE_ALL);\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", dtbsSourceProperties)));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", Arrays.asList(new DtbsSourceProperty(\"firstProperty\", \"123\")))));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", Arrays.asList(new DtbsSourceProperty(\"secondProperty\", \"123\")))));\n\t\t}\n\n\t\t// 匹配属性名、属性值\n\t\t{\n\t\t\tDtbsSourceGuard dtbsSourceGuard = new DtbsSourceGuard(\"1\", \"1\", \"*\", \"*\", true);\n\t\t\tdtbsSourceGuard.setPropertyPatterns(\n\t\t\t\t\tArrays.asList(new DtbsSourcePropertyPattern(\"*first*\", \"root\")));\n\n\t\t\tassertTrue(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", Arrays.asList(new DtbsSourceProperty(\"firstProperty\", \"root\")))));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", dtbsSourceProperties)));\n\n\t\t\tassertFalse(this.dtbsSourceGuardChecker.isPropertiesMatched(dtbsSourceGuard,\n\t\t\t\t\tnew GuardEntity(\"\", \"\", Arrays.asList(new DtbsSourceProperty(\"firstProperty\", \"123\")))));\n\t\t}\n\t}\n}\n"
