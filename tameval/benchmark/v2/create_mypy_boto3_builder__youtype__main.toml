[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "youtype/mypy_boto3_builder"
sha = "098fadc5ab3152e2c85008a592ac975328a9fca8"
bench_version = 1

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.mkdocs.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mypy_boto3_builder/main.py -m pytest -q --junit-xml=test_output.xml tests/test_main.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mypy_boto3_builder.main --unit-test tests.test_main --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mypy_boto3_builder/main.py --unit-test tests/test_main.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 50.0
original_coverage = 81.0
mutation_kill_rate = 68.0
original_mutation_kill_rate = 100.0
covered_lines = [ 6, 7, 8, 9, 11, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 43, 44, 47, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 87, 88, 89, 90, 91, 93, 96, 116, 146, 172, 189, 215,]
missed_lines = [ 80, 81, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 131, 142, 143, 150, 151, 177, 179, 180, 184, 186, 190, 191, 192, 193, 194, 196, 197, 198, 199, 203, 205, 206, 208, 209, 210, 212, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228,]

[input_info]
test_file_path = "tests/test_main.py"
focal_file_path = "mypy_boto3_builder/main.py"
test_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/tests/test_main.py"
focal_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/mypy_boto3_builder/main.py"
first_commit_date = "2020-01-23"
last_commit_date = "2025-02-27"
test_file_content = "import sys\nfrom unittest.mock import MagicMock, patch\n\nfrom mypy_boto3_builder.main import get_selected_service_names, main\nfrom mypy_boto3_builder.service_name import ServiceName\nfrom mypy_boto3_builder.utils.botocore_changelog import BotocoreChangelog\n\n\nclass TestMain:\n    def test_get_selected_service_names(self) -> None:\n        assert [\n            i.name\n            for i in get_selected_service_names(\n                [\"s3\", \"ec2\"],\n                [ServiceName(\"ec2\", \"EC2\"), ServiceName(\"other\", \"Other\")],\n            )\n        ] == [\"ec2\"]\n        assert [\n            i.name\n            for i in get_selected_service_names(\n                [\"all\", \"ec2\"],\n                [ServiceName(\"ec2\", \"EC2\"), ServiceName(\"other\", \"Other\")],\n            )\n        ] == [\"ec2\", \"other\"]\n        assert get_selected_service_names([\"s3\", \"ec2\"], []) == []\n        with patch.object(BotocoreChangelog, \"fetch_updated\") as fetch_updated_mock:\n            fetch_updated_mock.return_value = [\"ecs\"]\n            assert [\n                i.name\n                for i in get_selected_service_names(\n                    [\"updated\", \"ec2\"],\n                    [\n                        ServiceName(\"ec2\", \"EC2\"),\n                        ServiceName(\"ecs\", \"ECS\"),\n                        ServiceName(\"other\", \"Other\"),\n                    ],\n                )\n            ] == [\"ec2\", \"ecs\"]\n"
