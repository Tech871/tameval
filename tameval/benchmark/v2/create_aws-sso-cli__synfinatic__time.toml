[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "synfinatic/aws-sso-cli"
sha = "23193a6e70381add71c46ebf22c0a272b679f94e"
bench_version = 2

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/time/time.go internal/time/time_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/time/time.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 79.0
original_coverage = 100.0
mutation_kill_rate = 50.0
original_mutation_kill_rate = 56.0
covered_lines = [ 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44,]
missed_lines = [ 10, 11, 12, 13, 14, 15,]

[input_info]
test_file_path = "internal/time/time_test.go"
focal_file_path = "internal/time/time.go"
test_file_url = "https://github.com/synfinatic/aws-sso-cli/blob/23193a6e70381add71c46ebf22c0a272b679f94e/internal/time/time_test.go"
focal_file_url = "https://github.com/synfinatic/aws-sso-cli/blob/23193a6e70381add71c46ebf22c0a272b679f94e/internal/time/time.go"
first_commit_date = "2025-08-05"
last_commit_date = "2025-08-05"
test_file_content = "package time\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\nfunc TestTimeRemain(t *testing.T) {\n\tt.Parallel()\n\n\tx, e := TimeRemain(0, false)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \"Expired\", x)\n\n\td, _ := time.ParseDuration(\"5m1s\")\n\tfuture := time.Now().Add(d)\n\tx, e = TimeRemain(future.Unix(), true)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \"     5m\", x)\n\n\tx, e = TimeRemain(future.Unix(), false)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \"5m\", x)\n\n\td, _ = time.ParseDuration(\"5h5m1s\")\n\tfuture = time.Now().Add(d)\n\tx, e = TimeRemain(future.Unix(), true)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \" 5h  5m\", x)\n\n\tx, e = TimeRemain(future.Unix(), false)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \"5h5m\", x)\n\n\t// truncate down to < 1min\n\td, _ = time.ParseDuration(\"55s\")\n\tfuture = time.Now().Add(d)\n\tx, e = TimeRemain(future.Unix(), true)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \"   < 1m\", x)\n\n\td, _ = time.ParseDuration(\"25s\")\n\tfuture = time.Now().Add(d)\n\tx, e = TimeRemain(future.Unix(), true)\n\tassert.NoError(t, e)\n\tassert.Equal(t, \"   < 1m\", x)\n}\n"
