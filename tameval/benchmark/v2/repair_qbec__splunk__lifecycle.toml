[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "splunk/qbec"
sha = "57f20857bab8d25c968757a7e07bd83847c97e7b"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/cmd/lifecycle.go internal/cmd/lifecycle_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/cmd/lifecycle.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 46.0
mutation_kill_rate = nan
original_mutation_kill_rate = 27.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/cmd/lifecycle_test.go"
focal_file_path = "internal/cmd/lifecycle.go"
test_file_url = "https://github.com/splunk/qbec/blob/57f20857bab8d25c968757a7e07bd83847c97e7b/internal/cmd/lifecycle_test.go"
focal_file_url = "https://github.com/splunk/qbec/blob/57f20857bab8d25c968757a7e07bd83847c97e7b/internal/cmd/lifecycle.go"
first_commit_date = "2021-02-05"
last_commit_date = "2025-04-14"
test_file_content = "\n\npackage cmd\n\n\ntype cl struct {\n\terr    error\n\tcalled bool\n}\n\nfunc (c *cl) Close() error {\n\tc.called = true\n\treturn c.err\n}\n\nfunc TestCleanupSuccess(t *testing.T) {\n\tdefer func() { cleanup = &closers{} }()\n\tc := &cl{err: nil}\n\tRegisterCleanupTask(c)\n\terr := Close()\n\trequire.NoError(t, err)\n\tassert.True(t, c.called)\n}\n\nfunc TestCleanupError(t *testing.T) {\n\tdefer func() { cleanup = &closers{} }()\n\tc1 := &cl{err: nil}\n\tc2 := &cl{err: fmt.Errorf(\"foobar\")}\n\tc3 := &cl{err: fmt.Errorf(\"barbaz\")}\n\tc4 := &cl{err: nil}\n\tRegisterCleanupTask(c1)\n\tRegisterCleanupTask(c2)\n\tRegisterCleanupTask(c3)\n\tRegisterCleanupTask(c4)\n\terr := Close()\n\trequire.Error(t, err)\n\ta := assert.New(t)\n\ta.True(c1.called)\n\ta.True(c2.called)\n\ta.True(c3.called)\n\ta.True(c4.called)\n\ta.Equal(\"barbaz\", err.Error())\n}"
