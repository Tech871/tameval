[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "grafana/tempo-operator"
sha = "3b270ff092b32dbff273ff7e5972ea2ddddc2da9"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/manifests/oauthproxy/oauth_proxy.go internal/manifests/oauthproxy/oauth_proxy_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/manifests/oauthproxy/oauth_proxy.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 98.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/manifests/oauthproxy/oauth_proxy_test.go"
focal_file_path = "internal/manifests/oauthproxy/oauth_proxy.go"
test_file_url = "https://github.com/grafana/tempo-operator/blob/3b270ff092b32dbff273ff7e5972ea2ddddc2da9/internal/manifests/oauthproxy/oauth_proxy_test.go"
focal_file_url = "https://github.com/grafana/tempo-operator/blob/3b270ff092b32dbff273ff7e5972ea2ddddc2da9/internal/manifests/oauthproxy/oauth_proxy.go"
first_commit_date = "2024-05-14"
last_commit_date = "2025-02-10"
test_file_content = "package oauthproxy\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\n\t\"testing\"\n\n\troutev1 \"github.com/openshift/api/route/v1\"\n\t\"github.com/operator-framework/operator-lib/proxy\"\n\t\"github.com/stretchr/testify/assert\"\n\tv1 \"k8s.io/api/apps/v1\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\tnetworkingv1 \"k8s.io/api/networking/v1\"\n\t\"k8s.io/apimachinery/pkg/api/resource\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\tk8slabels \"k8s.io/apimachinery/pkg/labels\"\n\t\"k8s.io/apimachinery/pkg/util/intstr\"\n\t\"k8s.io/utils/ptr\"\n\n\tconfigv1alpha1 \"github.com/grafana/tempo-operator/api/config/v1alpha1\"\n\t\"github.com/grafana/tempo-operator/api/tempo/v1alpha1\"\n\t\"github.com/grafana/tempo-operator/internal/manifests/manifestutils\"\n\t\"github.com/grafana/tempo-operator/internal/manifests/memberlist\"\n\t\"github.com/grafana/tempo-operator/internal/manifests/naming\"\n)\n\nfunc TestOauthProxyContainer(t *testing.T) {\n\n\tcustomImage := \"custom_image/special_oauth_proxy:99\"\n\n\ttests := []struct {\n\t\tname          string\n\t\texpectedImage string\n\t\texpectedArgs  []string\n\t\ttempo         v1alpha1.TempoStack\n\t}{\n\t\t{\n\t\t\tname:          \" no SAR\",\n\t\t\texpectedImage: customImage,\n\t\t\texpectedArgs: []string{\n\t\t\t\t\"--cookie-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token\",\n\t\t\t\tfmt.Sprintf(\"--https-address=:%d\", manifestutils.OAuthProxyPort),\n\t\t\t\tfmt.Sprintf(\"--openshift-service-account=%s\", naming.Name(manifestutils.QueryFrontendComponentName, \"test\")),\n\t\t\t\t\"--provider=openshift\",\n\t\t\t\tfmt.Sprintf(\"--tls-cert=%s/tls.crt\", tlsProxyPath),\n\t\t\t\tfmt.Sprintf(\"--tls-key=%s/tls.key\", tlsProxyPath),\n\t\t\t\tfmt.Sprintf(\"--upstream=http://localhost:%d\", manifestutils.PortJaegerUI),\n\t\t\t\t\"--upstream-timeout=5s\",\n\t\t\t},\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tName:      \"test\",\n\t\t\t\t\tNamespace: \"project1\",\n\t\t\t\t},\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\t\t\tQueryFrontend: v1alpha1.TempoQueryFrontendSpec{\n\t\t\t\t\t\t\tJaegerQuery: v1alpha1.JaegerQuerySpec{\n\t\t\t\t\t\t\t\tAuthentication: &v1alpha1.JaegerQueryAuthenticationSpec{\n\t\t\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"SAR defined\",\n\t\t\texpectedImage: customImage,\n\t\t\texpectedArgs: []string{\n\t\t\t\t\"--cookie-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token\",\n\t\t\t\tfmt.Sprintf(\"--https-address=:%d\", manifestutils.OAuthProxyPort),\n\t\t\t\tfmt.Sprintf(\"--openshift-service-account=%s\", naming.Name(manifestutils.QueryFrontendComponentName, \"test2\")),\n\t\t\t\t\"--provider=openshift\",\n\t\t\t\tfmt.Sprintf(\"--tls-cert=%s/tls.crt\", tlsProxyPath),\n\t\t\t\tfmt.Sprintf(\"--tls-key=%s/tls.key\", tlsProxyPath),\n\t\t\t\tfmt.Sprintf(\"--upstream=http://localhost:%d\", manifestutils.PortJaegerUI),\n\t\t\t\t\"--upstream-timeout=5s\",\n\t\t\t\t\"--openshift-sar={\\\"namespace\\\":\\\"app-dev\\\",\\\"resource\\\":\\\"services\\\",\\\"resourceName\\\":\\\"proxy\\\",\\\"verb\\\":\\\"get\\\"}\",\n\t\t\t},\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tName:      \"test2\",\n\t\t\t\t\tNamespace: \"project1\",\n\t\t\t\t},\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\t\t\tQueryFrontend: v1alpha1.TempoQueryFrontendSpec{\n\t\t\t\t\t\t\tJaegerQuery: v1alpha1.JaegerQuerySpec{\n\t\t\t\t\t\t\t\tAuthentication: &v1alpha1.JaegerQueryAuthenticationSpec{\n\t\t\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t\t\t\tSAR:     \"{\\\"namespace\\\":\\\"app-dev\\\",\\\"resource\\\":\\\"services\\\",\\\"resourceName\\\":\\\"proxy\\\",\\\"verb\\\":\\\"get\\\"}\",\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tparams := manifestutils.Params{\n\t\t\t\tCtrlConfig: configv1alpha1.ProjectConfig{\n\t\t\t\t\tDefaultImages: configv1alpha1.ImagesSpec{\n\t\t\t\t\t\tOauthProxy: customImage,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\t\t\tparams.Tempo = test.tempo\n\t\t\treplicas := int32(1)\n\t\t\tcontainer := oAuthProxyContainer(params.Tempo.Name,\n\t\t\t\tnaming.Name(manifestutils.QueryFrontendComponentName, params.Tempo.Name),\n\t\t\t\tparams.Tempo.Spec.Template.QueryFrontend.JaegerQuery.Authentication,\n\t\t\t\ttime.Second*5,\n\t\t\t\tcustomImage,\n\t\t\t)\n\t\t\texpected := corev1.Container{\n\t\t\t\tImage: test.expectedImage,\n\t\t\t\tName:  \"oauth-proxy\",\n\t\t\t\tArgs:  test.expectedArgs,\n\t\t\t\tPorts: []corev1.ContainerPort{\n\t\t\t\t\t{\n\t\t\t\t\t\tContainerPort: manifestutils.OAuthProxyPort,\n\t\t\t\t\t\tName:          manifestutils.OAuthProxyPortName,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tVolumeMounts: []corev1.VolumeMount{{\n\t\t\t\t\tMountPath: tlsProxyPath,\n\t\t\t\t\tName:      getTLSSecretNameForFrontendService(test.tempo.Name),\n\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tResources: manifestutils.Resources(test.tempo, manifestutils.QueryFrontendComponentName, &replicas),\n\t\t\t\tEnv:       proxy.ReadProxyVarsFromEnv(),\n\t\t\t\tReadinessProbe: &corev1.Probe{\n\t\t\t\t\tProbeHandler: corev1.ProbeHandler{\n\t\t\t\t\t\tHTTPGet: &corev1.HTTPGetAction{\n\t\t\t\t\t\t\tScheme: corev1.URISchemeHTTPS,\n\t\t\t\t\t\t\tPath:   healthPath,\n\t\t\t\t\t\t\tPort:   intstr.FromString(manifestutils.OAuthProxyPortName),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tInitialDelaySeconds: oauthReadinessProbeInitialDelaySeconds,\n\t\t\t\t\tTimeoutSeconds:      oauthReadinessProbeTimeoutSeconds,\n\t\t\t\t},\n\t\t\t\tSecurityContext: manifestutils.TempoContainerSecurityContext(),\n\t\t\t}\n\t\t\tassert.Equal(t, expected, container)\n\t\t})\n\t}\n}\n\nfunc TestOAuthProxyServiceAccount(t *testing.T) {\n\ttempo := v1alpha1.TempoStack{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"testoauthsecret\",\n\t\t\tNamespace: \"project1\",\n\t\t},\n\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\tQueryFrontend: v1alpha1.TempoQueryFrontendSpec{\n\t\t\t\t\tJaegerQuery: v1alpha1.JaegerQuerySpec{\n\t\t\t\t\t\tAuthentication: &v1alpha1.JaegerQueryAuthenticationSpec{\n\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tservice := OAuthServiceAccount(manifestutils.Params{Tempo: tempo})\n\n\tassert.Equal(t,\n\t\tnaming.Name(manifestutils.QueryFrontendComponentName, \"testoauthsecret\"), service.Name)\n\n\tassert.Equal(t,\n\t\tmap[string]string{\n\t\t\t\"serviceaccounts.openshift.io/oauth-redirectreference.primary\": `{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"tempo-testoauthsecret-query-frontend\"}}`,\n\t\t}, service.Annotations)\n}\n\nfunc TestOAuthProxyServiceAccount_aws_sts(t *testing.T) {\n\ttempo := v1alpha1.TempoStack{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"testoauthsecret\",\n\t\t\tNamespace: \"project1\",\n\t\t},\n\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\tQueryFrontend: v1alpha1.TempoQueryFrontendSpec{\n\t\t\t\t\tJaegerQuery: v1alpha1.JaegerQuerySpec{\n\t\t\t\t\t\tAuthentication: &v1alpha1.JaegerQueryAuthenticationSpec{\n\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tservice := OAuthServiceAccount(manifestutils.Params{Tempo: tempo, StorageParams: manifestutils.StorageParams{S3: &manifestutils.S3{ShortLived: &manifestutils.S3ShortLived{RoleARN: \"foobar\"}}}})\n\n\tassert.Equal(t,\n\t\tnaming.Name(manifestutils.QueryFrontendComponentName, \"testoauthsecret\"), service.Name)\n\n\tassert.Equal(t,\n\t\tmap[string]string{\n\t\t\t\"serviceaccounts.openshift.io/oauth-redirectreference.primary\": `{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"tempo-testoauthsecret-query-frontend\"}}`,\n\t\t\t\"eks.amazonaws.com/audience\":                                   \"sts.amazonaws.com\",\n\t\t\t\"eks.amazonaws.com/role-arn\":                                   \"foobar\",\n\t\t}, service.Annotations)\n}\n\nfunc TestPatchDeploymentForOauthProxy(t *testing.T) {\n\tlabels := manifestutils.ComponentLabels(\"query-frontend\", \"test\")\n\tannotations := manifestutils.CommonAnnotations(\"\")\n\tdefaultImage := \"myrepo/oauth_proxy:1.1\"\n\n\tdep := &v1.Deployment{\n\t\tTypeMeta: metav1.TypeMeta{\n\t\t\tAPIVersion: v1.SchemeGroupVersion.String(),\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.Name(manifestutils.QueryFrontendComponentName, \"tempoi\"),\n\t\t\tNamespace: \"project1\",\n\t\t\tLabels:    labels,\n\t\t},\n\t\tSpec: v1.DeploymentSpec{\n\t\t\tReplicas: ptr.To(int32(1)),\n\t\t\tSelector: &metav1.LabelSelector{\n\t\t\t\tMatchLabels: labels,\n\t\t\t},\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tLabels:      k8slabels.Merge(labels, memberlist.GossipSelector),\n\t\t\t\t\tAnnotations: annotations,\n\t\t\t\t},\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tServiceAccountName: \"tempo-test-serviceaccount\",\n\t\t\t\t\tAffinity:           manifestutils.DefaultAffinity(labels),\n\t\t\t\t\tContainers: []corev1.Container{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  \"tempo\",\n\t\t\t\t\t\t\tImage: \"docker.io/grafana/tempo:1.5.0\",\n\t\t\t\t\t\t\tEnv:   []corev1.EnvVar{},\n\t\t\t\t\t\t\tArgs: []string{\n\t\t\t\t\t\t\t\t\"-target=query-frontend\",\n\t\t\t\t\t\t\t\t\"-config.file=/conf/tempo-query-frontend.yaml\",\n\t\t\t\t\t\t\t\t\"-mem-ballast-size-mbs=1024\",\n\t\t\t\t\t\t\t\t\"-log.level=info\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPorts: []corev1.ContainerPort{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:          manifestutils.HttpPortName,\n\t\t\t\t\t\t\t\t\tContainerPort: manifestutils.PortHTTPServer,\n\t\t\t\t\t\t\t\t\tProtocol:      corev1.ProtocolTCP,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:          manifestutils.GrpcPortName,\n\t\t\t\t\t\t\t\t\tContainerPort: manifestutils.PortGRPCServer,\n\t\t\t\t\t\t\t\t\tProtocol:      corev1.ProtocolTCP,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tReadinessProbe: manifestutils.TempoReadinessProbe(false),\n\t\t\t\t\t\t\tVolumeMounts: []corev1.VolumeMount{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:      manifestutils.ConfigVolumeName,\n\t\t\t\t\t\t\t\t\tMountPath: \"/conf\",\n\t\t\t\t\t\t\t\t\tReadOnly:  true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:      manifestutils.TmpStorageVolumeName,\n\t\t\t\t\t\t\t\t\tMountPath: manifestutils.TmpTempoStoragePath,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tResources: corev1.ResourceRequirements{\n\t\t\t\t\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(90, resource.BinarySI),\n\t\t\t\t\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(107374184, resource.BinarySI),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(27, resource.BinarySI),\n\t\t\t\t\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(32212256, resource.BinarySI),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tSecurityContext: manifestutils.TempoContainerSecurityContext(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tVolumes: []corev1.Volume{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: manifestutils.ConfigVolumeName,\n\t\t\t\t\t\t\tVolumeSource: corev1.VolumeSource{\n\t\t\t\t\t\t\t\tConfigMap: &corev1.ConfigMapVolumeSource{\n\t\t\t\t\t\t\t\t\tLocalObjectReference: corev1.LocalObjectReference{\n\t\t\t\t\t\t\t\t\t\tName: naming.Name(\"\", \"test\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: manifestutils.TmpStorageVolumeName,\n\t\t\t\t\t\t\tVolumeSource: corev1.VolumeSource{\n\t\t\t\t\t\t\t\tEmptyDir: &corev1.EmptyDirVolumeSource{},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\ttempo := v1alpha1.TempoStack{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"test3\",\n\t\t\tNamespace: \"project1\",\n\t\t},\n\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\tQueryFrontend: v1alpha1.TempoQueryFrontendSpec{\n\t\t\t\t\tJaegerQuery: v1alpha1.JaegerQuerySpec{\n\t\t\t\t\t\tAuthentication: &v1alpha1.JaegerQueryAuthenticationSpec{\n\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tparams := manifestutils.Params{\n\t\tCtrlConfig: configv1alpha1.ProjectConfig{\n\t\t\tDefaultImages: configv1alpha1.ImagesSpec{\n\t\t\t\tOauthProxy: defaultImage,\n\t\t\t},\n\t\t},\n\t\tTempo: tempo,\n\t}\n\n\tPatchDeploymentForOauthProxy(\n\t\tparams.Tempo.ObjectMeta,\n\t\tparams.CtrlConfig,\n\t\tparams.Tempo.Spec.Template.QueryFrontend.JaegerQuery.Authentication,\n\t\ttime.Second*5,\n\t\tparams.Tempo.Spec.Images,\n\t\tdep)\n\n\tassert.Equal(t, 2, len(dep.Spec.Template.Spec.Containers))\n\tassert.Equal(t, \"oauth-proxy\", dep.Spec.Template.Spec.Containers[1].Name)\n\tassert.Equal(t, naming.Name(manifestutils.QueryFrontendComponentName, tempo.Name), dep.Spec.Template.Spec.ServiceAccountName)\n\tassert.Equal(t, 3, len(dep.Spec.Template.Spec.Volumes))\n\n}\n\nfunc TestPatchStatefulSetForOauthProxy(t *testing.T) {\n\tlabels := manifestutils.ComponentLabels(\"query-frontend\", \"test\")\n\tannotations := manifestutils.CommonAnnotations(\"\")\n\tdefaultImage := \"myrepo/oauth_proxy:1.1\"\n\n\tstatefulSet := &v1.StatefulSet{\n\t\tTypeMeta: metav1.TypeMeta{\n\t\t\tAPIVersion: v1.SchemeGroupVersion.String(),\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.Name(manifestutils.QueryFrontendComponentName, \"tempoi\"),\n\t\t\tNamespace: \"project1\",\n\t\t\tLabels:    labels,\n\t\t},\n\t\tSpec: v1.StatefulSetSpec{\n\t\t\tReplicas: ptr.To(int32(1)),\n\t\t\tSelector: &metav1.LabelSelector{\n\t\t\t\tMatchLabels: labels,\n\t\t\t},\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tLabels:      k8slabels.Merge(labels, memberlist.GossipSelector),\n\t\t\t\t\tAnnotations: annotations,\n\t\t\t\t},\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tServiceAccountName: \"tempo-test-serviceaccount\",\n\t\t\t\t\tAffinity:           manifestutils.DefaultAffinity(labels),\n\t\t\t\t\tContainers: []corev1.Container{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  \"tempo\",\n\t\t\t\t\t\t\tImage: \"docker.io/grafana/tempo:1.5.0\",\n\t\t\t\t\t\t\tEnv:   []corev1.EnvVar{},\n\t\t\t\t\t\t\tArgs: []string{\n\t\t\t\t\t\t\t\t\"-target=query-frontend\",\n\t\t\t\t\t\t\t\t\"-config.file=/conf/tempo-query-frontend.yaml\",\n\t\t\t\t\t\t\t\t\"-mem-ballast-size-mbs=1024\",\n\t\t\t\t\t\t\t\t\"-log.level=info\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPorts: []corev1.ContainerPort{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:          manifestutils.HttpPortName,\n\t\t\t\t\t\t\t\t\tContainerPort: manifestutils.PortHTTPServer,\n\t\t\t\t\t\t\t\t\tProtocol:      corev1.ProtocolTCP,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:          manifestutils.GrpcPortName,\n\t\t\t\t\t\t\t\t\tContainerPort: manifestutils.PortGRPCServer,\n\t\t\t\t\t\t\t\t\tProtocol:      corev1.ProtocolTCP,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tReadinessProbe: manifestutils.TempoReadinessProbe(false),\n\t\t\t\t\t\t\tVolumeMounts: []corev1.VolumeMount{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:      manifestutils.ConfigVolumeName,\n\t\t\t\t\t\t\t\t\tMountPath: \"/conf\",\n\t\t\t\t\t\t\t\t\tReadOnly:  true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:      manifestutils.TmpStorageVolumeName,\n\t\t\t\t\t\t\t\t\tMountPath: manifestutils.TmpTempoStoragePath,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tResources: corev1.ResourceRequirements{\n\t\t\t\t\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(90, resource.BinarySI),\n\t\t\t\t\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(107374184, resource.BinarySI),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(27, resource.BinarySI),\n\t\t\t\t\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(32212256, resource.BinarySI),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tSecurityContext: manifestutils.TempoContainerSecurityContext(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tVolumes: []corev1.Volume{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: manifestutils.ConfigVolumeName,\n\t\t\t\t\t\t\tVolumeSource: corev1.VolumeSource{\n\t\t\t\t\t\t\t\tConfigMap: &corev1.ConfigMapVolumeSource{\n\t\t\t\t\t\t\t\t\tLocalObjectReference: corev1.LocalObjectReference{\n\t\t\t\t\t\t\t\t\t\tName: naming.Name(\"\", \"test\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: manifestutils.TmpStorageVolumeName,\n\t\t\t\t\t\t\tVolumeSource: corev1.VolumeSource{\n\t\t\t\t\t\t\t\tEmptyDir: &corev1.EmptyDirVolumeSource{},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\ttempo := v1alpha1.TempoStack{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"test3\",\n\t\t\tNamespace: \"project1\",\n\t\t},\n\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\tQueryFrontend: v1alpha1.TempoQueryFrontendSpec{\n\t\t\t\t\tJaegerQuery: v1alpha1.JaegerQuerySpec{\n\t\t\t\t\t\tAuthentication: &v1alpha1.JaegerQueryAuthenticationSpec{\n\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tparams := manifestutils.Params{\n\t\tCtrlConfig: configv1alpha1.ProjectConfig{\n\t\t\tDefaultImages: configv1alpha1.ImagesSpec{\n\t\t\t\tOauthProxy: defaultImage,\n\t\t\t},\n\t\t},\n\t\tTempo: tempo,\n\t}\n\n\tPatchStatefulSetForOauthProxy(\n\t\tparams.Tempo.ObjectMeta,\n\t\tparams.Tempo.Spec.Template.QueryFrontend.JaegerQuery.Authentication,\n\t\ttime.Second*5,\n\t\tparams.CtrlConfig,\n\t\tstatefulSet)\n\n\tassert.Equal(t, 2, len(statefulSet.Spec.Template.Spec.Containers))\n\tassert.Equal(t, \"oauth-proxy\", statefulSet.Spec.Template.Spec.Containers[1].Name)\n\tassert.Equal(t, \"tempo-test-serviceaccount\", statefulSet.Spec.Template.Spec.ServiceAccountName)\n\tassert.Equal(t, 3, len(statefulSet.Spec.Template.Spec.Volumes))\n\n}\n\nfunc TestPatchQueryFrontEndService(t *testing.T) {\n\tports := []corev1.ServicePort{\n\t\t{\n\t\t\tName:       manifestutils.JaegerGRPCQuery,\n\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\tPort:       manifestutils.PortJaegerGRPCQuery,\n\t\t\tTargetPort: intstr.FromString(manifestutils.JaegerGRPCQuery),\n\t\t},\n\t\t{\n\t\t\tName:       manifestutils.JaegerUIPortName,\n\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\tPort:       manifestutils.PortJaegerUI,\n\t\t\tTargetPort: intstr.FromString(manifestutils.JaegerUIPortName),\n\t\t},\n\t\t{\n\t\t\tName:       manifestutils.JaegerMetricsPortName,\n\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\tPort:       manifestutils.PortJaegerMetrics,\n\t\t\tTargetPort: intstr.FromString(manifestutils.JaegerMetricsPortName),\n\t\t},\n\t}\n\n\tservice := &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.Name(manifestutils.JaegerUIComponentName, \"test\"),\n\t\t\tNamespace: \"ns-test\",\n\t\t},\n\t\tSpec: corev1.ServiceSpec{\n\t\t\tPorts: ports,\n\t\t},\n\t}\n\n\tPatchQueryFrontEndService(service, \"test\")\n\n\tnewPorts := append([]corev1.ServicePort{}, ports...)\n\n\tassert.Equal(t, &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.Name(manifestutils.JaegerUIComponentName, \"test\"),\n\t\t\tNamespace: \"ns-test\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"service.beta.openshift.io/serving-cert-secret-name\": \"test-ui-oauth-proxy-tls\",\n\t\t\t},\n\t\t},\n\t\tSpec: corev1.ServiceSpec{\n\t\t\tPorts: append(newPorts, corev1.ServicePort{\n\t\t\t\tName:       manifestutils.OAuthProxyPortName,\n\t\t\t\tPort:       manifestutils.OAuthProxyPort,\n\t\t\t\tTargetPort: intstr.FromString(manifestutils.OAuthProxyPortName),\n\t\t\t}),\n\t\t},\n\t}, service)\n}\n\nfunc TestPatchRouteForOauthProxy(t *testing.T) {\n\troute := &routev1.Route{\n\t\tTypeMeta: metav1.TypeMeta{\n\t\t\tAPIVersion: networkingv1.SchemeGroupVersion.String(),\n\t\t\tKind:       \"Ingress\",\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.Name(manifestutils.JaegerUIComponentName, \"test\"),\n\t\t\tNamespace: \"test-ns\",\n\t\t},\n\t\tSpec: routev1.RouteSpec{\n\t\t\tHost: \"localhost\",\n\t\t\tTo: routev1.RouteTargetReference{\n\t\t\t\tKind: \"Service\",\n\t\t\t\tName: \"Xservice\",\n\t\t\t},\n\t\t\tPort: &routev1.RoutePort{\n\t\t\t\tTargetPort: intstr.FromString(\"targetPort\"),\n\t\t\t},\n\t\t\tTLS: &routev1.TLSConfig{Termination: routev1.TLSTerminationPassthrough},\n\t\t},\n\t}\n\tPatchRouteForOauthProxy(route)\n\n\tassert.Equal(t, &routev1.Route{\n\t\tTypeMeta: metav1.TypeMeta{\n\t\t\tAPIVersion: networkingv1.SchemeGroupVersion.String(),\n\t\t\tKind:       \"Ingress\",\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.Name(manifestutils.JaegerUIComponentName, \"test\"),\n\t\t\tNamespace: \"test-ns\",\n\t\t},\n\t\tSpec: routev1.RouteSpec{\n\t\t\tHost: \"localhost\",\n\t\t\tTo: routev1.RouteTargetReference{\n\t\t\t\tKind: \"Service\",\n\t\t\t\tName: \"Xservice\",\n\t\t\t},\n\t\t\tPort: &routev1.RoutePort{\n\t\t\t\tTargetPort: intstr.FromString(manifestutils.OAuthProxyPortName),\n\t\t\t},\n\t\t\tTLS: &routev1.TLSConfig{Termination: routev1.TLSTerminationReencrypt},\n\t\t},\n\t}, route)\n\n}\n\nfunc TestAddServiceAccountAnnotations(t *testing.T) {\n\tserviceAccounnt := &corev1.ServiceAccount{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.DefaultServiceAccountName(\"test\"),\n\t\t\tNamespace: \"test-ns\",\n\t\t},\n\t}\n\tAddServiceAccountAnnotations(serviceAccounnt, \"my-route\")\n\tassert.Equal(t, &corev1.ServiceAccount{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      naming.DefaultServiceAccountName(\"test\"),\n\t\t\tNamespace: \"test-ns\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\t\"serviceaccounts.openshift.io/oauth-redirectreference.primary\": `{\"kind\":\"OAuthRedirectReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"Route\",\"name\":\"my-route\"}}`,\n\t\t\t},\n\t\t},\n\t}, serviceAccounnt)\n}"
