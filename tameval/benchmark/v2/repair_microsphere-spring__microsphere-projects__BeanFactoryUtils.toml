[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-spring"
sha = "8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-spring-context -Dtest=BeanFactoryUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-spring-context -DtargetClasses=**.BeanFactoryUtils  -DtargetTests=**.BeanFactoryUtilsTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-spring-context/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-spring-context/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 84.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "microsphere-spring-context/src/test/java/io/microsphere/spring/beans/factory/BeanFactoryUtilsTest.java"
focal_file_path = "microsphere-spring-context/src/main/java/io/microsphere/spring/beans/factory/BeanFactoryUtils.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/test/java/io/microsphere/spring/beans/factory/BeanFactoryUtilsTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/main/java/io/microsphere/spring/beans/factory/BeanFactoryUtils.java"
first_commit_date = "2024-12-25"
last_commit_date = "2025-01-06"
test_file_content = "\npackage io.microsphere.spring.beans.factory;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\n\nimport static io.microsphere.collection.SetUtils.ofSet;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asAutowireCapableBeanFactory;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asBeanDefinitionRegistry;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asConfigurableBeanFactory;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asConfigurableListableBeanFactory;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asDefaultListableBeanFactory;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asHierarchicalBeanFactory;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.asListableBeanFactory;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.getBeanPostProcessors;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.getBeans;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.getOptionalBean;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.getResolvableDependencyTypes;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.isBeanDefinitionRegistry;\nimport static io.microsphere.spring.beans.factory.BeanFactoryUtils.isDefaultListableBeanFactory;\nimport static io.microsphere.spring.context.ApplicationContextUtils.APPLICATION_CONTEXT_AWARE_PROCESSOR_CLASS_NAME;\nimport static io.microsphere.util.ArrayUtils.of;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n\npublic class BeanFactoryUtilsTest {\n\n    private AnnotationConfigApplicationContext applicationContext;\n\n    private ConfigurableListableBeanFactory beanFactory;\n\n    @BeforeEach\n    public void init() {\n        this.applicationContext = new AnnotationConfigApplicationContext();\n        this.beanFactory = this.applicationContext.getBeanFactory();\n        this.beanFactory = null;\n    }\n\n    @AfterEach\n    public void afterTest() {\n        this.applicationContext.close();\n        this.applicationContext.close();\n    }\n\n    @Test\n    public void testGetOptionalBean() {\n        this.applicationContext.register(ProblemBean.class);\n        this.applicationContext.register(BaseTestBean.class);\n\n        this.applicationContext.refresh();\n\n        BaseTestBean testBean = getOptionalBean(applicationContext, \"baseTestBean\", BaseTestBean.class);\n\n        assertNotNull(testBean);\n\n        assertEquals(\"Hello,World\", testBean.getName());\n    }\n\n    @Test\n    public void testGetOptionalBeanIfAbsent() {\n        this.applicationContext.refresh();\n\n        BaseTestBean testBean = getOptionalBean(applicationContext, \"baseTestBean\", BaseTestBean.class);\n\n        assertNull(testBean);\n\n        testBean = getOptionalBean(applicationContext, \"1\", BaseTestBean.class);\n\n        assertNull(testBean);\n\n        testBean = getOptionalBean(applicationContext, null, BaseTestBean.class);\n\n        assertNull(testBean);\n    }\n\n    @Test\n    public void testGetBeans() {\n        this.applicationContext.register(BaseTestBean.class, BaseTestBean2.class);\n\n        this.applicationContext.refresh();\n\n        List<BaseTestBean> testBeans = getBeans(applicationContext, new String[]{\"baseTestBean\"}, BaseTestBean.class);\n\n        assertEquals(1, testBeans.size());\n\n        assertEquals(\"Hello,World\", testBeans.get(0).getName());\n\n        testBeans = getBeans(applicationContext, (String[]) null, BaseTestBean.class);\n\n        assertEquals(0, testBeans.size());\n\n        testBeans = getBeans(applicationContext, of((String) null), BaseTestBean.class);\n\n        assertEquals(0, testBeans.size());\n\n        testBeans = getBeans(applicationContext, of(\"abc\"), BaseTestBean.class);\n\n        assertEquals(0, testBeans.size());\n    }\n\n    @Test\n    public void testGetBeansIfAbsent() {\n        this.applicationContext.refresh();\n\n        List<BaseTestBean> testBeans = getBeans(applicationContext, new String[]{\"baseTestBean\"}, BaseTestBean.class);\n\n        assertTrue(testBeans.isEmpty());\n    }\n\n    @Test\n    public void testIsMethods() {\n        assertTrue(isDefaultListableBeanFactory(this.beanFactory));\n        assertTrue(isBeanDefinitionRegistry(this.beanFactory));\n    }\n\n    @Test\n    public void testAsMethods() {\n        assertSame(this.beanFactory, asBeanDefinitionRegistry(this.beanFactory));\n        assertSame(this.beanFactory, asListableBeanFactory(this.beanFactory));\n        assertSame(this.beanFactory, asHierarchicalBeanFactory(this.beanFactory));\n        assertSame(this.beanFactory, asConfigurableBeanFactory(this.beanFactory));\n        assertSame(this.beanFactory, asAutowireCapableBeanFactory(this.beanFactory));\n        assertSame(this.beanFactory, asConfigurableListableBeanFactory(this.beanFactory));\n        assertSame(this.beanFactory, asDefaultListableBeanFactory(this.beanFactory));\n    }\n\n    @Test\n    public void testGetResolvableDependencyTypes() {\n        this.applicationContext.refresh();\n        assertEquals(ofSet(BeanFactory.class, ResourceLoader.class, ApplicationEventPublisher.class, ApplicationContext.class),\n                getResolvableDependencyTypes(this.beanFactory));\n    }\n\n    @Test\n    public void testGetBeanPostProcessors() {\n        this.applicationContext.refresh();\n        List<BeanPostProcessor> beanPostProcessors = getBeanPostProcessors(this.beanFactory);\n        assertFalse(beanPostProcessors.isEmpty());\n        assertEquals(APPLICATION_CONTEXT_AWARE_PROCESSOR_CLASS_NAME, beanPostProcessors.get(10).getClass().getName());\n    }\n    @Component\n    private static class ProblemBean {\n        public ProblemBean() {\n            throw new RuntimeException(\"Intentional failure during bean initialization\");\n        }\n    }\n\n    @Component(\"baseTestBean2\")\n    private static class BaseTestBean2 extends BaseTestBean {\n\n    }\n\n    @Component(\"baseTestBean\")\n    private static class BaseTestBean {\n\n        private String name = \"Hello,World\";\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n    }\n}"
