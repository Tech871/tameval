[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "grafana/tempo-operator"
sha = "3b270ff092b32dbff273ff7e5972ea2ddddc2da9"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/manifests/manifestutils/resources.go internal/manifests/manifestutils/resources_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/manifests/manifestutils/resources.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/manifests/manifestutils/resources_test.go"
focal_file_path = "internal/manifests/manifestutils/resources.go"
test_file_url = "https://github.com/grafana/tempo-operator/blob/3b270ff092b32dbff273ff7e5972ea2ddddc2da9/internal/manifests/manifestutils/resources_test.go"
focal_file_url = "https://github.com/grafana/tempo-operator/blob/3b270ff092b32dbff273ff7e5972ea2ddddc2da9/internal/manifests/manifestutils/resources.go"
first_commit_date = "2022-11-26"
last_commit_date = "2025-02-10"
test_file_content = "package manifestutils\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/api/resource\"\n\t\"k8s.io/utils/ptr\"\n\n\t\"github.com/grafana/tempo-operator/apis/tempo/v1alpha1\"\n)\n\nfunc TestResourceSum(t *testing.T) {\n\tcpu := float32(0)\n\tmem := float32(0.0)\n\tfor _, r := range resourcesMapNoGateway {\n\t\tmem += r.memory\n\t\tcpu += r.cpu\n\t}\n\tassert.InDelta(t, float32(1.0), cpu, 0.01)\n\tassert.InDelta(t, float32(1.0), mem, 0.01)\n}\n\nfunc TestResourceWithGatewaySum(t *testing.T) {\n\tcpu := float32(0)\n\tmem := float32(0.0)\n\tfor _, r := range resourcesMapWithGateway {\n\t\tmem += r.memory\n\t\tcpu += r.cpu\n\t}\n\tassert.InDelta(t, float32(1.0), cpu, 0.01)\n\tassert.InDelta(t, float32(1.0), mem, 0.01)\n}\n\nfunc TestResources(t *testing.T) {\n\ttests := []struct {\n\t\tresources corev1.ResourceRequirements\n\t\tname      string\n\t\ttempo     v1alpha1.TempoStack\n\t\treplicas  *int32\n\t}{\n\t\t{\n\t\t\tname: \"resources not set\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{},\n\t\t},\n\t\t{\n\t\t\tname: \"cpu, memory resources set\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tResources: v1alpha1.Resources{\n\t\t\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\t\t\tLimits: map[corev1.ResourceName]resource.Quantity{\n\t\t\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{\n\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(270, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(257698032, resource.BinarySI),\n\t\t\t\t},\n\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(81, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(77309416, resource.BinarySI),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"cpu, memory resources set with replicas\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tResources: v1alpha1.Resources{\n\t\t\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\t\t\tLimits: map[corev1.ResourceName]resource.Quantity{\n\t\t\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\t\t\tCompactor: v1alpha1.TempoComponentSpec{\n\t\t\t\t\t\t\tReplicas: ptr.To(int32(2)),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{\n\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(135, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(128849016, resource.BinarySI),\n\t\t\t\t},\n\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(40, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(38654708, resource.BinarySI),\n\t\t\t\t},\n\t\t\t},\n\t\t\treplicas: ptr.To(int32(2)),\n\t\t},\n\t\t{\n\t\t\tname: \"cpu, memory resources set and gateway enable\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\t\t\tGateway: v1alpha1.TempoGatewaySpec{\n\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tResources: v1alpha1.Resources{\n\t\t\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\t\t\tLimits: map[corev1.ResourceName]resource.Quantity{\n\t\t\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{\n\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(260, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(236223200, resource.BinarySI),\n\t\t\t\t},\n\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(78, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(70866960, resource.BinarySI),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"cpu, memory resources set with replicas and gateway enable\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\t\t\tGateway: v1alpha1.TempoGatewaySpec{\n\t\t\t\t\t\t\tEnabled: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tCompactor: v1alpha1.TempoComponentSpec{\n\t\t\t\t\t\t\tReplicas: ptr.To(int32(2)),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tResources: v1alpha1.Resources{\n\t\t\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\t\t\tLimits: map[corev1.ResourceName]resource.Quantity{\n\t\t\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{\n\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(130, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(118111600, resource.BinarySI),\n\t\t\t\t},\n\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(39, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(35433480, resource.BinarySI),\n\t\t\t\t},\n\t\t\t},\n\t\t\treplicas: ptr.To(int32(2)),\n\t\t},\n\t\t{\n\t\t\tname: \"missing cpu resources\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tResources: v1alpha1.Resources{\n\t\t\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\t\t\tLimits: map[corev1.ResourceName]resource.Quantity{\n\t\t\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{\n\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(257698032, resource.BinarySI),\n\t\t\t\t},\n\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(77309416, resource.BinarySI),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"missing memory resources\",\n\t\t\ttempo: v1alpha1.TempoStack{\n\t\t\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\t\t\tResources: v1alpha1.Resources{\n\t\t\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\t\t\tLimits: map[corev1.ResourceName]resource.Quantity{\n\t\t\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tresources: corev1.ResourceRequirements{\n\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(270, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(257698032, resource.BinarySI),\n\t\t\t\t},\n\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(81, resource.BinarySI),\n\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(77309416, resource.BinarySI),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tresources := Resources(test.tempo, \"distributor\", test.replicas)\n\t\t\tassert.Equal(t, test.resources, resources)\n\t\t})\n\t}\n}"
