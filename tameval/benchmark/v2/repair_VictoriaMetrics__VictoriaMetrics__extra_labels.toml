[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24.1"

[repo_info]
repository = "VictoriaMetrics/VictoriaMetrics"
sha = "099b2fdba79582dcc1c32a604b587deaf32270db"

[run_info]
docker_image = "golang:1.24.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out lib/protoparser/protoparserutil/extra_labels.go lib/protoparser/protoparserutil/extra_labels_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting lib/protoparser/protoparserutil/extra_labels.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 90.0
original_coverage = 90.0
mutation_kill_rate = 0
original_mutation_kill_rate = 75.0
covered_lines = [ 15, 16, 20, 21, 22, 26, 27, 28, 29, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81,]
missed_lines = [ 17, 18, 19, 23, 24, 25,]

[input_info]
test_file_path = "lib/protoparser/protoparserutil/extra_labels_test.go"
focal_file_path = "lib/protoparser/protoparserutil/extra_labels.go"
test_file_url = "https://github.com/VictoriaMetrics/VictoriaMetrics/blob/099b2fdba79582dcc1c32a604b587deaf32270db/lib/protoparser/protoparserutil/extra_labels_test.go"
focal_file_url = "https://github.com/VictoriaMetrics/VictoriaMetrics/blob/099b2fdba79582dcc1c32a604b587deaf32270db/lib/protoparser/protoparserutil/extra_labels.go"
first_commit_date = "2025-03-18"
last_commit_date = "2025-03-18"
test_file_content = "package protoparserutil\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sort\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/VictoriaMetrics/VictoriaMetrics/lib/prompbmarshal\"\n)\n\nfunc TestGetExtraLabelsSuccess(t *testing.T) {\n\tf := func(requestURI, expectedLabels string) {\n\t\tt.Helper()\n\t\tfullURL := \"http:\n\t\treq, err := http.NewRequest(http.MethodGet, fullURL, nil)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"cannot parse %q: %s\", fullURL, err)\n\t\t}\n\t\textraLabels, err := GetExtraLabels(req)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"unexpected error: %s\", err)\n\t\t}\n\t\tlabelsStr := getLabelsString(extraLabels)\n\t\tif labelsStr != expectedLabels {\n\t\t\tt.Fatalf(\"unexpected labels;\\ngot\\n%s\\nwant\\n%s\", labelsStr, expectedLabels)\n\t\t}\n\t}\n\tf(\"\", `{}`)\n\tf(\"/foo/bar\", `{}`)\n\tf(\"/foo?extra_label=foo=bar\", `{foo=\"bar\"}`)\n\tf(\"/foo?extra_label=a=x&extra_label=b=y\", `{a=\"x\",b=\"y\"}`)\n\tf(\"/metrics/job/foo\", `{job=\"foo\"}`)\n\tf(\"/metrics/job/foo?extra_label=a=b\", `{a=\"b\",job=\"foo\"}`)\n\tf(\"/metrics/job/foo/b/bcd?extra_label=a=b&extra_label=qwe=rty\", `{a=\"b\",b=\"bcd\",job=\"foo\",qwe=\"rty\"}`)\n\tf(\"/metrics/job/titan/name/%CE%A0%CF%81%CE%BF%CE%BC%CE%B7%CE%B8%CE%B5%CF%8D%CF%82\", `{job=\"titan\",name=\"Προμηθεύς\"}`)\n\tf(\"/metrics/job/titan/name@base64/zqDPgc6_zrzOt864zrXPjc-C\", `{job=\"titan\",name=\"Προμηθεύς\"}`)\n}\n\nfunc TestGetPushgatewayLabelsSuccess(t *testing.T) {\n\tf := func(path, expectedLabels string) {\n\t\tt.Helper()\n\t\tlabels, err := getPushgatewayLabels(path)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"unexpected error in getPushgatewayLabels(%q): %s\", path, err)\n\t\t}\n\t\tlabelsStr := getLabelsString(labels)\n\t\tif labelsStr != expectedLabels {\n\t\t\tt.Fatalf(\"unexpected labels returned from getPushgatewayLabels(%q);\\ngot\\n%s\\nwant\\n%s\", path, labelsStr, expectedLabels)\n\t\t}\n\t}\n\tf(\"\", \"{}\")\n\tf(\"/foo/bar\", \"{}\")\n\tf(\"/metrics/foo/bar\", \"{}\")\n\tf(\"/metrics/job\", \"{}\")\n\tf(\"/metrics/job@base64\", \"{}\")\n\tf(\"/metrics/job/\", \"{}\")\n\tf(\"/metrics/job/foo\", `{job=\"foo\"}`)\n\tf(\"/foo/metrics/job/foo\", `{job=\"foo\"}`)\n\tf(\"/api/v1/import/prometheus/metrics/job/foo\", `{job=\"foo\"}`)\n\tf(\"/foo/metrics/job@base64/Zm9v\", `{job=\"foo\"}`)\n\tf(\"/foo/metrics/job/x/a/foo/aaa/bar\", `{a=\"foo\",aaa=\"bar\",job=\"x\"}`)\n\tf(\"/foo/metrics/job/x/a@base64/Zm9v\", `{a=\"foo\",job=\"x\"}`)\n\tf(\"/metrics/job/test/region@base64/YXotc291dGhlYXN0LTEtZjAxL3d6eS1hei1zb3V0aGVhc3QtMQ\", `{job=\"test\",region=\"az-southeast-1-f01/wzy-az-southeast-1\"}`)\n\tf(\"/metrics/job/test/empty@base64/=\", `{job=\"test\"}`)\n\tf(\"/metrics/job/test/test@base64/PT0vPT0\", `{job=\"test\",test=\"==/==\"}`)\n}\n\nfunc TestGetPushgatewayLabelsFailure(t *testing.T) {\n\tf := func(path string) {\n\t\tt.Helper()\n\t\tlabels, err := getPushgatewayLabels(path)\n\t\tif err == nil {\n\t\t\tlabelsStr := getLabelsString(labels)\n\t\t\tt.Fatalf(\"expecting non-nil error for getPushgatewayLabels(%q); got labels %s\", path, labelsStr)\n\t\t}\n\t}\n\tf(\"/metrics/job/foo/bar\")\n\tf(\"/metrics/job@base64/#$%\")\n\tf(\"/metrics/job/foo/bar@base64/#$%\")\n}\n\nfunc getLabelsString(labels []prompbmarshal.Label) string {\n\ta := make([]string, len(labels))\n\tfor i, label := range labels {\n\t\ta[i] = fmt.Sprintf(\"%s=%q\", label.Name, label.Value)\n\t}\n\tsort.Strings(a)\n\treturn \"{\" + strings.Join(a, \",\") + \"}\"\n}"
