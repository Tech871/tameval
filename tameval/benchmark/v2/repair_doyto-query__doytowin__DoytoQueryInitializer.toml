[meta]
task = "repair"
scenario = "repair_duplicate_entity"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "doytowin/doyto-query"
sha = "27754a721c6c437edcb2a8936d4c4a6212125d03"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl doyto-query-web-common -Dtest=DoytoQueryInitializerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl doyto-query-web-common -DtargetClasses=**.DoytoQueryInitializer  -DtargetTests=**.DoytoQueryInitializerTest  -DoutputFormats=XML"
coverage_report_path = "doyto-query-web-common/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "doyto-query-web-common/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 89.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "doyto-query-web-common/src/test/java/win/doyto/query/web/config/DoytoQueryInitializerTest.java"
focal_file_path = "doyto-query-web-common/src/main/java/win/doyto/query/web/config/DoytoQueryInitializer.java"
test_file_url = "https://github.com/doytowin/doyto-query/blob/27754a721c6c437edcb2a8936d4c4a6212125d03/doyto-query-web-common/src/test/java/win/doyto/query/web/config/DoytoQueryInitializerTest.java"
focal_file_url = "https://github.com/doytowin/doyto-query/blob/27754a721c6c437edcb2a8936d4c4a6212125d03/doyto-query-web-common/src/main/java/win/doyto/query/web/config/DoytoQueryInitializer.java"
first_commit_date = "2022-04-06"
last_commit_date = "2025-03-07"
test_file_content = "\n\npackage win.doyto.query.web.config;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.mock.env.MockEnvironment;\nimport win.doyto.query.config.GlobalConfiguration;\nimport win.doyto.query.core.Dialect;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static win.doyto.query.web.config.DoytoQueryInitializer.key;\n\nclass DoytoQueryInitializerTest {\n\n    @BeforeEach\n    void setUp() {\n        DoytoQueryInitializer doytoQueryInitializer = new DoytoQueryInitializer();\n        ConfigurableApplicationContext context = new GenericApplicationContext() {\n            @Override\n            protected ConfigurableEnvironment createEnvironment() {\n                return new MockEnvironment()\n                        .withProperty(key(\"table-format\"), \"sys_%s\")\n                        .withProperty(key(\"join-table-format\"), \"t_%s_and_%s\")\n                        .withProperty(key(\"join-id-format\"), \"%sId\");\n            }\n        };\n        doytoQueryInitializer.initialize(context);\n    }\n\n    @Test\n    void initialize() {\n        GlobalConfiguration globalConfiguration = GlobalConfiguration.instance();\n        assertTrue(globalConfiguration.isMapCamelCaseToUnderscore());\n        assertTrue(globalConfiguration.isIgnoreCacheException());\n        assertTrue(globalConfiguration.getDialect() instanceof Dialect);\n        assertEquals(\"sys_%s\", globalConfiguration.getTableFormat());\n        assertEquals(\"t_%s_and_%s\", globalConfiguration.getJoinTableFormat());\n        assertEquals(\"%sId\", globalConfiguration.getJoinIdFormat());\n    }\n\n    @Test\n    void initialize() {\n        GlobalConfiguration globalConfiguration = GlobalConfiguration.instance();\n        assertTrue(globalConfiguration.isMapCamelCaseToUnderscore());\n        assertTrue(globalConfiguration.isIgnoreCacheException());\n        assertTrue(globalConfiguration.getDialect() instanceof Dialect);\n        assertEquals(\"sys_%s\", globalConfiguration.getTableFormat());\n        assertEquals(\"t_%s_and_%s\", globalConfiguration.getJoinTableFormat());\n        assertEquals(\"%sId\", globalConfiguration.getJoinIdFormat());\n    }\n\n    @Test\n    void newDialect() {\n        DoytoQueryInitializer doytoQueryInitializer = new DoytoQueryInitializer();\n        assertThrows(ClassNotFoundException.class,\n                     () -> doytoQueryInitializer.newDialect(\"fake.DialectClass\"));\n    }\n\n    @Test\n    void newDialect() {\n        DoytoQueryInitializer doytoQueryInitializer = new DoytoQueryInitializer();\n        assertThrows(ClassNotFoundException.class,\n                     () -> doytoQueryInitializer.newDialect(\"fake.DialectClass\"));\n    }\n\n    @Test\n    void testSetPageNumber() {\n        GlobalConfiguration globalConfiguration = GlobalConfiguration.instance();\n        assertEquals(0, (int) globalConfiguration.getStartPageNumberAdjuster().apply(1));\n        assertEquals(0, (int) globalConfiguration.getStartPageNumberAdjuster().apply(0));\n        assertEquals(7, (int) globalConfiguration.getStartPageNumberAdjuster().apply(8));\n    }\n\n    @Test\n    void testSetPageNumber() {\n        GlobalConfiguration globalConfiguration = GlobalConfiguration.instance();\n        assertEquals(0, (int) globalConfiguration.getStartPageNumberAdjuster().apply(1));\n        assertEquals(0, (int) globalConfiguration.getStartPageNumberAdjuster().apply(0));\n        assertEquals(7, (int) globalConfiguration.getStartPageNumberAdjuster().apply(8));\n    }\n\n    @Test\n    void fixMapCamelCaseToUnderscore() {\n        DoytoQueryInitializer doytoQueryInitializer = new DoytoQueryInitializer();\n        ConfigurableApplicationContext context = new GenericApplicationContext() {\n            @Override\n            protected ConfigurableEnvironment createEnvironment() {\n                return new MockEnvironment()\n                        .withProperty(key(\"map-camel-case-to-underscore\"), \"true\");\n            }\n        };\n        doytoQueryInitializer.initialize(context);\n        assertTrue(GlobalConfiguration.instance().isMapCamelCaseToUnderscore());\n    }\n\n    @Test\n    void fixMapCamelCaseToUnderscore() {\n        DoytoQueryInitializer doytoQueryInitializer = new DoytoQueryInitializer();\n        ConfigurableApplicationContext context = new GenericApplicationContext() {\n            @Override\n            protected ConfigurableEnvironment createEnvironment() {\n                return new MockEnvironment()\n                        .withProperty(key(\"map-camel-case-to-underscore\"), \"true\");\n            }\n        };\n        doytoQueryInitializer.initialize(context);\n        assertTrue(GlobalConfiguration.instance().isMapCamelCaseToUnderscore());\n    }\n}"
