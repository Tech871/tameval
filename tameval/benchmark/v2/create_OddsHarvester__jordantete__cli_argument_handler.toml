[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "jordantete/OddsHarvester"
sha = "4a9c2a492c144b7c68c26841d2f4eaf0cace6b48"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=src/cli/cli_argument_handler.py -m pytest -q --junit-xml=test_output.xml tests/cli/test_cli_argument_handler.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target src.cli.cli_argument_handler --unit-test tests.cli.test_cli_argument_handler --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target src/cli/cli_argument_handler.py --unit-test tests/cli/test_cli_argument_handler.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 67.0
original_coverage = 100.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 0, 2, 3, 6, 7, 8, 9, 10, 12, 14, 16, 21, 22, 28,]
missed_lines = [ 17, 18, 19, 23, 24, 25, 26,]

[input_info]
test_file_path = "tests/cli/test_cli_argument_handler.py"
focal_file_path = "src/cli/cli_argument_handler.py"
test_file_url = "https://github.com/jordantete/OddsHarvester/blob/4a9c2a492c144b7c68c26841d2f4eaf0cace6b48/tests/cli/test_cli_argument_handler.py"
focal_file_url = "https://github.com/jordantete/OddsHarvester/blob/4a9c2a492c144b7c68c26841d2f4eaf0cace6b48/src/cli/cli_argument_handler.py"
first_commit_date = "2025-02-25"
last_commit_date = "2025-08-14"
test_file_content = "from unittest.mock import MagicMock, patch\n\nimport pytest\n\nfrom src.cli.cli_argument_handler import CLIArgumentHandler\n\n@pytest.fixture\ndef cli_handler():\n    return CLIArgumentHandler()\n\ndef test_parse_and_validate_args_valid(cli_handler):\n    mock_args = [\n        \"scrape\",\n        \"--sport\",\n        \"football\",\n        \"--date\",\n        \"2024-02-25\",\n        \"--leagues\",\n        \"england-premier-league\",\n        \"--storage\",\n        \"local\",\n        \"--format\",\n        \"json\",\n        \"--headless\",\n        \"--markets\",\n        \"1x2\",\n        \"btts\",\n        \"--browser-user-agent\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/123.0.0.0 Safari/537.36\",\n        \"--browser-locale-timezone\",\n        \"fr-BE\",\n        \"--browser-timezone-id\",\n        \"Europe/Brussels\",\n    ]\n\n    with (\n        patch(\"sys.argv\", [\"cli_tool.py\", *mock_args]),\n        patch.object(cli_handler.parser, \"parse_args\") as mock_parse_args,\n        patch.object(cli_handler.validator, \"validate_args\") as mock_validate_args,\n    ):\n        mock_parse_args.return_value = MagicMock(\n            command=\"scrape\",\n            sport=\"football\",\n            date=\"2024-02-25\",\n            leagues=[\"england-premier-league\"],\n            storage=\"local\",\n            format=\"json\",\n            headless=True,\n            markets=[\"1x2\", \"btts\"],\n            season=None,\n            file_path=None,\n            max_pages=None,\n            proxies=None,\n            browser_user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/123.0.0.0 Safari/537.36\",\n            browser_locale_timezone=\"fr-BE\",\n            browser_timezone_id=\"Europe/Brussels\",\n            match_links=None,\n            scrape_odds_history=False,\n            target_bookmaker=None,\n            preview_submarkets_only=False,\n        )\n\n        parsed_args = cli_handler.parse_and_validate_args()\n\n        assert parsed_args == {\n            \"command\": \"scrape\",\n            \"sport\": \"football\",\n            \"date\": \"2024-02-25\",\n            \"leagues\": [\"england-premier-league\"],\n            \"season\": None,\n            \"storage_type\": \"local\",\n            \"storage_format\": \"json\",\n            \"file_path\": None,\n            \"headless\": True,\n            \"markets\": [\"1x2\", \"btts\"],\n            \"max_pages\": None,\n            \"proxies\": None,\n            \"browser_user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/123.0.0.0 Safari/537.36\",\n            \"browser_locale_timezone\": \"fr-BE\",\n            \"browser_timezone_id\": \"Europe/Brussels\",\n            \"match_links\": None,\n            \"scrape_odds_history\": False,\n            \"target_bookmaker\": None,\n            \"preview_submarkets_only\": False,\n        }\n\n        mock_validate_args.assert_called_once_with(mock_parse_args.return_value)\n"
