[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "XMU-Kuangnan-Fang-Team/GENetLib"
sha = "4caa08b3f0c3db1cf7640d638dc5def9fbcbdce7"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=GENetLib/fd.py -m pytest -q --junit-xml=test_output.xml pytest/test_fd.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target GENetLib.fd --unit-test pytest.test_fd --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target GENetLib/fd.py --unit-test pytest/test_fd.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 86.0
original_coverage = 86.0
mutation_kill_rate = 64.0
original_mutation_kill_rate = 64.0
covered_lines = [ 0, 2, 3, 6, 8, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42,]
missed_lines = [ 11, 18, 27, 31, 36,]

[input_info]
test_file_path = "pytest/test_fd.py"
focal_file_path = "GENetLib/fd.py"
test_file_url = "https://github.com/XMU-Kuangnan-Fang-Team/GENetLib/blob/4caa08b3f0c3db1cf7640d638dc5def9fbcbdce7/pytest/test_fd.py"
focal_file_url = "https://github.com/XMU-Kuangnan-Fang-Team/GENetLib/blob/4caa08b3f0c3db1cf7640d638dc5def9fbcbdce7/GENetLib/fd.py"
first_commit_date = "2024-09-26"
last_commit_date = "2025-01-22"
test_file_content = "import pytest\nimport numpy as np\nfrom GENetLib.fd import fd\nfrom GENetLib.create_basis import create_bspline_basis\n\n# Test fd function with default coefficients\ndef test_fd_default_coef():\n    basisobj = create_bspline_basis(rangeval=[0, 1], nbasis=4, norder=4)\n    fdobj = fd(basisobj=basisobj)\n    assert 'coefs' in fdobj\n    assert fdobj['coefs'].shape == (4,)\n\n# Test fd function with custom coefficients\ndef test_fd_custom_coef():\n    basisobj = create_bspline_basis(rangeval=[0, 1], nbasis=4, norder=4)\n    coef = np.random.rand(4)\n    fdobj = fd(coef=coef, basisobj=basisobj)\n    assert 'coefs' in fdobj\n    assert np.all(fdobj['coefs'] == coef)\n\n# Test fd function with multidimensional coefficients\ndef test_fd_multidim_coef():\n    basisobj = create_bspline_basis(rangeval=[0, 1], nbasis=4, norder=4)\n    coef = np.random.rand(4, 2)\n    fdobj = fd(coef=coef, basisobj=basisobj)\n    assert 'coefs' in fdobj\n    assert fdobj['coefs'].shape == (4, 2)\n\n# Test fd function with invalid coefficient type\ndef test_fd_invalid_coef_type():\n    basisobj = create_bspline_basis(rangeval=[0, 1], nbasis=4, norder=4)\n    coef = \"not a number\"\n    with pytest.raises(ValueError):\n        fd(coef=coef, basisobj=basisobj)\n\n# Test fd function with custom fdnames\ndef test_fd_custom_fdnames():\n    basisobj = create_bspline_basis(rangeval=[0, 1], nbasis=4, norder=4)\n    coef = np.random.rand(4)\n    fdnames = {\"args\": [\"time\"], \"reps\": [\"rep1\"], \"funs\": [\"value\"]}\n    fdobj = fd(coef=coef, basisobj=basisobj, fdnames=fdnames)\n    assert 'fdnames' in fdobj\n    assert fdobj['fdnames'] == fdnames\n\n"
