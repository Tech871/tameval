[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "go-kratos/kratos"
sha = "025c2dc2b0ffabe45620f6be2b6de6f6505760bc"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out middleware/logging/logging.go middleware/logging/logging_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting middleware/logging/logging.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 42.11
original_coverage = 100.0
mutation_kill_rate = 9.52
original_mutation_kill_rate = 19.0
covered_lines = [ 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 102, 109, 113, 117,]
missed_lines = [ 36, 37, 38, 39, 41, 42, 43, 44, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 103, 104, 105, 106, 107, 108, 114, 115, 116,]

[input_info]
test_file_path = "middleware/logging/logging_test.go"
focal_file_path = "middleware/logging/logging.go"
test_file_url = "https://github.com/go-kratos/kratos/blob/025c2dc2b0ffabe45620f6be2b6de6f6505760bc/middleware/logging/logging_test.go"
focal_file_url = "https://github.com/go-kratos/kratos/blob/025c2dc2b0ffabe45620f6be2b6de6f6505760bc/middleware/logging/logging.go"
first_commit_date = "2021-02-17"
last_commit_date = "2025-03-07"
test_file_content = "package logging\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/go-kratos/kratos/v2/log\"\n\t\"github.com/go-kratos/kratos/v2/middleware\"\n\t\"github.com/go-kratos/kratos/v2/transport\"\n)\n\nvar _ transport.Transporter = (*Transport)(nil)\n\ntype Transport struct {\n\tkind      transport.Kind\n\tendpoint  string\n\toperation string\n}\n\nfunc (tr *Transport) Kind() transport.Kind {\n\treturn tr.kind\n}\n\nfunc (tr *Transport) Endpoint() string {\n\treturn tr.endpoint\n}\n\nfunc (tr *Transport) Operation() string {\n\treturn tr.operation\n}\n\nfunc (tr *Transport) RequestHeader() transport.Header {\n\treturn nil\n}\n\nfunc (tr *Transport) ReplyHeader() transport.Header {\n\treturn nil\n}\n\n\ntype (\n\tdummy struct {\n\t\tfield string\n\t}\n\tdummyStringer struct {\n\t\tfield string\n\t}\n\tdummyStringerRedacter struct {\n\t\tfield string\n\t}\n)\n\nfunc (d *dummyStringer) String() string {\n\treturn \"my value\"\n}\n\nfunc (d *dummyStringerRedacter) String() string {\n\treturn \"my value\"\n}\n\nfunc (d *dummyStringerRedacter) Redact() string {\n\treturn \"my value redacted\"\n}\n\n\n\ntype extractKeyValues [][]any\n\nfunc (l *extractKeyValues) Log(_ log.Level, kv ...any) error { *l = append(*l, kv); return nil }\n\nfunc TestServer_CallerPath(t *testing.T) {\n\tvar a extractKeyValues\n\tlogger := log.With(&a, \"caller\", log.Caller(5)) // report where the helper was called\n\n\t// make sure the caller is same\n\tsameCaller := func(fn middleware.Handler) { _, _ = fn(context.Background(), nil) }\n\n\t// caller: [... log inside middleware, fn(context.Background(), nil)]\n\th := func(context.Context, any) (a any, e error) { return }\n\th = Server(logger)(h)\n\tsameCaller(h)\n\n\t// caller: [... helper.Info(\"foo\"), fn(context.Background(), nil)]\n\thelper := log.NewHelper(logger)\n\tsameCaller(func(context.Context, any) (a any, e error) { helper.Info(\"foo\"); return })\n\n\tt.Log(a[0])\n\tt.Log(a[1])\n\tif a[0][0] != \"caller\" || a[1][0] != \"caller\" {\n\t\tt.Fatal(\"caller not found\")\n\t}\n\tif a[0][1] != a[1][1] {\n\t\tt.Fatalf(\"middleware should have the same caller as log.Helper. middleware: %s, helper: %s\", a[0][1], a[1][1])\n\t}\n}\n"
