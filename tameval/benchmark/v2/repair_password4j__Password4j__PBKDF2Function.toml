[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "Password4j/password4j"
sha = "18aaa552d76471585cc40517e05adb9e8dd1ad3d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=PBKDF2FunctionTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.PBKDF2Function  -DtargetTests=**.PBKDF2FunctionTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 87.0
mutation_kill_rate = nan
original_mutation_kill_rate = 70.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/com/password4j/PBKDF2FunctionTest.java"
focal_file_path = "src/main/java/com/password4j/PBKDF2Function.java"
test_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/test/com/password4j/PBKDF2FunctionTest.java"
focal_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/main/java/com/password4j/PBKDF2Function.java"
first_commit_date = "2020-02-26"
last_commit_date = "2025-08-04"
test_file_content = "\npackage com.password4j;\n\nimport com.password4j.types.Bcrypt;\nimport com.password4j.types.Hmac;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertArrayEquals;\nimport static org.junit.Assert.assertEquals;\n\n\npublic class PBKDF2FunctionTest\n{\n\n\n    @Test\n    public void testPBKDF2()\n    {\n        HashingFunction function = CompressedPBKDF2Function.getInstance(Hmac.SHA256, 10_000, 256);\n        String password = \"password\";\n        String salt = \"abc\";\n        Hash hash = function.hash(password, salt);\n        String result = \"/WTQfTTc8Hg8GlplP0LthpgdElUG+I3MyuvK8MI4MnQ=\";\n        assertEquals(\"$3$42949672960256$YWJj$\" + result, hash.getResult());\n        assertArrayEquals(Base64.getDecoder().decode(result), hash.getBytes());\n    }\n\n    @Test\n    public void testPBKDF2EachVariants()\n    {\n        for (Hmac alg : Hmac.values())\n        {\n            HashingFunction strategy = CompressedPBKDF2Function.getInstance(alg, 10_000, 256);\n            String password = \"password\";\n            String salt = \"abc\";\n            Hash hash = strategy.hash(password, salt);\n            Assert.assertTrue(hash.getResult().startsWith(\"$\" + alg.code() + \"$\"));\n        }\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testPBKDF2WrongAlgorithm()\n    {\n        HashingFunction strategy = PBKDF2Function.getInstance(\"notAnAlgorithm\", 10_000, 256);\n        String password = \"password\";\n        String salt = \"abc\";\n        strategy.hash(password, salt);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testPBKDF2WrongAlgorithm2()\n    {\n        HashingFunction strategy = CompressedPBKDF2Function.getInstance(\"notAnAlgorithm\", 10_000, 256);\n        String password = \"password\";\n        String salt = \"abc\";\n        strategy.hash(password, salt);\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void testPBKDF2WrongSalt()\n    {\n        HashingFunction strategy = PBKDF2Function.getInstance(Hmac.SHA224, 10_000, 224);\n        String password = \"password\";\n        String salt = new String(new byte[0]);\n        strategy.hash(password, salt);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testPBKDF2WrongAlgorithmSalt()\n    {\n        HashingFunction strategy = PBKDF2Function.getInstance(\"notAnAlgorithm\", 10_000, 256);\n        String password = \"password\";\n        String salt = new String(new byte[0]);\n        strategy.hash(password, salt);\n    }\n\n    @Test(expected = UnsupportedOperationException.class)\n    public void testPBKDF2WrongCheck()\n    {\n        HashingFunction strategy = AlgorithmFinder.getPBKDF2Instance();\n        String password = \"password\";\n        String salt = \"salt\";\n        Hash hash = strategy.hash(password, salt);\n        strategy.check(password, hash.getResult());\n    }\n\n    @Test\n    public void testPBKDF2Check()\n    {\n        String hashed = \"$3$42949672960256$YWJj$/WTQfTTc8Hg8GlplP0LthpgdElUG+I3MyuvK8MI4MnQ=\";\n        String userSubmittedPassword = \"password\";\n        HashingFunction strategy = CompressedPBKDF2Function.getInstanceFromHash(hashed);\n        Assert.assertTrue(strategy.check(userSubmittedPassword, hashed));\n    }\n\n\n    @Test\n    public void testPBKDF2WrongCheck2()\n    {\n        String hashed = \"$3$42949672960256$YWJj$/WTQfTTc8Hg8GlplP0LthpgdElUG+I3MyuvK8MI4MnQ=\";\n        String badHash = \"$342949672960256$YWJj$/WTQfTTc8Hg8GlplP0LthpgdElUG+I3MyuvK8MI4MnQ=\";\n        String userSubmittedPassword = \"password\";\n        HashingFunction strategy = CompressedPBKDF2Function.getInstanceFromHash(hashed);\n        try {\n            Assert.assertTrue(strategy.check(userSubmittedPassword, badHash));\n        } catch (BadParametersException ex) {\n            assertEquals(\"`\" + badHash + \"` is not a valid hash\", ex.getMessage());\n        }\n    }\n\n\n    @Test(expected = BadParametersException.class)\n    public void testPBKDF2BadCheck()\n    {\n        String hashed = \"$342949672960256$YWJj$/WTQfTTc8Hg8GlplP0LthpgdElUG+I3MyuvK8MI4MnQ=\";\n        String userSubmittedPassword = \"password\";\n        CompressedPBKDF2Function.getInstanceFromHash(hashed);\n\n\n    }\n\n    @Test\n    public void testAlgorithmFromCode()\n    {\n\n        Hmac algNull = Hmac.fromCode(-100);\n        for (Hmac enumAlg : Hmac.values())\n        {\n            Hmac alg = Hmac.fromCode(enumAlg.code());\n            Assert.assertNotNull(alg);\n            assertEquals(enumAlg.code(), alg.code());\n            assertEquals(enumAlg.bits(), alg.bits());\n        }\n        Assert.assertNull(algNull);\n\n\n    }\n\n    @Test\n    public void testPBKDF2Coherence()\n    {\n        String password = \"password\";\n        Hash hash = PBKDF2Function.getInstance(Hmac.SHA256, 8_777, 256).hash(password);\n        Assert.assertTrue(Password.check(password, hash));\n\n    }\n\n    @Test\n    public void testPBKDF2CheckWithFixedConfigurations()\n    {\n        String hashed = \"$3$42949672960256$YWJj$/WTQfTTc8Hg8GlplP0LthpgdElUG+I3MyuvK8MI4MnQ=\";\n        String userSubmittedPassword = \"password\";\n        HashingFunction strategy = new CompressedPBKDF2Function(Hmac.SHA256, 10_000, 256);\n        Assert.assertTrue(strategy.check(userSubmittedPassword, hashed));\n    }\n\n\n    @Test\n    public void testPBKDF2equality()\n    {\n        PBKDF2Function strategy1 = PBKDF2Function.getInstance(Hmac.SHA256, 10_000, 256);\n        PBKDF2Function strategy2 = PBKDF2Function.getInstance(Hmac.SHA256, 10_000, 256);\n        PBKDF2Function strategy3 = PBKDF2Function.getInstance(Hmac.SHA1, 10_000, 256);\n        PBKDF2Function strategy4 = PBKDF2Function.getInstance(Hmac.SHA256, 64_000, 256);\n        PBKDF2Function strategy5 = PBKDF2Function.getInstance(Hmac.SHA256, 64_000, 123);\n        Map<PBKDF2Function, String> map = new HashMap<>();\n        map.put(strategy1, strategy1.toString());\n        map.put(strategy2, strategy2.toString());\n        map.put(strategy3, strategy3.toString());\n        map.put(strategy4, strategy4.toString());\n        map.put(strategy5, strategy5.toString());\n        assertEquals(4, map.size());\n        assertEquals(strategy1, strategy2);\n    }\n\n    @Test\n    public void testCompressed()\n    {\n        Hmac algorithm = Hmac.SHA512;\n\n\n        for (int i = 1; i <= 100; i+=10)\n        {\n            String password = PepperGenerator.generate(12);\n            String salt = PepperGenerator.generate(i);\n            Hash hash = CompressedPBKDF2Function.getInstance(algorithm, 100 * i, algorithm.bits()).hash(password, salt);\n\n            Hash notCompressedHash = PBKDF2Function.getInstance(algorithm, 100 * i, algorithm.bits()).hash(password, salt);\n\n            String params = Long.toString((((long) 100 * i) << 32) | (algorithm.bits() & 0xffffffffL));\n            String expected = \"$\" + algorithm.code() + \"$\" + params + \"$\" + Base64.getEncoder().encodeToString(salt.getBytes(Utils.DEFAULT_CHARSET)) + \"$\" + notCompressedHash.getResult();\n\n            assertEquals(expected, hash.getResult());\n            assertArrayEquals(hash.getBytes(), notCompressedHash.getBytes());\n            String hash64 = hash.getResult().split(\"\\\\$\")[4];\n            assertArrayEquals(Base64.getDecoder().decode(hash64), hash.getBytes());\n        }\n    }\n\n    @Test\n    public void testEquality()\n    {\n        Hmac hmac = Hmac.SHA256;\n        int iterations = 2;\n        int length = 256;\n        PBKDF2Function pbkdf2Function = PBKDF2Function.getInstance(hmac, iterations, length);\n        boolean eqNull = pbkdf2Function.equals(null);\n        boolean eqClass = pbkdf2Function.equals(new BcryptFunction(Bcrypt.A,10));\n        boolean difInst = pbkdf2Function.equals(ScryptFunction.getInstance(5, 4, 6));\n        boolean sameInst = pbkdf2Function.equals(PBKDF2Function.getInstance(hmac, iterations, length));\n        boolean notSameInst1 = pbkdf2Function.equals(PBKDF2Function.getInstance(Hmac.SHA1, iterations, length));\n        boolean notSameInst2 = pbkdf2Function.equals(PBKDF2Function.getInstance(hmac, iterations+1, length));\n        boolean notSameInst3 = pbkdf2Function.equals(PBKDF2Function.getInstance(hmac, iterations, length*2));\n\n        String toString = pbkdf2Function.toString();\n        int hashCode = pbkdf2Function.hashCode();\n        Assert.assertFalse(eqNull);\n        Assert.assertFalse(eqClass);\n        Assert.assertFalse(difInst);\n        Assert.assertTrue(sameInst);\n        Assert.assertNotEquals(toString, new ScryptFunction(5, 4, 6).toString());\n        Assert.assertNotEquals(hashCode, new ScryptFunction(5, 4, 6).hashCode());\n        Assert.assertFalse(notSameInst1);\n        Assert.assertFalse(notSameInst2);\n        Assert.assertFalse(notSameInst3);\n\n    }\n\n    @Test\n    public void testAccessors()\n    {\n        Hmac hmac = Hmac.SHA384;\n        int iterations = 5;\n        int length = 7;\n        PBKDF2Function pbkdf2 = PBKDF2Function.getInstance(hmac, iterations, length);\n        CompressedPBKDF2Function compressed = CompressedPBKDF2Function.getInstance(hmac, iterations, length);\n        assertEquals(hmac.name(), pbkdf2.getAlgorithm());\n        assertEquals(iterations, pbkdf2.getIterations());\n        assertEquals(length, pbkdf2.getLength());\n        assertEquals(\"PBKDF2Function(a=SHA384, i=5, l=7)\", pbkdf2.toString());\n        assertEquals(\"CompressedPBKDF2Function(a=SHA384, i=5, l=7)\", compressed.toString());\n    }\n\n    @Test\n    public void testInvalidCalls()\n    {\n        PBKDF2Function invalidFunction = new PBKDF2Function(\"SHA256\", 10_000, 256);\n        invalidFunction.nonExistentMethod();\n        HashingFunction strategy = PBKDF2Function.getInstance(Hmac.SHA256, 10_000, 256, \"extraArgument\");\n        int invalidAttribute = Utils.nonExistentAttribute;\n        BcryptFunction bcryptFunction = new BcryptFunction(Bcrypt.A, 10, \"extraArgument\");\n    }\n}"
