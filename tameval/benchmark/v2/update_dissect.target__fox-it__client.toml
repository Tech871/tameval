[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "fox-it/dissect.target"
sha = "86f4234cf0ad30186dd8bd27ac1a560298423ae9"
bench_version = 2

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=dissect/target/helpers/sunrpc/client.py -m pytest -q --junit-xml=test_output.xml tests/helpers/sunrpc/test_client.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target dissect.target.helpers.sunrpc.client --unit-test tests.helpers.sunrpc.test_client --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target dissect/target/helpers/sunrpc/client.py --unit-test tests/helpers/sunrpc/test_client.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 84.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/helpers/sunrpc/test_client.py"
focal_file_path = "dissect/target/helpers/sunrpc/client.py"
test_file_url = "https://github.com/fox-it/dissect.target/blob/86f4234cf0ad30186dd8bd27ac1a560298423ae9/tests/helpers/sunrpc/test_client.py"
focal_file_url = "https://github.com/fox-it/dissect.target/blob/86f4234cf0ad30186dd8bd27ac1a560298423ae9/dissect/target/helpers/sunrpc/client.py"
first_commit_date = "2025-02-05"
last_commit_date = "2025-04-24"
test_file_content = "from __future__ import annotations\n\nfrom unittest.mock import MagicMock, patch\n\nimport pytest\n\nfrom dissect.target.helpers.nfs.client import Client as NfsClient\nfrom dissect.target.helpers.nfs.client import ReadDirResult\nfrom dissect.target.helpers.nfs.nfs3 import (\n    EntryPlus3,\n    FileAttributes3,\n    FileHandle3,\n    FileType3,\n    GetPortProc,\n    MountOK,\n    MountProc,\n    NfsTime3,\n    SpecData3,\n)\nfrom dissect.target.helpers.nfs.serializer import MountResultDeserializer\nfrom dissect.target.helpers.sunrpc import sunrpc\nfrom dissect.target.helpers.sunrpc.client import Client, auth_null, auth_unix\nfrom dissect.target.helpers.sunrpc.serializer import (\n    PortMappingSerializer,\n    StringSerializer,\n    UInt32Serializer,\n)\nfrom dissect.target.helpers.sunrpc.sunrpc import PortMapping\n\n\n@pytest.fixture\ndef mock_socket():\n    with patch(\"socket.socket\") as mock_socket:\n        yield mock_socket\n\n\ndef test_portmap_call(mock_socket: MagicMock) -> None:\n    portmap_request = b\"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x86\\xa0\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x86\\xa3\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\"  # noqa: E501\n\n    portmap_response = b\"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x01\"  # noqa: E501\n\n    # Mock the socket instance\n    mock_sock_instance = MagicMock()\n    mock_socket.return_value = mock_sock_instance\n\n    client = Client.connect_port_mapper(\"localhost\")\n\n    # Prepare the portmap request and response\n    portmap_params = PortMapping(program=100003, version=3, protocol=sunrpc.Protocol.TCP)\n\n    # Set up the mock to return the response payload\n    response_fragment_header = (len(portmap_response) | 0x80000000).to_bytes(4, \"big\")\n    mock_sock_instance.recv.side_effect = [response_fragment_header, portmap_response]\n\n    result = client.call(GetPortProc, portmap_params, PortMappingSerializer(), UInt32Serializer())\n\n    # Verify that the request payload was sent\n    portmap_request_fragment_header = (len(portmap_request) | 0x80000000).to_bytes(4, \"big\")\n    mock_sock_instance.sendall.assert_called_with(portmap_request_fragment_header + portmap_request)\n\n    # Verify that the result of the call equals the portmap_result variable\n    assert result == 2049\n\n\ndef test_mount_call(mock_socket: MagicMock) -> None:\n    mount_request = b\"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x86\\xa5\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n/home/roel\\x00\\x00\"  # noqa: E501\n\n    mount_response = b\"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1c\\x01\\x00\\x07\\x00\\x02\\x00\\xec\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\"  # noqa: E501\n\n    # Mock the socket instance\n    mock_sock_instance = MagicMock()\n    mock_socket.return_value = mock_sock_instance\n\n    # Set up the mock to return the response payload\n    mount_response_fragment_header = (len(mount_response) | 0x80000000).to_bytes(4, \"big\")\n    mock_sock_instance.recv.side_effect = [mount_response_fragment_header, mount_response]\n\n    mount_client = Client.connect(\"localhost\", 2049, auth_null())\n    result = mount_client.call(MountProc, \"/home/roel\", StringSerializer(), MountResultDeserializer())\n\n    # Verify that the request payload was sent\n    portmap_request_fragment_header = (len(mount_request) | 0x80000000).to_bytes(4, \"big\")\n    mock_sock_instance.sendall.assert_called_with(portmap_request_fragment_header + mount_request)\n\n    # Verify that the result of the call equals the mount_result variable\n    assert result == MountOK(\n        filehandle=FileHandle3(\n            opaque=b\"\\x01\\x00\\x07\\x00\\x02\\x00\\xec\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\"\n        ),\n        auth_flavors=[1],\n    )\n\n\ndef test_readdir(mock_socket: MagicMock) -> None:\n    readdir_request = b\"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x86\\xa3\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x11\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x1cq\\xd5\\x93D\\x00\\x00\\x00\\x07twigtop\\x00\\x00\\x00\\x03\\xe8\\x00\\x00\\x03\\xe8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x1c\\x01\\x00\\x07\\x00\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x80\\x00\"  # noqa: E501\n    readdir_response = b\"\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x01\\xfd\\x00\\x00\\x00\\x02\\x00\\x00\\x03\\xe8\\x00\\x00\\x03\\xe8\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00Yq\\x99zI\\x1e5\r\\x00\\x00\\x00\\x00\\x02\\xee&\\xdag\\x8ar\\xba)\\xd7\\xba.g\\x8ar\\x96\\x18\\xd7\\x91<g\\x8ar\\x96\\x18\\xd7\\x91<\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x02\\xee\\x84\\x19\\x00\\x00\\x00\\x08test.txt>z;\\x99\\x07@\\x9c_\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x01\\xb4\\x00\\x00\\x00\\x01\\x00\\x00\\x03\\xe8\\x00\\x00\\x03\\xe8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00Yq\\x99zI\\x1e5\r\\x00\\x00\\x00\\x00\\x02\\xee\\x84\\x19g\\x8aqk\r\\xa4\\xb7\\x8eg\\x8aqg\\x11\\x93h\\xf9g\\x8aqg\\x11\\x93h\\xf9\\x00\\x00\\x00\\x01\\x00\\x00\\x00$\\x01\\x00\\x07\\x01\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x19\\x84\\xee\\x02\\xc1\\x8a\\x8c\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x02\\xee&\\xda\\x00\\x00\\x00\\x01.\\x00\\x00\\x00CjR\\xafoN\\x82\\xf0\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x02\\x00\\x00\\x01\\xfd\\x00\\x00\\x00\\x02\\x00\\x00\\x03\\xe8\\x00\\x00\\x03\\xe8\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00Yq\\x99zI\\x1e5\r\\x00\\x00\\x00\\x00\\x02\\xee&\\xdag\\x8ar\\xba)\\xd7\\xba.g\\x8ar\\x96\\x18\\xd7\\x91<g\\x8ar\\x96\\x18\\xd7\\x91<\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x1c\\x01\\x00\\x07\\x00\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x02\\xee\\x84\\x07\\x00\\x00\\x00\ttest2.txt\\x00\\x00\\x00hF\\x10\\xd4\\xd7u\\xe2>\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x00\\x00\\x01\\xb4\\x00\\x00\\x00\\x01\\x00\\x00\\x03\\xe8\\x00\\x00\\x03\\xe8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00Yq\\x99zI\\x1e5\r\\x00\\x00\\x00\\x00\\x02\\xee\\x84\\x07g\\x8ar\\x96\\x18\\xd7\\x91<g\\x8ar\\x9e+\\x9e\\xde\ng\\x8ar\\x9e+\\x9e\\xde\n\\x00\\x00\\x00\\x01\\x00\\x00\\x00$\\x01\\x00\\x07\\x01\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x07\\x84\\xee\\x02\\x9524*\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x02\\xec\\x00\\x02\\x00\\x00\\x00\\x02..\\x00\\x00\\x7f\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\"  # noqa: E501\n\n    # Mock the socket instance\n    mock_sock_instance = MagicMock()\n    mock_socket.return_value = mock_sock_instance\n\n    # Set up the mock to return the response payload\n    readdir_response_fragment_header = (len(readdir_response) | 0x80000000).to_bytes(4, \"big\")\n    mock_sock_instance.recv.side_effect = [readdir_response_fragment_header, readdir_response]\n\n    auth = auth_unix(\"twigtop\", 1000, 1000, [])\n    auth.credentials.stamp = 1909822276\n    nfs_client = NfsClient.connect(\"localhost\", 2049, auth, 666)\n    result = nfs_client.readdirplus(\n        FileHandle3(opaque=b\"\\x01\\x00\\x07\\x00\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\")\n    )\n\n    # Verify that the request payload was sent\n    readdir_request_header = (len(readdir_request) | 0x80000000).to_bytes(4, \"big\")\n    mock_sock_instance.sendall.assert_called_with(readdir_request_header + readdir_request)\n\n    # Verify that the result of the call equals the readdir_result variable\n    assert result == ReadDirResult(\n        dir_attributes=FileAttributes3(\n            type=FileType3.DIR,\n            mode=509,\n            nlink=2,\n            uid=1000,\n            gid=1000,\n            size=4096,\n            used=4096,\n            rdev=SpecData3(specdata1=0, specdata2=0),\n            fsid=6445101292235666701,\n            fileid=49161946,\n            atime=NfsTime3(seconds=1737126586, nseconds=702003758),\n            mtime=NfsTime3(seconds=1737126550, nseconds=416780604),\n            ctime=NfsTime3(seconds=1737126550, nseconds=416780604),\n        ),\n        entries=[\n            EntryPlus3(\n                fileid=49185817,\n                name=\"test.txt\",\n                cookie=4501976305947941983,\n                attributes=FileAttributes3(\n                    type=FileType3.REG,\n                    mode=436,\n                    nlink=1,\n                    uid=1000,\n                    gid=1000,\n                    size=5,\n                    used=4096,\n                    rdev=SpecData3(specdata1=0, specdata2=0),\n                    fsid=6445101292235666701,\n                    fileid=49185817,\n                    atime=NfsTime3(seconds=1737126251, nseconds=228898702),\n                    mtime=NfsTime3(seconds=1737126247, nseconds=294873337),\n                    ctime=NfsTime3(seconds=1737126247, nseconds=294873337),\n                ),\n                handle=FileHandle3(\n                    opaque=b\"\\x01\\x00\\x07\\x01\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x19\\x84\\xee\\x02\\xc1\\x8a\\x8c\"  # noqa: E501\n                ),\n            ),\n            EntryPlus3(\n                fileid=49161946,\n                name=\".\",\n                cookie=4857786061512671984,\n                attributes=FileAttributes3(\n                    type=FileType3.DIR,\n                    mode=509,\n                    nlink=2,\n                    uid=1000,\n                    gid=1000,\n                    size=4096,\n                    used=4096,\n                    rdev=SpecData3(specdata1=0, specdata2=0),\n                    fsid=6445101292235666701,\n                    fileid=49161946,\n                    atime=NfsTime3(seconds=1737126586, nseconds=702003758),\n                    mtime=NfsTime3(seconds=1737126550, nseconds=416780604),\n                    ctime=NfsTime3(seconds=1737126550, nseconds=416780604),\n                ),\n                handle=FileHandle3(\n                    opaque=b\"\\x01\\x00\\x07\\x00\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\"\n                ),\n            ),\n            EntryPlus3(\n                fileid=49185799,\n                name=\"test2.txt\",\n                cookie=7513711534648189502,\n                attributes=FileAttributes3(\n                    type=FileType3.REG,\n                    mode=436,\n                    nlink=1,\n                    uid=1000,\n                    gid=1000,\n                    size=6,\n                    used=4096,\n                    rdev=SpecData3(specdata1=0, specdata2=0),\n                    fsid=6445101292235666701,\n                    fileid=49185799,\n                    atime=NfsTime3(seconds=1737126550, nseconds=416780604),\n                    mtime=NfsTime3(seconds=1737126558, nseconds=731831818),\n                    ctime=NfsTime3(seconds=1737126558, nseconds=731831818),\n                ),\n                handle=FileHandle3(\n                    opaque=b\"\\x01\\x00\\x07\\x01\\xda&\\xee\\x02\\x00\\x00\\x00\\x00\\xb5g\\x131&\\xf1I\\xed\\xb8R\rx\\h8\\xb4\\x07\\x84\\xee\\x02\\x9524*\"  # noqa: E501\n                ),\n            ),\n            EntryPlus3(fileid=49020930, name=\"..\", cookie=9223372036854775807, attributes=None, handle=None),\n        ],\n    )"
