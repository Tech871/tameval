[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "matthewwardrop/formulaic"
sha = "46eb1f26c79d3f999c12738cde6b11f875c7c9c8"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=formulaic/transforms/basis_spline.py -m pytest -q --junit-xml=test_output.xml tests/transforms/test_basis_spline.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target formulaic.transforms.basis_spline --unit-test tests.transforms.test_basis_spline --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target formulaic/transforms/basis_spline.py --unit-test tests/transforms/test_basis_spline.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 91.0
original_coverage = 100.0
mutation_kill_rate = 90.0
original_mutation_kill_rate = 94.0
covered_lines = [ 0, 1, 2, 3, 5, 6, 8, 9, 12, 18, 19, 20, 21, 22, 25, 26, 98, 101, 103, 105, 106, 108, 110, 112, 113, 115, 117, 120, 123, 127, 132, 133, 134, 135, 136, 137, 138, 142, 145, 146, 147, 148, 149, 153, 159, 165, 166, 167, 168, 169, 175, 176, 181, 182, 183, 191, 199, 200, 201, 202, 207,]
missed_lines = [ 99, 104, 111, 140, 150, 154,]

[input_info]
test_file_path = "tests/transforms/test_basis_spline.py"
focal_file_path = "formulaic/transforms/basis_spline.py"
test_file_url = "https://github.com/matthewwardrop/formulaic/blob/46eb1f26c79d3f999c12738cde6b11f875c7c9c8/tests/transforms/test_basis_spline.py"
focal_file_url = "https://github.com/matthewwardrop/formulaic/blob/46eb1f26c79d3f999c12738cde6b11f875c7c9c8/formulaic/transforms/basis_spline.py"
first_commit_date = "2021-10-12"
last_commit_date = "2025-01-07"
test_file_content = "import re\n\nimport numpy\nimport pandas as pd\nimport pytest\n\nfrom formulaic import model_matrix\nfrom formulaic.errors import FactorEvaluationError\nfrom formulaic.transforms.basis_spline import basis_spline\n\nclass TestBasisSpline:\n    @pytest.fixture(scope=\"session\")\n    def data(self):\n        return numpy.linspace(0, 1, 21)\n\n    def test_df(self, data):\n        V = basis_spline(data, df=5)\n\n        assert len([k for k in V if isinstance(k, int)]) == 5\n\n        # Comparison data copied from R output of:\n        # > library(splines)\n        # > data = seq(from=0, to=1, by=0.05)\n        # > bs(data, df=5)\n\n        assert numpy.allclose(\n            V[1],\n            [\n                0.00000000,\n                0.35465625,\n                0.54225000,\n                0.59821875,\n                0.55800000,\n                0.45703125,\n                0.33075000,\n                0.21434375,\n                0.12800000,\n                0.06865625,\n                0.03125000,\n                0.01071875,\n                0.00200000,\n                0.00003125,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n            ],\n        )\n\n        assert numpy.allclose(\n            V[2],\n            [\n                0.00000000,\n                0.03065625,\n                0.11025000,\n                0.22021875,\n                0.34200000,\n                0.45703125,\n                0.54675000,\n                0.59278125,\n                0.58800000,\n                0.54271875,\n                0.46875000,\n                0.37790625,\n                0.28200000,\n                0.19284375,\n                0.12150000,\n                0.07031250,\n                0.03600000,\n                0.01518750,\n                0.00450000,\n                0.00056250,\n                0.00000000,\n            ],\n        )\n\n        assert numpy.allclose(\n            V[3],\n            [\n                0.00000000,\n                0.00056250,\n                0.00450000,\n                0.01518750,\n                0.03600000,\n                0.07031250,\n                0.12150000,\n                0.19284375,\n                0.28200000,\n                0.37790625,\n                0.46875000,\n                0.54271875,\n                0.58800000,\n                0.59278125,\n                0.54675000,\n                0.45703125,\n                0.34200000,\n                0.22021875,\n                0.11025000,\n                0.03065625,\n                0.00000000,\n            ],\n        )\n\n        assert numpy.allclose(\n            V[4],\n            [\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00000000,\n                0.00003125,\n                0.00200000,\n                0.01071875,\n                0.03125000,\n                0.06865625,\n                0.12800000,\n                0.21434375,\n                0.33075000,\n                0.45703125,\n                0.55800000,\n                0.59821875,\n                0.54225000,\n                0.35465625,\n                0.00000000,\n            ],\n        )\n\n        assert numpy.allclose(\n            V[5],\n            [\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.000000,\n                0.001000,\n                0.015625,\n                0.064000,\n                0.166375,\n                0.343000,\n                0.614125,\n                1.000000,\n            ],\n        )\n\n    def test_extrapolation(self, data):\n        # Comparison data based on R output of:\n        # > library(splines)\n        # > data = seq(from=0, to=1, by=0.05)\n        # > bs(data, Boundary.knots=c(0.25, 0.75))\n\n        with pytest.raises(\n            ValueError,\n            match=\"Some field values extend beyond upper and/or lower bounds\",\n        ):\n            basis_spline(data, lower_bound=0.25, upper_bound=0.75)\n\n        V = basis_spline(data, lower_bound=0.25, upper_bound=0.75, extrapolation=\"clip\")\n        assert numpy.allclose(\n            V[3],\n            [\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.001,\n                0.008,\n                0.027,\n                0.064,\n                0.125,\n                0.216,\n                0.343,\n                0.512,\n                0.729,\n                1.000,\n                1.000,\n                1.000,\n                1.000,\n                1.000,\n                1.000,\n            ],\n        )\n\n        V2 = basis_spline(data, lower_bound=0.25, upper_bound=0.75, extrapolation=\"na\")\n        assert numpy.allclose(\n            V2[3],\n            [\n                numpy.nan,\n                numpy.nan,\n                numpy.nan,\n                numpy.nan,\n                numpy.nan,\n                0.000,\n                0.001,\n                0.008,\n                0.027,\n                0.064,\n                0.125,\n                0.216,\n                0.343,\n                0.512,\n                0.729,\n                1.000,\n                numpy.nan,\n                numpy.nan,\n                numpy.nan,\n                numpy.nan,\n                numpy.nan,\n            ],\n            equal_nan=True,\n        )\n\n        V3 = basis_spline(\n            data, lower_bound=0.25, upper_bound=0.75, extrapolation=\"zero\"\n        )\n        assert numpy.allclose(\n            V3[3],\n            [\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.001,\n                0.008,\n                0.027,\n                0.064,\n                0.125,\n                0.216,\n                0.343,\n                0.512,\n                0.729,\n                1.000,\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n                0.000,\n            ],\n            equal_nan=True,\n        )\n\n        V4 = basis_spline(\n            data, lower_bound=0.25, upper_bound=0.75, extrapolation=\"extend\"\n        )\n        assert numpy.allclose(\n            V4[3],\n            [\n                -0.125,\n                -0.064,\n                -0.027,\n                -0.008,\n                -0.001,\n                0.000,\n                0.001,\n                0.008,\n                0.027,\n                0.064,\n                0.125,\n                0.216,\n                0.343,\n                0.512,\n                0.729,\n                1.000,\n                1.331,\n                1.728,\n                2.197,\n                2.744,\n                3.375,\n            ],\n        )\n"
