[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "redpanda-data/benthos"
sha = "7da18c5fb096a3607f9f70c06614742b24ae938e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/impl/pure/processor_resource.go internal/impl/pure/processor_resource_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/impl/pure/processor_resource.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 52.0
original_coverage = 52.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,]
missed_lines = [ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95,]

[input_info]
test_file_path = "internal/impl/pure/processor_resource_test.go"
focal_file_path = "internal/impl/pure/processor_resource.go"
test_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_resource_test.go"
focal_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_resource.go"
first_commit_date = "2022-04-27"
last_commit_date = "2025-01-09"
test_file_content = "// Copyright 2025 Redpanda Data, Inc.\n\npackage pure_test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/redpanda-data/benthos/v4/internal/component/processor\"\n\t\"github.com/redpanda-data/benthos/v4/internal/manager/mock\"\n\t\"github.com/redpanda-data/benthos/v4/internal/message\"\n\n)\n\nfunc TestResourceProc(t *testing.T) {\n\tconf := processor.NewConfig()\n\tconf.Type = \"bloblang\"\n\tconf.Plugin = `root = \"foo: \" + content()`\n\n\tmgr := mock.NewManager()\n\n\tresProc, err := mgr.NewProcessor(conf)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmgr.Processors[\"foo\"] = func(b message.Batch) ([]message.Batch, error) {\n\t\tmsgs, res := resProc.ProcessBatch(context.Background(), b)\n\t\tif res != nil {\n\t\t\treturn nil, res\n\t\t}\n\t\treturn msgs, nil\n\t}\n\n\tnConf := processor.NewConfig()\n\tnConf.Type = \"resource\"\n\tnConf.Plugin = \"foo\"\n\n\tp, err := mgr.NewProcessor(nConf)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tmsgs, res := p.ProcessBatch(context.Background(), message.QuickBatch([][]byte{[]byte(\"bar\")}))\n\tif res != nil {\n\t\tt.Fatal(res)\n\t}\n\tif len(msgs) != 1 {\n\t\tt.Error(\"Expected only 1 message\")\n\t}\n\tif exp, act := \"foo: bar\", string(msgs[0].Get(0).AsBytes()); exp != act {\n\t\tt.Errorf(\"Wrong result: %v != %v\", act, exp)\n\t}\n}\n"
