[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "1b7b428f425768bbd86ad590f21af7aaae044249"
bench_version = 2

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/parser/toml.py -m pytest -q --junit-xml=test_output.xml hdl_registers/parser/test/test_toml.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.parser.toml --unit-test hdl_registers.parser.test.test_toml --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/parser/toml.py --unit-test hdl_registers/parser/test/test_toml.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 75.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 11, 13, 15, 24, 38, 41, 43, 46, 50, 53, 54,]
missed_lines = [ 51, 55, 56, 57,]

[input_info]
test_file_path = "hdl_registers/parser/test/test_toml.py"
focal_file_path = "hdl_registers/parser/toml.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/1b7b428f425768bbd86ad590f21af7aaae044249/hdl_registers/parser/test/test_toml.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/1b7b428f425768bbd86ad590f21af7aaae044249/hdl_registers/parser/toml.py"
first_commit_date = "2023-11-24"
last_commit_date = "2025-02-11"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\nimport pytest\nfrom tsfpga.system_utils import create_file\n\nfrom hdl_registers.parser.toml import from_toml\nfrom hdl_registers.register import Register\nfrom hdl_registers.register_modes import REGISTER_MODES\n\ndef test_default_registers(tmp_path):\n    toml_path = create_file(\n        file=tmp_path / \"regs.toml\",\n        contents=\"\"\"\n[apa]\n\nmode = \"w\"\n\n[hest]\n\nmode = \"w\"\n\"\"\",\n    )\n    register_list = from_toml(\n        name=\"\",\n        toml_file=toml_path,\n        default_registers=[\n            Register(name=\"conf\", index=0, mode=REGISTER_MODES[\"r_w\"], description=\"\"),\n            Register(name=\"status\", index=1, mode=REGISTER_MODES[\"r\"], description=\"\"),\n        ],\n    )\n\n    # Default registers.\n    assert register_list.get_register(\"conf\").index == 0\n    assert register_list.get_register(\"status\").index == 1\n    # TOML registers.\n    assert register_list.get_register(\"apa\").index == 2\n    assert register_list.get_register(\"hest\").index == 3\n"
