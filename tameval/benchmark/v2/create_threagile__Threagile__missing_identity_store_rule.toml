[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "Threagile/threagile"
sha = "9c1d403638a1f7d83faa4c528531c6c5025885c8"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/risks/builtin/missing_identity_store_rule.go pkg/risks/builtin/missing_identity_store_rule_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/risks/builtin/missing_identity_store_rule.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = 63.0
original_mutation_kill_rate = 63.0
covered_lines = [ 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,]
missed_lines = [ 37, 38, 39,]

[input_info]
test_file_path = "pkg/risks/builtin/missing_identity_store_rule_test.go"
focal_file_path = "pkg/risks/builtin/missing_identity_store_rule.go"
test_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/missing_identity_store_rule_test.go"
focal_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/missing_identity_store_rule.go"
first_commit_date = "2024-06-07"
last_commit_date = "2025-07-24"
test_file_content = "package builtin\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/threagile/threagile/pkg/types\"\n)\n\nfunc TestMissingIdentityStoreRuleGenerateRisksEmptyModelNotRisksCreated(t *testing.T) {\n\trule := NewMissingIdentityStoreRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestMissingIdentityStoreRuleGenerateRisksThereIsIdenityStoreWithinScopeNoRisksCreated(t *testing.T) {\n\trule := NewMissingIdentityStoreRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:      \"Test Technical Asset\",\n\t\t\t\tOutOfScope: false,\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"some-technology\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.IsIdentityStore: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestMissingIdentityStoreRuleGenerateRisksNoEndUserIdentityPropagationNoRisksCreated(t *testing.T) {\n\trule := NewMissingIdentityStoreRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:      \"Test Technical Asset\",\n\t\t\t\tOutOfScope: false,\n\t\t\t},\n\t\t\t\"ta2\": {\n\t\t\t\tTitle:      \"Test Sparring Technical Asset\",\n\t\t\t\tOutOfScope: false,\n\t\t\t\tCommunicationLinks: []*types.CommunicationLink{\n\t\t\t\t\t{\n\t\t\t\t\t\tTargetId:      \"ta1\",\n\t\t\t\t\t\tAuthorization: types.NoneAuthorization,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\ntype MissingIdentityStoreRuleTest struct {\n\ttargetConfidentiality types.Confidentiality\n\ttargetIntegrity       types.Criticality\n\ttargetAvailability    types.Criticality\n\n\tdataProcessedConfidentiality types.Confidentiality\n\tdataProcessedIntegrity       types.Criticality\n\tdataProcessedAvailability    types.Criticality\n\n\tsourceConfidentiality types.Confidentiality\n\tsourceIntegrity       types.Criticality\n\tsourceAvailability    types.Criticality\n\n\texpectedImpact                 types.RiskExploitationImpact\n\texpectedMostRelevantAssetTitle string\n}\n\nfunc TestMissingIdentityStoreRule(t *testing.T) {\n\ttestCases := map[string]MissingIdentityStoreRuleTest{\n\t\t\"low impact\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.LowImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t\t\"source asset more relevant\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Confidential,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.LowImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Sparring Technical Asset\",\n\t\t},\n\t\t\"medium impact confidential target asset\": {\n\t\t\ttargetConfidentiality: types.Confidential,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.MediumImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t\t\"medium impact critical integrity target asset\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Critical,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.MediumImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t\t\"medium impact critical availability target asset\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Critical,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.MediumImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t\t\"medium impact process confidential data asset\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Confidential,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.MediumImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t\t\"medium impact process critical integrity data asset\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Critical,\n\t\t\tdataProcessedAvailability:    types.Important,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.MediumImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t\t\"medium impact process critical availability data asset\": {\n\t\t\ttargetConfidentiality: types.Restricted,\n\t\t\ttargetAvailability:    types.Important,\n\t\t\ttargetIntegrity:       types.Important,\n\n\t\t\tdataProcessedConfidentiality: types.Restricted,\n\t\t\tdataProcessedIntegrity:       types.Important,\n\t\t\tdataProcessedAvailability:    types.Critical,\n\n\t\t\tsourceConfidentiality: types.Restricted,\n\t\t\tsourceIntegrity:       types.Important,\n\t\t\tsourceAvailability:    types.Important,\n\n\t\t\texpectedImpact:                 types.MediumImpact,\n\t\t\texpectedMostRelevantAssetTitle: \"Test Technical Asset\",\n\t\t},\n\t}\n\n\tfor name, testCase := range testCases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\trule := NewMissingIdentityStoreRule()\n\t\t\trisks, err := rule.GenerateRisks(&types.Model{\n\t\t\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\t\t\"ta1\": {\n\t\t\t\t\t\tTitle:               \"Test Technical Asset\",\n\t\t\t\t\t\tOutOfScope:          false,\n\t\t\t\t\t\tAvailability:        testCase.targetAvailability,\n\t\t\t\t\t\tConfidentiality:     testCase.targetConfidentiality,\n\t\t\t\t\t\tIntegrity:           testCase.targetIntegrity,\n\t\t\t\t\t\tDataAssetsProcessed: []string{\"da1\"},\n\t\t\t\t\t},\n\t\t\t\t\t\"ta2\": {\n\t\t\t\t\t\tTitle:           \"Test Sparring Technical Asset\",\n\t\t\t\t\t\tOutOfScope:      false,\n\t\t\t\t\t\tAvailability:    testCase.sourceAvailability,\n\t\t\t\t\t\tConfidentiality: testCase.sourceConfidentiality,\n\t\t\t\t\t\tIntegrity:       testCase.sourceIntegrity,\n\t\t\t\t\t\tCommunicationLinks: []*types.CommunicationLink{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tTargetId:      \"ta1\",\n\t\t\t\t\t\t\t\tAuthorization: types.EndUserIdentityPropagation,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tDataAssets: map[string]*types.DataAsset{\n\t\t\t\t\t\"da1\": {\n\t\t\t\t\t\tTitle:           \"Test Data Asset\",\n\t\t\t\t\t\tAvailability:    testCase.dataProcessedAvailability,\n\t\t\t\t\t\tConfidentiality: testCase.dataProcessedConfidentiality,\n\t\t\t\t\t\tIntegrity:       testCase.dataProcessedIntegrity,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tassert.Nil(t, err)\n\t\t\tassert.Len(t, risks, 1)\n\t\t\tassert.Equal(t, testCase.expectedImpact, risks[0].ExploitationImpact)\n\t\t\texpTitle := fmt.Sprintf(\"<b>Missing Identity Store</b> in the threat model (referencing asset <b>%s</b> as an example)\", testCase.expectedMostRelevantAssetTitle)\n\t\t\tassert.Equal(t, expTitle, risks[0].Title)\n\t\t})\n\t}\n}\n"
