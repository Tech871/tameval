[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"
bench_version = 1

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/register_mode.py -m pytest -q --junit-xml=test_output.xml hdl_registers/test/test_register_mode.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.register_mode --unit-test hdl_registers.test.test_register_mode --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/register_mode.py --unit-test hdl_registers/test/test_register_mode.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 76.0
original_coverage = 83.0
mutation_kill_rate = 27.0
original_mutation_kill_rate = 64.0
covered_lines = [ 9, 10, 13, 14, 15, 16, 19, 26, 27, 30, 37, 38, 41, 66, 100, 106, 107, 108, 109, 110, 111, 113, 114, 125, 130, 131, 133, 135, 145, 153, 156,]
missed_lines = [ 101, 123, 140, 141, 143, 151, 154, 157, 158, 161,]

[input_info]
test_file_path = "hdl_registers/test/test_register_mode.py"
focal_file_path = "hdl_registers/register_mode.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/test/test_register_mode.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/register_mode.py"
first_commit_date = "2024-07-16"
last_commit_date = "2025-02-11"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\nfrom hdl_registers.register_mode import (\n    HardwareAccessDirection,\n    RegisterMode,\n    SoftwareAccessDirection,\n)\n\n\n\n\ndef test_software_access_direction():\n    register_mode = RegisterMode(\n        shorthand=\"a\",\n        name=\"b\",\n        description=\"c\",\n        software_can_read=True,\n        software_can_write=False,\n        hardware_has_up=False,\n    )\n\n    assert register_mode.is_software_accessible(SoftwareAccessDirection.READ)\n    assert not register_mode.is_software_accessible(SoftwareAccessDirection.WRITE)\n"
