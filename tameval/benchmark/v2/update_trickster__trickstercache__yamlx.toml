[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "trickstercache/trickster"
sha = "99ac2462add00d5014794ec929eec27c7f1ceaa7"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/util/yamlx/yamlx.go pkg/util/yamlx/yamlx_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/util/yamlx/yamlx.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = 70.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/util/yamlx/yamlx_test.go"
focal_file_path = "pkg/util/yamlx/yamlx.go"
test_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/util/yamlx/yamlx_test.go"
focal_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/util/yamlx/yamlx.go"
first_commit_date = "2021-03-05"
last_commit_date = "2025-05-26"
test_file_content = "/*\n * Copyright 2018 The Trickster Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage yamlx\n\nimport (\n\t\"testing\"\n)\n\nconst testYML = `\nfrontend:\n  test:\n    apples: 4\n    subkey:\n      types:\n        - - green\n          - red\n  : # will not validate this\n`\n\nfunc TestGetKeyList(t *testing.T) {\n\n\tkeys, err := GetKeyList(testYML)\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\n\tif _, ok := keys[\"frontend.test.subkey.types\"]; !ok {\n\t\tt.Error(\"missing key\")\n\t}\n\n}\n\nfunc TestIsDefined(t *testing.T) {\n\n\tk := KeyLookup{\"test\": nil}\n\tif k.IsDefined(\"testing\") {\n\t\tt.Error(\"expected false\")\n\t}\n\n}\n\nfunc TestGetIndentDepth(t *testing.T) {\n\n\ti := getIndentDepth(\"      \")\n\tif i != 6 {\n\t\tt.Errorf(\"expected %d got %d\", 6, i)\n\t}\n\n}\n\nfunc TestGetDepthData(t *testing.T) {\n\n\t_, err := getDepthData(1, nil)\n\tif err != errDepthNotInList {\n\t\tt.Error(\"expected err for depth not in list\", err)\n\t}\n\n}\n\nfunc TestGetParentDepthData(t *testing.T) {\n\n\t_, err := getParentDepthData(1, nil, nil)\n\tif err != errEmptyDepthList {\n\t\tt.Error(\"expected err for empty depth list\", err)\n\t}\n\n}\n\nfunc TestGetKeyword(t *testing.T) {\n\ts := getKeyword(\"myline\", 0)\n\tif s != \"\" {\n\t\tt.Error(\"expected empty string got\", s)\n\t}\n}"
