[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "microbus-io/fabric"
sha = "55cc62f52e58a2f8386b6086061b17a7d133fea3"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out utils/strings.go utils/strings_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting utils/strings.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 85.0
original_coverage = 85.0
mutation_kill_rate = 62.0
original_mutation_kill_rate = 62.0
covered_lines = [ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 107, 108, 109, 110, 111, 112, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 139, 143, 144, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 176, 177, 178, 179, 183, 184, 185, 186, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207,]
missed_lines = [ 35, 36, 37, 42, 43, 44, 102, 103, 104, 140, 141, 142, 145, 146, 147, 153, 154, 155, 168, 169, 170,]

[input_info]
test_file_path = "utils/strings_test.go"
focal_file_path = "utils/strings.go"
test_file_url = "https://github.com/microbus-io/fabric/blob/55cc62f52e58a2f8386b6086061b17a7d133fea3/utils/strings_test.go"
focal_file_url = "https://github.com/microbus-io/fabric/blob/55cc62f52e58a2f8386b6086061b17a7d133fea3/utils/strings.go"
first_commit_date = "2022-11-10"
last_commit_date = "2025-07-12"
test_file_content = "/*\nCopyright (c) 2023-2025 Microbus LLC and various contributors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage utils\n\nimport (\n\t\"errors\"\n\t\"testing\"\n\n\t\"github.com/golang-jwt/jwt/v4\"\n\t\"github.com/microbus-io/testarossa\"\n)\n\nfunc TestUtils_ToKebabCase(t *testing.T) {\n\tt.Parallel()\n\ttt := testarossa.For(t)\n\n\ttestCases := map[string]string{\n\t\t\"fooBar\":     \"foo-bar\",\n\t\t\"FooBar\":     \"foo-bar\",\n\t\t\"fooBAR\":     \"foo-bar\",\n\t\t\"FooBAR\":     \"foo-bar\",\n\t\t\"urlEncoder\": \"url-encoder\",\n\t\t\"URLEncoder\": \"url-encoder\",\n\t\t\"foobarX\":    \"foobar-x\",\n\t\t\"a\":          \"a\",\n\t\t\"A\":          \"a\",\n\t\t\"HTTP\":       \"http\",\n\t\t\"\":           \"\",\n\n\t\t\"Foo BAR\":    \"foo-bar\",\n\t\t\"Foo  b A R\": \"foo-b-a-r\",\n\t\t\"Foo_BAR\":    \"foo-bar\",\n\t\t\"Foo___bAR\":  \"foo-b-ar\",\n\t\t\"Foo_ BAR\":   \"foo-bar\",\n\t\t\"Foo _ BAR\":  \"foo-bar\",\n\t\t\" FooBAR\":    \"-foo-bar\",\n\t\t\"_FooBAR\":    \"-foo-bar\",\n\t\t\"_ Foo-_BAR\": \"-foo-bar\",\n\n\t\t\"Foo123\":        \"foo-123\",\n\t\t\"123-foo\":       \"123-foo\",\n\t\t\" 123-foo\":      \"-123-foo\",\n\t\t\"_123-foo_\":     \"-123-foo-\",\n\t\t\"Foo123Bar\":     \"foo-123-bar\",\n\t\t\"Foo123bar\":     \"foo-123-bar\",\n\t\t\"Foo 123 bar\":   \"foo-123-bar\",\n\t\t\"foo 1 2 3 bar\": \"foo-1-2-3-bar\",\n\t}\n\tfor id, expected := range testCases {\n\t\tactual := ToKebabCase(id)\n\t\ttt.Equal(expected, actual, \"expected %s, got %s, in %s\", expected, actual, id)\n\t}\n}\n\nfunc TestUtils_LooksLikeJWT(t *testing.T) {\n\tt.Parallel()\n\ttt := testarossa.For(t)\n\n\tnewSignedToken := func(claims jwt.MapClaims) string {\n\t\tx := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\t\ts, _ := x.SignedString([]byte(\"0123456789abcdef0123456789abcdef\"))\n\t\treturn s\n\t}\n\n\ttt.True(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.eyABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwzyz01234567890-_.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n\ttt.True(LooksLikeJWT(newSignedToken(jwt.MapClaims{})))\n\ttt.True(LooksLikeJWT(newSignedToken(jwt.MapClaims{\"claim\": \"something\"})))\n\ttt.True(LooksLikeJWT(newSignedToken(nil)))\n\n\t// Bad characters\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.e$$.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.e==.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")) // No padding\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.e+/.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\")) // Base64 URL\n\n\t// Incorrect dots\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:eyABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwzyz01234567890-_:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.eyABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwzyz01234567890-_.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n\n\t// Too short\n\ttt.False(LooksLikeJWT(\"eyXXX.eyABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwzyz01234567890-_.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.e.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.e30.XXX\"))\n\ttt.False(LooksLikeJWT(\"eyXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.X.X\"))\n\ttt.False(LooksLikeJWT(\"eyX.X.X\"))\n\n\t// No ey\n\ttt.False(LooksLikeJWT(\"xxXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.eyABCDEFGHIJKLMNOPQRSTUVWZYZabcdefghijklmnopqrstuvwzyz01234567890-_.XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"))\n}\n\nfunc TestUtil_StringClaimFromJWT(t *testing.T) {\n\tt.Parallel()\n\ttt := testarossa.For(t)\n\n\tnewSignedToken := func(claims jwt.MapClaims) string {\n\t\tx := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\t\ts, _ := x.SignedString([]byte(\"0123456789abcdef0123456789abcdef\"))\n\t\treturn s\n\t}\n\n\ttoken := newSignedToken(jwt.MapClaims{\"sub\": \"123456\", \"claim\": \"something\", \"roles\": 12345})\n\tval, ok := StringClaimFromJWT(token, \"claim\")\n\ttt.True(ok)\n\ttt.Equal(\"something\", val)\n\tval, ok = StringClaimFromJWT(token, \"sub\")\n\ttt.True(ok)\n\ttt.Equal(\"123456\", val)\n\tval, ok = StringClaimFromJWT(token, \"roles\")\n\ttt.False(ok)\n\ttt.Equal(\"\", val)\n\tval, ok = StringClaimFromJWT(token, \"nosuchclaim\")\n\ttt.False(ok)\n\ttt.Equal(\"\", val)\n}\n\nfunc BenchmarkUtil_StringClaimFromJWT(b *testing.B) {\n\tnewSignedToken := func(claims jwt.MapClaims) string {\n\t\tx := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\t\ts, _ := x.SignedString([]byte(\"0123456789abcdef0123456789abcdef\"))\n\t\treturn s\n\t}\n\ttoken := newSignedToken(jwt.MapClaims{\n\t\t\"sub\":   \"harry@hogwarts.edu\",\n\t\t\"claim\": \"something\",\n\t\t\"roles\": \"wizard student\",\n\t\t\"groups\": []string{\n\t\t\t\"Gryffindor\",\n\t\t},\n\t\t\"born\": 1980,\n\t})\n\n\tb.ResetTimer()\n\tfor range b.N {\n\t\tStringClaimFromJWT(token, \"claim\")\n\t}\n\t// goos: darwin\n\t// goarch: arm64\n\t// pkg: github.com/microbus-io/fabric/utils\n\t// cpu: Apple M1 Pro\n\t// BenchmarkUtil_StringClaimFromJWT-10    \t 2037859\t       575.3 ns/op\t      40 B/op\t       2 allocs/op\n}\n\nfunc TestUtil_AnyToString(t *testing.T) {\n\tt.Parallel()\n\ttt := testarossa.For(t)\n\n\ttc := map[string]any{\n\t\t\"string\":        \"string\",\n\t\t\"5\":             5,\n\t\t\"123.45\":        123.45,\n\t\t\"TextMarshaler\": &textMarshaler{},\n\t\t\"Stringer\":      &stringer{},\n\t\t\"Error!\":        errors.New(\"Error!\"),\n\t\t\"true\":          true,\n\t\t\"false\":         false,\n\t}\n\tfor expected, o := range tc {\n\t\tactual := AnyToString(o)\n\t\ttt.Equal(expected, actual)\n\t}\n}\n\ntype textMarshaler struct{}\n\nfunc (tm *textMarshaler) MarshalText() ([]byte, error) {\n\treturn []byte(\"TextMarshaler\"), nil\n}\n\ntype stringer struct{}\n\nfunc (s *stringer) String() string {\n\treturn \"Stringer\"\n}\n"
