[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "Password4j/password4j"
sha = "18aaa552d76471585cc40517e05adb9e8dd1ad3d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=Blake2bTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Blake2b  -DtargetTests=**.Blake2bTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 83.0
original_coverage = 83.0
mutation_kill_rate = 65.0
original_mutation_kill_rate = 65.0
covered_lines = [ 23, 26, 44, 46, 48, 50, 52, 54, 62, 63, 65, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 100, 102, 104, 105, 116, 118, 142, 154, 155, 156, 169, 170, 171, 175, 176, 177, 179, 181, 183, 185, 189, 193, 195, 196, 205, 206, 207, 208, 209, 210, 211, 212, 217, 219, 220, 222, 225, 230, 231, 232, 233, 235, 236, 237, 238, 242, 244, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259,]
missed_lines = [ 120, 121, 123, 124, 125, 127, 129, 130, 131, 135, 136, 137, 143, 145, 146, 148, 150, 173,]

[input_info]
test_file_path = "src/test/com/password4j/Blake2bTest.java"
focal_file_path = "src/main/java/com/password4j/Blake2b.java"
test_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/test/com/password4j/Blake2bTest.java"
focal_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/main/java/com/password4j/Blake2b.java"
first_commit_date = "2021-01-25"
last_commit_date = "2024-05-01"
test_file_content = "/*\n *  (C) Copyright 2020 Password4j (http://password4j.com/).\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\npackage com.password4j;\n\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.*;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\n\npublic class Blake2bTest\n{\n\n    static class TestCase\n    {\n        String message;\n        int length;\n        String expected;\n\n        public TestCase(String message, int length, String expected)\n        {\n            this.message = message;\n            this.length = length;\n            this.expected = expected;\n        }\n    }\n\n    private static final List<Blake2bTest.TestCase> CASES = Arrays.asList(\n        new TestCase(\"IamUsingBlake2b###\", 512/8, \"5fc5a199294099e98280dac6047523aa123ba29e6995618339c9590e4dca983dea2529ad85afbac5613c495b3fb50bf2d5919cb3f51f6a9dba78a33f9d278f6f\"),\n            new TestCase(null, 512/8, \"786a02f742015903c6c6fd852552d272912f4740e15847618a86e217f71f5419d25e1031afee585313896444934eb04b903a685b1448b755d56f701afe9be2ce\"),\n            new TestCase(null, 384/8, \"b32811423377f52d7862286ee1a72ee540524380fda1724a6f25d7978c6fd3244a6caf0498812673c5e05ef583825100\"),\n            new TestCase(null, 256/8, \"0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8\"),\n            new TestCase(null, 224/8, \"836cc68931c2e4e3e838602eca1902591d216837bafddfe6f0c8cb07\"),\n\n            new TestCase(\"0\", 384/8, \"c62e79958b2e7796d4b6afaba57b3a929a5c38125f56703cae90a952a96a6ef2a2d42376fe7183222779e3790fc95a22\"),\n\n            new TestCase(\"!$%^&*()_+@~{}\", 512/8, \"a7128f0b9a745d7073be967e2dc4ceb5e326a998ca45c451835c1c4eecd499dea1c1e04e15e890b2ac32675baea270785dd12d591646bc4df7c545b31041ed22\")\n    );\n\n\n    @Test\n    public void test()\n    {\n        for (TestCase test : CASES)\n        {\n            Blake2b instance = new Blake2b(test.length);\n            instance.update(test.message == null ? null : test.message.getBytes(Utils.DEFAULT_CHARSET));\n            byte[] out = new byte[test.length];\n            instance.doFinal(out, 0);\n            assertEquals(test.expected, Utils.toHex(out));\n        }\n    }\n\n\n    @Test\n    public void parallelTest() throws InterruptedException, ExecutionException\n    {\n\n        ExecutorService executors = Executors.newCachedThreadPool();\n        List<Callable<Boolean>> tasks = new ArrayList<>();\n        for (final TestCase test : CASES)\n        {\n            Callable<Boolean> c = () -> {\n                Blake2b instance = new Blake2b(test.length);\n                instance.update(test.message == null ? null : test.message.getBytes(Utils.DEFAULT_CHARSET));\n                byte[] out = new byte[test.length];\n                instance.doFinal(out, 0);\n                return test.expected.equals(Utils.toHex(out));\n            };\n            tasks.add(c);\n        }\n        List<Future<Boolean>> results = executors.invokeAll(tasks);\n\n        for (Future<Boolean> future : results)\n        {\n            assertTrue(future.get());\n        }\n\n    }\n\n    @Test(expected = BadParametersException.class)\n    public void badTest1()\n    {\n        // GIVEN\n\n        // WHEN\n        new Blake2b(0);\n    }\n\n\n    @Test(expected = BadParametersException.class)\n    public void badTest2()\n    {\n        // GIVEN\n\n        // WHEN\n        new Blake2b(65);\n    }\n\n\n\n\n\n\n\n}\n\n"
