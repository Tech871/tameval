[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "Softcatala/open-dubbing"
sha = "373607ed4c1e567bfa50c431bc1147d7c62574aa"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=open_dubbing/text_to_speech_api.py -m pytest -q --junit-xml=test_output.xml tests/text_to_speech_api_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target open_dubbing.text_to_speech_api --unit-test tests.text_to_speech_api_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target open_dubbing/text_to_speech_api.py --unit-test tests/text_to_speech_api_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 42.0
original_coverage = 86.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 14, 15, 17, 18, 20, 22, 23, 26, 28, 29, 30, 31, 32, 34, 42, 43, 45, 46, 47, 48, 50, 55, 57, 61, 63, 66, 116,]
missed_lines = [ 35, 36, 37, 38, 40, 64, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 92, 94, 95, 96, 97, 98, 101, 104, 106, 109, 111, 114, 117, 118, 119, 120, 122, 123, 124,]

[input_info]
test_file_path = "tests/text_to_speech_api_test.py"
focal_file_path = "open_dubbing/text_to_speech_api.py"
test_file_url = "https://github.com/Softcatala/open-dubbing/blob/373607ed4c1e567bfa50c431bc1147d7c62574aa/tests/text_to_speech_api_test.py"
focal_file_url = "https://github.com/Softcatala/open-dubbing/blob/373607ed4c1e567bfa50c431bc1147d7c62574aa/open_dubbing/text_to_speech_api.py"
first_commit_date = "2024-10-24"
last_commit_date = "2025-01-10"
test_file_content = "# Copyright 2024 Jordi Mas i Hern√†ndez <jmas@softcatala.org>\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nimport unittest.mock as mock\n\nfrom unittest.mock import patch\n\nfrom open_dubbing.text_to_speech_api import TextToSpeechAPI\n\n\nclass MockResponse:\n    def __init__(self, content, status_code=200):\n        self.content = content\n        self.status_code = status_code\n\n\nclass TestTextToSpeechAPI:\n    # Mock response class to simulate requests.get\n\n    # Mock voices data that would be returned by the server\n    mock_voices_data = [\n        {\"id\": \"voice1\", \"language\": \"cat\", \"gender\": \"female\", \"region\": \"US\"},\n        {\"id\": \"voice2\", \"language\": \"eng\", \"gender\": \"male\", \"region\": \"UK\"},\n        {\"id\": \"voice3\", \"language\": \"cat\", \"gender\": \"female\", \"region\": \"ES\"},\n    ]\n\n    @patch.object(TextToSpeechAPI, \"_get_voices\", return_value=mock_voices_data)\n    def test_get_available_voices(self, mock_get_voices):\n        api = TextToSpeechAPI(server=\"http://mockserver.com\")\n        voices = api.get_available_voices(language_code=\"cat\")\n\n        assert len(voices) == 2\n        assert voices[0].name == \"voice1\"\n        assert voices[1].name == \"voice3\"\n\n\n    # Path to a real .wav file that exists on your disk for testing\n    WAV_FILE_PATH = \"/path/to/your/test.wav\"\n"
