[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "redpanda-data/benthos"
sha = "7da18c5fb096a3607f9f70c06614742b24ae938e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/impl/pure/processor_parse_log.go internal/impl/pure/processor_parse_log_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/impl/pure/processor_parse_log.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 51.69
original_coverage = 81.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 105, 106, 107, 108, 109, 110, 111, 112, 129, 130, 134, 143, 144, 145, 146, 147, 148, 149, 150, 151, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 274, 275, 276, 277, 292, 293, 294, 295, 296, 297, 298, 302, 305, 306, 312, 313,]
missed_lines = [ 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 136, 137, 152, 153, 154, 179, 180, 181, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 278, 279, 281, 299, 300, 301, 307, 308, 309, 310, 316, 317, 318,]

[input_info]
test_file_path = "internal/impl/pure/processor_parse_log_test.go"
focal_file_path = "internal/impl/pure/processor_parse_log.go"
test_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_parse_log_test.go"
focal_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_parse_log.go"
first_commit_date = "2022-04-27"
last_commit_date = "2025-01-09"
test_file_content = "// Copyright 2025 Redpanda Data, Inc.\n\npackage pure_test\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/redpanda-data/benthos/v4/internal/component/testutil\"\n\t\"github.com/redpanda-data/benthos/v4/internal/manager/mock\"\n\t\"github.com/redpanda-data/benthos/v4/internal/message\"\n\t\"github.com/redpanda-data/benthos/v4/public/bloblang\"\n\t\"github.com/redpanda-data/benthos/v4/public/service\"\n)\n\n\nfunc TestParseLogRFC5424(t *testing.T) {\n\ttype testCase struct {\n\t\tname   string\n\t\tinput  string\n\t\toutput string\n\t}\n\ttests := []testCase{\n\t\t{\n\t\t\tname:   \"valid syslog_rfc5424 1\",\n\t\t\tinput:  `<42>4 2049-10-11T22:14:15.003Z toaster.smarthome myapp - 2 [home01 device_id=\"43\"] failed to make a toast.`,\n\t\t\toutput: `{\"appname\":\"myapp\",\"facility\":5,\"hostname\":\"toaster.smarthome\",\"message\":\"failed to make a toast.\",\"msgid\":\"2\",\"priority\":42,\"severity\":2,\"structureddata\":{\"home01\":{\"device_id\":\"43\"}},\"timestamp\":\"2049-10-11T22:14:15.003Z\",\"version\":4}`,\n\t\t},\n\t\t{\n\t\t\tname:   \"valid syslog_rfc5424 2\",\n\t\t\tinput:  `<23>4 2032-10-11T22:14:15.003Z foo.bar baz - 10 [home02 device_id=\"44\"] test log.`,\n\t\t\toutput: `{\"appname\":\"baz\",\"facility\":2,\"hostname\":\"foo.bar\",\"message\":\"test log.\",\"msgid\":\"10\",\"priority\":23,\"severity\":7,\"structureddata\":{\"home02\":{\"device_id\":\"44\"}},\"timestamp\":\"2032-10-11T22:14:15.003Z\",\"version\":4}`,\n\t\t},\n\t}\n\n\tconf, err := testutil.ProcessorFromYAML(`\nparse_log:\n  format: syslog_rfc5424\n  best_effort: true\n`)\n\trequire.NoError(t, err)\n\n\tproc, err := mock.NewManager().NewProcessor(conf)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(tt *testing.T) {\n\t\t\tmsgsOut, res := proc.ProcessBatch(context.Background(), message.QuickBatch([][]byte{[]byte(test.input)}))\n\t\t\tif res != nil {\n\t\t\t\ttt.Fatal(res)\n\t\t\t}\n\t\t\tif len(msgsOut) != 1 {\n\t\t\t\ttt.Fatalf(\"Wrong count of result messages: %v != 1\", len(msgsOut))\n\t\t\t}\n\t\t\tif exp, act := test.output, string(msgsOut[0].Get(0).AsBytes()); exp != act {\n\t\t\t\ttt.Errorf(\"Wrong result: %v != %v\", act, exp)\n\t\t\t}\n\n\t\t\texe, err := bloblang.Parse(`json(\"structureddata\").map_each(i -> if i.value.type() == \"unknown\" { throw(\"kaboom!\") })`)\n\t\t\tif err != nil {\n\t\t\t\ttt.Errorf(\"Failed to parse bloblang: %s\", err)\n\t\t\t}\n\t\t\tif _, err := service.NewInternalMessage(msgsOut[0].Get(0)).BloblangQuery(exe); err != nil {\n\t\t\t\ttt.Errorf(\"Invalid structureddata field: %s\", err)\n\t\t\t}\n\t\t})\n\t}\n}\n"
