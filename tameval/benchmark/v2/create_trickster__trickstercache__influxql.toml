[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "trickstercache/trickster"
sha = "99ac2462add00d5014794ec929eec27c7f1ceaa7"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/backends/influxdb/influxql/influxql.go pkg/backends/influxdb/influxql/influxql_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/backends/influxdb/influxql/influxql.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 62.0
original_coverage = 62.0
mutation_kill_rate = 33.0
original_mutation_kill_rate = 33.0
covered_lines = [ 58, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 116, 117, 118, 125, 131, 135, 136, 137, 138, 139, 147, 148, 149, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 180, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 212, 213, 214, 215,]
missed_lines = [ 59, 60, 61, 67, 68, 69, 70, 71, 79, 80, 81, 90, 91, 92, 98, 99, 100, 108, 109, 114, 115, 119, 120, 121, 122, 123, 126, 127, 128, 132, 133, 134, 140, 141, 142, 143, 144, 153, 154, 155, 167, 168, 169, 177, 178, 179, 203, 204, 205, 206, 207, 208, 209,]

[input_info]
test_file_path = "pkg/backends/influxdb/influxql/influxql_test.go"
focal_file_path = "pkg/backends/influxdb/influxql/influxql.go"
test_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/backends/influxdb/influxql/influxql_test.go"
focal_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/backends/influxdb/influxql/influxql.go"
first_commit_date = "2025-05-15"
last_commit_date = "2025-05-15"
test_file_content = "/*\n * Copyright 2018 The Trickster Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage influxql\n\nimport (\n\t\"bytes\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/influxdata/influxql\"\n\t\"github.com/trickstercache/trickster/v2/pkg/backends/influxdb/iofmt\"\n\t\"github.com/trickstercache/trickster/v2/pkg/proxy/headers\"\n\t\"github.com/trickstercache/trickster/v2/pkg/proxy/params\"\n\t\"github.com/trickstercache/trickster/v2/pkg/timeseries\"\n)\n\nconst expectedTokenized = \"SELECT * FROM some_column WHERE time >= '$START_TIME$' AND time < '$END_TIME$' GROUP BY time(1m)\"\nconst untokenized = \"SELECT * FROM some_column WHERE time >= now() - 6h GROUP BY time(1m)\"\n\nconst testQuery = `SELECT mean(\"value\") FROM \"monthly\".\"rollup.1min\" WHERE (\"application\" = 'web') AND time >= now() - 6h ` +\n\t`GROUP BY time(15s), \"cluster\" fill(null)`\n\nvar testVals = url.Values(map[string][]string{\"q\": {testQuery},\n\t\"epoch\": {\"ms\"}})\nvar testRawQuery = testVals.Encode()\n\nfunc TestParseTimeRangeQuery(t *testing.T) {\n\n\t// test GET\n\treq := &http.Request{\n\t\tMethod: http.MethodGet,\n\t\tURL: &url.URL{\n\t\t\tScheme:   \"https\",\n\t\t\tHost:     \"blah.com\",\n\t\t\tPath:     \"/\",\n\t\t\tRawQuery: testRawQuery,\n\t\t}}\n\n\ttrq, _, _, err := ParseTimeRangeQuery(req, iofmt.InfluxqlGet)\n\tif err != nil {\n\t\tt.Error(err)\n\t} else {\n\t\tif trq.Step.Seconds() != 15 {\n\t\t\tt.Errorf(\"expected %d got %d\", 15, int(trq.Step.Seconds()))\n\t\t}\n\t\tif int(trq.Extent.End.Sub(trq.Extent.Start).Hours()) != 6 {\n\t\t\tt.Errorf(\"expected %d got %d\", 6, int(trq.Extent.End.Sub(trq.Extent.Start).Hours()))\n\t\t}\n\t}\n\n\treq, _ = http.NewRequest(http.MethodPost, \"http://blah.com/\", io.NopCloser(strings.NewReader(testRawQuery)))\n\treq.Header.Set(headers.NameContentLength, strconv.Itoa(len(testRawQuery)))\n\treq.Header.Set(headers.NameContentType, headers.ValueXFormURLEncoded)\n\n\ttrq, _, _, err = ParseTimeRangeQuery(req, iofmt.InfluxqlPost)\n\tif err != nil {\n\t\tt.Error(err)\n\t} else {\n\t\tif trq.Step.Seconds() != 15 {\n\t\t\tt.Errorf(\"expected %d got %d\", 15, int(trq.Step.Seconds()))\n\t\t}\n\t\tif int(trq.Extent.End.Sub(trq.Extent.Start).Hours()) != 6 {\n\t\t\tt.Errorf(\"expected %d got %d\", 6, int(trq.Extent.End.Sub(trq.Extent.Start).Hours()))\n\t\t}\n\t}\n\n}\n\nfunc TestSetExtent(t *testing.T) {\n\n\tstart := time.Now().UTC().Add(time.Duration(-6) * time.Hour).Truncate(time.Second)\n\tend := time.Now().UTC().Truncate(time.Second)\n\n\tstartToken := start.Format(time.RFC3339Nano)\n\tendToken := end.Add(time.Second * 60).Format(time.RFC3339Nano)\n\n\texpected := strings.ReplaceAll(strings.ReplaceAll(expectedTokenized, \"$START_TIME$\", startToken), \"$END_TIME$\", endToken)\n\n\tqs := url.Values{\"q\": {untokenized}, \"epoch\": {\"ms\"}}.Encode()\n\n\ttu, _ := url.Parse(\"http://example.com?\" + qs)\n\n\tr, _ := http.NewRequest(http.MethodGet, tu.String(), nil)\n\ttrq := &timeseries.TimeRangeQuery{TemplateURL: tu, Step: time.Second * 60, Statement: untokenized}\n\te := &timeseries.Extent{Start: start, End: end}\n\tp := influxql.NewParser(strings.NewReader(trq.Statement))\n\tq, err := p.ParseQuery()\n\tif err != nil {\n\t\tt.Error(err)\n\t}\n\tSetExtent(r, trq, e, q)\n\tif expected != r.URL.Query().Get(\"q\") {\n\t\tt.Errorf(\"\\nexpected [%s]\\ngot    [%s]\", expected, r.URL.Query().Get(\"q\"))\n\t}\n\n\tr.Method = http.MethodPost\n\tr.Body = io.NopCloser(bytes.NewBufferString(qs))\n\tSetExtent(r, trq, e, q)\n\tv, _, _ := params.GetRequestValues(r)\n\tif expected != v.Get(\"q\") {\n\t\tt.Errorf(\"\\nexpected [%s]\\ngot    [%s]\", expected, v.Get(\"q\"))\n\t}\n\n}\n"
