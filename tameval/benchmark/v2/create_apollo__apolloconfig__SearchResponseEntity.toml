[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apolloconfig/apollo"
sha = "4fa881a973996edf978c9b8e78719b437b64169c"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl apollo-common -Dtest=SearchResponseEntityTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl apollo-common -DtargetClasses=**.SearchResponseEntity  -DtargetTests=**.SearchResponseEntityTest  -DoutputFormats=XML"
coverage_report_path = "apollo-common/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "apollo-common/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 52.0
original_coverage = 100.0
mutation_kill_rate = 62.0
original_mutation_kill_rate = 100.0
covered_lines = [ 20, 37, 38, 39, 40, 41, 42, 53, 57, 61, 64,]
missed_lines = [ 28, 29, 30, 31, 32, 33, 46, 47, 48, 49,]

[input_info]
test_file_path = "apollo-common/src/test/java/com/ctrip/framework/apollo/common/http/SearchResponseEntityTest.java"
focal_file_path = "apollo-common/src/main/java/com/ctrip/framework/apollo/common/http/SearchResponseEntity.java"
test_file_url = "https://github.com/apolloconfig/apollo/blob/4fa881a973996edf978c9b8e78719b437b64169c/apollo-common/src/test/java/com/ctrip/framework/apollo/common/http/SearchResponseEntityTest.java"
focal_file_url = "https://github.com/apolloconfig/apollo/blob/4fa881a973996edf978c9b8e78719b437b64169c/apollo-common/src/main/java/com/ctrip/framework/apollo/common/http/SearchResponseEntity.java"
first_commit_date = "2024-09-20"
last_commit_date = "2024-09-20"
test_file_content = "/*\n * Copyright 2024 Apollo Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n *\n */\npackage com.ctrip.framework.apollo.common.http;\n\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.http.HttpStatus;\n\nimport static org.junit.Assert.*;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class SearchResponseEntityTest {\n\n\n    @Test\n    public void testOkWithMessage_WithValidBodyAndMessage_ShouldReturnOkResponseWithMessage() {\n        String body = \"test body\";\n        String message = \"test message\";\n        SearchResponseEntity<String> response = SearchResponseEntity.okWithMessage(body, message);\n\n        assertEquals(HttpStatus.OK.value(), response.getCode());\n        assertEquals(message, response.getMessage());\n        assertEquals(body, response.getBody());\n        assertTrue(response.isHasMoreData());\n    }\n\n}\n"
