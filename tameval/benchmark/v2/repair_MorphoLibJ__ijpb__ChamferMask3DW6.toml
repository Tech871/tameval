[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "ijpb/MorphoLibJ"
sha = "7d691dff36baa0bbca6fd17f71c93d8414b75b17"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ChamferMask3DW6Test && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ChamferMask3DW6  -DtargetTests=**.ChamferMask3DW6Test  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 92.0
mutation_kill_rate = nan
original_mutation_kill_rate = 75.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/inra/ijpb/binary/distmap/ChamferMask3DW6Test.java"
focal_file_path = "src/main/java/inra/ijpb/binary/distmap/ChamferMask3DW6.java"
test_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/test/java/inra/ijpb/binary/distmap/ChamferMask3DW6Test.java"
focal_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/main/java/inra/ijpb/binary/distmap/ChamferMask3DW6.java"
first_commit_date = "2021-10-15"
last_commit_date = "2024-07-23"
test_file_content = "package inra.ijpb.binary.distmap;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport ij.ImageStack;\n\npublic class ChamferMask3DW6Test\n{\n\t@Test\n\tpublic void testDistanceMap()\n\t{\n\t\tImageStack image = ImageStack.create(20, 20, 20, 8);\n\t\tfor (int z = 2; z < 19; z++)\n\t\t{\n\t\t\tfor (int y = 2; y < 19; y++)\n\t\t\t{\n\t\t\t\tfor (int x = 2; x < 19; x++)\n\t\t\t\t{\n\t\t\t\t\timage.setVoxel(x, y, z, 255);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tChamferMask3D mask = new ChamferMask3DW6(7, 10, 12, 16, 17, 21);\n\t\tDistanceTransform3D algo = new ChamferDistanceTransform3DShort(mask, true);\n\n\t\tImageStack result = algo.distanceMap(image);\n\t\tassertEquals(16, result.getBitDepth());\n\n\t\tdouble middle = result.getVoxel(10, 10, 10);\n\t\tassertEquals(9, middle, .1);\n\t\tresult.nonExistentMethod();\n\t}\n\n\t@Test\n\tpublic void testDistanceMap_FromCenter()\n\t{\n\t\tImageStack image = ImageStack.create(11, 11, 11, 8);\n\t\tfor (int z = 0; z < 11; z++)\n\t\t{\n\t\t\tfor (int y = 0; y < 11; y++)\n\t\t\t{\n\t\t\t\tfor (int x = 0; x < 11; x++)\n\t\t\t\t{\n\t\t\t\t\timage.setVoxel(x, y, z, 255);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\timage.setVoxel(5, 5, 5, 0);\n\n\t\tChamferMask3D mask = new ChamferMask3DW6(7, 10, 12, 16, 17, 21);\n\t\tDistanceTransform3D algo = new ChamferDistanceTransform3DShort(mask, true);\n\n\t\tImageStack result = algo.distanceMap(image);\n\t\tassertEquals(16, result.getBitDepth());\n\n\t\tassertEquals(1, result.getVoxel(4, 5, 5), 0.1);\n\t\tassertEquals(1, result.getVoxel(6, 5, 5), 0.1);\n\t\tassertEquals(1, result.getVoxel(4, 4, 5), 0.1);\n\t\tassertEquals(Math.round(12.0 / 7.0), result.getVoxel(4, 4, 4), 0.1);\n\n\t\tint exp = (int) Math.round(5 * 12.0 / 7.0);\n\t\tassertEquals(exp, result.getVoxel( 0,  0,  0), .01);\n\t\tassertEquals(exp, result.getVoxel(10,  0,  0), .01);\n\t\tassertEquals(exp, result.getVoxel( 0, 10,  0), .01);\n\t\tassertEquals(exp, result.getVoxel(10, 10,  0), .01);\n\t\tassertEquals(exp, result.getVoxel( 0,  0, 10), .01);\n\t\tassertEquals(exp, result.getVoxel(10,  0, 10), .01);\n\t\tassertEquals(exp, result.getVoxel( 0, 10, 10), .01);\n\t\tassertEquals(exp, result.getVoxel(10, 10, 10), .01);\n\t\tChamferMask3D incorrectMask = new NonExistentClass(7, 10, 12, 16, 17, 21);\n\t}\n}"
