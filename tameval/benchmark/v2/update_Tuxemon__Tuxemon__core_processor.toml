[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/core/core_processor.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_core_processor.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.core.core_processor --unit-test tests.tuxemon.test_core_processor --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/core/core_processor.py --unit-test tests/tuxemon/test_core_processor.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 80.0
mutation_kill_rate = nan
original_mutation_kill_rate = 77.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/tuxemon/test_core_processor.py"
focal_file_path = "tuxemon/core/core_processor.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_core_processor.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/core/core_processor.py"
first_commit_date = "2025-04-07"
last_commit_date = "2025-05-17"
test_file_content = "# SPDX-License-Identifier: GPL-3.0\n# Copyright (c) 2014-2025 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>\nimport unittest\nfrom unittest.mock import MagicMock, Mock\n\nfrom tuxemon.core.core_condition import CoreCondition\nfrom tuxemon.core.core_effect import (\n    ItemEffect,\n    ItemEffectResult,\n    StatusEffect,\n    StatusEffectResult,\n    TechEffect,\n    TechEffectResult,\n)\nfrom tuxemon.core.core_processor import ConditionProcessor, EffectProcessor\nfrom tuxemon.item.item import Item\nfrom tuxemon.monster import Monster\nfrom tuxemon.session import Session\nfrom tuxemon.status.status import Status\nfrom tuxemon.technique.technique import Technique\n\n\nclass TestEffectProcessor(unittest.TestCase):\n    def setUp(self):\n        self.user = Mock(spec=Monster)\n        self.target = Mock(spec=Monster)\n        self.session = Mock(spec=Session)\n\n        self.technique = Mock(spec=Technique)\n        self.technique.name = \"\"\n        self.item = Mock(spec=Item)\n        self.item.name = \"\"\n        self.status = Mock(spec=Status)\n        self.status.name = \"\"\n\n        self.tech_effect = Mock(spec=TechEffect)\n        self.item_effect = Mock(spec=ItemEffect)\n        self.status_effect = Mock(spec=StatusEffect)\n\n        self.effects = [self.tech_effect, self.item_effect, self.status_effect]\n        self.processor = EffectProcessor(self.effects)\n\n    def test_process_tech(self):\n        self.tech_effect.apply.return_value = TechEffectResult(\n            name=\"Technique\",\n            success=True,\n            damage=10,\n            element_multiplier=1.2,\n            should_tackle=False,\n            extras=[\"Critical\"],\n        )\n\n        final_result = self.processor.process_tech(\n            session=self.session,\n            source=self.technique,\n            user=self.user,\n            target=self.target,\n        )\n\n        self.assertTrue(final_result.success)\n        self.assertEqual(final_result.damage, 10)\n        self.assertEqual(final_result.element_multiplier, 1.2)\n        self.assertListEqual(final_result.extras, [\"Critical\"])\n\n    def test_process_item(self):\n        self.item_effect.apply.return_value = ItemEffectResult(\n            name=\"Healing Item\",\n            success=True,\n            num_shakes=2,\n            extras=[\"Heal Boost\"],\n        )\n\n        final_result = self.processor.process_item(\n            session=self.session, source=self.item, target=self.target\n        )\n\n        self.assertTrue(final_result.success)\n        self.assertEqual(final_result.num_shakes, 2)\n        self.assertListEqual(final_result.extras, [\"Heal Boost\"])\n\n    def test_process_status(self):\n        self.status_effect.apply.return_value = StatusEffectResult(\n            name=\"Poison Status\",\n            success=True,\n            statuses=[\"Poison\"],\n            techniques=[\"Weaken\"],\n            extras=[\"Duration Boost\"],\n        )\n\n        final_result = self.processor.process_status(\n            session=self.session,\n            source=self.status,\n            target=self.target,\n        )\n\n        self.assertTrue(final_result.success)\n        self.assertListEqual(final_result.statuses, [\"Poison\"])\n        self.assertListEqual(final_result.techniques, [\"Weaken\"])\n        self.assertListEqual(final_result.extras, [\"Duration Boost\"])\n\n\nclass TestConditionProcessor(unittest.TestCase):\n    def setUp(self):\n        self.session = MagicMock(spec=Session)\n        self.core_condition = MagicMock(spec=CoreCondition)\n        self.target_monster = MagicMock(spec=Monster)\n\n    def test_no_conditions(self):\n        processor = ConditionProcessor(conditions=[])\n        self.assertTrue(processor.validate(self.session, self.target_monster))\n\n    def test_no_target(self):\n        processor = ConditionProcessor(conditions=[self.core_condition])\n        self.assertFalse(processor.validate(self.session, None))\n\n    def test_condition_passes_with_op(self):\n        self.core_condition.is_expected = True\n        self.core_condition.test_with_monster.return_value = True\n\n        processor = ConditionProcessor(conditions=[self.core_condition])\n        self.assertTrue(processor.validate(self.session, self.target_monster))\n\n    def test_condition_fails_with_op(self):\n        self.core_condition.is_expected = True\n        self.core_condition.test_with_monster.return_value = False\n\n        processor = ConditionProcessor(conditions=[self.core_condition])\n        self.assertFalse(processor.validate(self.session, self.target_monster))\n\n    def test_condition_passes_without_op(self):\n        self.core_condition.is_expected = False\n        self.core_condition.test_with_monster.return_value = False\n\n        processor = ConditionProcessor(conditions=[self.core_condition])\n        self.assertTrue(processor.validate(self.session, self.target_monster))\n\n    def test_condition_fails_without_op(self):\n        self.core_condition.is_expected = False\n        self.core_condition.test_with_monster.return_value = True\n\n        processor = ConditionProcessor(conditions=[self.core_condition])\n        self.assertFalse(processor.validate(self.session, self.target_monster))\n\n    def test_invalid_condition_type(self):\n        invalid_condition = MagicMock()\n        processor = ConditionProcessor(conditions=[invalid_condition])\n        self.assertFalse(processor.validate(self.session, self.target_monster))\n\n    def test_multiple_conditions_all_pass(self):\n        self.core_condition.is_expected = True\n        self.core_condition.test_with_monster.return_value = True\n\n        another_condition = MagicMock(spec=CoreCondition)\n        another_condition.is_expected = True\n        another_condition.test_with_monster.return_value = True\n\n        processor = ConditionProcessor(\n            conditions=[self.core_condition, another_condition]\n        )\n        self.assertTrue(processor.validate(self.session, self.target_monster))\n\n    def test_multiple_conditions_one_fails(self):\n        self.core_condition.is_expected = True\n        self.core_condition.test_with_monster.return_value = True\n\n        another_condition = MagicMock(spec=CoreCondition)\n        another_condition.is_expected = True\n        another_condition.test_with_monster.return_value = False\n\n        processor = ConditionProcessor(\n            conditions=[self.core_condition, another_condition]\n        )\n        self.assertFalse(processor.validate(self.session, self.target_monster))\n\n    def test_method_invocation_count(self):\n        self.core_condition.is_expected = True\n        self.core_condition.test_with_monster.return_value = True\n        processor = ConditionProcessor(conditions=[self.core_condition])\n        processor.validate(self.session, self.target_monster)\n        self.core_condition.test_with_monster.assert_called_once_with(\n            self.session, self.target_monster\n        )\n\n    def test_empty_conditions_with_none_target(self):\n        processor = ConditionProcessor(conditions=[])\n        self.assertTrue(processor.validate(self.session, None))"
