[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "basetenlabs/truss"
sha = "9d37d8696d3229f91970f999827fcda0a5aed410"
bench_version = 1

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=truss/local/local_config_handler.py -m pytest -q --junit-xml=test_output.xml truss/tests/local/test_local_config_handler.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target truss.local.local_config_handler --unit-test truss.tests.local.test_local_config_handler --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target truss/local/local_config_handler.py --unit-test truss/tests/local/test_local_config_handler.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 68.0
original_coverage = 84.0
mutation_kill_rate = 23.0
original_mutation_kill_rate = 46.0
covered_lines = [ 0, 1, 2, 3, 5, 6, 9, 10, 12, 13, 14, 16, 17, 18, 19, 22, 23, 25, 26, 27, 28, 29, 30, 32, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 64, 65, 66, 68, 69, 74, 75, 80, 81, 86, 87, 90, 91, 94, 95, 105, 106,]
missed_lines = [ 20, 33, 34, 70, 71, 72, 76, 77, 78, 82, 83, 84, 88, 92, 96, 97, 99, 100, 101, 102, 103, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118,]

[input_info]
test_file_path = "truss/tests/local/test_local_config_handler.py"
focal_file_path = "truss/local/local_config_handler.py"
test_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/tests/local/test_local_config_handler.py"
focal_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/local/local_config_handler.py"
first_commit_date = "2022-07-06"
last_commit_date = "2025-01-23"
test_file_content = "from contextlib import contextmanager\nfrom pathlib import Path\n\nfrom truss.local.local_config_handler import LocalConfigHandler\n\nCONFIG_CONTENT = '''\nsecrets:\n    secret_name: secret_value\n'''\n\n\ndef test_get_config(tmp_path):\n    with _truss_config_dir(tmp_path, CONFIG_CONTENT):\n        config = LocalConfigHandler.get_config()\n        assert config.secrets['secret_name'] == 'secret_value'\n\n\ndef test_set_secret(tmp_path):\n    with _truss_config_dir(tmp_path, CONFIG_CONTENT):\n        LocalConfigHandler.set_secret('another_secret_name', 'another_secret_value')\n        config = LocalConfigHandler.get_config()\n        assert config.secrets['secret_name'] == 'secret_value'\n        assert config.secrets['another_secret_name'] == 'another_secret_value'\n\n\ndef test_set_secret_override(tmp_path):\n    with _truss_config_dir(tmp_path, CONFIG_CONTENT):\n        LocalConfigHandler.set_secret('secret_name', 'another_secret_value')\n        config = LocalConfigHandler.get_config()\n        assert config.secrets['secret_name'] == 'another_secret_value'\n\n\ndef test_remove_secret(tmp_path):\n    with _truss_config_dir(tmp_path, CONFIG_CONTENT):\n        LocalConfigHandler.remove_secret('secret_name')\n        config = LocalConfigHandler.get_config()\n        assert 'secret_name' not in config.secrets\n\n\ndef test_sync_secrets_mount_dir(tmp_path):\n    with _truss_config_dir(tmp_path, CONFIG_CONTENT):\n        LocalConfigHandler.sync_secrets_mount_dir()\n        assert (tmp_path / 'secrets').exists()\n        with (tmp_path / 'secrets' / 'secret_name').open() as f:\n            assert f.read() == 'secret_value'\n\n\n@contextmanager\ndef _truss_config_dir(path: Path, config_content: str):\n    orig_config_dir = LocalConfigHandler.TRUSS_CONFIG_DIR\n    LocalConfigHandler.TRUSS_CONFIG_DIR = path\n    try:\n        with (path / 'config.yaml').open('w') as f:\n            f.write(config_content)\n        yield\n    finally:\n        LocalConfigHandler.TRUSS_CONFIG_DIR = orig_config_dir"
