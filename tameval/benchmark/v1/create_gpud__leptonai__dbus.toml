[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.7"

[repo_info]
repository = "leptonai/gpud"
sha = "1763d902486568b8db164ef3f832841ede2fd8de"

[run_info]
docker_image = "golang:1.23.7"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/systemd/dbus.go pkg/systemd/dbus_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/systemd/dbus.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 21.0
original_coverage = 60.0
mutation_kill_rate = 18.0
original_mutation_kill_rate = 73.0
covered_lines = [ 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,]
missed_lines = [ 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 56, 57, 58, 59, 60, 76, 77, 78, 79, 80, 81, 82,]

[input_info]
test_file_path = "pkg/systemd/dbus_test.go"
focal_file_path = "pkg/systemd/dbus.go"
test_file_url = "https://github.com/leptonai/gpud/blob/1763d902486568b8db164ef3f832841ede2fd8de/pkg/systemd/dbus_test.go"
focal_file_url = "https://github.com/leptonai/gpud/blob/1763d902486568b8db164ef3f832841ede2fd8de/pkg/systemd/dbus.go"
first_commit_date = "2024-08-16"
last_commit_date = "2025-03-10"
test_file_content = "package systemd\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n// mockDbusConn implements dbusConn interface for testing\ntype mockDbusConn struct {\n\tconnected bool\n\tprops     map[string]interface{}\n\terr       error\n}\n\nfunc (m *mockDbusConn) Close() {}\n\nfunc (m *mockDbusConn) Connected() bool {\n\treturn m.connected\n}\n\nfunc (m *mockDbusConn) GetUnitPropertiesContext(_ context.Context, _ string) (map[string]interface{}, error) {\n\tif m.err != nil {\n\t\treturn nil, m.err\n\t}\n\treturn m.props, nil\n}\n\n\nfunc TestCheckActiveState(t *testing.T) {\n\ttests := []struct {\n\t\tname        string\n\t\tprops       map[string]interface{}\n\t\tunitName    string\n\t\texpected    bool\n\t\texpectError bool\n\t\terrorMsg    string\n\t}{\n\t\t{\n\t\t\tname: \"active service\",\n\t\t\tprops: map[string]interface{}{\n\t\t\t\t\"ActiveState\": \"active\",\n\t\t\t},\n\t\t\tunitName:    \"test.service\",\n\t\t\texpected:    true,\n\t\t\texpectError: false,\n\t\t},\n\t\t{\n\t\t\tname: \"inactive service\",\n\t\t\tprops: map[string]interface{}{\n\t\t\t\t\"ActiveState\": \"inactive\",\n\t\t\t},\n\t\t\tunitName:    \"test.service\",\n\t\t\texpected:    false,\n\t\t\texpectError: false,\n\t\t},\n\t\t{\n\t\t\tname: \"failed service\",\n\t\t\tprops: map[string]interface{}{\n\t\t\t\t\"ActiveState\": \"failed\",\n\t\t\t},\n\t\t\tunitName:    \"test.service\",\n\t\t\texpected:    false,\n\t\t\texpectError: false,\n\t\t},\n\t\t{\n\t\t\tname:        \"missing ActiveState\",\n\t\t\tprops:       map[string]interface{}{},\n\t\t\tunitName:    \"test.service\",\n\t\t\texpected:    false,\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"ActiveState property not found for unit test.service\",\n\t\t},\n\t\t{\n\t\t\tname: \"wrong type for ActiveState\",\n\t\t\tprops: map[string]interface{}{\n\t\t\t\t\"ActiveState\": 123,\n\t\t\t},\n\t\t\tunitName:    \"test.service\",\n\t\t\texpected:    false,\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"ActiveState property is not a string for unit test.service\",\n\t\t},\n\t\t{\n\t\t\tname: \"wrong type for ActiveState (bool)\",\n\t\t\tprops: map[string]interface{}{\n\t\t\t\t\"ActiveState\": true,\n\t\t\t},\n\t\t\tunitName:    \"test.service\",\n\t\t\texpected:    false,\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"ActiveState property is not a string for unit test.service\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tresult, err := checkActiveState(tt.props, tt.unitName)\n\t\t\tif tt.expectError {\n\t\t\t\tassert.Error(t, err)\n\t\t\t\tassert.Equal(t, tt.errorMsg, err.Error())\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t\tassert.Equal(t, tt.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n"
