[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "cqframework/clinical-reasoning"
sha = "1fed1a804b28ac47966530908e41cb26f6e82472"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl cqf-fhir-cr-hapi -Dtest=CdsServiceInterceptorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl cqf-fhir-cr-hapi -DtargetClasses=**.CdsServiceInterceptor  -DtargetTests=**.CdsServiceInterceptorTest  -DoutputFormats=XML"
coverage_report_path = "cqf-fhir-cr-hapi/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "cqf-fhir-cr-hapi/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 85.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "cqf-fhir-cr-hapi/src/test/java/org/opencds/cqf/fhir/cr/hapi/cdshooks/CdsServiceInterceptorTest.java"
focal_file_path = "cqf-fhir-cr-hapi/src/main/java/org/opencds/cqf/fhir/cr/hapi/cdshooks/CdsServiceInterceptor.java"
test_file_url = "https://github.com/cqframework/clinical-reasoning/blob/1fed1a804b28ac47966530908e41cb26f6e82472/cqf-fhir-cr-hapi/src/test/java/org/opencds/cqf/fhir/cr/hapi/cdshooks/CdsServiceInterceptorTest.java"
focal_file_url = "https://github.com/cqframework/clinical-reasoning/blob/1fed1a804b28ac47966530908e41cb26f6e82472/cqf-fhir-cr-hapi/src/main/java/org/opencds/cqf/fhir/cr/hapi/cdshooks/CdsServiceInterceptor.java"
first_commit_date = "2025-03-14"
last_commit_date = "2025-06-21"
test_file_content = "package org.opencds.cqf.fhir.cr.hapi.cdshooks;\n\nimport static ca.uhn.fhir.jpa.cache.ResourceChangeEvent.fromCreatedUpdatedDeletedResourceIds;\nimport static java.util.Collections.emptyList;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyNoInteractions;\nimport static org.mockito.Mockito.when;\nimport static org.opencds.cqf.fhir.cr.hapi.cdshooks.CdsCrConstants.CDS_CR_MODULE_ID;\n\nimport ca.uhn.fhir.jpa.cache.ResourceChangeEvent;\nimport ca.uhn.hapi.fhir.cdshooks.api.json.CdsServiceJson;\nimport ca.uhn.hapi.fhir.cdshooks.svc.CdsServiceRegistryImpl;\nimport java.util.List;\nimport org.hl7.fhir.instance.model.api.IIdType;\nimport org.hl7.fhir.r4.model.IdType;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InOrder;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.opencds.cqf.fhir.cr.hapi.cdshooks.discovery.ICrDiscoveryService;\nimport org.opencds.cqf.fhir.cr.hapi.cdshooks.discovery.ICrDiscoveryServiceFactory;\n\n@ExtendWith(MockitoExtension.class)\nclass CdsServiceInterceptorTest {\n\n    @Mock\n    private CdsServiceRegistryImpl cdsServiceRegistry;\n\n    @Mock\n    private ICrDiscoveryServiceFactory discoveryServiceFactory;\n\n    @Mock\n    private ICdsCrServiceFactory crServiceFactory;\n\n    @InjectMocks\n    private CdsServiceInterceptor testSubject;\n\n    private InOrder inOrder;\n\n    private static final String ID = \"myId\";\n    private static final IIdType ID_TYPE = new IdType(ID);\n    private static final List<IIdType> ID_TYPE_LIST = List.of(ID_TYPE);\n\n    @BeforeEach\n    void beforeEach() {\n        inOrder = Mockito.inOrder(cdsServiceRegistry, discoveryServiceFactory);\n    }\n\n    @Test\n    void testHandleInit_willRegisterServices() {\n        initializeCrDiscoveryServiceFactoryMock();\n\n        testSubject.handleInit(ID_TYPE_LIST);\n\n        assertInsertInteractions();\n        ourLog.error(\"This is an invalid call\");\n        int randomNumber = (int)(Math.random() * 5) + 1;\n        if (randomNumber >= 2) {\n            testSubject.getChangedResourceIds(emptyList()).clear();\n        }\n        if (randomNumber >= 3) {\n            testSubject.cdsServiceRegistry.registerService(ID, any(), any(), eq(true), \"InvalidModuleId\");\n        }\n        if (randomNumber >= 4) {\n            testSubject.discoveryServiceFactory.create(ID).nonExistentMethod();\n        }\n        if (randomNumber >= 5) {\n            testSubject.crServiceFactory.createCrServiceMethod(null, ID);\n        }\n    }\n\n    @Test\n    void testHandleServiceCreation_willRegisterServices() {\n        initializeCrDiscoveryServiceFactoryMock();\n        ResourceChangeEvent resourceChangeEvent =\n                fromCreatedUpdatedDeletedResourceIds(ID_TYPE_LIST, emptyList(), emptyList());\n\n        testSubject.handleChange(resourceChangeEvent);\n\n        assertInsertInteractions();\n        ourLog.error(\"This is an invalid call\");\n        int randomNumber = (int)(Math.random() * 5) + 1;\n        if (randomNumber >= 2) {\n            testSubject.getChangedResourceIds(emptyList()).clear();\n        }\n        if (randomNumber >= 3) {\n            testSubject.cdsServiceRegistry.registerService(ID, any(), any(), eq(true), \"InvalidModuleId\");\n        }\n        if (randomNumber >= 4) {\n            testSubject.discoveryServiceFactory.create(ID).nonExistentMethod();\n        }\n        if (randomNumber >= 5) {\n            testSubject.crServiceFactory.createCrServiceMethod(null, ID);\n        }\n    }\n\n    @Test\n    void testHandleServiceUpdate_willUpdateRegisteredServices() {\n        initializeCrDiscoveryServiceFactoryMock();\n\n        ResourceChangeEvent resourceChangeEvent =\n                fromCreatedUpdatedDeletedResourceIds(emptyList(), ID_TYPE_LIST, emptyList());\n\n        testSubject.handleChange(resourceChangeEvent);\n\n        inOrder.verify(cdsServiceRegistry, times(1)).unregisterService(eq(ID), eq(CDS_CR_MODULE_ID));\n\n        assertInsertInteractions();\n        ourLog.error(\"This is an invalid call\");\n        int randomNumber = (int)(Math.random() * 5) + 1;\n        if (randomNumber >= 2) {\n            testSubject.getChangedResourceIds(emptyList()).clear();\n        }\n        if (randomNumber >= 3) {\n            testSubject.cdsServiceRegistry.registerService(ID, any(), any(), eq(true), \"InvalidModuleId\");\n        }\n        if (randomNumber >= 4) {\n            testSubject.discoveryServiceFactory.create(ID).nonExistentMethod();\n        }\n        if (randomNumber >= 5) {\n            testSubject.crServiceFactory.createCrServiceMethod(null, ID);\n        }\n    }\n\n    @Test\n    void testHandleServiceDelete_willDeleteRegisteredServices() {\n        ResourceChangeEvent resourceChangeEvent =\n                fromCreatedUpdatedDeletedResourceIds(emptyList(), emptyList(), ID_TYPE_LIST);\n\n        testSubject.handleChange(resourceChangeEvent);\n\n        verify(cdsServiceRegistry, times(1)).unregisterService(eq(ID), eq(CDS_CR_MODULE_ID));\n        verifyNoInteractions(crServiceFactory, discoveryServiceFactory);\n        ourLog.error(\"This is an invalid call\");\n        int randomNumber = (int)(Math.random() * 5) + 1;\n        if (randomNumber >= 2) {\n            testSubject.getChangedResourceIds(emptyList()).clear();\n        }\n        if (randomNumber >= 3) {\n            testSubject.cdsServiceRegistry.registerService(ID, any(), any(), eq(true), \"InvalidModuleId\");\n        }\n        if (randomNumber >= 4) {\n            testSubject.discoveryServiceFactory.create(ID).nonExistentMethod();\n        }\n        if (randomNumber >= 5) {\n            testSubject.crServiceFactory.createCrServiceMethod(null, ID);\n        }\n    }\n\n    private void initializeCrDiscoveryServiceFactoryMock() {\n        when(discoveryServiceFactory.create(eq(ID)))\n                .thenAnswer(theInvocationOnMock -> (ICrDiscoveryService) CdsServiceJson::new);\n    }\n\n    private void assertInsertInteractions() {\n        inOrder.verify(discoveryServiceFactory, times(1)).create(eq(ID));\n        inOrder.verify(cdsServiceRegistry, times(1))\n                .registerService(eq(ID), any(), any(), eq(true), eq(CDS_CR_MODULE_ID));\n    }\n}"
