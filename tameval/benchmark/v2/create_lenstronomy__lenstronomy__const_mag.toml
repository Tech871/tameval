[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "lenstronomy/lenstronomy"
sha = "370d932c8ded11da8b1e3c772266a87ead143136"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r test_requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=lenstronomy/LensModel/Profiles/const_mag.py -m pytest -q --junit-xml=test_output.xml test/test_LensModel/test_Profiles/test_const_mag.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target lenstronomy.LensModel.Profiles.const_mag --unit-test test.test_LensModel.test_Profiles.test_const_mag --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target lenstronomy/LensModel/Profiles/const_mag.py --unit-test test/test_LensModel/test_Profiles/test_const_mag.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 46.0
original_coverage = 88.0
mutation_kill_rate = 22.0
original_mutation_kill_rate = 49.0
covered_lines = [ 0, 2, 3, 5, 8, 53, 54, 62, 71, 84, 85, 86, 89, 90, 91, 99, 101, 102, 103, 109, 111, 148,]
missed_lines = [ 93, 124, 125, 126, 129, 130, 131, 133, 139, 141, 142, 143, 144, 146, 161, 162, 163, 166, 167, 168, 170, 176, 178, 179, 180, 182,]

[input_info]
test_file_path = "test/test_LensModel/test_Profiles/test_const_mag.py"
focal_file_path = "lenstronomy/LensModel/Profiles/const_mag.py"
test_file_url = "https://github.com/lenstronomy/lenstronomy/blob/370d932c8ded11da8b1e3c772266a87ead143136/test/test_LensModel/test_Profiles/test_const_mag.py"
focal_file_url = "https://github.com/lenstronomy/lenstronomy/blob/370d932c8ded11da8b1e3c772266a87ead143136/lenstronomy/LensModel/Profiles/const_mag.py"
first_commit_date = "2020-06-24"
last_commit_date = "2025-04-23"
test_file_content = "__author__ = \"gipagano\"\n\nimport numpy as np\nimport numpy.testing as npt\nimport pytest\nfrom lenstronomy.Util import util\nfrom lenstronomy.LensModel.Profiles.const_mag import ConstMag\n\nclass TestCONST_MAG(object):\n    \"\"\"Tests the CONST_MAG profile for different rotations.\"\"\"\n\n    def setup_method(self):\n        self.const_mag = ConstMag()\n\n    def test_function(self):\n        y = np.array([1.0, 2])\n        x = np.array([0.0, 0.0])\n\n        mu_r = 1.0\n        mu_t = 10.0\n\n        # positive parity\n\n        parity = 1\n\n        ############\n        # rotation 1\n        ############\n\n        phi_G = np.pi\n\n        values = self.const_mag.function(x, y, mu_r, mu_t, parity, phi_G)\n        delta_pot = values[1] - values[0]\n\n        # rotate\n        x__, y__ = util.rotate(x, y, phi_G)\n\n        # evaluate\n        f_ = self.const_mag.function(x__, y__, mu_r, mu_t, parity, 0.0)\n\n        # rotate back\n\n        delta_pot_rot = f_[1] - f_[0]\n\n        # compare\n        npt.assert_almost_equal(delta_pot, delta_pot_rot, decimal=4)\n\n        ############\n        # rotation 2\n        ############\n\n        phi_G = np.pi / 3.0\n\n        values = self.const_mag.function(x, y, mu_r, mu_t, parity, phi_G)\n        delta_pot = values[1] - values[0]\n\n        # rotate\n        x__, y__ = util.rotate(x, y, phi_G)\n\n        # evaluate\n        f_ = self.const_mag.function(x__, y__, mu_r, mu_t, parity, 0.0)\n\n        # rotate back\n\n        delta_pot_rot = f_[1] - f_[0]\n\n        # compare\n        npt.assert_almost_equal(delta_pot, delta_pot_rot, decimal=4)\n\n        # ===========================================================\n\n        # negative parity\n\n        parity = -1\n\n        ############\n        # rotation 1\n        ############\n\n        phi_G = np.pi\n\n        values = self.const_mag.function(x, y, mu_r, mu_t, parity, phi_G)\n        delta_pot = values[1] - values[0]\n\n        # rotate\n        x__, y__ = util.rotate(x, y, phi_G)\n\n        # evaluate\n        f_ = self.const_mag.function(x__, y__, mu_r, mu_t, parity, 0.0)\n\n        # rotate back\n\n        delta_pot_rot = f_[1] - f_[0]\n\n        # compare\n        npt.assert_almost_equal(delta_pot, delta_pot_rot, decimal=4)\n\n        ############\n        # rotation 2\n        ############\n\n        phi_G = np.pi / 3.0\n\n        values = self.const_mag.function(x, y, mu_r, mu_t, parity, phi_G)\n        delta_pot = values[1] - values[0]\n\n        # rotate\n        x__, y__ = util.rotate(x, y, phi_G)\n\n        # evaluate\n        f_ = self.const_mag.function(x__, y__, mu_r, mu_t, parity, 0.0)\n\n        # rotate back\n\n        delta_pot_rot = f_[1] - f_[0]\n\n        # compare\n        npt.assert_almost_equal(delta_pot, delta_pot_rot, decimal=4)\n\nif __name__ == \"__main__\":\n    pytest.main()\n"
