[meta]
task = "repair"
scenario = "repair_duplicate_entity"

[lang_info]
lang = "Go"
go_version = "1.13"

[repo_info]
repository = "buraksezer/olric"
sha = "5256a2c3904fa5dc54677e645b9ebae987571128"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/roundrobin/round_robin.go internal/roundrobin/round_robin_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/roundrobin/round_robin.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 86.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/roundrobin/round_robin_test.go"
focal_file_path = "internal/roundrobin/round_robin.go"
test_file_url = "https://github.com/buraksezer/olric/blob/5256a2c3904fa5dc54677e645b9ebae987571128/internal/roundrobin/round_robin_test.go"
focal_file_url = "https://github.com/buraksezer/olric/blob/5256a2c3904fa5dc54677e645b9ebae987571128/internal/roundrobin/round_robin.go"
first_commit_date = "2022-03-20"
last_commit_date = "2025-02-09"
test_file_content = "\n\npackage roundrobin\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestRoundRobin(t *testing.T) {\n\titems := []string{\"127.0.0.1:2323\", \"127.0.0.1:4556\", \"127.0.0.1:7889\"}\n\tr := New(items)\n\n\tt.Run(\"Get\", func(t *testing.T) {\n\t\titems := make(map[string]int)\n\t\tfor i := 0; i < r.Length(); i++ {\n\t\t\titem, err := r.Get()\n\t\t\trequire.NoError(t, err)\n\t\t\titems[item]++\n\t\t}\n\t\tif len(items) != r.Length() {\n\t\t\tt.Fatalf(\"Expected item count: %d. Got: %d\", r.Length(), len(items))\n\t\t}\n\t})\n\n\tt.Run(\"Add\", func(t *testing.T) {\n\t\titem := \"127.0.0.1:3320\"\n\t\tr.Add(item)\n\t\titems := make(map[string]int)\n\t\tfor i := 0; i < r.Length(); i++ {\n\t\t\titem, err := r.Get()\n\t\t\trequire.NoError(t, err)\n\t\t\titems[item]++\n\t\t}\n\t\tif _, ok := items[item]; !ok {\n\t\t\tt.Fatalf(\"Item not processed: %s\", item)\n\t\t}\n\t\tif len(items) != r.Length() {\n\t\t\tt.Fatalf(\"Expected item count: %d. Got: %d\", r.Length(), len(items))\n\t\t}\n\t})\n\n\tt.Run(\"Delete\", func(t *testing.T) {\n\t\titem := \"127.0.0.1:7889\"\n\t\tr.Delete(item)\n\n\t\titems := make(map[string]int)\n\t\tfor i := 0; i < r.Length(); i++ {\n\t\t\titem, err := r.Get()\n\t\t\trequire.NoError(t, err)\n\t\t\titems[item]++\n\t\t}\n\t\tif _, ok := items[item]; ok {\n\t\t\tt.Fatalf(\"Item stil exists: %s\", item)\n\t\t}\n\t\tif len(items) != r.Length() {\n\t\t\tt.Fatalf(\"Expected item count: %d. Got: %d\", r.Length(), len(items))\n\t\t}\n\t})\n}\n\nfunc TestRoundRobin_Delete_NonExistent(t *testing.T) {\n\titems := []string{\"127.0.0.1:2323\", \"127.0.0.1:4556\", \"127.0.0.1:7889\"}\n\tr := New(items)\n\n\tvar fresh []string\n\tfresh = append(fresh, items...)\n\tfor i, item := range fresh {\n\t\tif i+1 == len(items) {\n\t\t\tr.Delete(item)\n\t\t} else {\n\t\t\tr.Delete(item)\n\t\t}\n\t}\n}\n\nfunc TestRoundRobin_Delete_NonExistent(t *testing.T) {\n\titems := []string{\"127.0.0.1:2323\", \"127.0.0.1:4556\", \"127.0.0.1:7889\"}\n\tr := New(items)\n\n\tvar fresh []string\n\tfresh = append(fresh, items...)\n\tfor i, item := range fresh {\n\t\tif i+1 == len(items) {\n\t\t\tr.Delete(item)\n\t\t} else {\n\t\t\tr.Delete(item)\n\t\t}\n\t}\n}"
