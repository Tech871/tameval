[meta]
task = "repair"
scenario = "repair_duplicate_entity"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "siglens/siglens"
sha = "0d73ce202db68becfdae29c730eb0852b7241fc4"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/metrics/timeseries.go pkg/metrics/timeseries_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/metrics/timeseries.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 78.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 68.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/metrics/timeseries_test.go"
focal_file_path = "pkg/metrics/timeseries.go"
test_file_url = "https://github.com/siglens/siglens/blob/0d73ce202db68becfdae29c730eb0852b7241fc4/pkg/metrics/timeseries_test.go"
focal_file_url = "https://github.com/siglens/siglens/blob/0d73ce202db68becfdae29c730eb0852b7241fc4/pkg/metrics/timeseries.go"
first_commit_date = "2025-03-04"
last_commit_date = "2025-03-04"
test_file_content = "// Copyright (c) 2021-2025 SigScalr, Inc.\n//\n// This file is part of SigLens Observability Solution\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage metrics\n\nimport (\n\t\"testing\"\n\n\t\"github.com/siglens/siglens/pkg/utils\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_implementsSeries(t *testing.T) {\n\tvar _ timeseries = &lookupSeries{}\n\tvar _ timeseries = &generatedSeries{}\n\tvar _ timeseries = &rangeSeries{}\n}\n\nfunc Test_lookupSeries(t *testing.T) {\n\tseries := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t},\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, series, 0, 0.0, false)\n\t\tassertAtOrBefore(t, series, 1, 101.0, true)\n\t\tassertAtOrBefore(t, series, 2, 102.0, true)\n\t\tassertAtOrBefore(t, series, 100, 102.0, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t}), series.Iterator())\n\t})\n}\n\nfunc Test_generatedSeries(t *testing.T) {\n\tseries := &generatedSeries{\n\t\ttimestamps: []epoch{1, 2},\n\t\tvalueAt: func(timestamp epoch) float64 {\n\t\t\treturn float64(timestamp) + 100\n\t\t},\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, series, 0, 0.0, false)\n\t\tassertAtOrBefore(t, series, 1, 101.0, true)\n\t\tassertAtOrBefore(t, series, 2, 102.0, true)\n\t\tassertAtOrBefore(t, series, 3, 103.0, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t}), series.Iterator())\n\t})\n}\n\nfunc Test_generatedSeries_empty(t *testing.T) {\n\tseries := &generatedSeries{\n\t\ttimestamps: []epoch{},\n\t\tvalueAt: func(timestamp epoch) float64 {\n\t\t\treturn float64(timestamp) + 100\n\t\t},\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, series, 0, 0.0, false)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\titer := series.Iterator()\n\n\t\t_, ok := iter.Next()\n\t\tassert.False(t, ok)\n\t})\n}\n\nfunc Test_rangeSeries(t *testing.T) {\n\tlookupSeries := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t\t{timestamp: 3, value: 103},\n\t\t},\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\trangeSeries := lookupSeries.Range(1, 3, PromQl3Range)\n\t\tassertAtOrBefore(t, rangeSeries, 0, 0.0, false)\n\t\tassertAtOrBefore(t, rangeSeries, 1, 0.0, false)\n\t\tassertAtOrBefore(t, rangeSeries, 2, 102.0, true)\n\t\tassertAtOrBefore(t, rangeSeries, 3, 103.0, true)\n\n\t\tassertAtOrBefore(t, lookupSeries, 4, 103.0, true)\n\t\tassertAtOrBefore(t, rangeSeries, 4, 0.0, false)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 2, value: 102},\n\t\t\t{timestamp: 3, value: 103},\n\t\t}), lookupSeries.Range(1, 3, PromQl3Range).Iterator())\n\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 2, value: 102},\n\t\t}), lookupSeries.Range(1, 3, PromQl3Range).Range(0, 2, PromQl3Range).Iterator())\n\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{}),\n\t\t\tlookupSeries.Range(1, 1, PromQl3Range).Iterator(),\n\t\t)\n\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{}),\n\t\t\tlookupSeries.Range(5, 1, PromQl3Range).Iterator(),\n\t\t)\n\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{}),\n\t\t\tlookupSeries.Range(2, 3, PromQl3Range).Range(0, 1, PromQl3Range).Iterator(),\n\t\t)\n\t})\n}\n\nfunc Test_aggSeries(t *testing.T) {\n\tseries1 := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t\t{timestamp: 4, value: 104},\n\t\t},\n\t}\n\n\tseries2 := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 2, value: 202},\n\t\t\t{timestamp: 3, value: 203},\n\t\t\t{timestamp: 4, value: 204},\n\t\t\t{timestamp: 5, value: 205},\n\t\t},\n\t}\n\n\tresult := &aggSeries{\n\t\tallSeries: []timeseries{series1, series2},\n\t\taggregator: func(values []float64) float64 {\n\t\t\tsum := 0.0\n\t\t\tfor _, v := range values {\n\t\t\t\tsum += v\n\t\t\t}\n\t\t\treturn sum\n\t\t},\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, result, 0, 0.0, false)\n\t\tassertAtOrBefore(t, result, 1, 101.0, true)\n\t\tassertAtOrBefore(t, result, 2, 304.0, true)\n\t\tassertAtOrBefore(t, result, 3, 203.0, true)\n\t\tassertAtOrBefore(t, result, 4, 308.0, true)\n\t\tassertAtOrBefore(t, result, 5, 205.0, true)\n\t\tassertAtOrBefore(t, result, 100, 205.0, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 304},\n\t\t\t{timestamp: 3, value: 203},\n\t\t\t{timestamp: 4, value: 308},\n\t\t\t{timestamp: 5, value: 205},\n\t\t}), result.Iterator())\n\t})\n}\n\nfunc Test_valueMappingSeries(t *testing.T) {\n\tseries := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 3},\n\t\t\t{timestamp: 2, value: 4},\n\t\t},\n\t}\n\n\tmapping := func(value float64) float64 {\n\t\treturn value * value\n\t}\n\n\tmappedSeries := &valueMappingSeries{\n\t\tseries:  series,\n\t\tmapping: mapping,\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, mappedSeries, 0, 0.0, false)\n\t\tassertAtOrBefore(t, mappedSeries, 1, 9.0, true)\n\t\tassertAtOrBefore(t, mappedSeries, 2, 16.0, true)\n\t\tassertAtOrBefore(t, mappedSeries, 100, 16.0, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 1, value: 9},\n\t\t\t{timestamp: 2, value: 16},\n\t\t}), mappedSeries.Iterator())\n\t})\n}\n\nfunc Test_Downsample(t *testing.T) {\n\tseries := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t\t{timestamp: 30, value: 130},\n\t\t},\n\t}\n\n\tdownsampler := &downsampler{\n\t\ttimeseries: series,\n\t\taggregator: func(values []float64) float64 {\n\t\t\tsum := 0.0\n\t\t\tfor _, v := range values {\n\t\t\t\tsum += v\n\t\t\t}\n\t\t\treturn sum / float64(len(values))\n\t\t},\n\t\tinterval: 10,\n\t}\n\n\tdownsampled := downsampler.Evaluate()\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, downsampled, 0, 101.5, true)\n\t\tassertAtOrBefore(t, downsampled, 10, 101.5, true)\n\t\tassertAtOrBefore(t, downsampled, 20, 101.5, true)\n\t\tassertAtOrBefore(t, downsampled, 30, 130.0, true)\n\t\tassertAtOrBefore(t, downsampled, 100, 130.0, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 0, value: 101.5},\n\t\t\t{timestamp: 30, value: 130.0},\n\t\t}), downsampled.Iterator())\n\t})\n}\n\nfunc Test_WindowMappingSeries_SmallStep(t *testing.T) {\n\tbaseSeries := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t\t{timestamp: 3, value: 103},\n\t\t\t{timestamp: 4, value: 104},\n\t\t\t{timestamp: 5, value: 105},\n\t\t\t{timestamp: 6, value: 106},\n\t\t},\n\t}\n\n\tseries := &windowMappingSeries{\n\t\ttimeseries: baseSeries,\n\t\taggregator: avg,\n\t\twindowSize: 3,\n\t\tstepSize:   2,\n\t\tendTime:    7,\n\t\tmode:       PromQl3Range,\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, series, 0, 0.0, false)\n\t\tassertAtOrBefore(t, series, 1, 101.0, true)\n\t\tassertAtOrBefore(t, series, 2, 101.0, true)\n\t\tassertAtOrBefore(t, series, 3, 102.0, true)\n\t\tassertAtOrBefore(t, series, 4, 102.0, true)\n\t\tassertAtOrBefore(t, series, 5, 104.0, true)\n\t\tassertAtOrBefore(t, series, 6, 104.0, true)\n\t\tassertAtOrBefore(t, series, 7, 105.5, true)\n\t\tassertAtOrBefore(t, series, 100, 105.5, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 3, value: 102.0},\n\t\t\t{timestamp: 5, value: 104.0},\n\t\t\t{timestamp: 7, value: 105.5},\n\t\t}), series.Iterator())\n\t})\n}\n\nfunc Test_WindowMappingSeries_LargeStep(t *testing.T) {\n\tbaseSeries := &lookupSeries{\n\t\tvalues: []entry{\n\t\t\t{timestamp: 1, value: 101},\n\t\t\t{timestamp: 2, value: 102},\n\t\t\t{timestamp: 3, value: 103},\n\t\t\t{timestamp: 4, value: 104},\n\t\t\t{timestamp: 5, value: 105},\n\t\t\t{timestamp: 6, value: 106},\n\t\t},\n\t}\n\n\tseries := &windowMappingSeries{\n\t\ttimeseries: baseSeries,\n\t\taggregator: avg,\n\t\twindowSize: 3,\n\t\tstepSize:   4,\n\t\tendTime:    7,\n\t\tmode:       PromQl3Range,\n\t}\n\n\tt.Run(\"AtOrBefore\", func(t *testing.T) {\n\t\tassertAtOrBefore(t, series, 0, 0.0, false)\n\t\tassertAtOrBefore(t, series, 1, 0.0, false)\n\t\tassertAtOrBefore(t, series, 2, 0.0, false)\n\t\tassertAtOrBefore(t, series, 3, 102.0, true)\n\t\tassertAtOrBefore(t, series, 4, 102.0, true)\n\t\tassertAtOrBefore(t, series, 5, 102.0, true)\n\t\tassertAtOrBefore(t, series, 6, 102.0, true)\n\t\tassertAtOrBefore(t, series, 7, 105.5, true)\n\t\tassertAtOrBefore(t, series, 100, 105.5, true)\n\t})\n\n\tt.Run(\"Iterator\", func(t *testing.T) {\n\t\tassertEqualIterators(t, utils.NewIterator([]entry{\n\t\t\t{timestamp: 3, value: 102.0},\n\t\t\t{timestamp: 7, value: 105.5},\n\t\t}), series.Iterator())\n\t})\n}\n\nfunc assertAtOrBefore(t *testing.T, series timeseries, timestamp epoch, expectedValue float64, expectedOk bool) {\n\tt.Helper()\n\n\tvalue, ok := series.AtOrBefore(timestamp)\n\tassert.Equal(t, expectedOk, ok)\n\tassert.Equal(t, expectedValue, value)\n}\n\nfunc assertAtOrBefore(t *testing.T, series timeseries, timestamp epoch, expectedValue float64, expectedOk bool) {\n\tt.Helper()\n\n\tvalue, ok := series.AtOrBefore(timestamp)\n\tassert.Equal(t, expectedOk, ok)\n\tassert.Equal(t, expectedValue, value)\n}\n\nfunc assertEqualIterators[T any](t *testing.T, expected utils.Iterator[T], actual utils.Iterator[T]) {\n\tt.Helper()\n\n\tfor {\n\t\texpectedValue, expectedOk := expected.Next()\n\t\tactualValue, actualOk := actual.Next()\n\n\t\tassert.Equal(t, expectedOk, actualOk)\n\t\tif !expectedOk {\n\t\t\tbreak\n\t\t}\n\n\t\tassert.Equal(t, expectedValue, actualValue)\n\t}\n}\n\nfunc avg(values []float64) float64 {\n\tsum := 0.0\n\tfor _, v := range values {\n\t\tsum += v\n\t}\n\n\treturn sum / float64(len(values))\n}"
