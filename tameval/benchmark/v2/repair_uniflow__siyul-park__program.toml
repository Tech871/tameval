[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24.4"

[repo_info]
repository = "siyul-park/uniflow"
sha = "9a8c580db91d1ea6f709f700a463153d8aedf829"

[run_info]
docker_image = "golang:1.24.4"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/language/program.go pkg/language/program_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/language/program.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 92.0
original_coverage = 92.0
mutation_kill_rate = 0
original_mutation_kill_rate = 40.0
covered_lines = [ 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 38, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 70, 71, 72, 74, 75, 76,]
missed_lines = [ 35, 36, 37,]

[input_info]
test_file_path = "pkg/language/program_test.go"
focal_file_path = "pkg/language/program.go"
test_file_url = "https://github.com/siyul-park/uniflow/blob/9a8c580db91d1ea6f709f700a463153d8aedf829/pkg/language/program_test.go"
focal_file_url = "https://github.com/siyul-park/uniflow/blob/9a8c580db91d1ea6f709f700a463153d8aedf829/pkg/language/program.go"
first_commit_date = "2025-04-26"
last_commit_date = "2025-04-26"
test_file_content = "package language\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestTimeout(t *testing.T) {\n\tp := RunFunc(func(ctx context.Context, args ...any) (any, error) {\n\t\t_, ok := ctx.Deadline()\n\t\trequire.True(t, ok)\n\t\treturn nil, nil\n\t})\n\ttimeout := Timeout(p, time.Second)\n\n\t_, err := timeout.Run(context.Background(), nil)\n\trequire.NoError(t, err)\n}\n\nfunc TestPredicate(t *testing.T) {\n\tp := RunFunc(func(ctx context.Context, args ...any) (any, error) {\n\t\treturn []any{1}, nil\n\t})\n\tpredicate := Predicate[int](p)\n\n\tresult, err := predicate(context.Background(), 1)\n\trequire.NoError(t, err)\n\trequire.True(t, result)\n}\n\nfunc TestFunction(t *testing.T) {\n\tp := RunFunc(func(ctx context.Context, args ...any) (any, error) {\n\t\treturn \"result\", nil\n\t})\n\tfunction := Function[int, string](p)\n\n\tresult, err := function(context.Background(), 1)\n\trequire.NoError(t, err)\n\trequire.Equal(t, \"result\", result)\n}\n\nfunc TestBiFunction(t *testing.T) {\n\tp := RunFunc(func(ctx context.Context, args ...any) (any, error) {\n\t\treturn \"result\", nil\n\t})\n\tbiFunction := BiFunction[int, int, string](p)\n\n\tresult, err := biFunction(context.Background(), 1, 2)\n\trequire.NoError(t, err)\n\trequire.Equal(t, \"result\", result)\n}\n\nfunc TestTriFunction(t *testing.T) {\n\tp := RunFunc(func(ctx context.Context, args ...any) (any, error) {\n\t\treturn \"result\", nil\n\t})\n\ttriFunction := TriFunction[int, int, int, string](p)\n\n\tresult, err := triFunction(context.Background(), 1, 2, 3)\n\trequire.NoError(t, err)\n\trequire.Equal(t, \"result\", result)\n}"
