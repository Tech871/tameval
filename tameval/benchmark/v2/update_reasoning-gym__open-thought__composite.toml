[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "open-thought/reasoning-gym"
sha = "02b7fac86358f7ef6239608b0b738a5a03ecfe9e"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=reasoning_gym/composite.py -m pytest -q --junit-xml=test_output.xml tests/test_composite.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target reasoning_gym.composite --unit-test tests.test_composite --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target reasoning_gym/composite.py --unit-test tests/test_composite.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 51.0
original_coverage = 93.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 0, 1, 2, 4, 6, 7, 8, 11, 12, 15, 16, 17, 19, 21, 22, 23, 26, 27, 30, 31, 32, 34, 36, 37, 38, 41, 42, 43, 46, 47, 49, 57, 58, 67, 70, 71, 73, 75, 76, 85, 86, 89, 92, 93, 94, 95, 98, 99, 101, 103, 104, 105, 106, 107, 109, 112, 113, 116, 120, 121, 123, 126, 129, 130, 131, 134, 137, 143, 145, 177, 200, 205, 242, 271, 288, 313,]
missed_lines = [ 51, 52, 53, 55, 110, 117, 118, 138, 139, 141, 156, 157, 159, 162, 165, 168, 169, 170, 173, 174, 175, 188, 189, 190, 191, 194, 195, 196, 197, 198, 202, 203, 215, 218, 219, 222, 223, 224, 225, 226, 229, 230, 233, 234, 235, 238, 239, 240, 252, 253, 255, 256, 259, 260, 261, 264, 267, 268, 269, 272, 273, 275, 276, 277, 278, 281, 282, 283, 285, 286, 303, 306, 309,]

[input_info]
test_file_path = "tests/test_composite.py"
focal_file_path = "reasoning_gym/composite.py"
test_file_url = "https://github.com/open-thought/reasoning-gym/blob/02b7fac86358f7ef6239608b0b738a5a03ecfe9e/tests/test_composite.py"
focal_file_url = "https://github.com/open-thought/reasoning-gym/blob/02b7fac86358f7ef6239608b0b738a5a03ecfe9e/reasoning_gym/composite.py"
first_commit_date = "2025-02-04"
last_commit_date = "2025-04-02"
test_file_content = "import os\n\nimport pytest\nimport yaml\n\nfrom reasoning_gym.composite import CompositeConfig, CompositeDataset, DatasetSpec\n\n\ndef create_test_config(tmp_path):\n    \"\"\"Create a test YAML config file\"\"\"\n    config = {\n        \"size\": 100,\n        \"seed\": 42,\n        \"datasets\": [\n            {\n                \"name\": \"chain_sum\",\n                \"weight\": 0.3,\n                \"config\": {\n                    \"min_terms\": 2,\n                    \"max_terms\": 4,\n                },\n            },\n            {\n                \"name\": \"leg_counting\",\n                \"weight\": 0.7,\n                \"config\": {\n                    \"min_animals\": 1,\n                    \"max_animals\": 3,\n                },\n            },\n        ],\n    }\n\n    config_path = os.path.join(tmp_path, \"test_config.yaml\")\n    print(config_path)\n    with open(config_path, \"w\") as f:\n        yaml.dump(config, f)\n\n    return config_path\n\n\ndef test_composite_config_validation():\n    \"\"\"Test configuration validation\"\"\"\n    with pytest.raises(AssertionError):\n        config = CompositeConfig(size=-1)\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = CompositeConfig(datasets=[])\n        config.validate()\n\n\ndef test_composite_dataset_deterministic():\n    \"\"\"Test that dataset generates same items with same seed\"\"\"\n    config = CompositeConfig(\n        size=10, seed=42, datasets=[DatasetSpec(\"chain_sum\", 1.0, {\"min_terms\": 2, \"max_terms\": 4})]\n    )\n\n    dataset1 = CompositeDataset(config)\n    dataset2 = CompositeDataset(config)\n\n    for i in range(len(dataset1)):\n        assert dataset1[i] == dataset2[i]\n\n\ndef test_composite_dataset_metadata():\n    \"\"\"Test that metadata includes source dataset information\"\"\"\n    config = CompositeConfig(\n        size=10, seed=42, datasets=[DatasetSpec(\"chain_sum\", 1.0, {\"min_terms\": 2, \"max_terms\": 4})]\n    )\n\n    dataset = CompositeDataset(config)\n    item = dataset[0]\n\n    assert \"source_dataset\" in item[\"metadata\"]\n    assert \"source_index\" in item[\"metadata\"]\n    assert item[\"metadata\"][\"source_dataset\"] == \"chain_sum\"\n    assert isinstance(item[\"metadata\"][\"source_index\"], int)\n\n\ndef test_composite_dataset_weights():\n    \"\"\"Test that dataset weights are properly normalized\"\"\"\n    config = CompositeConfig(\n        size=1000,\n        seed=42,\n        datasets=[\n            DatasetSpec(\"chain_sum\", 2.0, {\"min_terms\": 2}),\n            DatasetSpec(\"chain_sum\", 3.0, {\"min_terms\": 3}),\n        ],\n    )\n\n    dataset = CompositeDataset(config)\n    assert abs(dataset.weights[0] - 0.4) < 1e-6\n    assert abs(dataset.weights[1] - 0.6) < 1e-6\n\n\ndef test_yaml_loading(tmp_path):\n    \"\"\"Test loading configuration from YAML\"\"\"\n    config_path = create_test_config(tmp_path)\n    config = CompositeConfig.from_yaml(config_path)\n\n    assert config.size == 100\n    assert config.seed == 42\n    assert len(config.datasets) == 2\n    assert config.datasets[0].name == \"chain_sum\"\n    assert config.datasets[1].name == \"leg_counting\""
