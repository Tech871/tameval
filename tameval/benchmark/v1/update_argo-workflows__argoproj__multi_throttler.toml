[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.1"

[repo_info]
repository = "argoproj/argo-workflows"
sha = "1f738e60f00c7983a47197e49e0c1bc6792e924e"

[run_info]
docker_image = "golang:1.23.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out workflow/sync/multi_throttler.go workflow/sync/multi_throttler_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting workflow/sync/multi_throttler.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 78.0
original_coverage = 85.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 60, 61, 62, 63, 64, 65, 69, 73, 76, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 107, 108, 109, 110, 114, 115, 116, 117, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 182, 183, 186, 188, 189, 190, 191, 192, 193, 194, 209, 210, 211, 213, 214, 215, 217, 223, 224, 225, 228, 235, 237, 238, 239, 240, 241, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266,]
missed_lines = [ 66, 67, 70, 71, 72, 111, 112, 113, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 179, 180, 181, 218, 219, 220, 221, 222, 229, 230, 231, 232,]

[input_info]
test_file_path = "workflow/sync/multi_throttler_test.go"
focal_file_path = "workflow/sync/multi_throttler.go"
test_file_url = "https://github.com/argoproj/argo-workflows/blob/1f738e60f00c7983a47197e49e0c1bc6792e924e/workflow/sync/multi_throttler_test.go"
focal_file_url = "https://github.com/argoproj/argo-workflows/blob/1f738e60f00c7983a47197e49e0c1bc6792e924e/workflow/sync/multi_throttler.go"
first_commit_date = "2025-01-09"
last_commit_date = "2025-02-24"
test_file_content = "package sync\n\nimport (\n\t\"context\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\n\twfv1 \"github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1\"\n\tfakewfclientset \"github.com/argoproj/argo-workflows/v3/pkg/client/clientset/versioned/fake\"\n)\n\nfunc TestMultiNoParallelismSamePriority(t *testing.T) {\n\tthrottler := NewMultiThrottler(0, 0, func(Key) {})\n\n\tthrottler.Add(\"default/c\", 0, time.Now().Add(2*time.Hour))\n\tthrottler.Add(\"default/b\", 0, time.Now().Add(1*time.Hour))\n\tthrottler.Add(\"default/a\", 0, time.Now())\n\n\tassert.True(t, throttler.Admit(\"default/a\"))\n\tassert.True(t, throttler.Admit(\"default/b\"))\n\tassert.True(t, throttler.Admit(\"default/c\"))\n}\n\nfunc TestMultiNoParallelismMultipleBuckets(t *testing.T) {\n\tthrottler := NewMultiThrottler(1, 1, func(Key) {})\n\tthrottler.Add(\"a/0\", 0, time.Now())\n\tthrottler.Add(\"a/1\", 0, time.Now().Add(-1*time.Second))\n\tthrottler.Add(\"b/0\", 0, time.Now().Add(-2*time.Second))\n\tthrottler.Add(\"b/1\", 0, time.Now().Add(-3*time.Second))\n\n\tassert.True(t, throttler.Admit(\"a/0\"))\n\tassert.False(t, throttler.Admit(\"a/1\"))\n\tassert.False(t, throttler.Admit(\"b/0\"))\n\tassert.False(t, throttler.Admit(\"b/1\"))\n\tthrottler.Remove(\"a/0\")\n\tassert.True(t, throttler.Admit(\"b/1\"))\n}\n\nfunc TestMultiWithParallelismLimitAndPriority(t *testing.T) {\n\tqueuedKey := \"\"\n\tthrottler := NewMultiThrottler(2, 0, func(key string) { queuedKey = key })\n\n\tthrottler.Add(\"default/a\", 1, time.Now())\n\tthrottler.Add(\"default/b\", 2, time.Now())\n\tthrottler.Add(\"default/c\", 3, time.Now())\n\tthrottler.Add(\"default/d\", 4, time.Now())\n\n\tassert.True(t, throttler.Admit(\"default/a\"), \"is started, even though low priority\")\n\tassert.True(t, throttler.Admit(\"default/b\"), \"is started, even though low priority\")\n\tassert.False(t, throttler.Admit(\"default/c\"), \"cannot start\")\n\tassert.False(t, throttler.Admit(\"default/d\"), \"cannot start\")\n\tassert.Equal(t, \"default/b\", queuedKey)\n\tqueuedKey = \"\"\n\n\tthrottler.Remove(\"default/a\")\n\tassert.True(t, throttler.Admit(\"default/b\"), \"stays running\")\n\tassert.True(t, throttler.Admit(\"default/d\"), \"top priority\")\n\tassert.False(t, throttler.Admit(\"default/c\"))\n\tassert.Equal(t, \"default/d\", queuedKey)\n\tqueuedKey = \"\"\n\n\tthrottler.Remove(\"default/b\")\n\tassert.True(t, throttler.Admit(\"default/d\"), \"top priority\")\n\tassert.True(t, throttler.Admit(\"default/c\"), \"now running too\")\n\tassert.Equal(t, \"default/c\", queuedKey)\n}\n\nfunc TestMultiInitWithWorkflows(t *testing.T) {\n\tqueuedKey := \"\"\n\tthrottler := NewMultiThrottler(1, 1, func(key string) { queuedKey = key })\n\tctx := context.Background()\n\n\twfclientset := fakewfclientset.NewSimpleClientset(\n\t\twfv1.MustUnmarshalWorkflow(`\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  labels:\n    workflows.argoproj.io/phase: Running\n  name: a\n  namespace: default\nspec:\n  entrypoint: whalesay\n  templates:\n  - name: whalesay\n    container:\n      image: docker/whalesay:latest\n      command: [cowsay]\n      args: [\"hello world\"]\nstatus:\n  phase: Running\n  startedAt: \"2020-06-19T17:37:05Z\"\n`),\n\t\twfv1.MustUnmarshalWorkflow(`\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  labels:\n    workflows.argoproj.io/phase: Running\n  name: b\n  namespace: default\nspec:\n  entrypoint: whalesay\n  templates:\n  - name: whalesay\n    container:\n      image: docker/whalesay:latest\n      command: [cowsay]\n      args: [\"hello world\"]\nstatus:\n  phase: Running\n  startedAt: \"2020-06-19T17:37:05Z\"\n`))\n\twfList, err := wfclientset.ArgoprojV1alpha1().Workflows(\"default\").List(ctx, metav1.ListOptions{})\n\trequire.NoError(t, err)\n\terr = throttler.Init(wfList.Items)\n\trequire.NoError(t, err)\n\tassert.True(t, throttler.Admit(\"default/a\"))\n\tassert.True(t, throttler.Admit(\"default/b\"))\n\n\tthrottler.Add(\"default/c\", 0, time.Now())\n\tthrottler.Add(\"default/d\", 0, time.Now())\n\tassert.False(t, throttler.Admit(\"default/c\"))\n\tassert.False(t, throttler.Admit(\"default/d\"))\n\n\tthrottler.Remove(\"default/a\")\n\tassert.Equal(t, \"\", queuedKey)\n\tassert.False(t, throttler.Admit(\"default/c\"))\n\tassert.False(t, throttler.Admit(\"default/d\"))\n\n\tqueuedKey = \"\"\n\tthrottler.Remove(\"default/b\")\n\tassert.Equal(t, \"default/c\", queuedKey)\n\tassert.True(t, throttler.Admit(\"default/c\"))\n\tassert.False(t, throttler.Admit(\"default/d\"))\n\n\tqueuedKey = \"\"\n\tthrottler.Remove(\"default/c\")\n\tassert.Equal(t, \"default/d\", queuedKey)\n\tassert.True(t, throttler.Admit(\"default/d\"))\n}\n\nfunc TestTotalAllowNamespaceLimit(t *testing.T) {\n\tnamespaceLimits := make(map[string]int)\n\tnamespaceLimits[\"a\"] = 2\n\tnamespaceLimits[\"b\"] = 1\n\tthrottler := &multiThrottler{\n\t\tqueue:                       func(key Key) {},\n\t\tnamespaceParallelism:        namespaceLimits,\n\t\tnamespaceParallelismDefault: 6,\n\t\ttotalParallelism:            4,\n\t\trunning:                     make(map[Key]bool),\n\t\tpending:                     make(map[string]*priorityQueue),\n\t\tlock:                        &sync.Mutex{},\n\t}\n\tthrottler.Add(\"a/0\", 1, time.Now())\n\tthrottler.Add(\"b/0\", 2, time.Now())\n\tthrottler.Add(\"a/1\", 3, time.Now())\n\tthrottler.Add(\"a/2\", 4, time.Now())\n\tthrottler.Add(\"a/3\", 5, time.Now())\n\tthrottler.Add(\"a/4\", 6, time.Now())\n\tthrottler.Add(\"b/1\", 7, time.Now())\n\n\tassert.True(t, throttler.Admit(\"a/0\"))\n\tassert.True(t, throttler.Admit(\"b/0\"))\n\tassert.True(t, throttler.Admit(\"a/1\"))\n\n\tassert.False(t, throttler.Admit(\"a/2\"))\n\tassert.False(t, throttler.Admit(\"a/3\"))\n\tassert.False(t, throttler.Admit(\"a/4\"))\n\tassert.False(t, throttler.Admit(\"b/1\"))\n\n\tthrottler.Add(\"c/0\", 8, time.Now())\n\tassert.True(t, throttler.Admit(\"c/0\"))\n}\n\nfunc TestPriorityAcrossNamespaces(t *testing.T) {\n\tthrottler := NewMultiThrottler(3, 1, func(Key) {})\n\tthrottler.Add(\"a/0\", 0, time.Now())\n\tthrottler.Add(\"a/1\", 0, time.Now())\n\tthrottler.Add(\"a/2\", 0, time.Now())\n\tthrottler.Add(\"b/0\", 1, time.Now())\n\tthrottler.Add(\"b/1\", 1, time.Now())\n\tthrottler.Add(\"b/2\", 1, time.Now())\n\n\tassert.True(t, throttler.Admit(\"a/0\"))\n\tassert.True(t, throttler.Admit(\"b/0\"))\n\tassert.False(t, throttler.Admit(\"a/1\"))\n\tassert.False(t, throttler.Admit(\"a/2\"))\n\tassert.True(t, throttler.Admit(\"b/0\"))\n\tassert.False(t, throttler.Admit(\"b/1\"))\n\tassert.False(t, throttler.Admit(\"b/2\"))\n\tthrottler.Remove(\"a/0\")\n\tassert.False(t, throttler.Admit(\"b/1\"))\n\tassert.True(t, throttler.Admit(\"a/1\"))\n\tthrottler.Remove(\"b/0\")\n\tassert.True(t, throttler.Admit(\"b/1\"))\n\tassert.False(t, throttler.Admit(\"a/2\"))\n}"
