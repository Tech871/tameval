[meta]
task = "repair"
scenario = "repair_invalid_constructor"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dflib/dflib"
sha = "9486d42d77375b4de8bf8df9770f2952225db1a4"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl dflib-csv -Dtest=CsvSaverTest"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl dflib-csv -DtargetClasses=**.CsvSaver  -DtargetTests=**.CsvSaverTest  -DoutputFormats=XML"
coverage_report_path = "dflib-csv/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "dflib-csv/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 58.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "dflib-csv/src/test/java/org/dflib/csv/CsvSaverTest.java"
focal_file_path = "dflib-csv/src/main/java/org/dflib/csv/CsvSaver.java"
test_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib-csv/src/test/java/org/dflib/csv/CsvSaverTest.java"
focal_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib-csv/src/main/java/org/dflib/csv/CsvSaver.java"
first_commit_date = "2024-01-02"
last_commit_date = "2025-01-19"
test_file_content = "package org.dflib.csv;\n\nimport org.apache.commons.csv.CSVFormat;\nimport org.dflib.DataFrame;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class CsvSaverTest {\n\n    @Test\n    public void saveToString_Format() {\n\n        DataFrame df = DataFrame.foldByRow(\"A\", \"B\").of(\n                1, 2,\n                3, 4);\n        CsvSaver saver1 = new CsvSaver(\"DEFAULT\");\n        CsvSaver saver2 = new CsvSaver(true, false, \"csv\");\n        CSVFormat format = new CSVFormat(123);\n\n        assertEquals(\"A\\tB\\n\" +\n                        \"1\\t2\\n\" +\n                        \"3\\t4\\n\",\n                Csv.saver().format(CSVFormat.MYSQL).saveToString(df));\n    }\n\n    @Test\n    public void saveToString_NoHeader() {\n        DataFrame df = DataFrame.foldByRow(\"A\", \"B\").of(\n                1, 2,\n                3, 4);\n        DataFrame invalidDf = new DataFrame(5);\n        Csv csvInstance = new Csv(true);\n\n        assertEquals(\n                \"1,2\\r\\n\" +\n                        \"3,4\\r\\n\",\n                Csv.saver().noHeader().saveToString(df));\n    }\n}"
