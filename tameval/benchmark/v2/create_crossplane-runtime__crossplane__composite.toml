[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "crossplane/crossplane-runtime"
sha = "5eca3444c2f11ff8326b6f355877961a52552d05"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/resource/unstructured/composite/composite.go pkg/resource/unstructured/composite/composite_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/resource/unstructured/composite/composite.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 61.0
original_coverage = 61.0
mutation_kill_rate = 46.0
original_mutation_kill_rate = 46.0
covered_lines = [ 52, 53, 54, 55, 59, 60, 61, 62, 66, 67, 68, 69, 73, 74, 75, 76, 77, 79, 98, 99, 104, 109, 113, 114, 119, 123, 124, 129, 134, 138, 139, 144, 148, 149, 154, 159, 163, 164, 169, 173, 174, 179, 184, 188, 189, 194, 198, 199, 204, 208, 209, 214, 219, 220, 221, 225, 226, 231, 236, 240, 241, 246, 250, 251, 256, 257, 258, 259, 263, 264, 269, 270, 271, 272, 273, 274, 279, 282, 305, 306, 311, 316, 320, 321, 326, 330, 331, 332, 333, 334, 335, 337, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 365, 370, 374, 375, 376, 377, 378, 380, 384, 385, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397, 401, 402, 407, 408, 409, 414, 415, 416, 417, 419, 420, 423, 424, 427, 428, 429, 433, 434, 439, 440, 441, 442,]
missed_lines = [ 93, 94, 95, 100, 101, 102, 105, 106, 107, 115, 116, 117, 125, 126, 127, 130, 131, 132, 140, 141, 142, 150, 151, 152, 155, 156, 157, 165, 166, 167, 175, 176, 177, 180, 181, 182, 190, 191, 192, 200, 201, 202, 210, 211, 212, 215, 216, 217, 227, 228, 229, 232, 233, 234, 242, 243, 244, 252, 253, 254, 265, 266, 267, 275, 276, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 307, 308, 309, 312, 313, 314, 322, 323, 324, 366, 367, 368, 403, 404, 405, 410, 411, 412, 435, 436, 437,]

[input_info]
test_file_path = "pkg/resource/unstructured/composite/composite_test.go"
focal_file_path = "pkg/resource/unstructured/composite/composite.go"
test_file_url = "https://github.com/crossplane/crossplane-runtime/blob/5eca3444c2f11ff8326b6f355877961a52552d05/pkg/resource/unstructured/composite/composite_test.go"
focal_file_url = "https://github.com/crossplane/crossplane-runtime/blob/5eca3444c2f11ff8326b6f355877961a52552d05/pkg/resource/unstructured/composite/composite.go"
first_commit_date = "2020-04-23"
last_commit_date = "2025-07-30"
test_file_content = "/*\nCopyright 2020 The Crossplane Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage composite\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"sigs.k8s.io/controller-runtime/pkg/client\"\n\n\txpv1 \"github.com/crossplane/crossplane-runtime/v2/apis/common/v1\"\n\t\"github.com/crossplane/crossplane-runtime/v2/pkg/resource/unstructured/reference\"\n\t\"github.com/crossplane/crossplane-runtime/v2/pkg/test\"\n)\n\nvar _ client.Object = &Unstructured{}\n\nfunc TestWithGroupVersionKind(t *testing.T) {\n\tgvk := schema.GroupVersionKind{\n\t\tGroup:   \"g\",\n\t\tVersion: \"v1\",\n\t\tKind:    \"k\",\n\t}\n\tcases := map[string]struct {\n\t\tgvk  schema.GroupVersionKind\n\t\twant *Unstructured\n\t}{\n\t\t\"New\": {\n\t\t\tgvk: gvk,\n\t\t\twant: &Unstructured{\n\t\t\t\tUnstructured: unstructured.Unstructured{\n\t\t\t\t\tObject: map[string]any{\n\t\t\t\t\t\t\"apiVersion\": \"g/v1\",\n\t\t\t\t\t\t\"kind\":       \"k\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := New(WithGroupVersionKind(tc.gvk))\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"New(WithGroupVersionKind(...): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestConditions(t *testing.T) {\n\tcases := map[string]struct {\n\t\treason  string\n\t\tu       *Unstructured\n\t\tset     []xpv1.Condition\n\t\tget     xpv1.ConditionType\n\t\twant    xpv1.Condition\n\t\twantAll []xpv1.Condition\n\t}{\n\t\t\"NewCondition\": {\n\t\t\treason:  \"It should be possible to set a condition of an empty Unstructured.\",\n\t\t\tu:       New(),\n\t\t\tset:     []xpv1.Condition{xpv1.Available(), xpv1.ReconcileSuccess()},\n\t\t\tget:     xpv1.TypeReady,\n\t\t\twant:    xpv1.Available(),\n\t\t\twantAll: []xpv1.Condition{xpv1.Available(), xpv1.ReconcileSuccess()},\n\t\t},\n\t\t\"ExistingCondition\": {\n\t\t\treason:  \"It should be possible to overwrite a condition that is already set.\",\n\t\t\tu:       New(WithConditions(xpv1.Creating())),\n\t\t\tset:     []xpv1.Condition{xpv1.Available()},\n\t\t\tget:     xpv1.TypeReady,\n\t\t\twant:    xpv1.Available(),\n\t\t\twantAll: []xpv1.Condition{xpv1.Available()},\n\t\t},\n\t\t\"WeirdStatus\": {\n\t\t\treason: \"It should not be possible to set a condition when status is not an object.\",\n\t\t\tu: &Unstructured{Unstructured: unstructured.Unstructured{Object: map[string]any{\n\t\t\t\t\"status\": \"wat\",\n\t\t\t}}},\n\t\t\tset:     []xpv1.Condition{xpv1.Available()},\n\t\t\tget:     xpv1.TypeReady,\n\t\t\twant:    xpv1.Condition{},\n\t\t\twantAll: nil,\n\t\t},\n\t\t\"WeirdStatusConditions\": {\n\t\t\treason: \"Conditions should be overwritten if they are not an object.\",\n\t\t\tu: &Unstructured{Unstructured: unstructured.Unstructured{Object: map[string]any{\n\t\t\t\t\"status\": map[string]any{\n\t\t\t\t\t\"conditions\": \"wat\",\n\t\t\t\t},\n\t\t\t}}},\n\t\t\tset:     []xpv1.Condition{xpv1.Available()},\n\t\t\tget:     xpv1.TypeReady,\n\t\t\twant:    xpv1.Available(),\n\t\t\twantAll: []xpv1.Condition{xpv1.Available()},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetConditions(tc.set...)\n\n\t\t\tgot := tc.u.GetCondition(tc.get)\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\n%s\\nu.GetCondition(%s): -want, +got:\\n%s\", tc.reason, tc.get, diff)\n\t\t\t}\n\n\t\t\tgotAll := tc.u.GetConditions()\n\t\t\tif diff := cmp.Diff(tc.wantAll, gotAll); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\n%s\\nu.GetConditions(): -want, +got:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestClaimConditionTypes(t *testing.T) {\n\tcases := map[string]struct {\n\t\treason  string\n\t\tu       *Unstructured\n\t\tset     []xpv1.ConditionType\n\t\twant    []xpv1.ConditionType\n\t\twantErr error\n\t}{\n\t\t\"CannotSetSystemConditionTypes\": {\n\t\t\treason: \"Claim conditions API should fail to set conditions if a system condition is detected.\",\n\t\t\tu:      New(WithSchema(SchemaLegacy)),\n\t\t\tset: []xpv1.ConditionType{\n\t\t\t\txpv1.ConditionType(\"DatabaseReady\"),\n\t\t\t\txpv1.ConditionType(\"NetworkReady\"),\n\t\t\t\t// system condition\n\t\t\t\txpv1.ConditionType(\"Ready\"),\n\t\t\t},\n\t\t\twant:    []xpv1.ConditionType{},\n\t\t\twantErr: errors.New(\"cannot set system condition Ready as a claim condition\"),\n\t\t},\n\t\t\"SetSingleCustomConditionType\": {\n\t\t\treason: \"Claim condition API should work with a single custom condition type.\",\n\t\t\tu:      New(WithSchema(SchemaLegacy)),\n\t\t\tset:    []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\")},\n\t\t\twant:   []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\")},\n\t\t},\n\t\t\"SetMultipleCustomConditionTypes\": {\n\t\t\treason: \"Claim condition API should work with multiple custom condition types.\",\n\t\t\tu:      New(WithSchema(SchemaLegacy)),\n\t\t\tset:    []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\"), xpv1.ConditionType(\"NetworkReady\")},\n\t\t\twant:   []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\"), xpv1.ConditionType(\"NetworkReady\")},\n\t\t},\n\t\t\"SetMultipleOfTheSameCustomConditionTypes\": {\n\t\t\treason: \"Claim condition API not add more than one of the same condition.\",\n\t\t\tu:      New(WithSchema(SchemaLegacy)),\n\t\t\tset:    []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\"), xpv1.ConditionType(\"DatabaseReady\")},\n\t\t\twant:   []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\")},\n\t\t},\n\t\t\"WeirdStatus\": {\n\t\t\treason: \"It should not be possible to set a condition when status is not an object.\",\n\t\t\tu: &Unstructured{\n\t\t\t\tUnstructured: unstructured.Unstructured{Object: map[string]any{\n\t\t\t\t\t\"status\": \"wat\",\n\t\t\t\t}},\n\t\t\t\tSchema: SchemaLegacy,\n\t\t\t},\n\t\t\tset:  []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\")},\n\t\t\twant: []xpv1.ConditionType{},\n\t\t},\n\t\t\"WeirdStatusClaimConditionTypes\": {\n\t\t\treason: \"Claim conditions should be overwritten if they are not an object.\",\n\t\t\tu: &Unstructured{\n\t\t\t\tUnstructured: unstructured.Unstructured{Object: map[string]any{\n\t\t\t\t\t\"status\": map[string]any{\n\t\t\t\t\t\t\"claimConditionTypes\": \"wat\",\n\t\t\t\t\t},\n\t\t\t\t}},\n\t\t\t\tSchema: SchemaLegacy,\n\t\t\t},\n\t\t\tset:  []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\")},\n\t\t\twant: []xpv1.ConditionType{xpv1.ConditionType(\"DatabaseReady\")},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgotErr := tc.u.SetClaimConditionTypes(tc.set...)\n\t\t\tif diff := cmp.Diff(tc.wantErr, gotErr, test.EquateErrors()); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\n%s\\nu.SetClaimConditionTypes(): -want, +got:\\n%s\", tc.reason, diff)\n\t\t\t}\n\n\t\t\tgot := tc.u.GetClaimConditionTypes()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\n%s\\nu.GetClaimConditionTypes(): -want, +got:\\n%s\", tc.reason, diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompositionSelector(t *testing.T) {\n\tsel := &metav1.LabelSelector{MatchLabels: map[string]string{\"cool\": \"very\"}}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *metav1.LabelSelector\n\t\twant *metav1.LabelSelector\n\t}{\n\t\t\"NewSel\": {\n\t\t\tu:    New(),\n\t\t\tset:  sel,\n\t\t\twant: sel,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetCompositionSelector(tc.set)\n\n\t\t\tgot := tc.u.GetCompositionSelector()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetCompositionSelector(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompositionReference(t *testing.T) {\n\tref := &corev1.ObjectReference{Namespace: \"ns\", Name: \"cool\"}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *corev1.ObjectReference\n\t\twant *corev1.ObjectReference\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  ref,\n\t\t\twant: ref,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetCompositionReference(tc.set)\n\n\t\t\tgot := tc.u.GetCompositionReference()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetCompositionReference(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompositionRevisionReference(t *testing.T) {\n\tref := &corev1.LocalObjectReference{Name: \"cool\"}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *corev1.LocalObjectReference\n\t\twant *corev1.LocalObjectReference\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  ref,\n\t\t\twant: ref,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetCompositionRevisionReference(tc.set)\n\n\t\t\tgot := tc.u.GetCompositionRevisionReference()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetCompositionRevisionReference(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompositionRevisionSelector(t *testing.T) {\n\tsel := &metav1.LabelSelector{MatchLabels: map[string]string{\"cool\": \"very\"}}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *metav1.LabelSelector\n\t\twant *metav1.LabelSelector\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  sel,\n\t\t\twant: sel,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetCompositionRevisionSelector(tc.set)\n\n\t\t\tgot := tc.u.GetCompositionRevisionSelector()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetCompositionRevisionSelector(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCompositionUpdatePolicy(t *testing.T) {\n\tp := xpv1.UpdateManual\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *xpv1.UpdatePolicy\n\t\twant *xpv1.UpdatePolicy\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  &p,\n\t\t\twant: &p,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetCompositionUpdatePolicy(tc.set)\n\n\t\t\tgot := tc.u.GetCompositionUpdatePolicy()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetCompositionUpdatePolicy(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestClaimReference(t *testing.T) {\n\tref := &reference.Claim{Namespace: \"ns\", Name: \"cool\", APIVersion: \"acme.com/v1\", Kind: \"Foo\"}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *reference.Claim\n\t\twant *reference.Claim\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(WithSchema(SchemaLegacy)),\n\t\t\tset:  ref,\n\t\t\twant: ref,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetClaimReference(tc.set)\n\n\t\t\tgot := tc.u.GetClaimReference()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetClaimReference(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestResourceReferences(t *testing.T) {\n\tref := corev1.ObjectReference{Namespace: \"ns\", Name: \"cool\"}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  []corev1.ObjectReference\n\t\twant []corev1.ObjectReference\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(),\n\t\t\tset:  []corev1.ObjectReference{ref},\n\t\t\twant: []corev1.ObjectReference{ref},\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetResourceReferences(tc.set)\n\n\t\t\tgot := tc.u.GetResourceReferences()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetResourceReferences(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestWriteConnectionSecretToReference(t *testing.T) {\n\tref := &xpv1.SecretReference{Namespace: \"ns\", Name: \"cool\"}\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *xpv1.SecretReference\n\t\twant *xpv1.SecretReference\n\t}{\n\t\t\"NewRef\": {\n\t\t\tu:    New(WithSchema(SchemaLegacy)),\n\t\t\tset:  ref,\n\t\t\twant: ref,\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetWriteConnectionSecretToReference(tc.set)\n\n\t\t\tgot := tc.u.GetWriteConnectionSecretToReference()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetWriteConnectionSecretToReference(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestConnectionDetailsLastPublishedTime(t *testing.T) {\n\tnow := &metav1.Time{Time: time.Now()}\n\n\t// The timestamp loses a little resolution when round-tripped through JSON\n\t// encoding.\n\tlores := func(t *metav1.Time) *metav1.Time {\n\t\tout := &metav1.Time{}\n\t\tj, _ := json.Marshal(t) //nolint:errchkjson // No encoding error in practice.\n\t\t_ = json.Unmarshal(j, out)\n\n\t\treturn out\n\t}\n\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\tset  *metav1.Time\n\t\twant *metav1.Time\n\t}{\n\t\t\"NewTimeLegacy\": {\n\t\t\tu:    New(WithSchema(SchemaLegacy)),\n\t\t\tset:  now,\n\t\t\twant: lores(now),\n\t\t},\n\t\t\"NewTimeModern\": {\n\t\t\tu:    New(WithSchema(SchemaModern)),\n\t\t\tset:  now,\n\t\t\twant: nil, // modern schema doesn't support connection details\n\t\t},\n\t}\n\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\ttc.u.SetConnectionDetailsLastPublishedTime(tc.set)\n\n\t\t\tgot := tc.u.GetConnectionDetailsLastPublishedTime()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetConnectionDetailsLastPublishedTime(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestObservedGeneration(t *testing.T) {\n\tcases := map[string]struct {\n\t\tu    *Unstructured\n\t\twant int64\n\t}{\n\t\t\"Set\": {\n\t\t\tu: New(func(u *Unstructured) {\n\t\t\t\tu.SetObservedGeneration(123)\n\t\t\t}),\n\t\t\twant: 123,\n\t\t},\n\t\t\"NotFound\": {\n\t\t\tu: New(),\n\t\t},\n\t}\n\tfor name, tc := range cases {\n\t\tt.Run(name, func(t *testing.T) {\n\t\t\tgot := tc.u.GetObservedGeneration()\n\t\t\tif diff := cmp.Diff(tc.want, got); diff != \"\" {\n\t\t\t\tt.Errorf(\"\\nu.GetObservedGeneration(): -want, +got:\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n"
