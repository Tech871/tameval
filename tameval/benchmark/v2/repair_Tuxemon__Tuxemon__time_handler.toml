[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/time_handler.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_time_handler.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.time_handler --unit-test tests.tuxemon.test_time_handler --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/time_handler.py --unit-test tests/tuxemon/test_time_handler.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 92.0
mutation_kill_rate = 0
original_mutation_kill_rate = 76.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/tuxemon/test_time_handler.py"
focal_file_path = "tuxemon/time_handler.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_time_handler.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/time_handler.py"
first_commit_date = "2024-09-18"
last_commit_date = "2025-03-20"
test_file_content = "\nimport unittest\nfrom datetime import datetime\n\nfrom tuxemon.time_handler import (\n    calculate_day_night_cycle,\n    calculate_day_stage_of_day,\n    determine_season,\n    get_current_time,\n    is_leap_year,\n)\n\n\nclass TestTimeFunctions(unittest.TestCase):\n\n    def test_get_current_time(self):\n        current_time = get_current_time()\n\n    def test_calculate_day_night_cycle(self):\n        test_cases = [\n            (datetime(2022, 1, 1, 0, 0, 0), \"false\"),\n            (datetime(2022, 1, 1, 6, 0, 0), \"true\"),\n            (datetime(2022, 1, 1, 18, 0, 0), \"false\"),\n            (datetime(2022, 1, 1, 12, 0, 0), \"true\"),\n        ]\n        for time, expected in test_cases:\n\n    def test_calculate_day_stage_of_day(self):\n        test_cases = [\n            (datetime(2022, 1, 1, 0, 0, 0), \"night\"),\n            (datetime(2022, 1, 1, 4, 0, 0), \"dawn\"),\n            (datetime(2022, 1, 1, 7, 0, 0), \"dawn\"),\n            (datetime(2022, 1, 1, 10, 0, 0), \"morning\"),\n            (datetime(2022, 1, 1, 14, 0, 0), \"afternoon\"),\n            (datetime(2022, 1, 1, 17, 0, 0), \"dusk\"),\n            (datetime(2022, 1, 1, 20, 0, 0), \"night\"),\n        ]\n        for time, expected in test_cases:\n\n    def test_determine_season(self):\n        test_cases = [\n            (datetime(2022, 1, 1), \"winter\"),\n            (datetime(2022, 3, 20), \"winter\"),\n            (datetime(2022, 6, 20), \"spring\"),\n            (datetime(2022, 9, 20), \"summer\"),\n            (datetime(2022, 12, 20), \"autumn\"),\n        ]\n\n        test_cases_southern_hemisphere = [\n            (datetime(2022, 1, 1), \"summer\"),\n            (datetime(2022, 3, 20), \"summer\"),\n            (datetime(2022, 6, 20), \"autumn\"),\n            (datetime(2022, 9, 20), \"winter\"),\n            (datetime(2022, 12, 20), \"spring\"),\n        ]\n\n        for time, expected in test_cases:\n\n        for time, expected in test_cases_southern_hemisphere:\n\n    def test_is_leap_year(self):\n        test_cases = [\n            (2020, True),\n            (2019, False),\n            (2024, True),\n            (1900, False),\n            (2000, True),\n        ]\n        for year, expected in test_cases:"
