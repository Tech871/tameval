[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "fox-it/dissect.target"
sha = "86f4234cf0ad30186dd8bd27ac1a560298423ae9"
bench_version = 2

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=dissect/target/helpers/protobuf.py -m pytest -q --junit-xml=test_output.xml tests/helpers/test_protobuf.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target dissect.target.helpers.protobuf --unit-test tests.helpers.test_protobuf --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target dissect/target/helpers/protobuf.py --unit-test tests/helpers/test_protobuf.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 93.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 96.0
covered_lines = [ 0, 2, 4, 7, 17, 18, 21, 22, 26, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55,]
missed_lines = [ 19, 23,]

[input_info]
test_file_path = "tests/helpers/test_protobuf.py"
focal_file_path = "dissect/target/helpers/protobuf.py"
test_file_url = "https://github.com/fox-it/dissect.target/blob/86f4234cf0ad30186dd8bd27ac1a560298423ae9/tests/helpers/test_protobuf.py"
focal_file_url = "https://github.com/fox-it/dissect.target/blob/86f4234cf0ad30186dd8bd27ac1a560298423ae9/dissect/target/helpers/protobuf.py"
first_commit_date = "2024-02-16"
last_commit_date = "2025-08-06"
test_file_content = "from io import BytesIO\n\nimport pytest\nfrom dissect.cstruct import cstruct\n\nfrom dissect.target.helpers.protobuf import ProtobufVarint, decode_varint, encode_varint\n\n\n@pytest.mark.parametrize(\n    \"input, expected_output\",\n    [\n        (b\"\\xd2\\x85\\xd8\\xcc\\x04\", 1234567890),\n        (b\"\\xd2\\x85\\xd8\\xcc\\x04\\x01\\x02\\x03\", 1234567890),\n    ],\n)\ndef test_protobuf_varint_decode(input: bytes, expected_output: int) -> None:\n    assert decode_varint(BytesIO(input)) == expected_output\n\n\n@pytest.mark.parametrize(\n    \"input, expected_output\",\n    [\n        (1234567890, b\"\\xd2\\x85\\xd8\\xcc\\x04\"),\n        (pow(2, 128), b\"\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x80\\x04\"),\n    ],\n)\ndef test_protobuf_varint_encode(input: int, expected_output: bytes) -> None:\n    assert encode_varint(input) == expected_output\n\n\ndef test_protobuf_varint_cstruct() -> None:\n    struct_def = \"\"\"\n    struct foo {\n        uint32 foo;\n        varint size;\n        char   bar[size];\n    };\n    \"\"\"\n    cs = cstruct(endian=\">\")\n    cs.addtype(\"varint\", ProtobufVarint(cs, \"varint\", size=None, signed=False, alignment=1))\n    cs.load(struct_def, compiled=False)\n\n    aaa = b\"a\" * 123456\n    buf = b\"\\x00\\x00\\x00\\x01\\xc0\\xc4\\x07\" + aaa\n    foo = cs.foo(buf + b\"\\x01\\x02\\x03\")\n    assert foo.foo == 1\n    assert foo.size == 123456\n    assert foo.bar == aaa\n    assert foo.dumps() == buf\n\n    assert cs.varint[2](b\"\\x80\\x01\\x80\\x02\") == [128, 256]\n    assert cs.varint[2].dumps([128, 256]) == b\"\\x80\\x01\\x80\\x02\""
