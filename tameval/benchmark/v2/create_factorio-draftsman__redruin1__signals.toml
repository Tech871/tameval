[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "redruin1/factorio-draftsman"
sha = "4a795c6530c6d5ea2571c8a234164da22928a4a1"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=draftsman/data/signals.py -m pytest -q --junit-xml=test_output.xml test/data/test_signals.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target draftsman.data.signals --unit-test test.data.test_signals --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target draftsman/data/signals.py --unit-test test/data/test_signals.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 77.0
original_coverage = 77.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 17, 20, 23, 24, 25, 26, 27, 28, 29, 30, 46, 49, 69, 79, 80, 82, 83, 84, 85, 86, 88, 91, 115,]
missed_lines = [ 106, 107, 108, 109, 112, 125, 126, 127, 128, 130,]

[input_info]
test_file_path = "test/data/test_signals.py"
focal_file_path = "draftsman/data/signals.py"
test_file_url = "https://github.com/redruin1/factorio-draftsman/blob/4a795c6530c6d5ea2571c8a234164da22928a4a1/test/data/test_signals.py"
focal_file_url = "https://github.com/redruin1/factorio-draftsman/blob/4a795c6530c6d5ea2571c8a234164da22928a4a1/draftsman/data/signals.py"
first_commit_date = "2022-02-22"
last_commit_date = "2025-07-19"
test_file_content = "from draftsman.data import signals\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    \"i,signal_type,signal_location\",\n    [\n        (1, \"item\", signals.item),\n        (2, \"fluid\", signals.fluid),\n        (3, \"recipe\", signals.recipe),\n        (4, \"entity\", signals.entity),\n        (5, \"space-location\", signals.space_location),\n        (6, \"asteroid-chunk\", signals.asteroid_chunk),\n        (7, \"quality\", signals.quality),\n        (8, \"virtual\", signals.virtual),\n    ],\n)\ndef test_add_signal(i, signal_type, signal_location):\n    \"\"\"\n    Ensure adding a signal (of any type) properly populates all relevant data\n    structures.\n    \"\"\"\n    signal_name = \"new-signal-\" + str(i)\n    print(signal_name)\n    signals.add_signal(signal_name, signal_type)\n    assert signals.raw[signal_name] == {\"name\": signal_name, \"type\": signal_type}\n    assert signals.type_of[signal_name] == [signal_type]\n    assert signal_name in signal_location\n\n\ndef test_add_signal_incorrect_type():\n    \"\"\"\n    Make sure attempting to add a signal of unknown type results in an error.\n    \"\"\"\n    with pytest.raises(ValueError):\n        signals.add_signal(\"new-signal\", \"incorrect\")\n"
