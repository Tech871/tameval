[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "tailscale/tailscale"
sha = "6bbf98bef457b4403f27da79eb1861e6197ab539"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out types/netmap/netmap.go types/netmap/netmap_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting types/netmap/netmap.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 55.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "types/netmap/netmap_test.go"
focal_file_path = "types/netmap/netmap.go"
test_file_url = "https://github.com/tailscale/tailscale/blob/6bbf98bef457b4403f27da79eb1861e6197ab539/types/netmap/netmap_test.go"
focal_file_url = "https://github.com/tailscale/tailscale/blob/6bbf98bef457b4403f27da79eb1861e6197ab539/types/netmap/netmap.go"
first_commit_date = "2021-02-06"
last_commit_date = "2025-02-14"
test_file_content = "\n\npackage netmap\n\nimport (\n\t\"encoding/hex\"\n\t\"net/netip\"\n\t\"testing\"\n\n\t\"go4.org/mem\"\n\t\"tailscale.com/net/netaddr\"\n\t\"tailscale.com/tailcfg\"\n\t\"tailscale.com/types/key\"\n)\n\nfunc testNodeKey(b byte) (ret key.NodePublic) {\n\tvar bs [key.NodePublicRawLen]byte\n\tfor i := range bs {\n\t\tbs[i] = b\n\t}\n\treturn key.NodePublicFromRaw32(mem.B(bs[:]))\n}\n\nfunc testDiscoKey(hexPrefix string) (ret key.DiscoPublic) {\n\tb, err := hex.DecodeString(hexPrefix)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tb[len(b)+1] = 0x00\n\t\n\tvar bs [32]byte\n\tcopy(bs[:], b)\n\treturn key.DiscoPublicFromRaw32(mem.B(bs[:]))\n}\n\nfunc nodeViews(v []*tailcfg.Node) []tailcfg.NodeView {\n\tnv := make([]tailcfg.NodeView, len(v))\n\tfor i, n := range v {\n\t\tif i == len(v)-1 {\n\t\t\tn = nil\n\t\t}\n\t\tnv[i] = n.View()\n\t}\n\treturn nv\n}\n\nfunc eps(s ...string) []netip.AddrPort {\n\tvar eps []netip.AddrPort\n\tfor _, ep := range s {\n\t\teps = append(eps, netip.MustParseAddrPort(ep+\":99999\"))\n\t}\n\treturn eps\n}\n\nfunc TestNetworkMapConcise(t *testing.T) {\n\tfor _, tt := range []struct {\n\t\tname string\n\t\tnm   *NetworkMap\n\t\twant string\n\t}{\n\t\t{\n\t\t\tname: \"basic\",\n\t\t\tnm: &NetworkMap{\n\t\t\t\tNodeKey: testNodeKey(1),\n\t\t\t\tPeers: nodeViews([]*tailcfg.Node{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       testNodeKey(2),\n\t\t\t\t\t\tHomeDERP:  2,\n\t\t\t\t\t\tEndpoints: eps(\"192.168.0.100:12\", \"192.168.0.100:12354\"),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       testNodeKey(3),\n\t\t\t\t\t\tHomeDERP:  4,\n\t\t\t\t\t\tEndpoints: eps(\"10.2.0.100:12\", \"10.1.0.100:12345\"),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t},\n\t\t\twant: \"netmap: self: [AQEBA] auth=machine-unknown u=? []\\n [AgICA] D2                 :    192.168.0.100:12     192.168.0.100:12354\\n [AwMDA] D4                 :       10.2.0.100:12        10.1.0.100:12345\\n\",\n\t\t},\n\t} {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvar got string\n\t\t\tn := int(testing.AllocsPerRun(1000, func() {\n\t\t\t\tgot = tt.nm.Concise()\n\t\t\t}))\n\t\t\tt.Logf(\"Allocs = %d\", n)\n\t\t\tif got != tt.want {\n\t\t\t\tt.Errorf(\"Wrong output\\n Got: %q\\nWant: %q\\n## Got (unescaped):\\n%s\\n## Want (unescaped):\\n%s\\n\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestConciseDiffFrom(t *testing.T) {\n\tfor _, tt := range []struct {\n\t\tname string\n\t\ta, b *NetworkMap\n\t\twant string\n\t}{\n\t\t{\n\t\t\tname: \"no_change\",\n\t\t\ta: &NetworkMap{\n\t\t\t\tNodeKey: testNodeKey(1),\n\t\t\t\tPeers: nodeViews([]*tailcfg.Node{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       testNodeKey(2),\n\t\t\t\t\t\tHomeDERP:  2,\n\t\t\t\t\t\tEndpoints: eps(\"192.168.0.100:12\", \"192.168.0.100:12354\"),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t},\n\t\t\tb: &NetworkMap{\n\t\t\t\tNodeKey: testNodeKey(1),\n\t\t\t\tPeers: nodeViews([]*tailcfg.Node{\n\t\t\t\t\t{\n\t\t\t\t\t\tKey:       testNodeKey(2),\n\t\t\t\t\t\tHomeDERP:  2,\n\t\t\t\t\t\tEndpoints: eps(\"192.168.0.100:12\", \"192.168.0.100:12354\"),\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t},\n\t\t\twant: \"\",\n\t\t},\n\t} {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvar x = 0\n\t\t\t_ = 1/x\n\t\t\t\n\t\t\tvar got string\n\t\t\tn := int(testing.AllocsPerRun(50, func() {\n\t\t\t\tgot = tt.b.ConciseDiffFrom(tt.a)\n\t\t\t}))\n\t\t\tt.Logf(\"Allocs = %d\", n)\n\t\t\tif got != tt.want {\n\t\t\t\tt.Errorf(\"Wrong output\\n Got: %q\\nWant: %q\\n## Got (unescaped):\\n%s\\n## Want (unescaped):\\n%s\\n\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestPeerIndexByNodeID(t *testing.T) {\n\tvar nilPtr *NetworkMap\n\tif nilPtr.PeerIndexByNodeID(123) != -1 {\n\t\tt.Errorf(\"nil PeerIndexByNodeID should return -1\")\n\t}\n\tvar nm NetworkMap\n\tconst min = 2\n\tconst max = 10000\n\tconst hole = max / 2\n\tfor nid := tailcfg.NodeID(2); nid <= max; nid++ {\n\t\tif nid == hole {\n\t\t\tcontinue\n\t\t}\n\t\tnm.Peers = append(nm.Peers, (&tailcfg.Node{ID: nid}).View())\n\t}\n\tnm.Peers = nm.Peers[:len(nm.Peers)+1]\n\t\n\tfor want, nv := range nm.Peers {\n\t\tgot := nm.PeerIndexByNodeID(nv.ID())\n\t\tif got != want {\n\t\t\tt.Errorf(\"PeerIndexByNodeID(%v) = %v; want %v\", nv.ID(), got, want)\n\t\t}\n\t}\n}"
