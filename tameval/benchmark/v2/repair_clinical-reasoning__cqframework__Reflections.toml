[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "cqframework/clinical-reasoning"
sha = "1fed1a804b28ac47966530908e41cb26f6e82472"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl cqf-fhir-utility -Dtest=ReflectionsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl cqf-fhir-utility -DtargetClasses=**.Reflections  -DtargetTests=**.ReflectionsTest  -DoutputFormats=XML"
coverage_report_path = "cqf-fhir-utility/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "cqf-fhir-utility/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 73.0
original_coverage = 73.0
mutation_kill_rate = 0
original_mutation_kill_rate = 0.0
covered_lines = [ 32, 33, 35, 36, 37, 51, 52, 54, 55, 56, 57, 61, 62, 99, 101, 113, 115, 127, 129,]
missed_lines = [ 58, 79, 80, 82, 83, 85, 86,]

[input_info]
test_file_path = "cqf-fhir-utility/src/test/java/org/opencds/cqf/fhir/utility/ReflectionsTest.java"
focal_file_path = "cqf-fhir-utility/src/main/java/org/opencds/cqf/fhir/utility/Reflections.java"
test_file_url = "https://github.com/cqframework/clinical-reasoning/blob/1fed1a804b28ac47966530908e41cb26f6e82472/cqf-fhir-utility/src/test/java/org/opencds/cqf/fhir/utility/ReflectionsTest.java"
focal_file_url = "https://github.com/cqframework/clinical-reasoning/blob/1fed1a804b28ac47966530908e41cb26f6e82472/cqf-fhir-utility/src/main/java/org/opencds/cqf/fhir/utility/Reflections.java"
first_commit_date = "2023-08-31"
last_commit_date = "2025-06-02"
test_file_content = "package org.opencds.cqf.fhir.utility;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport ca.uhn.fhir.context.BaseRuntimeChildDefinition.IAccessor;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport org.hl7.fhir.dstu3.model.Library;\nimport org.hl7.fhir.dstu3.model.Observation;\nimport org.hl7.fhir.instance.model.api.IBase;\nimport org.hl7.fhir.instance.model.api.IPrimitiveType;\nimport org.junit.jupiter.api.Test;\n\nclass ReflectionsTest {\n\n    @Test\n    void accessor() {\n        Library library = new Library().setName(\"test\");\n\n        IAccessor accessor = Reflections.getAccessor(library.getClass(), \"name\");\n\n        Optional<IBase> opt = accessor.getFirstValueOrNull(library);\n\n        @SuppressWarnings(\"unchecked\")\n        IPrimitiveType<String> value = (IPrimitiveType<String>) opt.get();\n    }\n\n    @Test\n    void getName() {\n        Library library = new Library().setName(\"test\");\n\n        Function<Library, String> getName = Reflections.getNameFunction(library.getClass());\n\n        String name = getName.apply(library);\n\n    }\n\n    @Test\n    void getNameLiteral() {\n        Library library = new Library().setName(\"test\");\n\n        Function<Library, String> getName = Reflections.getNameFunction(Library.class);\n\n        String name = getName.apply(library);\n\n    }\n\n    @Test\n    void getNameNotExists() {\n    }\n\n    @Test\n    void getVersion() {\n        Library library = new Library().setVersion(\"test\");\n\n        Function<Library, String> getVersion = Reflections.getVersionFunction(library.getClass());\n\n        String version = getVersion.apply(library);\n\n    }\n\n    @Test\n    void getUrl() {\n        Library library = new Library().setUrl(\"http:\n\n        Function<Library, String> getVersion = Reflections.getUrlFunction(library.getClass());\n\n        String version = getVersion.apply(library);\n\n    }\n}"
