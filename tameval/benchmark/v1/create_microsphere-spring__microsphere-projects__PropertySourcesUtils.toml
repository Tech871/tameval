[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-spring"
sha = "8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-spring-context -Dtest=PropertySourcesUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-spring-context -DtargetClasses=**.PropertySourcesUtils  -DtargetTests=**.PropertySourcesUtilsTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-spring-context/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-spring-context/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 83.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 42, 70, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 91, 92, 94, 98, 103, 104, 108, 112, 113, 114, 117, 118, 119, 121, 122, 126, 130, 131, 135, 139, 140, 141, 142, 143, 144, 148, 149, 162, 164, 165, 166, 168, 181, 204, 219, 221, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 240, 242, 254, 257, 261, 286, 287, 288, 289, 290, 291, 292, 293, 294, 306, 320, 321, 322, 323, 324, 326, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 363,]
missed_lines = [ 40, 115, 191, 255, 258, 272, 273, 274, 275, 277, 278, 279, 280, 282, 337, 361, 374, 375, 385,]

[input_info]
test_file_path = "microsphere-spring-context/src/test/java/io/microsphere/spring/core/env/PropertySourcesUtilsTest.java"
focal_file_path = "microsphere-spring-context/src/main/java/io/microsphere/spring/core/env/PropertySourcesUtils.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/test/java/io/microsphere/spring/core/env/PropertySourcesUtilsTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/main/java/io/microsphere/spring/core/env/PropertySourcesUtils.java"
first_commit_date = "2024-12-25"
last_commit_date = "2025-01-06"
test_file_content = "package io.microsphere.spring.core.env;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.support.ConfigurableConversionService;\nimport org.springframework.core.env.AbstractEnvironment;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.EnumerablePropertySource;\nimport org.springframework.core.env.MapPropertySource;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.PropertiesPropertySource;\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.core.io.support.ResourcePropertySource;\nimport org.springframework.mock.env.MockEnvironment;\nimport org.springframework.mock.env.MockPropertySource;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static io.microsphere.spring.core.env.EnvironmentUtils.getConversionService;\nimport static io.microsphere.spring.core.env.EnvironmentUtils.resolveCommaDelimitedValueToList;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.DEFAULT_PROPERTIES_PROPERTY_SOURCE_NAME;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.addDefaultProperties;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.findConfiguredPropertySource;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.findConfiguredPropertySourceName;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.findPropertyNamesByPrefix;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.getDefaultProperties;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.getDefaultPropertiesPropertySource;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.getMapPropertySource;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.getPropertySource;\nimport static io.microsphere.spring.core.env.PropertySourcesUtils.getSubProperties;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.springframework.core.convert.support.DefaultConversionService.getSharedInstance;\n\n/**\n * {@link PropertySourcesUtils} Test\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n * @see PropertySourcesUtils\n * @since 2017.01.13\n */\n@SuppressWarnings(\"unchecked\")\npublic class PropertySourcesUtilsTest {\n\n    private ConfigurableEnvironment environment;\n\n    @BeforeEach\n    public void before() {\n        MockEnvironment mockEnvironment = new MockEnvironment();\n        mockEnvironment.setProperty(\"test-key\", \"test-value\");\n        mockEnvironment.setProperty(\"test-key2\", \"test-value2\");\n        mockEnvironment.setConversionService((ConfigurableConversionService) getSharedInstance());\n        this.environment = mockEnvironment;\n    }\n\n    @Test\n    public void testGetPropertySource() {\n        PropertySource propertySource = getPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, PropertySource.class);\n        assertNotNull(propertySource);\n\n        propertySource = getPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, EnumerablePropertySource.class);\n        assertNotNull(propertySource);\n\n        propertySource = getPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, MapPropertySource.class);\n        assertNotNull(propertySource);\n\n        propertySource = getPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, PropertiesPropertySource.class);\n        assertNotNull(propertySource);\n\n        propertySource = getPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, MockPropertySource.class);\n        assertNotNull(propertySource);\n\n        propertySource = getPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME, ResourcePropertySource.class);\n        assertNull(propertySource);\n\n        propertySource = getPropertySource(environment, \"test\", ResourcePropertySource.class);\n        assertNull(propertySource);\n\n        propertySource = getPropertySource(environment, \"test\", MockPropertySource.class, MockPropertySource::new);\n        assertNotNull(propertySource);\n    }\n\n    @Test\n    public void testGetMapPropertySource() {\n        PropertySource propertySource = getMapPropertySource(environment, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME);\n        assertNotNull(propertySource);\n\n        propertySource = getMapPropertySource(environment, \"test\");\n        assertNull(propertySource);\n\n        propertySource = getMapPropertySource(environment, \"test\", true);\n        assertNotNull(propertySource);\n\n        propertySource = getMapPropertySource(environment, \"test\");\n        assertNotNull(propertySource);\n    }\n\n    @Test\n    public void testFindConfiguredPropertySource() {\n        PropertySource propertySource = findConfiguredPropertySource(environment, \"test-key\");\n        assertNotNull(propertySource);\n\n        propertySource = findConfiguredPropertySource(environment, \"non-exist-key\");\n        assertNull(propertySource);\n    }\n\n    @Test\n    public void testFindConfiguredPropertySourceName() {\n        String propertySourceName = findConfiguredPropertySourceName(environment, \"test-key\");\n        assertNotNull(propertySourceName, MockPropertySource.MOCK_PROPERTIES_PROPERTY_SOURCE_NAME);\n\n        propertySourceName = findConfiguredPropertySourceName(environment, \"non-exist-key\");\n        assertNull(propertySourceName);\n    }\n\n    @Test\n    public void testResolveCommaDelimitedValueToList() {\n        List<String> values = resolveCommaDelimitedValueToList(environment, \"${test-key},${test-key2}\");\n        assertEquals(\"test-value\", values.get(0));\n        assertEquals(\"test-value2\", values.get(1));\n    }\n\n    @Test\n    public void testGetConversionService() {\n        ConversionService conversionService = getConversionService(environment);\n        assertEquals(getSharedInstance(), conversionService);\n    }\n\n    @Test\n    public void testFindPropertyNamesByPrefix() {\n        Set<String> propertyNames = findPropertyNamesByPrefix(environment, \"test-\");\n        assertEquals(2, propertyNames.size());\n        assertTrue(propertyNames.contains(\"test-key\"));\n        assertTrue(propertyNames.contains(\"test-key2\"));\n    }\n\n    @Test\n    public void testGetSubProperties() {\n\n        ConfigurableEnvironment environment = new AbstractEnvironment() {\n        };\n\n        MutablePropertySources propertySources = environment.getPropertySources();\n\n        Map<String, Object> source = new HashMap<String, Object>();\n        Map<String, Object> source2 = new HashMap<String, Object>();\n\n        MapPropertySource propertySource = new MapPropertySource(\"propertySource\", source);\n        MapPropertySource propertySource2 = new MapPropertySource(\"propertySource2\", source2);\n\n        propertySources.addLast(propertySource);\n        propertySources.addLast(propertySource2);\n\n        Map<String, Object> result = getSubProperties(propertySources, \"user\");\n\n        assertEquals(Collections.emptyMap(), result);\n\n        source.put(\"age\", \"31\");\n        source.put(\"user.name\", \"Mercy\");\n        source.put(\"user.age\", \"${age}\");\n\n        source2.put(\"user.name\", \"mercyblitz\");\n        source2.put(\"user.age\", \"32\");\n\n        Map<String, Object> expected = new HashMap<String, Object>();\n        expected.put(\"name\", \"Mercy\");\n        expected.put(\"age\", \"31\");\n\n        assertEquals(expected, getSubProperties((Iterable) propertySources, \"user\"));\n\n        assertEquals(expected, getSubProperties(environment, \"user\"));\n\n        assertEquals(expected, getSubProperties(propertySources, \"user\"));\n\n        assertEquals(expected, getSubProperties(propertySources, environment, \"user\"));\n\n        result = getSubProperties(propertySources, \"\");\n\n        assertEquals(Collections.emptyMap(), result);\n\n        result = getSubProperties(propertySources, \"no-exists\");\n\n        assertEquals(Collections.emptyMap(), result);\n\n    }\n\n    @Test\n    public void testDefaultProperties() {\n        MockEnvironment environment = new MockEnvironment();\n        addDefaultProperties(environment, \"key-1\", \"value-1\", \"key-2\", \"value-2\");\n\n        assertEquals(\"value-1\", environment.getProperty(\"key-1\"));\n        assertEquals(\"value-2\", environment.getProperty(\"key-2\"));\n\n        MapPropertySource mapPropertySource = getDefaultPropertiesPropertySource(environment, false);\n        assertEquals(DEFAULT_PROPERTIES_PROPERTY_SOURCE_NAME, mapPropertySource.getName());\n        assertEquals(\"defaultProperties\", mapPropertySource.getName());\n\n        Map<String, Object> defaultProperties = getDefaultProperties(environment, false);\n        assertEquals(2, defaultProperties.size());\n        assertEquals(\"value-1\", defaultProperties.get(\"key-1\"));\n        assertEquals(\"value-2\", defaultProperties.get(\"key-2\"));\n    }\n\n}\n"
