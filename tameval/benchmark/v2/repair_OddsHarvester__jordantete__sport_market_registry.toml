[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "jordantete/OddsHarvester"
sha = "4a9c2a492c144b7c68c26841d2f4eaf0cace6b48"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=src/core/sport_market_registry.py -m pytest -q --junit-xml=test_output.xml tests/core/test_sport_market_registry.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target src.core.sport_market_registry --unit-test tests.core.test_sport_market_registry --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target src/core/sport_market_registry.py --unit-test tests/core/test_sport_market_registry.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 80.0
original_mutation_kill_rate = 80.0
covered_lines = [ 0, 2, 21, 24, 26, 27, 29, 30, 31, 33, 34, 36, 39, 42, 43, 47, 65, 66, 68, 79, 80, 92, 93, 105, 106, 107, 108, 119, 120, 122, 130, 131, 132, 144, 145, 146, 158, 159, 160, 161, 173, 174, 175, 176, 188, 189, 190, 191, 200, 201, 203, 212, 213, 214, 226, 227, 228, 229, 240, 241, 243, 254, 255, 256, 268, 269, 270, 281, 282, 284, 295, 296, 297, 309, 310, 311, 322, 323, 325, 337, 338, 339, 350, 351, 353, 362, 363, 364, 375, 376, 378, 379, 380, 381, 382, 383, 384,]
missed_lines = []

[input_info]
test_file_path = "tests/core/test_sport_market_registry.py"
focal_file_path = "src/core/sport_market_registry.py"
test_file_url = "https://github.com/jordantete/OddsHarvester/blob/4a9c2a492c144b7c68c26841d2f4eaf0cace6b48/tests/core/test_sport_market_registry.py"
focal_file_url = "https://github.com/jordantete/OddsHarvester/blob/4a9c2a492c144b7c68c26841d2f4eaf0cace6b48/src/core/sport_market_registry.py"
first_commit_date = "2025-02-25"
last_commit_date = "2025-08-14"
test_file_content = "from unittest.mock import MagicMock, patch\n\nfrom src.core.sport_market_registry import SportMarketRegistrar, SportMarketRegistry\nfrom src.utils.sport_market_constants import Sport\n\n\nclass TestSportMarketRegistry:\n\n    def setup_method(self):\n        SportMarketRegistry._registry = {}\n\n    def test_register_new_sport(self):\n        sport = Sport.FOOTBALL\n        market_mapping = {\"1x2\": lambda x: x}\n        SportMarketRegistry.register(sport, market_mapping)\n        assert sport.value in SportMarketRegistry._registry\n        assert \"1x2\" in SportMarketRegistry._registry[sport.value]\n        assert SportMarketRegistry._registry[sport.value][\"1x2\"] == market_mapping[\"1x2\"]\n\n    def test_register_existing_sport(self):\n        sport = Sport.FOOTBALL\n        market_mapping1 = {\"1x2\": lambda x: x}\n        market_mapping2 = {\"btts\": lambda x: x * 2}\n        SportMarketRegistry.register(sport, market_mapping1)\n        SportMarketRegistry.register(sport, market_mapping2)\n        assert sport.value in SportMarketRegistry._registry\n        assert \"1x2\" in SportMarketRegistry._registry[sport.value]\n        assert \"btts\" in SportMarketRegistry._registry[sport.value]\n        assert SportMarketRegistry._registry[sport.value][\"1x2\"] == market_mapping1[\"1x2\"]\n        assert SportMarketRegistry._registry[sport.value][\"btts\"] == market_mapping2[\"btts\"]\n\n    def test_get_market_mapping_existing_sport(self):\n        sport = Sport.FOOTBALL\n        market_mapping = {\"1x2\": lambda x: x}\n        SportMarketRegistry.register(sport, market_mapping)\n        result = SportMarketRegistry.get_market_mapping(sport.value)\n        assert result == market_mapping\n\n    def test_get_market_mapping_existing_sport_alternative(self):\n        sport = Sport.FOOTBALL\n        market_mapping = {\"1x2\": lambda x: x}\n        SportMarketRegistry.register(sport, market_mapping)\n        result = SportMarketRegistry._registry.get(sport.value, {})\n        assert result == market_mapping\n\n    def test_get_market_mapping_nonexistent_sport(self):\n        result = SportMarketRegistry.get_market_mapping(\"nonexistent_sport\")\n        assert result == {}\n\n    def test_get_market_mapping_nonexistent_sport_alternative(self):\n        result = SportMarketRegistry._registry.get(\"nonexistent_sport\", {})\n        assert result == {}\n\n\nclass TestSportMarketRegistrar:\n\n    def setup_method(self):\n        SportMarketRegistry._registry = {}\n\n    def test_create_market_lambda(self):\n        main_market = \"1X2\"\n        specific_market = None\n        odds_labels = [\"1\", \"X\", \"2\"]\n\n        extractor_mock = MagicMock()\n        page_mock = MagicMock()\n        lambda_func = SportMarketRegistrar.create_market_lambda(main_market, specific_market, odds_labels)\n        lambda_func(extractor_mock, page_mock)\n        extractor_mock.extract_market_odds.assert_called_once_with(\n            page=page_mock,\n            main_market=main_market,\n            specific_market=specific_market,\n            period=\"FullTime\",\n            odds_labels=odds_labels,\n            scrape_odds_history=False,\n            target_bookmaker=None,\n            preview_submarkets_only=False,\n        )\n\n    def test_create_market_lambda_alternative(self):\n        main_market = \"1X2\"\n        specific_market = None\n        odds_labels = [\"1\", \"X\", \"2\"]\n\n        extractor_mock = MagicMock()\n        page_mock = MagicMock()\n        lambda_func = SportMarketRegistrar.create_market_lambda(main_market, specific_market, odds_labels)\n        lambda_func(extractor_mock, page_mock)\n        extractor_mock.extract_market_odds.assert_called_with(\n            page=page_mock,\n            main_market=main_market,\n            specific_market=specific_market,\n            period=\"FullTime\",\n            odds_labels=odds_labels,\n            scrape_odds_history=False,\n            target_bookmaker=None,\n            preview_submarkets_only=False,\n        )\n\n    def test_register_football_markets(self):\n        SportMarketRegistrar.register_football_markets()\n        football_markets = SportMarketRegistry.get_market_mapping(Sport.FOOTBALL.value)\n        assert \"1x2\" in football_markets\n        assert \"btts\" in football_markets\n        assert \"double_chance\" in football_markets\n        assert \"dnb\" in football_markets\n        assert \"over_under_2_5\" in football_markets\n        assert \"european_handicap_-1\" in football_markets\n        assert \"asian_handicap_-1\" in football_markets\n\n    def test_register_tennis_markets(self):\n        SportMarketRegistrar.register_tennis_markets()\n        tennis_markets = SportMarketRegistry.get_market_mapping(Sport.TENNIS.value)\n        assert \"match_winner\" in tennis_markets\n        assert \"over_under_sets_2_5\" in tennis_markets\n        assert \"over_under_games_22_5\" in tennis_markets\n        assert any(key.startswith(\"asian_handicap_\") and key.endswith(\"_games\") for key in tennis_markets)\n        assert any(key.startswith(\"asian_handicap_\") and key.endswith(\"_sets\") for key in tennis_markets)\n        assert \"correct_score_2_0\" in tennis_markets\n        assert \"correct_score_0_2\" in tennis_markets\n\n    def test_register_basketball_markets(self):\n        SportMarketRegistrar.register_basketball_markets()\n        basketball_markets = SportMarketRegistry.get_market_mapping(Sport.BASKETBALL.value)\n        assert \"1x2\" in basketball_markets\n        assert \"home_away\" in basketball_markets\n        assert any(key.startswith(\"over_under_games_\") for key in basketball_markets)\n        assert any(key.startswith(\"asian_handicap_games_\") for key in basketball_markets)\n\n    def test_register_rugby_league_markets(self):\n        SportMarketRegistrar.register_rugby_league_markets()\n        rugby_league_markets = SportMarketRegistry.get_market_mapping(Sport.RUGBY_LEAGUE.value)\n        assert \"1x2\" in rugby_league_markets\n        assert \"home_away\" in rugby_league_markets\n        assert \"dnb\" in rugby_league_markets\n        assert \"double_chance\" in rugby_league_markets\n        assert \"over_under_43_5\" in rugby_league_markets\n        assert \"handicap_-13_5\" in rugby_league_markets\n\n    def test_register_rugby_union_markets(self):\n        SportMarketRegistrar.register_rugby_union_markets()\n        rugby_union_markets = SportMarketRegistry.get_market_mapping(Sport.RUGBY_UNION.value)\n        assert \"1x2\" in rugby_union_markets\n        assert \"home_away\" in rugby_union_markets\n        assert \"dnb\" in rugby_union_markets\n        assert \"double_chance\" in rugby_union_markets\n        assert \"over_under_43_5\" in rugby_union_markets\n        assert \"handicap_-13_5\" in rugby_union_markets\n\n    def test_register_ice_hockey_markets(self):\n        SportMarketRegistrar.register_ice_hockey_markets()\n        ice_hockey_markets = SportMarketRegistry.get_market_mapping(Sport.ICE_HOCKEY.value)\n        assert \"1x2\" in ice_hockey_markets\n        assert \"home_away\" in ice_hockey_markets\n        assert \"dnb\" in ice_hockey_markets\n        assert \"btts\" in ice_hockey_markets\n        assert \"double_chance\" in ice_hockey_markets\n        assert \"over_under_5_5\" in ice_hockey_markets\n\n    def test_register_baseball_markets(self):\n        SportMarketRegistrar.register_baseball_markets()\n        baseball_markets = SportMarketRegistry.get_market_mapping(Sport.BASEBALL.value)\n        assert \"1x2\" in baseball_markets\n        assert \"home_away\" in baseball_markets\n        assert \"over_under_7_5\" in baseball_markets\n\n    def test_register_all_markets(self):\n        with patch.object(SportMarketRegistrar, \"register_football_markets\") as mock_football:\n            with patch.object(SportMarketRegistrar, \"register_tennis_markets\") as mock_tennis:\n                with patch.object(SportMarketRegistrar, \"register_basketball_markets\") as mock_basketball:\n                    with patch.object(SportMarketRegistrar, \"register_rugby_league_markets\") as mock_rugby_league:\n                        with patch.object(SportMarketRegistrar, \"register_rugby_union_markets\") as mock_rugby_union:\n                            with patch.object(SportMarketRegistrar, \"register_ice_hockey_markets\") as mock_ice_hockey:\n                                with patch.object(SportMarketRegistrar, \"register_baseball_markets\") as mock_baseball:\n                                    SportMarketRegistrar.register_all_markets()\n        mock_football.assert_called_once()\n        mock_tennis.assert_called_once()\n        mock_basketball.assert_called_once()\n        mock_rugby_league.assert_called_once()\n        mock_rugby_union.assert_called_once()\n        mock_ice_hockey.assert_called_once()\n        mock_baseball.assert_called_once()\n\n    def test_register_all_markets_integration(self):\n        SportMarketRegistrar.register_all_markets()\n        for sport in Sport:\n            markets = SportMarketRegistry.get_market_mapping(sport.value)\n            assert markets, f\"No markets registered for {sport.name}\"\n        assert \"1x2\" in SportMarketRegistry.get_market_mapping(Sport.FOOTBALL.value)\n        assert \"match_winner\" in SportMarketRegistry.get_market_mapping(Sport.TENNIS.value)\n        assert \"home_away\" in SportMarketRegistry.get_market_mapping(Sport.BASKETBALL.value)\n        assert \"1x2\" in SportMarketRegistry.get_market_mapping(Sport.RUGBY_LEAGUE.value)\n        assert \"double_chance\" in SportMarketRegistry.get_market_mapping(Sport.RUGBY_UNION.value)\n        assert \"btts\" in SportMarketRegistry.get_market_mapping(Sport.ICE_HOCKEY.value)\n        assert \"home_away\" in SportMarketRegistry.get_market_mapping(Sport.BASEBALL.value)"
