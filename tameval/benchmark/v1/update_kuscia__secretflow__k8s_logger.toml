[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.22"

[repo_info]
repository = "secretflow/kuscia"
sha = "5386c4265acf18857c87aa008d13bb6fda2d828e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/agent/provider/pod/k8s_logger.go pkg/agent/provider/pod/k8s_logger_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/agent/provider/pod/k8s_logger.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 53.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/agent/provider/pod/k8s_logger_test.go"
focal_file_path = "pkg/agent/provider/pod/k8s_logger.go"
test_file_url = "https://github.com/secretflow/kuscia/blob/5386c4265acf18857c87aa008d13bb6fda2d828e/pkg/agent/provider/pod/k8s_logger_test.go"
focal_file_url = "https://github.com/secretflow/kuscia/blob/5386c4265acf18857c87aa008d13bb6fda2d828e/pkg/agent/provider/pod/k8s_logger.go"
first_commit_date = "2024-10-29"
last_commit_date = "2025-02-19"
test_file_content = "// Copyright 2024 Ant Group Co., Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage pod\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/agiledragon/gomonkey\"\n\t\"github.com/secretflow/kuscia/pkg/utils/paths\"\n\t\"gotest.tools/v3/assert\"\n\tv1 \"k8s.io/api/core/v1\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/types\"\n\t\"k8s.io/client-go/kubernetes/fake\"\n)\n\nfunc TestK8sLogWorker(t *testing.T) {\n\ttestcases := []struct {\n\t\tname   string\n\t\tstream bool\n\t}{\n\t\t{\n\t\t\tname:   \"mainWorker\",\n\t\t\tstream: true,\n\t\t},\n\t\t{\n\t\t\tname:   \"backupWorker\",\n\t\t\tstream: false,\n\t\t},\n\t}\n\trootDir := t.TempDir()\n\tbkNamespace := \"autonomy-alice\"\n\tnamespace := \"alice\"\n\tname := \"job-psi-0\"\n\tlog := \"hello world\"\n\tlogPathPostfix := \"alice_job-psi-0_abcde/secretflow/1.log\"\n\trestart := 1\n\tUID := \"abcde\"\n\tcontainer := \"secretflow\"\n\tnodeName := \"xxx\"\n\tpod, bkPod := buildPodCase(name, namespace, bkNamespace, nodeName, UID, container, restart, v1.PodSucceeded)\n\n\tfor _, tt := range testcases {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tclient := fake.NewSimpleClientset()\n\t\t\t_, err := client.CoreV1().Pods(bkNamespace).Create(context.TODO(), bkPod, metav1.CreateOptions{})\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"can't create pods\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tworker := NewK8sLogWorker(rootDir, pod, client, bkNamespace, tt.stream)\n\t\t\tpatches := gomonkey.ApplyMethod(reflect.TypeOf(worker), \"RequestLog\", func(_ *K8sLogWorker, ctx context.Context, container string, follow bool) (io.ReadCloser, error) {\n\t\t\t\treturn newMyReadCloser(log), nil\n\t\t\t})\n\t\t\tdefer patches.Reset()\n\n\t\t\tif tt.stream {\n\t\t\t\tworker.Start(context.Background())\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\tworker.Stop()\n\t\t\t} else {\n\t\t\t\tworker.BackupLog(context.Background())\n\t\t\t}\n\n\t\t\tlogPath := filepath.Join(rootDir, logPathPostfix)\n\t\t\tif !paths.CheckFileExist(logPath) {\n\t\t\t\tt.Errorf(\"log file %s not exist\", logPath)\n\t\t\t}\n\t\t\tdata, err := os.ReadFile(logPath)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"log file %s unreadable, %v\", logPath, err)\n\t\t\t}\n\t\t\tassert.Equal(t, string(data), log)\n\t\t\tos.Remove(logPath)\n\n\t\t})\n\t}\n\n}\n\nfunc TestK8sLogManager(t *testing.T) {\n\tctx := context.Background()\n\trootDir := t.TempDir()\n\tbkNamespace := \"autonomy-alice\"\n\tnamespace := \"alice\"\n\tname := \"job-psi-0\"\n\tlog := \"hello world\"\n\tlogPathPostfix := \"alice_job-psi-0_abcde/secretflow/1.log\"\n\trestart := 1\n\tUID := \"abcde\"\n\tcontainer := \"secretflow\"\n\tnodeName := \"xxx\"\n\n\ttestcases := []struct {\n\t\tname      string\n\t\tpodStatus v1.PodPhase\n\t}{\n\t\t{\n\t\t\tname:      \"mainWorker\",\n\t\t\tpodStatus: v1.PodRunning,\n\t\t},\n\t\t{\n\t\t\tname:      \"backupWorker\",\n\t\t\tpodStatus: v1.PodFailed,\n\t\t},\n\t}\n\n\tfor _, tt := range testcases {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tpod, bkPod := buildPodCase(name, namespace, bkNamespace, nodeName, UID, container, restart, tt.podStatus)\n\n\t\t\tbkClient := fake.NewSimpleClientset()\n\t\t\t_, err := bkClient.CoreV1().Pods(bkNamespace).Create(context.TODO(), bkPod, metav1.CreateOptions{})\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"can't create pods\")\n\t\t\t}\n\n\t\t\tkubeClient := fake.NewSimpleClientset()\n\t\t\tk8sLogManager, err := NewK8sLogManager(nodeName, rootDir, bkClient, bkNamespace, namespace, kubeClient)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"error in creating k8sLogManager, %v\", err)\n\t\t\t}\n\t\t\tgo func() {\n\t\t\t\tif err := k8sLogManager.Start(ctx); err != nil {\n\t\t\t\t\tt.Errorf(\"Failed to start pod log manager: %v\", err)\n\t\t\t\t}\n\t\t\t}()\n\t\t\t_, err = kubeClient.CoreV1().Pods(namespace).Create(context.TODO(), pod, metav1.CreateOptions{})\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"can't create mirror pod\")\n\t\t\t}\n\t\t\tvar k8sLogWorker *K8sLogWorker\n\t\t\tpatches := gomonkey.ApplyMethod(reflect.TypeOf(k8sLogWorker), \"RequestLog\", func(_ *K8sLogWorker, ctx context.Context, container string, follow bool) (io.ReadCloser, error) {\n\t\t\t\treturn newMyReadCloser(log), nil\n\t\t\t})\n\t\t\tdefer patches.Reset()\n\t\t\ttime.Sleep(time.Second)\n\t\t\tlogPath := filepath.Join(rootDir, logPathPostfix)\n\t\t\tif !paths.CheckFileExist(logPath) {\n\t\t\t\tt.Errorf(\"log file %s not exist\", logPath)\n\t\t\t}\n\t\t\tdata, err := os.ReadFile(logPath)\n\t\t\tif err != nil {\n\t\t\t\tt.Errorf(\"log file %s unreadable, %v\", logPath, err)\n\t\t\t}\n\t\t\tassert.Equal(t, string(data), log)\n\t\t\tos.Remove(logPath)\n\n\t\t})\n\t}\n\n}\n\ntype MyReadCloser struct {\n\treader io.Reader\n}\n\nfunc newMyReadCloser(data string) *MyReadCloser {\n\treturn &MyReadCloser{reader: strings.NewReader(data)}\n}\n\nfunc (m *MyReadCloser) Read(p []byte) (n int, err error) {\n\treturn m.reader.Read(p)\n}\n\nfunc (m *MyReadCloser) Close() error {\n\treturn nil\n}\n\nfunc buildPodCase(name, namespace, bkNamespace, nodeName, uid, container string, restart int, podPhase v1.PodPhase) (*v1.Pod, *v1.Pod) {\n\tpod := &v1.Pod{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      name,\n\t\t\tNamespace: namespace,\n\t\t\tUID:       types.UID(uid),\n\t\t},\n\t\tSpec: v1.PodSpec{\n\t\t\tContainers: []v1.Container{\n\t\t\t\t{\n\t\t\t\t\tName: container,\n\t\t\t\t},\n\t\t\t},\n\t\t\tNodeName: nodeName,\n\t\t},\n\t\tStatus: v1.PodStatus{\n\t\t\tPhase: podPhase,\n\t\t\tContainerStatuses: []v1.ContainerStatus{\n\t\t\t\t{\n\t\t\t\t\tName:         container,\n\t\t\t\t\tRestartCount: int32(restart),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tbkPod := &v1.Pod{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      name,\n\t\t\tNamespace: bkNamespace,\n\t\t\tUID:       types.UID(uid),\n\t\t},\n\t\tSpec: v1.PodSpec{\n\t\t\tContainers: []v1.Container{\n\t\t\t\t{\n\t\t\t\t\tName: container,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tStatus: v1.PodStatus{\n\t\t\tContainerStatuses: []v1.ContainerStatus{\n\t\t\t\t{\n\t\t\t\t\tName:         container,\n\t\t\t\t\tRestartCount: int32(restart),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\treturn pod, bkPod\n}"
