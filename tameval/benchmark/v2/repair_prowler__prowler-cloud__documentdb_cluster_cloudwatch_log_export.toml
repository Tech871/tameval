[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "prowler-cloud/prowler"
sha = "39e4d20b24b2b7150da7b29e75cce77c14fe046f"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=prowler/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export.py -m pytest -q --junit-xml=test_output.xml tests/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target prowler.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export --unit-test tests.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target prowler/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export.py --unit-test tests/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 18.0
covered_lines = [ 0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 24, 25, 26, 28, 30,]
missed_lines = []

[input_info]
test_file_path = "tests/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export_test.py"
focal_file_path = "prowler/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export.py"
test_file_url = "https://github.com/prowler-cloud/prowler/blob/39e4d20b24b2b7150da7b29e75cce77c14fe046f/tests/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export_test.py"
focal_file_url = "https://github.com/prowler-cloud/prowler/blob/39e4d20b24b2b7150da7b29e75cce77c14fe046f/prowler/providers/aws/services/documentdb/documentdb_cluster_cloudwatch_log_export/documentdb_cluster_cloudwatch_log_export.py"
first_commit_date = "2024-06-24"
last_commit_date = "2025-01-23"
test_file_content = "from unittest import mock\n\nfrom prowler.providers.aws.services.documentdb.documentdb_service import DBCluster\n\nAWS_ACCOUNT_NUMBER = \"123456789012\"\nAWS_REGION = \"us-east-1\"\n\nDOC_DB_CLUSTER_NAME = \"test-cluster\"\nDOC_DB_CLUSTER_ARN = (\n    f\"arn:aws:rds:{AWS_REGION}:{AWS_ACCOUNT_NUMBER}:cluster:{DOC_DB_CLUSTER_NAME}\"\n)\nDOC_DB_ENGINE_VERSION = \"5.0.0\"\n\n\nclass Test_documentdb_cluster_cloudwatch_log_export:\n    def test_documentdb_no_clusters(self):\n        documentdb_client = mock.MagicMock\n        documentdb_client.db_clusters = {}\n\n        with (\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_service.DocumentDB\",\n                new=documentdb_client,\n            ),\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_client.documentdb_client\",\n                new=documentdb_client,\n            ),\n        ):\n            from prowler.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export import (\n                documentdb_cluster_cloudwatch_log_export,\n            )\n\n            check = documentdb_cluster_cloudwatch_log_export()\n            result = check.execute()\n\n    def test_documentdb_cluster_cloudwatch_log_export_disabled(self):\n        documentdb_client = mock.MagicMock\n        documentdb_client.db_clusters = {\n            DOC_DB_CLUSTER_ARN: DBCluster(\n                id=DOC_DB_CLUSTER_NAME,\n                arn=DOC_DB_CLUSTER_ARN,\n                engine=\"docdb\",\n                status=\"available\",\n                backup_retention_period=0,\n                encrypted=False,\n                cloudwatch_logs=[],\n                multi_az=True,\n                parameter_group=\"default.docdb3.6\",\n                deletion_protection=False,\n                region=AWS_REGION,\n                tags=[],\n            )\n        }\n\n        with (\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_service.DocumentDB\",\n                new=documentdb_client,\n            ),\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_client.documentdb_client\",\n                new=documentdb_client,\n            ),\n        ):\n            from prowler.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export import (\n                documentdb_cluster_cloudwatch_log_export,\n            )\n\n            check = documentdb_cluster_cloudwatch_log_export()\n            result = check.execute()\n\n\n    def test_documentdb_cluster_cloudwatch_log_export_audit_only_enabled(self):\n        documentdb_client = mock.MagicMock\n        documentdb_client.db_clusters = {\n            DOC_DB_CLUSTER_ARN: DBCluster(\n                id=DOC_DB_CLUSTER_NAME,\n                arn=DOC_DB_CLUSTER_ARN,\n                engine=\"docdb\",\n                status=\"available\",\n                backup_retention_period=9,\n                encrypted=True,\n                cloudwatch_logs=[\"audit\"],\n                multi_az=True,\n                parameter_group=\"default.docdb3.6\",\n                deletion_protection=True,\n                region=AWS_REGION,\n                tags=[],\n            )\n        }\n        with (\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_service.DocumentDB\",\n                new=documentdb_client,\n            ),\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_client.documentdb_client\",\n                new=documentdb_client,\n            ),\n        ):\n            from prowler.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export import (\n                documentdb_cluster_cloudwatch_log_export,\n            )\n\n            check = documentdb_cluster_cloudwatch_log_export()\n            result = check.execute()\n\n    def test_documentdb_cluster_cloudwatch_log_export_profiler_only_enabled(self):\n        documentdb_client = mock.MagicMock\n        documentdb_client.db_clusters = {\n            DOC_DB_CLUSTER_ARN: DBCluster(\n                id=DOC_DB_CLUSTER_NAME,\n                arn=DOC_DB_CLUSTER_ARN,\n                engine=\"docdb\",\n                status=\"available\",\n                backup_retention_period=9,\n                encrypted=True,\n                cloudwatch_logs=[\"profiler\"],\n                multi_az=True,\n                parameter_group=\"default.docdb3.6\",\n                deletion_protection=True,\n                region=AWS_REGION,\n                tags=[],\n            )\n        }\n        with (\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_service.DocumentDB\",\n                new=documentdb_client,\n            ),\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_client.documentdb_client\",\n                new=documentdb_client,\n            ),\n        ):\n            from prowler.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export import (\n                documentdb_cluster_cloudwatch_log_export,\n            )\n\n            check = documentdb_cluster_cloudwatch_log_export()\n            result = check.execute()\n\n    def test_documentdb_cluster_cloudwatch_log_export_enabled(self):\n        documentdb_client = mock.MagicMock\n        documentdb_client.db_clusters = {\n            DOC_DB_CLUSTER_ARN: DBCluster(\n                id=DOC_DB_CLUSTER_NAME,\n                arn=DOC_DB_CLUSTER_ARN,\n                engine=\"docdb\",\n                status=\"available\",\n                backup_retention_period=9,\n                encrypted=True,\n                cloudwatch_logs=[\"audit\", \"profiler\"],\n                multi_az=True,\n                parameter_group=\"default.docdb3.6\",\n                deletion_protection=True,\n                region=AWS_REGION,\n                tags=[],\n            )\n        }\n        with (\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_service.DocumentDB\",\n                new=documentdb_client,\n            ),\n            mock.patch(\n                \"prowler.providers.aws.services.documentdb.documentdb_client.documentdb_client\",\n                new=documentdb_client,\n            ),\n        ):\n            from prowler.providers.aws.services.documentdb.documentdb_cluster_cloudwatch_log_export.documentdb_cluster_cloudwatch_log_export import (\n                documentdb_cluster_cloudwatch_log_export,\n            )\n\n            check = documentdb_cluster_cloudwatch_log_export()\n            result = check.execute()"
