[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "XanaduAI/MrMustard"
sha = "a4e85ddf1df86333ecb8014f36d30e4437cbe4d4"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mrmustard/math/parameters.py -m pytest -q --junit-xml=test_output.xml tests/test_math/test_parameters.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mrmustard.math.parameters --unit-test tests.test_math.test_parameters --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mrmustard/math/parameters.py --unit-test tests/test_math/test_parameters.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 43.0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = 39.0
covered_lines = [ 16, 18, 20, 22, 24, 27, 35, 54, 67, 120, 134, 138, 139, 145, 146, 163, 166, 170, 186, 201, 202, 208, 209, 215, 216, 224, 225, 228, 229, 235, 236, 246, 247, 270, 271, 294, 295, 323, 331,]
missed_lines = [ 45, 46, 48, 49, 50, 51, 64, 77, 80, 81, 84, 88, 89, 91, 94, 95, 97, 98, 99, 102, 103, 104, 106, 107, 108, 110, 112, 135, 136, 143, 150, 164, 167, 196, 197, 198, 199, 206, 213, 222, 226, 233, 237, 267, 268, 291, 292, 315, 316, 324, 332,]

[input_info]
test_file_path = "tests/test_math/test_parameters.py"
focal_file_path = "mrmustard/math/parameters.py"
test_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/tests/test_math/test_parameters.py"
focal_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/mrmustard/math/parameters.py"
first_commit_date = "2023-10-27"
last_commit_date = "2025-07-25"
test_file_content = "# Copyright 2023 Xanadu Quantum Technologies Inc.\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nUnit tests for :class:`Constant` and :class:`Variable`.\n\"\"\"\n\nimport numpy as np\nimport pytest\n\nfrom mrmustard import math\nfrom mrmustard.math.parameters import (\n    Constant,\n    Variable,\n    format_bounds,\n    format_dtype,\n    format_value,\n    update_euclidean,\n    update_orthogonal,\n    update_symplectic,\n    update_unitary,\n)\n\n\nclass TestConstant:\n    r\"\"\"\n    Tests for Constant.\n    \"\"\"\n\n    def test_init(self):\n        r\"\"\"\n        Tests the init.\n        \"\"\"\n        const1 = Constant(1, \"const1\")\n        assert const1.value == 1\n        assert const1.name == \"const1\"\n\n        math_const = math.new_constant(2, \"const2\")\n        const2 = Constant(math_const, \"const2\")\n        assert const2.value == math_const\n        assert const2.name == \"const2\"\n\n        const3 = Constant(np.array([1, 2, 3]), \"const3\")\n        assert np.allclose(const3.value, np.array([1, 2, 3]))\n\n        const4 = Constant(1, \"const4\", dtype=\"int64\")\n        assert const4.value == 1\n        assert const4.name == \"const4\"\n        assert const4.value.dtype == \"int64\"\n\n    def test_format_bounds(self):\n        r\"\"\"\n        Tests the ``_format_bounds`` method with constant parameters.\n        \"\"\"\n        # Constants should return \"—\"\n        const = Constant(1.0, \"const\")\n        bounds_str = format_bounds(const)\n        assert bounds_str == \"—\"\n\n    @pytest.mark.parametrize(\"dtype\", [np.int64, np.float64, np.complex128])\n    def test_format_dtype(self, dtype):\n        r\"\"\"\n        Tests the ``_format_dtype`` method.\n        \"\"\"\n        const_dtype = Constant(dtype(1.0), f\"const_{dtype}\")\n        dtype_str = format_dtype(const_dtype)\n        assert dtype_str == dtype.__name__\n\n    def test_format_value_arrays(self):\n        r\"\"\"\n        Tests the ``_format_value`` method with array parameters.\n        \"\"\"\n        # Test small array integer-like (≤3 elements)\n        const_small_int = Constant([1.0, 2.0, 3.0], \"const_small_int\")\n        value_str, shape_str = format_value(const_small_int)\n        assert value_str == \"[1, 2, 3]\"\n        assert shape_str == \"(3,)\"\n\n        # Test small array floats (≤3 elements)\n        const_small_float = Constant([1.2, 3.4, 5.6], \"const_small_float\")\n        value_str, shape_str = format_value(const_small_float)\n        assert value_str == \"[1.2, 3.4, 5.6]\"\n        assert shape_str == \"(3,)\"\n\n        # Test large array integer-like (>3 elements)\n        const_large_int = Constant([1, 2, 3, 4, 5, 6], \"const_large_int\")\n        value_str, shape_str = format_value(const_large_int)\n        assert \"1, 2, 3, ...\" in value_str\n        assert shape_str == \"(6,)\"\n\n        # Test large array floats (>3 elements)\n        const_large_float = Constant([1.2, 3.4, 5.6, 7.8, 9.0, 10.1], \"const_large_float\")\n        value_str, shape_str = format_value(const_large_float)\n        assert \"1.2, 3.4, 5.6, ...\" in value_str\n        assert shape_str == \"(6,)\"\n\n        # Test 2D array (gets flattened for display since it has >3 elements)\n        const_2d = Constant([[1, 2], [3, 4]], \"const_2d\")\n        value_str, shape_str = format_value(const_2d)\n        assert \"1, 2, 3, ...\" in value_str  # Flattened array with >3 elements\n        assert shape_str == \"(2, 2)\"\n\n        # Test small 2D array (≤3 elements when flattened)\n        const_2d_small = Constant([[1, 2]], \"const_2d_small\")\n        value_str, shape_str = format_value(const_2d_small)\n        assert value_str == \"[[1, 2]]\"\n        assert shape_str == \"(1, 2)\"\n\n        # Test empty array\n        const_empty = Constant([], \"const_empty\")\n        value_str, shape_str = format_value(const_empty)\n        assert value_str == \"[]\"\n        assert shape_str == \"(0,)\"\n\n    def test_format_value_scalar(self):\n        r\"\"\"\n        Tests the ``_format_value`` method with scalar parameters.\n        \"\"\"\n        # Test scalar real integer constant\n        const_real_int = Constant(3, \"const_real_int\", dtype=np.int64)\n        value_str, shape_str = format_value(const_real_int)\n        assert value_str == \"3\"\n        assert shape_str == \"scalar\"\n\n        # Test scalar real float constant\n        const_real_float = Constant(3.14159, \"const_real_float\", dtype=np.float64)\n        value_str, shape_str = format_value(const_real_float)\n        assert value_str == \"3.14159\"\n        assert shape_str == \"scalar\"\n\n        # Test scalar complex constant positive imaginary part\n        const_complex_pos_imag = Constant(1 + 2j, \"const_complex_pos_imag\", dtype=np.complex128)\n        value_str, shape_str = format_value(const_complex_pos_imag)\n        assert value_str == \"1+2j\"\n        assert shape_str == \"scalar\"\n\n        # Test scalar complex constant negative imaginary part\n        const_complex_neg_imag = Constant(1 - 2j, \"const_complex_neg_imag\", dtype=np.complex128)\n        value_str, shape_str = format_value(const_complex_neg_imag)\n        assert value_str == \"1-2j\"\n        assert shape_str == \"scalar\"\n\n    def test_is_const(self):\n        r\"\"\"\n        Tests that constants are immutable.\n        \"\"\"\n        const = Constant(1, \"const\")\n\n        with pytest.raises(AttributeError):\n            const.value = 2\n\n        with pytest.raises(AttributeError):\n            const.name = \"const2\"\n\n\nclass TestVariable:\n    r\"\"\"\n    Tests for Variable.\n    \"\"\"\n\n    def test_init(self):\n        r\"\"\"\n        Tests the init.\n        \"\"\"\n        var1 = Variable(1, \"var1\")\n        assert var1.value == 1\n        assert var1.name == \"var1\"\n        assert var1.bounds == (None, None)\n        assert var1.update_fn == update_euclidean\n\n        math_var = math.new_variable(2, (0, 1), \"var2\")\n        var2 = Variable(math_var, \"var2\")\n        assert var2.value == math_var\n        assert var2.name == \"var2\"\n        assert var2.update_fn == update_euclidean\n\n        var3 = Variable(np.array([1, 2, 3]), \"var3\", (0, 1), update_orthogonal)\n        assert np.allclose(var3.value, np.array([1, 2, 3]))\n        assert var3.bounds == (0, 1)\n        assert var3.update_fn == update_orthogonal\n\n        var4 = Variable(1, \"var4\", dtype=\"int64\")\n        assert var4.value == 1\n        assert var4.name == \"var4\"\n        assert var4.value.dtype == \"int64\"\n\n    def test_format_bounds_edge_cases(self):\n        r\"\"\"\n        Tests the ``_format_bounds`` method with edge cases.\n        \"\"\"\n        # Test zero bounds\n        var_zero = Variable(1.0, \"var_zero\", bounds=(0.0, 0.0))\n        bounds_str = format_bounds(var_zero)\n        assert bounds_str == \"(0, 0)\"\n\n        # Test negative bounds\n        var_negative = Variable(-1.0, \"var_negative\", bounds=(-10.0, -1.0))\n        bounds_str = format_bounds(var_negative)\n        assert bounds_str == \"(-10, -1)\"\n\n    @pytest.mark.parametrize(\"bounds\", [(None, None), (-2.5, 3.7), (0.0, None), (None, 10.0)])\n    def test_format_bounds(self, bounds):\n        r\"\"\"\n        Tests the ``_format_bounds`` method with variable parameters.\n        \"\"\"\n        var_bounds = Variable(1.0, \"var_bounds\", bounds=bounds)\n        bounds_str = format_bounds(var_bounds)\n\n        low = \"-∞\" if bounds[0] is None else f\"{bounds[0]:.3g}\"\n        high = \"+∞\" if bounds[1] is None else f\"{bounds[1]:.3g}\"\n        assert bounds_str == f\"({low}, {high})\"\n\n    @pytest.mark.parametrize(\"dtype\", [np.int64, np.float64, np.complex128])\n    def test_format_dtype(self, dtype):\n        r\"\"\"\n        Tests the ``_format_dtype`` method.\n        \"\"\"\n        var_dtype = Variable(dtype(1.0), f\"const_{dtype}\")\n        dtype_str = format_dtype(var_dtype)\n        assert dtype_str == dtype.__name__\n\n    def test_format_value_arrays(self):\n        r\"\"\"\n        Tests the ``_format_value`` method with array parameters.\n        \"\"\"\n        # Test small array integer-like (≤3 elements)\n        const_small_int = Variable([1.0, 2.0, 3.0], \"const_small_int\")\n        value_str, shape_str = format_value(const_small_int)\n        assert value_str == \"[1, 2, 3]\"\n        assert shape_str == \"(3,)\"\n\n        # Test small array floats (≤3 elements)\n        const_small_float = Variable([1.2, 3.4, 5.6], \"const_small_float\")\n        value_str, shape_str = format_value(const_small_float)\n        assert value_str == \"[1.2, 3.4, 5.6]\"\n        assert shape_str == \"(3,)\"\n\n        # Test large array integer-like (>3 elements)\n        const_large_int = Variable([1, 2, 3, 4, 5, 6], \"const_large_int\")\n        value_str, shape_str = format_value(const_large_int)\n        assert \"1, 2, 3, ...\" in value_str\n        assert shape_str == \"(6,)\"\n\n        # Test large array floats (>3 elements)\n        const_large_float = Variable([1.2, 3.4, 5.6, 7.8, 9.0, 10.1], \"const_large_float\")\n        value_str, shape_str = format_value(const_large_float)\n        assert \"1.2, 3.4, 5.6, ...\" in value_str\n        assert shape_str == \"(6,)\"\n\n        # Test 2D array (gets flattened for display since it has >3 elements)\n        const_2d = Variable([[1, 2], [3, 4]], \"const_2d\")\n        value_str, shape_str = format_value(const_2d)\n        assert \"1, 2, 3, ...\" in value_str  # Flattened array with >3 elements\n        assert shape_str == \"(2, 2)\"\n\n        # Test small 2D array (≤3 elements when flattened)\n        const_2d_small = Variable([[1, 2]], \"const_2d_small\")\n        value_str, shape_str = format_value(const_2d_small)\n        assert value_str == \"[[1, 2]]\"\n        assert shape_str == \"(1, 2)\"\n\n        # Test empty array\n        const_empty = Variable([], \"const_empty\")\n        value_str, shape_str = format_value(const_empty)\n        assert value_str == \"[]\"\n        assert shape_str == \"(0,)\"\n\n    def test_format_value_scalar(self):\n        r\"\"\"\n        Tests the ``_format_value`` method with scalar parameters.\n        \"\"\"\n        # Test scalar real integer constant\n        const_real_int = Variable(3, \"const_real_int\")\n        value_str, shape_str = format_value(const_real_int)\n        assert value_str == \"3\"\n        assert shape_str == \"scalar\"\n\n        # Test scalar real float constant\n        const_real_float = Variable(3.14159, \"const_real_float\")\n        value_str, shape_str = format_value(const_real_float)\n        assert value_str == \"3.14159\"\n        assert shape_str == \"scalar\"\n\n        # Test scalar complex constant positive imaginary part\n        const_complex_pos_imag = Variable(1 + 2j, \"const_complex_pos_imag\", dtype=np.complex128)\n        value_str, shape_str = format_value(const_complex_pos_imag)\n        assert value_str == \"1+2j\"\n        assert shape_str == \"scalar\"\n\n        # Test scalar complex constant negative imaginary part\n        const_complex_neg_imag = Variable(1 - 2j, \"const_complex_neg_imag\", dtype=np.complex128)\n        value_str, shape_str = format_value(const_complex_neg_imag)\n        assert value_str == \"1-2j\"\n        assert shape_str == \"scalar\"\n\n    def test_is_variable(self):\n        r\"\"\"\n        Tests that variables are mutable.\n        \"\"\"\n        var = Variable(1, \"var\")\n\n        var.value = 2\n        assert var.value == 2\n\n        var.update_fn = update_orthogonal\n        assert var.update_fn == update_orthogonal\n\n        with pytest.raises(AttributeError):\n            var.name = \"var2\"\n\n        with pytest.raises(AttributeError):\n            var.bounds = (0, 1)\n\n    def test_static_methods(self):\n        r\"\"\"\n        Tests the static methods.\n        \"\"\"\n        va1 = Variable.symplectic(1, \"var1\")\n        assert va1.update_fn == update_symplectic\n\n        va2 = Variable.orthogonal(1, \"va2\")\n        assert va2.update_fn == update_orthogonal\n\n        var3 = Variable.unitary(1, \"var3\")\n        assert var3.update_fn == update_unitary"
