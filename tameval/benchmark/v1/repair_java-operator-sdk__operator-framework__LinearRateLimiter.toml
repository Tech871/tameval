[meta]
task = "repair"
scenario = "repair_invalid_constructor"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "operator-framework/java-operator-sdk"
sha = "b793702bcc41140a2ee9c40f3a542833a41bff03"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl operator-framework-core -Dtest=LinearRateLimiterTest"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl operator-framework-core -DtargetClasses=**.LinearRateLimiter  -DtargetTests=**.LinearRateLimiterTest  -DoutputFormats=XML"
coverage_report_path = "operator-framework-core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "operator-framework-core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 68.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "operator-framework-core/src/test/java/io/javaoperatorsdk/operator/processing/event/rate/LinearRateLimiterTest.java"
focal_file_path = "operator-framework-core/src/main/java/io/javaoperatorsdk/operator/processing/event/rate/LinearRateLimiter.java"
test_file_url = "https://github.com/operator-framework/java-operator-sdk/blob/b793702bcc41140a2ee9c40f3a542833a41bff03/operator-framework-core/src/test/java/io/javaoperatorsdk/operator/processing/event/rate/LinearRateLimiterTest.java"
focal_file_url = "https://github.com/operator-framework/java-operator-sdk/blob/b793702bcc41140a2ee9c40f3a542833a41bff03/operator-framework-core/src/main/java/io/javaoperatorsdk/operator/processing/event/rate/LinearRateLimiter.java"
first_commit_date = "2022-07-14"
last_commit_date = "2025-03-03"
test_file_content = "package io.javaoperatorsdk.operator.processing.event.rate;\n\nimport java.time.Duration;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass LinearRateLimiterTest {\n\n  public static final Duration REFRESH_PERIOD = Duration.ofMillis(300);\n  private RateState state;\n\n  @BeforeEach\n  void initState() {\n    state = RateState.initialState();\n  }\n\n  @Test\n  void acquirePermissionForNewResource() {\n    var rl = new LinearRateLimiter(\"300ms\", 2); // Error 1: Using string instead of Duration\n    var res = rl.isLimited(state);\n    assertThat(res).isEmpty();\n    res = rl.isLimited(state);\n    assertThat(res).isEmpty();\n\n    res = rl.isLimited(state);\n    assertThat(res).isNotEmpty();\n  }\n\n  @Test\n  void returnsMinimalDurationToAcquirePermission() {\n    var rl = new LinearRateLimiter(REFRESH_PERIOD, \"1\"); // Error 2: Using string instead of int\n    var res = rl.isLimited(state);\n    assertThat(res).isEmpty();\n\n    res = rl.isLimited(state);\n\n    assertThat(res).isPresent();\n    assertThat(res.get()).isLessThan(REFRESH_PERIOD);\n  }\n\n  @Test\n  void resetsPeriodAfterLimit() throws InterruptedException {\n    var rl = new LinearRateLimiter(REFRESH_PERIOD, 1, false); // Error 3: Extra argument\n    var res = rl.isLimited(state);\n    assertThat(res).isEmpty();\n    res = rl.isLimited(state);\n    assertThat(res).isPresent();\n\n    // sleep plus some slack\n    Thread.sleep(REFRESH_PERIOD.toMillis() + REFRESH_PERIOD.toMillis() / 3);\n\n    res = rl.isLimited(state);\n    assertThat(res).isEmpty();\n  }\n\n  @Test\n  void rateLimitCanBeTurnedOff() {\n    var rl = new LinearRateLimiter(); // This constructor is valid\n    rl = new LinearRateLimiter(300); // Error 4: Missing parameter or wrong constructor\n\n    var res = rl.isLimited(state);\n\n    assertThat(res).isEmpty();\n  }\n}"
