[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "go-dev-frame/sponge"
sha = "e72bb7443479d95928a16711696af6523999a717"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/utils/type_convert.go pkg/utils/type_convert_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/utils/type_convert.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 78.0
original_coverage = 92.0
mutation_kill_rate = 15.0
original_mutation_kill_rate = 15.0
covered_lines = [ 10, 11, 12, 13, 16, 17, 18, 21, 22, 23, 24, 27, 28, 33, 37, 38, 39, 40, 43, 44, 45, 59, 60, 61, 62, 65, 66, 70, 74, 75, 76, 77, 80, 81, 82, 85, 86, 87, 95, 96, 97, 100, 101, 102, 105, 106, 107, 110, 111, 112, 115, 116, 117, 120, 121, 122,]
missed_lines = [ 29, 30, 31, 48, 49, 50, 53, 54, 55, 56, 67, 68, 69, 90, 91, 92,]

[input_info]
test_file_path = "pkg/utils/type_convert_test.go"
focal_file_path = "pkg/utils/type_convert.go"
test_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/utils/type_convert_test.go"
focal_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/utils/type_convert.go"
first_commit_date = "2022-09-19"
last_commit_date = "2025-02-16"
test_file_content = "package utils\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestIntToStr(t *testing.T) {\n\tval := IntToStr(1)\n\tassert.Equal(t, \"1\", val)\n}\n\nfunc TestStrToFloat32(t *testing.T) {\n\tval := StrToFloat32(\"1\")\n\tassert.Equal(t, float32(1), val)\n}\n\nfunc TestStrToFloat32E(t *testing.T) {\n\tval, err := StrToFloat32E(\"1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, float32(1), val)\n}\n\nfunc TestStrToFloat64(t *testing.T) {\n\tval := StrToFloat64(\"1\")\n\tassert.Equal(t, 1.0, val)\n}\n\nfunc TestStrToFloat64E(t *testing.T) {\n\tval, err := StrToFloat64E(\"1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, 1.0, val)\n}\n\nfunc TestStrToInt(t *testing.T) {\n\tval := StrToInt(\"1\")\n\tassert.Equal(t, 1, val)\n}\n\nfunc TestStrToIntE(t *testing.T) {\n\tval, err := StrToIntE(\"1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, 1, val)\n}\n\nfunc TestStrToUint32(t *testing.T) {\n\tval := StrToUint32(\"1\")\n\tassert.Equal(t, uint32(1), val)\n}\n\nfunc TestStrToUint32E(t *testing.T) {\n\tval, err := StrToUint32E(\"1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, uint32(1), val)\n}\n\nfunc TestStrToUint64(t *testing.T) {\n\tval := StrToUint64(\"1\")\n\tassert.Equal(t, uint64(1), val)\n}\n\nfunc TestStrToUint64E(t *testing.T) {\n\tval, err := StrToUint64E(\"1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, uint64(1), val)\n}\n\nfunc TestUint64ToStr(t *testing.T) {\n\tval := Uint64ToStr(1)\n\tassert.Equal(t, \"1\", val)\n}\n\nfunc TestInt64ToStr(t *testing.T) {\n\tval := Int64ToStr(1)\n\tassert.Equal(t, \"1\", val)\n}\n\nfunc TestProtoAndGoTypeConversion(t *testing.T) {\n\tvar (\n\t\tval1 int32  = 1\n\t\tval2 int    = 1\n\t\tval3 int64  = 1\n\t\tval4 uint64 = 1\n\t)\n\tassert.Equal(t, val2, ProtoInt32ToInt(val1))\n\tassert.Equal(t, val1, IntToProtoInt32(val2))\n\tassert.Equal(t, val4, ProtoInt64ToUint64(val3))\n\tassert.Equal(t, val3, Uint64ToProtoInt64(val4))\n}"
