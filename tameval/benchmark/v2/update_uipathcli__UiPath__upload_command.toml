[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "UiPath/uipathcli"
sha = "f599d0fbb2bbbb5d055d76ba5f1f68f727e97612"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out plugin/orchestrator/upload/upload_command.go plugin/orchestrator/upload/upload_command_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting plugin/orchestrator/upload/upload_command.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 92.0
mutation_kill_rate = nan
original_mutation_kill_rate = 55.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "plugin/orchestrator/upload/upload_command_test.go"
focal_file_path = "plugin/orchestrator/upload/upload_command.go"
test_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/plugin/orchestrator/upload/upload_command_test.go"
focal_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/plugin/orchestrator/upload/upload_command.go"
first_commit_date = "2025-04-15"
last_commit_date = "2025-05-15"
test_file_content = "package upload\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/UiPath/uipathcli/test\"\n)\n\nfunc TestUploadWithoutFolderIdParameterShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", \"does-not-exist\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Argument --folder-id is missing\") {\n\t\tt.Errorf(\"Expected stderr to show that folder-id parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithoutKeyParameterShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--path\", \"file.txt\", \"--file\", \"does-not-exist\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Argument --key is missing\") {\n\t\tt.Errorf(\"Expected stderr to show that key parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithInvalidFolderIdParameterShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"invalid\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", \"does-not-exist\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Cannot convert 'folder-id' value 'invalid' to integer\") {\n\t\tt.Errorf(\"Expected stderr to show that folder id cannot be converted to integer, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithoutPathParameterShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--file\", \"does-not-exist\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Argument --path is missing\") {\n\t\tt.Errorf(\"Expected stderr to show that path parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithoutFileParameterShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Argument --file is missing\") {\n\t\tt.Errorf(\"Expected stderr to show that file parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadFileDoesNotExistShowsValidationError(t *testing.T) {\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithConfig(config).\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tWithResponse(200, `{\"Uri\":\"http://localhost\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", \"does-not-exist\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Error sending request: File 'does-not-exist' not found\") {\n\t\tt.Errorf(\"Expected stderr to show that file was not found, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithoutOrganizationShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", \"hello-world\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Organization is not set\") {\n\t\tt.Errorf(\"Expected stderr to show that organization parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithoutTenantShowsValidationError(t *testing.T) {\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--organization\", \"myorg\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", \"hello-world\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Tenant is not set\") {\n\t\tt.Errorf(\"Expected stderr to show that tenant parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadWithFailedResponseReturnsError(t *testing.T) {\n\tpath := test.CreateFileWithContent(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", \"\").\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tWithResponse(400, \"validation error\").\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", path}, context)\n\n\tif !strings.Contains(result.StdErr, \"Orchestrator returned status code '400' and body 'validation error'\") {\n\t\tt.Errorf(\"Expected stderr to show that orchestrator call failed, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadSuccessfully(t *testing.T) {\n\tsrv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"PUT\" {\n\t\t\tw.WriteHeader(500)\n\t\t\t_, _ = w.Write([]byte(\"Wrong http method\"))\n\t\t\treturn\n\t\t}\n\t\tif r.Header[\"X-Ms-Blob-Type\"][0] != \"BlockBlob\" {\n\t\t\tw.WriteHeader(500)\n\t\t\t_, _ = w.Write([]byte(\"Missing header x-ms-blob-type\"))\n\t\t\treturn\n\t\t}\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\trequestBody := string(body)\n\t\tif requestBody != \"hello-world\" {\n\t\t\tw.WriteHeader(500)\n\t\t\t_, _ = w.Write([]byte(\"File content not found\"))\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(201)\n\t}))\n\tdefer srv.Close()\n\n\tpath := test.CreateFileWithContent(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\nservers:\n- url: https://cloud.uipath.com/{organization}/{tenant}/orchestrator_\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tWithResponse(200, `{\"Uri\":\"`+srv.URL+`\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", path}, context)\n\n\tif result.Error != nil {\n\t\tt.Errorf(\"Expected no error, but got: %v\", result.Error)\n\t}\n\tif result.StdErr != \"\" {\n\t\tt.Errorf(\"Expected stderr to be empty, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestUploadLargeFile(t *testing.T) {\n\tsize := 10 * 1024 * 1024\n\tsrv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, _ := io.ReadAll(r.Body)\n\t\tif len(body) != size {\n\t\t\tw.WriteHeader(500)\n\t\t\t_, _ = w.Write([]byte(\"Invalid size\"))\n\t\t\treturn\n\t\t}\n\t\tw.WriteHeader(201)\n\t}))\n\tdefer srv.Close()\n\n\tpath := test.CreateFileWithBinaryContent(t, make([]byte, size))\n\n\tdefinition := `\nservers:\n- url: https://cloud.uipath.com/{organization}/{tenant}/orchestrator_\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", definition).\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tWithResponse(200, `{\"Uri\":\"`+srv.URL+`\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--organization\", \"myorg\", \"--tenant\", \"mytenant\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", path}, context)\n\n\tif result.Error != nil {\n\t\tt.Errorf(\"Expected no error, but got: %v\", result.Error)\n\t}\n}\n\nfunc TestUploadWithDebugOutput(t *testing.T) {\n\tsrv := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(201)\n\t}))\n\tdefer srv.Close()\n\n\tpath := test.CreateFileWithContent(t, \"hello-world\")\n\n\tdefinition := `\nservers:\n- url: https://cloud.uipath.com/{organization}/{tenant}/orchestrator_\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"orchestrator\", definition).\n\t\tWithCommandPlugin(NewUploadCommand()).\n\t\tWithResponse(200, `{\"Uri\":\"`+srv.URL+\"/upload/file.txt\"+`\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"orchestrator\", \"buckets\", \"upload\", \"--debug\", \"--organization\", \"myorg\", \"--tenant\", \"mytenant\", \"--folder-id\", \"1\", \"--key\", \"2\", \"--path\", \"file.txt\", \"--file\", path}, context)\n\n\tif !strings.Contains(result.StdErr, \"/myorg/mytenant/orchestrator_/odata/Buckets(2)/UiPath.Server.Configuration.OData.GetWriteUri?path=file.txt\") {\n\t\tt.Errorf(\"Expected stderr to contain first request to get write uri, but got: %v\", result.StdErr)\n\t}\n\tif !strings.Contains(result.StdErr, \"PUT \"+srv.URL+\"/upload/file.txt\") {\n\t\tt.Errorf(\"Expected stderr to contain upload request, but got: %v\", result.StdErr)\n\t}\n}"
