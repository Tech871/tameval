[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "containers/ramalama"
sha = "2c94e5f39c1f6c3253832353cbc2a225479b1dea"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ramalama/toml_parser.py -m pytest -q --junit-xml=test_output.xml test/unit/test_toml_parser.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ramalama.toml_parser --unit-test test.unit.test_toml_parser --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ramalama/toml_parser.py --unit-test test/unit/test_toml_parser.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 91.0
original_coverage = 91.0
mutation_kill_rate = 21.0
original_mutation_kill_rate = 21.0
covered_lines = [ 0, 2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 27, 29, 31, 33, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71,]
missed_lines = [ 26, 34, 35, 36, 38,]

[input_info]
test_file_path = "test/unit/test_toml_parser.py"
focal_file_path = "ramalama/toml_parser.py"
test_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/test/unit/test_toml_parser.py"
focal_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/ramalama/toml_parser.py"
first_commit_date = "2024-10-29"
last_commit_date = "2025-08-06"
test_file_content = "\"\"\"\nUnit tests for the TOMLParser class\n\"\"\"\n\nimport pytest\n\nimport ramalama.toml_parser\n\n\n@pytest.mark.parametrize(\n    \"toml, expected\",\n    [\n        (\n            \"\"\"\n            [store]\n            container = \"docker\"\n            engine = \"docker\"\n            image = \"my_image\"\n            transport = \"oci\"\n            \"\"\",\n            {\n                \"store\": {\n                    \"container\": \"docker\",\n                    \"engine\": \"docker\",\n                    \"image\": \"my_image\",\n                    \"transport\": \"oci\",\n                },\n            },\n        ),\n    ],\n)\ndef test_toml_parser_basic_parse(toml, expected):\n    \"\"\"\n    Test the basic parsing of TOML files\n    \"\"\"\n    toml_parser = ramalama.toml_parser.TOMLParser()\n    assert toml_parser.parse(toml) == expected\n\n\n@pytest.mark.parametrize(\n    \"toml, expected\",\n    [\n        (\n            \"\"\"\n            [store]\n            processes = 1\n            float_value = 1.0\n            use_engine = True\n            image = \"my_image\"\n            numbers = [1, 2, 3]\n            \"\"\",\n            {\n                \"store\": {\n                    \"processes\": 1,\n                    \"float_value\": 1.0,\n                    \"use_engine\": True,\n                    \"image\": \"my_image\",\n                    \"numbers\": [1, 2, 3],\n                },\n            },\n        ),\n    ],\n)\ndef test_toml_parser_basic_parse_different_types(toml, expected):\n    \"\"\"\n    Test the basic parsing of TOML files\n    \"\"\"\n    toml_parser = ramalama.toml_parser.TOMLParser()\n    assert toml_parser.parse(toml) == expected\n    assert toml_parser.get(\"store.processes\") == expected[\"store\"][\"processes\"]\n    assert toml_parser.get(\"store.use_engine\") == expected[\"store\"][\"use_engine\"]\n    assert toml_parser.get(\"store.image\") == expected[\"store\"][\"image\"]\n\n\n@pytest.mark.parametrize(\n    \"toml, expected\",\n    [\n        (\n            \"\"\"\n            [store]\n            container = \"podman\"\n            engine = \"podman\"\n            image = \"example_image\"\n            transport = \"oci\"\n            [store.extra]\n            extra_key = \"extra_value\"\n            \"\"\",\n            {\n                \"store\": {\n                    \"container\": \"podman\",\n                    \"engine\": \"podman\",\n                    \"image\": \"example_image\",\n                    \"transport\": \"oci\",\n                    \"extra\": {\"extra_key\": \"extra_value\"},\n                },\n            },\n        ),\n    ],\n)\ndef test_toml_parser_get(toml, expected):\n    \"\"\"\n    Test the get method of the TOMLParser class\n    \"\"\"\n    toml_parser = ramalama.toml_parser.TOMLParser()\n    toml_parser.parse(toml)\n    assert toml_parser.get(\"store\") == expected[\"store\"]\n    assert toml_parser.get(\"store.container\") == expected[\"store\"][\"container\"]\n    assert toml_parser.get(\"store.engine\") == expected[\"store\"][\"engine\"]\n    assert toml_parser.get(\"store.image\") == expected[\"store\"][\"image\"]\n    assert toml_parser.get(\"store.transport\") == expected[\"store\"][\"transport\"]\n    assert toml_parser.get(\"store.non_existent_key\") is None\n    if \"extra\" in expected[\"store\"]:\n        assert toml_parser.get(\"store.extra\") == expected[\"store\"][\"extra\"]\n        assert toml_parser.get(\"store.extra.extra_key\") == expected[\"store\"][\"extra\"][\"extra_key\"]\n    else:\n        assert toml_parser.get(\"store.extra\") is None\n\n\n@pytest.mark.parametrize(\n    \"toml_error_string\",\n    [\n        (\n            \"\"\"\n            This is not a valid TOML file.\n            \"\"\"\n        ),\n    ],\n)\ndef test_toml_parser_wrong_parse(toml_error_string):\n    \"\"\"\n    Test the parsing of invalid TOML files\n    \"\"\"\n    toml_parser = ramalama.toml_parser.TOMLParser()\n    with pytest.raises(ValueError, match=\"Invalid TOML line: This is not a valid TOML file.\"):\n        toml_parser.parse(toml_error_string)\n    assert toml_parser.get(\"store\") is None\n    assert toml_parser.get(\"store.container\") is None\n    assert toml_parser.get(\"store.engine\") is None\n    assert toml_parser.get(\"store.image\") is None\n    assert toml_parser.get(\"store.transport\") is None\n    assert toml_parser.get(\"store.extra\") is None\n    assert toml_parser.get(\"store.extra.extra_key\") is None\n\n\n@pytest.mark.parametrize(\n    \"toml, expected\",\n    [\n        (\n            \"\"\"\n            [store]\n            container = \"container_value\"\n            engine = \"engine_value\"\n            image = \"image_value\"\n            transport = \"transport_value\"\n            \"\"\",\n            {\n                \"store\": {\n                    \"container\": \"container_value\",\n                    \"engine\": \"engine_value\",\n                    \"image\": \"image_value\",\n                    \"transport\": \"transport_value\",\n                }\n            },\n        )\n    ],\n)\ndef test_get_method_without_extra(toml, expected):\n    \"\"\"\n    Test the get method of the TOMLParser class when the store.extra section is missing.\n    \"\"\"\n    toml_parser = ramalama.toml_parser.TOMLParser()\n    toml_parser.parse(toml)\n    assert toml_parser.get(\"store\") == expected[\"store\"]\n    assert toml_parser.get(\"store.container\") == expected[\"store\"][\"container\"]\n    assert toml_parser.get(\"store.engine\") == expected[\"store\"][\"engine\"]\n    assert toml_parser.get(\"store.image\") == expected[\"store\"][\"image\"]\n    assert toml_parser.get(\"store.transport\") == expected[\"store\"][\"transport\"]\n    assert toml_parser.get(\"store.extra\") is None\n\n\n@pytest.mark.parametrize(\n    \"toml_error_string, expected_match\",\n    [\n        (\"This is not a valid TOML file.\", \"Invalid TOML line: This is not a valid TOML file.\"),\n        ('key = \"value', \"Unsupported value type: \\\"value\"),\n        (\"key = unquoted string\", \"Unsupported value type: unquoted string\"),\n    ],\n)\ndef test_toml_parser_wrong_toml_entries(toml_error_string, expected_match):\n    \"\"\"\n    Test the parsing of invalid TOML files with specific error messages for each case\n    \"\"\"\n    toml_parser = ramalama.toml_parser.TOMLParser()\n    with pytest.raises(ValueError, match=expected_match):\n        toml_parser.parse(toml_error_string)\n"
