[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "GIScience/openrouteservice"
sha = "58549a4d0a2affe96463f3ef81081dd95411b243"
bench_version = 1

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl ors-engine -Dtest=RouteSearchParametersTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl ors-engine -DtargetClasses=**.RouteSearchParameters  -DtargetTests=**.RouteSearchParametersTest  -DoutputFormats=XML"
coverage_report_path = "ors-engine/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "ors-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 52.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "ors-engine/src/test/java/org/heigit/ors/routing/RouteSearchParametersTest.java"
focal_file_path = "ors-engine/src/main/java/org/heigit/ors/routing/RouteSearchParameters.java"
test_file_url = "https://github.com/GIScience/openrouteservice/blob/58549a4d0a2affe96463f3ef81081dd95411b243/ors-engine/src/test/java/org/heigit/ors/routing/RouteSearchParametersTest.java"
focal_file_url = "https://github.com/GIScience/openrouteservice/blob/58549a4d0a2affe96463f3ef81081dd95411b243/ors-engine/src/main/java/org/heigit/ors/routing/RouteSearchParameters.java"
first_commit_date = "2023-06-13"
last_commit_date = "2025-01-17"
test_file_content = "package org.heigit.ors.routing;\n\nimport org.heigit.ors.exceptions.ParameterValueException;\nimport org.heigit.ors.routing.graphhopper.extensions.HeavyVehicleAttributes;\nimport org.heigit.ors.routing.parameters.VehicleParameters;\nimport org.heigit.ors.routing.pathprocessors.BordersExtractor;\nimport org.junit.jupiter.api.Test;\nimport org.locationtech.jts.geom.Polygon;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass RouteSearchParametersTest {\n\n    @Test\n    void expectFailingProfileParamsWithVehicleProfile() {\n        assertThrows(ParameterValueException.class, () -> {\n            RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n            routeSearchParameters.setProfileType(1);\n            routeSearchParameters.setOptions(\"{\\\"profile_params\\\":{\\\"weightings\\\":{\\\"green\\\":{\\\"factor\\\":0.8}}}}\");\n        });\n    }\n\n    @Test\n    void getProfileType() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertEquals(0, routeSearchParameters.getProfileType());\n    }\n\n    @Test\n    void setProfileType() throws Exception {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setProfileType(2);\n        assertEquals(2, routeSearchParameters.getProfileType());\n    }\n\n    @Test\n    void getWeightingMethod() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertEquals(WeightingMethod.RECOMMENDED, routeSearchParameters.getWeightingMethod(), 0.0);\n    }\n\n    @Test\n    void setWeightingMethod() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setWeightingMethod(WeightingMethod.FASTEST);\n        assertEquals(WeightingMethod.FASTEST, routeSearchParameters.getWeightingMethod(), 0.0);\n    }\n\n    @Test\n    void getAvoidAreas() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertArrayEquals(null, routeSearchParameters.getAvoidAreas());\n    }\n\n    @Test\n    void setAvoidAreas() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidAreas(new Polygon[0]);\n        assertArrayEquals(new Polygon[0], routeSearchParameters.getAvoidAreas());\n    }\n\n    @Test\n    void hasAvoidAreas() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.hasAvoidAreas());\n        routeSearchParameters.setAvoidAreas(new Polygon[1]);\n        assertTrue(routeSearchParameters.hasAvoidAreas());\n    }\n\n    @Test\n    void getAvoidFeatureTypes() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertEquals(0, routeSearchParameters.getAvoidFeatureTypes());\n\n    }\n\n    @Test\n    void setAvoidFeatureTypes() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidFeatureTypes(1);\n        assertEquals(1, routeSearchParameters.getAvoidFeatureTypes());\n    }\n\n    @Test\n    void hasAvoidFeatures() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.hasAvoidFeatures());\n        routeSearchParameters.setAvoidFeatureTypes(1);\n        assertTrue(routeSearchParameters.hasAvoidFeatures());\n    }\n\n    @Test\n    void getAvoidCountries() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertNull(routeSearchParameters.getAvoidCountries());\n    }\n\n    @Test\n    void setAvoidCountries() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidCountries(new int[1]);\n        assertArrayEquals(new int[1], routeSearchParameters.getAvoidCountries());\n    }\n\n    @Test\n    void hasAvoidCountries() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.hasAvoidCountries());\n        routeSearchParameters.setAvoidCountries(new int[1]);\n        assertTrue(routeSearchParameters.hasAvoidCountries());\n    }\n\n    @Test\n    void hasAvoidBorders() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.hasAvoidBorders());\n        routeSearchParameters.setAvoidBorders(BordersExtractor.Avoid.CONTROLLED);\n        assertTrue(routeSearchParameters.hasAvoidBorders());\n    }\n\n    @Test\n    void setAvoidBorders() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidBorders(BordersExtractor.Avoid.CONTROLLED);\n        assertEquals(BordersExtractor.Avoid.CONTROLLED, routeSearchParameters.getAvoidBorders());\n    }\n\n    @Test\n    void getAvoidBorders() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertEquals(BordersExtractor.Avoid.NONE, routeSearchParameters.getAvoidBorders());\n    }\n\n    @Test\n    void getConsiderTurnRestrictions() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.getConsiderTurnRestrictions());\n    }\n\n    @Test\n    void setConsiderTurnRestrictions() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setConsiderTurnRestrictions(true);\n        assertTrue(routeSearchParameters.getConsiderTurnRestrictions());\n    }\n\n    @Test\n    void getVehicleType() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertEquals(HeavyVehicleAttributes.UNKNOWN, routeSearchParameters.getVehicleType());\n    }\n\n    @Test\n    void setVehicleType() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setVehicleType(HeavyVehicleAttributes.AGRICULTURE);\n        assertEquals(HeavyVehicleAttributes.AGRICULTURE, routeSearchParameters.getVehicleType());\n\n    }\n\n    @Test\n    void getOptions() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertNull(routeSearchParameters.getOptions());\n    }\n\n    @Test\n    void hasParameters() throws Exception {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.hasParameters(routeSearchParameters.getClass()));\n        routeSearchParameters.setProfileType(2);\n        routeSearchParameters.setOptions(\"{\\\"profile_params\\\":{\\\"weightings\\\":{\\\"green\\\":{\\\"factor\\\":0.8}}}}\");\n        assertTrue(routeSearchParameters.hasParameters(VehicleParameters.class));\n    }\n\n    @Test\n    void getProfileParameters() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertNull(routeSearchParameters.getProfileParameters());\n    }\n\n    @Test\n    void getFlexibleMode() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.hasFlexibleMode());\n    }\n\n    @Test\n    void setFlexibleMode() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setFlexibleMode(true);\n        assertTrue(routeSearchParameters.hasFlexibleMode());\n    }\n\n    @Test\n    void getMaximumRadiuses() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertNull(routeSearchParameters.getMaximumRadiuses());\n    }\n\n    @Test\n    void setMaximumRadiuses() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setMaximumRadiuses(new double[0]);\n        assertNotNull(routeSearchParameters.getMaximumRadiuses());\n        assertSame(double[].class, routeSearchParameters.getMaximumRadiuses().getClass());\n        assertEquals(0, routeSearchParameters.getMaximumRadiuses().length);\n    }\n\n    @Test\n    void getBearings() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertNull(routeSearchParameters.getBearings());\n    }\n\n    @Test\n    void setBearings() {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setBearings(new WayPointBearing[]{});\n        assertArrayEquals(new WayPointBearing[]{}, routeSearchParameters.getBearings());\n    }\n\n    @Test\n    void requiresDynamicPreprocessedWeights() throws Exception {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        assertFalse(routeSearchParameters.requiresDynamicPreprocessedWeights());\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidAreas(new Polygon[1]);\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"avoid areas\");\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidFeatureTypes(1);\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"avoid features\");\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidBorders(BordersExtractor.Avoid.CONTROLLED);\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"avoid borders\");\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setAvoidCountries(new int[1]);\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"avoid countries\");\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setConsiderTurnRestrictions(true);\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"turn restrictions\");\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setProfileType(RoutingProfileType.DRIVING_HGV);\n        assertFalse(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"default vehicle type\");\n        routeSearchParameters.setVehicleType(HeavyVehicleAttributes.BUS);\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"non-default vehicle type\");\n\n        routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setProfileType(RoutingProfileType.DRIVING_HGV);\n        routeSearchParameters.setOptions(\"{\\\"profile_params\\\":{\\\"weightings\\\":{\\\"green\\\":{\\\"factor\\\":0.8}}}}\");\n        assertTrue(routeSearchParameters.requiresDynamicPreprocessedWeights(), \"profile param\");\n    }\n\n    @Test\n    void alternativeRoutesParams() throws Exception {\n        RouteSearchParameters routeSearchParameters = new RouteSearchParameters();\n        routeSearchParameters.setOptions(\"{\\\"alternative_routes_count\\\": 2, \\\"alternative_routes_weight_factor\\\": 3.3, \\\"alternative_routes_share_factor\\\": 4.4}}\");\n        assertEquals(2, routeSearchParameters.getAlternativeRoutesCount());\n        assertEquals(3.3, routeSearchParameters.getAlternativeRoutesWeightFactor(), 0.0);\n        assertEquals(4.4, routeSearchParameters.getAlternativeRoutesShareFactor(), 0.0);\n    }\n}"
