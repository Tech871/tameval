[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "Pipfile"

[repo_info]
repository = "GoogleCloudPlatform/gcpdiag"
sha = "679c55e8715d535c797fc18cd20cda0ad3fc90ea"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install pipenv && pipenv lock && pipenv install --deploy --system --dev && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=gcpdiag/runbook/report.py -m pytest -q --junit-xml=test_output.xml gcpdiag/runbook/report_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target gcpdiag.runbook.report --unit-test gcpdiag.runbook.report_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target gcpdiag/runbook/report.py --unit-test gcpdiag/runbook/report_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 43.0
original_coverage = 52.0
mutation_kill_rate = nan
original_mutation_kill_rate = 18.0
covered_lines = [ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43, 45, 52, 53, 54, 55, 56, 58, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 86, 87, 88, 95, 96, 101, 103, 104, 105, 106, 108, 109, 112, 113, 116, 117, 119, 120, 121, 122, 125, 128, 129, 130, 131, 132, 133, 134, 136, 143, 144, 148, 155, 161, 163, 165, 166, 168, 171, 174, 177, 240, 243, 250, 275, 282, 289, 297, 306, 309, 319, 322, 327, 335, 353, 357, 358, 360, 371, 381, 384, 407, 417, 430, 467,]
missed_lines = [ 84, 93, 102, 110, 114, 137, 138, 139, 140, 145, 150, 151, 152, 153, 156, 169, 172, 175, 179, 180, 181, 183, 185, 186, 188, 189, 203, 204, 219, 220, 221, 223, 225, 235, 241, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 276, 277, 278, 279, 280, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 311, 312, 315, 316, 323, 324, 325, 329, 330, 331, 332, 333, 336, 337, 338, 339, 340, 342, 343, 344, 345, 347, 348, 350, 361, 362, 363, 364, 365, 366, 368, 376, 382, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 409, 410, 422, 423, 443, 446, 451, 455, 458, 459, 463, 464, 465, 474, 477, 481, 484, 487, 488, 491, 492, 493,]

[input_info]
test_file_path = "gcpdiag/runbook/report_test.py"
focal_file_path = "gcpdiag/runbook/report.py"
test_file_url = "https://github.com/GoogleCloudPlatform/gcpdiag/blob/679c55e8715d535c797fc18cd20cda0ad3fc90ea/gcpdiag/runbook/report_test.py"
focal_file_url = "https://github.com/GoogleCloudPlatform/gcpdiag/blob/679c55e8715d535c797fc18cd20cda0ad3fc90ea/gcpdiag/runbook/report.py"
first_commit_date = "2024-02-26"
last_commit_date = "2025-07-21"
test_file_content = "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Test Reporting Classes\"\"\"\n\nimport io\nimport unittest\nfrom unittest.mock import MagicMock, mock_open, patch\n\nfrom gcpdiag import config\nfrom gcpdiag.queries import gce\nfrom gcpdiag.runbook import Step, report\nfrom gcpdiag.runbook.report import StepResult\n\nconfig.init({'auto': True, 'interface': 'cli'})\n\njson_report = '{\"runbook\": \"test/test-runbook\"}'\n\n\nclass TestTerminalReportManager(unittest.TestCase):\n  \"\"\"Test Report Manager\"\"\"\n\n  def setUp(self):\n    self.trm = report.TerminalReportManager()\n    self.trm.tree = MagicMock(name='MockTree')\n    self.trm.tree.name = 'TestTree'\n    self.resource = gce.Instance(\n        'project_id', {\n            'id': '123',\n            'name': 'test',\n            'selfLink': 'https://www.googleapis.com/compute/v1/test/test-id'\n        })\n\n    ok_step_eval = report.ResourceEvaluation(resource=self.resource,\n                                             status='ok',\n                                             reason='TestReason',\n                                             remediation='TestRemediation')\n    test_step = report.StepResult(step=Step(uuid='ok.step'))\n\n    test_step.results.append(ok_step_eval)\n    self.trm.results = {\n        test_step.execution_id: test_step,\n    }\n\n  def test_initialization(self):\n    self.assertIsInstance(self.trm.results, dict)\n    self.assertEqual(self.trm.report_path, '')\n\n  def test_add_step_result(self):\n    step_result = StepResult(Step(uuid='friendly.name'))\n    self.trm.add_step_result(step_result)\n    self.assertIn('gcpdiag.runbook.Step.friendly.name', self.trm.results)\n    self.assertEqual(self.trm.results['gcpdiag.runbook.Step.friendly.name'],\n                     step_result)\n\n  def test_any_failed(self):\n    step_result_failed = StepResult(Step(uuid='failed'))\n    failed_eval = report.ResourceEvaluation(resource=self.resource,\n                                            status='failed',\n                                            reason='TestReason',\n                                            remediation='TestRemediation')\n    self.trm.add_step_result(step_result_failed)\n    self.trm.add_step_eval(execution_id=step_result_failed.execution_id,\n                           evaluation=failed_eval)\n    self.assertTrue(self.trm.any_failed)\n\n  def test_get_rule_statuses(self):\n    rule_statuses = self.trm.get_rule_statuses()\n    self.assertEqual(rule_statuses, {'gcpdiag.runbook.Step.ok.step': 'ok'})\n\n  def test_generate_report_path(self):\n    with patch('gcpdiag.config.get', return_value='fake_dir') as fd:\n      self.trm.get_report_path()\n      self.assertTrue(self.trm.report_path.endswith('.json'))\n      self.assertTrue(self.trm.report_path.startswith(fd.return_value))\n\n  #pylint:disable=protected-access\n  @patch('builtins.open', new_callable=mock_open)\n  @patch('logging.error')\n  @patch('sys.stderr', new_callable=io.StringIO)\n  def test_report_to_terminal_success(self, mock_stderr, mock_logging_error,\n                                      m_open):\n    self.trm._write_report_to_terminal(json_report)\n    m_open.assert_called_once_with(self.trm.report_path, 'w', encoding='utf-8')\n    handle = m_open.return_value.__enter__.return_value\n    handle.write.assert_called_once_with(json_report)\n    self.assertEqual(mock_logging_error.call_count, 0)\n    self.assertIn('Runbook report located in:', mock_stderr.getvalue())\n\n  @patch('builtins.open', side_effect=PermissionError)\n  @patch('logging.error')\n  @patch('sys.stderr', new_callable=io.StringIO)\n  def test_save_report_permission_error(self, mock_stderr, mock_logging_error,\n                                        m_open):\n    self.trm._write_report_to_terminal(json_report)\n    m_open.assert_called_once_with(self.trm.report_path, 'w', encoding='utf-8')\n    handle = m_open.return_value.__enter__.return_value\n    handle.write.assert_not_called()\n    mock_logging_error.assert_called_once()\n    assert 'Permission denied' in mock_logging_error.call_args[0][0]\n    # report is displayed on the terminal\n    self.assertIn(json_report, mock_stderr.getvalue())\n    self.assertNotIn('Runbook report located in', mock_stderr.getvalue())\n\n  @patch('builtins.open', side_effect=OSError)\n  @patch('logging.error')\n  @patch('sys.stderr', new_callable=io.StringIO)\n  def test_write_report_to_terminal_os_error(self, mock_stderr,\n                                             mock_logging_error, m_open):\n\n    self.trm._write_report_to_terminal(json_report)\n    m_open.assert_called_once_with(self.trm.report_path, 'w', encoding='utf-8')\n    handle = m_open.return_value.__enter__.return_value\n    handle.write.assert_not_called()\n    mock_logging_error.assert_called_once()\n    assert 'Failed to save generated report to file' in mock_logging_error.call_args[\n        0][0]\n    # report is displayed on the terminal\n    self.assertIn(json_report, mock_stderr.getvalue())\n    self.assertNotIn('Runbook report located in', mock_stderr.getvalue())\n\n\nclass TestReportResults(unittest.TestCase):\n  \"\"\"Test Report\"\"\"\n\n  def test_initialization(self):\n    resource = gce.Instance(\n        'project_id', {\n            'id': '123',\n            'name': 'test',\n            'selfLink': 'https://www.googleapis.com/compute/v1/test/test-id'\n        })\n    # Test normal initialization\n    ok_step_eval = report.ResourceEvaluation(resource=resource,\n                                             status='ok',\n                                             reason='TestReason',\n                                             remediation='TestRemediation')\n    step_result = report.StepResult(step=Step(uuid='ok.step.friendly.name'))\n    step_result.results.append(ok_step_eval)\n\n    self.assertEqual(step_result.overall_status, 'ok')\n\n  def test_equality(self):\n    # Test objects with the same properties are considered equal\n    result1 = StepResult(Step(uuid='uuid'))\n    result2 = StepResult(Step(uuid='uuid'))\n    self.assertEqual(result1, result2)\n\n    # Test objects with different properties are not considered equal\n    result3 = StepResult(Step())\n    self.assertNotEqual(result1, result3)"
