[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.5"

[repo_info]
repository = "leptonai/gpud"
sha = "ae7fd28ecd1461a1ddf146b809a159ee1af94a34"
bench_version = 2

[run_info]
docker_image = "golang:1.24.5"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/nvidia-query/infiniband/class/value_parser.go pkg/nvidia-query/infiniband/class/value_parser_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/nvidia-query/infiniband/class/value_parser.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 43.0
original_coverage = 91.0
mutation_kill_rate = 37.0
original_mutation_kill_rate = 84.0
covered_lines = [ 26, 27, 28, 31, 46, 53, 54, 55, 56, 57, 58, 60, 83, 84, 85,]
missed_lines = [ 35, 36, 37, 38, 40, 41, 47, 48, 49, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 79,]

[input_info]
test_file_path = "pkg/nvidia-query/infiniband/class/value_parser_test.go"
focal_file_path = "pkg/nvidia-query/infiniband/class/value_parser.go"
test_file_url = "https://github.com/leptonai/gpud/blob/ae7fd28ecd1461a1ddf146b809a159ee1af94a34/pkg/nvidia-query/infiniband/class/value_parser_test.go"
focal_file_url = "https://github.com/leptonai/gpud/blob/ae7fd28ecd1461a1ddf146b809a159ee1af94a34/pkg/nvidia-query/infiniband/class/value_parser.go"
first_commit_date = "2025-06-24"
last_commit_date = "2025-06-24"
test_file_content = "package class\n\nimport (\n\t\"testing\"\n)\n\nfunc TestNewValueParser(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tinput string\n\t}{\n\t\t{\n\t\t\tname:  \"empty string\",\n\t\t\tinput: \"\",\n\t\t},\n\t\t{\n\t\t\tname:  \"valid number\",\n\t\t\tinput: \"123\",\n\t\t},\n\t\t{\n\t\t\tname:  \"string value\",\n\t\t\tinput: \"test\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvp := newValueParser(tt.input)\n\t\t\tif vp == nil {\n\t\t\t\tt.Fatal(\"newValueParser returned nil\")\n\t\t\t}\n\t\t\tif vp.v != tt.input {\n\t\t\t\tt.Errorf(\"expected value %q, got %q\", tt.input, vp.v)\n\t\t\t}\n\t\t\tif vp.err != nil {\n\t\t\t\tt.Errorf(\"expected nil error, got %v\", vp.err)\n\t\t\t}\n\t\t})\n\t}\n}\n\n\n\n\n\n\nfunc TestValueParserInt64Internal(t *testing.T) {\n\t// Test the internal int64() method through Int()\n\ttests := []struct {\n\t\tname    string\n\t\tinput   string\n\t\twant    int\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname:    \"binary number\",\n\t\t\tinput:   \"0b1010\",\n\t\t\twant:    10,\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname:    \"scientific notation\",\n\t\t\tinput:   \"1e3\",\n\t\t\twant:    0,\n\t\t\twantErr: true,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tvp := newValueParser(tt.input)\n\t\t\tgot := vp.Int()\n\t\t\terr := vp.Err()\n\n\t\t\tif (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"int64() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t}\n\t\t\tif got != tt.want {\n\t\t\t\tt.Errorf(\"int64() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\n// Helper functions\nfunc int64Ptr(v int64) *int64 {\n\treturn &v\n}\n\nfunc uint64Ptr(v uint64) *uint64 {\n\treturn &v\n}\n"
