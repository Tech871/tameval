[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "authzed/spicedb"
sha = "449c43d3c8dbb72defa98dfd097392c2fa137870"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/telemetry/reporter.go internal/telemetry/reporter_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/telemetry/reporter.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 76.0
original_coverage = 76.0
mutation_kill_rate = 44.0
original_mutation_kill_rate = 44.0
covered_lines = [ 45, 46, 47, 48, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 81, 82, 87, 88, 89, 90, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 113, 114, 119, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 208, 210, 211, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234,]
missed_lines = [ 49, 50, 51, 55, 56, 57, 83, 84, 85, 91, 92, 93, 115, 116, 117, 149, 150, 151, 152, 153, 154, 155, 156, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,]

[input_info]
test_file_path = "internal/telemetry/reporter_test.go"
focal_file_path = "internal/telemetry/reporter.go"
test_file_url = "https://github.com/authzed/spicedb/blob/449c43d3c8dbb72defa98dfd097392c2fa137870/internal/telemetry/reporter_test.go"
focal_file_url = "https://github.com/authzed/spicedb/blob/449c43d3c8dbb72defa98dfd097392c2fa137870/internal/telemetry/reporter.go"
first_commit_date = "2022-04-07"
last_commit_date = "2025-07-08"
test_file_content = "package telemetry\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\tprompb \"buf.build/gen/go/prometheus/prometheus/protocolbuffers/go\"\n\t\"github.com/golang/snappy\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\t\"github.com/prometheus/common/model\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestWriteTimeSeries(t *testing.T) {\n\ttests := []struct {\n\t\tname          string\n\t\tstatusCode    int\n\t\tresponseBody  string\n\t\texpectedError string\n\t\tvalidateReq   func(t *testing.T, req *http.Request)\n\t}{\n\t\t{\n\t\t\tname:       \"successful write\",\n\t\t\tstatusCode: 200,\n\t\t\tvalidateReq: func(t *testing.T, req *http.Request) {\n\t\t\t\trequire.Equal(t, \"POST\", req.Method)\n\t\t\t\trequire.Equal(t, \"0.1.0\", req.Header.Get(\"X-Prometheus-Remote-Write-Version\"))\n\t\t\t\trequire.Equal(t, \"snappy\", req.Header.Get(\"Content-Encoding\"))\n\t\t\t\trequire.Equal(t, \"application/x-protobuf\", req.Header.Get(\"Content-Type\"))\n\n\t\t\t\tbody, err := io.ReadAll(req.Body)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NotEmpty(t, body)\n\n\t\t\t\t// Verify the body can be decompressed\n\t\t\t\tdecompressed, err := snappy.Decode(nil, body)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NotEmpty(t, decompressed)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:          \"server error\",\n\t\t\tstatusCode:    500,\n\t\t\tresponseBody:  \"Internal Server Error\",\n\t\t\texpectedError: \"unexpected Prometheus remote write response: 500: Internal Server Error\",\n\t\t},\n\t\t{\n\t\t\tname:          \"client error\",\n\t\t\tstatusCode:    400,\n\t\t\tresponseBody:  \"Bad Request\",\n\t\t\texpectedError: \"unexpected Prometheus remote write response: 400: Bad Request\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tif tt.validateReq != nil {\n\t\t\t\t\ttt.validateReq(t, r)\n\t\t\t\t}\n\t\t\t\tw.WriteHeader(tt.statusCode)\n\t\t\t\tif tt.responseBody != \"\" {\n\t\t\t\t\t_, err := w.Write([]byte(tt.responseBody))\n\t\t\t\t\trequire.NoError(t, err)\n\t\t\t\t}\n\t\t\t}))\n\t\t\tdefer server.Close()\n\n\t\t\tts := []*prompb.TimeSeries{\n\t\t\t\t{\n\t\t\t\t\tLabels: []*prompb.Label{\n\t\t\t\t\t\t{Name: \"test_label\", Value: \"test_value\"},\n\t\t\t\t\t},\n\t\t\t\t\tSamples: []*prompb.Sample{\n\t\t\t\t\t\t{Value: 42.0, Timestamp: time.Now().UnixMilli()},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tclient := &http.Client{}\n\t\t\terr := writeTimeSeries(t.Context(), client, server.URL, ts)\n\n\t\t\tif tt.expectedError != \"\" {\n\t\t\t\trequire.Error(t, err)\n\t\t\t\trequire.Contains(t, err.Error(), tt.expectedError)\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDiscoverTimeseries(t *testing.T) {\n\tregistry := prometheus.NewRegistry()\n\n\tgauge := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"test\",\n\t\tHelp: \"A test gauge\",\n\t\tConstLabels: prometheus.Labels{\n\t\t\t\"test_label\": \"test_value\",\n\t\t},\n\t})\n\tgauge.Set(123.456)\n\n\tcounter := prometheus.NewCounter(prometheus.CounterOpts{\n\t\tName: \"test_total\",\n\t\tHelp: \"A test counter\",\n\t})\n\tcounter.Add(42)\n\n\tregistry.MustRegister(gauge, counter)\n\n\tts, err := discoverTimeseries(registry)\n\trequire.NoError(t, err)\n\trequire.Len(t, ts, 2)\n\n\tfor _, timeSeries := range ts {\n\t\trequire.NotEmpty(t, timeSeries.Labels)\n\t\trequire.Len(t, timeSeries.Samples, 1)\n\t\trequire.NotZero(t, timeSeries.Samples[0].Timestamp)\n\t}\n}\n\nfunc TestDiscoverAndWriteMetrics(t *testing.T) {\n\treceivedData := make(chan []byte, 1)\n\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tbody, err := io.ReadAll(r.Body)\n\t\trequire.NoError(t, err)\n\t\treceivedData <- body\n\t\tw.WriteHeader(200)\n\t}))\n\tdefer server.Close()\n\n\tregistry := prometheus.NewRegistry()\n\tgauge := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"test_metric\",\n\t\tHelp: \"A test metric\",\n\t})\n\tgauge.Set(100)\n\tregistry.MustRegister(gauge)\n\n\tclient := &http.Client{}\n\terr := discoverAndWriteMetrics(t.Context(), registry, client, server.URL)\n\trequire.NoError(t, err)\n\n\tselect {\n\tcase data := <-receivedData:\n\t\trequire.NotEmpty(t, data)\n\n\t\t// Verify the data can be decompressed\n\t\tdecompressed, err := snappy.Decode(nil, data)\n\t\trequire.NoError(t, err)\n\t\trequire.NotEmpty(t, decompressed)\n\n\tcase <-time.After(1 * time.Second):\n\t\tt.Fatal(\"timeout waiting for data\")\n\t}\n}\n\nfunc TestRemoteReporter(t *testing.T) {\n\ttests := []struct {\n\t\tname          string\n\t\tendpoint      string\n\t\tinterval      time.Duration\n\t\texpectedError string\n\t}{\n\t\t{\n\t\t\tname:     \"valid configuration\",\n\t\t\tendpoint: \"https://example.com\",\n\t\t\tinterval: 1 * time.Minute,\n\t\t},\n\t\t{\n\t\t\tname:          \"invalid endpoint\",\n\t\t\tendpoint:      \"://invalid-url\",\n\t\t\tinterval:      1 * time.Minute,\n\t\t\texpectedError: \"invalid telemetry endpoint\",\n\t\t},\n\t\t{\n\t\t\tname:          \"interval too short\",\n\t\t\tendpoint:      \"https://example.com\",\n\t\t\tinterval:      30 * time.Second,\n\t\t\texpectedError: \"invalid telemetry reporting interval\",\n\t\t},\n\t\t{\n\t\t\tname:          \"cannot change default endpoint interval\",\n\t\t\tendpoint:      DefaultEndpoint,\n\t\t\tinterval:      2 * time.Hour,\n\t\t\texpectedError: \"cannot change the telemetry reporting interval for the default endpoint\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tregistry := prometheus.NewRegistry()\n\t\t\treporter, err := RemoteReporter(registry, tt.endpoint, \"\", tt.interval)\n\n\t\t\tif tt.expectedError != \"\" {\n\t\t\t\trequire.Error(t, err)\n\t\t\t\trequire.Contains(t, err.Error(), tt.expectedError)\n\t\t\t\trequire.Nil(t, reporter)\n\t\t\t} else {\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.NotNil(t, reporter)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRemoteReporterWithServer(t *testing.T) {\n\trequestCount := 0\n\trequestChan := make(chan bool, 10)\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\trequestCount++\n\t\trequestChan <- true\n\t\tw.WriteHeader(200)\n\t}))\n\tdefer server.Close()\n\n\tregistry := prometheus.NewRegistry()\n\tgauge := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"test_metric\",\n\t\tHelp: \"A test metric\",\n\t})\n\tgauge.Set(42)\n\tregistry.MustRegister(gauge)\n\n\treporter, err := RemoteReporter(registry, server.URL, \"\", 1*time.Minute)\n\trequire.NoError(t, err)\n\n\tctx, cancel := context.WithTimeout(t.Context(), 8*time.Second)\n\tdefer cancel()\n\n\t// Run reporter in background\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\tdone <- reporter(ctx)\n\t}()\n\n\t// Wait for at least one request\n\tselect {\n\tcase <-requestChan:\n\t\t// Success - we got a request\n\tcase <-time.After(7 * time.Second):\n\t\tt.Fatal(\"timeout waiting for request\")\n\t}\n\n\tcancel() // Stop the reporter\n\t<-done   // Wait for reporter to finish\n\n\trequire.Greater(t, requestCount, 0, \"Expected at least one request to be made\")\n}\n\nfunc TestRemoteReporterErrorHandling(t *testing.T) {\n\tfailureCount := 0\n\trequestChan := make(chan bool, 10)\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tfailureCount++\n\t\trequestChan <- true\n\t\t// Return 500 to test error handling\n\t\tw.WriteHeader(500)\n\t}))\n\tdefer server.Close()\n\n\tregistry := prometheus.NewRegistry()\n\tgauge := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"test_metric\",\n\t\tHelp: \"A test metric\",\n\t})\n\tgauge.Set(42)\n\tregistry.MustRegister(gauge)\n\n\treporter, err := RemoteReporter(registry, server.URL, \"\", 100*time.Millisecond) // Short interval for testing\n\trequire.NoError(t, err)\n\n\tctx, cancel := context.WithTimeout(t.Context(), 30*time.Second)\n\tdefer cancel()\n\n\t// Run reporter in background\n\tdone := make(chan error, 1)\n\tgo func() {\n\t\tdone <- reporter(ctx)\n\t}()\n\n\t// Wait for at least 1 request\n\tselect {\n\tcase <-requestChan:\n\t\t// Success - we got a request\n\tcase <-time.After(30 * time.Second):\n\t\tt.Fatal(\"timeout waiting for first request\")\n\t}\n\n\tcancel() // Stop the reporter\n\t<-done   // Wait for reporter to finish\n\n\trequire.GreaterOrEqual(t, failureCount, 1, \"Expected at least 1 request\")\n}\n\nfunc TestDisabledReporter(t *testing.T) {\n\terr := DisabledReporter(t.Context())\n\trequire.NoError(t, err)\n}\n\nfunc TestSilentlyDisabledReporter(t *testing.T) {\n\terr := SilentlyDisabledReporter(t.Context())\n\trequire.NoError(t, err)\n}\n\nfunc TestConvertLabels(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tinput    map[string]string\n\t\texpected []*prompb.Label\n\t}{\n\t\t{\n\t\t\tname:     \"empty labels\",\n\t\t\tinput:    map[string]string{},\n\t\t\texpected: []*prompb.Label{},\n\t\t},\n\t\t{\n\t\t\tname: \"single label\",\n\t\t\tinput: map[string]string{\n\t\t\t\t\"key\": \"value\",\n\t\t\t},\n\t\t\texpected: []*prompb.Label{\n\t\t\t\t{Name: \"key\", Value: \"value\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"multiple labels\",\n\t\t\tinput: map[string]string{\n\t\t\t\t\"label1\": \"value1\",\n\t\t\t\t\"label2\": \"value2\",\n\t\t\t},\n\t\t\texpected: []*prompb.Label{\n\t\t\t\t{Name: \"label1\", Value: \"value1\"},\n\t\t\t\t{Name: \"label2\", Value: \"value2\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\t// Convert string map to model.Metric\n\t\t\tmetric := make(model.Metric)\n\t\t\tfor k, v := range tt.input {\n\t\t\t\tmetric[model.LabelName(k)] = model.LabelValue(v)\n\t\t\t}\n\n\t\t\tresult := convertLabels(metric)\n\t\t\trequire.Len(t, result, len(tt.expected))\n\n\t\t\t// Convert to map for easier comparison since order might vary\n\t\t\tresultMap := make(map[string]string)\n\t\t\tfor _, label := range result {\n\t\t\t\tresultMap[label.Name] = label.Value\n\t\t\t}\n\n\t\t\texpectedMap := make(map[string]string)\n\t\t\tfor _, label := range tt.expected {\n\t\t\t\texpectedMap[label.Name] = label.Value\n\t\t\t}\n\n\t\t\trequire.Equal(t, expectedMap, resultMap)\n\t\t})\n\t}\n}\n\nfunc TestRemoteReporterWithCustomCA(t *testing.T) {\n\tregistry := prometheus.NewRegistry()\n\n\t// Test with non-existent CA file\n\t_, err := RemoteReporter(registry, \"https://example.com\", \"/nonexistent/ca.pem\", 1*time.Minute)\n\trequire.Error(t, err)\n\trequire.Contains(t, err.Error(), \"invalid custom cert pool path\")\n}\n\nfunc TestRemoteReporterContextCancellation(t *testing.T) {\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\ttime.Sleep(100 * time.Millisecond)\n\t\tw.WriteHeader(200)\n\t}))\n\tdefer server.Close()\n\n\tregistry := prometheus.NewRegistry()\n\tgauge := prometheus.NewGauge(prometheus.GaugeOpts{\n\t\tName: \"test_metric\",\n\t\tHelp: \"A test metric\",\n\t})\n\tgauge.Set(42)\n\tregistry.MustRegister(gauge)\n\n\treporter, err := RemoteReporter(registry, server.URL, \"\", 1*time.Minute)\n\trequire.NoError(t, err)\n\n\tctx, cancel := context.WithCancel(t.Context())\n\tcancel() // Cancel immediately\n\n\terr = reporter(ctx)\n\trequire.NoError(t, err)\n}\n\nfunc TestWriteTimeSeriesRequestFormat(t *testing.T) {\n\tvar capturedRequest *http.Request\n\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tcapturedRequest = r\n\t\tw.WriteHeader(200)\n\t}))\n\tdefer server.Close()\n\n\tts := []*prompb.TimeSeries{\n\t\t{\n\t\t\tLabels: []*prompb.Label{\n\t\t\t\t{Name: \"__name__\", Value: \"test_metric\"},\n\t\t\t\t{Name: \"instance\", Value: \"localhost:8080\"},\n\t\t\t},\n\t\t\tSamples: []*prompb.Sample{\n\t\t\t\t{Value: 1.0, Timestamp: 1234567890},\n\t\t\t},\n\t\t},\n\t}\n\n\tclient := &http.Client{}\n\terr := writeTimeSeries(t.Context(), client, server.URL, ts)\n\trequire.NoError(t, err)\n\n\trequire.NotNil(t, capturedRequest)\n\trequire.Equal(t, \"POST\", capturedRequest.Method)\n\trequire.Equal(t, \"0.1.0\", capturedRequest.Header.Get(\"X-Prometheus-Remote-Write-Version\"))\n\trequire.Equal(t, \"snappy\", capturedRequest.Header.Get(\"Content-Encoding\"))\n\trequire.Equal(t, \"application/x-protobuf\", capturedRequest.Header.Get(\"Content-Type\"))\n}\n"
