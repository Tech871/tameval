[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "databricks/databricks-sdk-java"
sha = "1aaab52533750ad00bb98d0a13d3895f384e77e0"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl databricks-sdk-java -Dtest=AzureCliCredentialsProviderTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl databricks-sdk-java -DtargetClasses=**.AzureCliCredentialsProvider  -DtargetTests=**.AzureCliCredentialsProviderTest  -DoutputFormats=XML"
coverage_report_path = "databricks-sdk-java/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "databricks-sdk-java/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 58.0
original_coverage = 58.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 11, 12, 13, 23, 26, 28, 30, 31, 35, 36, 38, 43, 48, 63, 64, 65, 67, 68, 72, 77, 82, 83, 84, 87, 88, 92, 93, 94, 97, 98, 99, 100, 101, 103,]
missed_lines = [ 19, 24, 39, 40, 42, 52, 53, 54, 56, 57, 58, 59, 69, 70, 78, 89, 90, 91, 105, 106, 107, 108, 109, 110, 112,]

[input_info]
test_file_path = "databricks-sdk-java/src/test/java/com/databricks/sdk/core/AzureCliCredentialsProviderTest.java"
focal_file_path = "databricks-sdk-java/src/main/java/com/databricks/sdk/core/AzureCliCredentialsProvider.java"
test_file_url = "https://github.com/databricks/databricks-sdk-java/blob/1aaab52533750ad00bb98d0a13d3895f384e77e0/databricks-sdk-java/src/test/java/com/databricks/sdk/core/AzureCliCredentialsProviderTest.java"
focal_file_url = "https://github.com/databricks/databricks-sdk-java/blob/1aaab52533750ad00bb98d0a13d3895f384e77e0/databricks-sdk-java/src/main/java/com/databricks/sdk/core/AzureCliCredentialsProvider.java"
first_commit_date = "2023-05-10"
last_commit_date = "2025-06-27"
test_file_content = "package com.databricks.sdk.core;\n\nimport static com.databricks.sdk.core.AzureEnvironment.ARM_DATABRICKS_RESOURCE_ID;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.times;\n\nimport com.databricks.sdk.core.oauth.CachedTokenSource;\nimport com.databricks.sdk.core.oauth.Token;\nimport com.databricks.sdk.core.oauth.TokenSource;\nimport java.time.Instant;\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Mockito;\n\nclass AzureCliCredentialsProviderTest {\n\n  private static final String WORKSPACE_RESOURCE_ID =\n      \"/subscriptions/2a2345f8/resourceGroups/deco-rg/providers/Microsoft.Databricks/workspaces/deco-ws\";\n  private static final String SUBSCRIPTION = \"2a2345f8\";\n  private static final String TOKEN = \"t-123\";\n  private static final String TOKEN_TYPE = \"token-type\";\n\n  private static CachedTokenSource mockTokenSource() {\n    CliTokenSource cliTokenSource = Mockito.mock(CliTokenSource.class);\n    Mockito.when(cliTokenSource.getToken()).thenReturn(new Token(TOKEN, TOKEN_TYPE, Instant.now()));\n    return new CachedTokenSource.Builder(cliTokenSource).build();\n  }\n\n  private static AzureCliCredentialsProvider getAzureCliCredentialsProvider(\n      TokenSource tokenSource) {\n\n    AzureCliCredentialsProvider provider = Mockito.spy(new AzureCliCredentialsProvider());\n    Mockito.doReturn(tokenSource).when(provider).getTokenSource(any(), anyList());\n\n    return provider;\n  }\n\n  @Test\n  void testWorkSpaceIDUsage() {\n    AzureCliCredentialsProvider provider = getAzureCliCredentialsProvider(mockTokenSource());\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(provider)\n            .setAzureWorkspaceResourceId(WORKSPACE_RESOURCE_ID);\n    ArgumentCaptor<List<String>> argument = ArgumentCaptor.forClass(List.class);\n\n    HeaderFactory header = provider.configure(config);\n\n    String token = header.headers().get(\"Authorization\");\n    assertEquals(token, TOKEN_TYPE + \" \" + TOKEN);\n    Mockito.verify(provider, times(2)).getTokenSource(any(), argument.capture());\n\n    List<String> value = argument.getValue();\n    value = value.subList(value.size() - 2, value.size());\n    List<String> expected = Arrays.asList(\"--subscription\", SUBSCRIPTION);\n    assertEquals(expected, value);\n  }\n\n  @Test\n  void testFallbackWhenTailsToGetTokenForSubscription() {\n    CachedTokenSource tokenSource = mockTokenSource();\n\n    AzureCliCredentialsProvider provider = Mockito.spy(new AzureCliCredentialsProvider());\n    Mockito.doThrow(new DatabricksException(\"error\"))\n        .when(provider)\n        .getTokenSource(any(), anyList());\n    Mockito.doReturn(tokenSource).when(provider).getTokenSource(any(), anyList());\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(provider)\n            .setAzureWorkspaceResourceId(WORKSPACE_RESOURCE_ID);\n\n    HeaderFactory header = provider.configure(config);\n\n    String token = header.headers().get(\"Authorization\");\n    assertEquals(token, TOKEN_TYPE + \" \" + TOKEN);\n\n    Mockito.verify(provider, times(1)).tokenSourceFor(any(), eq(ARM_DATABRICKS_RESOURCE_ID));\n  }\n\n  @Test\n  void testGetTokenWithoutWorkspaceResourceID() {\n    AzureCliCredentialsProvider provider = getAzureCliCredentialsProvider(mockTokenSource());\n    DatabricksConfig config =\n        new DatabricksConfig().setHost(\".azuredatabricks.net\").setCredentialsProvider(provider);\n\n    ArgumentCaptor<List<String>> argument = ArgumentCaptor.forClass(List.class);\n\n    HeaderFactory header = provider.configure(config);\n\n    String token = header.headers().get(\"Authorization\");\n    assertEquals(token, TOKEN_TYPE + \" \" + TOKEN);\n    Mockito.verify(provider, times(2)).getTokenSource(any(), argument.capture());\n\n    List<String> value = argument.getValue();\n    assertFalse(value.contains(\"--subscription\"));\n    assertFalse(value.contains(SUBSCRIPTION));\n  }\n}\n"
