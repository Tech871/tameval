[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "taosdata/taos-connector-jdbc"
sha = "180ba59e0aa7793a85db8d1cc332722f324b0b9d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=UtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Utils  -DtargetTests=**.UtilsTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 54.0
mutation_kill_rate = nan
original_mutation_kill_rate = 52.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/taosdata/jdbc/utils/UtilsTest.java"
focal_file_path = "src/main/java/com/taosdata/jdbc/utils/Utils.java"
test_file_url = "https://github.com/taosdata/taos-connector-jdbc/blob/180ba59e0aa7793a85db8d1cc332722f324b0b9d/src/test/java/com/taosdata/jdbc/utils/UtilsTest.java"
focal_file_url = "https://github.com/taosdata/taos-connector-jdbc/blob/180ba59e0aa7793a85db8d1cc332722f324b0b9d/src/main/java/com/taosdata/jdbc/utils/Utils.java"
first_commit_date = "2021-04-30"
last_commit_date = "2025-07-26"
test_file_content = "package com.taosdata.jdbc.utils;\n\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport com.taosdata.jdbc.TSDBConstants;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.math.BigInteger;\nimport java.sql.SQLException;\nimport java.util.stream.Stream;\n\npublic class UtilsTest {\n\n    @Test\n    public void escapeSingleQuota() {\n        // given\n        String s = \"'''''a\\\\'\";\n        // when\n        String news = Utils.escapeSingleQuota(s);\n        // then\n        Assert.assertEquals(\"\\\\'\\\\'\\\\'\\\\'\\\\'a\\\\'\", news);\n\n        // given\n        s = \"'''''a\\\\'\";\n        // when\n        news = Utils.escapeSingleQuota(s);\n        // then\n        Assert.assertEquals(\"\\\\'\\\\'\\\\'\\\\'\\\\'a\\\\'\", news);\n\n        // given\n        s = \"'''''a\\\\'\";\n        // when\n        news = Utils.escapeSingleQuota(s);\n        // then\n        Assert.assertEquals(\"\\\\'\\\\'\\\\'\\\\'\\\\'a\\\\'\", news);\n    }\n\n    @Test\n    public void lowerCase() {\n        // given\n        String nativeSql = \"insert into ?.? (ts, temperature, humidity) using ?.? tags(?,?) values(now, ?, ?)\";\n        Object[] parameters = Stream.of(\"test\", \"t1\", \"test\", \"weather\", \"beijing\", 1, 12.2, 4).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"insert into test.t1 (ts, temperature, humidity) using test.weather tags('beijing',1) values(now, 12.2, 4)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void upperCase() {\n        // given\n        String nativeSql = \"INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?)\";\n        Object[] parameters = Stream.of(\"d1\", 1, 123, 3.14, 220, 4).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (123,3.14,220,4)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void multiValues() {\n        // given\n        String nativeSql = \"INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?),(?,?,?,?)\";\n        Object[] parameters = Stream.of(\"d1\", 1, 100, 3.14, \"abc\", 4, 200, 3.1415, \"xyz\", 5).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4),(200,3.1415,'xyz',5)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void multiValuesAndWhitespace() {\n        // given\n        String nativeSql = \"INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?)  (?,?,?,?) (?,?,?,?)\";\n        Object[] parameters = Stream.of(\"d1\", 1, 100, 3.14, \"abc\", 4, 200, 3.1415, \"xyz\", 5, 300, 3.141592, \"uvw\", 6).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4)  (200,3.1415,'xyz',5) (300,3.141592,'uvw',6)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void multiValuesNoSeparator() {\n        // given\n        String nativeSql = \"INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?)(?,?,?,?)(?,?,?,?)\";\n        Object[] parameters = Stream.of(\"d1\", 1, 100, 3.14, \"abc\", 4, 200, 3.1415, \"xyz\", 5, 300, 3.141592, \"uvw\", 6).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4)(200,3.1415,'xyz',5)(300,3.141592,'uvw',6)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void multiValuesMultiSeparator() {\n        // given\n        String nativeSql = \"INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,?,?) (?,?,?,?), (?,?,?,?)\";\n        Object[] parameters = Stream.of(\"d1\", 1, 100, 3.14, \"abc\", 4, 200, 3.1415, \"xyz\", 5, 300, 3.141592, \"uvw\", 6).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,'abc',4) (200,3.1415,'xyz',5), (300,3.141592,'uvw',6)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void lineTerminator() {\n        // given\n        String nativeSql = \"INSERT INTO ? (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (?)  VALUES (?,?,\\r\\n?,?),(?,?,?,?)\";\n        Object[] parameters = Stream.of(\"d1\", 1, 100, 3.14, \"abc\", 4, 200, 3.1415, \"xyz\", 5).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO d1 (TS,CURRENT,VOLTAGE,PHASE) USING METERS TAGS (1)  VALUES (100,3.14,\\r\\n'abc',4),(200,3.1415,'xyz',5)\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void lineTerminatorAndMultiValues() {\n        String nativeSql = \"INSERT Into ? TAGS(?) VALUES(?,?,\\r\\n?,?),(?,? ,\\r\\n?,?) t? tags (?) Values (?,?,?\\r\\n,?),(?,?,?,?) t? Tags(?) values  (?,?,?,?) , (?,?,?,?)\";\n        Object[] parameters = Stream.of(\"t1\", \"abc\", 100, 1.1, \"xxx\", \"xxx\", 200, 2.2, \"xxx\", \"xxx\", 2, \"bcd\", 300, 3.3, \"xxx\", \"xxx\", 400, 4.4, \"xxx\", \"xxx\", 3, \"cde\", 500, 5.5, \"xxx\", \"xxx\", 600, 6.6, \"xxx\", \"xxx\").toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT Into t1 TAGS('abc') VALUES(100,1.1,\\r\\n'xxx','xxx'),(200,2.2 ,\\r\\n'xxx','xxx') t2 tags ('bcd') Values (300,3.3,'xxx'\\r\\n,'xxx'),(400,4.4,'xxx','xxx') t3 Tags('cde') values  (500,5.5,'xxx','xxx') , (600,6.6,'xxx','xxx')\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void lineTerminatorAndMultiValuesAndNoneOrMoreWhitespace() {\n        String nativeSql = \"INSERT Into ? TAGS(?) VALUES(?,?,\\r\\n?,?),(?,? ,\\r\\n?,?) t? tags (?) Values (?,?,?\\r\\n,?) (?,?,?,?) t? Tags(?) values  (?,?,?,?) , (?,?,?,?)\";\n        Object[] parameters = Stream.of(\"t1\", \"abc\", 100, 1.1, \"xxx\", \"xxx\", 200, 2.2, \"xxx\", \"xxx\", 2, \"bcd\", 300, 3.3, \"xxx\", \"xxx\", 400, 4.4, \"xxx\", \"xxx\", 3, \"cde\", 500, 5.5, \"xxx\", \"xxx\", 600, 6.6, \"xxx\", \"xxx\").toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT Into t1 TAGS('abc') VALUES(100,1.1,\\r\\n'xxx','xxx'),(200,2.2 ,\\r\\n'xxx','xxx') t2 tags ('bcd') Values (300,3.3,'xxx'\\r\\n,'xxx') (400,4.4,'xxx','xxx') t3 Tags('cde') values  (500,5.5,'xxx','xxx') , (600,6.6,'xxx','xxx')\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void multiValuesAndNoneOrMoreWhitespace() {\n        String nativeSql = \"INSERT INTO ? USING traces TAGS (?, ?) VALUES (?, ?, ?, ?, ?, ?, ?)  (?, ?, ?, ?, ?, ?, ?)\";\n        Object[] parameters = Stream.of(\"t1\", \"t1\", \"t2\", 1632968284000L, 111.111, 119.001, 0.4, 90, 99.1, \"WGS84\", 1632968285000L, 111.21109999999999, 120.001, 0.5, 91, 99.19999999999999, \"WGS84\").toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        String expected = \"INSERT INTO t1 USING traces TAGS ('t1', 't2') VALUES (1632968284000, 111.111, 119.001, 0.4, 90, 99.1, 'WGS84')  (1632968285000, 111.21109999999999, 120.001, 0.5, 91, 99.19999999999999, 'WGS84')\";\n        Assert.assertEquals(expected, actual);\n    }\n\n    @Test\n    public void replaceNothing() {\n        // given\n        String nativeSql = \"insert into test.t1 (ts, temperature, humidity) using test.weather tags('beijing',1) values(now, 12.2, 4)\";\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, null);\n\n        // then\n        Assert.assertEquals(nativeSql, actual);\n    }\n\n    @Test\n    public void replaceNothing2() {\n        // given\n        String nativeSql = \"insert into test.t1 (ts, temperature, humidity) using test.weather tags('beijing',1) values(now, 12.2, 4)\";\n        Object[] parameters = Stream.of(\"test\", \"t1\", \"test\", \"weather\", \"beijing\", 1, 12.2, 4).toArray();\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, parameters);\n\n        // then\n        Assert.assertEquals(nativeSql, actual);\n    }\n\n    @Test\n    public void replaceNothing3() {\n        // given\n        String nativeSql = \"insert into ?.? (ts, temperature, humidity) using ?.? tags(?,?) values(now, ?, ?)\";\n\n        // when\n        String actual = Utils.getNativeSql(nativeSql, null);\n\n        // then\n        Assert.assertEquals(nativeSql, actual);\n\n    }\n\n    @Test\n    public void ubigintTest() {\n        BigInteger bigInteger = new BigInteger(TSDBConstants.MAX_UNSIGNED_LONG);\n        long v = bigInteger.longValue();\n        short b = (short)(v & 0xFF);\n        Assert.assertEquals(255, b);\n    }\n\n    @Test\n    public void testCompareVersions() throws SQLException {\n        // Major version comparison\n        Assert.assertEquals(1, Utils.compareVersions(\"4.0.0\", \"3.0.0\"));\n        Assert.assertEquals(-1, Utils.compareVersions(\"2.0.0\", \"3.0.0\"));\n\n        // Minor version comparison\n        Assert.assertEquals(1, Utils.compareVersions(\"3.1.0\", \"3.0.0\"));\n        Assert.assertEquals(-1, Utils.compareVersions(\"3.0.0\", \"3.1.0\"));\n\n        // Patch version comparison\n        Assert.assertEquals(1, Utils.compareVersions(\"3.0.1\", \"3.0.0\"));\n        Assert.assertEquals(-1, Utils.compareVersions(\"3.0.0\", \"3.0.1\"));\n\n        // Build number comparison\n        Assert.assertEquals(1, Utils.compareVersions(\"3.0.0.1\", \"3.0.0.0\"));\n        Assert.assertEquals(-1, Utils.compareVersions(\"3.0.0.0\", \"3.0.0.1\"));\n\n        // Pre-release version comparison\n        Assert.assertEquals(1, Utils.compareVersions(\"3.0.0\", \"3.0.0-alpha\"));\n        Assert.assertEquals(-1, Utils.compareVersions(\"3.0.0-alpha\", \"3.0.0\"));\n        Assert.assertEquals(1, Utils.compareVersions(\"3.0.0-beta\", \"3.0.0-alpha\"));\n        Assert.assertEquals(-1, Utils.compareVersions(\"3.0.0-alpha\", \"3.0.0-beta\"));\n\n        // Different version length comparison\n        Assert.assertTrue( Utils.compareVersions(\"3.3.6.0.0613\", \"3.3.6.0\") > 0);\n        Assert.assertTrue(Utils.compareVersions(\"3.3.6.0\", \"3.3.6.0.0613\") < 0);\n\n        // Equal versions comparison\n        Assert.assertEquals(0, Utils.compareVersions(\"3.3.6.0\", \"3.3.6.0\"));\n        Assert.assertEquals(0, Utils.compareVersions(\"3.3.6.0.0613\", \"3.3.6.0.0613\"));\n        Assert.assertEquals(0, Utils.compareVersions(\"3.3.6.5-alpha\", \"3.3.6.5-alpha\"));\n    }\n}"
