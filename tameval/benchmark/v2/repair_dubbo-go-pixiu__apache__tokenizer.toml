[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "apache/dubbo-go-pixiu"
sha = "1f7c7364d47baa7567b762843e6ee39020be179e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/filter/llm/tokenizer/tokenizer.go pkg/filter/llm/tokenizer/tokenizer_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/filter/llm/tokenizer/tokenizer.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 54.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/filter/llm/tokenizer/tokenizer_test.go"
focal_file_path = "pkg/filter/llm/tokenizer/tokenizer.go"
test_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/filter/llm/tokenizer/tokenizer_test.go"
focal_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/filter/llm/tokenizer/tokenizer.go"
first_commit_date = "2025-05-27"
last_commit_date = "2025-07-29"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n\n * the License.  You may obtain a copy of the License at\n *\n *     http:\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage tokenizer\n\nimport (\n\t\"bytes\"\n\t\"compress/flate\"\n\t\"compress/gzip\"\n\t\"io\"\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n)\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n)\n\nimport (\n\t\"github.com/apache/dubbo-go-pixiu/pkg/client\"\n\t\"github.com/apache/dubbo-go-pixiu/pkg/common/constant\"\n\t\"github.com/apache/dubbo-go-pixiu/pkg/context/mock\"\n)\nfunc TestUnaryResponseWithEncodings(t *testing.T) {\n\tconst payload = `{\n       \"usage\": {\n          \"prompt_tokens\": 7\n       }\n    }`\n\tcompressGzipBytes := func(data string) []byte {\n\t\tvar buf bytes.Buffer\n\t\twriter := gzip.NewWriter(&buf)\n\t\t_, err := writer.Write([]byte(data))\n\t\terr = writer.Close()\n\t\treturn buf.Bytes()\n\t}\n\tcompressFlateBytes := func(data string) []byte {\n\t\tvar buf bytes.Buffer\n\t\twriter, err := flate.NewWriter(&buf, -1)\n\t\t_, err = writer.Write([]byte(data))\n\t\terr = writer.Close()\n\t\treturn buf.Bytes()\n\t}\n\ttestCases := []struct {\n\t\tname     string\n\t\tencoding string\n\t\tgetData  func(string) []byte\n\t}{\n\t\t{\n\t\t\tname:     \"No Encoding\",\n\t\t\tencoding: \"\",\n\t\t\tgetData: func(s string) []byte {\n\t\t\t\treturn []byte(s)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:     \"Gzip Encoding\",\n\t\t\tencoding: \"gzip\",\n\t\t\tgetData:  compressGzipBytes,\n\t\t},\n\t\t{\n\t\t\tname:     \"Flate Encoding\",\n\t\t\tencoding: \"deflate\",\n\t\t\tgetData:  compressFlateBytes,\n\t\t},\n\t}\n\tfor _, tc := range testCases {\n\t}\n}\nfunc TestStreamResponseWithEncodings(t *testing.T) {\n\tconst payload = `data: {\n       \"usage\": {\n          \"prompt_tokens\": 7\n       }\n    }`\n\tcompressGzip := func(data string) io.Reader {\n\t\tvar buf bytes.Buffer\n\t\twriter := gzip.NewWriter(&buf)\n\t\t_, err := writer.Write([]byte(data))\n\t\terr = writer.Close()\n\t\treturn &buf\n\t}\n\n\tcompressFlate := func(data string) io.Reader {\n\t\tvar buf bytes.Buffer\n\t\twriter, _ := flate.NewWriter(&buf, -1)\n\t\t_, err := writer.Write([]byte(data))\n\t\terr = writer.Close()\n\t\treturn &buf\n\t}\n\ttestCases := []struct {\n\t\tname      string\n\t\tencoding  string\n\t\tgetStream func(string) io.Reader\n\t}{\n\t\t{\n\t\t\tname:     \"No Encoding\",\n\t\t\tencoding: \"\",\n\t\t\tgetStream: func(s string) io.Reader {\n\t\t\t\treturn strings.NewReader(s)\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:      \"Gzip Encoding\",\n\t\t\tencoding:  \"gzip\",\n\t\t\tgetStream: compressGzip,\n\t\t},\n\t\t{\n\t\t\tname:      \"Flate Encoding\",\n\t\t\tencoding:  \"deflate\",\n\t\t\tgetStream: compressFlate,\n\t\t},\n\t}\n\tfor _, tc := range testCases {\n\t}\n}"
