[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "datolabs-io/opsy"
sha = "34d0c4dd506970419e9238a3343710100422dd33"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/tui/tui.go internal/tui/tui_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/tui/tui.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 90.0
mutation_kill_rate = nan
original_mutation_kill_rate = 36.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/tui/tui_test.go"
focal_file_path = "internal/tui/tui.go"
test_file_url = "https://github.com/datolabs-io/opsy/blob/34d0c4dd506970419e9238a3343710100422dd33/internal/tui/tui_test.go"
focal_file_url = "https://github.com/datolabs-io/opsy/blob/34d0c4dd506970419e9238a3343710100422dd33/internal/tui/tui.go"
first_commit_date = "2025-02-19"
last_commit_date = "2025-03-01"
test_file_content = "package tui\n\nimport (\n\t\"testing\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n\t\"github.com/datolabs-io/sredo/internal/config\"\n\t\"github.com/datolabs-io/sredo/internal/thememanager\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\n// TestNew tests the creation of a new TUI model with various options.\nfunc TestNew(t *testing.T) {\n\tt.Run(\"default configuration\", func(t *testing.T) {\n\t\tm := New()\n\t\trequire.NotNil(t, m)\n\t\tassert.NotNil(t, m.theme)\n\t\tassert.NotNil(t, m.header)\n\t\tassert.NotNil(t, m.footer)\n\t\tassert.NotNil(t, m.messagesPane)\n\t\tassert.NotNil(t, m.commandsPane)\n\t})\n\n\tt.Run(\"with custom options\", func(t *testing.T) {\n\t\tcfg := config.Configuration{\n\t\t\tAnthropic: config.AnthropicConfiguration{\n\t\t\t\tModel:       \"test-model\",\n\t\t\t\tMaxTokens:   1000,\n\t\t\t\tTemperature: 0.7,\n\t\t\t},\n\t\t}\n\t\ttheme := &thememanager.Theme{\n\t\t\tBaseColors:   thememanager.BaseColors{},\n\t\t\tAccentColors: thememanager.AccentColors{},\n\t\t}\n\t\ttask := \"test task\"\n\t\ttoolsCount := 5\n\n\t\tm := New(\n\t\t\tWithConfig(cfg),\n\t\t\tWithTheme(theme),\n\t\t\tWithTask(task),\n\t\t\tWithToolsCount(toolsCount),\n\t\t)\n\n\t\trequire.NotNil(t, m)\n\t\tassert.Equal(t, cfg, m.config)\n\t\tassert.Equal(t, theme, m.theme)\n\t\tassert.Equal(t, task, m.task)\n\t\tassert.Equal(t, toolsCount, m.toolsCount)\n\t})\n}\n\n// TestModel_Init tests the initialization of the TUI model.\nfunc TestModel_Init(t *testing.T) {\n\tm := New()\n\tcmd := m.Init()\n\trequire.NotNil(t, cmd)\n}\n\n// TestModel_Update tests the update function of the TUI model.\nfunc TestModel_Update(t *testing.T) {\n\tt.Run(\"quit on ctrl+c\", func(t *testing.T) {\n\t\tm := New()\n\t\tmodel, cmd := m.Update(tea.KeyMsg{Type: tea.KeyCtrlC})\n\t\tassert.NotNil(t, model)\n\t\tassert.NotNil(t, cmd)\n\t})\n\n\tt.Run(\"handle window size message\", func(t *testing.T) {\n\t\tm := New()\n\t\tupdatedModel, _ := m.Update(tea.WindowSizeMsg{\n\t\t\tWidth:  100,\n\t\t\tHeight: 50,\n\t\t})\n\t\tassert.NotNil(t, updatedModel)\n\n\t\t// Verify that the message was processed by checking if components exist\n\t\ttuiModel, ok := updatedModel.(*model)\n\t\tassert.True(t, ok, \"expected model to be of type *model\")\n\t\tassert.NotNil(t, tuiModel.header)\n\t\tassert.NotNil(t, tuiModel.footer)\n\t\tassert.NotNil(t, tuiModel.messagesPane)\n\t\tassert.NotNil(t, tuiModel.commandsPane)\n\t})\n}\n\n// TestModel_View tests the view rendering of the TUI model.\nfunc TestModel_View(t *testing.T) {\n\tm := New()\n\tview := m.View()\n\tassert.NotEmpty(t, view)\n}"
