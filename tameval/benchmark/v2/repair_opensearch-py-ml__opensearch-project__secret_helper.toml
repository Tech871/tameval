[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_version = "3.10"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "opensearch-project/opensearch-py-ml"
sha = "899cb82c8a383925501258dd30098bfa612e8af5"

[run_info]
docker_image = "python:3.10"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-dev.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=opensearch_py_ml/ml_commons/cli/secret_helper.py -m pytest -q --junit-xml=test_output.xml tests/cli/test_secret_helper.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target opensearch_py_ml.ml_commons.cli.secret_helper --unit-test tests.cli.test_secret_helper --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target opensearch_py_ml/ml_commons/cli/secret_helper.py --unit-test tests/cli/test_secret_helper.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 7, 8, 9, 11, 12, 14, 15, 20, 23, 29, 38, 39, 42, 50, 60, 62, 63, 64, 66, 67, 70, 71, 73, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 109, 111, 115, 121, 122, 125, 127, 129, 130, 131, 132, 134, 138, 140, 155, 157, 162, 163, 164, 166, 167,]
missed_lines = []

[input_info]
test_file_path = "tests/cli/test_secret_helper.py"
focal_file_path = "opensearch_py_ml/ml_commons/cli/secret_helper.py"
test_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/tests/cli/test_secret_helper.py"
focal_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/opensearch_py_ml/ml_commons/cli/secret_helper.py"
first_commit_date = "2025-04-25"
last_commit_date = "2025-04-25"
test_file_content = "\n\n\nimport json\nimport logging\nimport sys\nimport unittest\nfrom io import StringIO\nfrom unittest.mock import MagicMock, patch\n\nfrom botocore.exceptions import ClientError\n\nfrom opensearch_py_ml.ml_commons.cli.aws_config import AWSConfig\nfrom opensearch_py_ml.ml_commons.cli.opensearch_domain_config import (\n    OpenSearchDomainConfig,\n)\nfrom opensearch_py_ml.ml_commons.cli.secret_helper import SecretHelper\n\n\nclass TestSecretHelper(unittest.TestCase):\n    def setUp(self):\n        self.opensearch_config = OpenSearchDomainConfig(\n            opensearch_domain_region=\"us-east-1\",\n            opensearch_domain_name=\"test-domain\",\n            opensearch_domain_username=\"admin\",\n            opensearch_domain_password=\"password\",\n            opensearch_domain_endpoint=\"test-domain-url\",\n        )\n        self.aws_config = AWSConfig(\n            aws_user_name=\"\",\n            aws_role_name=\"\",\n            aws_access_key=\"test-access-key\",\n            aws_secret_access_key=\"test-secret-access-key\",\n            aws_session_token=\"test-session-token\",\n        )\n\n    @classmethod\n    def setUpClass(cls):\n        logging.basicConfig(level=logging.ERROR)\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_create_secret_error_logging(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        error_response = {\n            \"Error\": {\n                \"Code\": \"InternalServiceError\",\n                \"Message\": \"An unspecified error occurred\",\n            }\n        }\n        mock_secretsmanager.create_secret.side_effect = ClientError(\n            error_response, \"CreateSecret\"\n        )\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n        with self.assertLogs(\n            \"opensearch_py_ml.ml_commons.cli.secret_helper\", level=\"ERROR\"\n        ) as cm:\n            result = secret_helper.create_secret(\"new-secret\", {\"key\": \"value\"})\n            self.assertIsNone(result)\n        self.assertIn(\"Error creating secret 'new-secret'\", cm.output[0])\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_create_secret_successful(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        mock_secretsmanager.create_secret.return_value = {\n            \"ARN\": \"arn:aws:secretsmanager:us-east-1:123456789012:secret:new-secret\"\n        }\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        result = secret_helper.create_secret(\"new-secret\", {\"key\": \"value\"})\n        self.assertEqual(\n            result, \"arn:aws:secretsmanager:us-east-1:123456789012:secret:new-secret\"\n        )\n        mock_secretsmanager.create_secret.assert_called_with(\n            Name=\"new-secret\", SecretString=json.dumps({\"key\": \"value\"})\n        )\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_check_secret_existence_true(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n        mock_secretsmanager.get_secret_value.return_value = {\n            \"SecretString\": \"some-value\"\n        }\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        exists = secret_helper.secret_exists(\"my-existing-secret\")\n        self.assertTrue(exists)\n        mock_secretsmanager.get_secret_value.assert_called_with(\n            SecretId=\"my-existing-secret\"\n        )\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_check_secret_existence_false(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        error_response = {\n            \"Error\": {\n                \"Code\": \"ResourceNotFoundException\",\n                \"Message\": \"Secret not found\",\n            }\n        }\n        mock_secretsmanager.get_secret_value.side_effect = ClientError(\n            error_response, \"GetSecretValue\"\n        )\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        exists = secret_helper.secret_exists(\"nonexistent-secret\")\n        self.assertFalse(exists)\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_secret_exists_other_error(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        error_response = {\n            \"Error\": {\n                \"Code\": \"InternalServiceError\",\n                \"Message\": \"An unspecified error occurred\",\n            }\n        }\n        mock_secretsmanager.get_secret_value.side_effect = ClientError(\n            error_response, \"GetSecretValue\"\n        )\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        exists = secret_helper.secret_exists(\"problem-secret\")\n        self.assertFalse(exists)\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_get_secret_arn_success(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        mock_secretsmanager.describe_secret.return_value = {\n            \"ARN\": \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret\"\n        }\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        arn = secret_helper.get_secret_arn(\"my-secret\")\n        self.assertEqual(\n            arn, \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret\"\n        )\n        mock_secretsmanager.describe_secret.assert_called_with(SecretId=\"my-secret\")\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_retrieve_secret_arn_not_found(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        mock_secretsmanager.exceptions.ResourceNotFoundException = ClientError\n        mock_secretsmanager.describe_secret.side_effect = ClientError(\n            {\n                \"Error\": {\n                    \"Code\": \"ResourceNotFoundException\",\n                    \"Message\": \"Secret not found\",\n                }\n            },\n            \"DescribeSecret\",\n        )\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        arn = secret_helper.get_secret_arn(\"non-existent-secret\")\n        self.assertIsNone(arn)\n        mock_secretsmanager.describe_secret.assert_called_with(\n            SecretId=\"non-existent-secret\"\n        )\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.logger\")\n    def test_get_secret_arn_exception(self, mock_logger, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        mock_secretsmanager.exceptions.ResourceNotFoundException = type(\n            \"ResourceNotFoundException\", (ClientError,), {}\n        )\n        mock_secretsmanager.describe_secret.side_effect = Exception(\"Test error\")\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        captured_output = StringIO()\n        sys.stdout = captured_output\n        arn = secret_helper.get_secret_arn(None)\n        self.assertIsNone(arn)\n        mock_logger.error.assert_called_once_with(\"An error occurred: Test error\")\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_get_secret_details_arn_only_success(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        mock_secretsmanager.describe_secret.return_value = {\n            \"ARN\": \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret\"\n        }\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        details = secret_helper.get_secret_details(\"my-secret\", fetch_value=False)\n        self.assertIn(\"ARN\", details)\n        self.assertEqual(\n            details[\"ARN\"],\n            \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret\",\n        )\n        self.assertNotIn(\"SecretValue\", details)\n        mock_secretsmanager.describe_secret.assert_called_with(SecretId=\"my-secret\")\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_fetch_secret_details_with_value_success(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        mock_secretsmanager.describe_secret.return_value = {\n            \"ARN\": \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret\"\n        }\n        mock_secretsmanager.get_secret_value.return_value = {\n            \"SecretString\": \"my-secret-value\"\n        }\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        details = secret_helper.get_secret_details(\"my-secret\", fetch_value=True)\n        self.assertIn(\"ARN\", details)\n        self.assertIn(\"SecretValue\", details)\n        self.assertEqual(details[\"SecretValue\"], \"my-secret-value\")\n        mock_secretsmanager.describe_secret.assert_called_with(SecretId=\"my-secret\")\n        mock_secretsmanager.get_secret_value.assert_called_with(SecretId=\"my-secret\")\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    def test_get_secret_details_not_found(self, mock_boto_client):\n        mock_secretsmanager = MagicMock()\n        mock_boto_client.return_value = mock_secretsmanager\n\n        error_response = {\n            \"Error\": {\n                \"Code\": \"ResourceNotFoundException\",\n                \"Message\": \"Secret not found\",\n            }\n        }\n        mock_secretsmanager.describe_secret.side_effect = ClientError(\n            error_response, \"DescribeSecret\"\n        )\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n\n        mock_boto_client.assert_called_once_with(\n            \"secretsmanager\",\n            region_name=self.opensearch_config.opensearch_domain_region,\n            aws_access_key_id=self.aws_config.aws_access_key,\n            aws_secret_access_key=self.aws_config.aws_secret_access_key,\n            aws_session_token=self.aws_config.aws_session_token,\n        )\n\n        details = secret_helper.get_secret_details(\n            \"nonexistent-secret\", fetch_value=True\n        )\n        self.assertIn(\"error\", details)\n        self.assertEqual(details[\"error_code\"], \"ResourceNotFoundException\")\n        mock_secretsmanager.describe_secret.assert_called_with(\n            SecretId=\"nonexistent-secret\"\n        )\n\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.boto3.client\")\n    @patch(\"opensearch_py_ml.ml_commons.cli.secret_helper.logger\")\n    def test_get_secret_details_client_error(self, mock_logger, mock_boto_client):\n        mock_secrets_client = MagicMock()\n        mock_boto_client.return_value = mock_secrets_client\n\n        error_response = {\n            \"Error\": {\"Code\": \"InvalidRequestException\", \"Message\": \"Invalid request\"}\n        }\n        mock_secrets_client.describe_secret.side_effect = ClientError(\n            error_response, \"DescribeSecret\"\n        )\n\n        secret_helper = SecretHelper(\n            opensearch_config=self.opensearch_config,\n            aws_config=self.aws_config,\n        )\n        secret_name = \"test-secret\"\n        result = secret_helper.get_secret_details(secret_name)\n\n        self.assertEqual(\n            result,\n            {\n                \"error\": \"An error occurred (InvalidRequestException) when calling the DescribeSecret operation: Invalid request\",\n                \"error_code\": \"InvalidRequestException\",\n            },\n        )\n        mock_logger.error.assert_called_once_with(\n            f\"An error occurred while fetching secret '{secret_name}': An error occurred (InvalidRequestException) when calling the DescribeSecret operation: Invalid request\"\n        )\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
