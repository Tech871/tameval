[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "mathLab/PINA"
sha = "03ef90c358d3f5802db96b0092d5c874bd7c0636"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pina/collector.py -m pytest -q --junit-xml=test_output.xml tests/test_collector.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pina.collector --unit-test tests.test_collector --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pina/collector.py --unit-test tests/test_collector.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 40.0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 2, 3, 6, 12, 34, 35, 47, 48, 58, 59, 69, 70, 79, 80, 90, 114,]
missed_lines = [ 22, 25, 26, 29, 32, 45, 55, 56, 67, 77, 88, 97, 100, 104, 105, 106, 110, 112, 122, 123, 124, 125, 127, 129,]

[input_info]
test_file_path = "tests/test_collector.py"
focal_file_path = "pina/collector.py"
test_file_url = "https://github.com/mathLab/PINA/blob/03ef90c358d3f5802db96b0092d5c874bd7c0636/tests/test_collector.py"
focal_file_url = "https://github.com/mathLab/PINA/blob/03ef90c358d3f5802db96b0092d5c874bd7c0636/pina/collector.py"
first_commit_date = "2025-03-19"
last_commit_date = "2025-03-19"
test_file_content = "import torch\nimport pytest\nfrom pina import Condition, LabelTensor, Graph\nfrom pina.condition import InputOutputPointsCondition, DomainEquationCondition\nfrom pina.graph import RadiusGraph\nfrom pina.problem import AbstractProblem, SpatialProblem\nfrom pina.domain import CartesianDomain\nfrom pina.equation.equation import Equation\nfrom pina.equation.equation_factory import FixedValue\nfrom pina.operator import laplacian\nfrom pina.collector import Collector\n\n\ndef test_supervised_tensor_collector():\n    class SupervisedProblem(AbstractProblem):\n        output_variables = None\n        conditions = {\n            'data1': Condition(input_points=torch.rand((10, 2)),\n                               output_points=torch.rand((10, 2))),\n            'data2': Condition(input_points=torch.rand((20, 2)),\n                               output_points=torch.rand((20, 2))),\n            'data3': Condition(input_points=torch.rand((30, 2)),\n                               output_points=torch.rand((30, 2))),\n        }\n\n    problem = SupervisedProblem()\n    collector = Collector(problem)\n    for v in collector.conditions_name.values():\n        assert v in problem.conditions.keys()\n\n\ndef test_pinn_collector():\n    def laplace_equation(input_, output_):\n        force_term = (torch.sin(input_.extract(['x']) * torch.pi) *\n                      torch.sin(input_.extract(['y']) * torch.pi))\n        delta_u = laplacian(output_.extract(['u']), input_)\n        return delta_u - force_term\n\n    my_laplace = Equation(laplace_equation)\n    in_ = LabelTensor(torch.tensor([[0., 1.]], requires_grad=True), ['x', 'y'])\n    out_ = LabelTensor(torch.tensor([[0.]], requires_grad=True), ['u'])\n\n    class Poisson(SpatialProblem):\n        output_variables = ['u']\n        spatial_domain = CartesianDomain({'x': [0, 1], 'y': [0, 1]})\n\n        conditions = {\n            'gamma1':\n                Condition(domain=CartesianDomain({\n                    'x': [0, 1],\n                    'y': 1\n                }),\n                    equation=FixedValue(0.0)),\n            'gamma2':\n                Condition(domain=CartesianDomain({\n                    'x': [0, 1],\n                    'y': 0\n                }),\n                    equation=FixedValue(0.0)),\n            'gamma3':\n                Condition(domain=CartesianDomain({\n                    'x': 1,\n                    'y': [0, 1]\n                }),\n                    equation=FixedValue(0.0)),\n            'gamma4':\n                Condition(domain=CartesianDomain({\n                    'x': 0,\n                    'y': [0, 1]\n                }),\n                    equation=FixedValue(0.0)),\n            'D':\n                Condition(domain=CartesianDomain({\n                    'x': [0, 1],\n                    'y': [0, 1]\n                }),\n                    equation=my_laplace),\n            'data':\n                Condition(input_points=in_, output_points=out_)\n        }\n\n        def poisson_sol(self, pts):\n            return -(torch.sin(pts.extract(['x']) * torch.pi) *\n                     torch.sin(pts.extract(['y']) * torch.pi)) / (\n                    2 * torch.pi ** 2)\n\n        truth_solution = poisson_sol\n\n    problem = Poisson()\n    boundaries = ['gamma1', 'gamma2', 'gamma3', 'gamma4']\n    problem.discretise_domain(10, 'grid', domains=boundaries)\n    problem.discretise_domain(10, 'grid', domains='D')\n\n    collector = Collector(problem)\n    collector.store_fixed_data()\n    collector.store_sample_domains()\n\n    for k, v in problem.conditions.items():\n        if isinstance(v, InputOutputPointsCondition):\n            assert list(collector.data_collections[k].keys()) == [\n                'input_points', 'output_points']\n\n    for k, v in problem.conditions.items():\n        if isinstance(v, DomainEquationCondition):\n            assert list(collector.data_collections[k].keys()) == [\n                'input_points', 'equation']\n\n\ndef test_supervised_graph_collector():\n    pos = torch.rand((100, 3))\n    x = [torch.rand((100, 3)) for _ in range(10)]\n    graph_list_1 = RadiusGraph(pos=pos, x=x, build_edge_attr=True, r=.4)\n    out_1 = torch.rand((10, 100, 3))\n    pos = torch.rand((50, 3))\n    x = [torch.rand((50, 3)) for _ in range(10)]\n    graph_list_2 = RadiusGraph(pos=pos, x=x, build_edge_attr=True, r=.4)\n    out_2 = torch.rand((10, 50, 3))\n\n    class SupervisedProblem(AbstractProblem):\n        output_variables = None\n        conditions = {\n            'data1': Condition(input_points=graph_list_1,\n                               output_points=out_1),\n            'data2': Condition(input_points=graph_list_2,\n                               output_points=out_2),\n        }\n\n    problem = SupervisedProblem()\n    collector = Collector(problem)\n    collector.store_fixed_data()\n    # assert all(collector._is_conditions_ready.values())\n    for v in collector.conditions_name.values():\n        assert v in problem.conditions.keys()"
