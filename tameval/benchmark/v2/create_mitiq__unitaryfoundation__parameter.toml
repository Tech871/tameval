[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "unitaryfoundation/mitiq"
sha = "3d4516eb01e0c82220a829bbf570ac537143b5a5"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mitiq/zne/scaling/parameter.py -m pytest -q --junit-xml=test_output.xml mitiq/zne/scaling/tests/test_parameter.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mitiq.zne.scaling.parameter --unit-test mitiq.zne.scaling.tests.test_parameter --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mitiq/zne/scaling/parameter.py --unit-test mitiq/zne/scaling/tests/test_parameter.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 82.0
original_coverage = 100.0
mutation_kill_rate = 38.0
original_mutation_kill_rate = 95.0
covered_lines = [ 5, 6, 7, 9, 10, 24, 25, 28, 29, 32, 33, 35, 36, 37, 44, 45, 48, 65, 66, 67, 75, 109, 110, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 149, 150,]
missed_lines = [ 38, 70, 99, 100, 103, 104, 105, 106, 139,]

[input_info]
test_file_path = "mitiq/zne/scaling/tests/test_parameter.py"
focal_file_path = "mitiq/zne/scaling/parameter.py"
test_file_url = "https://github.com/unitaryfoundation/mitiq/blob/3d4516eb01e0c82220a829bbf570ac537143b5a5/mitiq/zne/scaling/tests/test_parameter.py"
focal_file_url = "https://github.com/unitaryfoundation/mitiq/blob/3d4516eb01e0c82220a829bbf570ac537143b5a5/mitiq/zne/scaling/parameter.py"
first_commit_date = "2020-09-09"
last_commit_date = "2025-06-07"
test_file_content = "# Copyright (C) Unitary Foundation\n#\n# This source code is licensed under the GPL license (v3) found in the\n# LICENSE file in the root directory of this source tree.\n\n\"\"\"Unit tests for parameter scaling.\"\"\"\n\nfrom copy import deepcopy\n\nimport numpy as np\nimport pytest\nfrom cirq import CSWAP, Circuit, LineQubit, ZPowGate, ops\n\nfrom mitiq.utils import _equal\nfrom mitiq.zne.scaling.parameter import (\n    CircuitMismatchException,\n    GateTypeException,\n    _generate_parameter_calibration_circuit,\n    _get_base_gate,\n    compute_parameter_variance,\n    scale_parameters,\n)\n\ndef test_non_identity_scale_2q():\n    \"\"\"Tests that when scale factor = 1, the circuit is the\n    same.\n    \"\"\"\n    qreg = LineQubit.range(2)\n    circ = Circuit([ops.CNOT.on(qreg[0], qreg[1])])\n    np.random.seed(42)\n    stretch = 2\n    base_noise = 0.001\n    noises = np.random.normal(\n        loc=0.0, scale=np.sqrt((stretch - 1) * base_noise), size=(1,)\n    )\n    np.random.seed(42)\n    scaled = scale_parameters(\n        circ, scale_factor=stretch, base_variance=base_noise, seed=42\n    )\n    result = []\n    for moment in scaled:\n        for op in moment.operations:\n            gate = deepcopy(op.gate)\n            param = gate.exponent\n            result.append(param * np.pi - np.pi)\n    assert np.all(np.isclose(result - noises, 0))\n\ndef test_generate_parameter_calibration_circuit_failure():\n    \"\"\"Tests that parameter calibration circuit generation fails because there\n    are too many qubits\"\"\"\n    n_qubits = 3\n    qubits = LineQubit.range(n_qubits)\n    depth = 10\n    # Should raise exception because too many qubits\n    with pytest.raises(CircuitMismatchException):\n        _generate_parameter_calibration_circuit(qubits, depth, ZPowGate)\n"
