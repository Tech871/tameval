[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "cicirello/Chips-n-Salsa"
sha = "0dc132865b107fc955f50f8659bca138cbfc43c5"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=IterativeSamplingTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.IterativeSampling  -DtargetTests=**.IterativeSamplingTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 65.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 61, 62, 63, 64, 79, 80, 81, 82, 105, 106, 125,]
missed_lines = [ 93, 94, 113, 115, 116, 120,]

[input_info]
test_file_path = "src/test/java/org/cicirello/search/ss/IterativeSamplingTests.java"
focal_file_path = "src/main/java/org/cicirello/search/ss/IterativeSampling.java"
test_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/test/java/org/cicirello/search/ss/IterativeSamplingTests.java"
focal_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/main/java/org/cicirello/search/ss/IterativeSampling.java"
first_commit_date = "2021-09-27"
last_commit_date = "2024-05-17"
test_file_content = "/*\n * Chips-n-Salsa: A library of parallel self-adaptive local search algorithms.\n * Copyright (C) 2002-2022 Vincent A. Cicirello\n *\n * This file is part of Chips-n-Salsa (https://chips-n-salsa.cicirello.org/).\n *\n * Chips-n-Salsa is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Chips-n-Salsa is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npackage org.cicirello.search.ss;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport org.cicirello.search.ProgressTracker;\nimport org.cicirello.search.SolutionCostPair;\nimport org.cicirello.search.operators.Initializer;\nimport org.cicirello.search.problems.IntegerCostOptimizationProblem;\nimport org.cicirello.search.problems.OptimizationProblem;\nimport org.cicirello.util.Copyable;\nimport org.junit.jupiter.api.*;\n\n/** JUnit tests for the IterativeSampling class. */\npublic class IterativeSamplingTests {\n\n\n\n  @Test\n  public void testStoppedByAnotherThread() {\n    TestProblem problem = new TestProblem();\n    TestInitializer init = new TestInitializer();\n    ProgressTracker<TestObject> tracker = new ProgressTracker<TestObject>();\n    IterativeSampling<TestObject> is = new IterativeSampling<TestObject>(problem, init, tracker);\n\n    tracker.stop();\n    SolutionCostPair<TestObject> solution = is.optimize();\n    assertNull(solution);\n    solution = is.optimize(1);\n    assertNull(solution);\n  }\n\n  @Test\n  public void testTrackerContainsBest() {\n    TestProblem problem = new TestProblem();\n    TestInitializer init = new TestInitializer();\n    ProgressTracker<TestObject> tracker = new ProgressTracker<TestObject>();\n    IterativeSampling<TestObject> is = new IterativeSampling<TestObject>(problem, init, tracker);\n\n    // replaced deprecated call to setFoundBest()\n    tracker.update(0, new TestObject(0), true);\n    SolutionCostPair<TestObject> solution = is.optimize();\n    assertNull(solution);\n    solution = is.optimize(1);\n    assertNull(solution);\n  }\n\n\n  @Test\n  public void testInt1() {\n    verifyOptimizeInt1(\n        \"constructor 1\",\n        new IterativeSampling<TestObject>(\n            new TestProblemInt(), new TestInitializer(), new ProgressTracker<TestObject>()));\n    verifyOptimizeInt1(\n        \"constructor 2\",\n        new IterativeSampling<TestObject>(new TestProblemInt(), new TestInitializer()));\n  }\n\n\n\n\n\n\n\n  @SuppressWarnings(value = \"unchecked\")\n  private void verifyOptimize1(String which, IterativeSampling<TestObject> is) {\n    ProgressTracker<TestObject> tracker = is.getProgressTracker();\n    OptimizationProblem<TestObject> problem = (OptimizationProblem<TestObject>) is.getProblem();\n    for (int i = 0; i < 50; i++) {\n      SolutionCostPair<TestObject> s = is.optimize();\n      String message = which + \"; i=\" + i;\n      double expected = 100 - (i / 2);\n      double expectedTracked = expected;\n      if (i % 2 == 1) expected += 1;\n      assertEquals(expected, s.getCostDouble(), 0.0, message + \"; sCost\");\n      assertEquals(expected, problem.cost(s.getSolution()), 0.0, message + \"; pCost\");\n      assertEquals(\n          expectedTracked, tracker.getSolutionCostPair().getCostDouble(), 0.0, message + \"; tCost\");\n      assertEquals(\n          expectedTracked,\n          problem.cost(tracker.getSolutionCostPair().getSolution()),\n          0.0,\n          message + \"; ptCost\");\n    }\n  }\n\n  @SuppressWarnings(value = \"unchecked\")\n  private void verifyOptimizeInt1(String which, IterativeSampling<TestObject> is) {\n    ProgressTracker<TestObject> tracker = is.getProgressTracker();\n    IntegerCostOptimizationProblem<TestObject> problem =\n        (IntegerCostOptimizationProblem<TestObject>) is.getProblem();\n    for (int i = 0; i < 50; i++) {\n      SolutionCostPair<TestObject> s = is.optimize();\n      String message = which + \"; i=\" + i;\n      int expected = 100 - (i / 2);\n      int expectedTracked = expected;\n      if (i % 2 == 1) expected += 1;\n      assertEquals(expected, s.getCost(), message + \"; sCost\");\n      assertEquals(expected, problem.cost(s.getSolution()), message + \"; pCost\");\n      assertEquals(expectedTracked, tracker.getSolutionCostPair().getCost(), message + \"; tCost\");\n      assertEquals(\n          expectedTracked,\n          problem.cost(tracker.getSolutionCostPair().getSolution()),\n          message + \"; ptCost\");\n    }\n  }\n\n  @SuppressWarnings(value = \"unchecked\")\n  private void verifyOptimizeN(String which, IterativeSampling<TestObject> is) {\n    ProgressTracker<TestObject> tracker = is.getProgressTracker();\n    OptimizationProblem<TestObject> problem = (OptimizationProblem<TestObject>) is.getProblem();\n    SolutionCostPair<TestObject> s = is.optimize(11);\n    String message = which + \"; samples=\" + 11;\n    double expected = 95;\n    double expectedTracked = expected;\n    assertEquals(expected, s.getCostDouble(), 0.0, message + \"; sCost\");\n    assertEquals(expected, problem.cost(s.getSolution()), 0.0, message + \"; pCost\");\n    assertEquals(\n        expectedTracked, tracker.getSolutionCostPair().getCostDouble(), 0.0, message + \"; tCost\");\n    assertEquals(\n        expectedTracked,\n        problem.cost(tracker.getSolutionCostPair().getSolution()),\n        0.0,\n        message + \"; ptCost\");\n    s = is.optimize(10);\n    message = which + \"; samples=\" + 21;\n    expected = 90;\n    expectedTracked = expected;\n    assertEquals(expected, s.getCostDouble(), 0.0, message + \"; sCost\");\n    assertEquals(expected, problem.cost(s.getSolution()), 0.0, message + \"; pCost\");\n    assertEquals(\n        expectedTracked, tracker.getSolutionCostPair().getCostDouble(), 0.0, message + \"; tCost\");\n    assertEquals(\n        expectedTracked,\n        problem.cost(tracker.getSolutionCostPair().getSolution()),\n        0.0,\n        message + \"; ptCost\");\n  }\n\n  @SuppressWarnings(value = \"unchecked\")\n  private void verifyOptimizeIntN(String which, IterativeSampling<TestObject> is) {\n    ProgressTracker<TestObject> tracker = is.getProgressTracker();\n    IntegerCostOptimizationProblem<TestObject> problem =\n        (IntegerCostOptimizationProblem<TestObject>) is.getProblem();\n    SolutionCostPair<TestObject> s = is.optimize(11);\n    String message = which + \"; samples=\" + 11;\n    int expected = 95;\n    int expectedTracked = expected;\n    assertEquals(expected, s.getCost(), message + \"; sCost\");\n    assertEquals(expected, problem.cost(s.getSolution()), message + \"; pCost\");\n    assertEquals(expectedTracked, tracker.getSolutionCostPair().getCost(), message + \"; tCost\");\n    assertEquals(\n        expectedTracked,\n        problem.cost(tracker.getSolutionCostPair().getSolution()),\n        message + \"; ptCost\");\n    s = is.optimize(10);\n    message = which + \"; samples=\" + 21;\n    expected = 90;\n    expectedTracked = expected;\n    assertEquals(expected, s.getCost(), message + \"; sCost\");\n    assertEquals(expected, problem.cost(s.getSolution()), message + \"; pCost\");\n    assertEquals(expectedTracked, tracker.getSolutionCostPair().getCost(), message + \"; tCost\");\n    assertEquals(\n        expectedTracked,\n        problem.cost(tracker.getSolutionCostPair().getSolution()),\n        message + \"; ptCost\");\n  }\n\n  @SuppressWarnings(value = \"unchecked\")\n  private void verifySplit(String which, IterativeSampling<TestObject> is) {\n    ProgressTracker<TestObject> tracker = is.getProgressTracker();\n    OptimizationProblem<TestObject> problem = (OptimizationProblem<TestObject>) is.getProblem();\n    SolutionCostPair<TestObject> s = is.optimize(18);\n    IterativeSampling<TestObject> isSplit = is.split();\n    assertTrue(isSplit.getProgressTracker() == tracker);\n    assertTrue(isSplit.getProblem() == problem);\n    s = isSplit.optimize(11);\n    String message = which + \"; samples=\" + 11;\n    double expected = 95;\n    double expectedTracked = 92;\n    assertEquals(expected, s.getCostDouble(), 0.0, message + \"; sCost\");\n    assertEquals(expected, problem.cost(s.getSolution()), 0.0, message + \"; pCost\");\n    assertEquals(\n        expectedTracked, tracker.getSolutionCostPair().getCostDouble(), 0.0, message + \"; tCost\");\n    assertEquals(\n        expectedTracked,\n        problem.cost(tracker.getSolutionCostPair().getSolution()),\n        0.0,\n        message + \"; ptCost\");\n    s = isSplit.optimize(10);\n    message = which + \"; samples=\" + 21;\n    expected = 90;\n    expectedTracked = expected;\n    assertEquals(expected, s.getCostDouble(), 0.0, message);\n    assertEquals(expected, problem.cost(s.getSolution()), 0.0, message);\n    assertEquals(expectedTracked, tracker.getSolutionCostPair().getCostDouble(), 0.0, message);\n    assertEquals(\n        expectedTracked, problem.cost(tracker.getSolutionCostPair().getSolution()), 0.0, message);\n  }\n\n  @SuppressWarnings(value = \"unchecked\")\n  private void verifySplitInt(String which, IterativeSampling<TestObject> is) {\n    ProgressTracker<TestObject> tracker = is.getProgressTracker();\n    IntegerCostOptimizationProblem<TestObject> problem =\n        (IntegerCostOptimizationProblem<TestObject>) is.getProblem();\n    SolutionCostPair<TestObject> s = is.optimize(18);\n    IterativeSampling<TestObject> isSplit = is.split();\n    assertTrue(isSplit.getProgressTracker() == tracker);\n    assertTrue(isSplit.getProblem() == problem);\n    s = isSplit.optimize(11);\n    String message = which + \"; samples=\" + 11;\n    int expected = 95;\n    int expectedTracked = 92;\n    assertEquals(expected, s.getCost(), message);\n    assertEquals(expected, problem.cost(s.getSolution()), message);\n    assertEquals(expectedTracked, tracker.getSolutionCostPair().getCost(), message);\n    assertEquals(\n        expectedTracked, problem.cost(tracker.getSolutionCostPair().getSolution()), message);\n    s = isSplit.optimize(10);\n    message = which + \"; samples=\" + 21;\n    expected = 90;\n    expectedTracked = expected;\n    assertEquals(expected, s.getCost(), message);\n    assertEquals(expected, problem.cost(s.getSolution()), message);\n    assertEquals(expectedTracked, tracker.getSolutionCostPair().getCost(), message);\n    assertEquals(\n        expectedTracked, problem.cost(tracker.getSolutionCostPair().getSolution()), message);\n  }\n\n  private static class TestInitializer implements Initializer<TestObject> {\n\n    private volatile int next;\n    private boolean decrease;\n\n    public TestInitializer() {\n      next = 100;\n      decrease = false;\n    }\n\n    public TestObject createCandidateSolution() {\n      TestObject x = new TestObject(next);\n      if (decrease) next -= 2;\n      else next++;\n      decrease = !decrease;\n      return x;\n    }\n\n    public TestInitializer split() {\n      return new TestInitializer();\n    }\n  }\n\n  private static class TestObject implements Copyable<TestObject> {\n    int cost;\n\n    TestObject(int cost) {\n      this.cost = cost;\n    }\n\n    public TestObject copy() {\n      return new TestObject(cost);\n    }\n  }\n\n  private static class TestProblem implements OptimizationProblem<TestObject> {\n    public double cost(TestObject candidate) {\n      return candidate.cost;\n    }\n\n    public double minCost() {\n      return -99999999;\n    }\n\n    public boolean isMinCost(double cost) {\n      return false;\n    }\n\n    public double value(TestObject candidate) {\n      return cost(candidate);\n    }\n  }\n\n  private static class TestProblemInt implements IntegerCostOptimizationProblem<TestObject> {\n    public int cost(TestObject candidate) {\n      return candidate.cost;\n    }\n\n    public int minCost() {\n      return -99999999;\n    }\n\n    public boolean isMinCost(int cost) {\n      return false;\n    }\n\n    public int value(TestObject candidate) {\n      return cost(candidate);\n    }\n  }\n\n  private static class TestProblemFindsMin extends TestProblem {\n    public double minCost() {\n      return 100;\n    }\n\n    public boolean isMinCost(double cost) {\n      return cost <= minCost();\n    }\n  }\n\n  private static class TestProblemFindsMinInt extends TestProblemInt {\n    public int minCost() {\n      return 100;\n    }\n\n    public boolean isMinCost(int cost) {\n      return cost <= minCost();\n    }\n  }\n}\n"
