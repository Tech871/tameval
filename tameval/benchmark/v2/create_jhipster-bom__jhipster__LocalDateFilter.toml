[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "jhipster/jhipster-bom"
sha = "7bdb0f60cf4739f065e4501400404b5f70b2ad9b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl jhipster-framework -Dtest=LocalDateFilterTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl jhipster-framework -DtargetClasses=**.LocalDateFilter  -DtargetTests=**.LocalDateFilterTest  -DoutputFormats=XML"
coverage_report_path = "jhipster-framework/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "jhipster-framework/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 85.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 38, 59, 60, 67, 68, 75, 76, 83, 84, 91, 92, 99, 100, 107, 108, 115, 116,]
missed_lines = [ 46, 47, 52,]

[input_info]
test_file_path = "jhipster-framework/src/test/java/tech/jhipster/service/filter/LocalDateFilterTest.java"
focal_file_path = "jhipster-framework/src/main/java/tech/jhipster/service/filter/LocalDateFilter.java"
test_file_url = "https://github.com/jhipster/jhipster-bom/blob/7bdb0f60cf4739f065e4501400404b5f70b2ad9b/jhipster-framework/src/test/java/tech/jhipster/service/filter/LocalDateFilterTest.java"
focal_file_url = "https://github.com/jhipster/jhipster-bom/blob/7bdb0f60cf4739f065e4501400404b5f70b2ad9b/jhipster-framework/src/main/java/tech/jhipster/service/filter/LocalDateFilter.java"
first_commit_date = "2020-10-28"
last_commit_date = "2024-12-31"
test_file_content = "/*\n * Copyright 2016-2025 the original author or authors from the JHipster project.\n *\n * This file is part of the JHipster project, see https://www.jhipster.tech/\n * for more information.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage tech.jhipster.service.filter;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.time.LocalDate;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass LocalDateFilterTest {\n\n    private LocalDateFilter filter;\n\n    private LocalDate value = LocalDate.now();\n\n    @BeforeEach\n    void setup() {\n        filter = new LocalDateFilter();\n    }\n\n\n\n\n    @Test\n    void testSetNotEquals() {\n        Filter<LocalDate> chain = filter.setNotEquals(value);\n        assertThat(chain).isEqualTo(filter);\n        assertThat(filter.getNotEquals()).isEqualTo(value);\n    }\n\n\n    @Test\n    void testSetIn() {\n        List<LocalDate> list = new LinkedList<>();\n        Filter<LocalDate> chain = filter.setIn(list);\n        assertThat(chain).isEqualTo(filter);\n        assertThat(filter.getIn()).isEqualTo(list);\n    }\n\n\n\n\n\n    @Test\n    void testSetLessThanOrEqual() {\n        Filter<LocalDate> chain = filter.setLessThanOrEqual(value);\n        assertThat(chain).isEqualTo(filter);\n        assertThat(filter.getLessThanOrEqual()).isEqualTo(value);\n    }\n\n\n\n    @Test\n    void testToString() {\n        filter.setEquals(value);\n        filter.setNotEquals(value);\n        filter.setSpecified(true);\n        filter.setIn(new LinkedList<>());\n        filter.setNotIn(new LinkedList<>());\n        filter.setGreaterThan(value);\n        filter.setLessThan(value);\n        filter.setGreaterThanOrEqual(value);\n        filter.setLessThanOrEqual(value);\n        String str = value.toString();\n        assertThat(filter.toString()).isEqualTo(\n            \"LocalDateFilter [equals=\" +\n            str +\n            \", notEquals=\" +\n            str +\n            \", specified=true, in=[], notIn=[], greaterThan=\" +\n            str +\n            \", lessThan=\" +\n            str +\n            \", greaterThanOrEqual=\" +\n            str +\n            \", lessThanOrEqual=\" +\n            str +\n            \"]\"\n        );\n    }\n}\n"
