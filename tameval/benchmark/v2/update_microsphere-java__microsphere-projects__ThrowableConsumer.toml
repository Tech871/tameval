[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-java"
sha = "b4576dbd7bad0fe918d235617d466ccd5434cc66"
bench_version = 1

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-java-core -Dtest=ThrowableConsumerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-java-core -DtargetClasses=**.ThrowableConsumer  -DtargetTests=**.ThrowableConsumerTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-java-core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-java-core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 21.0
original_coverage = 86.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 65, 77, 104,]
missed_lines = [ 50, 51, 62, 64, 66, 67, 68, 90, 91, 105, 106,]

[input_info]
test_file_path = "microsphere-java-core/src/test/java/io/microsphere/lang/function/ThrowableConsumerTest.java"
focal_file_path = "microsphere-java-core/src/main/java/io/microsphere/lang/function/ThrowableConsumer.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/test/java/io/microsphere/lang/function/ThrowableConsumerTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/main/java/io/microsphere/lang/function/ThrowableConsumer.java"
first_commit_date = "2024-04-08"
last_commit_date = "2025-03-09"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage io.microsphere.lang.function;\n\nimport org.junit.jupiter.api.Test;\n\nimport static io.microsphere.lang.function.ThrowableConsumer.execute;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\n/**\n * {@link ThrowableConsumer} Test\n *\n * @since 1.0.0\n */\npublic class ThrowableConsumerTest {\n\n    @Test\n    public void testExecute1() {\n        ThrowableConsumer<String> consumer = t -> {\n            throw new Exception(t);\n        };\n        assertThrows(RuntimeException.class, () -> consumer.execute(\"For testing\"));\n    }\n\n    @Test\n    public void testExecute2() {\n        assertThrows(RuntimeException.class, () -> execute(\"For testing\", m -> {\n            throw new Exception(m);\n        }));\n    }\n\n    @Test\n    public void testExecute3() {\n        assertThrows(RuntimeException.class, () -> execute(\"For testing\", m -> {\n            throw new Exception(m);\n        }, (t, e) -> {\n            throw new RuntimeException(t, e);\n        }));\n    }\n}"
