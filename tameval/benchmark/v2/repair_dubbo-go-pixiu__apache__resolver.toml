[meta]
task = "repair"
scenario = "repair_syntax_error"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "apache/dubbo-go-pixiu"
sha = "1f7c7364d47baa7567b762843e6ee39020be179e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/filter/http/remote/resolver/resolver.go pkg/filter/http/remote/resolver/resolver_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/filter/http/remote/resolver/resolver.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 80.0
mutation_kill_rate = nan
original_mutation_kill_rate = 78.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/filter/http/remote/resolver/resolver_test.go"
focal_file_path = "pkg/filter/http/remote/resolver/resolver.go"
test_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/filter/http/remote/resolver/resolver_test.go"
focal_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/filter/http/remote/resolver/resolver.go"
first_commit_date = "2025-07-15"
last_commit_date = "2025-08-03"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n * http:\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage resolver\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n)\n\nmport (\n\tapiConf \"github.com/dubbo-go-pixiu/pixiu-api/pkg/api/config\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nimport (\n\t\"github.com/apache/dubbo-go-pixiu/pkg/common/constant\"\n)\nfunc TestBaseResolver_PreCheck(t *testing.T) {\n\ttests := []struct {\n\t\tname        string\n\t\tsetupReq    func() *http.Request\n\t\texpectError bool\n\t\terrorMsg    string\n\t}{\n\t\t{\n\t\t\tname: \"Valid Request\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treq.Header.Set(constant.DubboHttpDubboVersion, \"1.0.0\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\texpectError: false,\n\t\t},\n\t\t{\n\t\t\tname: \"Invalid HTTP Method (GET)\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"GET\", \"/app/service/method\", nil)\n\t\t\t\treq.Header.Set(constant.DubboHttpDubboVersion, \"1.0.0\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"http request must be POST and have x-dubbo-http1.1-dubbo-version header\",\n\t\t},\n\t\t{\n\t\t\tname: \"Missing Dubbo Version Header\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treturn req\n\t\t\t},\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"http request must be POST and have x-dubbo-http1.1-dubbo-version header\",\n\t\t},\n\t\t{\n\t\t\tname: \"Invalid Path (too short)\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service\", nil)\n\t\t\t\treq.Header.Set(constant.DubboHttpDubboVersion, \"1.0.0\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"http request path must be in {application}/{service}/{method} format\",\n\t\t},\n\t\t{\n\t\t\tname: \"Invalid Path (too long)\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method/extra\", nil)\n\t\t\t\treq.Header.Set(constant.DubboHttpDubboVersion, \"1.0.0\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\texpectError: true,\n\t\t\terrorMsg:    \"http request path must be in {application}/{service}/{method} format\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tresolver := &BaseResolver{}\n\t\t\treq := tt.setupReq()\n\t\t\terr := resolver.PreCheck(req)\n\n\t\t\tif tt.expectError {\n\t\t\t\tassert.Error(t, err)\n\t\t\t\tassert.Equal(t, tt.errorMsg, err.Error())\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t}\n\t\t})\n\t}\n}\nfunc TestBaseResolver_BuildAPI(t *testing.T) {\n\tsampleMappingParams := []apiConf.MappingParam{\n\t\t{Name: \"requestBody.name\", MapTo: \"opt.name\"},\n\t}\n\n\ttests := []struct {\n\t\tname                string\n\t\tsetupReq            func() *http.Request\n\t\tmappingParams       []apiConf.MappingParam\n\t\texpectError         bool\n\t\texpectedRequestType apiConf.RequestType\n\t\texpectedVersion     string\n\t\texpectedGroup       string\n\t\terrorMsg            string\n\t}{\n\t\t{\n\t\t\tname: \"Dubbo Protocol Request\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treq.Header.Set(constant.DubboServiceProtocol, string(apiConf.DubboRequest))\n\t\t\t\treq.Header.Set(constant.DubboServiceVersion, \"1.0.0\")\n\t\t\t\treq.Header.Set(constant.DubboGroup, \"test-group\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\tmappingParams:       sampleMappingParams,\n\t\t\texpectError:         false,\n\t\t\texpectedRequestType: apiConf.DubboRequest,\n\t\t\texpectedVersion:     \"1.0.0\",\n\t\t\texpectedGroup:       \"test-group\",\n\t\t},\n\t\t{\n\t\t\tname: \"Triple Protocol Request\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treq.Header.Set(constant.DubboServiceProtocol, \"triple\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\tmappingParams:       sampleMappingParams,\n\t\t\texpectError:         false,\n\t\t\texpectedRequestType: \"triple\",\n\t\t},\n\t\t{\n\t\t\tname: \"HTTP Protocol Request\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treq.Header.Set(constant.DubboServiceProtocol, string(apiConf.HTTPRequest))\n\t\t\t\treturn req\n\t\t\t},\n\t\t\tmappingParams:       sampleMappingParams,\n\t\t\texpectError:         false,\n\t\t\texpectedRequestType: apiConf.HTTPRequest,\n\t\t},\n\t\t{\n\t\t\tname: \"No Protocol Specified (Defaults to Dubbo)\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treturn req\n\t\t\t},\n\t\t\tmappingParams:       sampleMappingParams,\n\t\t\texpectError:         false,\n\t\t\texpectedRequestType: apiConf.DubboRequest,\n\t\t},\n\t\t{\n\t\t\tname: \"Unknown Protocol\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treq := httptest.NewRequest(\"POST\", \"/app/service/method\", nil)\n\t\t\t\treq.Header.Set(constant.DubboServiceProtocol, \"unknown-protocol\")\n\t\t\t\treturn req\n\t\t\t},\n\t\t\tmappingParams: sampleMappingParams,\n\t\t\texpectError:   true,\n\t\t\terrorMsg:      \"http request has unknown protocol in x-dubbo-service-protocol\",\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tresolver := &BaseResolver{}\n\t\t\treq := tt.setupReq()\n\t\t\tapi, err := resolver.BuildAPI(req, tt.mappingParams)\n\n\t\t\tif tt.expectError {\n\t\t\t\tassert.Error(t, err)\n\t\t\t\tassert.Nil(t, api)\n\t\t\t\tassert.Equal(t, tt.errorMsg, err.Error())\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t\tassert.NotNil(t, api)\n\t\t\t\tassert.Equal(t, \"/:application/:interface/:method\", api.URLPattern)\n\t\t\t\tassert.Equal(t, string(http.MethodPost), string(api.Method.HTTPVerb))\n\t\t\t\tassert.True(t, api.Method.Enable)\n\t\t\t\tassert.Equal(t, apiConf.HTTPRequest, api.Method.InboundRequest.RequestType)\n\t\t\t\tassert.Equal(t, tt.expectedRequestType, api.Method.IntegrationRequest.RequestType)\n\t\t\t\tassert.Equal(t, tt.expectedVersion, api.Method.IntegrationRequest.DubboBackendConfig.Version)\n\t\t\t\tassert.Equal(t, tt.expectedGroup, api.Method.IntegrationRequest.DubboBackendConfig.Group)\n\t\t\t\tassert.Equal(t, tt.mappingParams, api.Method.IntegrationRequest.MappingParams)\n\t\t\t}\n\t\t})\n\t}\n}"
