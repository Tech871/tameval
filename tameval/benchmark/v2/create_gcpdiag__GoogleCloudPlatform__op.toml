[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_cfg_file = "Pipfile"

[repo_info]
repository = "GoogleCloudPlatform/gcpdiag"
sha = "679c55e8715d535c797fc18cd20cda0ad3fc90ea"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install pipenv && pipenv lock && pipenv install --deploy --system --dev && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=gcpdiag/runbook/op.py -m pytest -q --junit-xml=test_output.xml gcpdiag/runbook/op_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target gcpdiag.runbook.op --unit-test gcpdiag.runbook.op_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target gcpdiag/runbook/op.py --unit-test gcpdiag/runbook/op_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 75.0
original_coverage = 75.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 15, 16, 17, 19, 20, 21, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 43, 46, 58, 61, 62, 64, 67, 68, 69, 71, 72, 76, 77, 78, 79, 80, 82, 85, 87, 88, 93, 97, 126, 146, 147, 150, 164, 165, 168, 203, 205, 206, 207, 213, 225, 235, 245, 257, 273, 284, 285, 286, 288, 289, 290, 293, 295, 296, 299, 301, 302, 305, 307, 308, 311, 313, 314, 317, 319, 320, 323, 324, 325, 326, 333, 334, 335, 336, 337, 341, 342, 343, 344, 345, 349,]
missed_lines = [ 44, 52, 59, 65, 73, 89, 117, 119, 120, 121, 122, 123, 196, 197, 216, 217, 227, 228, 229, 237, 238, 239, 247, 248, 249, 262, 263, 264, 371, 372, 377,]

[input_info]
test_file_path = "gcpdiag/runbook/op_test.py"
focal_file_path = "gcpdiag/runbook/op.py"
test_file_url = "https://github.com/GoogleCloudPlatform/gcpdiag/blob/679c55e8715d535c797fc18cd20cda0ad3fc90ea/gcpdiag/runbook/op_test.py"
focal_file_url = "https://github.com/GoogleCloudPlatform/gcpdiag/blob/679c55e8715d535c797fc18cd20cda0ad3fc90ea/gcpdiag/runbook/op.py"
first_commit_date = "2024-04-08"
last_commit_date = "2025-02-25"
test_file_content = "# Copyright 2024 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an 'AS IS' BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n'''Test Operator methods'''\n\nimport unittest\nfrom functools import wraps\n\nfrom gcpdiag.runbook import Step, op, report\n\n\ndef with_operator_context(test_method):\n  \"\"\"Decorator to set up operator context for op_test test methods.\"\"\"\n\n  @wraps(test_method)\n  def wrapper(self):\n    test_operator = op.Operator(interface=report.InteractionInterface(\n        kind='cli'))\n    test_operator.set_run_id('test_run_for_' + test_method.__name__)\n    test_operator.interface.rm = report.TerminalReportManager()\n    test_report = report.Report(run_id=test_operator.run_id, parameters={})\n    test_operator.interface.rm.reports[test_operator.run_id] = test_report\n    test_step = ok_step\n    test_operator.set_step(test_step)\n\n    test_report.results[ok_step.execution_id] = ok_step\n    test_report.results[failed_step.execution_id] = failed_step\n    test_report.results[uncertain_step.execution_id] = uncertain_step\n    test_report.results[skipped_step.execution_id] = skipped_step\n\n    self.test_operator = test_operator\n\n    with op.operator_context(test_operator):\n      return test_method(\n          self)  # Execute the actual test method within the context\n\n  return wrapper\n\n\nok_step_eval = report.ResourceEvaluation(resource=None,\n                                         status='ok',\n                                         reason='TestReason',\n                                         remediation='TestRemediation')\nfailed_step_eval = report.ResourceEvaluation(resource=None,\n                                             reason='TestReason',\n                                             remediation='TestRemediation',\n                                             status='failed')\nuncertain_step_eval = report.ResourceEvaluation(resource=None,\n                                                reason='TestReason',\n                                                remediation='TestRemediation',\n                                                status='uncertain')\nskipped_step_eval = report.ResourceEvaluation(resource=None,\n                                              reason='TestReason',\n                                              remediation='TestRemediation',\n                                              status='skipped')\nok_step = report.StepResult(step=Step(uuid='ok.step'))\nok_step.results.append(ok_step_eval)\nfailed_step = report.StepResult(step=Step(uuid='failed.step'))\nfailed_step.results.append(failed_step_eval)\nuncertain_step = report.StepResult(step=Step(uuid='uncertain.step'))\nuncertain_step.results.append(uncertain_step_eval)\nskipped_step = report.StepResult(step=Step(uuid='skipped.step'))\nskipped_step.results.append(skipped_step_eval)\n\n# This global operator is only used for creating step results and should not interfere with\n# thread-local tests.\noperator = op.Operator(interface=report.InteractionInterface(kind='cli'))\noperator.set_run_id('test')\noperator.interface.rm = report.TerminalReportManager()\noperator.interface.rm.reports['test'] = report.Report(run_id='test',\n                                                      parameters={})\noperator.interface.rm.reports['test'].results[ok_step.execution_id] = ok_step\noperator.interface.rm.reports['test'].results[\n    failed_step.execution_id] = failed_step\noperator.interface.rm.reports['test'].results[\n    uncertain_step.execution_id] = uncertain_step\noperator.interface.rm.reports['test'].results[\n    skipped_step.execution_id] = skipped_step\n\noperator.set_step(ok_step)\n\n\nclass OperatorTest(unittest.TestCase):\n  '''Test Report Manager'''\n\n  @with_operator_context\n  def test_positive_step_overall_status_case(self):\n    self.assertTrue(op.step_ok('gcpdiag.runbook.Step.ok.step'))\n    self.assertTrue(op.step_failed('gcpdiag.runbook.Step.failed.step'))\n    self.assertTrue(op.step_uncertain('gcpdiag.runbook.Step.uncertain.step'))\n    self.assertTrue(op.step_skipped('gcpdiag.runbook.Step.skipped.step'))\n    self.assertTrue(op.step_unexecuted('gcpdiag.runbook.Step.random.step'))\n\n  @with_operator_context\n  def test_negative_step_overall_status_case(self):\n    self.assertFalse(op.step_ok('gcpdiag.runbook.Step.failed.step'))\n    self.assertFalse(op.step_failed('gcpdiag.runbook.Step.ok.step'))\n    self.assertFalse(op.step_uncertain('gcpdiag.runbook.Step.ok.step'))\n    self.assertFalse(op.step_skipped('gcpdiag.runbook.Step.failed.step'))\n    self.assertFalse(op.step_unexecuted('gcpdiag.runbook.Step.ok.step'))\n\n  @with_operator_context\n  def test_get_and_put_parameters(self):\n    self.test_operator.parameters = {'test_key': 'test_value'}\n    self.assertEqual(op.get('test_key'), 'test_value')\n    self.assertEqual(op.get('unknown_key', 'default_value'), 'default_value')\n    op.put('new_key', 'new_value')\n    self.assertEqual(self.test_operator.parameters['new_key'], 'new_value')\n\n  @with_operator_context\n  def test_get_step_outcome(self):\n    overall_status, totals = op.get_step_outcome(ok_step.execution_id)\n    self.assertEqual(overall_status, 'ok')\n    self.assertEqual(totals, {'ok': 1})\n\n    overall_status, totals = op.get_step_outcome('unknown_step')\n    self.assertIsNone(overall_status)\n    self.assertEqual(totals, {})\n\n  @with_operator_context\n  def test_add_and_get_metadata(self):\n    op.add_metadata('metadata_key_one', 'test_value_one')\n    op.add_metadata('metadata_key_two', 'test_value_two')\n    value = op.get_metadata('metadata_key_one')\n    self.assertEqual(value, 'test_value_one')\n\n    all_metadata = op.get_all_metadata()\n    self.assertEqual(2, len(all_metadata))\n    self.assertEqual(op.get_all_metadata()['metadata_key_two'],\n                     'test_value_two')\n\n  @with_operator_context\n  def test_add_info_metadata(self):\n    info = ['info1', 'info2', 'info3']\n    for i in info:\n      op.info(i)\n    step_report = self.test_operator.interface.rm.reports[\n        self.test_operator.run_id].results.get(ok_step.execution_id)\n    self.assertEqual(info, step_report.info)\n"
