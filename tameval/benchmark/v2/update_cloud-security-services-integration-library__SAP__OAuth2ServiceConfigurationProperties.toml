[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "SAP/cloud-security-services-integration-library"
sha = "bc3a37687860d8dd34ca2e26b45d942bd4a3e85b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl spring-security -Dtest=OAuth2ServiceConfigurationPropertiesTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl spring-security -DtargetClasses=**.OAuth2ServiceConfigurationProperties  -DtargetTests=**.OAuth2ServiceConfigurationPropertiesTest  -DoutputFormats=XML"
coverage_report_path = "spring-security/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "spring-security/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 81.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java"
focal_file_path = "spring-security/src/main/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationProperties.java"
test_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/spring-security/src/test/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationPropertiesTest.java"
focal_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/spring-security/src/main/java/com/sap/cloud/security/spring/config/OAuth2ServiceConfigurationProperties.java"
first_commit_date = "2021-02-16"
last_commit_date = "2025-02-28"
test_file_content = "/**\n * SPDX-FileCopyrightText: 2018-2022 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n * \n * SPDX-License-Identifier: Apache-2.0\n */\npackage com.sap.cloud.security.spring.config;\n\nimport com.sap.cloud.security.config.CredentialType;\nimport com.sap.cloud.security.config.Service;\nimport com.sap.cloud.security.config.cf.CFConstants;\nimport com.sap.cloud.security.config.cf.CFConstants.*;\nimport org.junit.jupiter.api.Test;\n\nimport static com.sap.cloud.security.config.cf.CFConstants.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass OAuth2ServiceConfigurationPropertiesTest {\n\tOAuth2ServiceConfigurationProperties cutIas = new OAuth2ServiceConfigurationProperties(Service.IAS);\n\tOAuth2ServiceConfigurationProperties cutXsuaa = new OAuth2ServiceConfigurationProperties(Service.XSUAA);\n\tprivate static final String ANY_VALUE = \"anyValue\";\n\n\t@Test\n\tvoid setGetClientId() {\n\t\tcutIas.setClientId(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutIas.getClientId());\n\t\tassertTrue(cutIas.hasProperty(CFConstants.CLIENT_ID));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperty(CFConstants.CLIENT_ID));\n\n\t\tcutXsuaa.setClientId(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getClientId());\n\t\tassertTrue(cutXsuaa.hasProperty(CFConstants.CLIENT_ID));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(CFConstants.CLIENT_ID));\n\t}\n\n\t@Test\n\tvoid setGetClientSecret() {\n\t\tcutIas.setClientSecret(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutIas.getClientSecret());\n\t\tassertTrue(cutIas.hasProperty(CLIENT_SECRET));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperty(CLIENT_SECRET));\n\n\t\tcutXsuaa.setClientSecret(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getClientSecret());\n\t\tassertTrue(cutXsuaa.hasProperty(CLIENT_SECRET));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(CLIENT_SECRET));\n\t}\n\n\t@Test\n\tvoid setGetCertificateAndKeyIAS() {\n\t\tcutIas.setKey(ANY_VALUE);\n\t\tcutIas.setCertificate(ANY_VALUE);\n\t\tcutIas.setClientId(ANY_VALUE);\n\t\tcutIas.setClientSecret(ANY_VALUE); // to make sure that getClientIdentity uses ClientCertificate impl as default\n\t\t\t\t\t\t\t\t\t\t\t// when possible\n\t\tassertEquals(ANY_VALUE, cutIas.getClientIdentity().getKey());\n\t\tassertEquals(ANY_VALUE, cutIas.getClientIdentity().getCertificate());\n\t\tassertTrue(cutIas.getClientIdentity().isCertificateBased());\n\t\tassertTrue(cutIas.hasProperty(KEY));\n\t\tassertTrue(cutIas.hasProperty(CERTIFICATE));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperty(CLIENT_SECRET));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperty(KEY));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperty(CERTIFICATE));\n\t}\n\n\t@Test\n\tvoid setGetCertificateAndKeyXSUAA() {\n\t\tcutXsuaa.setCertificate(ANY_VALUE);\n\t\tcutXsuaa.setKey(ANY_VALUE);\n\t\tcutXsuaa.setClientId(ANY_VALUE);\n\t\tcutXsuaa.setClientSecret(ANY_VALUE); // to make sure that getClientIdentity uses ClientCertificate impl as\n\t\t\t\t\t\t\t\t\t\t\t\t// default when possible\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(CLIENT_SECRET));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getClientIdentity().getCertificate());\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getClientIdentity().getKey());\n\t\tassertTrue(cutXsuaa.hasProperty(CERTIFICATE));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(CERTIFICATE));\n\t\tassertTrue(cutXsuaa.hasProperty(KEY));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(KEY));\n\t\tassertTrue(cutXsuaa.getClientIdentity().isCertificateBased());\n\t}\n\n\t@Test\n\tvoid getClientIdentityResolvesToClientCredentials() {\n\t\tcutIas.setClientId(ANY_VALUE);\n\t\tcutIas.setClientSecret(ANY_VALUE);\n\t\tassertFalse(cutIas.getClientIdentity().isCertificateBased());\n\n\t\tcutXsuaa.setClientId(ANY_VALUE);\n\t\tcutXsuaa.setClientSecret(ANY_VALUE);\n\t\tassertFalse(cutXsuaa.getClientIdentity().isCertificateBased());\n\t}\n\n\t@Test\n\tvoid setGetCredentialType() {\n\t\tcutXsuaa.setCertificate(ANY_VALUE);\n\t\tcutXsuaa.setKey(ANY_VALUE);\n\t\tcutXsuaa.setClientId(ANY_VALUE);\n\t\tcutXsuaa.setCredentialType(\"x509\");\n\t\tassertEquals(CredentialType.X509, cutXsuaa.getCredentialType());\n\t\tassertTrue(cutXsuaa.hasProperty(XSUAA.CREDENTIAL_TYPE));\n\t\tassertEquals(\"x509\", cutXsuaa.getProperty(XSUAA.CREDENTIAL_TYPE));\n\n\t\tassertNull(cutIas.getCredentialType());\n\t\tassertFalse(cutIas.getClientIdentity().isCertificateBased());\n\t\tcutIas.setCertificate(ANY_VALUE);\n\t\tcutIas.setKey(ANY_VALUE);\n\t\tcutIas.setClientId(ANY_VALUE);\n\t\tassertTrue(cutIas.getClientIdentity().isCertificateBased());\n\t\tassertEquals(CredentialType.X509, cutIas.getCredentialType());\n\t}\n\n\t@Test\n\tvoid setGetUrl() {\n\t\tcutIas.setUrl(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutIas.getUrl().toString());\n\t\tassertTrue(cutIas.hasProperty(URL));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperty(URL));\n\n\t\tcutXsuaa.setUrl(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getUrl().toString());\n\t\tassertTrue(cutXsuaa.hasProperty(URL));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(URL));\n\t}\n\n\t@Test\n\tvoid setGetCertUrl() {\n\t\tcutXsuaa.setCertUrl(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getCertUrl().toString());\n\t\tassertTrue(cutXsuaa.hasProperty(XSUAA.CERT_URL));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.CERT_URL));\n\t}\n\n\t@Test\n\tvoid getProperties() {\n\t\tcutIas.setClientId(ANY_VALUE);\n\t\tcutIas.setClientSecret(ANY_VALUE);\n\t\tassertEquals(ANY_VALUE, cutIas.getProperties().get(CLIENT_ID));\n\t\tassertEquals(ANY_VALUE, cutIas.getProperties().get(CLIENT_SECRET));\n\t\tassertNull(cutIas.getProperties().get(URL));\n\t}\n\n\t@Test\n\tvoid setGetService() {\n\t\tassertEquals(Service.IAS, cutIas.getService());\n\t\tassertEquals(Service.XSUAA, cutXsuaa.getService());\n\t}\n\n\t@Test\n\tvoid setGetUaaDomain() {\n\t\tcutXsuaa.setUaaDomain(ANY_VALUE);\n\t\tassertTrue(cutXsuaa.hasProperty(XSUAA.UAA_DOMAIN));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.UAA_DOMAIN));\n\t}\n\n\t@Test\n\tvoid setGetXsAppName() {\n\t\tcutXsuaa.setXsAppName(ANY_VALUE);\n\t\tassertTrue(cutXsuaa.hasProperty(XSUAA.APP_ID));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.APP_ID));\n\t}\n\n\t@Test\n\tvoid setGetVerificationKey() {\n\t\tcutXsuaa.setVerificationKey(ANY_VALUE);\n\t\tassertTrue(cutXsuaa.hasProperty(XSUAA.VERIFICATION_KEY));\n\t\tassertEquals(ANY_VALUE, cutXsuaa.getProperty(XSUAA.VERIFICATION_KEY));\n\t}\n\n\t@Test\n\tvoid isLegacyMode() {\n\t\tassertFalse(cutXsuaa.isLegacyMode());\n\t}\n\n\t@Test\n\tvoid setGetConfiguration() {\n\t\tassertEquals(cutIas.getConfiguration(), cutIas.getConfiguration());\n\t\tassertNotEquals(cutIas.getConfiguration(), cutXsuaa.getConfiguration());\n\t}\n}"
