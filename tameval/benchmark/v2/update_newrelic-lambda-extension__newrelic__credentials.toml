[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.10"

[repo_info]
repository = "newrelic/newrelic-lambda-extension"
sha = "45eb88862006c0bc3bab29bcac568f18d51e4c05"

[run_info]
docker_image = "golang:1.23.10"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out credentials/credentials.go credentials/credentials_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting credentials/credentials.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = 92.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "credentials/credentials_test.go"
focal_file_path = "credentials/credentials.go"
test_file_url = "https://github.com/newrelic/newrelic-lambda-extension/blob/45eb88862006c0bc3bab29bcac568f18d51e4c05/credentials/credentials_test.go"
focal_file_url = "https://github.com/newrelic/newrelic-lambda-extension/blob/45eb88862006c0bc3bab29bcac568f18d51e4c05/credentials/credentials.go"
first_commit_date = "2020-08-03"
last_commit_date = "2025-07-14"
test_file_content = "package credentials\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/newrelic/newrelic-lambda-extension/config\"\n\n\t\"github.com/aws/aws-sdk-go/aws\"\n\t\"github.com/aws/aws-sdk-go/aws/request\"\n\t\"github.com/aws/aws-sdk-go/service/secretsmanager\"\n\t\"github.com/aws/aws-sdk-go/service/secretsmanager/secretsmanageriface\"\n\t\"github.com/aws/aws-sdk-go/service/ssm\"\n\t\"github.com/aws/aws-sdk-go/service/ssm/ssmiface\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestGetLicenseKeySecretId(t *testing.T) {\n\tsecretId := getLicenseKeySecretId(&config.Configuration{})\n\tassert.Equal(t, defaultSecretId, secretId)\n\n\tvar testSecretId = \"testSecretName\"\n\tvar conf = &config.Configuration{LicenseKeySecretId: testSecretId}\n\tsecretId = getLicenseKeySecretId(conf)\n\tassert.Equal(t, testSecretId, secretId)\n}\n\nfunc TestGetLicenseKeySSMParameterName(t *testing.T) {\n\tparameterName := getLicenseKeySSMParameterName(&config.Configuration{})\n\tassert.Equal(t, defaultSecretId, parameterName)\n\n\tvar testParameterName = \"testParameterName\"\n\tvar conf = &config.Configuration{LicenseKeySSMParameterName: testParameterName}\n\tparameterName = getLicenseKeySSMParameterName(conf)\n\tassert.Equal(t, testParameterName, parameterName)\n}\n\ntype mockSecretManager struct {\n\tsecretsmanageriface.SecretsManagerAPI\n\tvalidSecrets []string\n}\n\nconst mockSecretManagerKeyValue = \"licenseKeyStoredAsSecret\"\n\nfunc (m mockSecretManager) GetSecretValueWithContext(_ context.Context, input *secretsmanager.GetSecretValueInput, _ ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {\n\tfor _, secret := range m.validSecrets {\n\t\tif secret == *input.SecretId {\n\t\t\treturn &secretsmanager.GetSecretValueOutput{\n\t\t\t\tSecretString: aws.String(fmt.Sprintf(`{\"LicenseKey\": \"%s\"}`, mockSecretManagerKeyValue)),\n\t\t\t}, nil\n\t\t}\n\t}\n\n\treturn nil, fmt.Errorf(\"Secret not found\")\n}\n\nfunc TestIsSecretConfigured(t *testing.T) {\n\tctx := context.Background()\n\tassert.False(t, IsSecretConfigured(ctx, &config.Configuration{}))\n\n\tOverrideSecretsManager(mockSecretManager{\n\t\tvalidSecrets: []string{\"testSecretName\"},\n\t})\n\tassert.True(t, IsSecretConfigured(ctx, &config.Configuration{\n\t\tLicenseKeySecretId: \"testSecretName\",\n\t}))\n\n\tOverrideSecretsManager(mockSecretManager{})\n\tassert.False(t, IsSecretConfigured(ctx, &config.Configuration{\n\t\tLicenseKeySecretId: \"testSecretName\",\n\t}))\n}\n\ntype mockSSM struct {\n\tssmiface.SSMAPI\n\tvalidParameters []string\n}\n\nconst mockParameterStoreKeyValue = \"licenseKeyStoredAsParameter\"\n\nfunc (m mockSSM) GetParameterWithContext(_ context.Context, input *ssm.GetParameterInput, _ ...request.Option) (*ssm.GetParameterOutput, error) {\n\tfor _, parameter := range m.validParameters {\n\t\tif parameter == *input.Name {\n\t\t\treturn &ssm.GetParameterOutput{\n\t\t\t\tParameter: &ssm.Parameter{\n\t\t\t\t\tValue: aws.String(mockParameterStoreKeyValue),\n\t\t\t\t},\n\t\t\t}, nil\n\t\t}\n\t}\n\n\treturn nil, fmt.Errorf(\"Parameter not found\")\n}\n\nfunc TestIsSSMParameterConfigured(t *testing.T) {\n\tctx := context.Background()\n\tassert.False(t, IsSSMParameterConfigured(ctx, &config.Configuration{}))\n\n\tOverrideSSM(mockSSM{\n\t\tvalidParameters: []string{\"testParameterName\"},\n\t})\n\tassert.True(t, IsSSMParameterConfigured(ctx, &config.Configuration{\n\t\tLicenseKeySSMParameterName: \"testParameterName\",\n\t}))\n\n\tOverrideSSM(mockSSM{})\n\tassert.False(t, IsSSMParameterConfigured(ctx, &config.Configuration{\n\t\tLicenseKeySSMParameterName: \"testParameterName\",\n\t}))\n}\n\nfunc TestGetNewRelicLicenseKey(t *testing.T) {\n\ttable := []struct {\n\t\tName string\n\n\t\tConf           config.Configuration\n\t\tEnvironment    map[string]string\n\t\tSecretsManager secretsmanageriface.SecretsManagerAPI\n\t\tSSM            ssmiface.SSMAPI\n\n\t\tExpectedKey string\n\t\tExpectedErr string\n\t}{\n\t\t{\n\t\t\tName: \"uses config license key when present\",\n\t\t\tConf: config.Configuration{\n\t\t\t\tLicenseKey: \"in_config\",\n\t\t\t},\n\n\t\t\tExpectedKey: \"in_config\",\n\t\t},\n\t\t{\n\t\t\tName: \"loads license key from secret when configured\",\n\t\t\tConf: config.Configuration{\n\t\t\t\tLicenseKeySecretId: \"testSecretName\",\n\t\t\t},\n\t\t\tSecretsManager: mockSecretManager{\n\t\t\t\tvalidSecrets: []string{\"testSecretName\"},\n\t\t\t},\n\n\t\t\tExpectedKey: mockSecretManagerKeyValue,\n\t\t},\n\t\t{\n\t\t\tName: \"loads license key from parameter when configured\",\n\t\t\tConf: config.Configuration{\n\t\t\t\tLicenseKeySSMParameterName: \"testParameterName\",\n\t\t\t},\n\t\t\tSSM: mockSSM{\n\t\t\t\tvalidParameters: []string{\"testParameterName\"},\n\t\t\t},\n\n\t\t\tExpectedKey: mockParameterStoreKeyValue,\n\t\t},\n\t\t{\n\t\t\tName: \"loads license key from environment variable if not configured\",\n\t\t\tConf: config.Configuration{},\n\t\t\tEnvironment: map[string]string{\n\t\t\t\t\"NEW_RELIC_LICENSE_KEY\": \"12345\",\n\t\t\t},\n\n\t\t\tExpectedKey: \"12345\",\n\t\t},\n\t\t{\n\t\t\tName: \"returns error if secret is configured but unavailable\",\n\t\t\tConf: config.Configuration{\n\t\t\t\tLicenseKeySecretId: \"testSecretName\",\n\t\t\t},\n\t\t\tSecretsManager: mockSecretManager{},\n\n\t\t\tExpectedErr: \"Secret not found\",\n\t\t},\n\t\t{\n\t\t\tName: \"returns error if parameter is configured but unavailable\",\n\t\t\tConf: config.Configuration{\n\t\t\t\tLicenseKeySSMParameterName: \"testParameterName\",\n\t\t\t},\n\t\t\tSSM: mockSSM{},\n\n\t\t\tExpectedErr: \"Parameter not found\",\n\t\t},\n\t\t{\n\t\t\tName:           \"returns error if no license key is configured\",\n\t\t\tConf:           config.Configuration{},\n\t\t\tSecretsManager: mockSecretManager{},\n\t\t\tSSM:            mockSSM{},\n\n\t\t\tExpectedErr: \"No license key configured\",\n\t\t},\n\t\t{\n\t\t\tName: \"loads license key from fallback secret\",\n\t\t\tConf: config.Configuration{},\n\t\t\tSecretsManager: mockSecretManager{\n\t\t\t\tvalidSecrets: []string{\"NEW_RELIC_LICENSE_KEY\"},\n\t\t\t},\n\t\t\tSSM: mockSSM{},\n\n\t\t\tExpectedKey: mockSecretManagerKeyValue,\n\t\t},\n\t\t{\n\t\t\tName:           \"loads license key from fallback parameter\",\n\t\t\tConf:           config.Configuration{},\n\t\t\tSecretsManager: mockSecretManager{},\n\t\t\tSSM: mockSSM{\n\t\t\t\tvalidParameters: []string{\"NEW_RELIC_LICENSE_KEY\"},\n\t\t\t},\n\n\t\t\tExpectedKey: mockParameterStoreKeyValue,\n\t\t},\n\t}\n\n\tctx := context.Background()\n\n\tfor _, entry := range table {\n\t\tt.Run(entry.Name, func(t *testing.T) {\n\t\t\tOverrideSecretsManager(entry.SecretsManager)\n\t\t\tOverrideSSM(entry.SSM)\n\n\t\t\tfor name, value := range entry.Environment {\n\t\t\t\tos.Setenv(name, value)\n\t\t\t}\n\n\t\t\tlk, err := GetNewRelicLicenseKey(ctx, &entry.Conf)\n\n\t\t\tif entry.ExpectedErr == \"\" {\n\t\t\t\tassert.Equal(t, entry.ExpectedKey, lk)\n\t\t\t\tassert.NoError(t, err)\n\t\t\t} else {\n\t\t\t\tassert.Empty(t, lk)\n\t\t\t\tassert.EqualError(t, err, entry.ExpectedErr)\n\t\t\t}\n\n\t\t\tfor name := range entry.Environment {\n\t\t\t\tos.Unsetenv(name)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestDecodeLicenseKey(t *testing.T) {\n\tinvalidJson := \"invalid json\"\n\tdecoded, err := decodeLicenseKey(&invalidJson)\n\tassert.Empty(t, decoded)\n\tassert.Error(t, err)\n}\n\nfunc TestDecodeLicenseKeyValidButWrong(t *testing.T) {\n\tbadJson := \"{\\\"some\\\": \\\"garbage\\\"}\"\n\tdecoded, err := decodeLicenseKey(&badJson)\n\tassert.Empty(t, decoded)\n\tassert.Error(t, err)\n}"
