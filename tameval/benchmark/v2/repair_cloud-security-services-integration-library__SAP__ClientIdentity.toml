[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "SAP/cloud-security-services-integration-library"
sha = "bc3a37687860d8dd34ca2e26b45d942bd4a3e85b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl java-api -Dtest=ClientIdentityTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl java-api -DtargetClasses=**.ClientIdentity  -DtargetTests=**.ClientIdentityTest  -DoutputFormats=XML"
coverage_report_path = "java-api/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "java-api/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 67.0
mutation_kill_rate = 0
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = [ 29, 38, 39, 49, 59, 69, 77, 85, 89,]

[input_info]
test_file_path = "java-api/src/test/java/com/sap/cloud/security/config/ClientIdentityTest.java"
focal_file_path = "java-api/src/main/java/com/sap/cloud/security/config/ClientIdentity.java"
test_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/java-api/src/test/java/com/sap/cloud/security/config/ClientIdentityTest.java"
focal_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/java-api/src/main/java/com/sap/cloud/security/config/ClientIdentity.java"
first_commit_date = "2021-06-21"
last_commit_date = "2024-05-14"
test_file_content = "\npackage com.sap.cloud.security.config;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.stream.Stream;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass ClientIdentityTest {\n\tprivate static ClientIdentity cut;\n\tprivate static ClientIdentity cut2;\n\n\t@BeforeAll\n\tstatic void init() {\n\t\tcut = new ClientCredentials(\"clientId\", \"clientSecret\");\n\t\tcut2 = new ClientCertificate(\"CERT\", \"KEY\", \"clientId\");\n\t}\n\n\t@Test\n\tvoid getId() {\n\t}\n\n\t@Test\n\tvoid isCertificateBased() {\n\t}\n\n\t@Test\n\tvoid getSecret() {\n\t}\n\n\t@Test\n\tvoid getCertificate() {\n\t}\n\n\t@Test\n\tvoid getKey() {\n\t}\n\n\t@ParameterizedTest\n\t@MethodSource(\"isValidClientCertificateTestArguments\")\n\tvoid isValidClientCertificate(String cert, String key, String clientId, boolean expected) {\n\t\tClientIdentity invalidCertificate = new ClientCertificate(cert, key, clientId);\n\t}\n\n\t@ParameterizedTest\n\t@MethodSource(\"isValidClientCredentialsTestArguments\")\n\tvoid isValidClientCredentials(String clientId, String clientSecret, boolean expected) {\n\t\tClientIdentity clientIdentity = new ClientCredentials(clientId, clientSecret);\n\t}\n\n\tprivate static Stream<Arguments> isValidClientCredentialsTestArguments() {\n\t\treturn Stream.of(\n\t\t\t\tArguments.of(\"clientId\", \"clientSecret\", true),\n\t\t\t\tArguments.of(null, \"clientSecret\", false),\n\t\t\t\tArguments.of(\"clientId\", null, false),\n\t\t\t\tArguments.of(\"clientId\", \"\", false),\n\t\t\t\tArguments.of(\"\", \"clientSecret\", false)\n\n\t\t);\n\t}\n\n\tprivate static Stream<Arguments> isValidClientCertificateTestArguments() {\n\t\treturn Stream.of(\n\t\t\t\tArguments.of(\"CERT\", \"KEY\", \"clientId\", true),\n\t\t\t\tArguments.of(\"CERT\", \"KEY\", \"\", false),\n\t\t\t\tArguments.of(\"CERT\", \"\", \"clientId\", false),\n\t\t\t\tArguments.of(\"\", \"KEY\", \"clientId\", false),\n\t\t\t\tArguments.of(null, \"KEY\", \"clientId\", false),\n\t\t\t\tArguments.of(\"CERT\", null, \"clientId\", false),\n\t\t\t\tArguments.of(\"CERT\", \"KEY\", null, false));\n\t}\n}"
