[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "datolabs-io/opsy"
sha = "34d0c4dd506970419e9238a3343710100422dd33"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/tui/components/footer/footer.go internal/tui/components/footer/footer_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/tui/components/footer/footer.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 76.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/tui/components/footer/footer_test.go"
focal_file_path = "internal/tui/components/footer/footer.go"
test_file_url = "https://github.com/datolabs-io/opsy/blob/34d0c4dd506970419e9238a3343710100422dd33/internal/tui/components/footer/footer_test.go"
focal_file_url = "https://github.com/datolabs-io/opsy/blob/34d0c4dd506970419e9238a3343710100422dd33/internal/tui/components/footer/footer.go"
first_commit_date = "2025-02-19"
last_commit_date = "2025-03-01"
test_file_content = "package footer\n\nimport (\n\t\"regexp\"\n\t\"sync\"\n\t\"testing\"\n\n\ttea \"github.com/charmbracelet/bubbletea\"\n\t\"github.com/charmbracelet/lipgloss\"\n\t\"github.com/datolabs-io/sredo/internal/agent\"\n\t\"github.com/datolabs-io/sredo/internal/thememanager\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\n// stripANSI removes ANSI color codes from a string.\nfunc stripANSI(str string) string {\n\tre := regexp.MustCompile(`\\x1b\\[[0-9;]*[a-zA-Z]`)\n\treturn re.ReplaceAllString(str, \"\")\n}\n\n// TestNew tests the creation of a new footer component.\nfunc TestNew(t *testing.T) {\n\tt.Run(\"creates with valid parameters\", func(t *testing.T) {\n\t\ttheme := thememanager.Theme{\n\t\t\tBaseColors: thememanager.BaseColors{\n\t\t\t\tBase01: \"#000000\",\n\t\t\t\tBase04: \"#FFFFFF\",\n\t\t\t},\n\t\t}\n\t\tparams := Parameters{\n\t\t\tEngine:      \"TestEngine\",\n\t\t\tModel:       \"TestModel\",\n\t\t\tMaxTokens:   1000,\n\t\t\tTemperature: 0.7,\n\t\t\tToolsCount:  5,\n\t\t}\n\n\t\tm := New(\n\t\t\tWithTheme(theme),\n\t\t\tWithParameters(params),\n\t\t)\n\n\t\tassert.NotNil(t, m)\n\t\tassert.Equal(t, params, m.parameters)\n\t\tassert.Equal(t, theme, m.theme)\n\t\tassert.Equal(t, agent.StatusReady, m.status)\n\t})\n\n\tt.Run(\"creates with nil theme\", func(t *testing.T) {\n\t\tm := New()\n\t\tassert.NotNil(t, m)\n\t\tassert.Equal(t, thememanager.Theme{}, m.theme)\n\t})\n\n\tt.Run(\"creates with empty parameters\", func(t *testing.T) {\n\t\tm := New(WithParameters(Parameters{}))\n\t\tassert.NotNil(t, m)\n\t\tassert.Equal(t, Parameters{}, m.parameters)\n\t})\n}\n\n// TestUpdate tests the update function of the footer component.\nfunc TestUpdate(t *testing.T) {\n\tt.Run(\"handles window size message\", func(t *testing.T) {\n\t\ttheme := thememanager.Theme{\n\t\t\tBaseColors: thememanager.BaseColors{\n\t\t\t\tBase01: \"#000000\",\n\t\t\t\tBase04: \"#FFFFFF\",\n\t\t\t},\n\t\t}\n\t\tm := New(WithTheme(theme))\n\n\t\tnewModel, cmd := m.Update(tea.WindowSizeMsg{Width: 100})\n\t\tassert.NotNil(t, newModel)\n\t\tassert.Nil(t, cmd)\n\t\tassert.Equal(t, 100, newModel.maxWidth)\n\t})\n\n\tt.Run(\"handles status update\", func(t *testing.T) {\n\t\tm := New()\n\t\tnewModel, cmd := m.Update(agent.Status(\"Running\"))\n\t\tassert.NotNil(t, newModel)\n\t\tassert.Nil(t, cmd)\n\t\tassert.Equal(t, \"Running\", newModel.status)\n\t})\n}\n\n// TestView tests the view function of the footer component.\nfunc TestView(t *testing.T) {\n\tt.Run(\"renders with all parameters\", func(t *testing.T) {\n\t\ttheme := thememanager.Theme{\n\t\t\tBaseColors: thememanager.BaseColors{\n\t\t\t\tBase01: \"#000000\",\n\t\t\t\tBase04: \"#FFFFFF\",\n\t\t\t},\n\t\t}\n\t\tparams := Parameters{\n\t\t\tEngine:      \"TestEngine\",\n\t\t\tModel:       \"TestModel\",\n\t\t\tMaxTokens:   1000,\n\t\t\tTemperature: 0.7,\n\t\t\tToolsCount:  5,\n\t\t}\n\n\t\tm := New(\n\t\t\tWithTheme(theme),\n\t\t\tWithParameters(params),\n\t\t)\n\t\tm.maxWidth = 100\n\n\t\tview := stripANSI(m.View())\n\t\tassert.Contains(t, view, \"TestEngine\")\n\t\tassert.Contains(t, view, \"TestModel\")\n\t\tassert.Contains(t, view, \"1000\")\n\t\tassert.Contains(t, view, \"0.7\")\n\t\tassert.Contains(t, view, \"5\")\n\t\tassert.Contains(t, view, \"Ready\")\n\t})\n\n\tt.Run(\"handles small window width\", func(t *testing.T) {\n\t\tm := New(WithParameters(Parameters{\n\t\t\tEngine: \"TestEngine\",\n\t\t\tModel:  \"TestModel\",\n\t\t}))\n\t\tm.maxWidth = 40\n\n\t\tview := stripANSI(m.View())\n\t\tassert.NotEmpty(t, view)\n\t\tassert.Contains(t, view, \"TestEngine\")\n\t})\n\n\tt.Run(\"handles empty parameters\", func(t *testing.T) {\n\t\tm := New()\n\t\tm.maxWidth = 100\n\n\t\tview := stripANSI(m.View())\n\t\tassert.NotEmpty(t, view)\n\t\tassert.Contains(t, view, \"Ready\")\n\t})\n}\n\n// TestInit tests the initialization of the footer component.\nfunc TestInit(t *testing.T) {\n\tm := New()\n\tcmd := m.Init()\n\tassert.Nil(t, cmd)\n}\n\n// TestThemeChange tests the component's response to theme changes.\nfunc TestThemeChange(t *testing.T) {\n\tinitialTheme := thememanager.Theme{\n\t\tBaseColors: thememanager.BaseColors{\n\t\t\tBase01: \"#000000\",\n\t\t\tBase04: \"#FFFFFF\",\n\t\t},\n\t}\n\n\tnewTheme := thememanager.Theme{\n\t\tBaseColors: thememanager.BaseColors{\n\t\t\tBase01: \"#111111\",\n\t\t\tBase04: \"#EEEEEE\",\n\t\t},\n\t}\n\n\tparams := Parameters{\n\t\tEngine:      \"TestEngine\",\n\t\tModel:       \"TestModel\",\n\t\tMaxTokens:   1000,\n\t\tTemperature: 0.7,\n\t\tToolsCount:  5,\n\t}\n\n\t// Create and setup first model\n\tm1 := New(WithTheme(initialTheme), WithParameters(params))\n\tm1, _ = m1.Update(tea.WindowSizeMsg{Width: 100})\n\n\t// Create and setup second model\n\tm2 := New(WithTheme(newTheme), WithParameters(params))\n\tm2, _ = m2.Update(tea.WindowSizeMsg{Width: 100})\n\n\t// Verify container styles are different\n\tassert.NotEqual(t,\n\t\tm1.containerStyle.GetBackground(),\n\t\tm2.containerStyle.GetBackground(),\n\t\t\"container styles should have different backgrounds\",\n\t)\n\n\t// Verify text styles are different\n\tassert.NotEqual(t,\n\t\tm1.textStyle.GetForeground(),\n\t\tm2.textStyle.GetForeground(),\n\t\t\"text styles should have different colors\",\n\t)\n\n\t// Verify styles match their themes\n\tassert.Equal(t,\n\t\tlipgloss.Color(initialTheme.BaseColors.Base01),\n\t\tm1.containerStyle.GetBackground(),\n\t\t\"container style should use Base01 color\",\n\t)\n\n\tassert.Equal(t,\n\t\tlipgloss.Color(initialTheme.BaseColors.Base04),\n\t\tm1.textStyle.GetForeground(),\n\t\t\"text style should use Base04 color\",\n\t)\n\n\tassert.Equal(t,\n\t\tlipgloss.Color(newTheme.BaseColors.Base01),\n\t\tm2.containerStyle.GetBackground(),\n\t\t\"container style should use Base01 color\",\n\t)\n\n\tassert.Equal(t,\n\t\tlipgloss.Color(newTheme.BaseColors.Base04),\n\t\tm2.textStyle.GetForeground(),\n\t\t\"text style should use Base04 color\",\n\t)\n\n\t// Verify content is identical\n\tstripped1 := stripANSI(m1.View())\n\tstripped2 := stripANSI(m2.View())\n\tassert.Equal(t, stripped1, stripped2, \"content should be same after stripping ANSI codes\")\n}\n\n// TestConcurrentAccess tests thread safety of the footer component.\nfunc TestConcurrentAccess(t *testing.T) {\n\tm := New()\n\tvar wg sync.WaitGroup\n\tnumGoroutines := 10\n\n\t// Test concurrent updates\n\twg.Add(numGoroutines)\n\tfor i := 0; i < numGoroutines; i++ {\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\t_, _ = m.Update(tea.WindowSizeMsg{Width: 100})\n\t\t\t_, _ = m.Update(agent.Status(\"Running\"))\n\t\t\t_ = m.View()\n\t\t}()\n\t}\n\twg.Wait()\n\n\t// Verify component is still in a valid state\n\tview := stripANSI(m.View())\n\tassert.NotEmpty(t, view)\n\tassert.Contains(t, view, \"Running\")\n}"
