[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "SAP/cloud-security-services-integration-library"
sha = "bc3a37687860d8dd34ca2e26b45d942bd4a3e85b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl java-security -Dtest=JwtAudienceValidatorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl java-security -DtargetClasses=**.JwtAudienceValidator  -DtargetTests=**.JwtAudienceValidatorTest  -DoutputFormats=XML"
coverage_report_path = "java-security/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "java-security/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 98.0
original_coverage = 98.0
mutation_kill_rate = 91.0
original_mutation_kill_rate = 91.0
covered_lines = [ 28, 31, 33, 34, 35, 38, 39, 40, 42, 47, 49, 50, 51, 53, 55, 59, 60, 61, 63, 64, 68, 69, 70, 71, 72, 74, 76, 77, 87, 89, 90, 93, 94, 95, 97, 98, 100, 102, 103, 104, 107, 108, 109, 110, 112, 115, 116, 127,]
missed_lines = [ 131,]

[input_info]
test_file_path = "java-security/src/test/java/com/sap/cloud/security/token/validation/validators/JwtAudienceValidatorTest.java"
focal_file_path = "java-security/src/main/java/com/sap/cloud/security/token/validation/validators/JwtAudienceValidator.java"
test_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/java-security/src/test/java/com/sap/cloud/security/token/validation/validators/JwtAudienceValidatorTest.java"
focal_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/java-security/src/main/java/com/sap/cloud/security/token/validation/validators/JwtAudienceValidator.java"
first_commit_date = "2020-01-28"
last_commit_date = "2024-02-16"
test_file_content = "/**\n * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n * <p>\n * SPDX-License-Identifier: Apache-2.0\n */\npackage com.sap.cloud.security.token.validation.validators;\n\nimport com.sap.cloud.security.config.Service;\nimport com.sap.cloud.security.token.Token;\nimport com.sap.cloud.security.token.TokenClaims;\nimport com.sap.cloud.security.token.validation.ValidationResult;\nimport org.assertj.core.util.Sets;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class JwtAudienceValidatorTest {\n\n\tprivate Token token;\n\tprivate String XSUAA_BROKER_XSAPPNAME = \"brokerplanmasterapp!b123\";\n\n\t@Before\n\tpublic void setUp() {\n\t\ttoken = Mockito.mock(Token.class);\n\t\tMockito.when(token.getAudiences()).thenReturn(\n\t\t\t\tSets.newLinkedHashSet(\"client\", \"foreignclient\", \"sb-test4!t1.data\"));\n\t\tMockito.when(token.getService()).thenReturn(Service.XSUAA);\n\t\tMockito.when(token.hasClaim(TokenClaims.AUTHORIZATION_PARTY)).thenReturn(true);\n\t\tMockito.when(token.getClientId()).thenReturn(\"client\");\n\t}\n\n\t@Test\n\tpublic void validate_tokenAudienceMatchesClientId() {\n\t\tValidationResult result = new JwtAudienceValidator(\"client\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue();\n\t}\n\n\t@Test\n\tpublic void validate_tokenAudienceMatchesAppId() {\n\t\tMockito.when(token.getAudiences()).thenReturn(\n\t\t\t\tSets.newLinkedHashSet(\"appId!t1\"));\n\t\tValidationResult result = new JwtAudienceValidator(\"sb-appId!t1\")\n\t\t\t\t.configureTrustedClientId(\"appId!t1\")\n\t\t\t\t.validate(token);\n\t\tassertThat(result.isValid()).isTrue();\n\t}\n\n\t@Test\n\tpublic void validate_tokenAudienceMatchesForeignClientId() {\n\t\tValidationResult result = new JwtAudienceValidator(\"any\")\n\t\t\t\t.configureTrustedClientId(\"foreignclient\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue();\n\t}\n\n\t@Test\n\tpublic void validate_clientIdMatchesTokenAudienceWithoutDot() {\n\t\t// configures token audience\n\t\tMockito.when(token.getAudiences())\n\t\t\t\t.thenReturn(Sets.newLinkedHashSet(\"client\", \"sb-test4!t1.data.x\"));\n\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tValidationResult result = new JwtAudienceValidator(\"sb-test4!t1\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue(); // should match\n\t}\n\n\t@Test\n\tpublic void validate_tokenClientIdMatchesTrustedClientId() {\n\t\tMockito.when(token.getAudiences()).thenReturn(Collections.emptySet());\n\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tValidationResult result = new JwtAudienceValidator(\"client\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue(); // should match\n\t}\n\n\t@Test\n\tpublic void validate_brokerClientIdMatchesCloneAudience() {\n\t\t// configures token audience\n\t\tMockito.when(token.getAudiences())\n\t\t\t\t.thenReturn(Sets\n\t\t\t\t\t\t.newLinkedHashSet(\"sb-f7016e93-8665-4b73-9b46-f99d7808fe3c!b446|\" + XSUAA_BROKER_XSAPPNAME));\n\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tValidationResult result = new JwtAudienceValidator(\"sb-\" + XSUAA_BROKER_XSAPPNAME)\n\t\t\t\t.configureTrustedClientId(XSUAA_BROKER_XSAPPNAME)\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue(); // should match\n\t}\n\n\t@Test\n\tpublic void validate_tokenClientIdMatchesTrustedBrokerClientId() {\n\t\tMockito.when(token.getAudiences()).thenReturn(Collections.emptySet());\n\t\tMockito.when(token.getClientId())\n\t\t\t\t.thenReturn(\"sb-clone-app-id!b123|\" + XSUAA_BROKER_XSAPPNAME);\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tValidationResult result = new JwtAudienceValidator(XSUAA_BROKER_XSAPPNAME)\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue(); // should match\n\t}\n\n\t@Test\n\tpublic void validate_tokenClientIdDoesNotMatchTrustedBrokerClientId() {\n\t\tMockito.when(token.getAudiences()).thenReturn(Collections.emptySet());\n\t\tMockito.when(token.getClientId())\n\t\t\t\t.thenReturn(\"sb-clone-app-id!b123|xxx\" + XSUAA_BROKER_XSAPPNAME);\n\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tValidationResult result = new JwtAudienceValidator(XSUAA_BROKER_XSAPPNAME)\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isFalse(); // should match\n\t}\n\n\t@Test\n\tpublic void validationFails_brokerClientIdDoesNotMatchCloneAudience() {\n\t\t// configures token audience\n\t\tMockito.when(token.getAudiences())\n\t\t\t\t.thenReturn(Sets.newLinkedHashSet(\"sb-f7016e93-8665-4b73-9b46-f99d7808fe3c!b446|ANOTHERAPP!b12\"));\n\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tValidationResult result = new JwtAudienceValidator(\"sb-ANOTHERAPP!b12\")\n\t\t\t\t.configureTrustedClientId(\"ANOTHERAPP!b12\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isValid()).isTrue(); // should match\n\t}\n\n\t@Test\n\tpublic void validationFails_when_NoTokenAudienceMatches() {\n\t\tValidationResult result = new JwtAudienceValidator(\"any\")\n\t\t\t\t.configureTrustedClientId(\"anyother\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isErroneous()).isTrue();\n\t\tassertThat(result.getErrorDescription())\n\t\t\t\t.isEqualTo(\n\t\t\t\t\t\t\"Jwt token with audience [client, foreignclient, sb-test4!t1.data] is not issued for these clientIds: [any, anyother].\");\n\t}\n\n\t@Test\n\tpublic void validationShouldFilterEmptyAudiences() {\n\t\tMockito.when(token.getAudiences()).thenReturn(Sets.newLinkedHashSet(\".\", \"test.\", \" .test2\"));\n\n\t\tValidationResult result = new JwtAudienceValidator(\"any\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isErroneous()).isTrue();\n\t\tassertThat(result.getErrorDescription())\n\t\t\t\t.isEqualTo(\"Jwt token with audience [., test.,  .test2] is not issued for these clientIds: [any].\");\n\t}\n\n\t@Test\n\tpublic void validationFails_when_TokenAudiencesAreEmpty() {\n\t\tMockito.when(token.getAudiences()).thenReturn(Collections.emptySet());\n\n\t\tValidationResult result = new JwtAudienceValidator(\"any\")\n\t\t\t\t.validate(token);\n\n\t\tassertThat(result.isErroneous()).isTrue();\n\t\tassertThat(result.getErrorDescription())\n\t\t\t\t.isEqualTo(\"Jwt token with audience [] is not issued for these clientIds: [any].\");\n\t}\n\n\t@Test\n\tpublic void extractAudiencesFromTokenScopes() {\n\t\tArrayList<String> scopes = new ArrayList();\n\t\tscopes.add(\"client.read\");\n\t\tscopes.add(\"test1!t1.read\");\n\t\tscopes.add(\"client.write\");\n\t\tscopes.add(\"xsappid.namespace.ns.write\");\n\t\tscopes.add(\"openid\");\n\n\t\t// configures token audience\n\t\tMockito.when(token.getClaimAsStringList(TokenClaims.XSUAA.SCOPES)).thenReturn(scopes);\n\t\tMockito.when(token.getAudiences()).thenReturn(Collections.EMPTY_SET);\n\n\t\t// configures audience validator with client-id from VCAP_SERVICES\n\t\tSet audiences = JwtAudienceValidator.extractAudiencesFromToken(token);\n\n\t\tassertThat(audiences.size()).isEqualTo(3);\n\t\tassertThat(audiences).containsExactlyInAnyOrder(\"test1!t1\", \"client\", \"xsappid\");\n\t}\n\n}"
