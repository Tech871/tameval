[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "youtype/mypy_boto3_builder"
sha = "098fadc5ab3152e2c85008a592ac975328a9fca8"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.mkdocs.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mypy_boto3_builder/utils/strings.py -m pytest -q --junit-xml=test_output.xml tests/utils/test_strings.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mypy_boto3_builder.utils.strings --unit-test tests.utils.test_strings --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mypy_boto3_builder/utils/strings.py --unit-test tests/utils/test_strings.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = 81.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/utils/test_strings.py"
focal_file_path = "mypy_boto3_builder/utils/strings.py"
test_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/tests/utils/test_strings.py"
focal_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/mypy_boto3_builder/utils/strings.py"
first_commit_date = "2020-01-23"
last_commit_date = "2025-02-27"
test_file_content = "import pytest\n\nfrom mypy_boto3_builder.exceptions import BuildInternalError, TypeAnnotationError\nfrom mypy_boto3_builder.utils.strings import (\n    capitalize,\n    escape_md,\n    get_anchor_link,\n    get_botocore_class_name,\n    get_class_prefix,\n    get_copyright,\n    get_md_doc_link,\n    get_pypi_link,\n    get_short_docstring,\n    get_type_def_name,\n    is_reserved,\n    textwrap,\n    xform_name,\n)\n\n\nclass TestStrings:\n    def test_get_class_prefix(self) -> None:\n\n    def test_get_anchor_link(self) -> None:\n\n    def test_is_reserved(self) -> None:\n\n    def test_get_short_docstring(self) -> None:\n\n    def test_get_type_def_name(self) -> None:\n\n        with pytest.raises(TypeAnnotationError):\n            get_type_def_name()\n\n    def test_textwrap(self) -> None:\n\n    def test_get_botocore_class_name(self) -> None:\n\n    def test_capitalize(self) -> None:\n\n    def test_xform_name(self) -> None:\n        with pytest.raises(BuildInternalError):\n            xform_name(\"MyClass\", \"\")\n\n    def test_get_pypi_link(self) -> None:\n        with pytest.raises(BuildInternalError):\n            get_pypi_link(\"\")\n\n    def test_get_copyright(self) -> None:\n\n    def test_get_md_doc_link(self) -> None:\n\n    def test_escape_md(self) -> None:\n"
