[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "armadaproject/armada"
sha = "5765dcb8fc87b811dfe3cdf254e04c6587afa142"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/common/certs/cached_certificate.go internal/common/certs/cached_certificate_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/common/certs/cached_certificate.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 89.36
original_coverage = 81.0
mutation_kill_rate = 56.52
original_mutation_kill_rate = 57.0
covered_lines = [ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 60, 61, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 97, 102, 103, 104, 105, 107, 110, 113, 114, 115, 116, 117, 118, 119, 120,]
missed_lines = [ 58, 59, 62, 63, 64, 76, 77, 78, 93, 94, 95, 98, 99, 100,]

[input_info]
test_file_path = "internal/common/certs/cached_certificate_test.go"
focal_file_path = "internal/common/certs/cached_certificate.go"
test_file_url = "https://github.com/armadaproject/armada/blob/5765dcb8fc87b811dfe3cdf254e04c6587afa142/internal/common/certs/cached_certificate_test.go"
focal_file_url = "https://github.com/armadaproject/armada/blob/5765dcb8fc87b811dfe3cdf254e04c6587afa142/internal/common/certs/cached_certificate.go"
first_commit_date = "2023-07-10"
last_commit_date = "2025-01-20"
test_file_content = "package certs\n\nimport (\n\t\"bytes\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"encoding/pem\"\n\t\"math/big\"\n\t\"net\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/armadaproject/armada/internal/common/armadacontext\"\n)\n\nconst (\n\tcertFilePath  = \"testdata/tls.crt\"\n\tkeyFilePath   = \"testdata/tls.key\"\n\tdirectoryName = \"testdata\"\n)\n\nfunc TestCachedCertificateService_LoadsCertificateOnStartup(t *testing.T) {\n\tdefer cleanup()\n\tcert, certData, keyData := createCerts(t)\n\twriteCerts(t, certData, keyData)\n\n\tcachedCertService := NewCachedCertificateService(certFilePath, keyFilePath, time.Second)\n\n\tresult := cachedCertService.GetCertificate()\n\n\tassert.Equal(t, cert, result)\n}\n\nfunc TestCachedCertificateService_PanicIfInitialLoadFails(t *testing.T) {\n\tdefer cleanup()\n\n\tassert.Panics(t, func() { NewCachedCertificateService(certFilePath, keyFilePath, time.Second) })\n}\n\nfunc TestCachedCertificateService_ReloadsCert_IfFileOnDiskChanges(t *testing.T) {\n\tdefer cleanup()\n\tcert, certData, keyData := createCerts(t)\n\twriteCerts(t, certData, keyData)\n\tcachedCertService := NewCachedCertificateService(certFilePath, keyFilePath, time.Second)\n\n\tassert.Equal(t, cert, cachedCertService.GetCertificate())\n\n\tnewCert, certData, keyData := createCerts(t)\n\n\t// Update files on disk\n\twriteCerts(t, certData, keyData)\n\t// Certificate won't change until refresh is called\n\tassert.NotEqual(t, newCert, cachedCertService.GetCertificate())\n\n\terr := cachedCertService.refresh()\n\tassert.NoError(t, err)\n\tassert.Equal(t, newCert, cachedCertService.GetCertificate())\n}\n\nfunc TestCachedCertificateService_HandlesPartialUpdates(t *testing.T) {\n\tdefer cleanup()\n\toriginalCert, certData, keyData := createCerts(t)\n\twriteCerts(t, certData, keyData)\n\tcachedCertService := NewCachedCertificateService(certFilePath, keyFilePath, time.Second)\n\n\tassert.Equal(t, originalCert, cachedCertService.GetCertificate())\n\n\tnewCert, certData, keyData := createCerts(t)\n\n\t// Update only 1 file on disk - which leaves the representation on disk in an invalid state\n\twriteCerts(t, certData, nil)\n\terr := cachedCertService.refresh()\n\tassert.Error(t, err)\n\n\t// Certificate provided should not change, as there is no valid new cert yet\n\tassert.Equal(t, originalCert, cachedCertService.GetCertificate())\n\n\t// Update the other file, so now files on disk are now both updated and consistent\n\twriteCerts(t, nil, keyData)\n\terr = cachedCertService.refresh()\n\tassert.NoError(t, err)\n\n\tassert.Equal(t, newCert, cachedCertService.GetCertificate())\n}\n\nfunc TestCachedCertificateService_ReloadsCertPeriodically_WhenUsingRun(t *testing.T) {\n\tdefer cleanup()\n\tcert, certData, keyData := createCerts(t)\n\twriteCerts(t, certData, keyData)\n\tcachedCertService := NewCachedCertificateService(certFilePath, keyFilePath, time.Second)\n\tassert.Equal(t, cert, cachedCertService.GetCertificate())\n\n\tgo func() {\n\t\tcachedCertService.Run(armadacontext.Background())\n\t}()\n\n\tnewCert, certData, keyData := createCerts(t)\n\twriteCerts(t, certData, keyData)\n\ttime.Sleep(time.Second * 2)\n\tassert.Equal(t, newCert, cachedCertService.GetCertificate())\n}\n\nfunc writeCerts(t *testing.T, certData *bytes.Buffer, keyData *bytes.Buffer) {\n\terr := os.MkdirAll(directoryName, 0o755)\n\trequire.NoError(t, err)\n\tif certData != nil {\n\t\terr := os.WriteFile(certFilePath, certData.Bytes(), 0o644)\n\t\trequire.NoError(t, err)\n\t}\n\n\tif keyData != nil {\n\t\terr := os.WriteFile(keyFilePath, keyData.Bytes(), 0o644)\n\t\trequire.NoError(t, err)\n\t}\n}\n\nfunc cleanup() {\n\tos.RemoveAll(directoryName)\n}\n\nfunc createCerts(t *testing.T) (*tls.Certificate, *bytes.Buffer, *bytes.Buffer) {\n\t// set up our CA certificate\n\tca := &x509.Certificate{\n\t\tSerialNumber:          big.NewInt(2019),\n\t\tNotBefore:             time.Now(),\n\t\tNotAfter:              time.Now().AddDate(10, 0, 0),\n\t\tIsCA:                  true,\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth, x509.ExtKeyUsageServerAuth},\n\t\tKeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,\n\t\tBasicConstraintsValid: true,\n\t}\n\n\t// create our private and public key\n\tcaPrivKey, err := rsa.GenerateKey(rand.Reader, 1024)\n\trequire.NoError(t, err)\n\n\t// create the CA\n\tcaBytes, err := x509.CreateCertificate(rand.Reader, ca, ca, &caPrivKey.PublicKey, caPrivKey)\n\trequire.NoError(t, err)\n\n\t// pem encode\n\tcaPEM := new(bytes.Buffer)\n\terr = pem.Encode(caPEM, &pem.Block{\n\t\tType:  \"CERTIFICATE\",\n\t\tBytes: caBytes,\n\t})\n\trequire.NoError(t, err)\n\n\tcaPrivKeyPEM := new(bytes.Buffer)\n\terr = pem.Encode(caPrivKeyPEM, &pem.Block{\n\t\tType:  \"RSA PRIVATE KEY\",\n\t\tBytes: x509.MarshalPKCS1PrivateKey(caPrivKey),\n\t})\n\trequire.NoError(t, err)\n\n\t// set up our server certificate\n\tcert := &x509.Certificate{\n\t\tSerialNumber: big.NewInt(2019),\n\t\tIPAddresses:  []net.IP{net.IPv4(127, 0, 0, 1), net.IPv6loopback},\n\t\tNotBefore:    time.Now(),\n\t\tNotAfter:     time.Now().AddDate(10, 0, 0),\n\t\tSubjectKeyId: []byte{1, 2, 3, 4, 6},\n\t\tExtKeyUsage:  []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth, x509.ExtKeyUsageServerAuth},\n\t\tKeyUsage:     x509.KeyUsageDigitalSignature,\n\t}\n\n\tcertPrivKey, err := rsa.GenerateKey(rand.Reader, 1024)\n\trequire.NoError(t, err)\n\n\tcertBytes, err := x509.CreateCertificate(rand.Reader, cert, ca, &certPrivKey.PublicKey, caPrivKey)\n\trequire.NoError(t, err)\n\n\tcertPEM := new(bytes.Buffer)\n\terr = pem.Encode(certPEM, &pem.Block{\n\t\tType:  \"CERTIFICATE\",\n\t\tBytes: certBytes,\n\t})\n\trequire.NoError(t, err)\n\n\tcertPrivKeyPEM := new(bytes.Buffer)\n\terr = pem.Encode(certPrivKeyPEM, &pem.Block{\n\t\tType:  \"RSA PRIVATE KEY\",\n\t\tBytes: x509.MarshalPKCS1PrivateKey(certPrivKey),\n\t})\n\trequire.NoError(t, err)\n\n\tcertificate, err := tls.X509KeyPair(certPEM.Bytes(), certPrivKeyPEM.Bytes())\n\trequire.NoError(t, err)\n\n\treturn &certificate, certPEM, certPrivKeyPEM\n}\n"
