[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "databricks/databricks-sdk-java"
sha = "1aaab52533750ad00bb98d0a13d3895f384e77e0"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl databricks-sdk-java -Dtest=AzureGithubOidcCredentialsProviderTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl databricks-sdk-java -DtargetClasses=**.AzureGithubOidcCredentialsProvider  -DtargetTests=**.AzureGithubOidcCredentialsProviderTest  -DoutputFormats=XML"
coverage_report_path = "databricks-sdk-java/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "databricks-sdk-java/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 98.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "databricks-sdk-java/src/test/java/com/databricks/sdk/core/oauth/AzureGithubOidcCredentialsProviderTest.java"
focal_file_path = "databricks-sdk-java/src/main/java/com/databricks/sdk/core/oauth/AzureGithubOidcCredentialsProvider.java"
test_file_url = "https://github.com/databricks/databricks-sdk-java/blob/1aaab52533750ad00bb98d0a13d3895f384e77e0/databricks-sdk-java/src/test/java/com/databricks/sdk/core/oauth/AzureGithubOidcCredentialsProviderTest.java"
focal_file_url = "https://github.com/databricks/databricks-sdk-java/blob/1aaab52533750ad00bb98d0a13d3895f384e77e0/databricks-sdk-java/src/main/java/com/databricks/sdk/core/oauth/AzureGithubOidcCredentialsProvider.java"
first_commit_date = "2024-07-11"
last_commit_date = "2025-06-27"
test_file_content = "package com.databricks.sdk.core.oauth;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport com.databricks.sdk.core.CredentialsProvider;\nimport com.databricks.sdk.core.DatabricksConfig;\nimport com.databricks.sdk.core.DatabricksException;\nimport com.databricks.sdk.core.HeaderFactory;\nimport com.databricks.sdk.core.http.HttpClient;\nimport com.databricks.sdk.core.http.Request;\nimport com.databricks.sdk.core.http.Response;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport org.json.JSONObject;\nimport org.junit.jupiter.api.Test;\n\npublic class AzureGithubOidcCredentialsProviderTest {\n  private static final String TOKEN = \"t-123\";\n  private static final String TOKEN_RESPONSE = new JSONObject().put(\"value\", \"token-id\").toString();\n  private static final String OAUTH_RESPONSE =\n      new JSONObject()\n          .put(\"access_token\", TOKEN)\n          .put(\"token_type\", \"token-type\")\n          .put(\"expires_in\", 360)\n          .toString();\n\n  @Test\n  void shouldAbortIfNotAzure() {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setCredentialsProvider(provider)\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\");\n\n    assertNull(provider.configure(config));\n  }\n\n  @Test\n  void shouldAbortIfMissingActionsIdTokenParameters() {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(provider)\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\");\n\n    assertNull(provider.configure(config));\n  }\n\n  @Test\n  void shouldThrowIfTokenIdResponseIsNot200() throws MalformedURLException {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    HttpClient mockClient = mockClient(makeResponse(TOKEN_RESPONSE, 500));\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(new AzureGithubOidcCredentialsProvider())\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\")\n            .setHttpClient(mockClient);\n\n    assertThrows(DatabricksException.class, () -> provider.configure(config));\n  }\n\n  @Test\n  void shouldThrowIfInvalidTokenId() throws MalformedURLException {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    HttpClient mockClient = mockClient(makeResponse(\":-(\", 200));\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(new AzureGithubOidcCredentialsProvider())\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\")\n            .setHttpClient(mockClient);\n\n    assertThrows(DatabricksException.class, () -> provider.configure(config));\n  }\n\n  @Test\n  void shouldThrowIfTokenIdException() {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    HttpClient mockClient = mockClient(new IOException(\"test error\"));\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(new AzureGithubOidcCredentialsProvider())\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\")\n            .setHttpClient(mockClient);\n\n    assertThrows(DatabricksException.class, () -> provider.configure(config));\n  }\n\n  @Test\n  void shouldThrowIfOAuthResponseException() throws IOException {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    HttpClient mockClient =\n        mockClient(makeResponse(TOKEN_RESPONSE, 200), new IOException(\"test error\"));\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(provider)\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\")\n            .setHttpClient(mockClient);\n\n    HeaderFactory headerFactory = provider.configure(config);\n    assertThrows(DatabricksException.class, headerFactory::headers);\n  }\n\n  @Test\n  void shouldThrowIfInvalidOAuthResponse() throws IOException {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    HttpClient mockClient = mockClient(makeResponse(TOKEN_RESPONSE, 200), makeResponse(\":-(\", 200));\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(provider)\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\")\n            .setHttpClient(mockClient);\n\n    HeaderFactory headerFactory = provider.configure(config);\n    assertThrows(DatabricksException.class, headerFactory::headers);\n  }\n\n  @Test\n  void success() throws IOException {\n    CredentialsProvider provider = new AzureGithubOidcCredentialsProvider();\n\n    HttpClient mockClient =\n        mockClient(makeResponse(TOKEN_RESPONSE, 200), makeResponse(OAUTH_RESPONSE, 200));\n\n    DatabricksConfig config =\n        new DatabricksConfig()\n            .setHost(\".azuredatabricks.net\")\n            .setCredentialsProvider(provider)\n            .setAzureClientId(\"clientID\")\n            .setAzureTenantId(\"tenantID\")\n            .setActionsIdTokenRequestToken(\"action-token\")\n            .setActionsIdTokenRequestUrl(\"action-url\")\n            .setHttpClient(mockClient);\n\n    HeaderFactory header = provider.configure(config);\n\n    String token = header.headers().get(\"Authorization\");\n    assertEquals(token, \"Bearer \" + TOKEN);\n  }\n\n  private static Response makeResponse(String body, int status) throws MalformedURLException {\n    return new Response(body, status, \"status\", new URL(\"https://databricks.com/\"));\n  }\n\n  private static HttpClient mockClient(Object... responses) {\n    Iterator<Object> iterator = Arrays.asList(responses).iterator();\n    return (Request in) -> {\n      Object next = iterator.next();\n      if (next instanceof Response) {\n        return (Response) next;\n      } else if (next instanceof IOException) {\n        throw (IOException) next;\n      } else {\n        return null;\n      }\n    };\n  }\n}"
