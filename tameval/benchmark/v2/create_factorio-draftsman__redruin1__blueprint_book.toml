[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "redruin1/factorio-draftsman"
sha = "4a795c6530c6d5ea2571c8a234164da22928a4a1"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=draftsman/classes/blueprint_book.py -m pytest -q --junit-xml=test_output.xml test/test_blueprint_book.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target draftsman.classes.blueprint_book --unit-test test.test_blueprint_book --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target draftsman/classes/blueprint_book.py --unit-test test/test_blueprint_book.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 25, 30, 34, 36, 37, 38, 39, 41, 43, 45, 47, 53, 54, 60, 61, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 83, 88, 89, 90, 91, 94, 99, 100, 101, 102, 104, 107, 108, 109, 111, 113, 116, 122, 123, 129, 130, 131, 136, 143, 154, 157, 168, 169, 170, 171, 172, 174, 176, 179, 195, 196, 197, 200,]
missed_lines = [ 62, 63, 64,]

[input_info]
test_file_path = "test/test_blueprint_book.py"
focal_file_path = "draftsman/classes/blueprint_book.py"
test_file_url = "https://github.com/redruin1/factorio-draftsman/blob/4a795c6530c6d5ea2571c8a234164da22928a4a1/test/test_blueprint_book.py"
focal_file_url = "https://github.com/redruin1/factorio-draftsman/blob/4a795c6530c6d5ea2571c8a234164da22928a4a1/draftsman/classes/blueprint_book.py"
first_commit_date = "2023-08-01"
last_commit_date = "2025-08-12"
test_file_content = "# test_blueprint_book.py\n\nfrom draftsman.classes.blueprint import Blueprint\nfrom draftsman.classes.deconstruction_planner import DeconstructionPlanner\nfrom draftsman.classes.upgrade_planner import UpgradePlanner\nfrom draftsman.classes.blueprint_book import BlueprintableList, BlueprintBook\nfrom draftsman.data import mods\nfrom draftsman.error import (\n    IncorrectBlueprintTypeError,\n    DataFormatError,\n    IncompleteSignalError,\n)\nfrom draftsman.signatures import Color, Icon\nfrom draftsman.utils import encode_version, string_to_JSON, version_tuple_to_string\nfrom draftsman.warning import UnknownSignalWarning\n\nimport pytest\n\n\nclass TestBlueprintableList:\n    def test_constructor(self):\n        # Test initializer conversion\n        bp_string = \"0eNpNjl0KgzAQhO8yz1EwmNrmKqUUfxYb0I0ksa1I7t7EQunTMsPMt7Ojm1ZanOEAvcP0lj30dYc3I7dT9sK2EDRMoBkC3M5ZrTyQG51Nt+hoCogCJnlv6CreBIiDCYa+rENsd17njlwK/Cgvawfion+QD4m9WJ9KlvPXBJKyVAIbdFGVKmbqsUH/TRZ4kvNHRZ6rurnIRqm6Vs0pxg8hIEgA\"\n\n        dp_string = \"0eNqrVkpJTc7PKy4pKk0uyczPiy/ISczLSy1SsqpWKk4tKcnMSy9WssorzcnRUcosSc1VskLToAvToKNUllpUDBRRsjKyMDQxtzQyNzUDIhOL2loAsN4j2w==\"\n\n        up_string = \"0eNqrViotSC9KTEmNL8hJzMtLLVKyqlYqTi0pycxLL1ayyivNydFRyixJzVWygqnUhanUUSpLLSrOzM9TsjKyMDQxtzQyNzUDIhOL2loAhpkdww==\"\n\n        bpb_string = \"0eNqrVkrKKU0tKMrMK4lPys/PVrKqRogUK1lFI3FBcpklqblKVkhiOkplqUXFmfl5SlZGFoYm5pZG5qamJiam5ma1OkqZeSmpFUpWBrWxOhg6dcHW6SglJpdklqXGw5TiMa8WAEeOOPY=\"\n\n        initlist = [\n            Blueprint(),  # object\n            DeconstructionPlanner(),  # object\n            UpgradePlanner(),  # object\n            BlueprintBook(),  # object\n            string_to_JSON(bp_string),  # dict\n            string_to_JSON(dp_string),  # dict\n            string_to_JSON(up_string),  # dict\n            string_to_JSON(bpb_string),  # dict\n        ]\n\n        blueprintable_list = BlueprintableList(initlist)\n        assert isinstance(blueprintable_list[0], Blueprint)\n        assert isinstance(blueprintable_list[1], DeconstructionPlanner)\n        assert isinstance(blueprintable_list[2], UpgradePlanner)\n        assert isinstance(blueprintable_list[3], BlueprintBook)\n        assert isinstance(blueprintable_list[4], Blueprint)\n        assert isinstance(blueprintable_list[5], DeconstructionPlanner)\n        assert isinstance(blueprintable_list[6], UpgradePlanner)\n        assert isinstance(blueprintable_list[7], BlueprintBook)\n\n        # Errors\n        with pytest.raises(TypeError):\n            BlueprintableList([\"incorrect\"])\n\n        with pytest.raises(IncorrectBlueprintTypeError):\n            BlueprintableList([{\"incorrect\": \"thing\"}])\n\n    def test_setitem(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.blueprints.append(Blueprint())\n        assert isinstance(blueprint_book.blueprints[0], Blueprint)\n        blueprint_book.blueprints[0] = BlueprintBook()\n        assert isinstance(blueprint_book.blueprints[0], BlueprintBook)\n\n        with pytest.raises(TypeError):\n            blueprint_book.blueprints[0] = \"incorrect\"\n\n    def test_delitem(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.blueprints.append(Blueprint())\n\n        del blueprint_book.blueprints[0]\n\n        assert blueprint_book.blueprints.data == []\n\n    def test_eq(self):\n        a = BlueprintBook()\n        b = BlueprintBook()\n        assert a.blueprints == b.blueprints\n\n        b.blueprints = [Blueprint()]\n        assert a.blueprints != b.blueprints\n\n        # Different type\n        assert a.blueprints != TypeError\n\n    def test_repr(self):\n        assert repr(BlueprintBook().blueprints) == \"BlueprintableList([])\"\n\n\nclass TestBlueprintBook:\n    def test_constructor(self):\n        blueprint_book = BlueprintBook()\n\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"active_index\": 0,\n                \"item\": \"blueprint-book\",\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n\n        example = {\n            \"blueprint_book\": {\n                \"active_index\": 0,\n                \"item\": \"blueprint-book\",\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n        blueprint_book = BlueprintBook.from_dict(example)\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"active_index\": 0,\n                \"item\": \"blueprint-book\",\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n\n        blueprint_book = BlueprintBook.from_string(\n            \"0eNqrVkrKKU0tKMrMK4lPys/PVrKqVsosSc1VskJI6IIldJQSk0syy1LjM/NSUiuUrAx0lMpSi4oz8/OUrIwsDE3MLY3MTQ1NDY3NDGprAVVBHPY=\"\n        )\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"active_index\": 0,\n                \"item\": \"blueprint-book\",\n                \"version\": encode_version(1, 1, 53, 0),\n            }\n        }\n\n        # Test icons\n        blueprint_book = BlueprintBook.from_string(\n            \"0eNpFi1EKwjAQBe/yviPYkhjNVURK2i4SbHdLE6sScnfbIvj53sxktMOTpjlwalqRB1xGSDTC/cFhBwqhE45w14wY7uyHzU2fiVZ3TxTYj9t6ifQoa8A9veGqclPwXQoLNb/rqLDQHIMwXH2utL3U1hitjT2V8gXrTjDd\"\n        )\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"active_index\": 0,\n                \"item\": \"blueprint-book\",\n                \"icons\": [{\"index\": 1, \"signal\": {\"name\": \"wood\", \"type\": \"item\"}}],\n                \"version\": encode_version(1, 1, 59, 0),\n            }\n        }\n\n        # Test description\n        blueprint_book = BlueprintBook.from_string(\n            \"0eNpNys0KgCAQBOBXiT1bVPTrrScJrT0smYaZBNG7Z14K5jLzzQVSHbhZ0m6UxizALyCHK/AP0ggMlJCoAgyJFitmYZlxnyxtjoyO+6+/LCZHHkfSM57AcwYe7R6/ZVdUbV+2dRNSdff9AJD5LO0=\"\n        )\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"active_index\": 0,\n                \"item\": \"blueprint-book\",\n                \"label\": \"A name.\",\n                \"description\": \"A description.\",\n                \"version\": encode_version(1, 1, 61, 0),\n            }\n        }\n\n        # Incorrect constructor\n        # with pytest.raises(DataFormatError):\n        #     BlueprintBook(DataFormatError)\n\n        # Valid blueprint string, but wrong type\n        with pytest.raises(IncorrectBlueprintTypeError):\n            BlueprintBook.from_string(\n                \"0eNqrVkrKKU0tKMrMK1GyqlbKLEnNVbJCEtNRKkstKs7Mz1OyMrIwNDG3NDI3NTI0s7A0q60FAHmRE1c=\"\n            )\n\n    # def test_validate(self):\n    #     incorrect_data = {\n    #         \"blueprint_book\": {\n    #             \"item\": \"very-wrong\",  # This is ignored; TODO: is this a good idea?\n    #             \"version\": \"wrong\",\n    #         }\n    #     }\n    #     bpb = BlueprintBook(incorrect_data, validate=\"none\")\n    #     assert bpb.version == \"wrong\"\n    #     assert bpb.to_dict() == {\n    #         \"blueprint_book\": {\"item\": \"blueprint-book\", \"version\": \"wrong\"}\n    #     }\n\n    #     # Issue Errors\n    #     with pytest.raises(DataFormatError):\n    #         bpb.validate().reissue_all()\n\n    #     # Fix\n    #     bpb.version = (1, 0)\n    #     assert bpb.version == 281474976710656\n    #     bpb.validate().reissue_all()  # Nothing\n\n    #     bpb.validate_assignment = \"none\"\n    #     bpb.icons = [{\"signal\": {\"name\": \"unknown\", \"type\": \"item\"}, \"index\": 0}]\n\n    #     # No warnings\n    #     bpb.validate(mode=\"minimum\").reissue_all()\n\n    #     # Issue warnings\n    #     with pytest.warns(UnknownSignalWarning):\n    #         bpb.validate(mode=\"strict\").reissue_all()\n\n    # def test_setup(self):\n    #     blueprint_book = BlueprintBook()\n    #     example = {\n    #         \"item\": \"blueprint-book\",\n    #         \"label\": \"a label\",\n    #         \"label_color\": {\"r\": 50, \"g\": 50, \"b\": 50},\n    #         \"active_index\": 1,\n    #         \"blueprints\": [],\n    #         \"version\": encode_version(*mods.versions[\"base\"]),\n    #     }\n    #     blueprint_book.setup(**example)\n    #     assert blueprint_book.to_dict() == {\n    #         \"blueprint_book\": {\n    #             \"item\": \"blueprint-book\",\n    #             \"label\": \"a label\",\n    #             \"label_color\": {\"r\": 50, \"g\": 50, \"b\": 50},\n    #             \"active_index\": 1,\n    #             \"version\": encode_version(*mods.versions[\"base\"]),\n    #         }\n    #     }\n\n    #     with pytest.warns(DraftsmanWarning):\n    #         blueprint_book.setup(unused_keyword=\"whatever\")  # No warning!\n    #         blueprint_book.validate().reissue_all()  # Warning\n\n    def test_set_label(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.version = (1, 1, 54, 0)\n        # String\n        blueprint_book.label = \"testing The LABEL\"\n        assert blueprint_book.label == \"testing The LABEL\"\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"label\": \"testing The LABEL\",\n                \"active_index\": 0,\n                \"version\": encode_version(1, 1, 54, 0),\n            }\n        }\n        # None\n        blueprint_book.label = None\n        assert blueprint_book.label == \"\"\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,\n                \"version\": encode_version(1, 1, 54, 0),\n            }\n        }\n        # None (no validation)\n        blueprint_book.validate_assignment = \"none\"\n        blueprint_book.label = None\n        assert blueprint_book.label == \"\"\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,\n                \"version\": encode_version(1, 1, 54, 0),\n            }\n        }\n\n    def test_set_label_color(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.version = (1, 1, 54, 0)\n        # Valid 3 args\n        # Test for floating point conversion error by using 0.1\n        blueprint_book.label_color = (0.5, 0.1, 0.5)\n        assert blueprint_book.label_color == Color(**{\"r\": 0.5, \"g\": 0.1, \"b\": 0.5})\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"label_color\": {\"r\": 0.5, \"g\": 0.1, \"b\": 0.5},\n                \"active_index\": 0,\n                \"version\": encode_version(1, 1, 54, 0),\n            }\n        }\n        # Valid 4 args\n        blueprint_book.label_color = (1.0, 1.0, 1.0, 0.25)\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"label_color\": {\"r\": 1.0, \"g\": 1.0, \"b\": 1.0, \"a\": 0.25},\n                \"active_index\": 0,\n                \"version\": encode_version(1, 1, 54, 0),\n            }\n        }\n        # Valid None\n        blueprint_book.label_color = None\n        assert blueprint_book.label_color is None\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,\n                \"version\": encode_version(1, 1, 54, 0),\n            }\n        }\n\n        # TODO: reimplement\n        # with pytest.raises(DataFormatError):\n        #     blueprint_book.label_color = (TypeError, TypeError, TypeError)\n\n        # # Invalid Data\n        # with pytest.raises(DataFormatError):\n        #     blueprint_book.label_color = (\"red\", blueprint_book, 5)\n\n    def test_set_icons(self):\n        blueprint_book = BlueprintBook()\n        # Single Icon\n        blueprint_book.icons = [\"signal-A\"]\n        assert blueprint_book.icons == [\n            Icon(**{\"signal\": {\"name\": \"signal-A\", \"type\": \"virtual\"}, \"index\": 0})\n        ]\n        # Multiple Icons\n        blueprint_book.icons = [\"signal-A\", \"signal-B\", \"signal-C\"]\n        assert blueprint_book.icons == [\n            Icon(**{\"signal\": {\"name\": \"signal-A\", \"type\": \"virtual\"}, \"index\": 0}),\n            Icon(**{\"signal\": {\"name\": \"signal-B\", \"type\": \"virtual\"}, \"index\": 1}),\n            Icon(**{\"signal\": {\"name\": \"signal-C\", \"type\": \"virtual\"}, \"index\": 2}),\n        ]\n\n        # Raw signal dicts\n        blueprint_book.icons = []\n        with pytest.raises(DataFormatError):\n            blueprint_book.icons = [\n                {\"signal\": {\"name\": TypeError, \"type\": \"some-type\"}}\n            ]\n        assert blueprint_book.icons == []\n\n        with pytest.warns(UnknownSignalWarning):\n            blueprint_book.icons = [\n                Icon(\n                    **{\"signal\": {\"name\": \"some-signal\", \"type\": \"virtual\"}, \"index\": 0}\n                )\n            ]\n            assert blueprint_book.icons == [\n                Icon(\n                    **{\"signal\": {\"name\": \"some-signal\", \"type\": \"virtual\"}, \"index\": 0}\n                )\n            ]\n\n        # None\n        blueprint_book.icons = []\n        assert blueprint_book.icons == []\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,  # Default\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n\n        # Incorrect Signal Name\n        with pytest.raises(IncompleteSignalError):\n            blueprint_book.icons = [\"wrong!\"]\n\n        # Incorrect Signal Type\n        with pytest.raises(DataFormatError):\n            blueprint_book.icons = [123456, TypeError]\n\n    def test_set_active_index(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.blueprints.append(Blueprint())\n        blueprint_book.blueprints.append(Blueprint())\n        blueprint_book.active_index = 1\n        assert blueprint_book.active_index == 1\n\n        # Errors\n        with pytest.raises(DataFormatError):\n            blueprint_book.active_index = -1\n        with pytest.raises(DataFormatError):\n            blueprint_book.active_index = \"incorrect\"\n\n    def test_set_version(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.version = (1, 0, 40, 0)\n        assert blueprint_book.version == 281474979332096\n\n        with pytest.raises(DataFormatError):\n            blueprint_book.version = TypeError\n\n        with pytest.raises(DataFormatError):\n            blueprint_book.version = (\"1\", \"0\", \"40\", \"0\")\n\n    def test_set_blueprints(self):\n        blueprint_book = BlueprintBook()\n\n        assert isinstance(blueprint_book.blueprints, BlueprintableList)\n        assert blueprint_book.blueprints.data == []\n\n        blueprints = [\n            Blueprint(label=\"A\"),\n            BlueprintBook(),\n            Blueprint(label=\"B\"),\n        ]\n\n        blueprint_book.blueprints = blueprints\n\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,  # Default\n                \"blueprints\": [\n                    {\n                        \"index\": 0,\n                        \"blueprint\": {\n                            \"item\": \"blueprint\",\n                            \"label\": \"A\",\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                    {\n                        \"index\": 1,\n                        \"blueprint_book\": {\n                            \"item\": \"blueprint-book\",\n                            \"active_index\": 0,  # Default\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                    {\n                        \"index\": 2,\n                        \"blueprint\": {\n                            \"item\": \"blueprint\",\n                            \"label\": \"B\",\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                ],\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n\n        new_blueprint_book = BlueprintBook()\n        new_blueprint_book.blueprints = blueprint_book.blueprints\n        assert new_blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,  # Default\n                \"blueprints\": [\n                    {\n                        \"index\": 0,\n                        \"blueprint\": {\n                            \"item\": \"blueprint\",\n                            \"label\": \"A\",\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                    {\n                        \"index\": 1,\n                        \"blueprint_book\": {\n                            \"item\": \"blueprint-book\",\n                            \"active_index\": 0,  # Default\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                    {\n                        \"index\": 2,\n                        \"blueprint\": {\n                            \"item\": \"blueprint\",\n                            \"label\": \"B\",\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                ],\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n\n        blueprint_book.blueprints = None\n        assert isinstance(blueprint_book.blueprints, BlueprintableList)\n        assert blueprint_book.blueprints.data == []\n\n        with pytest.raises(TypeError):\n            blueprint_book.blueprints = TypeError\n\n    def test_custom_index(self):\n        blueprint_book = BlueprintBook()\n\n        blueprint = Blueprint()\n        blueprint_book.blueprints.append(blueprint)\n        blueprint = Blueprint()\n        blueprint.index = 5\n        blueprint_book.blueprints.append(blueprint)\n\n        assert blueprint_book.blueprints[1].index == 5\n        assert len(blueprint_book.blueprints) == 2\n\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,\n                \"blueprints\": [\n                    {\n                        \"index\": 0,\n                        \"blueprint\": {\n                            \"item\": \"blueprint\",\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                    {\n                        \"index\": 5,\n                        \"blueprint\": {\n                            \"item\": \"blueprint\",\n                            \"version\": encode_version(*mods.versions[\"base\"]),\n                        },\n                    },\n                ],\n                \"version\": encode_version(*mods.versions[\"base\"]),\n            }\n        }\n\n        # blueprint = Blueprint(validate_assignment=\"none\")\n        # blueprint.index = \"incorrect\"\n        # assert blueprint.index == \"incorrect\"\n        # blueprint_book.blueprints.append(blueprint)\n\n        # assert len(blueprint_book.blueprints) == 3\n        # assert blueprint_book.to_dict() == {\n        #     \"blueprint_book\": {\n        #         \"item\": \"blueprint-book\",\n        #         \"blueprints\": [\n        #             {\n        #                 # \"index\": 0, # Default\n        #                 \"blueprint\": {\n        #                     \"item\": \"blueprint\",\n        #                     \"version\": encode_version(*mods.versions[\"base\"]),\n        #                 },\n        #             },\n        #             {\n        #                 \"index\": 5,\n        #                 \"blueprint\": {\n        #                     \"item\": \"blueprint\",\n        #                     \"version\": encode_version(*mods.versions[\"base\"]),\n        #                 },\n        #             },\n        #             {\n        #                 \"index\": \"incorrect\",\n        #                 \"blueprint\": {\n        #                     \"item\": \"blueprint\",\n        #                     \"version\": encode_version(*mods.versions[\"base\"]),\n        #                 },\n        #             },\n        #         ],\n        #         \"version\": encode_version(*mods.versions[\"base\"]),\n        #     }\n        # }\n\n    def test_version_tuple(self):\n        blueprint_book = BlueprintBook()\n        assert blueprint_book.version_tuple() == mods.versions[\"base\"]\n        blueprint_book.version = 0\n        assert blueprint_book.version_tuple() == (0, 0, 0, 0)\n\n    def test_version_string(self):\n        blueprint_book = BlueprintBook()\n        assert blueprint_book.version_string() == version_tuple_to_string(\n            mods.versions[\"base\"]\n        )\n        blueprint_book.version = (0, 0, 0, 0)\n        assert blueprint_book.version_string() == \"0.0.0.0\"\n\n    def test_to_string(self):\n        blueprint_book = BlueprintBook()\n        blueprint_book.version = (1, 1, 53, 0)\n        # self.assertEqual(\n        #     blueprint_book.to_string(),\n        #     \"0eNqrVkrKKU0tKMrMK4lPys/PVrKqVsosSc1VskJI6IIldJQSk0syy1LjM/NSUiuUrAx0lMpSi4oz8/OUrIwsDE3MLY3MTQ1NDY3NDGprAVVBHPY=\"\n        # )\n\n        # TODO: reimplement\n        # assert blueprint_book.blueprints is blueprint_book._root[\"blueprint_book\"][\"blueprints\"]\n        # assert blueprint_book.blueprints is blueprint_book[\"blueprint_book\"][\"blueprints\"]\n\n    def test_import_from_string(self):\n        test_string = \"\"\"0eNqVj+0KgjAYhe/l/T1hqaTuViJE3YuM1jvZhwRj996KNOhH1N/Dec5HhFEHXKwi34/GXEDEt+JAnCJInAw5b8PklaF+0QMR2ofRofeK5myjoDUD5fEK4gMoNoDBitZlBUTZHuqmK5v22PGK1ymjJPEGgicWISyzHST+0PRy/lVRpfPO70+L53cGQ568Yr+t+ZKX7knXakI=\"\"\"\n        blueprint_book = BlueprintBook.from_string(test_string)\n\n        assert len(blueprint_book.blueprints) == 2\n        assert blueprint_book.blueprints[0].index == 0\n        assert blueprint_book.blueprints[1].index == 3\n        assert blueprint_book.to_dict() == {\n            \"blueprint_book\": {\n                \"item\": \"blueprint-book\",\n                \"active_index\": 0,\n                \"version\": 281479278690304,\n                \"blueprints\": [\n                    {\n                        \"deconstruction_planner\": {\n                            \"item\": \"deconstruction-planner\",\n                            \"version\": 281479278690304,\n                        },\n                        \"index\": 0,\n                    },\n                    {\n                        \"upgrade_planner\": {\n                            \"item\": \"upgrade-planner\",\n                            \"version\": 281479278690304,\n                        },\n                        \"index\": 3,\n                    },\n                ],\n            }\n        }\n"
