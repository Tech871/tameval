[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "TheAlgorithms/Java"
sha = "16345cba6db8657bf4b83fc7392920aa00a3e170"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=LinkListSortTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.LinkListSort  -DtargetTests=**.LinkListSortTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 97.0
original_coverage = 97.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 7, 10, 12, 14, 17, 19, 20, 21, 24, 26, 27, 28, 29, 31, 33, 35, 37, 38, 39, 42, 44, 45, 49, 50, 53, 55, 56, 57, 58, 60, 62, 64, 65, 67, 68, 69, 72, 74, 78, 79, 80, 83, 85, 86, 87, 88, 90, 92, 94, 96, 97, 98, 101, 103, 104, 126, 127, 131, 137, 144, 149, 152, 153, 155, 156, 157, 160, 161, 163, 164, 167, 171, 173, 174, 176, 182, 183, 184, 185, 186, 189, 192, 193, 194, 195, 196, 197, 198, 200, 204, 205, 207, 208, 210, 211, 213, 217, 220, 221, 223, 224, 226, 229, 230, 231, 233, 234, 236, 238, 239, 240, 243, 248, 249, 250, 252, 259, 262, 265, 266, 268, 269, 270, 273, 274, 275, 276, 279, 283, 285, 286, 288, 294, 295, 296, 298, 299, 300, 301, 302, 305, 308, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 323,]
missed_lines = [ 109, 112, 128, 150, 263,]

[input_info]
test_file_path = "src/test/java/com/thealgorithms/others/LinkListSortTest.java"
focal_file_path = "src/main/java/com/thealgorithms/sorts/LinkListSort.java"
test_file_url = "https://github.com/TheAlgorithms/Java/blob/16345cba6db8657bf4b83fc7392920aa00a3e170/src/test/java/com/thealgorithms/others/LinkListSortTest.java"
focal_file_url = "https://github.com/TheAlgorithms/Java/blob/16345cba6db8657bf4b83fc7392920aa00a3e170/src/main/java/com/thealgorithms/sorts/LinkListSort.java"
first_commit_date = "2022-10-24"
last_commit_date = "2024-10-13"
test_file_content = "package com.thealgorithms.others;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport com.thealgorithms.sorts.LinkListSort;\nimport org.junit.jupiter.api.Test;\n\npublic class LinkListSortTest {\n\n    @Test\n    void testForOneElement() {\n        int[] a = {56};\n        assertTrue(LinkListSort.isSorted(a, 2));\n    }\n\n    @Test\n    void verifySingleElementSorting() {\n        int[] a = {56};\n        assertTrue(LinkListSort.isSorted(a, 2));\n    }\n\n    @Test\n    void testForTwoElements() {\n        int[] a = {6, 4};\n        assertTrue(LinkListSort.isSorted(a, 1));\n    }\n\n    @Test\n    void checkTwoElementMergeSort() {\n        int[] a = {6, 4};\n        assertTrue(LinkListSort.isSorted(a, 1));\n    }\n\n    @Test\n    void testForThreeElements() {\n        int[] a = {875, 253, 12};\n        assertTrue(LinkListSort.isSorted(a, 3));\n    }\n\n    @Test\n    void testForFourElements() {\n        int[] a = {86, 32, 87, 13};\n        assertTrue(LinkListSort.isSorted(a, 1));\n    }\n\n    @Test\n    void testForFiveElements() {\n        int[] a = {6, 5, 3, 0, 9};\n        assertTrue(LinkListSort.isSorted(a, 1));\n    }\n\n    @Test\n    void testForSixElements() {\n        int[] a = {9, 65, 432, 32, 47, 327};\n        assertTrue(LinkListSort.isSorted(a, 3));\n    }\n\n    @Test\n    void testForSevenElements() {\n        int[] a = {6, 4, 2, 1, 3, 6, 7};\n        assertTrue(LinkListSort.isSorted(a, 1));\n    }\n\n    @Test\n    void testForEightElements() {\n        int[] a = {123, 234, 145, 764, 322, 367, 768, 34};\n        assertTrue(LinkListSort.isSorted(a, 2));\n    }\n}"
