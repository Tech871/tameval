[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bufbuild/buf"
sha = "37b5a2a496a2279aa03507be64cba00193644a1e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out private/bufpkg/bufimage/bufimageutil/source_paths_remap.go private/bufpkg/bufimage/bufimageutil/source_paths_remap_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting private/bufpkg/bufimage/bufimageutil/source_paths_remap.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 78.0
original_coverage = 78.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 46, 47, 48, 57, 58, 59, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 105, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 141, 143,]
missed_lines = [ 51, 52, 53, 62, 63, 64, 106, 107, 108, 109, 110, 111, 112, 113, 138, 139, 140,]

[input_info]
test_file_path = "private/bufpkg/bufimage/bufimageutil/source_paths_remap_test.go"
focal_file_path = "private/bufpkg/bufimage/bufimageutil/source_paths_remap.go"
test_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/bufpkg/bufimage/bufimageutil/source_paths_remap_test.go"
focal_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/bufpkg/bufimage/bufimageutil/source_paths_remap.go"
first_commit_date = "2023-05-09"
last_commit_date = "2025-01-02"
test_file_content = "// Copyright 2020-2025 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage bufimageutil\n\nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestSourcePathsRemapTrie_Insert(t *testing.T) {\n\tt.Parallel()\n\texpectedSlices := [][]string{\n\t\t{\"4\"},\n\t\t{\"4\", \"1 -> -1\"},\n\t\t{\"4\", \"2 -> 1\"},\n\t\t{\"4\", \"2 -> 1\", \"2\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"0 -> -1\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\", \"8\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\", \"8\", \"3 -> -1\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\", \"8\", \"4 -> -1\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\", \"8\", \"5 -> 3\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\", \"8\", \"6 -> 4\"},\n\t\t{\"4\", \"2 -> 1\", \"2\", \"1 -> 0\", \"8\", \"7 -> 5\"},\n\t\t{\"4\", \"3 -> 2\"},\n\t\t{\"4\", \"4 -> 3\"},\n\t\t{\"4\", \"5 -> -1\"},\n\t}\n\tt.Run(\"in order\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\ttrie := createTrie(nil)\n\t\tslices := asSlices(trie)\n\t\trequire.Equal(t, expectedSlices, slices)\n\t})\n\t// shuffle a few times and make sure the trie is always constructed correctly\n\tfor i := 0; i < 5; i++ {\n\t\trnd := rand.New(rand.NewSource(int64(i)))\n\t\tt.Run(fmt.Sprintf(\"random order %d\", i), func(t *testing.T) {\n\t\t\tt.Parallel()\n\t\t\ttrie := createTrie(func(ops []insertionOp) []insertionOp {\n\t\t\t\tshuffle(rnd, ops)\n\t\t\t\treturn ops\n\t\t\t})\n\t\t\tslices := asSlices(trie)\n\t\t\trequire.Equal(t, expectedSlices, slices)\n\t\t})\n\t}\n}\n\nfunc TestSourcePathsRemapTrie_NewPath(t *testing.T) {\n\tt.Parallel()\n\ttrie := createTrie(nil)\n\t// make sure the items in the trie construct correct new path\n\tpath, noComment := trie.newPath([]int32{4, 1})\n\trequire.Nil(t, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2})\n\trequire.Equal(t, []int32{4, 1}, path)\n\trequire.True(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 0})\n\trequire.Nil(t, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1})\n\trequire.Equal(t, []int32{4, 1, 2, 0}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1, 8, 3})\n\trequire.Nil(t, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1, 8, 4})\n\trequire.Nil(t, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1, 8, 5})\n\trequire.Equal(t, []int32{4, 1, 2, 0, 8, 3}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1, 8, 6})\n\trequire.Equal(t, []int32{4, 1, 2, 0, 8, 4}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1, 8, 7})\n\trequire.Equal(t, []int32{4, 1, 2, 0, 8, 5}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 3})\n\trequire.Equal(t, []int32{4, 2}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 4})\n\trequire.Equal(t, []int32{4, 3}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 5})\n\trequire.Nil(t, path)\n\trequire.False(t, noComment)\n\n\t// items not in the trie or not re-written remain unchanged\n\tpath, noComment = trie.newPath([]int32{0, 1, 2, 3})\n\trequire.Equal(t, []int32{0, 1, 2, 3}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 0, 3, 2, 8, 5})\n\trequire.Equal(t, []int32{4, 0, 3, 2, 8, 5}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 6})\n\trequire.Equal(t, []int32{4, 6}, path)\n\trequire.False(t, noComment)\n\t// items that are descendants of re-written items are also changed\n\tpath, noComment = trie.newPath([]int32{4, 2, 2, 1, 8, 5, 5, 9, 4, 4})\n\trequire.Equal(t, []int32{4, 1, 2, 0, 8, 3, 5, 9, 4, 4}, path)\n\trequire.False(t, noComment)\n\tpath, noComment = trie.newPath([]int32{4, 4, 9, 4, 3, 5})\n\trequire.Equal(t, []int32{4, 3, 9, 4, 3, 5}, path)\n\trequire.False(t, noComment)\n\t// items that are descendants of deleted items are also deleted\n\tpath, noComment = trie.newPath([]int32{4, 5, 1, 3, 4, 5})\n\trequire.Nil(t, path)\n\trequire.False(t, noComment)\n}\n\ntype insertionOp struct {\n\toldPath  []int32\n\tnewIndex int32\n}\n\nfunc createTrie(permutation func([]insertionOp) []insertionOp) *sourcePathsRemapTrie {\n\t// Test data has the following source info path changes\n\t// \t\t4,1 -> deleted\n\t// \t\t4,2 -> 4,1 *no comment\n\t// \t\t4,2,2,0 -> deleted\n\t// \t\t4,2,2,1 -> 4,1,2,0\n\t// \t\t4,2,2,1,8,3 -> deleted\n\t// \t\t4,2,2,1,8,4 -> deleted\n\t// \t\t4,2,2,1,8,5 -> 4,1,2,0,8,3\n\t// \t\t4,2,2,1,8,6 -> 4,1,2,0,8,4\n\t// \t\t4,2,2,1,8,7 -> 4,1,2,0,8,5\n\t// \t\t4,3 -> 4,2\n\t// \t\t4,4 -> 4,3\n\t// \t\t4,5 -> deleted\n\t// Test data is sorted (unless permutation function rearranges)\n\tops := []insertionOp{\n\t\t{[]int32{4, 1}, -1},\n\t\t{[]int32{4, 2}, 1},\n\t\t{[]int32{4, 2}, -2},\n\t\t{[]int32{4, 2, 2, 0}, -1},\n\t\t{[]int32{4, 2, 2, 1}, 0},\n\t\t{[]int32{4, 2, 2, 1, 8, 3}, -1},\n\t\t{[]int32{4, 2, 2, 1, 8, 4}, -1},\n\t\t{[]int32{4, 2, 2, 1, 8, 5}, 3},\n\t\t{[]int32{4, 2, 2, 1, 8, 6}, 4},\n\t\t{[]int32{4, 2, 2, 1, 8, 7}, 5},\n\t\t{[]int32{4, 3}, 2},\n\t\t{[]int32{4, 4}, 3},\n\t\t{[]int32{4, 5}, -1},\n\t}\n\tif permutation != nil {\n\t\tops = permutation(ops)\n\t}\n\ttrie := &sourcePathsRemapTrie{}\n\tfor _, op := range ops {\n\t\tif op.newIndex == -2 {\n\t\t\ttrie.markNoComment(op.oldPath)\n\t\t\tcontinue\n\t\t}\n\t\ttrie.markMoved(op.oldPath, op.newIndex)\n\t}\n\treturn trie\n}\n\nfunc shuffle[T any](rnd *rand.Rand, slice []T) {\n\tfor i := range slice {\n\t\tpick := rnd.Intn(len(slice)-i) + i\n\t\tif i != pick {\n\t\t\tslice[i], slice[pick] = slice[pick], slice[i]\n\t\t}\n\t}\n}\n\nfunc asSlices(t *sourcePathsRemapTrie) [][]string {\n\tvar result [][]string\n\tfor _, child := range *t {\n\t\ttoSlices(child, nil, &result)\n\t}\n\treturn result\n}\n\nfunc toSlices(t *sourcePathsRemapTrieNode, soFar []string, result *[][]string) {\n\tif t.oldIndex == t.newIndex {\n\t\tsoFar = append(soFar, fmt.Sprintf(\"%d\", t.oldIndex))\n\t} else {\n\t\tsoFar = append(soFar, fmt.Sprintf(\"%d -> %d\", t.oldIndex, t.newIndex))\n\t}\n\tclone := make([]string, len(soFar))\n\tcopy(clone, soFar)\n\t*result = append(*result, clone)\n\tif len(t.children) == 0 {\n\t\treturn\n\t}\n\tfor _, child := range t.children {\n\t\ttoSlices(child, soFar, result)\n\t}\n}\n"
