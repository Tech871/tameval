[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/bifromq"
sha = "c07c2c0099f39282ba5fd30d6af8c2e91b03348d"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl base-util -Dtest=CompletableFutureUtilTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl base-util -DtargetClasses=**.CompletableFutureUtil  -DtargetTests=**.CompletableFutureUtilTest  -DoutputFormats=XML"
coverage_report_path = "base-util/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "base-util/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 91.0
original_coverage = 91.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 38, 39, 40, 41, 54, 55, 56, 67, 68, 69,]
missed_lines = [ 29,]

[input_info]
test_file_path = "base-util/src/test/java/org/apache/bifromq/base/util/CompletableFutureUtilTest.java"
focal_file_path = "base-util/src/main/java/org/apache/bifromq/base/util/CompletableFutureUtil.java"
test_file_url = "https://github.com/apache/bifromq/blob/c07c2c0099f39282ba5fd30d6af8c2e91b03348d/base-util/src/test/java/org/apache/bifromq/base/util/CompletableFutureUtilTest.java"
focal_file_url = "https://github.com/apache/bifromq/blob/c07c2c0099f39282ba5fd30d6af8c2e91b03348d/base-util/src/main/java/org/apache/bifromq/base/util/CompletableFutureUtil.java"
first_commit_date = "2025-06-03"
last_commit_date = "2025-06-06"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.bifromq.base.util;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertNull;\nimport static org.testng.Assert.assertSame;\n\nimport java.util.concurrent.CompletionException;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.function.BiConsumer;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport org.testng.annotations.Test;\n\npublic class CompletableFutureUtilTest {\n\n    @Test\n    void testUnwrap_BiConsumer() {\n        AtomicReference<Throwable> captured = new AtomicReference<>();\n\n        BiConsumer<String, Throwable> original = (res, ex) -> captured.set(ex);\n\n        BiConsumer<String, Throwable> wrapped = CompletableFutureUtil.unwrap(original);\n\n        IllegalStateException cause = new IllegalStateException(\"boom\");\n        wrapped.accept(\"ignored\", new CompletionException(cause));\n        assertSame(cause, captured.get());\n\n        IllegalArgumentException iae = new IllegalArgumentException(\"arg\");\n        wrapped.accept(\"ignored\", iae);\n        assertSame(iae, captured.get());\n\n        captured.set(new RuntimeException());\n        wrapped.accept(\"ignored\", null);\n        assertNull(captured.get());\n    }\n\n    @Test\n    void testUnwrap_BiFunction() {\n        BiFunction<String, Throwable, String> originalFn =\n            (res, ex) -> ex == null ? res : ex.getClass().getSimpleName();\n\n        BiFunction<String, Throwable, String> wrappedFn = CompletableFutureUtil.unwrap(originalFn);\n\n        IllegalStateException cause = new IllegalStateException();\n        String result1 = wrappedFn.apply(\"OK\", new CompletionException(cause));\n        assertEquals(result1, \"IllegalStateException\");\n\n        String result2 = wrappedFn.apply(\"HELLO\", null);\n        assertEquals(result2, \"HELLO\");\n    }\n\n    @Test\n    void testUnwrap_Function() {\n        AtomicReference<Throwable> captured = new AtomicReference<>();\n\n        Function<Throwable, Object> original = (e) -> {\n            captured.set(e);\n            return null;\n        };\n        Function<Throwable, Object> wrapped = CompletableFutureUtil.unwrap(original);\n\n        IllegalStateException cause = new IllegalStateException(\"fail\");\n        wrapped.apply(new CompletionException(cause));\n        assertSame(cause, captured.get());\n\n        IllegalArgumentException iae = new IllegalArgumentException(\"arg\");\n        wrapped.apply(iae);\n        assertSame(iae, captured.get());\n\n        captured.set(new RuntimeException());\n        wrapped.apply(null);\n        assertNull(captured.get());\n    }\n}"
