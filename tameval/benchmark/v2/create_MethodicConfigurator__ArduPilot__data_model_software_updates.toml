[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "ArduPilot/MethodicConfigurator"
sha = "8f14cac0abb19c133ba74e6693d4efb6385cb8f0"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ardupilot_methodic_configurator/data_model_software_updates.py -m pytest -q --junit-xml=test_output.xml tests/test_data_model_software_updates.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ardupilot_methodic_configurator.data_model_software_updates --unit-test tests.test_data_model_software_updates --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ardupilot_methodic_configurator/data_model_software_updates.py --unit-test tests/test_data_model_software_updates.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 75.0
original_coverage = 94.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 34, 37, 40, 43, 46, 48, 57, 60, 61, 63, 64, 65, 67, 71, 72, 73, 74, 79, 84, 87, 88, 89, 91, 92, 99, 100, 101, 102, 103, 105, 109, 112, 113, 115, 116, 118, 119, 120, 128, 129, 138, 140, 142, 143, 145, 146, 149, 150, 151, 152, 155,]
missed_lines = [ 76, 77, 85, 86, 95, 96, 97, 106, 107, 121, 122, 123, 124, 125, 126, 130, 135, 147, 148, 156, 157, 163,]

[input_info]
test_file_path = "tests/test_data_model_software_updates.py"
focal_file_path = "ardupilot_methodic_configurator/data_model_software_updates.py"
test_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/tests/test_data_model_software_updates.py"
focal_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/ardupilot_methodic_configurator/data_model_software_updates.py"
first_commit_date = "2025-08-16"
last_commit_date = "2025-08-16"
test_file_content = "#!/usr/bin/env python3\n\n\"\"\"\nTests for data_model_software_updates.py.\n\nThis file is part of Ardupilot methodic configurator. https://github.com/ArduPilot/MethodicConfigurator\n\nSPDX-FileCopyrightText: 2024-2025 Amilcar do Carmo Lucas <amilcar.lucas@iav.de>\n\nSPDX-License-Identifier: GPL-3.0-or-later\n\"\"\"\n\nfrom argparse import ArgumentParser\nfrom unittest.mock import Mock, patch\n\nimport pytest\nfrom requests import RequestException as requests_RequestException\n\nfrom ardupilot_methodic_configurator import _\nfrom ardupilot_methodic_configurator.data_model_software_updates import (\n    UpdateManager,\n    check_for_software_updates,\n    format_version_info,\n)\n\n# pylint: disable=redefined-outer-name, protected-access\n\n@pytest.fixture\ndef mock_dialog() -> Mock:\n    dialog = Mock()\n    dialog.show.return_value = True\n    dialog.update_progress = Mock()\n    return dialog\n\n@pytest.fixture\ndef update_manager() -> UpdateManager:\n    return UpdateManager()\n\nclass TestUpdateManager:\n    \"\"\"Test cases for the UpdateManager class.\"\"\"\n\n    def test_check_and_update_key_error(self, update_manager) -> None:  # pylint: disable=redefined-outer-name\n        latest_release = {}\n        current_version = \"1.0.0\"\n\n        with patch(\"ardupilot_methodic_configurator.data_model_software_updates.logging_error\") as mock_logging_error:\n            assert not update_manager.check_and_update(latest_release, current_version)\n            mock_logging_error.assert_called_once()\n\ndef test_format_version_info_complex_changes() -> None:\n    changes = \"Feature [#123)([author)) Multiple tags\\nBug [#456)([contributor)) Mixed content\"\n    result = format_version_info(\"1.0.0\", \"2.0.0\", changes)\n    assert \"[#123)\" not in result\n    assert \"[#456)\" not in result\n    assert \"([author))\" not in result\n    assert \"([contributor))\" not in result\n    assert \"Multiple tags\" in result\n    assert \"Mixed content\" in result\n\ndef test_format_version_info_empty_changes() -> None:\n    result = format_version_info(\"1.0.0\", \"2.0.0\", \"\")\n    assert \"Current version: 1.0.0\" in result\n    assert \"Latest version: 2.0.0\" in result\n    assert \"Changes:\" in result\n\ndef test_check_for_software_updates_network_error() -> None:\n    \"\"\"Test software update check with network error.\"\"\"\n    with (\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.get_release_info\",\n            side_effect=requests_RequestException(\"Network error\"),\n        ),\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.LocalFilesystem.get_git_commit_hash\",\n            return_value=\"abc123\",\n        ),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.logging_info\"),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.logging_error\") as mock_logging_error,\n    ):\n        assert check_for_software_updates() is False\n        mock_logging_error.assert_called_once()\n\ndef test_update_manager_perform_download_no_dialog(update_manager) -> None:  # pylint: disable=redefined-outer-name\n    \"\"\"Test download with no dialog.\"\"\"\n    latest_release = {\"assets\": [{\"browser_download_url\": \"url\", \"name\": \"name\"}]}\n\n    with (\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.platform.system\", return_value=\"Windows\"),\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.download_and_install_on_windows\", return_value=True\n        ),\n    ):\n        assert update_manager._perform_download(latest_release) is True\n\ndef test_update_manager_check_and_update_user_cancels(update_manager) -> None:  # pylint: disable=redefined-outer-name\n    \"\"\"Test when user cancels the update dialog.\"\"\"\n    latest_release = {\"tag_name\": \"v2.0.0\", \"body\": \"New features\"}\n    current_version = \"1.0.0\"\n\n    with (\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.webbrowser_open\"),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.UpdateDialog\") as mock_update_dialog_class,\n    ):\n        mock_dialog = Mock()\n        mock_dialog.show.return_value = False  # User cancels the dialog\n        mock_update_dialog_class.return_value = mock_dialog\n\n        assert update_manager.check_and_update(latest_release, current_version) is False\n        mock_update_dialog_class.assert_called_once()\n\ndef test_update_manager_perform_download_mac(update_manager, mock_dialog) -> None:  # pylint: disable=redefined-outer-name\n    \"\"\"Test download on macOS.\"\"\"\n    update_manager.dialog = mock_dialog\n    latest_release = {}\n\n    with (\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.platform.system\", return_value=\"Darwin\"),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.download_and_install_pip_release\", return_value=0),\n    ):\n        assert update_manager._perform_download(latest_release) is True\n\ndef test_check_for_software_updates_value_error() -> None:\n    \"\"\"Test software update check with ValueError.\"\"\"\n    with (\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.get_release_info\",\n            side_effect=ValueError(\"Format error\"),\n        ),\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.LocalFilesystem.get_git_commit_hash\",\n            return_value=\"abc123\",\n        ),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.logging_info\"),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.logging_error\") as mock_logging_error,\n    ):\n        assert check_for_software_updates() is False\n        mock_logging_error.assert_called_once()\n\ndef test_update_manager_perform_download_windows_exception(update_manager, mock_dialog) -> None:  # pylint: disable=redefined-outer-name\n    \"\"\"Test exception during Windows download.\"\"\"\n    update_manager.dialog = mock_dialog\n    latest_release = {\"assets\": [{\"browser_download_url\": \"https://example.com/file.exe\", \"name\": \"file.exe\"}]}\n\n    with (\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.platform.system\", return_value=\"Windows\"),\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.download_and_install_on_windows\",\n            side_effect=Exception(\"Download failed\"),\n        ),\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.logging_error\") as mock_logging_error,\n    ):\n        assert update_manager._perform_download(latest_release) is False\n        mock_logging_error.assert_called_once()\n\ndef test_update_manager_perform_download_windows_asset_selection(update_manager, mock_dialog) -> None:  # pylint: disable=redefined-outer-name\n    \"\"\"Test selection of the correct asset on Windows.\"\"\"\n    update_manager.dialog = mock_dialog\n    latest_release = {\n        \"assets\": [\n            {\"browser_download_url\": \"https://example.com/source.tar.gz\", \"name\": \"source.tar.gz\"},\n            {\"browser_download_url\": \"https://example.com/setup.exe\", \"name\": \"setup.exe\"},\n            {\"browser_download_url\": \"https://example.com/linux.deb\", \"name\": \"linux.deb\"},\n        ]\n    }\n\n    with (\n        patch(\"ardupilot_methodic_configurator.data_model_software_updates.platform.system\", return_value=\"Windows\"),\n        patch(\n            \"ardupilot_methodic_configurator.data_model_software_updates.download_and_install_on_windows\", return_value=True\n        ) as mock_download,\n    ):\n        assert update_manager._perform_download(latest_release) is True\n        # Should have chosen the .exe file\n        mock_download.assert_called_once_with(\n            download_url=\"https://example.com/setup.exe\", file_name=\"setup.exe\", progress_callback=mock_dialog.update_progress\n        )\n"
