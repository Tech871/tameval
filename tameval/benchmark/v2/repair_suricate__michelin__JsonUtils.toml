[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "michelin/suricate"
sha = "9a15fd2f6de4e3fced8deb8f60160c43e27ba492"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=JsonUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.JsonUtils  -DtargetTests=**.JsonUtilsTest  -DoutputFormats=XML"
coverage_report_path = "target/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/michelin/suricate/util/JsonUtilsTest.java"
focal_file_path = "src/main/java/com/michelin/suricate/util/JsonUtils.java"
test_file_url = "https://github.com/michelin/suricate/blob/9a15fd2f6de4e3fced8deb8f60160c43e27ba492/src/test/java/com/michelin/suricate/util/JsonUtilsTest.java"
focal_file_url = "https://github.com/michelin/suricate/blob/9a15fd2f6de4e3fced8deb8f60160c43e27ba492/src/main/java/com/michelin/suricate/util/JsonUtils.java"
first_commit_date = "2024-04-07"
last_commit_date = "2025-03-12"
test_file_content = "package com.michelin.suricate.util;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.jupiter.api.Test;\n\nclass JsonUtilsTest {\n    @Test\n    void shouldBeInvalidNull() {\n        boolean actual = JsonUtils.isValid(null);\n        assertFalse(actual);\n    }\n\n    @Test\n    void shouldBeInvalidEmpty() {\n        boolean actual = JsonUtils.isValid(StringUtils.EMPTY);\n        assertFalse(actual);\n    }\n\n    @Test\n    void shouldBeInvalidFormat() {\n        boolean actual = JsonUtils.isValid(\"{\\\"test\\\":0\");\n        assertFalse(actual);\n    }\n\n    @Test\n    void shouldBeValid() {\n        boolean actual = JsonUtils.isValid(\"{\\\"test\\\":0}\");\n        assertTrue(actual);\n    }\n\n    @Test\n    void shouldFailWithIncorrectInitialization() {\n        Object mapper = new ObjectMapper();\n        mapper.readTree(jsonInString);\n        return true;\n    }\n\n    @Test\n    void shouldFailWithNonExistentMethod() {\n        boolean actual = JsonUtils.isValidd(\"{\\\"test\\\":0}\");\n        assertFalse(actual);\n    }\n\n    @Test\n    void shouldFailWithNonExistentArgument() {\n        boolean actual = JsonUtils.isValid(\"{\\\"test\\\":0}\", \"extraArg\");\n        assertFalse(actual);\n    }\n\n    @Test\n    void shouldFailWithAttributeCall() {\n        boolean actual = JsonUtils.isValid(StringUtils.EMPTY.length());\n        assertFalse(actual);\n    }\n}"
