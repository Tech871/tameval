[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.21.3"

[repo_info]
repository = "dablelv/cyan"
sha = "fcc58af2bdddc5303fa3360f2616ed0178089988"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out strings/word.go strings/word_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting strings/word.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 34.0
original_coverage = 95.0
mutation_kill_rate = 28.0
original_mutation_kill_rate = 68.0
covered_lines = [ 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 89, 93, 94, 95, 96, 98,]
missed_lines = [ 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 38, 40, 41, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 91, 92,]

[input_info]
test_file_path = "strings/word_test.go"
focal_file_path = "strings/word.go"
test_file_url = "https://github.com/dablelv/cyan/blob/fcc58af2bdddc5303fa3360f2616ed0178089988/strings/word_test.go"
focal_file_url = "https://github.com/dablelv/cyan/blob/fcc58af2bdddc5303fa3360f2616ed0178089988/strings/word.go"
first_commit_date = "2025-04-23"
last_commit_date = "2025-04-23"
test_file_content = "package strings\n\nimport (\n\t\"testing\"\n\n\t\"github.com/dablelv/cyan/internal/utest\"\n)\n\n\n\nfunc TestUncapitalize(t *testing.T) {\n\tassert := utest.NewAssert(t, \"Uncapitalize\")\n\n\tassert.Equal(\"\", Uncapitalize(\"\"))\n\n\tin := \"This Is A.Test\"\n\n\tassert.Equal(\"this is a.Test\", Uncapitalize(in))\n\n\tdelimiters := []rune{' ', '.'}\n\tassert.Equal(\"this is a.test\", Uncapitalize(in, delimiters...))\n}\n"
