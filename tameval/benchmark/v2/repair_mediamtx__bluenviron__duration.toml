[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bluenviron/mediamtx"
sha = "416ac1357ea1125768a6e874f695656f510bd524"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/conf/duration.go internal/conf/duration_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/conf/duration.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 81.0
original_coverage = 81.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 66, 67, 68, 69, 75, 76, 77, 78, 80, 81, 85, 86, 91, 96,]
missed_lines = [ 70, 71, 72, 87, 88, 89, 92, 93, 94, 100, 101, 102,]

[input_info]
test_file_path = "internal/conf/duration_test.go"
focal_file_path = "internal/conf/duration.go"
test_file_url = "https://github.com/bluenviron/mediamtx/blob/416ac1357ea1125768a6e874f695656f510bd524/internal/conf/duration_test.go"
focal_file_url = "https://github.com/bluenviron/mediamtx/blob/416ac1357ea1125768a6e874f695656f510bd524/internal/conf/duration.go"
first_commit_date = "2025-01-02"
last_commit_date = "2025-02-18"
test_file_content = "package conf\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar casesDuration = []struct {\n\tname string\n\tdec  Duration\n\tenc  string\n}{\n\t{\n\t\t\"standard\",\n\t\tDuration(13456 * time.Second),\n\t\t`\"3h44m16s\"`,\n\t},\n\t{\n\t\t\"days\",\n\t\tDuration(50 * 13456 * time.Second),\n\t\t`\"7d18h53m20s\"`,\n\t},\n\t{\n\t\t\"days negative\",\n\t\tDuration(-50 * 13456 * time.Second),\n\t\t`\"-7d18h53m20s\"`,\n\t},\n\t{\n\t\t\"days even\",\n\t\tDuration(7 * 24 * time.Hour),\n\t\t`\"7d\"`,\n\t},\n}\n\nfunc TestDurationUnmarshal(t *testing.T) {\n\tfor _, ca := range casesDuration {\n\t\tt.Run(ca.name, func(t *testing.T) {\n\t\t\tvar dec Duration\n\t\t\terr := dec.UnmarshalJSON([]byte(ca.enc))\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, ca.dec, dec)\n\t\t})\n\t}\n}\n\nfunc TestDurationMarshal(t *testing.T) {\n\tfor _, ca := range casesDuration {\n\t\tt.Run(ca.name, func(t *testing.T) {\n\t\t\tenc, err := ca.dec.MarshalJSON()\n\t\t\trequire.NoError(t, err)\n\t\t\trequire.Equal(t, ca.enc, string(enc))\n\t\t})\n\t}\n}"
