[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "thoughtworks/talisman"
sha = "12fab7055d7e640d5dae43209bafc48bf5ef1fd7"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out detector/helpers/ignore_evaluator.go detector/helpers/ignore_evaluator_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting detector/helpers/ignore_evaluator.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 26.0
original_coverage = 70.0
mutation_kill_rate = 25.0
original_mutation_kill_rate = 100.0
covered_lines = [ 17, 18, 19, 22, 23, 24,]
missed_lines = [ 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 51, 53,]

[input_info]
test_file_path = "detector/helpers/ignore_evaluator_test.go"
focal_file_path = "detector/helpers/ignore_evaluator.go"
test_file_url = "https://github.com/thoughtworks/talisman/blob/12fab7055d7e640d5dae43209bafc48bf5ef1fd7/detector/helpers/ignore_evaluator_test.go"
focal_file_url = "https://github.com/thoughtworks/talisman/blob/12fab7055d7e640d5dae43209bafc48bf5ef1fd7/detector/helpers/ignore_evaluator.go"
first_commit_date = "2025-03-21"
last_commit_date = "2025-03-21"
test_file_content = "package helpers\n\nimport (\n\t\"io\"\n\t\"talisman/gitrepo\"\n\n\tlogr \"github.com/sirupsen/logrus\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"testing\"\n)\n\nfunc init() {\n\tlogr.SetOutput(io.Discard)\n}\n\ntype sillyChecksumCalculator struct{}\n\nfunc (scc *sillyChecksumCalculator) CalculateCollectiveChecksumForPattern(fileNamePattern string) string {\n\treturn \"silly\"\n}\nfunc (scc *sillyChecksumCalculator) SuggestTalismanRC(fileNamePatterns []string) string {\n\treturn \"\"\n}\n\n\nfunc TestNeverIgnoreFilesForHistory(t *testing.T) {\n\tscanAllEvaluator := ScanHistoryEvaluator()\n\tassert.False(t, scanAllEvaluator.ShouldIgnore(gitrepo.Addition{Name: \"any-file\"}, \"any_detector\"))\n}\n"
