[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pytorch/captum"
sha = "aff7603051094012c9cf1a739a0538c38a6986b2"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=captum/_utils/progress.py -m pytest -q --junit-xml=test_output.xml tests/utils/test_progress.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target captum._utils.progress --unit-test tests.utils.test_progress --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target captum/_utils/progress.py --unit-test tests/utils/test_progress.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 47.0
original_coverage = 64.0
mutation_kill_rate = nan
original_mutation_kill_rate = 59.0
covered_lines = [ 4, 5, 6, 20, 22, 23, 26, 27, 34, 37, 38, 51, 54, 58, 67, 76, 79, 87, 93, 96, 122,]
missed_lines = [ 32, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 73, 74, 77, 85, 88, 89, 90, 91, 94, 97, 130,]

[input_info]
test_file_path = "tests/utils/test_progress.py"
focal_file_path = "captum/_utils/progress.py"
test_file_url = "https://github.com/pytorch/captum/blob/aff7603051094012c9cf1a739a0538c38a6986b2/tests/utils/test_progress.py"
focal_file_url = "https://github.com/pytorch/captum/blob/aff7603051094012c9cf1a739a0538c38a6986b2/captum/_utils/progress.py"
first_commit_date = "2021-03-16"
last_commit_date = "2025-06-06"
test_file_content = "#!/usr/bin/env python3\n\n# pyre-unsafe\n\nimport io\nimport unittest\nimport unittest.mock\n\nfrom captum._utils.progress import NullProgress, progress\nfrom tests.helpers import BaseTest\n\n\nclass Test(BaseTest):\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_nullprogress(self, mock_stderr) -> None:\n        count = 0\n        with NullProgress([\"x\", \"y\", \"z\"]) as np:\n            for _ in np:\n                for _ in NullProgress([1, 2, 3]):\n                    count += 1\n\n        self.assertEqual(count, 9)\n        output = mock_stderr.getvalue()\n        self.assertEqual(output, \"\")\n\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_nested_progress_tqdm(self, mock_stderr) -> None:\n        try:\n            import tqdm  # noqa: F401\n        except ImportError:\n            raise unittest.SkipTest(\"Skipping tqdm test, tqdm not available.\")\n\n        parent_data = [\"x\", \"y\", \"z\"]\n        test_data = [1, 2, 3]\n        with progress(parent_data, desc=\"parent progress\") as parent:\n            for item in parent:\n                for _ in progress(test_data, desc=f\"test progress {item}\"):\n                    pass\n        output = mock_stderr.getvalue()\n        self.assertIn(\"parent progress:\", output)\n        for item in parent_data:\n            self.assertIn(f\"test progress {item}:\", output)\n\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_nested_simple_progress(self, mock_stderr) -> None:\n        parent_data = [\"x\", \"y\", \"z\"]\n        test_data = [1, 2, 3]\n        with progress(\n            parent_data, desc=\"parent progress\", use_tqdm=False, mininterval=0.0\n        ) as parent:\n            for item in parent:\n                for _ in progress(\n                    test_data, desc=f\"test progress {item}\", use_tqdm=False\n                ):\n                    pass\n\n        output = mock_stderr.getvalue()\n        self.assertEqual(\n            output.count(\"parent progress:\"), 5, \"5 'parent' progress bar expected\"\n        )\n        for item in parent_data:\n            self.assertIn(f\"test progress {item}:\", output)\n\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_progress_tqdm(self, mock_stderr) -> None:\n        try:\n            import tqdm  # noqa: F401\n        except ImportError:\n            raise unittest.SkipTest(\"Skipping tqdm test, tqdm not available.\")\n\n        test_data = [1, 3, 5]\n\n        progressed = progress(test_data, desc=\"test progress\")\n        assert list(progressed) == test_data\n        assert \"test progress: \" in mock_stderr.getvalue()\n\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_simple_progress(self, mock_stderr) -> None:\n        test_data = [1, 3, 5]\n        desc = \"test progress\"\n\n        progressed = progress(test_data, desc=desc, use_tqdm=False)\n\n        assert list(progressed) == test_data\n        assert mock_stderr.getvalue().startswith(f\"\\r{desc}: 0% 0/3\")\n        assert mock_stderr.getvalue().endswith(f\"\\r{desc}: 100% 3/3\\n\")\n\n        # progress iterable without len but explicitly specify total\n        def gen():\n            for n in test_data:\n                yield n\n\n        mock_stderr.seek(0)\n        mock_stderr.truncate(0)\n\n        progressed = progress(gen(), desc=desc, total=len(test_data), use_tqdm=False)\n\n        assert list(progressed) == test_data\n        assert mock_stderr.getvalue().startswith(f\"\\r{desc}: 0% 0/3\")\n        assert mock_stderr.getvalue().endswith(f\"\\r{desc}: 100% 3/3\\n\")\n\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_simple_progress_without_total(self, mock_stderr) -> None:\n        test_data = [1, 3, 5]\n        desc = \"test progress\"\n\n        def gen():\n            for n in test_data:\n                yield n\n\n        progressed = progress(gen(), desc=desc, use_tqdm=False)\n\n        assert list(progressed) == test_data\n        assert mock_stderr.getvalue().startswith(f\"\\r{desc}: \")\n        assert mock_stderr.getvalue().endswith(f\"\\r{desc}: ...\\n\")\n\n    @unittest.mock.patch(\"sys.stderr\", new_callable=io.StringIO)\n    def test_simple_progress_update_manually(self, mock_stderr) -> None:\n        desc = \"test progress\"\n\n        p = progress(total=5, desc=desc, use_tqdm=False)\n        p.update(0)\n        p.update(2)\n        p.update(2)\n        p.update(1)\n        p.close()\n        assert mock_stderr.getvalue().startswith(f\"\\r{desc}: 0% 0/5\")\n        assert mock_stderr.getvalue().endswith(f\"\\r{desc}: 100% 5/5\\n\")"
