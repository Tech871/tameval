[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "stackitcloud/stackit-cli"
sha = "13c97c95a2ced03b7caf6038c900f6d0628e384b"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/cmd/load-balancer/target-pool/add-target/add_target.go internal/cmd/load-balancer/target-pool/add-target/add_target_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/cmd/load-balancer/target-pool/add-target/add_target.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 58.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/cmd/load-balancer/target-pool/add-target/add_target_test.go"
focal_file_path = "internal/cmd/load-balancer/target-pool/add-target/add_target.go"
test_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/load-balancer/target-pool/add-target/add_target_test.go"
focal_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/load-balancer/target-pool/add-target/add_target.go"
first_commit_date = "2024-05-08"
last_commit_date = "2025-03-19"
test_file_content = "package addtarget\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/globalflags\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/print\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/utils\"\n\t\"github.com/stackitcloud/stackit-sdk-go/services/loadbalancer\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"github.com/google/uuid\"\n)\n\nvar projectIdFlag = globalflags.ProjectIdFlag\n\ntype testCtxKey struct{}\n\nvar (\n\ttestCtx       = context.WithValue(context.Background(), testCtxKey{}, \"foo\")\n\ttestClient    = &loadbalancer.APIClient{}\n\ttestProjectId = uuid.NewString()\n)\n\nconst (\n\ttestLBName         = \"my-load-balancer\"\n\ttestTargetPoolName = \"target-pool-1\"\n\ttestTargetName     = \"my-target\"\n\ttestIP             = \"1.1.1.1\"\n)\n\ntype loadBalancerClientMocked struct {\n\tgetCredentialsFails  bool\n\tgetCredentialsResp   *loadbalancer.GetCredentialsResponse\n\tgetLoadBalancerFails bool\n\tgetLoadBalancerResp  *loadbalancer.LoadBalancer\n}\n\nfunc (m *loadBalancerClientMocked) GetCredentialsExecute(_ context.Context, _, _ string) (*loadbalancer.GetCredentialsResponse, error) {\n\tif m.getCredentialsFails {\n\t\treturn nil, fmt.Errorf(\"could not get credentials\")\n\t}\n\treturn m.getCredentialsResp, nil\n}\n\nfunc (m *loadBalancerClientMocked) GetLoadBalancerExecute(_ context.Context, _, _ string) (*loadbalancer.LoadBalancer, error) {\n\tif m.getLoadBalancerFails {\n\t\treturn nil, fmt.Errorf(\"could not get load balancer\")\n\t}\n\treturn m.getLoadBalancerResp, nil\n}\n\nfunc (m *loadBalancerClientMocked) UpdateTargetPool(ctx context.Context, projectId, loadBalancerName, targetPoolName string) loadbalancer.ApiUpdateTargetPoolRequest {\n\treturn testClient.UpdateTargetPool(ctx, projectId, loadBalancerName, targetPoolName)\n}\n\nfunc (m *loadBalancerClientMocked) ListLoadBalancersExecute(_ context.Context, _ string) (*loadbalancer.ListLoadBalancersResponse, error) {\n\treturn nil, nil\n}\n\nfunc fixtureArgValues(mods ...func(argValues []string)) []string {\n\targValues := []string{\n\t\ttestIP,\n\t}\n\tfor _, mod := range mods {\n\t\tmod(argValues)\n\t}\n\treturn argValues\n}\n\nfunc fixtureFlagValues(mods ...func(flagValues map[string]string)) map[string]string {\n\tflagValues := map[string]string{\n\t\tprojectIdFlag:      testProjectId,\n\t\tlbNameFlag:         testLBName,\n\t\ttargetNameFlag:     testTargetName,\n\t\ttargetPoolNameFlag: testTargetPoolName,\n\t}\n\tfor _, mod := range mods {\n\t\tmod(flagValues)\n\t}\n\treturn flagValues\n}\n\nfunc fixtureInputModel(mods ...func(model *inputModel)) *inputModel {\n\tmodel := &inputModel{\n\t\tGlobalFlagModel: &globalflags.GlobalFlagModel{\n\t\t\tProjectId: testProjectId,\n\t\t\tVerbosity: globalflags.VerbosityDefault,\n\t\t},\n\t\tTargetPoolName: testTargetPoolName,\n\t\tLBName:         testLBName,\n\t\tTargetName:     testTargetName,\n\t\tIP:             testIP,\n\t}\n\tfor _, mod := range mods {\n\t\tmod(model)\n\t}\n\treturn model\n}\n\nfunc fixtureTargets() *[]loadbalancer.Target {\n\treturn &[]loadbalancer.Target{\n\t\t{\n\t\t\tDisplayName: utils.Ptr(\"target-1\"),\n\t\t\tIp:          utils.Ptr(\"1.2.3.4\"),\n\t\t},\n\t\t{\n\t\t\tDisplayName: utils.Ptr(\"target-2\"),\n\t\t\tIp:          utils.Ptr(\"4.3.2.1\"),\n\t\t},\n\t}\n}\n\nfunc fixtureLoadBalancer(mods ...func(*loadbalancer.LoadBalancer)) *loadbalancer.LoadBalancer {\n\tlb := loadbalancer.LoadBalancer{\n\t\tName: utils.Ptr(testLBName),\n\t\tTargetPools: &[]loadbalancer.TargetPool{\n\t\t\t{\n\t\t\t\tName:    utils.Ptr(testTargetPoolName),\n\t\t\t\tTargets: fixtureTargets(),\n\t\t\t\tActiveHealthCheck: &loadbalancer.ActiveHealthCheck{\n\t\t\t\t\tUnhealthyThreshold: utils.Ptr(int64(3)),\n\t\t\t\t},\n\t\t\t\tSessionPersistence: &loadbalancer.SessionPersistence{\n\t\t\t\t\tUseSourceIpAddress: utils.Ptr(true),\n\t\t\t\t},\n\t\t\t\tTargetPort: utils.Ptr(int64(80)),\n\t\t\t},\n\t\t\t{\n\t\t\t\tName: utils.Ptr(\"target-pool-2\"),\n\t\t\t\tTargets: &[]loadbalancer.Target{\n\t\t\t\t\t{\n\t\t\t\t\t\tDisplayName: utils.Ptr(\"target-1\"),\n\t\t\t\t\t\tIp:          utils.Ptr(\"6.7.8.9\"),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tDisplayName: utils.Ptr(\"target-2\"),\n\t\t\t\t\t\tIp:          utils.Ptr(\"9.8.7.6\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, mod := range mods {\n\t\tmod(&lb)\n\t}\n\treturn &lb\n}\n\nfunc fixturePayload(mods ...func(payload *loadbalancer.UpdateTargetPoolPayload)) *loadbalancer.UpdateTargetPoolPayload {\n\tpayload := &loadbalancer.UpdateTargetPoolPayload{\n\t\tName: utils.Ptr(\"target-pool-1\"),\n\t\tActiveHealthCheck: &loadbalancer.ActiveHealthCheck{\n\t\t\tUnhealthyThreshold: utils.Ptr(int64(3)),\n\t\t},\n\t\tSessionPersistence: &loadbalancer.SessionPersistence{\n\t\t\tUseSourceIpAddress: utils.Ptr(true),\n\t\t},\n\t\tTargetPort: utils.Ptr(int64(80)),\n\t\tTargets:    fixtureTargets(),\n\t}\n\n\tfor _, mod := range mods {\n\t\tmod(payload)\n\t}\n\treturn payload\n}\n\nfunc fixtureRequest(mods ...func(request *loadbalancer.ApiUpdateTargetPoolRequest)) loadbalancer.ApiUpdateTargetPoolRequest {\n\trequest := testClient.UpdateTargetPool(testCtx, testProjectId, testLBName, testTargetPoolName)\n\trequest = request.UpdateTargetPoolPayload(*fixturePayload())\n\tfor _, mod := range mods {\n\t\tmod(&request)\n\t}\n\treturn request\n}\n\nfunc TestParseInput(t *testing.T) {\n\ttests := []struct {\n\t\tdescription   string\n\t\targValues     []string\n\t\tflagValues    map[string]string\n\t\tisValid       bool\n\t\texpectedModel *inputModel\n\t}{\n\t\t{\n\t\t\tdescription:   \"base\",\n\t\t\targValues:     fixtureArgValues(),\n\t\t\tflagValues:    fixtureFlagValues(),\n\t\t\tisValid:       true,\n\t\t\texpectedModel: fixtureInputModel(),\n\t\t},\n\t\t{\n\t\t\tdescription: \"no arg values\",\n\t\t\targValues:   []string{},\n\t\t\tflagValues:  fixtureFlagValues(),\n\t\t\tisValid:     false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id missing\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tdelete(flagValues, projectIdFlag)\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id invalid 1\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[projectIdFlag] = \"\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id invalid 2\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[projectIdFlag] = \"invalid-uuid\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"ip missing\",\n\t\t\targValues:   []string{\"\"},\n\t\t\tflagValues:  fixtureFlagValues(),\n\t\t\tisValid:     false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"load balancer name missing\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tdelete(flagValues, lbNameFlag)\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"target name missing\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tdelete(flagValues, targetNameFlag)\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"target pool name missing\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tdelete(flagValues, targetPoolNameFlag)\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\tp := print.NewPrinter()\n\t\t\tcmd := NewCmd(p)\n\n\t\t\terr := globalflags.Configure(cmd.Flags())\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"configure global flags: %v\", err)\n\t\t\t}\n\n\t\t\tfor flag, value := range tt.flagValues {\n\t\t\t\terr := cmd.Flags().Set(flag, value)\n\t\t\t\tif err != nil {\n\t\t\t\t\tif !tt.isValid {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tt.Fatalf(\"setting flag --%s=%s: %v\", flag, value, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\terr = cmd.ValidateArgs(tt.argValues)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating args: %v\", err)\n\t\t\t}\n\n\t\t\terr = cmd.ValidateRequiredFlags()\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating flags: %v\", err)\n\t\t\t}\n\n\t\t\tmodel, err := parseInput(p, cmd, tt.argValues)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error parsing flags: %v\", err)\n\t\t\t}\n\n\t\t\tif !tt.isValid {\n\t\t\t\tt.Fatalf(\"did not fail on invalid input\")\n\t\t\t}\n\t\t\tdiff := cmp.Diff(model, tt.expectedModel)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestBuildRequest(t *testing.T) {\n\ttests := []struct {\n\t\tdescription          string\n\t\tmodel                *inputModel\n\t\tisValid              bool\n\t\tgetLoadBalancerFails bool\n\t\tgetLoadBalancerResp  *loadbalancer.LoadBalancer\n\t\texpectedRequest      loadbalancer.ApiUpdateTargetPoolRequest\n\t}{\n\t\t{\n\t\t\tdescription:         \"base\",\n\t\t\tmodel:               fixtureInputModel(),\n\t\t\tgetLoadBalancerResp: fixtureLoadBalancer(),\n\t\t\tisValid:             true,\n\t\t\texpectedRequest: fixtureRequest(func(request *loadbalancer.ApiUpdateTargetPoolRequest) {\n\t\t\t\tpayload := fixturePayload(func(payload *loadbalancer.UpdateTargetPoolPayload) {\n\t\t\t\t\tpayload.Targets = &[]loadbalancer.Target{\n\t\t\t\t\t\t(*fixtureTargets())[0],\n\t\t\t\t\t\t(*fixtureTargets())[1],\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDisplayName: utils.Ptr(testTargetName),\n\t\t\t\t\t\t\tIp:          utils.Ptr(testIP),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t*request = request.UpdateTargetPoolPayload(*payload)\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription: \"empty targets\",\n\t\t\tmodel:       fixtureInputModel(),\n\t\t\tgetLoadBalancerResp: fixtureLoadBalancer(func(lb *loadbalancer.LoadBalancer) {\n\t\t\t\t(*lb.TargetPools)[0].Targets = &[]loadbalancer.Target{}\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedRequest: fixtureRequest(func(request *loadbalancer.ApiUpdateTargetPoolRequest) {\n\t\t\t\tpayload := fixturePayload(func(payload *loadbalancer.UpdateTargetPoolPayload) {\n\t\t\t\t\tpayload.Targets = &[]loadbalancer.Target{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDisplayName: utils.Ptr(testTargetName),\n\t\t\t\t\t\t\tIp:          utils.Ptr(testIP),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t*request = request.UpdateTargetPoolPayload(*payload)\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription: \"nil targets\",\n\t\t\tmodel:       fixtureInputModel(),\n\t\t\tgetLoadBalancerResp: fixtureLoadBalancer(func(lb *loadbalancer.LoadBalancer) {\n\t\t\t\t(*lb.TargetPools)[0].Targets = nil\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedRequest: fixtureRequest(func(request *loadbalancer.ApiUpdateTargetPoolRequest) {\n\t\t\t\tpayload := fixturePayload(func(payload *loadbalancer.UpdateTargetPoolPayload) {\n\t\t\t\t\tpayload.Targets = &[]loadbalancer.Target{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tDisplayName: utils.Ptr(testTargetName),\n\t\t\t\t\t\t\tIp:          utils.Ptr(testIP),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t*request = request.UpdateTargetPoolPayload(*payload)\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription:          \"get load balancer fails\",\n\t\t\tmodel:                fixtureInputModel(),\n\t\t\tgetLoadBalancerFails: true,\n\t\t\tisValid:              false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"target pool not found\",\n\t\t\tmodel: fixtureInputModel(\n\t\t\t\tfunc(model *inputModel) {\n\t\t\t\t\tmodel.TargetPoolName = \"not-existent\"\n\t\t\t\t}),\n\t\t\tgetLoadBalancerResp: fixtureLoadBalancer(),\n\t\t\tisValid:             false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"nil target pool\",\n\t\t\tmodel:       fixtureInputModel(),\n\t\t\tgetLoadBalancerResp: fixtureLoadBalancer(func(lb *loadbalancer.LoadBalancer) {\n\t\t\t\t*lb.TargetPools = nil\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\tclient := &loadBalancerClientMocked{\n\t\t\t\tgetLoadBalancerFails: tt.getLoadBalancerFails,\n\t\t\t\tgetLoadBalancerResp:  tt.getLoadBalancerResp,\n\t\t\t}\n\t\t\trequest, err := buildRequest(testCtx, tt.model, client)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error building request: %v\", err)\n\t\t\t}\n\n\t\t\tdiff := cmp.Diff(request, tt.expectedRequest,\n\t\t\t\tcmp.AllowUnexported(tt.expectedRequest),\n\t\t\t\tcmpopts.EquateComparable(testCtx),\n\t\t\t)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}"
