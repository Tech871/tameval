[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "bitpay/java-bitpay-client"
sha = "b78e729f828b7eafc68296e679539714e78e6994"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=RatesTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Rates  -DtargetTests=**.RatesTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 77.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 28, 29, 30, 59, 60, 61, 62, 63, 65, 66,]
missed_lines = [ 38, 49, 50,]

[input_info]
test_file_path = "src/test/java/com/bitpay/sdk/model/rate/RatesTest.java"
focal_file_path = "src/main/java/com/bitpay/sdk/model/rate/Rates.java"
test_file_url = "https://github.com/bitpay/java-bitpay-client/blob/b78e729f828b7eafc68296e679539714e78e6994/src/test/java/com/bitpay/sdk/model/rate/RatesTest.java"
focal_file_url = "https://github.com/bitpay/java-bitpay-client/blob/b78e729f828b7eafc68296e679539714e78e6994/src/main/java/com/bitpay/sdk/model/rate/Rates.java"
first_commit_date = "2023-05-15"
last_commit_date = "2024-01-23"
test_file_content = "/*\n * Copyright (c) 2019 BitPay\n */\npackage com.bitpay.sdk.model.rate;\n\nimport com.bitpay.sdk.client.RateClient;\nimport com.bitpay.sdk.exceptions.BitPayApiException;\nimport com.bitpay.sdk.exceptions.BitPayGenericException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\npublic class RatesTest {\n\n    @Mock\n    private RateClient client;\n\n    @Mock\n    private Rate rate1;\n\n    @Mock\n    private Rate rate2;\n\n\n    @Test\n    public void it_should_get_specific_rate() {\n        // given\n        final String btc = \"BTC\";\n        final double btcValue = 1.0;\n\n        Mockito.when(rate1.getCode()).thenReturn(\"ETH\");\n        Mockito.when(rate2.getCode()).thenReturn(btc);\n        Mockito.when(rate2.getValue()).thenReturn(btcValue);\n\n        List<Rate> rates = Arrays.asList(rate1, rate2);\n        Rates testedClass = getTestedClass(rates);\n\n        // when\n        final double result = testedClass.getRate(btc);\n\n        // then\n        Assertions.assertEquals(btcValue, result, 0);\n    }\n\n\n\n    private Rates getTestedClass(List<Rate> rates) {\n        return new Rates(rates);\n    }\n}\n"
