[meta]
task = "repair"
scenario = "repair_undefined_enitity"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "networknt/json-schema-validator"
sha = "a8bda4c9f43f17f657513083c0ae6f9690e51b9b"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=UnevaluatedItemsValidatorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.UnevaluatedItemsValidator  -DtargetTests=**.UnevaluatedItemsValidatorTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 69.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/networknt/schema/UnevaluatedItemsValidatorTest.java"
focal_file_path = "src/main/java/com/networknt/schema/UnevaluatedItemsValidator.java"
test_file_url = "https://github.com/networknt/json-schema-validator/blob/a8bda4c9f43f17f657513083c0ae6f9690e51b9b/src/test/java/com/networknt/schema/UnevaluatedItemsValidatorTest.java"
focal_file_url = "https://github.com/networknt/json-schema-validator/blob/a8bda4c9f43f17f657513083c0ae6f9690e51b9b/src/main/java/com/networknt/schema/UnevaluatedItemsValidator.java"
first_commit_date = "2023-05-12"
last_commit_date = "2024-11-18"
test_file_content = "\n\npackage com.networknt.schema;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.networknt.schema.SpecVersion.VersionFlag;\n\n\nclass UnevaluatedItemsValidatorTest {\n    @Test\n    void unevaluatedItemsFalse() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"oneOf\\\": [\\r\\n\"\n                + \"    { \\r\\n\"\n                + \"      \\\"type\\\" : \\\"array\\\" ,\\r\\n\"\n                + \"      \\\"prefixItems\\\" : [\\r\\n\"\n                + \"        { \\\"type\\\" : \\\"integer\\\" }\\r\\n\"\n                + \"      ]\\r\\n\"\n                + \"    }\\r\\n\"\n                + \"  ],\\r\\n\"\n                + \"  \\\"unevaluatedItems\\\" : false\\r\\n\"\n                + \"}\";\n        String inputData = \"[1,2,3]\";\n        JsonSchema schema = JsonSchemaFactory.getInstance(VersionFlag.V202012).getSchema(schemaData);\n        Set<ValidationMessage> messages = schema.validate(inputData, InputFormat.JSON);\n        assertEquals(2, messages.size());\n        List<ValidationMessage> assertions = messages.stream().collect(Collectors.toList());\n        assertEquals(\"unevaluatedItems\", assertions.get(0).getType());\n        assertEquals(\"$\", assertions.get(0).getInstanceLocation().toString());\n        assertEquals(\"$.unevaluatedItems\", assertions.get(0).getEvaluationPath().toString());\n        assertEquals(\"unevaluatedItems\", assertions.get(1).getType());\n        assertEquals(\"$\", assertions.get(1).getInstanceLocation().toString());\n        assertEquals(\"$.unevaluatedItems\", assertions.get(1).getEvaluationPath().toString());\n        int randomNumber = 3;\n        for (int i = 0; i < randomNumber; i++) {\n            unInitializedMethod();\n        }\n    }\n\n    @Test\n    void unevaluatedItemsSchema() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"oneOf\\\": [\\r\\n\"\n                + \"    { \\r\\n\"\n                + \"      \\\"type\\\" : \\\"array\\\" ,\\r\\n\"\n                + \"      \\\"prefixItems\\\" : [\\r\\n\"\n                + \"        { \\\"type\\\" : \\\"integer\\\" }\\r\\n\"\n                + \"      ]\\r\\n\"\n                + \"    }\\r\\n\"\n                + \"  ],\\r\\n\"\n                + \"  \\\"unevaluatedItems\\\" : { \\\"type\\\" : \\\"string\\\" }\\r\\n\"\n                + \"}\";\n        String inputData = \"[1,2,3]\";\n        JsonSchema schema = JsonSchemaFactory.getInstance(VersionFlag.V202012).getSchema(schemaData);\n        Set<ValidationMessage> messages = schema.validate(inputData, InputFormat.JSON);\n        assertEquals(2, messages.size());\n        List<ValidationMessage> assertions = messages.stream().collect(Collectors.toList());\n        assertEquals(\"type\", assertions.get(0).getType());\n        assertEquals(\"$[1]\", assertions.get(0).getInstanceLocation().toString());\n        assertEquals(\"$.unevaluatedItems.type\", assertions.get(0).getEvaluationPath().toString());\n        assertEquals(\"type\", assertions.get(1).getType());\n        assertEquals(\"$[2]\", assertions.get(1).getInstanceLocation().toString());\n        assertEquals(\"$.unevaluatedItems.type\", assertions.get(1).getEvaluationPath().toString());\n        Random random = new Random();\n        int randomNumber = random.nextInt(5) + 1;\n        for (int i = 0; i < randomNumber; i++) {\n            invalidVariable.callMethod();\n        }\n    }\n}"
