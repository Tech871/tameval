[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "GIScience/openrouteservice"
sha = "58549a4d0a2affe96463f3ef81081dd95411b243"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl ors-benchmark -Dtest=RouteRepositoryTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl ors-benchmark -DtargetClasses=**.RouteRepository  -DtargetTests=**.RouteRepositoryTest  -DoutputFormats=XML"
coverage_report_path = "ors-benchmark/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "ors-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 79.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 37, 38, 39, 41, 46, 50, 52, 53, 55, 57, 99, 101, 102, 103, 104, 106, 111, 112, 113, 115, 116, 117, 118, 119, 120, 124, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 142, 144, 147, 149, 150, 151, 152, 154,]
missed_lines = [ 36, 60, 62, 64, 69, 71, 72, 73, 75, 80, 82, 84, 89, 91, 92, 94,]

[input_info]
test_file_path = "ors-benchmark/src/test/java/org/heigit/ors/coordinates_generator/model/RouteRepositoryTest.java"
focal_file_path = "ors-benchmark/src/main/java/org/heigit/ors/coordinates_generator/model/RouteRepository.java"
test_file_url = "https://github.com/GIScience/openrouteservice/blob/58549a4d0a2affe96463f3ef81081dd95411b243/ors-benchmark/src/test/java/org/heigit/ors/coordinates_generator/model/RouteRepositoryTest.java"
focal_file_url = "https://github.com/GIScience/openrouteservice/blob/58549a4d0a2affe96463f3ef81081dd95411b243/ors-benchmark/src/main/java/org/heigit/ors/coordinates_generator/model/RouteRepository.java"
first_commit_date = "2025-03-19"
last_commit_date = "2025-03-19"
test_file_content = "package org.heigit.ors.coordinates_generator.model;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass RouteRepositoryTest {\n\n    private RouteRepository repository;\n    private final Set<String> profiles = Set.of(\"driving-car\", \"cycling-regular\");\n\n    @BeforeEach\n    @SuppressWarnings(\"unused\")\n    void setUp() {\n        repository = new RouteRepository(profiles);\n    }\n\n    @Test\n    void testAddRoute() {\n        double[] start = {8.681495, 49.41461};\n        double[] end = {8.686507, 49.41943};\n        double distance = 1500.5;\n        String profile = \"driving-car\";\n\n        Route route = new Route(start, end, distance, profile);\n        boolean added = repository.addRoute(route);\n\n    }\n\n    @Test\n    void testAddDuplicateRoute() {\n        double[] start = {8.681495, 49.41461};\n        double[] end = {8.686507, 49.41943};\n        double distance = 1500.5;\n        String profile = \"driving-car\";\n\n        Route route1 = new Route(start, end, distance, profile);\n        Route route2 = new Route(start, end, distance, profile);\n\n    }\n\n    @Test\n    void testAddRouteIfUnique() {\n        double[] start = {8.681495, 49.41461};\n        double[] end = {8.686507, 49.41943};\n        double distance = 1500.5;\n        String profile = \"driving-car\";\n\n        Route route = new Route(start, end, distance, profile);\n        boolean added = repository.addRouteIfUnique(route);\n\n    }\n\n    @Test\n    void testClear() {\n        for (String profile : profiles) {\n            for (int i = 0; i < 5; i++) {\n                double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n                double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n                repository.addRoute(new Route(start, end, 1500.5 + i * 100, profile));\n            }\n        }\n\n\n        repository.clear();\n\n    }\n\n    @Test\n    void testGetTotalRouteCount() {\n        for (String profile : profiles) {\n            for (int i = 0; i < 3; i++) {\n                double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n                double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n                repository.addRoute(new Route(start, end, 1500.5 + i * 100, profile));\n            }\n        }\n\n    }\n\n    @Test\n    void testIsProfileComplete() {\n        for (int i = 0; i < 5; i++) {\n            double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n            double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n            repository.addRoute(new Route(start, end, 1500.5 + i * 100, \"driving-car\"));\n        }\n\n    }\n\n    @Test\n    void testAreAllProfilesComplete() {\n        for (String profile : profiles) {\n            for (int i = 0; i < 5; i++) {\n                double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n                double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n                repository.addRoute(new Route(start, end, 1500.5 + i * 100, profile));\n            }\n        }\n\n    }\n\n    @Test\n    void testGetAllRoutes() {\n        for (String profile : profiles) {\n            for (int i = 0; i < 5; i++) {\n                double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n                double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n                repository.addRoute(new Route(start, end, 1500.5 + i * 100, profile));\n            }\n        }\n\n        List<Route> allRoutes = repository.getAllRoutes(10);\n        List<Route> limitedRoutes = repository.getAllRoutes(3);\n    }\n\n    @Test\n    void testWriteToCSV(@TempDir Path tempDir) throws IOException {\n        for (String profile : profiles) {\n            for (int i = 0; i < 2; i++) {\n                double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n                double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n                repository.addRoute(new Route(start, end, 1500.5 + i * 100, profile));\n            }\n        }\n\n        String filename = tempDir.resolve(\"routes.csv\").toString();\n        repository.writeToCSV(filename);\n\n        List<String> lines = Files.readAllLines(Path.of(filename));\n        for (int i = 1; i < lines.size(); i++) {\n        }\n        String limitedFilename = tempDir.resolve(\"routes_limited.csv\").toString();\n        repository.writeToCSV(limitedFilename, 1);\n\n        lines = Files.readAllLines(Path.of(limitedFilename));\n    }\n\n    @Test\n    void testGetProgressMessage() {\n        for (int i = 0; i < 3; i++) {\n            double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n            double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n            repository.addRoute(new Route(start, end, 1500.5 + i * 100, \"driving-car\"));\n        }\n        \n        for (int i = 0; i < 2; i++) {\n            double[] start = {8.681495 + i * 0.001, 49.41461 + i * 0.001};\n            double[] end = {8.686507 + i * 0.001, 49.41943 + i * 0.001};\n            repository.addRoute(new Route(start, end, 1500.5 + i * 100, \"cycling-regular\"));\n        }\n\n        String message = repository.getProgressMessage();\n    }\n\n    @Test\n    void testRepositoryWithUnknownProfile() {\n        Set<String> definedProfiles = new HashSet<>(profiles);\n        RouteRepository testRepo = new RouteRepository(definedProfiles);\n        double[] start = {8.681495, 49.41461};\n        double[] end = {8.686507, 49.41943};\n        Route route = new Route(start, end, 1500.5, \"undefined-profile\");\n        boolean added = testRepo.addRoute(route);\n    }\n}"
