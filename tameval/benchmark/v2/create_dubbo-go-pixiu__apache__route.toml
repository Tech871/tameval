[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "apache/dubbo-go-pixiu"
sha = "1f7c7364d47baa7567b762843e6ee39020be179e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/router/route.go pkg/router/route_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/router/route.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 44.0
original_coverage = 44.0
mutation_kill_rate = 40.0
original_mutation_kill_rate = 40.0
covered_lines = [ 111, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 285, 286, 287, 289, 293, 294, 295, 296, 297,]
missed_lines = [ 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 93, 94, 95, 98, 99, 100, 101, 102, 103, 105, 112, 113, 114, 115, 116, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 179, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 250, 251, 252, 267, 268, 269, 282, 283, 284,]

[input_info]
test_file_path = "pkg/router/route_test.go"
focal_file_path = "pkg/router/route.go"
test_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/router/route_test.go"
focal_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/router/route.go"
first_commit_date = "2020-10-02"
last_commit_date = "2025-08-03"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage router\n\nimport (\n\t\"testing\"\n)\n\nimport (\n\t\"github.com/dubbo-go-pixiu/pixiu-api/pkg/api/config\"\n\t\"github.com/dubbo-go-pixiu/pixiu-api/pkg/router\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nimport (\n\t\"github.com/apache/dubbo-go-pixiu/pkg/common/router/trie\"\n)\n\nfunc getMockMethod(verb config.HTTPVerb) config.Method {\n\tinbound := config.InboundRequest{}\n\tintegration := config.IntegrationRequest{}\n\treturn config.Method{\n\t\tEnable:             true,\n\t\tHTTPVerb:           verb,\n\t\tInboundRequest:     inbound,\n\t\tIntegrationRequest: integration,\n\t}\n}\n\nfunc TestPut(t *testing.T) {\n\trt := &Route{\n\t\ttree: trie.NewTrie(),\n\t}\n\tn0 := getMockMethod(config.MethodGet)\n\t_ = rt.PutAPI(router.API{URLPattern: \"/\", Method: n0})\n\t_, ok := rt.FindAPI(\"/\", n0.HTTPVerb)\n\tassert.True(t, ok)\n\n\terr := rt.PutAPI(router.API{URLPattern: \"/\", Method: n0})\n\tassert.Error(t, err, \"Method GET already exists in path /\")\n\n\tn1 := getMockMethod(config.MethodPost)\n\terr = rt.PutAPI(router.API{URLPattern: \"/mock\", Method: n0})\n\tassert.Nil(t, err)\n\terr = rt.PutAPI(router.API{URLPattern: \"/mock\", Method: n1})\n\tassert.Nil(t, err)\n\t_, ok = rt.FindAPI(\"/mock\", n0.HTTPVerb)\n\tassert.True(t, ok)\n\t_, ok = rt.FindAPI(\"/mock\", n1.HTTPVerb)\n\tassert.True(t, ok)\n\n\terr = rt.PutAPI(router.API{URLPattern: \"/mock/test\", Method: n0})\n\tassert.Nil(t, err)\n\t_, ok = rt.FindAPI(\"/mock/test\", n0.HTTPVerb)\n\tassert.True(t, ok)\n\n\t_ = rt.PutAPI(router.API{URLPattern: \"/test/:id\", Method: n0})\n\t_, ok = rt.FindAPI(\"/test/:id\", n0.HTTPVerb)\n\tassert.True(t, ok)\n\n\terr = rt.PutAPI(router.API{URLPattern: \"/test/:id\", Method: n1})\n\tassert.Nil(t, err)\n\terr = rt.PutAPI(router.API{URLPattern: \"/test/js\", Method: n0})\n\tassert.Nil(t, err)\n\terr = rt.PutAPI(router.API{URLPattern: \"/test/:id/mock\", Method: n0})\n\t_, ok = rt.FindAPI(\"/test/:id/mock\", n0.HTTPVerb)\n\tassert.True(t, ok)\n\tassert.Nil(t, err)\n}\n\nfunc TestMatchMethod(t *testing.T) {\n\trt := &Route{\n\t\ttree: trie.NewTrie(),\n\t}\n\tn0 := getMockMethod(config.MethodGet)\n\tn1 := getMockMethod(config.MethodPost)\n\te := rt.PutAPI(router.API{URLPattern: \"/theboys\", Method: n0})\n\tassert.Nil(t, e)\n\te = rt.PutAPI(router.API{URLPattern: \"/theboys/:id\", Method: n0})\n\tassert.Nil(t, e)\n\te = rt.PutAPI(router.API{URLPattern: \"/vought/:id/supe/:name\", Method: n1})\n\tassert.Nil(t, e)\n\n\tm, ok := rt.MatchAPI(\"/theboys\", config.MethodGet)\n\tassert.True(t, ok)\n\tassert.NotNil(t, m)\n\tassert.Equal(t, m.URLPattern, \"/theboys\")\n\n\tm, ok = rt.MatchAPI(\"/theboys\", config.MethodPost)\n\tassert.False(t, ok)\n\tassert.Nil(t, m)\n\n\tm, ok = rt.MatchAPI(\"/vought/123/supe/startlight\", config.MethodPost)\n\tassert.True(t, ok)\n\tassert.NotNil(t, m)\n\tassert.Equal(t, m.URLPattern, \"/vought/:id/supe/:name\")\n\n\tm, ok = rt.MatchAPI(\"/vought/123/supe/startlight\", config.MethodPost)\n\tassert.True(t, ok)\n\tassert.NotNil(t, m)\n\tassert.Equal(t, m.URLPattern, \"/vought/:id/supe/:name\")\n}\n\n//\n//func TestUpdateMethod(t *testing.T) {\n//\tm0 := getMockMethod(config.MethodGet)\n//\tm1 := getMockMethod(config.MethodGet)\n//\tm0.DubboBackendConfig.Version = \"1.0.0\"\n//\tm1.DubboBackendConfig.Version = \"2.0.0\"\n//\n//\trt := NewRoute()\n//\trt.PutAPI(router.API{URLPattern: \"/marvel\", Method: m0})\n//\tm, _ := rt.FindAPI(\"/marvel\", config.MethodGet)\n//\tassert.Equal(t, m.DubboBackendConfig.Version, \"1.0.0\")\n//\trt.UpdateAPI(router.API{URLPattern: \"/marvel\", Method: m1})\n//\tm, ok := rt.FindAPI(\"/marvel\", config.MethodGet)\n//\tassert.True(t, ok)\n//\tassert.Equal(t, m.DubboBackendConfig.Version, \"2.0.0\")\n//\n//\trt.PutAPI(router.API{URLPattern: \"/theboys/:id\", Method: m0})\n//\tm, _ = rt.FindAPI(\"/theBoys/12345\", config.MethodGet)\n//\tassert.Equal(t, m.DubboBackendConfig.Version, \"1.0.0\")\n//\trt.UpdateAPI(router.API{URLPattern: \"/theBoys/:id\", Method: m1})\n//\tm, ok = rt.FindAPI(\"/theBoys/12345\", config.MethodGet)\n//\tassert.True(t, ok)\n//\tassert.Equal(t, m.DubboBackendConfig.Version, \"2.0.0\")\n//}\n\n//func TestSearchWildcard(t *testing.T) {\n//\trt := &Route{\n//\t\ttree:         avltree.NewWithStringComparator(),\n//\t\twildcardTree: avltree.NewWithStringComparator(),\n//\t}\n//\tn0 := getMockMethod(config.MethodGet)\n//\te := rt.PutAPI(router.API{URLPattern: \"/theboys\", Method: n0})\n//\tassert.Nil(t, e)\n//\te = rt.PutAPI(router.API{URLPattern: \"/theboys/:id\", Method: n0})\n//\tassert.Nil(t, e)\n//\te = rt.PutAPI(router.API{URLPattern: \"/vought/:id/supe/:name\", Method: n0})\n//\tassert.Nil(t, e)\n//\n//\t_, ok := rt.searchWildcard(\"/marvel\")\n//\tassert.False(t, ok)\n//\t_, ok = rt.searchWildcard(\"/theboys/:id/age\")\n//\tassert.False(t, ok)\n//\t_, ok = rt.searchWildcard(\"/theboys/butcher\")\n//\tassert.True(t, ok)\n//\t_, ok = rt.searchWildcard(\"/vought/:id/supe/homelander\")\n//\tassert.True(t, ok)\n//}\n\nfunc TestWildcardMatch(t *testing.T) {\n\tvals := wildcardMatch(\"/vought/:id\", \"/vought/12345\")\n\tassert.NotNil(t, vals)\n\tassert.Equal(t, vals.Get(\"id\"), \"12345\")\n\tvals = wildcardMatch(\"/vought/:id\", \"/vought/125abc\")\n\tassert.NotNil(t, vals)\n\tassert.Equal(t, vals.Get(\"id\"), \"125abc\")\n\tvals = wildcardMatch(\"/vought/:id\", \"/vought/1234abcd/status\")\n\tassert.Nil(t, vals)\n\tvals = wildcardMatch(\"/voughT/:id/:action\", \"/Vought/1234abcd/attack\")\n\tassert.NotNil(t, vals)\n\tassert.Equal(t, vals.Get(\"id\"), \"1234abcd\")\n\tassert.Equal(t, vals.Get(\"action\"), \"attack\")\n\tvals = wildcardMatch(\"/voughT/:id/status\", \"/Vought/1234abcd/status\")\n\tassert.NotNil(t, vals)\n\tassert.Equal(t, vals.Get(\"id\"), \"1234abcd\")\n}\n\nfunc TestGetFilters(t *testing.T) {\n\trt := NewRoute()\n\tn0 := getMockMethod(config.MethodGet)\n\tn1 := getMockMethod(config.MethodPost)\n\te := rt.PutAPI(router.API{URLPattern: \"/theboys\", Method: n0})\n\tassert.Nil(t, e)\n\te = rt.PutAPI(router.API{URLPattern: \"/theboys/:id\", Method: n0})\n\tassert.Nil(t, e)\n\te = rt.PutAPI(router.API{URLPattern: \"/vought/:id/supe/:name\", Method: n1})\n\tassert.Nil(t, e)\n}\n"
