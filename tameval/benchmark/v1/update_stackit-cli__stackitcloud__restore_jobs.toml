[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "stackitcloud/stackit-cli"
sha = "13c97c95a2ced03b7caf6038c900f6d0628e384b"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs.go internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 40.0
original_coverage = 54.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 132, 135, 136, 137, 138,]
missed_lines = [ 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 123, 124, 125, 126, 127, 128, 129, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177,]

[input_info]
test_file_path = "internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs_test.go"
focal_file_path = "internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs.go"
test_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs_test.go"
focal_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/mongodbflex/backup/restore-jobs/restore_jobs.go"
first_commit_date = "2024-05-14"
last_commit_date = "2025-02-11"
test_file_content = "package restorejobs\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/globalflags\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/print\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/utils\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\t\"github.com/google/uuid\"\n\t\"github.com/stackitcloud/stackit-sdk-go/services/mongodbflex\"\n)\n\nvar projectIdFlag = globalflags.ProjectIdFlag\n\ntype testCtxKey struct{}\n\nvar testCtx = context.WithValue(context.Background(), testCtxKey{}, \"foo\")\nvar testClient = &mongodbflex.APIClient{}\nvar testProjectId = uuid.NewString()\nvar testInstanceId = uuid.NewString()\n\nfunc fixtureFlagValues(mods ...func(flagValues map[string]string)) map[string]string {\n\tflagValues := map[string]string{\n\t\tprojectIdFlag:  testProjectId,\n\t\tinstanceIdFlag: testInstanceId,\n\t\tlimitFlag:      \"10\",\n\t}\n\tfor _, mod := range mods {\n\t\tmod(flagValues)\n\t}\n\treturn flagValues\n}\n\nfunc fixtureInputModel(mods ...func(model *inputModel)) *inputModel {\n\tmodel := &inputModel{\n\t\tGlobalFlagModel: &globalflags.GlobalFlagModel{\n\t\t\tProjectId: testProjectId,\n\t\t\tVerbosity: globalflags.VerbosityDefault,\n\t\t},\n\t\tInstanceId: utils.Ptr(testInstanceId),\n\t\tLimit:      utils.Ptr(int64(10)),\n\t}\n\tfor _, mod := range mods {\n\t\tmod(model)\n\t}\n\treturn model\n}\n\nfunc fixtureRequest(mods ...func(request *mongodbflex.ApiListRestoreJobsRequest)) mongodbflex.ApiListRestoreJobsRequest {\n\trequest := testClient.ListRestoreJobs(testCtx, testProjectId, testInstanceId)\n\tfor _, mod := range mods {\n\t\tmod(&request)\n\t}\n\treturn request\n}\n\nfunc TestParseInput(t *testing.T) {\n\ttests := []struct {\n\t\tdescription   string\n\t\tflagValues    map[string]string\n\t\tisValid       bool\n\t\texpectedModel *inputModel\n\t}{\n\t\t{\n\t\t\tdescription:   \"base\",\n\t\t\tflagValues:    fixtureFlagValues(),\n\t\t\tisValid:       true,\n\t\t\texpectedModel: fixtureInputModel(),\n\t\t},\n\t\t{\n\t\t\tdescription: \"no values\",\n\t\t\tflagValues:  map[string]string{},\n\t\t\tisValid:     false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id missing\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tdelete(flagValues, projectIdFlag)\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id invalid 1\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[projectIdFlag] = \"\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id invalid 2\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[projectIdFlag] = \"invalid-uuid\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"instance id missing\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tdelete(flagValues, instanceIdFlag)\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"instance id invalid 1\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[instanceIdFlag] = \"\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"instance id invalid 2\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[instanceIdFlag] = \"invalid-uuid\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"limit invalid\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[limitFlag] = \"invalid\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"limit invalid 2\",\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[limitFlag] = \"0\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\tp := print.NewPrinter()\n\t\t\tcmd := NewCmd(p)\n\t\t\terr := globalflags.Configure(cmd.Flags())\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"configure global flags: %v\", err)\n\t\t\t}\n\n\t\t\tfor flag, value := range tt.flagValues {\n\t\t\t\terr := cmd.Flags().Set(flag, value)\n\t\t\t\tif err != nil {\n\t\t\t\t\tif !tt.isValid {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tt.Fatalf(\"setting flag --%s=%s: %v\", flag, value, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\terr = cmd.ValidateRequiredFlags()\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating flags: %v\", err)\n\t\t\t}\n\n\t\t\tmodel, err := parseInput(p, cmd)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error parsing input: %v\", err)\n\t\t\t}\n\n\t\t\tif !tt.isValid {\n\t\t\t\tt.Fatalf(\"did not fail on invalid input\")\n\t\t\t}\n\t\t\tdiff := cmp.Diff(model, tt.expectedModel)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestBuildRequest(t *testing.T) {\n\ttests := []struct {\n\t\tdescription     string\n\t\tmodel           *inputModel\n\t\texpectedRequest mongodbflex.ApiListRestoreJobsRequest\n\t}{\n\t\t{\n\t\t\tdescription:     \"base\",\n\t\t\tmodel:           fixtureInputModel(),\n\t\t\texpectedRequest: fixtureRequest(),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\trequest := buildRequest(testCtx, tt.model, testClient)\n\n\t\t\tdiff := cmp.Diff(request, tt.expectedRequest,\n\t\t\t\tcmp.AllowUnexported(tt.expectedRequest),\n\t\t\t\tcmpopts.EquateComparable(testCtx),\n\t\t\t)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}"
