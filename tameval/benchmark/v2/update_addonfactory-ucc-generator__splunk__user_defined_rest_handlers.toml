[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "splunk/addonfactory-ucc-generator"
sha = "0ceda52ad4ba2548071b64914a75aae987787a86"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=splunk_add_on_ucc_framework/commands/rest_builder/user_defined_rest_handlers.py -m pytest -q --junit-xml=test_output.xml tests/unit/test_user_defined_rest_handlers.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target splunk_add_on_ucc_framework.commands.rest_builder.user_defined_rest_handlers --unit-test tests.unit.test_user_defined_rest_handlers --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target splunk_add_on_ucc_framework/commands/rest_builder/user_defined_rest_handlers.py --unit-test tests/unit/test_user_defined_rest_handlers.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 89.0
original_coverage = 97.0
mutation_kill_rate = 76.0
original_mutation_kill_rate = 98.0
covered_lines = [ 15, 16, 17, 19, 22, 33, 34, 46, 47, 66, 67, 72, 73, 74, 76, 83, 84, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 114, 117, 122, 124, 125, 127, 128, 130, 131, 133, 135, 138, 139, 141, 148, 149, 159, 160, 166, 168, 171, 172, 174, 176, 177, 182, 189, 190, 198, 199, 205, 207, 208, 212, 213, 217, 218, 222, 223, 225, 226, 228, 229, 231, 232, 234, 235, 237, 239, 240, 242, 243, 244, 246, 248, 249, 251, 253, 255, 256, 258, 260, 261, 263, 265, 266, 268, 269, 270, 272, 274, 275, 277, 278, 280, 282, 283, 284, 285, 287, 289, 290, 311, 316, 317, 318, 319, 321, 324, 325, 327, 330, 333, 334, 339, 340, 345, 346, 348, 350, 351, 352, 354, 355, 357, 359, 360,]
missed_lines = [ 80, 115, 291, 292, 294, 297, 299, 301, 302, 304, 331, 361, 363, 364, 366, 367, 369, 371,]

[input_info]
test_file_path = "tests/unit/test_user_defined_rest_handlers.py"
focal_file_path = "splunk_add_on_ucc_framework/commands/rest_builder/user_defined_rest_handlers.py"
test_file_url = "https://github.com/splunk/addonfactory-ucc-generator/blob/0ceda52ad4ba2548071b64914a75aae987787a86/tests/unit/test_user_defined_rest_handlers.py"
focal_file_url = "https://github.com/splunk/addonfactory-ucc-generator/blob/0ceda52ad4ba2548071b64914a75aae987787a86/splunk_add_on_ucc_framework/commands/rest_builder/user_defined_rest_handlers.py"
first_commit_date = "2025-02-11"
last_commit_date = "2025-02-18"
test_file_content = "import pytest\n\nfrom splunk_add_on_ucc_framework.commands.openapi_generator import oas\nfrom splunk_add_on_ucc_framework.commands.rest_builder.user_defined_rest_handlers import (\n    RestHandlerConfig,\n    UserDefinedRestHandlers,\n)\n\n\n@pytest.fixture\ndef cfg_minimal():\n    return RestHandlerConfig(\n        name=\"test\",\n        endpoint=\"test\",\n        handlerType=\"EAI\",\n    )\n\n\ndef test_rest_handler_config_minimal(cfg_minimal):\n    assert not cfg_minimal.supported_actions\n    assert not cfg_minimal.request_parameters\n    assert not cfg_minimal.response_parameters\n    assert not cfg_minimal.oas_paths\n\n\ndef test_rest_handler_config_unsupported_handler_type(cfg_minimal):\n    cfg_minimal.handlerType = \"unsupported\"\n\n    with pytest.raises(ValueError):\n        print(cfg_minimal.oas_paths)\n\n\ndef test_rest_handler_config_openapi_only_specified():\n    cfg = RestHandlerConfig(\n        name=\"test_name\",\n        endpoint=\"test_endpoint\",\n        handlerType=\"EAI\",\n        requestParameters={\n            \"edit\": {\n                \"edit_param1\": {\"schema\": {\"type\": \"string\"}, \"required\": True},\n            }\n        },\n        responseParameters={\n            \"edit\": {\n                \"edit_param2\": {\"schema\": {\"type\": \"string\"}, \"required\": True},\n            }\n        },\n    )\n\n    assert cfg.supported_actions == {\"edit\"}\n    assert cfg.oas_paths.keys() == {\"/test_endpoint/{name}\"}\n    assert cfg.oas_paths[\"/test_endpoint/{name}\"] == oas.PathItemObject(\n        post=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Update test_name item\",\n                    content={\n                        \"application/json\": oas.MediaTypeObject(\n                            schema={\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"entry\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"name\": {\"type\": \"string\"},\n                                                \"content\": {\n                                                    \"type\": \"object\",\n                                                    \"properties\": {\n                                                        \"edit_param2\": {\n                                                            \"type\": \"string\",\n                                                        }\n                                                    },\n                                                    \"required\": [\"edit_param2\"],\n                                                },\n                                            },\n                                        },\n                                    }\n                                },\n                            },\n                        )\n                    },\n                )\n            },\n            description=\"Update test_name item\",\n            requestBody=oas.RequestBodyObject(\n                content={\n                    \"application/x-www-form-urlencoded\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\"edit_param1\": {\"type\": \"string\"}},\n                            \"required\": [\"edit_param1\"],\n                        }\n                    }\n                },\n            ),\n        ),\n        parameters=[\n            {\n                \"name\": \"output_mode\",\n                \"in\": \"query\",\n                \"required\": True,\n                \"description\": \"Output mode\",\n                \"schema\": {\"type\": \"string\", \"enum\": [\"json\"], \"default\": \"json\"},\n            },\n            {\n                \"name\": \"name\",\n                \"in\": \"path\",\n                \"required\": True,\n                \"description\": \"The name of the item to operate on\",\n                \"schema\": {\"type\": \"string\"},\n            },\n        ],\n    )\n\n\ndef test_rest_handler_config_openapi_empty_params():\n    cfg = RestHandlerConfig(\n        name=\"test_name\",\n        endpoint=\"test_endpoint\",\n        handlerType=\"EAI\",\n        requestParameters={\n            \"create\": {},\n            \"list\": {},\n            \"edit\": {},\n            \"remove\": {},\n        },\n        responseParameters={\n            \"create\": {},\n            \"list\": {},\n            \"edit\": {},\n            \"remove\": {},\n        },\n    )\n\n    assert cfg.supported_actions == {\"create\", \"list\", \"remove\", \"edit\"}\n    assert cfg.oas_paths.keys() == {\"/test_endpoint\", \"/test_endpoint/{name}\"}\n    assert cfg.oas_paths[\"/test_endpoint\"] == oas.PathItemObject(\n        get=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Get list of items for test_name\",\n                )\n            },\n            description=\"Get list of items for test_name\",\n        ),\n        post=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Create item in test_name\",\n                )\n            },\n            description=\"Create item in test_name\",\n            requestBody=oas.RequestBodyObject(\n                content={\n                    \"application/x-www-form-urlencoded\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\"name\": {\"type\": \"string\"}},\n                            \"required\": [\"name\"],\n                        }\n                    }\n                },\n                description=None,\n                required=False,\n            ),\n        ),\n        parameters=[\n            {\n                \"name\": \"output_mode\",\n                \"in\": \"query\",\n                \"required\": True,\n                \"description\": \"Output mode\",\n                \"schema\": {\"type\": \"string\", \"enum\": [\"json\"], \"default\": \"json\"},\n            },\n        ],\n    )\n    assert cfg.oas_paths[\"/test_endpoint/{name}\"] == oas.PathItemObject(\n        get=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Get test_name item details\",\n                )\n            },\n            description=\"Get test_name item details\",\n        ),\n        post=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Update test_name item\",\n                )\n            },\n            description=\"Update test_name item\",\n        ),\n        delete=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Delete test_name item\",\n                )\n            },\n            description=\"Delete test_name item\",\n        ),\n        parameters=[\n            {\n                \"name\": \"output_mode\",\n                \"in\": \"query\",\n                \"required\": True,\n                \"description\": \"Output mode\",\n                \"schema\": {\"type\": \"string\", \"enum\": [\"json\"], \"default\": \"json\"},\n            },\n            {\n                \"name\": \"name\",\n                \"in\": \"path\",\n                \"required\": True,\n                \"description\": \"The name of the item to operate on\",\n                \"schema\": {\"type\": \"string\"},\n            },\n        ],\n    )\n\n\ndef test_rest_handler_config_openapi_full():\n    cfg = RestHandlerConfig(\n        name=\"test_name\",\n        endpoint=\"test_endpoint\",\n        handlerType=\"EAI\",\n        requestParameters={\n            \"create\": {\n                \"create_param_obj\": {\n                    \"schema\": {\n                        \"type\": \"object\",\n                        \"properties\": {\"key\": {\"type\": \"string\"}},\n                    },\n                    \"required\": True,\n                },\n                \"create_param_array\": {\n                    \"schema\": {\n                        \"type\": \"array\",\n                        \"items\": {\"type\": \"string\"},\n                    }\n                },\n            },\n            \"list\": {\n                \"list_param1\": {\n                    \"schema\": {\"type\": \"number\"},\n                    \"required\": True,\n                },\n            },\n            \"edit\": {\n                \"edit_param1\": {\"schema\": {\"type\": \"string\"}, \"required\": True},\n            },\n            \"remove\": {\n                \"remove_param1\": {\"schema\": {\"type\": \"string\"}},\n            },\n        },\n        responseParameters={\n            \"create\": {\n                \"create_param2\": {\"schema\": {\"type\": \"string\"}, \"required\": True},\n            },\n            \"list\": {\n                \"list_param2\": {\"schema\": {\"type\": \"number\"}},\n                \"list_param22\": {\"schema\": {\"type\": \"string\"}},\n            },\n            \"edit\": {\n                \"edit_param2\": {\"schema\": {\"type\": \"string\"}, \"required\": True},\n            },\n            \"remove\": {\n                \"remove_param2\": {\"schema\": {\"type\": \"string\"}},\n            },\n        },\n    )\n\n    assert cfg.supported_actions == {\"create\", \"list\", \"edit\", \"remove\"}\n    assert cfg.oas_paths.keys() == {\"/test_endpoint\", \"/test_endpoint/{name}\"}\n\n    get_response_schema = {\n        \"type\": \"object\",\n        \"properties\": {\n            \"entry\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"name\": {\"type\": \"string\"},\n                        \"content\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"list_param2\": {\"type\": \"number\"},\n                                \"list_param22\": {\"type\": \"string\"},\n                            },\n                        },\n                    },\n                },\n            }\n        },\n    }\n\n    assert cfg.oas_paths[\"/test_endpoint\"] == oas.PathItemObject(\n        get=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Get list of items for test_name\",\n                    content={\n                        \"application/json\": oas.MediaTypeObject(\n                            schema=get_response_schema\n                        )\n                    },\n                )\n            },\n            description=\"Get list of items for test_name\",\n            parameters=[\n                {\n                    \"name\": \"list_param1\",\n                    \"in\": \"query\",\n                    \"required\": True,\n                    \"schema\": {\"type\": \"number\"},\n                },\n            ],\n        ),\n        post=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Create item in test_name\",\n                    content={\n                        \"application/json\": oas.MediaTypeObject(\n                            schema={\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"entry\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"name\": {\"type\": \"string\"},\n                                                \"content\": {\n                                                    \"type\": \"object\",\n                                                    \"properties\": {\n                                                        \"create_param2\": {\n                                                            \"type\": \"string\",\n                                                        }\n                                                    },\n                                                    \"required\": [\"create_param2\"],\n                                                },\n                                            },\n                                        },\n                                    }\n                                },\n                            }\n                        )\n                    },\n                )\n            },\n            description=\"Create item in test_name\",\n            requestBody=oas.RequestBodyObject(\n                content={\n                    \"application/x-www-form-urlencoded\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\"type\": \"string\"},\n                                \"create_param_obj\": {\n                                    \"type\": \"object\",\n                                    \"properties\": {\"key\": {\"type\": \"string\"}},\n                                },\n                                \"create_param_array\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\"type\": \"string\"},\n                                },\n                            },\n                            \"required\": [\"create_param_obj\", \"name\"],\n                        }\n                    }\n                }\n            ),\n        ),\n        parameters=[\n            {\n                \"name\": \"output_mode\",\n                \"in\": \"query\",\n                \"required\": True,\n                \"description\": \"Output mode\",\n                \"schema\": {\"type\": \"string\", \"enum\": [\"json\"], \"default\": \"json\"},\n            },\n        ],\n    )\n\n    assert cfg.oas_paths[\"/test_endpoint/{name}\"] == oas.PathItemObject(\n        get=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Get test_name item details\",\n                    content={\n                        \"application/json\": oas.MediaTypeObject(\n                            schema=get_response_schema,\n                        )\n                    },\n                )\n            },\n            description=\"Get test_name item details\",\n            parameters=[\n                {\n                    \"name\": \"list_param1\",\n                    \"in\": \"query\",\n                    \"required\": True,\n                    \"schema\": {\"type\": \"number\"},\n                }\n            ],\n            deprecated=False,\n        ),\n        post=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Update test_name item\",\n                    content={\n                        \"application/json\": oas.MediaTypeObject(\n                            schema={\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"entry\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"name\": {\"type\": \"string\"},\n                                                \"content\": {\n                                                    \"type\": \"object\",\n                                                    \"properties\": {\n                                                        \"edit_param2\": {\n                                                            \"type\": \"string\",\n                                                        }\n                                                    },\n                                                    \"required\": [\"edit_param2\"],\n                                                },\n                                            },\n                                        },\n                                    }\n                                },\n                            },\n                        )\n                    },\n                )\n            },\n            description=\"Update test_name item\",\n            requestBody=oas.RequestBodyObject(\n                content={\n                    \"application/x-www-form-urlencoded\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\"edit_param1\": {\"type\": \"string\"}},\n                            \"required\": [\"edit_param1\"],\n                        }\n                    }\n                },\n                required=False,\n            ),\n            deprecated=False,\n        ),\n        delete=oas.OperationObject(\n            responses={\n                \"200\": oas.ResponseObject(\n                    description=\"Delete test_name item\",\n                    content={\n                        \"application/json\": oas.MediaTypeObject(\n                            schema={\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"entry\": {\n                                        \"type\": \"array\",\n                                        \"items\": {\n                                            \"type\": \"object\",\n                                            \"properties\": {\n                                                \"name\": {\"type\": \"string\"},\n                                                \"content\": {\n                                                    \"type\": \"object\",\n                                                    \"properties\": {\n                                                        \"remove_param2\": {\n                                                            \"type\": \"string\"\n                                                        }\n                                                    },\n                                                },\n                                            },\n                                        },\n                                    }\n                                },\n                            },\n                        )\n                    },\n                )\n            },\n            description=\"Delete test_name item\",\n            parameters=[\n                {\n                    \"name\": \"remove_param1\",\n                    \"in\": \"query\",\n                    \"required\": False,\n                    \"schema\": {\"type\": \"string\"},\n                }\n            ],\n            deprecated=False,\n        ),\n        parameters=[\n            {\n                \"name\": \"output_mode\",\n                \"in\": \"query\",\n                \"required\": True,\n                \"description\": \"Output mode\",\n                \"schema\": {\"type\": \"string\", \"enum\": [\"json\"], \"default\": \"json\"},\n            },\n            {\n                \"name\": \"name\",\n                \"in\": \"path\",\n                \"required\": True,\n                \"description\": \"The name of the item to operate on\",\n                \"schema\": {\"type\": \"string\"},\n            },\n        ],\n    )\n\n\ndef test_user_defined_rest_handlers_paths():\n    # 1 path\n    cfg1 = RestHandlerConfig(\n        name=\"test_name_1\",\n        endpoint=\"test_endpoint_1\",\n        handlerType=\"EAI\",\n        requestParameters={\n            \"create\": {\n                \"param1\": {\"schema\": {\"type\": \"string\"}},\n            }\n        },\n    )\n    # 2 paths\n    cfg2 = RestHandlerConfig(\n        name=\"test_name_2\",\n        endpoint=\"test_endpoint_2\",\n        handlerType=\"EAI\",\n        requestParameters={\n            \"list\": {\n                \"param2\": {\"schema\": {\"type\": \"string\"}},\n            }\n        },\n    )\n    # 1 path\n    cfg3 = RestHandlerConfig(\n        name=\"test_name_3\",\n        endpoint=\"test_endpoint_3\",\n        handlerType=\"EAI\",\n        requestParameters={\n            \"edit\": {\n                \"param3\": {\"schema\": {\"type\": \"string\"}},\n            }\n        },\n    )\n\n    assert len(cfg1.oas_paths) == 1\n    assert len(cfg2.oas_paths) == 2\n    assert len(cfg3.oas_paths) == 1\n\n    hnds = UserDefinedRestHandlers()\n    hnds.add_definitions([cfg1, cfg2])\n    hnds.add_definition(cfg3)\n\n    assert hnds.oas_paths == {\n        \"/test_endpoint_1\": cfg1.oas_paths[\"/test_endpoint_1\"],\n        \"/test_endpoint_2\": cfg2.oas_paths[\"/test_endpoint_2\"],\n        \"/test_endpoint_2/{name}\": cfg2.oas_paths[\"/test_endpoint_2/{name}\"],\n        \"/test_endpoint_3/{name}\": cfg3.oas_paths[\"/test_endpoint_3/{name}\"],\n    }\n\n\ndef test_user_defined_rest_handlers_duplicates():\n    normal = RestHandlerConfig(\n        name=\"test_name\",\n        endpoint=\"test_endpoint\",\n        handlerType=\"EAI\",\n    )\n    duplicated_name = RestHandlerConfig(\n        name=\"test_name\",\n        endpoint=\"test_endpoint_other\",\n        handlerType=\"EAI\",\n    )\n    duplicated_endpoint = RestHandlerConfig(\n        name=\"test_name_other\",\n        endpoint=\"test_endpoint\",\n        handlerType=\"EAI\",\n    )\n\n    hnds = UserDefinedRestHandlers()\n    hnds.add_definition(normal)\n\n    with pytest.raises(ValueError):\n        hnds.add_definition(duplicated_name)\n\n    with pytest.raises(ValueError):\n        hnds.add_definition(duplicated_endpoint)"
