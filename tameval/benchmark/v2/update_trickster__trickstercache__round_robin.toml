[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "trickstercache/trickster"
sha = "99ac2462add00d5014794ec929eec27c7f1ceaa7"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/backends/alb/mech/rr/round_robin.go pkg/backends/alb/mech/rr/round_robin_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/backends/alb/mech/rr/round_robin.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 59.0
mutation_kill_rate = nan
original_mutation_kill_rate = 60.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/backends/alb/mech/rr/round_robin_test.go"
focal_file_path = "pkg/backends/alb/mech/rr/round_robin.go"
test_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/backends/alb/mech/rr/round_robin_test.go"
focal_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/backends/alb/mech/rr/round_robin.go"
first_commit_date = "2025-05-17"
last_commit_date = "2025-05-20"
test_file_content = "/*\n * Copyright 2018 The Trickster Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage rr\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/trickstercache/trickster/v2/pkg/backends/alb/pool\"\n\t\"github.com/trickstercache/trickster/v2/pkg/proxy/handlers\"\n\ttu \"github.com/trickstercache/trickster/v2/pkg/testutil\"\n\t\"github.com/trickstercache/trickster/v2/pkg/testutil/albpool\"\n)\n\nfunc TestHandleRoundRobin(t *testing.T) {\n\n\tw := httptest.NewRecorder()\n\th := &handler{}\n\th.ServeHTTP(w, nil)\n\tif w.Code != http.StatusBadGateway {\n\t\tt.Error(\"expected 502 got\", w.Code)\n\t}\n\n\tp, _, hsts := albpool.New(0,\n\t\t[]http.Handler{http.HandlerFunc(tu.BasicHTTPHandler)})\n\n\th.pool = p\n\n\thsts[0].Set(0)\n\ttime.Sleep(250 * time.Millisecond)\n\n\tw = httptest.NewRecorder()\n\th.ServeHTTP(w, nil)\n\tif w.Code != http.StatusOK {\n\t\tt.Error(\"expected 200 got\", w.Code)\n\t}\n\n\th.pool, _, hsts = albpool.New(0,\n\t\t[]http.Handler{http.HandlerFunc(handlers.HandleBadGateway)})\n\thsts[0].Set(-1)\n\ttime.Sleep(250 * time.Millisecond)\n\tw = httptest.NewRecorder()\n\th.ServeHTTP(w, nil)\n\tif w.Code != http.StatusBadGateway {\n\t\tt.Error(\"expected 502 got\", w.Code)\n\t}\n\n}\n\nfunc TestNextTarget(t *testing.T) {\n\th := &handler{\n\t\tpool: pool.New(nil, -1),\n\t}\n\th.StopPool()\n\th.pool.SetHealthy([]http.Handler{http.NotFoundHandler()})\n\tn := h.nextTarget()\n\tif n == nil {\n\t\tt.Error(\"expected non-nil target\")\n\t}\n}"
