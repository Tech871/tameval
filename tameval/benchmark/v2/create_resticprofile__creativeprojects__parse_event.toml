[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.5"

[repo_info]
repository = "creativeprojects/resticprofile"
sha = "f74803217ccdcda44570871757d168817c0a95f6"

[run_info]
docker_image = "golang:1.24.5"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out crond/parse_event.go crond/parse_event_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting crond/parse_event.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 87.0
original_coverage = 87.0
mutation_kill_rate = 83.0
original_mutation_kill_rate = 83.0
covered_lines = [ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 59, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90,]
missed_lines = [ 25, 26, 27, 64, 65, 66, 76, 77, 78,]

[input_info]
test_file_path = "crond/parse_event_test.go"
focal_file_path = "crond/parse_event.go"
test_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/crond/parse_event_test.go"
focal_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/crond/parse_event.go"
first_commit_date = "2025-02-14"
last_commit_date = "2025-03-28"
test_file_content = "//go:build !windows\n\npackage crond\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestParseEvents(t *testing.T) {\n\ttestData := []struct {\n\t\tcron     string\n\t\texpected string\n\t}{\n\t\t{\"00 00 * * 1,2,3,4,6,0\", \"Sun..Thu,Sat *-*-* 00:00:00\"},\n\t\t{\"23 01,02 * * 1,0\", \"Sun,Mon *-*-* 01,02:23:00\"},\n\t\t{\"00 00 01 * 3\", \"Wed *-*-01 00:00:00\"},\n\t\t{\"48 17 * * 3\", \"Wed *-*-* 17:48:00\"},\n\t\t{\"02 01 15 10 2,3,4,5,6\", \"Tue..Sat *-10-15 01:02:00\"},\n\t\t{\"00 00 07 * *\", \"*-*-07 00:00:00\"},\n\t\t{\"00 00 15 10 *\", \"*-10-15 00:00:00\"},\n\t\t{\"00 17 * 12 1\", \"Mon *-12-* 17:00:00\"},\n\t\t{\"00 17 * 12 0\", \"Sun *-12-* 17:00:00\"},\n\t\t{\"30 * 01-03 * 1,5\", \"Mon,Fri *-*-01..03 *:30:00\"},\n\t\t{\"10,20,30 12-14 * * *\", \"*-*-* 12..14:10,20,30:00\"},\n\t\t{\"05 08 05 03 *\", \"*-03-05 08:05:00\"},\n\t\t{\"05 08 * * *\", \"*-*-* 08:05:00\"},\n\t\t{\"40 05 * * *\", \"*-*-* 05:40:00\"},\n\t\t{\"05 08 05 12 6,0\", \"Sun,Sat *-12-05 08:05:00\"},\n\t\t{\"05 08 * * 6,0\", \"Sun,Sat *-*-* 08:05:00\"},\n\t\t{\"40 05 05 03 *\", \"*-03-05 05:40:00\"},\n\t\t{\"00 00 05 02-04 *\", \"*-02..04-05 00:00:00\"},\n\t\t{\"00 00 05 03 *\", \"*-03-05 00:00:00\"},\n\t\t{\"00 00 * * 1,2,3,4,5,6,0\", \"Sun..Sat *-*-* 00:00:00\"},\n\t\t{\"00 00 * * 0,1\", \"Sun,Mon *-*-* 00:00:00\"},\n\t\t{\"00\\t00 * * 0,1\", \"Sun,Mon *-*-* 00:00:00\"},   // should replace tab by space\n\t\t{\"00 00    * * 0,1\", \"Sun,Mon *-*-* 00:00:00\"}, // should compact all spaces into one\n\t}\n\n\tfor _, testRun := range testData {\n\t\tt.Run(testRun.cron, func(t *testing.T) {\n\t\t\tevent, err := parseEvent(testRun.cron)\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.Equal(t, testRun.expected, event.String())\n\t\t})\n\t}\n}\n\nfunc TestFailingParseEvents(t *testing.T) {\n\ttestData := []struct {\n\t\tcron string\n\t}{\n\t\t{\"\"},\n\t\t{\" \"},\n\t\t{\"  \"},\n\t\t{\"   \"},\n\t\t{\"    \"},\n\t\t{\"     \"},\n\t\t{\"      \"},\n\t\t{\"       \"},\n\t\t{\"        \"},\n\t\t{\"         \"},\n\t\t{\"99 00 * * 0,1\"},\n\t\t{\"0- 00 * * 0,1\"},\n\t\t{\"-0 00 * * 0,1\"},\n\t\t{\"0, 00 * * 0,1\"},\n\t\t{\",0 00 * * 0,1\"},\n\t\t{\"invalid\"},\n\t}\n\n\tfor _, testRun := range testData {\n\t\tt.Run(testRun.cron, func(t *testing.T) {\n\t\t\t_, err := parseEvent(testRun.cron)\n\t\t\trequire.Error(t, err)\n\t\t})\n\t}\n}\n"
