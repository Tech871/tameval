[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "agrestio/agrest"
sha = "113d494706e4c3d1e86cc13936a67596d5265a9d"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl agrest-engine -Dtest=ExpTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl agrest-engine -DtargetClasses=**.Exp  -DtargetTests=**.ExpTest  -DoutputFormats=XML"
coverage_report_path = "agrest-engine/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "agrest-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 65.0
original_coverage = 65.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 25, 56, 63, 68, 72, 84, 91, 98, 105, 112, 119, 126, 133, 136, 143, 146, 153, 160, 167, 174, 181, 188, 195, 202, 209, 216, 223, 230, 237, 238, 244, 246, 247, 250, 251, 253, 261, 262, 268, 270, 271, 274, 275, 276, 285, 348, 349, 350,]
missed_lines = [ 33, 41, 49, 64, 69, 70, 73, 74, 75, 77, 79, 80, 81, 134, 144, 240, 242, 264, 266, 292, 299, 306, 319, 333, 337, 341,]

[input_info]
test_file_path = "agrest-engine/src/test/java/io/agrest/protocol/ExpTest.java"
focal_file_path = "agrest-engine/src/main/java/io/agrest/protocol/Exp.java"
test_file_url = "https://github.com/agrestio/agrest/blob/113d494706e4c3d1e86cc13936a67596d5265a9d/agrest-engine/src/test/java/io/agrest/protocol/ExpTest.java"
focal_file_url = "https://github.com/agrestio/agrest/blob/113d494706e4c3d1e86cc13936a67596d5265a9d/agrest-engine/src/main/java/io/agrest/protocol/Exp.java"
first_commit_date = "2022-01-09"
last_commit_date = "2025-03-28"
test_file_content = "package io.agrest.protocol;\n\nimport io.agrest.exp.AgExpressionException;\nimport io.agrest.exp.parser.SimpleNode;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class ExpTest {\n\n    @Test\n    public void namedParams() {\n        Exp exp = Exp.parse(\"a = $a and b = $b or c = $c and not d = $d\");\n\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"a\", 2);\n        params.put(\"b\", 4);\n        params.put(\"c\", null);\n        params.put(\"d\", 16);\n\n        assertEquals(\n                \"((a = 2) and (b = 4)) or ((c = null) and (not (d = 16)))\",\n                exp.namedParams(params).toString());\n    }\n\n    @Test\n    public void checkNamedParamsWithPruning() {\n        Exp exp = Exp.parse(\"a = $a and b = $b or c = $c and not d = $d\");\n\n        Map<String, Object> params1 = Map.of(\"a\", 2, \"b\", 4, \"c\", 8);\n        assertEquals(\"((a = 2) and (b = 4)) or (c = 8)\", exp.namedParams(params1).toString());\n\n        Map<String, Object> params2 = Map.of(\"c\", 8);\n        assertEquals(\"c = 8\", exp.namedParams(params2).toString());\n\n        Map<String, Object> params3 = new HashMap<>();\n        params3.put(\"a\", null);\n        params3.put(\"c\", 8);\n        assertEquals(\"(a = null) or (c = 8)\", exp.namedParams(params3).toString());\n    }\n\n    @Test\n    public void verifyNamedParamsWithoutPruning() {\n        Exp exp = Exp.parse(\"a = $a and b = $b or c = $c and not d = $d\");\n\n        Map<String, Object> params1 = Map.of(\"a\", 2, \"b\", 4, \"c\", 8);\n        assertEquals(\"((a = 2) and (b = 4)) or ((c = 8) and (not (d = $d)))\",\n                exp.namedParams(params1, false).toString());\n\n        Map<String, Object> params2 = new HashMap<>();\n        params2.put(\"a\", null);\n        params2.put(\"c\", 8);\n        assertEquals(\"((a = null) and (b = $b)) or ((c = 8) and (not (d = $d)))\",\n                exp.namedParams(params2, false).toString());\n    }\n\n    @Test\n    public void parentImmutable() {\n        Exp c1 = Exp.equal(\"a\", 1);\n        Exp c2 = Exp.equal(\"a\", 2);\n\n        Exp and = Exp.and(c1, c2);\n        assertNull(((SimpleNode) c1).jjtGetParent(), \"parent was reset\");\n        assertNull(((SimpleNode) c2).jjtGetParent(), \"parent was reset\");\n\n        assertNotSame(c1, ((SimpleNode) and).jjtGetChild(0));\n        assertEquals(c1, ((SimpleNode) and).jjtGetChild(0));\n        assertSame(and, ((SimpleNode) and).jjtGetChild(0).jjtGetParent());\n\n        assertNotSame(c2, ((SimpleNode) and).jjtGetChild(1));\n        assertEquals(c2, ((SimpleNode) and).jjtGetChild(1));\n        assertSame(and, ((SimpleNode) and).jjtGetChild(1).jjtGetParent());\n    }\n\n    @Test\n    public void paramsImmutable() {\n        Exp raw = Exp.parse(\"a = $1\");\n        Exp e1 = raw.positionalParams(\"b\");\n        Exp e2 = raw.namedParams(Map.of(\"1\", \"c\"));\n\n        assertEquals(\"a = $1\", raw.toString());\n        assertEquals(\"a = 'b'\", e1.toString());\n        assertEquals(\"a = 'c'\", e2.toString());\n    }\n\n    @Test\n    public void andOrImmutable() {\n        Exp e1 = Exp.parse(\"1 > 2\");\n        Exp e2 = e1.and(Exp.parse(\"3 < 4\"));\n        Exp e3 = e1.or(Exp.parse(\"5 = 6\"));\n        Exp e4 = e2.or(Exp.parse(\"7 > 8\"));\n        Exp e5 = e3.and(Exp.parse(\"9 < 10\"));\n        List<Exp> all = List.of(e1, e2, e3, e4, e5);\n\n        assertEquals(5, new ArrayList<>(new HashSet<>(all)).size(), \"Some expressions were reused\");\n\n        assertEquals(\"1 > 2\", e1.toString());\n        assertEquals(\"(1 > 2) and (3 < 4)\", e2.toString());\n        assertEquals(\"(1 > 2) or (5 = 6)\", e3.toString());\n        assertEquals(\"((1 > 2) and (3 < 4)) or (7 > 8)\", e4.toString());\n        assertEquals(\"((1 > 2) or (5 = 6)) and (9 < 10)\", e5.toString());\n    }\n\n    @Test\n    public void positionalParamsThrowsOnTooFewParams() {\n        assertThrows(AgExpressionException.class, () -> Exp.parse(\"a = $1\").positionalParams());\n    }\n\n    @Test\n    public void namedParams_PartialResolution() {\n\n        Exp p1 = Exp.parse(\"a = $a\").namedParams(Collections.emptyMap(), false);\n        assertEquals(\"a = $a\", p1.toString());\n\n        Exp p2 = Exp.parse(\"a = $a and b = $b\").namedParams(Map.of(\"b\", 1), false);\n        assertEquals(\"(a = $a) and (b = 1)\", p2.toString());\n    }\n\n    @Test\n    public void positionalParamsThrowsOnTooManyParams() {\n        assertThrows(AgExpressionException.class, () -> Exp.parse(\"a = $1\").positionalParams(\"a\", \"b\"));\n    }\n\n    @Test\n    public void namedParamsIgnoresExtraParams() {\n        Exp.parse(\"a = $1\").namedParams(Map.of(\"1\", 2, \"2\", 4));\n    }\n\n    @Test\n    public void exists() {\n        assertEquals(\"exists (details.value between 5 and 6)\",\n                Exp.exists(\"details.value between 5 and 6\").toString());\n    }\n\n    @Test\n    public void notExists() {\n        assertEquals(\"not exists (details.value between 5 and 6)\",\n                Exp.notExists(\"details.value between 5 and 6\").toString());\n    }\n\n    @Test\n    public void between() {\n        assertEquals(\"a between 5 and 10\", Exp.between(\"a\", 5, 10).toString());\n    }\n\n    @Test\n    public void notBetween() {\n        assertEquals(\"a not between 5 and 10\", Exp.notBetween(\"a\", 5, 10).toString());\n    }\n\n    @Test\n    public void equal() {\n        assertEquals(\"a = 'b'\", Exp.equal(\"a\", \"b\").toString());\n    }\n\n    @Test\n    public void notEqual() {\n        assertEquals(\"a != 'b'\", Exp.notEqual(\"a\", \"b\").toString());\n    }\n\n    @Test\n    public void greater() {\n        assertEquals(\"a > 5\", Exp.greater(\"a\", 5).toString());\n    }\n\n    @Test\n    public void greaterOrEqual() {\n        assertEquals(\"a >= 5\", Exp.greaterOrEqual(\"a\", 5).toString());\n    }\n\n    @Test\n    public void less() {\n        assertEquals(\"a < 5\", Exp.less(\"a\", 5).toString());\n    }\n\n    @Test\n    public void lessOrEqual() {\n        assertEquals(\"a <= 5\", Exp.lessOrEqual(\"a\", 5).toString());\n    }\n\n    @Test\n    public void like() {\n        assertEquals(\"a like 'x%'\", Exp.like(\"a\", \"x%\").toString());\n    }\n\n    @Test\n    public void notLike() {\n        assertEquals(\"a not like 'x%'\", Exp.notLike(\"a\", \"x%\").toString());\n    }\n\n    @Test\n    public void likeIgnoreCase() {\n        assertEquals(\"a likeIgnoreCase 'x%'\", Exp.likeIgnoreCase(\"a\", \"x%\").toString());\n    }\n\n    @Test\n    public void notLikeIgnoreCase() {\n        assertEquals(\"a not likeIgnoreCase 'x%'\", Exp.notLikeIgnoreCase(\"a\", \"x%\").toString());\n    }\n\n    @Test\n    public void in() {\n        assertEquals(\"a in ('a', 4, 'b')\", Exp.in(\"a\", \"a\", 4, \"b\").toString());\n    }\n\n    @Test\n    public void inCollection() {\n        assertEquals(\"a in ('a', 4, 'b')\", Exp.inCollection(\"a\", List.of(\"a\", 4, \"b\")).toString());\n    }\n\n    @Test\n    public void notIn() {\n        assertEquals(\"a not in ('a', 4, 'b')\", Exp.notIn(\"a\", \"a\", 4, \"b\").toString());\n    }\n\n    @Test\n    public void notInCollection() {\n        assertEquals(\"a not in ('a', 4, 'b')\", Exp.notInCollection(\"a\", List.of(\"a\", 4, \"b\")).toString());\n    }\n\n    @Test\n    public void not() {\n        assertEquals(\"not (a = 5)\", Exp.not(Exp.equal(\"a\", 5)).toString());\n        assertEquals(\"a = 5\", Exp.not(Exp.not(Exp.equal(\"a\", 5))).toString());\n    }\n}"
