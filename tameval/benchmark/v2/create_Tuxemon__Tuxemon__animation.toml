[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/animation.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_animation.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.animation --unit-test tests.tuxemon.test_animation --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/animation.py --unit-test tests/tuxemon/test_animation.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 52.0
original_coverage = 55.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 19, 21, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 39, 40, 43, 44, 47, 48, 51, 52, 55, 64, 65, 70, 91, 92, 94, 95, 96, 101, 127, 130, 136, 138, 142, 143, 144, 147, 201, 207, 232, 254, 275, 308, 321, 328, 341, 350, 354, 360, 469, 475, 476, 478, 490, 492, 493, 495, 496, 497, 499, 502, 503, 504, 505, 507, 511, 513, 516, 519, 520, 521, 522, 523, 525, 532, 533, 534, 537, 538, 539, 541, 542, 544, 545, 546, 550, 551, 554, 557, 559, 566, 567, 569, 570, 571, 574, 575, 576, 577, 579, 581, 584, 585, 588, 590, 591, 592, 594, 595, 597, 598, 600, 602, 603, 606, 607, 608, 610, 615, 618, 621, 623, 625, 626, 628, 633, 634, 636, 637, 638, 644, 647, 649, 650, 651, 652, 653, 655, 658, 667, 668, 674, 677, 678, 679, 681, 682, 685, 695, 696, 697, 699, 700, 703, 704, 707, 708, 715, 716, 719, 720, 724, 725, 732, 733, 736, 737, 741, 742, 749, 750, 753, 754, 758, 759, 766, 767, 770, 771, 774, 775, 778, 779, 785, 786, 792, 793, 806, 807, 810, 811, 815, 816, 823, 824, 834, 835, 844, 845, 860, 861, 864, 865, 869, 870, 878, 879, 893, 894, 897, 898, 901, 902, 905, 906,]
missed_lines = [ 66, 67, 80, 81, 86, 87, 88, 128, 131, 213, 214, 216, 217, 219, 220, 224, 225, 226, 227, 228, 229, 230, 252, 267, 268, 269, 270, 271, 272, 273, 289, 290, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 310, 311, 312, 313, 314, 315, 317, 326, 336, 337, 338, 339, 343, 344, 346, 347, 348, 351, 352, 355, 356, 357, 508, 514, 524, 526, 527, 530, 536, 543, 548, 552, 555, 560, 561, 562, 563, 564, 572, 582, 586, 593, 604, 616, 619, 639, 642, 645, 656, 661, 662, 665, 675, 680, 701, 705, 709, 710, 711, 712, 713, 717, 721, 722, 726, 727, 728, 729, 730, 734, 738, 739, 743, 744, 745, 746, 747, 751, 755, 756, 760, 761, 762, 763, 764, 768, 772, 776, 780, 781, 782, 783, 787, 788, 789, 790, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 808, 812, 813, 817, 818, 819, 820, 821, 825, 826, 827, 828, 829, 830, 831, 832, 836, 837, 838, 839, 840, 841, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 862, 866, 867, 871, 872, 873, 874, 875, 876, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 895, 899, 903, 907, 908, 909, 910,]

[input_info]
test_file_path = "tests/tuxemon/test_animation.py"
focal_file_path = "tuxemon/animation.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_animation.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/animation.py"
first_commit_date = "2021-05-04"
last_commit_date = "2025-07-09"
test_file_content = "# SPDX-License-Identifier: GPL-3.0\n# Copyright (c) 2014-2025 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>\nimport unittest\nfrom unittest.mock import MagicMock\nfrom weakref import ref\n\nfrom tuxemon.animation import Animation, AnimationState, ScheduleType\n\nclass TestAnimation(unittest.TestCase):\n    def setUp(self) -> None:\n        self.ani = Animation(x=100, y=100, duration=1000)\n        self.sprite = MagicMock()\n\n    def test_start(self):\n        self.ani.start(self.sprite)\n        self.assertEqual(self.ani._state, AnimationState.RUNNING)\n        self.assertIsInstance(self.ani._targets[0], ref)\n        self.assertEqual(self.ani._targets[0](), self.sprite)\n\n    def test_update(self):\n        self.ani.start(self.sprite)\n        self.ani.update(500)\n        self.assertEqual(self.ani._elapsed, 500)\n\n    def test_abort(self):\n        self.ani.start(self.sprite)\n        self.ani.abort()\n        self.assertEqual(self.ani._state, AnimationState.ABORTED)\n\n    def test_get_value_callable(self):\n        self.sprite.x = lambda: 50\n        self.assertEqual(self.ani._get_value(self.sprite, \"x\"), 50)\n\n    def test_callback(self):\n        callback = MagicMock()\n        self.ani.schedule(callback, ScheduleType.ON_FINISH)\n        self.ani.start(MagicMock())\n        self.ani.finish()\n        callback.assert_called_once()\n"
