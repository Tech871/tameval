[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/boxes.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_boxes.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.boxes --unit-test tests.tuxemon.test_boxes --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/boxes.py --unit-test tests/tuxemon/test_boxes.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 71.0
original_coverage = 71.0
mutation_kill_rate = 64.0
original_mutation_kill_rate = 64.0
covered_lines = [ 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 20, 23, 24, 28, 29, 31, 40, 42, 43, 45, 57, 65, 66, 67, 69, 81, 88, 89, 90, 91, 93, 104, 112, 113, 115, 135, 145, 155, 167, 177, 179, 191, 193, 194, 198, 211, 213, 214, 218, 227, 234, 238, 252, 259, 266, 280, 287, 294, 312, 323, 327, 328, 335, 336, 342, 351, 366, 367, 371, 373, 380, 381, 385, 392, 394, 406, 416, 430, 435, 443, 444, 445, 446, 449, 451, 458, 470, 471, 472, 474, 488, 489, 490, 491, 493, 495, 508, 509, 510, 511, 515, 517, 526,]
missed_lines = [ 41, 53, 54, 55, 76, 77, 78, 79, 101, 102, 125, 165, 192, 196, 212, 216, 225, 245, 273, 305, 309, 310, 330, 340, 346, 355, 360, 361, 362, 363, 383, 521, 530, 532, 535, 536, 537, 540, 541, 544, 545, 546, 548,]

[input_info]
test_file_path = "tests/tuxemon/test_boxes.py"
focal_file_path = "tuxemon/boxes.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_boxes.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/boxes.py"
first_commit_date = "2024-10-26"
last_commit_date = "2025-08-07"
test_file_content = "# SPDX-License-Identifier: GPL-3.0\n# Copyright (c) 2014-2025 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>\nimport unittest\nfrom unittest.mock import MagicMock\nfrom uuid import uuid4\n\nfrom tuxemon.boxes import MonsterBoxes\nfrom tuxemon.monster import Monster\nfrom tuxemon.states.pc_kennel import HIDDEN_LIST\n\n\nclass TestBoxes(unittest.TestCase):\n\n    def setUp(self):\n        self.monster_boxes = MonsterBoxes()\n        self.monster1 = MagicMock(spec=Monster)\n        self.monster1.instance_id = uuid4()\n        self.monster2 = MagicMock(spec=Monster)\n        self.monster2.instance_id = uuid4()\n        self.box_id1 = \"box1\"\n        self.box_id2 = \"box2\"\n\n    def test_add_monster(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.assertIn(self.box_id1, self.monster_boxes.monster_boxes)\n        self.assertIn(\n            self.monster1, self.monster_boxes.monster_boxes[self.box_id1]\n        )\n\n    def test_remove_monster(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.remove_monster(self.monster1)\n        self.assertNotIn(\n            self.monster1, self.monster_boxes.monster_boxes[self.box_id1]\n        )\n\n    def test_remove_monster_from(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.remove_monster_from(self.box_id1, self.monster1)\n        self.assertNotIn(\n            self.monster1, self.monster_boxes.monster_boxes[self.box_id1]\n        )\n\n    def test_get_monsters_by_iid(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.assertEqual(\n            self.monster_boxes.get_monsters_by_iid(self.monster1.instance_id),\n            self.monster1,\n        )\n\n    def test_get_monsters(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id1, self.monster2)\n        self.assertEqual(\n            self.monster_boxes.get_monsters(self.box_id1),\n            [self.monster1, self.monster2],\n        )\n\n    def test_has_box(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.assertTrue(self.monster_boxes.has_box(self.box_id1, \"monster\"))\n\n    def test_get_box_ids(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id2, self.monster2)\n        self.assertEqual(\n            self.monster_boxes.get_box_ids(), [self.box_id1, self.box_id2]\n        )\n\n    def test_get_box_size(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id1, self.monster2)\n        self.assertEqual(\n            self.monster_boxes.get_box_size(self.box_id1, \"monster\"), 2\n        )\n\n    def test_get_box_name(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.assertEqual(\n            self.monster_boxes.get_box_name(self.monster1.instance_id),\n            self.box_id1,\n        )\n\n    def test_get_all_monsters(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id2, self.monster2)\n        self.assertEqual(\n            self.monster_boxes.get_all_monsters(),\n            [self.monster1, self.monster2],\n        )\n\n    def test_get_all_monsters_hidden(self):\n        HIDDEN_LIST.append(self.box_id1)\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id2, self.monster2)\n        self.assertEqual(\n            self.monster_boxes.get_all_monsters_hidden(), [self.monster1]\n        )\n\n    def test_get_all_monsters_visible(self):\n        HIDDEN_LIST.append(self.box_id1)\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id2, self.monster2)\n        self.assertEqual(\n            self.monster_boxes.get_all_monsters_visible(), [self.monster2]\n        )\n\n    def test_is_box_full(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.assertTrue(\n            self.monster_boxes.is_box_full(self.box_id1, max_capacity=1)\n        )\n        self.monster_boxes.remove_monster_from(self.box_id1, self.monster1)\n        self.assertFalse(\n            self.monster_boxes.is_box_full(self.box_id1, max_capacity=1)\n        )\n\n    def test_move_monster(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.move_monster(\n            self.box_id1, self.box_id2, self.monster1\n        )\n        self.assertIn(\n            self.monster1, self.monster_boxes.monster_boxes[self.box_id2]\n        )\n\n    def test_merge_boxes(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.add_monster(self.box_id1, self.monster2)\n        self.monster_boxes.merge_boxes(self.box_id1, self.box_id2)\n        self.assertEqual(self.monster_boxes.get_monsters(self.box_id1), [])\n        self.assertEqual(\n            self.monster_boxes.get_monsters(self.box_id2),\n            [self.monster1, self.monster2],\n        )\n\n    def test_create_box(self):\n        self.monster_boxes.create_box(self.box_id1, \"monster\")\n        self.assertIn(self.box_id1, self.monster_boxes.monster_boxes)\n\n    def test_remove_box(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.monster_boxes.remove_box(self.box_id1)\n        self.assertNotIn(self.box_id1, self.monster_boxes.monster_boxes)\n\n    def test_swap_with_external_monster(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        external_monster = Monster()\n        swapped_monster = self.monster_boxes.swap_with_external_monster(\n            self.box_id1, self.monster1, external_monster\n        )\n        self.assertEqual(swapped_monster, self.monster1)\n        self.assertEqual(\n            self.monster_boxes.get_monsters(self.box_id1), [external_monster]\n        )\n\n    def test_swap_with_external_monster_not_found(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        external_monster = Monster()\n        with self.assertRaises(ValueError):\n            self.monster_boxes.swap_with_external_monster(\n                self.box_id1, \"non_existent_monster\", external_monster\n            )\n\n    def test_swap_with_external_monster_invalid_box_id(self):\n        external_monster = Monster()\n        with self.assertRaises(ValueError):\n            self.monster_boxes.swap_with_external_monster(\n                \"non_existent_box_id\", self.monster1, external_monster\n            )\n\n    def test_swap_with_external_monster_by_iid(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        external_monster = Monster()\n        swapped_monster = self.monster_boxes.swap_with_external_monster_by_iid(\n            self.monster1.instance_id, external_monster\n        )\n        self.assertEqual(swapped_monster, self.monster1)\n        self.assertEqual(\n            self.monster_boxes.get_monsters(self.box_id1), [external_monster]\n        )\n\n    def test_swap_with_external_monster_by_iid_not_found(self):\n        self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        external_monster = Monster()\n        with self.assertRaises(ValueError):\n            self.monster_boxes.swap_with_external_monster_by_iid(\n                \"non_existent_monster\", external_monster\n            )\n\n    def test_create_and_merge_box(self):\n        for _ in range(10):\n            self.monster_boxes.add_monster(self.box_id1, self.monster1)\n        self.assertTrue(self.monster_boxes.is_box_full(self.box_id1, 10))\n        self.monster_boxes.create_and_merge_box(self.box_id1)\n        self.assertIn(f\"{self.box_id1}1\", self.monster_boxes.get_box_ids())\n        self.assertEqual(\n            len(self.monster_boxes.get_monsters(f\"{self.box_id1}1\")), 10\n        )\n        self.assertEqual(len(self.monster_boxes.get_monsters(self.box_id1)), 0)\n"
