[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "11"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "pkiraly/qa-catalogue"
sha = "66193841a3a3402c99e7e2392de68536ee11568b"

[run_info]
docker_image = "maven:3.8.4-openjdk-11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ContributorNormaliserTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ContributorNormaliser  -DtargetTests=**.ContributorNormaliserTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 44.0
original_coverage = 44.0
mutation_kill_rate = 30.0
original_mutation_kill_rate = 30.0
covered_lines = [ 23, 26, 27, 32, 35, 73, 77, 107, 110, 119, 122, 128, 131, 132, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 167, 168, 169, 170, 173, 174, 178, 179, 180, 184, 188, 189, 190, 191, 192, 195, 196, 198, 199, 200, 202, 204, 206, 207, 219, 222, 223, 224, 225, 226, 227, 229, 233, 234, 236, 237, 238, 241, 243, 247, 248, 251, 252, 255, 256, 259, 260, 263, 267, 268, 271, 272, 376, 377, 378,]
missed_lines = [ 208, 209, 211, 212, 213, 214, 215, 264, 275, 276, 279, 280, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 368, 371, 372, 382, 383, 384, 386, 387, 388, 389, 392, 393, 394, 395, 396, 397,]

[input_info]
test_file_path = "src/test/java/de/gwdg/metadataqa/marc/cli/utils/translation/ContributorNormaliserTest.java"
focal_file_path = "src/main/java/de/gwdg/metadataqa/marc/cli/utils/translation/ContributorNormaliser.java"
test_file_url = "https://github.com/pkiraly/qa-catalogue/blob/66193841a3a3402c99e7e2392de68536ee11568b/src/test/java/de/gwdg/metadataqa/marc/cli/utils/translation/ContributorNormaliserTest.java"
focal_file_url = "https://github.com/pkiraly/qa-catalogue/blob/66193841a3a3402c99e7e2392de68536ee11568b/src/main/java/de/gwdg/metadataqa/marc/cli/utils/translation/ContributorNormaliser.java"
first_commit_date = "2025-04-25"
last_commit_date = "2025-04-25"
test_file_content = "package de.gwdg.metadataqa.marc.cli.utils.translation;\n\nimport de.gwdg.metadataqa.api.configuration.ConfigurationReader;\nimport de.gwdg.metadataqa.api.configuration.SchemaConfiguration;\nimport de.gwdg.metadataqa.api.model.XmlFieldInstance;\nimport de.gwdg.metadataqa.api.schema.Schema;\nimport org.apache.commons.lang3.StringUtils;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static de.gwdg.metadataqa.marc.cli.utils.translation.ContributorNormaliser.TYPE.AUTHOR;\nimport static de.gwdg.metadataqa.marc.cli.utils.translation.ContributorNormaliser.TYPE.EDITOR;\nimport static de.gwdg.metadataqa.marc.cli.utils.translation.ContributorNormaliser.TYPE.TRANSLATOR;\nimport static org.junit.Assert.*;\n\npublic class ContributorNormaliserTest {\n\n  SchemaConfiguration schemaConfiguration;\n  ContributorNormaliser contributorNormaliser;\n\n  @Before\n  public void setUp() throws Exception {\n    String shaclFilePath = Paths.get(\"scripts/translations/translations-shacl.yml\").toAbsolutePath().toString();\n    schemaConfiguration = ConfigurationReader.readSchemaYaml(shaclFilePath);\n    Schema schema = schemaConfiguration.asSchema();\n    List<String> patterns = schema.getPathByLabel(\"245$c\").getRules().get(0).getMqafPattern().getPattern();\n    // List<String> patterns = List.of(\"ubersetzer\", \"Fordította|fordt́otta|Forditotta|Fordították\", \"[Ff]ord\\\\.\");\n    Pattern contribPattern = Pattern.compile(String.format(\"(%s)\", StringUtils.join(patterns, \"|\")));\n    System.err.println();\n    contributorNormaliser = new ContributorNormaliser(\"\", contribPattern);\n  }\n\n  @Test\n  public void hasLowercase() {\n    assertTrue(contributorNormaliser.hasLowercase(\"[ford. Tótisz András]\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"[Ford. Tótisz András]\"));\n    assertTrue(contributorNormaliser.hasLowercase(\"[átd. Tótisz András]\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"[Átd. Tótisz András]\"));\n\n    assertFalse(contributorNormaliser.hasLowercase(\"Honoré de Balzac\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"José Rodrigues dos Santos\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"Arkagyij és Borisz Sztrugackij\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"Inga von Bernau\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"írta Verne Gyula\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"írta és ill. Beatrix Potter\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"szerk. Borzsák István\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"[zenéjét szerezte Verdi]\"));\n    assertFalse(contributorNormaliser.hasLowercase(\"by Ferenc Molnár\"));\n  }\n\n  @Test\n  public void hasContributor() {\n    assertTrue(contributorNormaliser.hasContributor(\"[ubersetzer Tótisz András]\"));\n    assertTrue(contributorNormaliser.hasContributor(\"[ford. Tótisz András]\"));\n    assertTrue(contributorNormaliser.hasContributor(\"[Ford. Tótisz András]\"));\n    assertTrue(contributorNormaliser.hasContributor(\"[átd. Tótisz András]\"));\n    assertTrue(contributorNormaliser.hasContributor(\"[Átd. Tótisz András]\"));\n  }\n\n  @Test\n  public void getTranslators() {\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"[ford. Tótisz András]\")));\n    assertEquals(List.of(\"Tótisz András\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"írta és ford. Csanád Béla\")));\n    assertEquals(List.of(\"Csanád Béla\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Illyés Gyula et al.\")));\n    assertEquals(List.of(\"Illyés Gyula\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Füssi-Nagy Géza\")));\n    assertEquals(List.of(\"Füssi-Nagy Géza\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Sz. Elek Judit\")));\n    assertEquals(List.of(\"Sz. Elek Judit\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Hanusovszky Judit és Szántó Péter\")));\n    assertEquals(List.of(\"Hanusovszky Judit\", \"Szántó Péter\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Babits Mihály, Szabó Lőrinc, Tóth Árpád\")));\n    assertEquals(List.of(\"Babits Mihály\", \"Szabó Lőrinc\", \"Tóth Árpád\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"vál. és ford. Szopori Nagy Lajos\")));\n    assertEquals(List.of(\"Szopori Nagy Lajos\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. és magy. Babits Mihály\")));\n    assertEquals(List.of(\"Babits Mihály\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Szájer Zoltán.\")));\n    assertEquals(List.of(\"Szájer Zoltán\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"... ford. Tormay Cecilia\")));\n    assertEquals(List.of(\"Tormay Cecilia\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. F. Solti Erzsébet\")));\n    assertEquals(List.of(\"F. Solti Erzsébet\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"vál., szerk. és ford. Salamon Gábor és Zalotay Melinda\")));\n    assertEquals(List.of(\"Salamon Gábor\", \"Zalotay Melinda\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"fordította Babits Mihály ... et al.\")));\n    assertEquals(List.of(\"Babits Mihály\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"magyar szöveg Szőcs Zsóka\")));\n    assertEquals(List.of(\"Szőcs Zsóka\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ford. Simon P. Ibolya\")));\n    assertEquals(List.of(\"Simon P. Ibolya\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Sárosi Gyula fordításában\")));\n    assertEquals(List.of(\"Sárosi Gyula\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Sárosi Gyula fordításában\")));\n    assertEquals(List.of(\"Sárosi Gyula\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    // átköltésében\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Faludy György átköltésében\")));\n    assertEquals(List.of(\"Faludy György\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"a meséket ford. Vikár Béla valamint Kozma Andor és Zempléni Árpád\")));\n    assertEquals(List.of(\"Vikár Béla\", \"Kozma Andor\", \"Zempléni Árpád\"), contributorNormaliser.getContributors().get(TRANSLATOR));\n  }\n\n  @Test\n  public void getEditors() {\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"főszerk. Kovács János\")));\n    assertEquals(List.of(\"Kovács János\"), contributorNormaliser.getContributors().get(EDITOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"vál. és az előszót írta N. Kovács Tímea\")));\n    assertEquals(List.of(\"N. Kovács Tímea\"), contributorNormaliser.getContributors().get(EDITOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ed. by Katalin Kürtösi and József Pál\")));\n    assertEquals(List.of(\"Katalin Kürtösi\", \"József Pál\"), contributorNormaliser.getContributors().get(EDITOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"ausgew. von Károly Weber\")));\n    assertEquals(List.of(\"Károly Weber\"), contributorNormaliser.getContributors().get(EDITOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Lator László válogatása\")));\n    assertEquals(List.of(\"Lator László\"), contributorNormaliser.getContributors().get(EDITOR));\n  }\n\n  @Test\n  public void getAuthors() {\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Ruben Saillens alapján\")));\n    assertEquals(List.of(\"Ruben Saillens\"), contributorNormaliser.getContributors().get(AUTHOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Elizabeth Lenhard adaptációja\")));\n    assertEquals(List.of(\"Elizabeth Lenhard\"), contributorNormaliser.getContributors().get(AUTHOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Raymond Radiguet et al. művei\")));\n    assertEquals(List.of(\"Raymond Radiguet\"), contributorNormaliser.getContributors().get(AUTHOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"La Fontaine és Ezópusz meséit átd. Pádár Éva\")));\n    assertEquals(List.of(\"La Fontaine\", \"Ezópusz\", \"Pádár Éva\"), contributorNormaliser.getContributors().get(AUTHOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Mark Twain eredeti regényét átd. Oliver Ho\")));\n    assertEquals(List.of(\"Mark Twain\", \"Oliver Ho\"), contributorNormaliser.getContributors().get(AUTHOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Mark Twain eredeti regényét átd. Oliver Ho\")));\n    assertEquals(List.of(\"Mark Twain\", \"Oliver Ho\"), contributorNormaliser.getContributors().get(AUTHOR));\n\n    contributorNormaliser.process(List.of(new XmlFieldInstance(\"Marion Auer regénye\")));\n    assertEquals(List.of(\"Marion Auer\"), contributorNormaliser.getContributors().get(AUTHOR));\n  }\n\n  @Test\n  public void regex() {\n    Pattern regex = null;\n    Matcher matcher = null;\n    regex = Pattern.compile(\"^[\\\\p{javaUpperCase}][\\\\p{javaLowerCase}]+$\");\n    assertTrue(regex.matcher(\"Tótisz\").matches());\n\n    regex = Pattern.compile(\"^([\\\\p{javaUpperCase}][\\\\p{javaLowerCase}]+( [\\\\p{javaUpperCase}][\\\\p{javaLowerCase}]+)+)$\");\n    matcher = regex.matcher(\"Tótisz András\");\n    assertTrue(matcher.matches());\n    assertEquals(\"Tótisz András\", matcher.group(1));\n\n    regex = Pattern.compile(\"^ford\\\\. ([\\\\p{javaUpperCase}][\\\\p{javaLowerCase}]+( [\\\\p{javaUpperCase}][\\\\p{javaLowerCase}]+)+)$\");\n    matcher = regex.matcher(\"ford. Tótisz András\");\n    assertTrue(matcher.matches());\n    assertEquals(\"Tótisz András\", matcher.group(1));\n  }\n\n  @Test\n  public void regex2() {\n    Pattern regex = null;\n    Matcher matcher = null;\n    regex = Pattern.compile(\"^([\\\\p{javaUpperCase}][\\\\p{javaLowerCase}\\\\.]*(( |-|\\\\. | és |, | and | u\\\\. | valamint )[\\\\p{javaUpperCase}]([\\\\p{javaLowerCase}]+|\\\\.))+)(?: et al\\\\.|\\\\.| \\\\.\\\\.\\\\. et al\\\\.)? (?:fordításában|átköltésében)$\");\n    matcher = regex.matcher(\"Faludy György átköltésében\");\n    assertTrue(matcher.matches());\n    assertEquals(\"Faludy György\", matcher.group(1));\n  }\n}"
