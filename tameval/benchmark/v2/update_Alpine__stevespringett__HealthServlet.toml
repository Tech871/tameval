[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "stevespringett/Alpine"
sha = "bb816e4e9040a0d0fe7a7b2d39c9142933fd88af"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl alpine-server -Dtest=HealthServletTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl alpine-server -DtargetClasses=**.HealthServlet  -DtargetTests=**.HealthServletTest  -DoutputFormats=XML"
coverage_report_path = "alpine-server/target/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "alpine-server/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "alpine-server/src/test/java/alpine/server/servlets/HealthServletTest.java"
focal_file_path = "alpine-server/src/main/java/alpine/server/servlets/HealthServlet.java"
test_file_url = "https://github.com/stevespringett/Alpine/blob/bb816e4e9040a0d0fe7a7b2d39c9142933fd88af/alpine-server/src/test/java/alpine/server/servlets/HealthServletTest.java"
focal_file_url = "https://github.com/stevespringett/Alpine/blob/bb816e4e9040a0d0fe7a7b2d39c9142933fd88af/alpine-server/src/main/java/alpine/server/servlets/HealthServlet.java"
first_commit_date = "2023-03-31"
last_commit_date = "2024-05-17"
test_file_content = "package alpine.server.servlets;\n\nimport alpine.server.health.HealthCheckRegistry;\nimport net.javacrumbs.jsonunit.core.Option;\nimport org.eclipse.microprofile.health.HealthCheck;\nimport org.eclipse.microprofile.health.HealthCheckResponse;\nimport org.eclipse.microprofile.health.Liveness;\nimport org.eclipse.microprofile.health.Readiness;\nimport org.eclipse.microprofile.health.Startup;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintWriter;\nimport java.nio.charset.StandardCharsets;\nimport java.util.function.Supplier;\n\nimport static net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\npublic class HealthServletTest {\n\n    private HttpServletRequest requestMock;\n    private HttpServletResponse responseMock;\n    private ByteArrayOutputStream responseOutputStream;\n    private PrintWriter responseWriter;\n\n    @Before\n    public void setUp() throws Exception {\n        requestMock = mock(HttpServletRequest.class);\n        responseMock = mock(HttpServletResponse.class);\n        responseOutputStream = new ByteArrayOutputStream();\n        responseWriter = new PrintWriter(responseOutputStream);\n        when(responseMock.getWriter()).thenReturn(responseWriter);\n    }\n\n    @Test\n    public void shouldReportStatusUpWhenNoChecksAreRegistered() throws Exception {\n        final var servlet = new HealthServlet();\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(200));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"UP\",\n                          \"checks\": []\n                        }\n                        \"\"\");\n    }\n\n    @Test\n    public void shouldReportStatusUpWhenAllChecksAreUp() throws Exception {\n        final var checkA = new MockReadinessCheck(() -> HealthCheckResponse.up(\"foo\"));\n        final var checkB = new MockReadinessCheck(() -> HealthCheckResponse.up(\"bar\"));\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", checkA);\n        checkRegistry.register(\"bar\", checkB);\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(200));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .when(Option.IGNORING_ARRAY_ORDER)\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"UP\",\n                          \"checks\": [\n                            {\n                              \"name\": \"foo\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"bar\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            }\n                          ]\n                        }\n                        \"\"\");\n    }\n\n    @Test\n    public void shouldReportStatusDownWhenAtLeastOneCheckIsDown() throws Exception {\n        final var checkUp = new MockReadinessCheck(() -> HealthCheckResponse.up(\"foo\"));\n        final var checkDown = new MockReadinessCheck(() -> HealthCheckResponse.down(\"bar\"));\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", checkUp);\n        checkRegistry.register(\"bar\", checkDown);\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(503));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .when(Option.IGNORING_ARRAY_ORDER)\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"DOWN\",\n                          \"checks\": [\n                            {\n                              \"name\": \"foo\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"bar\",\n                              \"status\": \"DOWN\",\n                              \"data\": null\n                            }\n                          ]\n                        }\n                        \"\"\");\n    }\n\n    @Test\n    public void shouldNotReportAnythingWhenCallingAtLeastOneCheckFailed() throws Exception {\n        final var checkUp = new MockReadinessCheck(() -> HealthCheckResponse.up(\"foo\"));\n        final var checkFail = new MockReadinessCheck(() -> {\n            throw new IllegalStateException(\"Simulated check exception\");\n        });\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", checkUp);\n        checkRegistry.register(\"bar\", checkFail);\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).sendError(eq(500));\n        verify(responseMock, never()).setHeader(eq(\"Content-Type\"), anyString());\n        assertThat(responseOutputStream.size()).isZero();\n    }\n\n    @Test\n    public void shouldIncludeLivenessCheckWhenLivenessIsRequested() throws Exception {\n        final var livenessCheck = new MockLivenessCheck(() -> HealthCheckResponse.up(\"live\"));\n        final var readinessCheck = new MockReadinessCheck(() -> HealthCheckResponse.up(\"ready\"));\n        final var startupCheck = new MockStartupCheck(() -> HealthCheckResponse.up(\"start\"));\n        final var allTypesCheck = new MockAllTypesCheck(() -> HealthCheckResponse.up(\"all\"));\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", livenessCheck);\n        checkRegistry.register(\"bar\", readinessCheck);\n        checkRegistry.register(\"baz\", startupCheck);\n        checkRegistry.register(\"qux\", allTypesCheck);\n\n        when(requestMock.getPathInfo()).thenReturn(\"/live\");\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(200));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .when(Option.IGNORING_ARRAY_ORDER)\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"UP\",\n                          \"checks\": [\n                            {\n                              \"name\": \"live\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"all\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            }\n                          ]\n                        }\n                        \"\"\");\n    }\n\n    @Test\n    public void shouldIncludeReadinessCheckWhenReadinessIsRequested() throws Exception {\n        final var livenessCheck = new MockLivenessCheck(() -> HealthCheckResponse.up(\"live\"));\n        final var readinessCheck = new MockReadinessCheck(() -> HealthCheckResponse.up(\"ready\"));\n        final var startupCheck = new MockStartupCheck(() -> HealthCheckResponse.up(\"start\"));\n        final var allTypesCheck = new MockAllTypesCheck(() -> HealthCheckResponse.up(\"all\"));\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", livenessCheck);\n        checkRegistry.register(\"bar\", readinessCheck);\n        checkRegistry.register(\"baz\", startupCheck);\n        checkRegistry.register(\"qux\", allTypesCheck);\n\n        when(requestMock.getPathInfo()).thenReturn(\"/ready\");\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(200));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .when(Option.IGNORING_ARRAY_ORDER)\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"UP\",\n                          \"checks\": [\n                            {\n                              \"name\": \"ready\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"all\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            }\n                          ]\n                        }\n                        \"\"\");\n    }\n\n    @Test\n    public void shouldIncludeStartupCheckWhenStartupIsRequested() throws Exception {\n        final var livenessCheck = new MockLivenessCheck(() -> HealthCheckResponse.up(\"live\"));\n        final var readinessCheck = new MockReadinessCheck(() -> HealthCheckResponse.up(\"ready\"));\n        final var startupCheck = new MockStartupCheck(() -> HealthCheckResponse.up(\"start\"));\n        final var allTypesCheck = new MockAllTypesCheck(() -> HealthCheckResponse.up(\"all\"));\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", livenessCheck);\n        checkRegistry.register(\"bar\", readinessCheck);\n        checkRegistry.register(\"baz\", startupCheck);\n        checkRegistry.register(\"qux\", allTypesCheck);\n\n        when(requestMock.getPathInfo()).thenReturn(\"/started\");\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(200));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .when(Option.IGNORING_ARRAY_ORDER)\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"UP\",\n                          \"checks\": [\n                            {\n                              \"name\": \"start\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"all\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            }\n                          ]\n                        }\n                        \"\"\");\n    }\n\n    @Test\n    public void shouldIncludeAllChecksWhenAllAreRequested() throws Exception {\n        final var livenessCheck = new MockLivenessCheck(() -> HealthCheckResponse.up(\"live\"));\n        final var readinessCheck = new MockReadinessCheck(() -> HealthCheckResponse.up(\"ready\"));\n        final var startupCheck = new MockStartupCheck(() -> HealthCheckResponse.up(\"start\"));\n        final var allTypesCheck = new MockAllTypesCheck(() -> HealthCheckResponse.up(\"all\"));\n\n        final var checkRegistry = new HealthCheckRegistry();\n        checkRegistry.register(\"foo\", livenessCheck);\n        checkRegistry.register(\"bar\", readinessCheck);\n        checkRegistry.register(\"baz\", startupCheck);\n        checkRegistry.register(\"qux\", allTypesCheck);\n\n        when(requestMock.getPathInfo()).thenReturn(\"/\");\n\n        final var servlet = new HealthServlet(checkRegistry);\n        servlet.init();\n        servlet.doGet(requestMock, responseMock);\n\n        verify(responseMock).setStatus(eq(200));\n        verify(responseMock).setHeader(eq(\"Content-Type\"), eq(\"application/json\"));\n        assertThatJson(responseOutputStream.toString(StandardCharsets.UTF_8))\n                .when(Option.IGNORING_ARRAY_ORDER)\n                .isEqualTo(\"\"\"\n                        {\n                          \"status\": \"UP\",\n                          \"checks\": [\n                            {\n                              \"name\": \"live\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"ready\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"start\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            },\n                            {\n                              \"name\": \"all\",\n                              \"status\": \"UP\",\n                              \"data\": null\n                            }\n                          ]\n                        }\n                        \"\"\");\n    }\n\n    private abstract static class AbstractMockCheck implements HealthCheck {\n        private final Supplier<HealthCheckResponse> responseSupplier;\n\n        private AbstractMockCheck(final Supplier<HealthCheckResponse> responseSupplier) {\n            this.responseSupplier = responseSupplier;\n        }\n\n        @Override\n        public HealthCheckResponse call() {\n            return responseSupplier.get();\n        }\n    }\n\n    @Liveness\n    private static class MockLivenessCheck extends AbstractMockCheck {\n        private MockLivenessCheck(final Supplier<HealthCheckResponse> responseSupplier) {\n            super(responseSupplier);\n        }\n    }\n\n    @Readiness\n    private static class MockReadinessCheck extends AbstractMockCheck {\n        private MockReadinessCheck(final Supplier<HealthCheckResponse> responseSupplier) {\n            super(responseSupplier);\n        }\n    }\n\n    @Startup\n    private static class MockStartupCheck extends AbstractMockCheck {\n        private MockStartupCheck(final Supplier<HealthCheckResponse> responseSupplier) {\n            super(responseSupplier);\n        }\n    }\n\n    @Liveness\n    @Readiness\n    @Startup\n    private static class MockAllTypesCheck extends AbstractMockCheck {\n        private MockAllTypesCheck(final Supplier<HealthCheckResponse> responseSupplier) {\n            super(responseSupplier);\n        }\n    }\n\n}"
