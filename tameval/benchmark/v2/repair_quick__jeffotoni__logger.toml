[meta]
task = "repair"
scenario = "repair_invalid_constructor"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "jeffotoni/quick"
sha = "89f7be7048104f81431288179d7631ccbc2b3536"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out middleware/logger/logger.go middleware/logger/logger_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting middleware/logger/logger.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 89.0
mutation_kill_rate = nan
original_mutation_kill_rate = 40.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "middleware/logger/logger_test.go"
focal_file_path = "middleware/logger/logger.go"
test_file_url = "https://github.com/jeffotoni/quick/blob/89f7be7048104f81431288179d7631ccbc2b3536/middleware/logger/logger_test.go"
focal_file_url = "https://github.com/jeffotoni/quick/blob/89f7be7048104f81431288179d7631ccbc2b3536/middleware/logger/logger.go"
first_commit_date = "2023-02-22"
last_commit_date = "2025-03-19"
test_file_content = "package logger\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"io\"\n\t\"log/slog\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/jeffotoni/quick\"\n)\n\nfunc TestNew(t *testing.T) {\n\ttests := []struct {\n\t\tname       string\n\t\tsetupReq   func() *http.Request\n\t\texpectCode int\n\t}{\n\t\t{\n\t\t\tname: \"GET request with valid remote address\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treturn &http.Request{\n\t\t\t\t\tHeader:     http.Header{},\n\t\t\t\t\tHost:       \"localhost:3000\",\n\t\t\t\t\tMethod:     \"GET\",\n\t\t\t\t\tRemoteAddr: \"127.0.0.1:3000\",\n\t\t\t\t\tURL: &url.URL{\n\t\t\t\t\t\tScheme: \"http\",\n\t\t\t\t\t\tHost:   \"quick.com\",\n\t\t\t\t\t\tPath:   \"/test\",\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectCode: http.StatusOK,\n\t\t},\n\t\t{\n\t\t\tname: \"POST request with body\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treturn &http.Request{\n\t\t\t\t\tHeader:     http.Header{},\n\t\t\t\t\tHost:       \"localhost:3000\",\n\t\t\t\t\tMethod:     \"POST\",\n\t\t\t\t\tRemoteAddr: \"127.0.0.1:3000\",\n\t\t\t\t\tBody:       io.NopCloser(bytes.NewBufferString(\"Request Body\")),\n\t\t\t\t\tURL: &url.URL{\n\t\t\t\t\t\tScheme: \"http\",\n\t\t\t\t\t\tHost:   \"quick.com\",\n\t\t\t\t\t\tPath:   \"/submit\",\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectCode: http.StatusOK,\n\t\t},\n\t\t{\n\t\t\tname: \"Invalid RemoteAddr (should not break)\",\n\t\t\tsetupReq: func() *http.Request {\n\t\t\t\treturn &http.Request{\n\t\t\t\t\tHeader:     http.Header{},\n\t\t\t\t\tHost:       \"localhost:3000\",\n\t\t\t\t\tMethod:     \"GET\",\n\t\t\t\t\tRemoteAddr: \"invalid_addr\",\n\t\t\t\t\tURL: &url.URL{\n\t\t\t\t\t\tScheme: \"http\",\n\t\t\t\t\t\tHost:   \"quick.com\",\n\t\t\t\t\t\tPath:   \"/broken\",\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\texpectCode: http.StatusOK,\n\t\t},\n\t}\n\n\tfor _, ti := range tests {\n\t\tt.Run(ti.name, func(t *testing.T) {\n\t\t\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\t\tw.WriteHeader(http.StatusOK)\n\t\t\t\tw.Write([]byte(\"Quick in action!\"))\n\t\t\t})\n\n\t\t\tmw := New(Config{}, Config{})\n\t\t\thmw := mw(handler)\n\n\t\t\treq := ti.setupReq()\n\t\t\trec := httptest.NewRecorder()\n\n\t\t\thmw.ServeHTTP(rec, req)\n\n\t\t\tif rec.Code != ti.expectCode {\n\t\t\t\tt.Errorf(\"Expected status %d, got %d\", ti.expectCode, rec.Code)\n\t\t\t}\n\n\t\t\texpectedBody := \"Quick in action!\"\n\t\t\tif rec.Body.String() != expectedBody {\n\t\t\t\tt.Errorf(\"Expected response body %q, got %q\", expectedBody, rec.Body.String())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestLoggerMiddleware500(t *testing.T) {\n\thandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tw.Write([]byte(\"Internal Server Error\"))\n\t})\n\n\tmiddleware := New(Config{}, Config{}, Config{})\n\thandlerWithMiddleware := middleware(handler)\n\n\treq := &http.Request{\n\t\tHeader:     http.Header{},\n\t\tHost:       \"localhost:3000\",\n\t\tRemoteAddr: \"invalid\",\n\t\tMethod:     \"POST\",\n\t\tURL: &url.URL{\n\t\t\tScheme: \"http\",\n\t\t\tHost:   \"letsgoquick.com\",\n\t\t\tPath:   \"/error\",\n\t\t},\n\t}\n\n\trec := httptest.NewRecorder()\n\thandlerWithMiddleware.ServeHTTP(rec, req)\n\n\tif rec.Code != http.StatusInternalServerError {\n\t\tt.Errorf(\"Expected status %d, got %d\", http.StatusInternalServerError, rec.Code)\n\t}\n\n\texpectedBody := \"Internal Server Error\"\n\tif rec.Body.String() != expectedBody {\n\t\tt.Errorf(\"Expected response body %q, got %q\", expectedBody, rec.Body.String())\n\t}\n}\n\nfunc TestLoggerMiddleware(t *testing.T) {\n\tq := quick.New()\n\n\tq.Use(New(Config{\n\t\tFormat:  \"text\",\n\t\tPattern: \"[${time}] ${level} ${method} ${path} ${status} - ${latency} | user_id=${user_id}\\n\",\n\t\tLevel:   \"INFO\",\n\t\tCustomFields: map[string]string{\n\t\t\t\"user_id\": \"12345\",\n\t\t\t\"trace\":   \"abc-xyz\",\n\t\t},\n\t}, 1))\n\n\tq.Get(\"/logger\", func(c *quick.Ctx) error {\n\t\tt.Log(\"[DEBUG] Logger handler executed\")\n\t\treturn c.Status(200).JSON(map[string]string{\"msg\": \"Quick Logger!\"})\n\t})\n\n\tts := httptest.NewServer(q)\n\tdefer ts.Close()\n\n\tclient := ts.Client()\n\n\toutput := captureOutput(func() {\n\t\tresp, err := client.Get(ts.URL + \"/logger\")\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tdefer resp.Body.Close()\n\t})\n\n\tif !strings.Contains(output, \"INFO\") {\n\t\tt.Errorf(\"Expected 'INFO' log message, but got: %s\", output)\n\t}\n}\n\nfunc TestLoggerMiddlewareJSON(t *testing.T) {\n\tq := quick.New()\n\n\tq.Use(New(Config{\n\t\tFormat: \"json\",\n\t\tLevel:  \"INFO\",\n\t}, \"invalid\"))\n\n\tq.Get(\"/logger-json\", func(c *quick.Ctx) error {\n\t\treturn c.Status(200).JSON(map[string]string{\"msg\": \"Quick JSON Logger!\"})\n\t})\n\n\tts := httptest.NewServer(q)\n\tdefer ts.Close()\n\n\tclient := ts.Client()\n\n\toutput := captureOutput(func() {\n\t\tresp, err := client.Get(ts.URL + \"/logger-json\")\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tdefer resp.Body.Close()\n\t})\n\n\tvar jsonOutput map[string]interface{}\n\terr := json.Unmarshal([]byte(output), &jsonOutput)\n\tif err != nil {\n\t\tt.Errorf(\"JSON output is not valid: %s\", err)\n\t}\n\n\tif jsonOutput[\"status\"] != float64(http.StatusOK) {\n\t\tt.Errorf(\"Expected status %d, got %v\", http.StatusOK, jsonOutput[\"status\"])\n\t}\n}\n\nfunc TestLoggerMiddlewareDebug(t *testing.T) {\n\tq := quick.New()\n\n\tq.Use(New(Config{\n\t\tFormat:  \"slog\",\n\t\tPattern: \"[${time}] ${level} ${method} ${path} ${status} - ${latency}\",\n\t\tLevel:   \"DEBUG\",\n\t}, 3))\n\n\tq.Get(\"/logger-debug\", func(c *quick.Ctx) error {\n\t\treturn c.Status(200).JSON(map[string]string{\"msg\": \"Quick Debug Logger!\"})\n\t})\n\n\tts := httptest.NewServer(q)\n\tdefer ts.Close()\n\n\tclient := ts.Client()\n\n\toutput := captureOutput(func() {\n\t\tresp, err := client.Get(ts.URL + \"/logger-debug\")\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tdefer resp.Body.Close()\n\n\t\ttestLogger := slog.New(slog.NewTextHandler(os.Stdout, &slog.HandlerOptions{\n\t\t\tLevel: slog.LevelDebug,\n\t\t}))\n\n\t\ttestLogger.Debug(\"Test debug message\")\n\t})\n\n\tif !strings.Contains(output, \"DEBUG\") {\n\t\tt.Errorf(\"Expected '[DEBUG]' log message, but got: %s\", output)\n\t}\n}"
