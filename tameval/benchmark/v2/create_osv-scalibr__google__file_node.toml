[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.4"

[repo_info]
repository = "google/osv-scalibr"
sha = "68757353cde699f714e3edbe2ef641c84e737ac6"

[run_info]
docker_image = "golang:1.23.4"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out artifact/image/layerscanning/image/file_node.go artifact/image/layerscanning/image/file_node_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting artifact/image/layerscanning/image/file_node.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 38.0
original_coverage = 84.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 96, 100, 101, 102, 106, 110, 111, 112, 113, 114, 115, 121, 122, 123, 142, 143, 144,]
missed_lines = [ 61, 62, 63, 64, 65, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 97, 98, 99, 103, 104, 105, 116, 130, 131, 132, 133, 137, 138, 139, 147, 148, 149, 154, 155, 156, 158, 159, 160, 162, 163, 164, 166, 167, 168,]

[input_info]
test_file_path = "artifact/image/layerscanning/image/file_node_test.go"
focal_file_path = "artifact/image/layerscanning/image/file_node.go"
test_file_url = "https://github.com/google/osv-scalibr/blob/68757353cde699f714e3edbe2ef641c84e737ac6/artifact/image/layerscanning/image/file_node_test.go"
focal_file_url = "https://github.com/google/osv-scalibr/blob/68757353cde699f714e3edbe2ef641c84e737ac6/artifact/image/layerscanning/image/file_node.go"
first_commit_date = "2024-12-07"
last_commit_date = "2025-01-23"
test_file_content = "// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage image\n\nimport (\n\t\"io\"\n\t\"io/fs\"\n\t\"os\"\n\t\"path\"\n\t\"testing\"\n\n)\n\nvar (\n\trootDirectory = &fileNode{\n\t\textractDir:    \"/tmp/extract\",\n\t\toriginLayerID: \"layer1\",\n\t\tvirtualPath:   \"/\",\n\t\tisWhiteout:    false,\n\t\tmode:          fs.ModeDir | dirPermission,\n\t}\n\trootFile = &fileNode{\n\t\textractDir:    \"/tmp/extract\",\n\t\toriginLayerID: \"layer1\",\n\t\tvirtualPath:   \"/bar\",\n\t\tisWhiteout:    false,\n\t\tmode:          filePermission,\n\t}\n\tnonRootDirectory = &fileNode{\n\t\textractDir:    \"/tmp/extract\",\n\t\toriginLayerID: \"layer1\",\n\t\tvirtualPath:   \"/dir1/dir2\",\n\t\tisWhiteout:    false,\n\t\tmode:          fs.ModeDir | dirPermission,\n\t}\n\tnonRootFile = &fileNode{\n\t\textractDir:    \"/tmp/extract\",\n\t\toriginLayerID: \"layer1\",\n\t\tvirtualPath:   \"/dir1/foo\",\n\t\tisWhiteout:    false,\n\t\tmode:          filePermission,\n\t}\n)\n\n// TODO: b/377551664 - Add tests for the Stat method for the fileNode type.\n\nfunc TestRead(t *testing.T) {\n\tconst bufferSize = 20\n\n\ttempDir := t.TempDir()\n\t_ = os.WriteFile(path.Join(tempDir, \"bar\"), []byte(\"bar\"), 0600)\n\n\t_ = os.WriteFile(path.Join(tempDir, \"baz\"), []byte(\"baz\"), 0600)\n\topenedRootFile, err := os.OpenFile(path.Join(tempDir, \"baz\"), os.O_RDONLY, filePermission)\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to open file: %v\", err)\n\t}\n\t// Close the file after the test. The file should be closed via the fileNode.Close method,\n\t// however, this test explicitly closes the file since the fileNode.Close method is tested in a\n\t// separate test.\n\tdefer openedRootFile.Close()\n\n\t_ = os.MkdirAll(path.Join(tempDir, \"dir1\"), 0700)\n\t_ = os.WriteFile(path.Join(tempDir, \"dir1/foo\"), []byte(\"foo\"), 0600)\n\n\tfileNodeWithUnopenedFile := &fileNode{\n\t\textractDir:    tempDir,\n\t\toriginLayerID: \"\",\n\t\tvirtualPath:   \"/bar\",\n\t\tisWhiteout:    false,\n\t\tmode:          filePermission,\n\t}\n\tfileNodeWithOpenedFile := &fileNode{\n\t\textractDir:    tempDir,\n\t\toriginLayerID: \"\",\n\t\tvirtualPath:   \"/baz\",\n\t\tisWhiteout:    false,\n\t\tmode:          filePermission,\n\t\tfile:          openedRootFile,\n\t}\n\tfileNodeNonRootFile := &fileNode{\n\t\textractDir:    tempDir,\n\t\toriginLayerID: \"\",\n\t\tvirtualPath:   \"/dir1/foo\",\n\t\tisWhiteout:    false,\n\t\tmode:          filePermission,\n\t}\n\tfileNodeNonexistentFile := &fileNode{\n\t\textractDir:    tempDir,\n\t\toriginLayerID: \"\",\n\t\tvirtualPath:   \"/dir1/xyz\",\n\t\tisWhiteout:    false,\n\t\tmode:          filePermission,\n\t}\n\tfileNodeWhiteoutFile := &fileNode{\n\t\textractDir:    tempDir,\n\t\toriginLayerID: \"\",\n\t\tvirtualPath:   \"/dir1/abc\",\n\t\tisWhiteout:    true,\n\t\tmode:          filePermission,\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\tnode    *fileNode\n\t\twant    string\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"unopened root file\",\n\t\t\tnode: fileNodeWithUnopenedFile,\n\t\t\twant: \"bar\",\n\t\t},\n\t\t{\n\t\t\tname: \"opened root file\",\n\t\t\tnode: fileNodeWithOpenedFile,\n\t\t\twant: \"baz\",\n\t\t},\n\t\t{\n\t\t\tname: \"non-root file\",\n\t\t\tnode: fileNodeNonRootFile,\n\t\t\twant: \"foo\",\n\t\t},\n\t\t{\n\t\t\tname:    \"nonexistent file\",\n\t\t\tnode:    fileNodeNonexistentFile,\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname:    \"whiteout file\",\n\t\t\tnode:    fileNodeWhiteoutFile,\n\t\t\twantErr: true,\n\t\t},\n\t}\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgotBytes := make([]byte, bufferSize)\n\t\t\tgotNumBytesRead, gotErr := tc.node.Read(gotBytes)\n\n\t\t\tif gotErr != nil {\n\t\t\t\tif tc.wantErr {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"Read(%v) returned error: %v\", tc.node, gotErr)\n\t\t\t}\n\n\t\t\tgotContent := string(gotBytes[:gotNumBytesRead])\n\t\t\tif gotContent != tc.want {\n\t\t\t\tt.Errorf(\"Read(%v) = %v, want: %v\", tc.node, gotContent, tc.want)\n\t\t\t}\n\n\t\t\t// Close the file. The Close method is tested in a separate test.\n\t\t\t_ = tc.node.Close()\n\t\t})\n\t}\n}\n\n\n// Test for the Seek method\nfunc TestSeek(t *testing.T) {\n\ttempDir := t.TempDir()\n\t_ = os.WriteFile(path.Join(tempDir, \"bar\"), []byte(\"bar\"), 0600)\n\n\t// Test seeking to different positions\n\ttests := []struct {\n\t\tname   string\n\t\toffset int64\n\t\twhence int\n\t\twant   int64\n\t}{\n\t\t{\n\t\t\tname:   \"seek to beginning\",\n\t\t\toffset: 0,\n\t\t\twhence: io.SeekStart,\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"seek to current position\",\n\t\t\toffset: 0,\n\t\t\twhence: io.SeekCurrent,\n\t\t\twant:   0,\n\t\t},\n\t\t{\n\t\t\tname:   \"seek to end\",\n\t\t\toffset: 0,\n\t\t\twhence: io.SeekEnd,\n\t\t\twant:   3,\n\t\t},\n\t\t{\n\t\t\tname:   \"seek to 10 bytes from beginning\",\n\t\t\toffset: 10,\n\t\t\twhence: io.SeekStart,\n\t\t\twant:   10,\n\t\t},\n\t\t{\n\t\t\tname:   \"seek to 10 bytes from current position (at 0)\",\n\t\t\toffset: 10,\n\t\t\twhence: io.SeekCurrent,\n\t\t\twant:   10,\n\t\t},\n\t\t{\n\t\t\tname:   \"seek to 2 bytes from end\",\n\t\t\toffset: -2,\n\t\t\twhence: io.SeekEnd,\n\t\t\twant:   1,\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\t// Create a fileNode for the opened file\n\t\t\tfileNode := &fileNode{\n\t\t\t\textractDir:    tempDir,\n\t\t\t\toriginLayerID: \"\",\n\t\t\t\tvirtualPath:   \"/bar\",\n\t\t\t\tisWhiteout:    false,\n\t\t\t\tmode:          filePermission,\n\t\t\t}\n\t\t\tgotPos, err := fileNode.Seek(tc.offset, tc.whence)\n\t\t\t_ = fileNode.Close()\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"Seek failed: %v\", err)\n\t\t\t}\n\t\t\tif gotPos != tc.want {\n\t\t\t\tt.Errorf(\"Seek returned incorrect position: got %d, want %d\", gotPos, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\n\n\n\n\n\nfunc TestType(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\tnode *fileNode\n\t\twant fs.FileMode\n\t}{\n\t\t{\n\t\t\tname: \"root directory\",\n\t\t\tnode: rootDirectory,\n\t\t\twant: fs.ModeDir | dirPermission,\n\t\t},\n\t\t{\n\t\t\tname: \"root file\",\n\t\t\tnode: rootFile,\n\t\t\twant: filePermission,\n\t\t},\n\t\t{\n\t\t\tname: \"non-root file\",\n\t\t\tnode: nonRootFile,\n\t\t\twant: filePermission,\n\t\t},\n\t\t{\n\t\t\tname: \"non-root directory\",\n\t\t\tnode: nonRootDirectory,\n\t\t\twant: fs.ModeDir | dirPermission,\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgot := tc.node.Type()\n\t\t\tif got != tc.want {\n\t\t\t\tt.Errorf(\"Type(%v) = %v, want: %v\", tc.node, got, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"
