[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bufbuild/buf"
sha = "37b5a2a496a2279aa03507be64cba00193644a1e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out private/pkg/stringutil/stringutil.go private/pkg/stringutil/stringutil_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting private/pkg/stringutil/stringutil.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 77.69
original_coverage = 80.0
mutation_kill_rate = 79.06
original_mutation_kill_rate = nan
covered_lines = [ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 136, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 151, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 223, 224, 225, 226, 230, 231, 232, 235, 236, 237, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 256, 260, 261, 262, 265, 266, 267, 270, 271, 272, 275, 276, 277, 280, 281, 282, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 315, 316, 317, 318, 319, 322, 323, 324,]
missed_lines = [ 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 155, 156, 157, 158, 159,]

[input_info]
test_file_path = "private/pkg/stringutil/stringutil_test.go"
focal_file_path = "private/pkg/stringutil/stringutil.go"
test_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/pkg/stringutil/stringutil_test.go"
focal_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/pkg/stringutil/stringutil.go"
first_commit_date = "2021-08-25"
last_commit_date = "2025-01-02"
test_file_content = "// Copyright 2020-2025 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage stringutil\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestToLowerSnakeCase(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, \"\", ToLowerSnakeCase(\"\"))\n\tassert.Equal(t, \"\", ToLowerSnakeCase(\"  \"))\n\tassert.Equal(t, \"\", ToLowerSnakeCase(\"_\"))\n\tassert.Equal(t, \"\", ToLowerSnakeCase(\"__\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PascalCase\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"  PascalCase\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PascalCase  \"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"pascalCase\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PascalCase_\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"_PascalCase\"))\n\tassert.Equal(t, \"pascal_case_hello\", ToLowerSnakeCase(\"PascalCase__Hello\"))\n\tassert.Equal(t, \"json_pascal\", ToLowerSnakeCase(\"JSONPascal\"))\n\tassert.Equal(t, \"foo_json_pascal\", ToLowerSnakeCase(\"FooJSONPascal\"))\n\tassert.Equal(t, \"json_pascal_json\", ToLowerSnakeCase(\"JSONPascalJSON\"))\n\tassert.Equal(t, \"v1\", ToLowerSnakeCase(\"v1\"))\n\tassert.Equal(t, \"v1beta1\", ToLowerSnakeCase(\"v1beta1\"))\n\tassert.Equal(t, \"v1beta_1\", ToLowerSnakeCase(\"v1beta_1\"))\n\tassert.Equal(t, \"v_1\", ToLowerSnakeCase(\"v1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"v_1beta_1\", ToLowerSnakeCase(\"v1beta1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"pascal_case1\", ToLowerSnakeCase(\"PascalCase1\"))\n\tassert.Equal(t, \"pascal_case_1\", ToLowerSnakeCase(\"PascalCase_1\"))\n\tassert.Equal(t, \"pascal_case_1\", ToLowerSnakeCase(\"PascalCase1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"foo_json1_pascal\", ToLowerSnakeCase(\"FooJSON1Pascal\"))\n\tassert.Equal(t, \"foo_json_1_pascal\", ToLowerSnakeCase(\"FooJSON_1Pascal\"))\n\tassert.Equal(t, \"foo_json_1_pascal\", ToLowerSnakeCase(\"FooJSON1Pascal\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"pascal_case1\", ToLowerSnakeCase(\"pascal_case1\"))\n\tassert.Equal(t, \"pascal_case_1\", ToLowerSnakeCase(\"pascal_case_1\"))\n\tassert.Equal(t, \"pascal_case_1\", ToLowerSnakeCase(\"pascal_case1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"pascal_case_1\", ToLowerSnakeCase(\"pascal_case_1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"foo_bar_baz\", ToLowerSnakeCase(\"foo_bar_baz\"))\n\tassert.Equal(t, \"foo_bar_baz\", ToLowerSnakeCase(\"_foo_bar_baz_\"))\n\tassert.Equal(t, \"foo_bar_baz\", ToLowerSnakeCase(\"foo_bar__baz\"))\n\tassert.Equal(t, \"pascal_case_hello\", ToLowerSnakeCase(\"PascalCase--Hello\"))\n\tassert.Equal(t, \"foo_bar_baz\", ToLowerSnakeCase(\"_foo-bar-baz_\"))\n\tassert.Equal(t, \"foo_bar_baz\", ToLowerSnakeCase(\"  Foo  Bar  _Baz\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"pascal_case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"pascalCase\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"  pascal_case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"  pascal_case  \"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"pascal_case  \"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"Pascal_case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"__Pascal___case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"__Pascal___case__\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"Pascal___case__\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"Pascal-case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"Pascal case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"  Pascal case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PASCAL_case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"__PASCAL___case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"__PASCAL___case__\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PASCAL___case__\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PASCAL-case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"PASCAL case\"))\n\tassert.Equal(t, \"pascal_case\", ToLowerSnakeCase(\"  PASCAL case\"))\n}\n\nfunc TestToUpperSnakeCase(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, \"\", ToUpperSnakeCase(\"\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PascalCase\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"pascalCase\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PascalCase_\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"_PascalCase\"))\n\tassert.Equal(t, \"PASCAL_CASE_HELLO\", ToUpperSnakeCase(\"PascalCase__Hello\"))\n\tassert.Equal(t, \"JSON_PASCAL\", ToUpperSnakeCase(\"JSONPascal\"))\n\tassert.Equal(t, \"FOO_JSON_PASCAL\", ToUpperSnakeCase(\"FooJSONPascal\"))\n\tassert.Equal(t, \"PASCAL_CASE1\", ToUpperSnakeCase(\"PascalCase1\"))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"PascalCase_1\"))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"PascalCase1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"FOO_JSON1_PASCAL\", ToUpperSnakeCase(\"FooJSON1Pascal\"))\n\tassert.Equal(t, \"FOO_JSON_1_PASCAL\", ToUpperSnakeCase(\"FooJSON_1Pascal\"))\n\tassert.Equal(t, \"FOO_JSON_1_PASCAL\", ToUpperSnakeCase(\"FooJSON1Pascal\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"PASCAL_CASE1\", ToUpperSnakeCase(\"pascal_case1\"))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"pascal_case_1\"))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"pascal_case1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"pascal_case_1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"PASCAL_CASE1\", ToUpperSnakeCase(\"PASCAL_CASE1\"))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"PASCAL_CASE_1\"))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"PASCAL_CASE1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"PASCAL_CASE_1\", ToUpperSnakeCase(\"PASCAL_CASE_1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"V1\", ToUpperSnakeCase(\"v1\"))\n\tassert.Equal(t, \"V1BETA1\", ToUpperSnakeCase(\"v1beta1\"))\n\tassert.Equal(t, \"V_1\", ToUpperSnakeCase(\"v1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"V_1BETA_1\", ToUpperSnakeCase(\"v1beta1\", SnakeCaseWithNewWordOnDigits()))\n\tassert.Equal(t, \"FOO_BAR_BAZ\", ToUpperSnakeCase(\"foo_bar_baz\"))\n\tassert.Equal(t, \"FOO_BAR_BAZ\", ToUpperSnakeCase(\"_foo_bar_baz_\"))\n\tassert.Equal(t, \"FOO_BAR_BAZ\", ToUpperSnakeCase(\"foo_bar__baz\"))\n\tassert.Equal(t, \"PASCAL_CASE_HELLO\", ToUpperSnakeCase(\"PascalCase--Hello\"))\n\tassert.Equal(t, \"FOO_BAR_BAZ\", ToUpperSnakeCase(\"_foo-bar-baz_\"))\n\tassert.Equal(t, \"FOO_BAR_BAZ\", ToUpperSnakeCase(\"  Foo  Bar  _Baz\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"pascal_case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"pascalCase\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"  pascal_case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"  pascal_case  \"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"pascal_case  \"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"Pascal_case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"__Pascal___case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"__Pascal___case__\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"Pascal___case__\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"Pascal-case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"Pascal case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"  Pascal case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PASCAL_case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"__PASCAL___case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"__PASCAL___case__\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PASCAL___case__\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PASCAL-case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PASCAL case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"  PASCAL case\"))\n\tassert.Equal(t, \"PASCAL_CASE\", ToUpperSnakeCase(\"PASCAL_case\"))\n}\n\nfunc TestToPascalCase(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, \"\", ToPascalCase(\"\"))\n\tassert.Equal(t, \"\", ToPascalCase(\"  \"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"pascal_case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"pascalCase\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"  pascal_case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"  pascal_case  \"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"pascal_case  \"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"Pascal_case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"__Pascal___case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"__Pascal___case__\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"Pascal___case__\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"Pascal-case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"Pascal case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"  Pascal case\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"PASCAL_case\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"__PASCAL___case\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"__PASCAL___case__\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"PASCAL___case__\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"PASCAL-case\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"PASCAL case\"))\n\tassert.Equal(t, \"PASCALCase\", ToPascalCase(\"  PASCAL case\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"PascalCase\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"pascalCase\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"PascalCase_\"))\n\tassert.Equal(t, \"PascalCase\", ToPascalCase(\"_PascalCase\"))\n\tassert.Equal(t, \"PascalCaseHello\", ToPascalCase(\"PascalCase__Hello\"))\n\tassert.Equal(t, \"JSONPascal\", ToPascalCase(\"JSONPascal\"))\n\tassert.Equal(t, \"FooJSONPascal\", ToPascalCase(\"FooJSONPascal\"))\n\tassert.Equal(t, \"PascalCase1\", ToPascalCase(\"PascalCase1\"))\n\tassert.Equal(t, \"FooJSON1Pascal\", ToPascalCase(\"FooJSON1Pascal\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"foo_bar_baz\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"_foo_bar_baz_\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"foo_bar__baz\"))\n\tassert.Equal(t, \"PascalCaseHello\", ToPascalCase(\"PascalCase--Hello\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"_foo-bar-baz_\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"  Foo  Bar  _Baz\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"  Foo.Bar.Baz\"))\n\tassert.Equal(t, \"FooBarBaz\", ToPascalCase(\"foo_bar.baz\"))\n}\n\nfunc TestJoinSliceQuoted(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, ``, JoinSliceQuoted(nil, \", \"))\n\tassert.Equal(t, ``, JoinSliceQuoted([]string{}, \", \"))\n\tassert.Equal(t, `\"a\"`, JoinSliceQuoted([]string{\"a\"}, \", \"))\n\tassert.Equal(t, `\"a\", \"b\"`, JoinSliceQuoted([]string{\"a\", \"b\"}, \", \"))\n\tassert.Equal(t, `\"a\", \"b\", \"c\"`, JoinSliceQuoted([]string{\"a\", \"b\", \"c\"}, \", \"))\n}\n\nfunc TestSliceToHumanString(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, ``, SliceToHumanString(nil))\n\tassert.Equal(t, ``, SliceToHumanString([]string{}))\n\tassert.Equal(t, `a`, SliceToHumanString([]string{\"a\"}))\n\tassert.Equal(t, `a and b`, SliceToHumanString([]string{\"a\", \"b\"}))\n\tassert.Equal(t, `a, b, and c`, SliceToHumanString([]string{\"a\", \"b\", \"c\"}))\n}\n\nfunc TestSliceToHumanStringQuoted(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, ``, SliceToHumanStringQuoted(nil))\n\tassert.Equal(t, ``, SliceToHumanStringQuoted([]string{}))\n\tassert.Equal(t, `\"a\"`, SliceToHumanStringQuoted([]string{\"a\"}))\n\tassert.Equal(t, `\"a\" and \"b\"`, SliceToHumanStringQuoted([]string{\"a\", \"b\"}))\n\tassert.Equal(t, `\"a\", \"b\", and \"c\"`, SliceToHumanStringQuoted([]string{\"a\", \"b\", \"c\"}))\n}\n\nfunc TestSliceToHumanStringOr(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, ``, SliceToHumanStringOr(nil))\n\tassert.Equal(t, ``, SliceToHumanStringOr([]string{}))\n\tassert.Equal(t, `a`, SliceToHumanStringOr([]string{\"a\"}))\n\tassert.Equal(t, `a or b`, SliceToHumanStringOr([]string{\"a\", \"b\"}))\n\tassert.Equal(t, `a, b, or c`, SliceToHumanStringOr([]string{\"a\", \"b\", \"c\"}))\n}\n\nfunc TestSliceToHumanStringOrQuoted(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, ``, SliceToHumanStringOrQuoted(nil))\n\tassert.Equal(t, ``, SliceToHumanStringOrQuoted([]string{}))\n\tassert.Equal(t, `\"a\"`, SliceToHumanStringOrQuoted([]string{\"a\"}))\n\tassert.Equal(t, `\"a\" or \"b\"`, SliceToHumanStringOrQuoted([]string{\"a\", \"b\"}))\n\tassert.Equal(t, `\"a\", \"b\", or \"c\"`, SliceToHumanStringOrQuoted([]string{\"a\", \"b\", \"c\"}))\n}\n\nfunc TestSliceToUniqueSortedSliceFilterEmptyStrings(t *testing.T) {\n\tt.Parallel()\n\tassert.Equal(t, []string{}, SliceToUniqueSortedSliceFilterEmptyStrings(nil))\n\tassert.Equal(t, []string{}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{}))\n\tassert.Equal(t, []string{\"Are\", \"bats\", \"cats\"}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{\"bats\", \"Are\", \"cats\"}))\n\tassert.Equal(t, []string{\"Are\", \"are\", \"bats\", \"cats\"}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{\"bats\", \"Are\", \"cats\", \"are\"}))\n\tassert.Equal(t, []string{\"Are\", \"Bats\", \"bats\", \"cats\"}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{\"bats\", \"Are\", \"cats\", \"Are\", \"Bats\"}))\n\tassert.Equal(t, []string{\"Are\", \"Bats\", \"bats\", \"cats\"}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{\"bats\", \"Are\", \"cats\", \"\", \"Are\", \"Bats\", \"\"}))\n\tassert.Equal(t, []string{}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{\"\", \"\", \"  \"}))\n\tassert.Equal(t, []string{}, SliceToUniqueSortedSliceFilterEmptyStrings([]string{\"\"}))\n}\n\nfunc TestAlphanumeric(t *testing.T) {\n\tt.Parallel()\n\tassert.True(t, IsAlphanumeric('0'))\n\tassert.False(t, IsAlphanumeric('.'))\n}\n\nfunc TestIsAlpha(t *testing.T) {\n\tt.Parallel()\n\tassert.True(t, IsAlpha('r'))\n\tassert.True(t, IsAlpha('A'))\n\tassert.True(t, IsAlpha('Z'))\n\tassert.True(t, IsAlpha('a'))\n\tassert.True(t, IsAlpha('z'))\n\tassert.False(t, IsAlpha('.'))\n\tassert.False(t, IsAlpha('0'))\n\tassert.False(t, IsAlpha('9'))\n\tassert.False(t, IsAlpha('!'))\n}\n\nfunc TestIsLowerAlpha(t *testing.T) {\n\tt.Parallel()\n\tassert.True(t, IsLowerAlpha('r'))\n\tassert.False(t, IsLowerAlpha('R'))\n}\n\nfunc TestIsUpperAlpha(t *testing.T) {\n\tt.Parallel()\n\tassert.True(t, IsUpperAlpha('R'))\n\tassert.False(t, IsUpperAlpha('r'))\n}\n\nfunc TestIsNumeric(t *testing.T) {\n\tt.Parallel()\n\tassert.True(t, IsNumeric('0'))\n\tassert.False(t, IsNumeric('r'))\n}\n\nfunc TestIsLowerAlphanumeric(t *testing.T) {\n\tt.Parallel()\n\tassert.True(t, IsLowerAlphanumeric('0'))\n\tassert.True(t, IsLowerAlphanumeric('r'))\n\tassert.True(t, IsLowerAlphanumeric('a'))\n\tassert.True(t, IsLowerAlphanumeric('z'))\n\tassert.True(t, IsLowerAlphanumeric('9'))\n\tassert.False(t, IsLowerAlphanumeric('R'))\n\tassert.False(t, IsLowerAlphanumeric('A'))\n\tassert.False(t, IsLowerAlphanumeric('Z'))\n\tassert.False(t, IsLowerAlphanumeric('!'))\n}\n\nfunc TestIsAlphanumeric(t *testing.T) {\n\tt.Parallel()\n\trequire.True(t, IsAlphanumeric('A'))\n\trequire.True(t, IsAlphanumeric('Z'))\n\trequire.True(t, IsAlphanumeric('a'))\n\trequire.True(t, IsAlphanumeric('z'))\n\trequire.True(t, IsAlphanumeric('0'))\n\trequire.True(t, IsAlphanumeric('9'))\n\trequire.False(t, IsAlphanumeric('!'))\n}\n\nfunc TestWordWrap(t *testing.T) {\n\tt.Parallel()\n\n\tassert.Equal(\n\t\tt,\n\t\t[]string{\n\t\t\t\"\",\n\t\t},\n\t\tWordWrap(\"\", 7),\n\t)\n\tassert.Equal(\n\t\tt,\n\t\t[]string{\n\t\t\t\"foo bar\",\n\t\t},\n\t\tWordWrap(\"foo bar\", 7),\n\t)\n\tassert.Equal(\n\t\tt,\n\t\t[]string{\n\t\t\t\"foo\",\n\t\t\t\"bar\",\n\t\t},\n\t\tWordWrap(\"foo bar\", 6),\n\t)\n\tassert.Equal(\n\t\tt,\n\t\t[]string{\n\t\t\t\"foobar\",\n\t\t},\n\t\tWordWrap(\"foobar\", 5),\n\t)\n}\n"
