[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "doytowin/doyto-query"
sha = "27754a721c6c437edcb2a8936d4c4a6212125d03"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl doyto-query-dialect -Dtest=SQLServerDialectTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl doyto-query-dialect -DtargetClasses=**.SQLServerDialect  -DtargetTests=**.SQLServerDialectTest  -DoutputFormats=XML"
coverage_report_path = "doyto-query-dialect/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "doyto-query-dialect/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 60.0
original_coverage = 93.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 31, 33, 37, 38, 39, 40, 41, 43, 46,]
missed_lines = [ 51, 56, 61, 62, 63, 64,]

[input_info]
test_file_path = "doyto-query-dialect/src/test/java/win/doyto/query/dialect/SQLServerDialectTest.java"
focal_file_path = "doyto-query-dialect/src/main/java/win/doyto/query/dialect/SQLServerDialect.java"
test_file_url = "https://github.com/doytowin/doyto-query/blob/27754a721c6c437edcb2a8936d4c4a6212125d03/doyto-query-dialect/src/test/java/win/doyto/query/dialect/SQLServerDialectTest.java"
focal_file_url = "https://github.com/doytowin/doyto-query/blob/27754a721c6c437edcb2a8936d4c4a6212125d03/doyto-query-dialect/src/main/java/win/doyto/query/dialect/SQLServerDialect.java"
first_commit_date = "2023-06-23"
last_commit_date = "2025-03-07"
test_file_content = "\n\npackage win.doyto.query.dialect;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n\nclass SQLServerDialectTest {\n\n    private final SQLServerDialect dialect = new SQLServerDialect();\n\n    @Test\n    void buildPageSqlForSelectWithoutOrderBy() {\n        String pageSql = dialect.buildPageSql(\"SELECT username, password FROM user WHERE valid = true\", 10, 100);\n    }\n\n    @Test\n    void buildPageSqlForSelectWithOrderBy() {\n        String pageSql = dialect.buildPageSql(\"SELECT username, password FROM user WHERE valid = true ORDER BY username DESC\", 10, 100);\n    }\n\n    @Test\n    void buildPageSqlForSelectWithGroupBy() {\n        String pageSql = dialect.buildPageSql(\"SELECT user_level AS userLevel, valid, count(*) AS count FROM t_user \" +\n                \"WHERE valid = ? GROUP BY user_level, valid HAVING count(*) > ? AND count(*) < ?\", 10, 20);\n    }\n\n    @Test\n    void resolveKeyColumn() {\n    }\n\n    @Test\n    void convertMultiColumnsIn() {\n\n        StringBuilder sqlBuilder = new StringBuilder(\"SELECT count(*) FROM a_user_and_role WHERE (user_id, role_id) IN ((?, ?), (?, ?))\");\n    }\n}"
