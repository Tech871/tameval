[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "Password4j/password4j"
sha = "18aaa552d76471585cc40517e05adb9e8dd1ad3d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=HashTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Hash  -DtargetTests=**.HashTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = 79.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/com/password4j/HashTest.java"
focal_file_path = "src/main/java/com/password4j/Hash.java"
test_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/test/com/password4j/HashTest.java"
focal_file_url = "https://github.com/Password4j/password4j/blob/18aaa552d76471585cc40517e05adb9e8dd1ad3d/src/main/java/com/password4j/Hash.java"
first_commit_date = "2020-02-24"
last_commit_date = "2024-05-01"
test_file_content = "package com.password4j;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.Arrays;\n\n\npublic class HashTest\n{\n\n\n\n    @Test\n    public void testHashContent()\n    {\n        // GIVEN\n        String hashed = \"myHash\";\n        String salt = \"mySalt\";\n        String pepper = \"myPepper\";\n        HashingFunction function = new CompressedPBKDF2Function();\n\n        // WHEN\n        Hash hash = new Hash(function, hashed, hashed.getBytes(), salt);\n        hash.setPepper(pepper);\n        Hash hash2 = new Hash(function, hashed, hashed.getBytes(), salt);\n\n        // THEN\n        Assert.assertEquals(hashed, hash.getResult());\n        Assert.assertEquals(salt, hash.getSalt());\n        Assert.assertEquals(pepper, hash.getPepper());\n        Assert.assertEquals(Arrays.toString(hashed.getBytes()), Arrays.toString(hash.getBytes()));\n        Assert.assertNull(hash2.getPepper());\n    }\n\n    @Test\n    public void testHashCheckNull()\n    {\n        // GIVEN\n        Hash hash = Password.hash(\"myPassword\").withCompressedPBKDF2();\n\n        // WHEN\n        boolean result = Password.check((byte[]) null, hash);\n\n        // THEN\n        Assert.assertFalse(result);\n    }\n\n    @Test\n    public void testHashEquality()\n    {\n        // GIVEN\n        Hash hash = Password.hash(\"myPassword\").withCompressedPBKDF2();\n\n        // WHEN\n        boolean eq1 = hash.equals(null);\n        boolean eq2 = hash.equals(new Object());\n        boolean eq3 = hash.equals(new Hash(AlgorithmFinder.getCompressedPBKDF2Instance(), hash.getResult(), hash.getBytes(), hash.getSalt()));\n        boolean eq4 = hash.equals(new Hash(AlgorithmFinder.getPBKDF2Instance(), hash.getResult(), hash.getBytes(), hash.getSalt()));\n        boolean eq5 = hash.equals(new Hash(AlgorithmFinder.getCompressedPBKDF2Instance(), \"hash\", hash.getBytes(), hash.getSalt()));\n        boolean eq6 = hash.equals(new Hash(AlgorithmFinder.getCompressedPBKDF2Instance(), hash.getResult(), hash.getBytes(), \"salt\"));\n        boolean eq7 = hash.equals(new Hash(AlgorithmFinder.getCompressedPBKDF2Instance(), hash.getResult(), new byte[]{1,2,3,4}, hash.getSalt()));\n\n\n        hash.setPepper(\"pepper\");\n        Hash testingHash = new Hash(AlgorithmFinder.getCompressedPBKDF2Instance(), hash.getResult(), hash.getBytes(), hash.getSalt());\n        testingHash.setPepper(hash.getPepper());\n        boolean eq8 = hash.equals(testingHash);\n        hash.setPepper(\"reppep\");\n        boolean eq9 = hash.equals(testingHash);\n\n        // THEN\n        Assert.assertFalse(eq1);\n        Assert.assertFalse(eq2);\n        Assert.assertTrue(eq3);\n        Assert.assertFalse(eq4);\n        Assert.assertFalse(eq5);\n        Assert.assertFalse(eq6);\n        Assert.assertFalse(eq7);\n        Assert.assertTrue(eq8);\n        Assert.assertFalse(eq9);\n    }\n\n    @Test\n    public void testSecFunc()\n    {\n        // GIVEN\n        Hash hash1 = Password.hash(\"myPassword\").withCompressedPBKDF2();\n        Hash hash2 = Password.hash(\"myPassword\").withPBKDF2();\n        Hash hash3 = Password.hash(\"myPassword\").addPepper().withPBKDF2();\n\n        // WHEN\n        String toString1 = hash1.toString();\n        int hc1 = hash1.hashCode();\n        String toString2 = hash2.toString();\n        int hc2 = hash2.hashCode();\n        String toString3 = hash3.toString();\n        Hash hash4 = new Hash(hash3.getHashingFunction(), hash3.getResult(), hash3.getBytes(), hash3.getSalt());\n\n\n        // THEN\n        Assert.assertNotNull(toString1);\n        Assert.assertNotNull(toString2);\n        Assert.assertNotEquals(toString1, toString2);\n        Assert.assertNotEquals(toString3, toString2);\n        Assert.assertNotEquals(hc1, hc2);\n        Assert.assertNotEquals(hash4, hash3);\n    }\n\n}"
