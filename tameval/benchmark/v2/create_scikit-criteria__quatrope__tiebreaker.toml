[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "quatrope/scikit-criteria"
sha = "35f17eeeafd80d666aac740be7c4eba9b14359b8"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements_dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=skcriteria/tiebreaker.py -m pytest -q --junit-xml=test_output.xml tests/test_tiebreaker.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target skcriteria.tiebreaker --unit-test tests.test_tiebreaker --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target skcriteria/tiebreaker.py --unit-test tests/test_tiebreaker.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 46.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 17, 19, 21, 23, 24, 25, 32, 36, 44, 92, 93, 95, 97, 98, 99, 100, 102, 103, 104, 106, 115, 116, 117, 118, 119, 125, 126, 134, 136, 137, 146, 148, 149, 158, 162, 188, 228, 251, 287,]
missed_lines = [ 180, 181, 184, 185, 186, 213, 215, 218, 219, 222, 223, 225, 226, 246, 247, 248, 249, 273, 276, 285, 309, 310, 311, 314, 317, 318, 321, 322, 325, 327, 332, 335, 340, 343, 344, 347, 355, 357, 360, 362, 363, 364, 370, 373, 380,]

[input_info]
test_file_path = "tests/test_tiebreaker.py"
focal_file_path = "skcriteria/tiebreaker.py"
test_file_url = "https://github.com/quatrope/scikit-criteria/blob/35f17eeeafd80d666aac740be7c4eba9b14359b8/tests/test_tiebreaker.py"
focal_file_url = "https://github.com/quatrope/scikit-criteria/blob/35f17eeeafd80d666aac740be7c4eba9b14359b8/skcriteria/tiebreaker.py"
first_commit_date = "2025-07-02"
last_commit_date = "2025-08-01"
test_file_content = "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# License: BSD-3 (https://tldrlegal.com/license/bsd-3-clause-license-(revised))\n# Copyright (c) 2016-2021, Cabral, Juan; Luczywo, Nadia\n# Copyright (c) 2022-2025 QuatroPe\n# All rights reserved.\n\n# =============================================================================\n# DOCS\n# =============================================================================\n\n\"\"\"Tests for skcriteria.fallback_tiebreaker\"\"\"\n\n# =============================================================================\n# IMPORTS\n# =============================================================================\n\nimport numpy as np\n\nimport pytest\n\nimport skcriteria as skc\nfrom skcriteria.agg import RankResult, SKCDecisionMakerABC\nfrom skcriteria.agg.simple import WeightedProductModel, WeightedSumModel\nfrom skcriteria.tiebreaker import (\n    FallbackTieBreaker,\n    TieUnresolvedWarning,\n)\n\n# =============================================================================\n# TESTS\n# =============================================================================\n\ndef test_FallbackTieBreaker_properties():\n    primary = WeightedSumModel()\n    fallback = WeightedProductModel()\n\n    tb = FallbackTieBreaker(primary, fallback, force=False)\n\n    assert tb.dmaker is primary\n    assert tb.untier is fallback\n    assert tb.force is False\n\ndef test_FallbackTieBreaker_repr():\n    primary = WeightedSumModel()\n    fallback = WeightedProductModel()\n\n    tb = FallbackTieBreaker(primary, fallback, force=False)\n\n    expected = (\n        \"<FallbackTieBreaker dmaker=<WeightedSumModel []>, \"\n        \"untier=<WeightedProductModel []>, force=False>\"\n    )\n\n    assert repr(tb) == expected\n\ndef test_FallbackTieBreaker_bad_dmaker():\n    primary = \"Despair\"\n    fallback = WeightedProductModel()\n\n    with pytest.raises(TypeError) as ex:\n        FallbackTieBreaker(primary, fallback, force=False)\n        assert \"'dmaker' must implement 'evaluate()' method\" in str(ex.value)\n\ndef test_FallbackTieBreaker_bad_untier():\n    primary = WeightedSumModel()\n    fallback = \"FIFA\"\n\n    with pytest.raises(TypeError) as ex:\n        FallbackTieBreaker(primary, fallback, force=False)\n        assert \"'untier' must implement 'evaluate()' method\" in str(ex.value)\n"
