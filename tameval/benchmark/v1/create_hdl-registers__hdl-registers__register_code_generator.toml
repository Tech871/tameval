[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/generator/register_code_generator.py -m pytest -q --junit-xml=test_output.xml hdl_registers/generator/test/test_register_code_generator.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.generator.register_code_generator --unit-test hdl_registers.generator.test.test_register_code_generator --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/generator/register_code_generator.py --unit-test hdl_registers/generator/test/test_register_code_generator.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 90.12
original_coverage = 99.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = nan
covered_lines = [ 9, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 26, 30, 39, 40, 41, 57, 58, 59, 76, 77, 78, 93, 94, 112, 117, 124, 126, 133, 134, 136, 138, 154, 156, 157, 162, 163, 165, 170, 172, 182, 183, 186, 188, 217, 218, 219, 221, 223, 224, 239, 241, 245, 246, 248, 254, 260, 262, 263, 264, 267, 271, 272, 273, 275, 279, 280, 281, 283, 286, 287, 288, 290, 292, 293, 298, 299, 300, 302, 303, 308, 310, 315, 322, 324, 326, 327, 329, 331, 332, 334, 335, 338, 344, 346, 352, 360, 381, 382, 384, 391, 392, 393, 397, 399, 400, 402, 403, 405, 406, 408, 409, 411, 416, 417, 418, 419, 421, 425, 426, 427, 434, 436, 443, 444, 445, 452, 454, 455, 456, 463, 470, 472, 476, 477, 479, 480, 492, 494, 502, 504, 505, 508, 512, 513, 518, 520, 522, 523, 527, 528, 529, 534, 536,]
missed_lines = [ 27, 159, 336, 337, 339, 342, 428, 432, 446, 450, 457, 461, 464, 468, 481, 486, 490,]

[input_info]
test_file_path = "hdl_registers/generator/test/test_register_code_generator.py"
focal_file_path = "hdl_registers/generator/register_code_generator.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/generator/test/test_register_code_generator.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/generator/register_code_generator.py"
first_commit_date = "2023-07-13"
last_commit_date = "2025-03-14"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\nimport contextlib\nimport io\nfrom pathlib import Path\nfrom unittest.mock import PropertyMock, patch\n\nimport pytest\nfrom tsfpga.system_utils import create_directory, create_file\n\nfrom hdl_registers import __version__ as hdl_registers_version\nfrom hdl_registers.generator.register_code_generator import RegisterCodeGenerator\nfrom hdl_registers.parser.toml import from_toml\nfrom hdl_registers.register_list import RegisterList\nfrom hdl_registers.register_modes import REGISTER_MODES\n\n\nclass CustomGenerator(RegisterCodeGenerator):\n    SHORT_DESCRIPTION = \"for test\"\n    COMMENT_START = \"#\"\n    __version__ = \"3.0.1\"\n\n    @property\n    def output_file(self):\n        return self.output_folder / f\"{self.name}.x\"\n\n    def get_code(\n        self,\n        **kwargs,  # noqa: ARG002\n    ) -> str:\n        return \"Nothing, its a stupid generator.\"\n\n\n@pytest.fixture\ndef generator_from_toml(tmp_path):\n    def get(toml_extras=\"\"):\n        toml_data = f\"\"\"\\\n################################################################################\n[data]\n\nmode = \"w\"\ndescription = \"My register\"\n\n{toml_extras}\n\"\"\"\n\n        register_list = from_toml(\n            name=\"sensor\", toml_file=create_file(tmp_path / \"sensor_regs.toml\", toml_data)\n        )\n\n        return CustomGenerator(register_list=register_list, output_folder=tmp_path)\n\n    return get\n\n\n\n\ndef test_create_should_not_run_if_nothing_has_changed(generator_from_toml):\n    generator = generator_from_toml()\n    generator.register_list.add_constant(name=\"apa\", value=3, description=\"\")\n    generator.create_if_needed()\n\n    generator = generator_from_toml()\n    generator.register_list.add_constant(name=\"apa\", value=3, description=\"\")\n    with patch(f\"{__name__}.CustomGenerator.create\", autospec=True) as mocked_create:\n        generator.create_if_needed()\n        mocked_create.assert_not_called()\n\n\n\n\ndef test_create_should_run_again_if_toml_file_has_changed(generator_from_toml):\n    generator = generator_from_toml()\n    generator.create_if_needed()\n\n    generator = generator_from_toml(\n        \"\"\"\n[apa]\n\ntype = \"constant\"\nvalue = 3\n\"\"\"\n    )\n    with patch(f\"{__name__}.CustomGenerator.create\", autospec=True) as mocked_create:\n        generator.create_if_needed()\n        mocked_create.assert_called_once()\n\n\n\n\n\n\n\n\n\n\n\n\ndef test_constant_with_reserved_name_should_raise_exception(generator_from_toml):\n    generator = generator_from_toml(\n        \"\"\"\n[for]\n\ntype = \"constant\"\nvalue = 3\n\"\"\"\n    )\n    with pytest.raises(ValueError) as exception_info:\n        generator.create_if_needed()\n    assert (\n        str(exception_info.value)\n        == 'Error in register list \"sensor\": Constant name \"for\" is a reserved keyword.'\n    )\n\n\ndef test_plain_register_with_reserved_name_should_raise_exception(generator_from_toml):\n    generator = generator_from_toml(\n        \"\"\"\n[for]\n\nmode = \"r_w\"\n\"\"\"\n    )\n    with pytest.raises(ValueError) as exception_info:\n        generator.create_if_needed()\n    assert (\n        str(exception_info.value)\n        == 'Error in register list \"sensor\": Register name \"for\" is a reserved keyword.'\n    )\n\n\ndef test_plain_register_field_with_reserved_name_should_raise_exception(generator_from_toml):\n    generator = generator_from_toml(\n        \"\"\"\n[test]\n\nmode = \"r_w\"\n\nfor.type = \"bit\"\n\"\"\",\n    )\n    with pytest.raises(ValueError) as exception_info:\n        generator.create_if_needed()\n    assert (\n        str(exception_info.value)\n        == 'Error in register list \"sensor\": Field name \"for\" is a reserved keyword.'\n    )\n\n\n\n\n\n\n\n\ndef test_reserved_name_check_works_even_with_strange_case(generator_from_toml):\n    generator = generator_from_toml(\n        \"\"\"\n[FoR]\n\nmode = \"r_w\"\n\"\"\"\n    )\n    with pytest.raises(ValueError) as exception_info:\n        generator.create_if_needed()\n    assert (\n        str(exception_info.value)\n        == 'Error in register list \"sensor\": Register name \"FoR\" is a reserved keyword.'\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef test_plain_field_with_same_qualified_name_as_array_register_should_raise_exception(tmp_path):\n    register_list = RegisterList(name=\"test\")\n    register = register_list.append_register(name=\"apa\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n    register.append_bit(name=\"hest_zebra\", description=\"\", default_value=\"0\")\n    array = register_list.append_register_array(name=\"apa_hest\", length=2, description=\"\")\n    array.append_register(name=\"zebra\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n\n    with pytest.raises(ValueError) as exception_info:\n        CustomGenerator(register_list=register_list, output_folder=tmp_path).create()\n    assert str(exception_info.value) == (\n        'Error in register list \"test\": Qualified name of register \"apa_hest.zebra\" '\n        '(\"test_apa_hest_zebra\") clashes with another item.'\n    )\n\n\ndef test_array_field_with_same_qualified_name_as_plain_register_should_raise_exception(tmp_path):\n    register_list = RegisterList(name=\"test\")\n    register_list.append_register(name=\"apa_hest_zebra\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n    array = register_list.append_register_array(name=\"apa\", length=3, description=\"\")\n    register = array.append_register(name=\"hest\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n    register.append_bit(name=\"zebra\", description=\"\", default_value=\"0\")\n\n    with pytest.raises(ValueError) as exception_info:\n        CustomGenerator(register_list=register_list, output_folder=tmp_path).create()\n    assert str(exception_info.value) == (\n        'Error in register list \"test\": Qualified name of field \"apa.hest.zebra\" '\n        '(\"test_apa_hest_zebra\") clashes with another item.'\n    )\n"
