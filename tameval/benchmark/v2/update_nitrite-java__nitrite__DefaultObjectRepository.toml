[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "nitrite/nitrite-java"
sha = "32693e9538c4108c8c94b7a5b736ef96d9d7714c"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl nitrite -Dtest=DefaultObjectRepositoryTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl nitrite -DtargetClasses=**.DefaultObjectRepository  -DtargetTests=**.DefaultObjectRepositoryTest  -DoutputFormats=XML"
coverage_report_path = "nitrite/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "nitrite/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 67.0
mutation_kill_rate = nan
original_mutation_kill_rate = 40.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "nitrite/src/test/java/org/dizitart/no2/repository/DefaultObjectRepositoryTest.java"
focal_file_path = "nitrite/src/main/java/org/dizitart/no2/repository/DefaultObjectRepository.java"
test_file_url = "https://github.com/nitrite/nitrite-java/blob/32693e9538c4108c8c94b7a5b736ef96d9d7714c/nitrite/src/test/java/org/dizitart/no2/repository/DefaultObjectRepositoryTest.java"
focal_file_url = "https://github.com/nitrite/nitrite-java/blob/32693e9538c4108c8c94b7a5b736ef96d9d7714c/nitrite/src/main/java/org/dizitart/no2/repository/DefaultObjectRepository.java"
first_commit_date = "2020-08-11"
last_commit_date = "2024-08-15"
test_file_content = "/*\n * Copyright (c) 2017-2021 Nitrite author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\npackage org.dizitart.no2.repository;\n\nimport org.dizitart.no2.NitriteConfig;\nimport org.dizitart.no2.collection.*;\nimport org.dizitart.no2.collection.events.CollectionEventListener;\nimport org.dizitart.no2.common.meta.Attributes;\nimport org.dizitart.no2.common.RecordStream;\nimport org.dizitart.no2.common.WriteResult;\nimport org.dizitart.no2.common.processors.ProcessorChain;\nimport org.dizitart.no2.common.streams.DocumentStream;\nimport org.dizitart.no2.common.tuples.Pair;\nimport org.dizitart.no2.exceptions.ValidationException;\nimport org.dizitart.no2.filters.Filter;\nimport org.dizitart.no2.index.IndexDescriptor;\nimport org.dizitart.no2.index.IndexOptions;\nimport org.dizitart.no2.store.memory.InMemoryStore;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class DefaultObjectRepositoryTest {\n    @Test\n    public void testAddProcessor() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).addProcessor(any());\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.addProcessor(new ProcessorChain());\n        verify(nitriteCollection).addProcessor(any());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testCreateIndex() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).createIndex(any(IndexOptions.class), any(String[].class));\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.createIndex(IndexOptions.indexOptions(\"Index Type\"), \"foo\", \"foo\", \"foo\");\n        verify(nitriteCollection).createIndex(any(IndexOptions.class), any(String[].class));\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testRebuildIndex() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).rebuildIndex(any(String[].class));\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.rebuildIndex(\"foo\", \"foo\", \"foo\");\n        verify(nitriteCollection).rebuildIndex(any(String[].class));\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testListIndices() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        ArrayList<IndexDescriptor> indexDescriptorList = new ArrayList<>();\n        when(nitriteCollection.listIndices()).thenReturn(indexDescriptorList);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        Collection<IndexDescriptor> actualListIndicesResult = defaultObjectRepository.listIndices();\n        assertSame(indexDescriptorList, actualListIndicesResult);\n        assertTrue(actualListIndicesResult.isEmpty());\n        verify(nitriteCollection).listIndices();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testHasIndex() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.hasIndex(any(String[].class))).thenReturn(true);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertTrue(defaultObjectRepository.hasIndex(\"foo\", \"foo\", \"foo\"));\n        verify(nitriteCollection).hasIndex(any(String[].class));\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testIsIndexing() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.isIndexing(any(String[].class))).thenReturn(true);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertTrue(defaultObjectRepository.isIndexing(\"foo\", \"foo\", \"foo\"));\n        verify(nitriteCollection).isIndexing(any(String[].class));\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testDropIndex() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).dropIndex(any(String[].class));\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.dropIndex(\"foo\", \"foo\", \"foo\");\n        verify(nitriteCollection).dropIndex(any(String[].class));\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testDropAllIndices() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).dropAllIndices();\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.dropAllIndices();\n        verify(nitriteCollection).dropAllIndices();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testInsert() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.insert(any())).thenReturn(mock(WriteResult.class));\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.insert(new Object[]{});\n        verify(nitriteCollection).insert(any());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testUpdate2() {\n        DefaultObjectRepository<Object> defaultObjectRepository = (DefaultObjectRepository<Object>) mock(\n            DefaultObjectRepository.class);\n        when(defaultObjectRepository.update(any(), (Object) any(), any())).thenReturn(null);\n        defaultObjectRepository.update(mock(Filter.class), \"Update\", UpdateOptions.updateOptions(true));\n        verify(defaultObjectRepository).update(any(), (Object) any(), any());\n    }\n\n    @Test\n    public void testRemove2() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.remove(any(), anyBoolean())).thenReturn(mock(WriteResult.class));\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.remove(mock(Filter.class), true);\n        verify(nitriteCollection).remove(any(), anyBoolean());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testClear() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).clear();\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.clear();\n        verify(nitriteCollection).clear();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testFind() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        RecordStream<Pair<NitriteId, Document>> recordStream = (RecordStream<Pair<NitriteId, Document>>) mock(\n            RecordStream.class);\n        when(nitriteCollection.find(any(), any()))\n            .thenReturn(new DocumentStream(recordStream, new ProcessorChain()));\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        Filter filter = mock(Filter.class);\n        assertNull(defaultObjectRepository.find(filter, new FindOptions()).getFindPlan());\n        verify(nitriteCollection).find(any(), any());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testDrop() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).drop();\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.drop();\n        verify(nitriteCollection).drop();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testIsDropped() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.isDropped()).thenReturn(true);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertTrue(defaultObjectRepository.isDropped());\n        verify(nitriteCollection).isDropped();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testIsOpen() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.isOpen()).thenReturn(true);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertTrue(defaultObjectRepository.isOpen());\n        verify(nitriteCollection).isOpen();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testClose() throws Exception {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).close();\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.close();\n        verify(nitriteCollection).close();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testSize() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        when(nitriteCollection.size()).thenReturn(1L);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertEquals(1L, defaultObjectRepository.size());\n        verify(nitriteCollection).size();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testGetStore() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        InMemoryStore inMemoryStore = new InMemoryStore();\n        doReturn(inMemoryStore).when(nitriteCollection).getStore();\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertSame(inMemoryStore, defaultObjectRepository.getStore());\n        verify(nitriteCollection).getStore();\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testSubscribe() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).subscribe(any());\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.subscribe(mock(CollectionEventListener.class));\n        verify(nitriteCollection).subscribe(any());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testUnsubscribe() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).unsubscribe(any());\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.unsubscribe(mock(CollectionEventListener.class));\n        verify(nitriteCollection).unsubscribe(any());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test\n    public void testGetAttributes() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        Attributes attributes = new Attributes();\n        when(nitriteCollection.getAttributes()).thenReturn(attributes);\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        assertSame(attributes, defaultObjectRepository.getAttributes());\n        verify(nitriteCollection).getAttributes();\n        assertNull(defaultObjectRepository.getStore());\n    }\n\n    @Test\n    public void testSetAttributes() {\n        NitriteCollection nitriteCollection = mock(NitriteCollection.class);\n        doNothing().when(nitriteCollection).setAttributes(any());\n        Class<Object> type = Object.class;\n        DefaultObjectRepository<Object> defaultObjectRepository = new DefaultObjectRepository<>(type,\n            nitriteCollection, new NitriteConfig());\n        defaultObjectRepository.setAttributes(new Attributes());\n        verify(nitriteCollection).setAttributes(any());\n        assertNull(defaultObjectRepository.getAttributes());\n    }\n\n    @Test(expected = ValidationException.class)\n    public void testConstructor() {\n        Class<Object> type = Object.class;\n        NitriteConfig nitriteConfig = new NitriteConfig();\n        new DefaultObjectRepository<>(type, null, nitriteConfig);\n        assertTrue(nitriteConfig.getMigrations().isEmpty());\n        assertEquals(1, nitriteConfig.getSchemaVersion().intValue());\n        assertNull(nitriteConfig.getNitriteStore());\n    }\n\n    @Test\n    public void testConstructor2() {\n        Class<Object> forNameResult = Object.class;\n        NitriteCollection collection = mock(NitriteCollection.class);\n        DefaultObjectRepository<Object> actualDefaultObjectRepository = new DefaultObjectRepository<>(forNameResult,\n            collection, new NitriteConfig());\n        assertNull(actualDefaultObjectRepository.getAttributes());\n        assertSame(forNameResult, actualDefaultObjectRepository.getType());\n    }\n}\n"
