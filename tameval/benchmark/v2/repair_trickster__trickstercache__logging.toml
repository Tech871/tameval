[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "trickstercache/trickster"
sha = "99ac2462add00d5014794ec929eec27c7f1ceaa7"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/observability/logging/logging.go pkg/observability/logging/logging_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/observability/logging/logging.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 68.0
mutation_kill_rate = nan
original_mutation_kill_rate = 49.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/observability/logging/logging_test.go"
focal_file_path = "pkg/observability/logging/logging.go"
test_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/observability/logging/logging_test.go"
focal_file_url = "https://github.com/trickstercache/trickster/blob/99ac2462add00d5014794ec929eec27c7f1ceaa7/pkg/observability/logging/logging.go"
first_commit_date = "2021-03-05"
last_commit_date = "2025-05-22"
test_file_content = "/*\n * Copyright 2018 The Trickster Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http:\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage logging\n\n\nfunc TestConsoleLogger(t *testing.T) {\n\n\ttestCases := []string{\n\t\t\"debug\",\n\t\t\"info\",\n\t\t\"warn\",\n\t\t\"error\",\n\t}\n\tfor _, tc := range testCases {\n\t\tt.Run(tc, func(t *testing.T) {\n\t\t\tltc := level.Level(tc)\n\t\t\tl := ConsoleLogger(ltc)\n\t\t\tif l.Level() != ltc {\n\t\t\t\tt.Errorf(\"mismatch in log level: expected=%s actual=%s\", tc, l.Level())\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestNew(t *testing.T) {\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogLevel: \"info\"}\n\tlogger := New(conf)\n\tif logger.Level() != level.Info {\n\t\tt.Errorf(\"expected %s got %s\", \"info\", logger.Level())\n\t}\n}\n\nfunc TestNewLogger_LogFile(t *testing.T) {\n\ttd := t.TempDir()\n\tfileName := td + \"/out.log\"\n\tinstanceFileName := td + \"/out.1.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 1}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"info\"}\n\tlog := New(conf)\n\tl := log.(*logger)\n\tl.now = func() time.Time {\n\t\treturn time.Time{}\n\t}\n\tlog.SetLogAsynchronous(false)\n\tlog.Info(\"testEntry \", Pairs{\n\t\t\"testKey\":  \"test Val\",\n\t\t\"testKey2\": \"testValue2\",\n\t\t\"testKey3\": \"testValue3\",\n\t})\n\tif _, err := os.Stat(instanceFileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlog.Close()\n\tb, err := os.ReadFile(instanceFileName)\n\trequire.NoError(t, err)\n\trequire.Equal(t, `time=0001-01-01T00:00:00Z app=trickster level=info event=testEntry testKey=\"test Val\" testKey2=testValue2 testKey3=testValue3`+\"\\n\", string(b))\n}\n\nfunc TestNewLoggerDebug_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.debug.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"debug\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tlogger.Debug(\"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n}\n\nfunc TestNewLoggerWarn_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.warn.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"warn\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tlogger.Warn(\"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n}\n\nfunc TestNewLoggerWarnOnce_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.warnonce.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"info\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tkey := \"warnonce-test-key\"\n\n\tif logger.HasWarnedOnce(key) {\n\t\tt.Errorf(\"expected %t got %t\", false, true)\n\t}\n\n\tok := logger.WarnOnce(key, \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif !ok {\n\t\tt.Errorf(\"expected %t got %t\", true, ok)\n\t}\n\n\tif !logger.HasWarnedOnce(key) {\n\t\tt.Errorf(\"expected %t got %t\", true, false)\n\t}\n\n\tok = logger.WarnOnce(key, \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif ok {\n\t\tt.Errorf(\"expected %t got %t\", false, ok)\n\t}\n\n\tif !logger.HasWarnedOnce(key) {\n\t\tt.Errorf(\"expected %t got %t\", true, false)\n\t}\n\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n\tos.Remove(fileName)\n}\n\nfunc TestNewLoggerError_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.error.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"error\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tlogger.Error(\"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n}\n\nfunc TestNewLoggerErrorOnce_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.erroronce.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"x\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\n\tok := logger.ErrorOnce(\"erroroonce-test-key\", \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif !ok {\n\t\tt.Errorf(\"expected %t got %t\", true, ok)\n\t}\n\n\tok = logger.ErrorOnce(\"erroroonce-test-key\", \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif ok {\n\t\tt.Errorf(\"expected %t got %t\", false, ok)\n\t}\n\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n}\n\nfunc TestNewLoggerDefault_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.info.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"x\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tlogger.Info(\"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n}\n\nfunc TestNewLoggerInfoOnce_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.infoonce.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"info\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tok := logger.InfoOnce(\"infoonce-test-key\", \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif !ok {\n\t\tt.Errorf(\"expected %t got %t\", true, ok)\n\t}\n\n\tok = logger.InfoOnce(\"infoonce-test-key\", \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif ok {\n\t\tt.Errorf(\"expected %t got %t\", false, ok)\n\t}\n\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\n\tlogger.Close()\n}\n\nfunc TestNewLoggerFatal_LogFile(t *testing.T) {\n\tfileName := t.TempDir() + \"/out.fatal.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"debug\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tlogger.Fatal(-1, \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\tif _, err := os.Stat(fileName); err != nil {\n\t\tt.Error(err)\n\t}\n\tlogger.Close()\n}\n\nfunc TestSetLogLevel(t *testing.T) {\n\n\tl := ConsoleLogger(level.Info)\n\tif l.Level() != level.Info {\n\t\tt.Errorf(\"expected %s got %s\", \"info\", l.Level())\n\t}\n\n\tl.SetLogLevel(\"warn\")\n\tif l.Level() != \"warn\" {\n\t\tt.Errorf(\"expected %s got %s\", \"warn\", l.Level())\n\t}\n\n}\n\nfunc TestStreamLogger(t *testing.T) {\n\tw := httptest.NewRecorder()\n\tsl := StreamLogger(w, \"ERROR\")\n\tsl.SetLogAsynchronous(false)\n\tsl.Error(\"test error\", Pairs{\"testKey\": \"testVal\"})\n\tif w.Body.String() == \"\" {\n\t\tt.Error(\"expected non-empty string\")\n\t}\n\n}\n\nfunc Benchmark_logOnce(b *testing.B) {\n\tfileName := b.TempDir() + \"/out.once.bench.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"debug\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tb.ResetTimer()\n\tfor b.Loop() {\n\t\tlogger.InfoOnce(\"bench-test-key\", \"test entry\", Pairs{\"testKey\": \"testVal\"})\n\t}\n}\n\nfunc Benchmark_Info(b *testing.B) {\n\tfileName := b.TempDir() + \"/out.info.bench.log\"\n\tconf := config.NewConfig()\n\tconf.Main = &config.MainConfig{InstanceID: 0}\n\tconf.Logging = &options.Options{LogFile: fileName, LogLevel: \"debug\"}\n\tlogger := New(conf)\n\tlogger.SetLogAsynchronous(false)\n\tb.ResetTimer()\n\tfor b.Loop() {\n\t\tlogger.Info(\"test entry\", Pairs{\"testKey\": \"testVal\", \"testkey2\": \"testVal2\"})\n\t}\n}"
