[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "grafana/tempo-operator"
sha = "3b270ff092b32dbff273ff7e5972ea2ddddc2da9"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/manifests/querier/querier.go internal/manifests/querier/querier_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/manifests/querier/querier.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 85.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/manifests/querier/querier_test.go"
focal_file_path = "internal/manifests/querier/querier.go"
test_file_url = "https://github.com/grafana/tempo-operator/blob/3b270ff092b32dbff273ff7e5972ea2ddddc2da9/internal/manifests/querier/querier_test.go"
focal_file_url = "https://github.com/grafana/tempo-operator/blob/3b270ff092b32dbff273ff7e5972ea2ddddc2da9/internal/manifests/querier/querier.go"
first_commit_date = "2022-10-12"
last_commit_date = "2025-02-07"
test_file_content = "package querier\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\tv1 \"k8s.io/api/apps/v1\"\n\tcorev1 \"k8s.io/api/core/v1\"\n\t\"k8s.io/apimachinery/pkg/api/resource\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\tk8slabels \"k8s.io/apimachinery/pkg/labels\"\n\t\"k8s.io/apimachinery/pkg/util/intstr\"\n\t\"k8s.io/utils/ptr\"\n\n\tconfigv1alpha1 \"github.com/grafana/tempo-operator/apis/config/v1alpha1\"\n\t\"github.com/grafana/tempo-operator/apis/tempo/v1alpha1\"\n\t\"github.com/grafana/tempo-operator/internal/manifests/manifestutils\"\n)\n\nfunc TestBuildQuerier(t *testing.T) {\n\tobjects, err := BuildQuerier(manifestutils.Params{Tempo: v1alpha1.TempoStack{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"test\",\n\t\t\tNamespace: \"project1\",\n\t\t},\n\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\tImages: configv1alpha1.ImagesSpec{\n\t\t\t\tTempo: \"docker.io/grafana/tempo:1.5.0\",\n\t\t\t},\n\t\t\tServiceAccount: \"tempo-test-serviceaccount\",\n\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\tQuerier: v1alpha1.TempoComponentSpec{\n\t\t\t\t\tReplicas:     ptr.To(int32(3)),\n\t\t\t\t\tNodeSelector: map[string]string{\"a\": \"b\"},\n\t\t\t\t\tTolerations: []corev1.Toleration{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tKey: \"c\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tResources: v1alpha1.Resources{\n\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}})\n\trequire.NoError(t, err)\n\n\tlabels := manifestutils.ComponentLabels(\"querier\", \"test\")\n\tannotations := manifestutils.CommonAnnotations(\"\")\n\tassert.Equal(t, 2, len(objects))\n\n\tassert.Equal(t, &corev1.Service{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"tempo-test-querier\",\n\t\t\tNamespace: \"project1\",\n\t\t\tLabels:    labels,\n\t\t},\n\t\tSpec: corev1.ServiceSpec{\n\t\t\tPorts: []corev1.ServicePort{\n\t\t\t\t{\n\t\t\t\t\tName:       manifestutils.HttpMemberlistPortName,\n\t\t\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\t\t\tPort:       manifestutils.PortMemberlist,\n\t\t\t\t\tTargetPort: intstr.FromString(manifestutils.HttpMemberlistPortName),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:       manifestutils.HttpPortName,\n\t\t\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\t\t\tPort:       manifestutils.PortHTTPServer,\n\t\t\t\t\tTargetPort: intstr.FromString(manifestutils.HttpPortName),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:       manifestutils.GrpcPortName,\n\t\t\t\t\tProtocol:   corev1.ProtocolTCP,\n\t\t\t\t\tPort:       manifestutils.PortGRPCServer,\n\t\t\t\t\tTargetPort: intstr.FromString(manifestutils.GrpcPortName),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSelector: labels,\n\t\t},\n\t}, objects[1])\n\n\tassert.Equal(t, &v1.Deployment{\n\t\tTypeMeta: metav1.TypeMeta{\n\t\t\tAPIVersion: v1.SchemeGroupVersion.String(),\n\t\t},\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"tempo-test-querier\",\n\t\t\tNamespace: \"project1\",\n\t\t\tLabels:    labels,\n\t\t},\n\t\tSpec: v1.DeploymentSpec{\n\t\t\tReplicas: ptr.To(int32(3)),\n\t\t\tSelector: &metav1.LabelSelector{\n\t\t\t\tMatchLabels: labels,\n\t\t\t},\n\t\t\tTemplate: corev1.PodTemplateSpec{\n\t\t\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\t\t\tLabels:      k8slabels.Merge(labels, map[string]string{\"tempo-gossip-member\": \"true\"}),\n\t\t\t\t\tAnnotations: annotations,\n\t\t\t\t},\n\t\t\t\tSpec: corev1.PodSpec{\n\t\t\t\t\tServiceAccountName: \"tempo-test-serviceaccount\",\n\t\t\t\t\tNodeSelector:       map[string]string{\"a\": \"b\"},\n\t\t\t\t\tTolerations: []corev1.Toleration{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tKey: \"c\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAffinity: manifestutils.DefaultAffinity(labels),\n\t\t\t\t\tContainers: []corev1.Container{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  \"tempo\",\n\t\t\t\t\t\t\tImage: \"docker.io/grafana/tempo:1.5.0\",\n\t\t\t\t\t\t\tEnv:   []corev1.EnvVar{},\n\t\t\t\t\t\t\tArgs: []string{\n\t\t\t\t\t\t\t\t\"-target=querier\",\n\t\t\t\t\t\t\t\t\"-config.file=/conf/tempo.yaml\",\n\t\t\t\t\t\t\t\t\"-log.level=info\",\n\t\t\t\t\t\t\t\t\"-config.expand-env=true\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tVolumeMounts: []corev1.VolumeMount{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:      manifestutils.ConfigVolumeName,\n\t\t\t\t\t\t\t\t\tMountPath: \"/conf\",\n\t\t\t\t\t\t\t\t\tReadOnly:  true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:      manifestutils.TmpStorageVolumeName,\n\t\t\t\t\t\t\t\t\tMountPath: manifestutils.TmpTempoStoragePath,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPorts: []corev1.ContainerPort{\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:          manifestutils.HttpPortName,\n\t\t\t\t\t\t\t\t\tContainerPort: manifestutils.PortHTTPServer,\n\t\t\t\t\t\t\t\t\tProtocol:      corev1.ProtocolTCP,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tName:          manifestutils.HttpMemberlistPortName,\n\t\t\t\t\t\t\t\t\tContainerPort: manifestutils.PortMemberlist,\n\t\t\t\t\t\t\t\t\tProtocol:      corev1.ProtocolTCP,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tReadinessProbe: &corev1.Probe{\n\t\t\t\t\t\t\t\tProbeHandler: corev1.ProbeHandler{\n\t\t\t\t\t\t\t\t\tHTTPGet: &corev1.HTTPGetAction{\n\t\t\t\t\t\t\t\t\t\tScheme: corev1.URISchemeHTTP,\n\t\t\t\t\t\t\t\t\t\tPath:   manifestutils.TempoReadinessPath,\n\t\t\t\t\t\t\t\t\t\tPort:   intstr.FromString(manifestutils.HttpPortName),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tInitialDelaySeconds: 15,\n\t\t\t\t\t\t\t\tTimeoutSeconds:      1,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tResources: corev1.ResourceRequirements{\n\t\t\t\t\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(33, resource.BinarySI),\n\t\t\t\t\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(107374184, resource.BinarySI),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tRequests: corev1.ResourceList{\n\t\t\t\t\t\t\t\t\tcorev1.ResourceCPU:    *resource.NewMilliQuantity(10, resource.BinarySI),\n\t\t\t\t\t\t\t\t\tcorev1.ResourceMemory: *resource.NewQuantity(32212256, resource.BinarySI),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tSecurityContext: manifestutils.TempoContainerSecurityContext(),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tVolumes: []corev1.Volume{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: manifestutils.ConfigVolumeName,\n\t\t\t\t\t\t\tVolumeSource: corev1.VolumeSource{\n\t\t\t\t\t\t\t\tConfigMap: &corev1.ConfigMapVolumeSource{\n\t\t\t\t\t\t\t\t\tLocalObjectReference: corev1.LocalObjectReference{\n\t\t\t\t\t\t\t\t\t\tName: \"tempo-test\",\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName: manifestutils.TmpStorageVolumeName,\n\t\t\t\t\t\t\tVolumeSource: corev1.VolumeSource{\n\t\t\t\t\t\t\t\tEmptyDir: &corev1.EmptyDirVolumeSource{},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}, objects[0])\n}\n\nfunc TestOverrideResources(t *testing.T) {\n\toverrideResources := corev1.ResourceRequirements{\n\t\tLimits: corev1.ResourceList{\n\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"500m\"),\n\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t},\n\t}\n\n\tobjects, err := BuildQuerier(manifestutils.Params{Tempo: v1alpha1.TempoStack{\n\t\tObjectMeta: metav1.ObjectMeta{\n\t\t\tName:      \"test\",\n\t\t\tNamespace: \"project1\",\n\t\t},\n\t\tSpec: v1alpha1.TempoStackSpec{\n\t\t\tImages: configv1alpha1.ImagesSpec{\n\t\t\t\tTempo: \"docker.io/grafana/tempo:1.5.0\",\n\t\t\t},\n\t\t\tServiceAccount: \"tempo-test-serviceaccount\",\n\t\t\tTemplate: v1alpha1.TempoTemplateSpec{\n\t\t\t\tQuerier: v1alpha1.TempoComponentSpec{\n\t\t\t\t\tReplicas:  ptr.To(int32(3)),\n\t\t\t\t\tResources: &overrideResources,\n\t\t\t\t},\n\t\t\t},\n\t\t\tResources: v1alpha1.Resources{\n\t\t\t\tTotal: &corev1.ResourceRequirements{\n\t\t\t\t\tLimits: corev1.ResourceList{\n\t\t\t\t\t\tcorev1.ResourceCPU:    resource.MustParse(\"1000m\"),\n\t\t\t\t\t\tcorev1.ResourceMemory: resource.MustParse(\"2Gi\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}})\n\trequire.NoError(t, err)\n\tdep, ok := objects[0].(*v1.Deployment)\n\trequire.True(t, ok)\n\tassert.Equal(t, dep.Spec.Template.Spec.Containers[0].Resources, overrideResources)\n}"
