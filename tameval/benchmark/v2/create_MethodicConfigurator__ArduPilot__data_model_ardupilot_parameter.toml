[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "ArduPilot/MethodicConfigurator"
sha = "8f14cac0abb19c133ba74e6693d4efb6385cb8f0"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ardupilot_methodic_configurator/data_model_ardupilot_parameter.py -m pytest -q --junit-xml=test_output.xml tests/test_data_model_ardupilot_parameter.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ardupilot_methodic_configurator.data_model_ardupilot_parameter --unit-test tests.test_data_model_ardupilot_parameter --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ardupilot_methodic_configurator/data_model_ardupilot_parameter.py --unit-test tests/test_data_model_ardupilot_parameter.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 68.0
original_coverage = 68.0
mutation_kill_rate = 42.0
original_mutation_kill_rate = 42.0
covered_lines = [ 10, 11, 13, 14, 15, 18, 27, 37, 40, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 76, 77, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 93, 95, 96, 98, 100, 101, 103, 105, 106, 108, 110, 111, 113, 115, 116, 118, 120, 121, 125, 134, 141, 142, 144, 146, 147, 149, 151, 152, 164, 165, 167, 173, 174, 176, 182, 183, 192, 193, 195, 197, 198, 202, 203, 205, 206, 208, 209, 211, 212, 214, 215, 217, 218, 219, 221, 222, 224, 226, 227, 229, 231, 232, 236, 237, 239, 241, 242, 244, 246, 247, 252, 253, 255, 257, 258, 260, 262, 264, 265, 266, 268, 274, 276, 277, 281, 283, 285, 286, 290, 292, 296, 300, 325, 326, 328, 331, 332, 336, 348, 375, 376, 380, 383, 384, 387, 388, 391, 392, 398, 399, 401, 412, 413, 415, 416, 418, 419, 422, 425, 426, 441, 442, 456, 464, 465, 501, 502,]
missed_lines = [ 154, 185, 190, 200, 234, 249, 250, 270, 271, 272, 278, 287, 294, 298, 329, 333, 337, 339, 340, 344, 345, 349, 350, 351, 352, 357, 358, 359, 361, 362, 364, 365, 371, 372, 377, 378, 381, 385, 389, 439, 453, 477, 480, 481, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 499, 519, 521, 524, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540,]

[input_info]
test_file_path = "tests/test_data_model_ardupilot_parameter.py"
focal_file_path = "ardupilot_methodic_configurator/data_model_ardupilot_parameter.py"
test_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/tests/test_data_model_ardupilot_parameter.py"
focal_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/ardupilot_methodic_configurator/data_model_ardupilot_parameter.py"
first_commit_date = "2025-08-16"
last_commit_date = "2025-08-16"
test_file_content = "#!/usr/bin/python3\n\n\"\"\"\nUnit tests for the ArduPilotParameter domain model.\n\nThis file is part of Ardupilot methodic configurator. https://github.com/ArduPilot/MethodicConfigurator\n\nSPDX-FileCopyrightText: 2024-2025 Amilcar do Carmo Lucas <amilcar.lucas@iav.de>\n\nSPDX-License-Identifier: GPL-3.0-or-later\n\"\"\"\n\nfrom typing import Any\n\nimport pytest\n\nfrom ardupilot_methodic_configurator.annotate_params import Par\nfrom ardupilot_methodic_configurator.data_model_ardupilot_parameter import (\n    ArduPilotParameter,\n    ParameterUnchangedError,\n)\n\n# pylint: disable=redefined-outer-name, protected-access\n\n\n@pytest.fixture\ndef param_fixture() -> dict[str, Any]:  # pylint: disable=too-many-locals\n    \"\"\"Create parameter fixtures for testing.\"\"\"\n    # Create a basic parameter\n    param_name = \"TEST_PARAM\"\n    param_value = 10.0\n    param_comment = \"Test comment\"\n    par_obj = Par(param_value, param_comment)\n\n    # Create parameter with default value\n    default_value = 5.0\n    default_par = Par(default_value, \"Default comment\")\n\n    # Create FC value\n    fc_value = 15.0\n\n    # Metadata with bitmask, values dict, and constraints\n    metadata: dict[str, Any] = {\n        \"doc_tooltip\": \"Test tooltip\",\n        \"unit\": \"m/s\",\n        \"unit_tooltip\": \"Meters per second\",\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"values\": {\"0\": \"Zero\", \"10\": \"Ten\", \"20\": \"Twenty\"},\n        \"Bitmask\": {0: \"Option 1\", 1: \"Option 2\", 2: \"Option 3\"},\n        \"Calibration\": False,\n        \"ReadOnly\": False,\n    }\n\n    # Basic parameter without extras\n    basic_param = ArduPilotParameter(param_name, par_obj)\n\n    # Parameter with all attributes\n    full_param = ArduPilotParameter(param_name, par_obj, metadata, default_par, fc_value)\n\n    # Forced parameter\n    forced_param = ArduPilotParameter(param_name, par_obj, metadata, default_par, fc_value, forced_par=Par(16.0, \"\"))\n\n    # Derived parameter\n    derived_param = ArduPilotParameter(param_name, par_obj, metadata, default_par, fc_value, derived_par=Par(17.0, \"\"))\n\n    # Readonly parameter\n    readonly_metadata = metadata.copy()\n    readonly_metadata[\"ReadOnly\"] = True\n    readonly_param = ArduPilotParameter(param_name, par_obj, readonly_metadata, default_par, fc_value)\n\n    # Calibration parameter\n    calibration_metadata = metadata.copy()\n    calibration_metadata[\"Calibration\"] = True\n    calibration_param = ArduPilotParameter(param_name, par_obj, calibration_metadata, default_par, fc_value)\n\n    return {\n        \"param_name\": param_name,\n        \"param_value\": param_value,\n        \"param_comment\": param_comment,\n        \"par_obj\": par_obj,\n        \"default_value\": default_value,\n        \"default_par\": default_par,\n        \"fc_value\": fc_value,\n        \"metadata\": metadata,\n        \"basic_param\": basic_param,\n        \"full_param\": full_param,\n        \"forced_param\": forced_param,\n        \"derived_param\": derived_param,\n        \"readonly_param\": readonly_param,\n        \"calibration_param\": calibration_param,\n    }\n\n\ndef test_basic_properties(param_fixture) -> None:\n    \"\"\"Test that basic properties are set correctly.\"\"\"\n    assert param_fixture[\"full_param\"].name == param_fixture[\"param_name\"]\n    assert param_fixture[\"full_param\"]._new_value == param_fixture[\"param_value\"]\n    assert param_fixture[\"full_param\"].change_reason == param_fixture[\"param_comment\"]\n    assert param_fixture[\"full_param\"]._default_value == param_fixture[\"default_value\"]\n    assert param_fixture[\"full_param\"]._fc_value == param_fixture[\"fc_value\"]\n    assert not param_fixture[\"full_param\"].is_forced\n    assert not param_fixture[\"full_param\"].is_derived\n\n\ndef test_parameter_type_properties(param_fixture) -> None:\n    \"\"\"Test properties that identify parameter types.\"\"\"\n    assert param_fixture[\"readonly_param\"].is_readonly\n    assert not param_fixture[\"full_param\"].is_readonly\n\n    assert param_fixture[\"calibration_param\"].is_calibration\n    assert not param_fixture[\"full_param\"].is_calibration\n\n    assert param_fixture[\"full_param\"].is_bitmask\n\n    # Create a parameter without bitmask\n    no_bitmask_metadata = param_fixture[\"metadata\"].copy()\n    no_bitmask_metadata.pop(\"Bitmask\")\n    no_bitmask_param = ArduPilotParameter(param_fixture[\"param_name\"], param_fixture[\"par_obj\"], no_bitmask_metadata)\n    assert not no_bitmask_param.is_bitmask\n\n\ndef test_value_comparisons(param_fixture) -> None:\n    \"\"\"Test comparison between values.\"\"\"\n    # Test default value comparison\n    assert not param_fixture[\"full_param\"].new_value_equals_default_value\n    default_value_param = ArduPilotParameter(\n        param_fixture[\"param_name\"],\n        Par(param_fixture[\"default_value\"], \"\"),\n        param_fixture[\"metadata\"],\n        param_fixture[\"default_par\"],\n        param_fixture[\"fc_value\"],\n    )\n    assert default_value_param.new_value_equals_default_value\n\n    # Test FC value existence\n    assert param_fixture[\"full_param\"].has_fc_value\n    assert not param_fixture[\"basic_param\"].has_fc_value\n\n    # Test difference from FC\n    assert param_fixture[\"full_param\"].is_different_from_fc\n    same_as_fc_param = ArduPilotParameter(\n        param_fixture[\"param_name\"],\n        Par(param_fixture[\"fc_value\"], \"\"),\n        param_fixture[\"metadata\"],\n        param_fixture[\"default_par\"],\n        param_fixture[\"fc_value\"],\n    )\n    assert not same_as_fc_param.is_different_from_fc\n\n\ndef test_metadata_properties(param_fixture) -> None:\n    \"\"\"Test metadata properties.\"\"\"\n    assert param_fixture[\"full_param\"].tooltip_new_value == param_fixture[\"metadata\"][\"doc_tooltip\"]\n    assert param_fixture[\"full_param\"].unit == param_fixture[\"metadata\"][\"unit\"]\n    assert param_fixture[\"full_param\"].tooltip_unit == param_fixture[\"metadata\"][\"unit_tooltip\"]\n    assert param_fixture[\"full_param\"].min_value == float(param_fixture[\"metadata\"][\"min\"])\n    assert param_fixture[\"full_param\"].max_value == float(param_fixture[\"metadata\"][\"max\"])\n\n    # Test with missing metadata\n    assert param_fixture[\"basic_param\"].tooltip_new_value == \"No documentation available in apm.pdef.xml for this parameter\"\n    assert param_fixture[\"basic_param\"].unit == \"\"\n    assert param_fixture[\"basic_param\"].tooltip_unit == \"No documentation available in apm.pdef.xml for this parameter\"\n    assert param_fixture[\"basic_param\"].min_value is None\n    assert param_fixture[\"basic_param\"].max_value is None\n\n\ndef test_string_representations(param_fixture) -> None:\n    \"\"\"Test string representation of values.\"\"\"\n    assert param_fixture[\"full_param\"].value_as_string == \"10\"\n    assert param_fixture[\"full_param\"].fc_value_as_string == \"15\"\n\n    # Test with no FC value\n    assert param_fixture[\"basic_param\"].fc_value_as_string == \"N/A\"\n\n    # Test with decimal places\n    decimal_param = ArduPilotParameter(param_fixture[\"param_name\"], Par(10.5, \"\"))\n    assert decimal_param.value_as_string == \"10.5\"\n\n\ndef test_value_dictionary_operations(param_fixture) -> None:\n    \"\"\"Test operations involving the values dictionary.\"\"\"\n    # Value in dictionary\n    assert param_fixture[\"full_param\"].is_in_values_dict\n    assert param_fixture[\"full_param\"].get_selected_value_from_dict() == \"Ten\"\n\n    # Value not in dictionary\n    not_in_dict_param = ArduPilotParameter(param_fixture[\"param_name\"], Par(11.0, \"\"), param_fixture[\"metadata\"])\n    assert not not_in_dict_param.is_in_values_dict\n    assert not_in_dict_param.get_selected_value_from_dict() is None\n\n    # No values dictionary\n    assert not param_fixture[\"basic_param\"].is_in_values_dict\n    assert param_fixture[\"basic_param\"].get_selected_value_from_dict() is None\n\n\ndef test_set_new_value(param_fixture) -> None:\n    \"\"\"Test setting parameter values.\"\"\"\n    # Regular parameter: use a non-bitmask parameter and provide string input\n    new_value = \"12.0\"\n    result = param_fixture[\"basic_param\"].set_new_value(new_value)\n    assert result == 12.0\n    assert param_fixture[\"basic_param\"]._new_value == 12.0\n\n    # Same value - should raise ParameterUnchangedError\n    with pytest.raises(ParameterUnchangedError):\n        param_fixture[\"basic_param\"].set_new_value(new_value)\n\n    # Forced parameter - should raise ValueError and not change\n    original_value = param_fixture[\"forced_param\"]._new_value\n    with pytest.raises(ValueError, match=\"forced or derived\"):\n        param_fixture[\"forced_param\"].set_new_value(new_value)\n    assert param_fixture[\"forced_param\"]._new_value == original_value\n\n    # Derived parameter - should raise ValueError and not change\n    original_value = param_fixture[\"derived_param\"]._new_value\n    with pytest.raises(ValueError, match=\"forced or derived\"):\n        param_fixture[\"derived_param\"].set_new_value(new_value)\n    assert param_fixture[\"derived_param\"]._new_value == original_value\n\n\ndef test_set_change_reason(param_fixture) -> None:\n    \"\"\"Test setting parameter comments.\"\"\"\n    # Regular parameter\n    new_comment = \"New comment\"\n    result = param_fixture[\"full_param\"].set_change_reason(new_comment)\n    assert result\n    assert param_fixture[\"full_param\"].change_reason == new_comment\n\n    # Same comment - should return False for no change\n    result = param_fixture[\"full_param\"].set_change_reason(new_comment)\n    assert not result\n\n    # Empty string when comment is None\n    none_comment_param = ArduPilotParameter(param_fixture[\"param_name\"], Par(10.0, None))\n    result = none_comment_param.set_change_reason(\"\")\n    assert not result\n\n    # Forced parameter - should return False and not change\n    original_comment = param_fixture[\"forced_param\"].change_reason\n    result = param_fixture[\"forced_param\"].set_change_reason(new_comment)\n    assert not result\n    assert param_fixture[\"forced_param\"].change_reason == original_comment\n\n    # Derived parameter - should return False and not change\n    original_comment = param_fixture[\"derived_param\"].change_reason\n    result = param_fixture[\"derived_param\"].set_change_reason(new_comment)\n    assert not result\n    assert param_fixture[\"derived_param\"].change_reason == original_comment\n\n\ndef test_is_editable(param_fixture) -> None:\n    \"\"\"Test checking if a parameter is editable.\"\"\"\n    assert param_fixture[\"full_param\"].is_editable\n    assert not param_fixture[\"forced_param\"].is_editable\n    assert not param_fixture[\"derived_param\"].is_editable\n    assert not param_fixture[\"readonly_param\"].is_editable\n"
