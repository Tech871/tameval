[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "setup.py"

[repo_info]
repository = "facebookresearch/balance"
sha = "80a89cf6f5d7de64f55f2bebe7d666e51d6f9bb9"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install . && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=balance/weighting_methods/cbps.py -m pytest -q --junit-xml=test_output.xml tests/test_cbps.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target balance.weighting_methods.cbps --unit-test tests.test_cbps --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target balance/weighting_methods/cbps.py --unit-test tests/test_cbps.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 84.0
original_coverage = 95.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 0.0
covered_lines = [ 7, 9, 11, 13, 14, 15, 16, 17, 18, 20, 21, 22, 24, 27, 44, 45, 48, 65, 66, 67, 70, 90, 91, 92, 96, 97, 99, 102, 124, 125, 126, 128, 131, 138, 140, 141, 142, 143, 144, 146, 160, 163, 164, 167, 188, 191, 211, 214, 238, 257, 260, 273, 274, 275, 284, 301, 302, 303, 305, 306, 307, 312, 315, 410, 411, 413, 414, 417, 418, 420, 421, 423, 431, 437, 440, 441, 444, 455, 459, 460, 465, 470, 471, 472, 473, 476, 477, 480, 484, 485, 486, 487, 490, 492, 493, 494, 497, 498, 499, 506, 507, 518, 528, 529, 542, 543, 546, 550, 561, 565, 566, 569, 572, 585, 589, 591, 592, 603, 604, 605, 618, 623, 636, 642, 653, 658, 660, 666, 667, 668, 669, 672, 673, 674, 677, 683, 687, 688, 689, 692, 694, 701, 710, 733, 735,]
missed_lines = [ 230, 231, 234, 235, 261, 262, 265, 268, 271, 272, 424, 427, 500, 501, 523, 524, 525, 530, 562, 586, 593, 598, 599, 619, 637, 650, 663, 696,]

[input_info]
test_file_path = "tests/test_cbps.py"
focal_file_path = "balance/weighting_methods/cbps.py"
test_file_url = "https://github.com/facebookresearch/balance/blob/80a89cf6f5d7de64f55f2bebe7d666e51d6f9bb9/tests/test_cbps.py"
focal_file_url = "https://github.com/facebookresearch/balance/blob/80a89cf6f5d7de64f55f2bebe7d666e51d6f9bb9/balance/weighting_methods/cbps.py"
first_commit_date = "2022-11-16"
last_commit_date = "2025-01-06"
test_file_content = "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n# pyre-unsafe\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport balance.testutil\n\nimport numpy as np\nimport pandas as pd\nimport scipy\n\nfrom balance.datasets import load_data\nfrom balance.sample_class import Sample\nfrom balance.stats_and_plots.weights_stats import design_effect\nfrom balance.weighting_methods import cbps as balance_cbps\n\n\nclass Testcbps(\n    balance.testutil.BalanceTestCase,\n):\n    def test_cbps_from_adjust_function(self):\n        sample = Sample.from_frame(\n            pd.DataFrame({\"a\": (1, 2, 3, 4, 5, 6, 7, 8, 9, 1), \"id\": range(0, 10)})\n        )\n        target = Sample.from_frame(\n            pd.DataFrame({\"a\": (1, 2, 3, 4, 5, 6, 7, 8, 9, 9), \"id\": range(0, 10)})\n        )\n        sample = sample.set_target(target)\n        result_adjust = sample.adjust(method=\"cbps\", transformations=None)\n\n        sample_df = pd.DataFrame({\"a\": (1, 2, 3, 4, 5, 6, 7, 8, 9, 1)})\n        target_df = pd.DataFrame({\"a\": (1, 2, 3, 4, 5, 6, 7, 8, 9, 9)})\n        sample_weights = pd.Series((1,) * 10)\n        target_weights = pd.Series((1,) * 10)\n        result_cbps = balance_cbps.cbps(\n            sample_df, sample_weights, target_df, target_weights, transformations=None\n        )\n        self.assertEqual(\n            result_adjust.df[\"weight\"], result_cbps[\"weight\"].rename(\"weight\")\n        )\n\n\n    def test_compute_pseudo_weights_from_logit_probs(self):\n        probs = np.array([0.1, 0.6, 0.2])\n        design_weights = np.array([1, 8, 3])\n        in_pop = np.array([1.0, 0, 1.0])\n        result = balance_cbps.compute_pseudo_weights_from_logit_probs(\n            probs, design_weights, in_pop\n        )\n        self.assertEqual(np.around(result, 1), np.array([3.0, -4.5, 3.0]))\n\n    # Testing consistency result of bal_loss\n    def test_bal_loss(self):\n        X = np.array([[1, 2, 3], [4, 5, 6], [0, 0, -100]])\n        beta = np.array([1, 0.5, 1])\n        design_weights = np.array([1, 8, 3])\n        in_pop = np.array([1.0, 0, 1.0])\n        XtXinv = np.linalg.inv(np.matmul(X.T, X))\n        result = balance_cbps.bal_loss(beta, X, design_weights, in_pop, XtXinv)\n        self.assertEqual(round(result, 2), 39999200004.99)\n\n    # Testing consistency result of gmm_function\n\n    # Testing consistency result of gmm_loss\n\n    # Testing consistency result of alpha_function\n\n    # Testing consistency result of compute_deff_from_beta function\n\n\n\n    # Test consistency result of cbps\n\n    # Test cbps constraints\n\n    def test_cbps_weights_order(self):\n        sample = pd.DataFrame({\"a\": (1, 2, 3, 4, 5, 6, 7, 9, 1)})\n        target = pd.DataFrame({\"a\": (1, 2, 3, 4, 5, 6, 7, 9, 9)})\n\n        result = balance_cbps.cbps(\n            sample_df=sample,\n            sample_weights=pd.Series((1,) * 9),\n            target_df=target,\n            target_weights=pd.Series((1,) * 9),\n            transformations=None,\n        )\n\n        w = result[\"weight\"].values\n        self.assertEqual(round(w[0], 10), round(w[8], 10))\n        self.assertTrue(w[0] < w[1])\n        self.assertTrue(w[0] < w[7])\n\n\n\n    def test_cbps_input_assertions(self):\n        s_w = np.array((1))\n        self.assertRaisesRegex(\n            TypeError,\n            \"must be a pandas DataFrame\",\n            balance_cbps.cbps,\n            s_w,\n            s_w,\n            s_w,\n            s_w,\n        )\n\n        s = pd.DataFrame({\"a\": (1, 2), \"id\": (1, 2)})\n        s_w = pd.Series((1,))\n        self.assertRaisesRegex(\n            Exception,\n            \"must be the same length\",\n            balance_cbps.cbps,\n            s,\n            s_w,\n            s,\n            s_w,\n        )\n\n\n\n\n    def test_cbps_in_balance_vs_r(self):\n        # TODO: add reference to the tutorial here (once it's online)\n        # Get data\n        target_df, sample_df = load_data(\"sim_data_cbps\")\n        # Place it into Sample objects\n        sample = Sample.from_frame(sample_df, outcome_columns=[\"y\", \"cbps_weights\"])\n        target = Sample.from_frame(target_df, outcome_columns=[\"y\", \"cbps_weights\"])\n        sample_target = sample.set_target(target)\n        # adjust:\n        adjust = sample_target.adjust(method=\"cbps\", transformations=None)\n\n        # Verify balnce's CBPS gives VERY similar results to R's CBPS weights\n        self.assertTrue(\n            adjust.df[[\"cbps_weights\", \"weight\"]].corr(method=\"pearson\").iloc[0, 1]\n            > 0.98\n        )\n        self.assertTrue(\n            adjust.df[[\"cbps_weights\", \"weight\"]]\n            .apply(lambda x: np.log10(x))\n            .corr(method=\"pearson\")\n            .iloc[0, 1]\n            > 0.99\n        )\n"
