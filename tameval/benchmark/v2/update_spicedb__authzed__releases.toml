[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "authzed/spicedb"
sha = "449c43d3c8dbb72defa98dfd097392c2fa137870"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/releases/releases.go pkg/releases/releases_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/releases/releases.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 71.0
original_coverage = 78.0
mutation_kill_rate = 17.0
original_mutation_kill_rate = 33.0
covered_lines = [ 16, 17, 18, 37, 41, 42, 43, 48, 49, 50, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74,]
missed_lines = [ 33, 34, 35, 38, 39, 40, 44, 45, 46, 51, 52, 53,]

[input_info]
test_file_path = "pkg/releases/releases_test.go"
focal_file_path = "pkg/releases/releases.go"
test_file_url = "https://github.com/authzed/spicedb/blob/449c43d3c8dbb72defa98dfd097392c2fa137870/pkg/releases/releases_test.go"
focal_file_url = "https://github.com/authzed/spicedb/blob/449c43d3c8dbb72defa98dfd097392c2fa137870/pkg/releases/releases.go"
first_commit_date = "2022-04-27"
last_commit_date = "2025-07-10"
test_file_content = "package releases\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"net/url\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestGetSourceRepository(t *testing.T) {\n\trepo := GetSourceRepository()\n\trequire.Equal(t, \"github.com/authzed/spicedb\", repo)\n}\n\nfunc TestGetLatestRelease(t *testing.T) {\n\tt.Run(\"successful release fetch\", func(t *testing.T) {\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\trequire.Equal(t, \"/repos/authzed/spicedb/releases/latest\", r.URL.Path)\n\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\tfmt.Fprintf(w, `{\n\t\t\t\t\"name\": \"v1.5.6\",\n\t\t\t\t\"published_at\": \"2023-01-01T12:00:00Z\",\n\t\t\t\t\"html_url\": \"https://github.com/authzed/spicedb/releases/tag/v1.5.6\"\n\t\t\t}`)\n\t\t}))\n\t\tdefer server.Close()\n\n\t\thttpClient := &http.Client{\n\t\t\tTransport: &testRoundTripper{\n\t\t\t\tbaseURL: server.URL,\n\t\t\t},\n\t\t}\n\n\t\trelease, err := getLatestReleaseWithClient(t.Context(), httpClient)\n\t\trequire.NoError(t, err)\n\t\trequire.NotNil(t, release)\n\t\trequire.Equal(t, \"v1.5.6\", release.Version)\n\t\trequire.Equal(t, \"https://github.com/authzed/spicedb/releases/tag/v1.5.6\", release.ViewURL)\n\t\trequire.True(t, release.PublishedAt.Equal(time.Date(2023, 1, 1, 12, 0, 0, 0, time.UTC)))\n\t})\n\n\tt.Run(\"api error\", func(t *testing.T) {\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.WriteHeader(http.StatusNotFound)\n\t\t}))\n\t\tdefer server.Close()\n\n\t\thttpClient := &http.Client{\n\t\t\tTransport: &testRoundTripper{\n\t\t\t\tbaseURL: server.URL,\n\t\t\t},\n\t\t}\n\n\t\trelease, err := getLatestReleaseWithClient(t.Context(), httpClient)\n\t\trequire.Error(t, err)\n\t\trequire.Nil(t, release)\n\t})\n\n\tt.Run(\"invalid json response\", func(t *testing.T) {\n\t\tserver := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Header().Set(\"Content-Type\", \"application/json\")\n\t\t\tfmt.Fprintf(w, `{invalid json}`)\n\t\t}))\n\t\tdefer server.Close()\n\n\t\thttpClient := &http.Client{\n\t\t\tTransport: &testRoundTripper{\n\t\t\t\tbaseURL: server.URL,\n\t\t\t},\n\t\t}\n\n\t\trelease, err := getLatestReleaseWithClient(t.Context(), httpClient)\n\t\trequire.Error(t, err)\n\t\trequire.Nil(t, release)\n\t})\n}\n\ntype testRoundTripper struct {\n\tbaseURL string\n}\n\nfunc (t *testRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {\n\tif req.URL.Host == \"api.github.com\" {\n\t\tparsedURL, _ := url.Parse(t.baseURL)\n\t\treq.URL.Scheme = parsedURL.Scheme\n\t\treq.URL.Host = parsedURL.Host\n\t}\n\treturn http.DefaultTransport.RoundTrip(req)\n}"
