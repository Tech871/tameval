[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "google/langfun"
sha = "11d646e44baaea09bb792c3428a8f71ba742363b"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=langfun/core/coding/python/execution.py -m pytest -q --junit-xml=test_output.xml langfun/core/coding/python/execution_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target langfun.core.coding.python.execution --unit-test langfun.core.coding.python.execution_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target langfun/core/coding/python/execution.py --unit-test langfun/core/coding/python/execution_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 82.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = [ 15, 17, 18, 21, 22, 23, 24, 27, 68,]
missed_lines = [ 59, 110,]

[input_info]
test_file_path = "langfun/core/coding/python/execution_test.py"
focal_file_path = "langfun/core/coding/python/execution.py"
test_file_url = "https://github.com/google/langfun/blob/11d646e44baaea09bb792c3428a8f71ba742363b/langfun/core/coding/python/execution_test.py"
focal_file_url = "https://github.com/google/langfun/blob/11d646e44baaea09bb792c3428a8f71ba742363b/langfun/core/coding/python/execution.py"
first_commit_date = "2023-10-24"
last_commit_date = "2025-01-13"
test_file_content = "# Copyright 2023 The Langfun Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for Python code execution.\"\"\"\n\nimport inspect\nimport time\nimport unittest\nfrom langfun.core.coding.python import errors\nfrom langfun.core.coding.python import execution\nfrom langfun.core.coding.python import permissions\nimport pyglove as pg\n\n\nclass EvaluateTest(unittest.TestCase):\n\n  def test_with_context(self):\n    with execution.context(x=1, y=0):\n      with execution.context(x=2, z=2):\n        self.assertEqual(\n            execution.evaluate(\n                \"\"\"\n                p = x + y + z\n                \"\"\",\n                # Override value from the context.\n                global_vars=dict(z=3),\n                outputs_intermediate=True,\n            ),\n            dict(p=2 + 0 + 3, __result__=2 + 0 + 3, __stdout__=''),\n        )\n\n  def test_basics(self):\n    self.assertEqual(\n        execution.evaluate(\n            \"\"\"\n            x = 1\n            y = x + 1\n            print(y)\n            z = x + y\n            \"\"\",\n            outputs_intermediate=True,\n        ),\n        dict(x=1, y=2, z=3, __result__=3, __stdout__='2\\n'),\n    )\n    self.assertEqual(\n        execution.evaluate(\n            \"\"\"\n            x = 1\n            y = x + 1\n            print(y)\n            z = x + y\n            \"\"\",\n        ),\n        3,\n    )\n\n  def test_class_def(self):\n    ret = execution.evaluate(\n        \"\"\"\n        class A(pg.Object):\n          x: int\n          y: int\n          def __call__(self):\n            return self.x + self.y\n        \"\"\",\n        permission=permissions.CodePermission.ALL,\n        global_vars=dict(pg=pg),\n        outputs_intermediate=True,\n    )\n    self.assertEqual(list(ret.keys()), ['A', '__result__', '__stdout__'])\n    self.assertTrue(issubclass(ret['A'], pg.Object))\n    self.assertIs(ret['__result__'], ret['A'])\n    self.assertEqual(ret['__stdout__'], '')\n\n  def test_function_def(self):\n    ret = execution.evaluate(\n        \"\"\"\n        def foo(x, y):\n          return x + y\n\n        def bar(z):\n          return z + foo(z, z)\n        \"\"\",\n        permission=permissions.CodePermission.ALL,\n        outputs_intermediate=True,\n    )\n    self.assertEqual(\n        list(ret.keys()), ['foo', 'bar', '__result__', '__stdout__']\n    )\n    self.assertTrue(inspect.isfunction(ret['foo']))\n    self.assertTrue(inspect.isfunction(ret['bar']))\n    self.assertIs(ret['__result__'], ret['bar'])\n\n  def test_function_def_and_call(self):\n    ret = execution.evaluate(\n        \"\"\"\n        def foo(x, y):\n          return x + y\n\n        def bar(z):\n          return z + foo(z, z)\n\n        bar(1)\n        \"\"\",\n        permission=permissions.CodePermission.ALL,\n        outputs_intermediate=True,\n    )\n    self.assertEqual(\n        list(ret.keys()), ['foo', 'bar', '__result__', '__stdout__']\n    )\n    self.assertEqual(ret['__result__'], 3)\n\n  def test_complex(self):\n    ret = execution.evaluate(\n        \"\"\"\n        class A(pg.Object):\n          x: int\n          y: int\n          def __call__(self, z):\n            return self.x + self.y + z\n\n        def foo(x, y):\n          return x + y\n        k = A(1, 2)\n        k(foo(3, 4))\n        \"\"\",\n        permission=permissions.CodePermission.ALL,\n        global_vars=dict(pg=pg),\n        outputs_intermediate=True,\n    )\n    self.assertEqual(\n        list(ret.keys()), ['A', 'foo', 'k', '__result__', '__stdout__']\n    )\n    self.assertTrue(issubclass(ret['A'], pg.Object))\n    self.assertTrue(inspect.isfunction(ret['foo']))\n    self.assertIsInstance(ret['k'], pg.Object)\n    self.assertEqual(ret['__result__'], 10)\n\n  def test_run_with_error(self):\n    with self.assertRaisesRegex(\n        errors.CodeError, 'NameError: name .* is not defined'\n    ):\n      execution.evaluate(\n          \"\"\"\n          x = 1\n          y = x + z\n          \"\"\",\n          permission=permissions.CodePermission.ALL,\n      )\n    with self.assertRaisesRegex(errors.CodeError, 'ValueError'):\n      execution.evaluate(\n          'raise ValueError()', permission=permissions.CodePermission.ALL\n      )\n\n\nclass Foo(pg.Object):\n  x: int\n  y: int\n\n\nclass SandboxCallTest(unittest.TestCase):\n\n  def test_basics(self):\n    def f(x, y):\n      return x + y\n    self.assertEqual(execution.sandbox_call(f, 1, y=2), 3)\n\n  def test_complex_type(self):\n    def f(x, y):\n      return Foo(x, y)\n\n    self.assertEqual(execution.sandbox_call(f, 1, 2), Foo(1, 2))\n\n  def test_timeout(self):\n    def f(x):\n      time.sleep(x)\n\n    self.assertIsNone(execution.sandbox_call(f, 0, timeout=1))\n    with self.assertRaises(TimeoutError):\n      execution.sandbox_call(f, 2, timeout=1)\n\n  def test_raise(self):\n    def f(x):\n      if x == 0:\n        raise ValueError()\n\n    self.assertIsNone(execution.sandbox_call(f, 1))\n    with self.assertRaises(ValueError):\n      execution.sandbox_call(f, 0)\n\n\nclass CallTest(unittest.TestCase):\n\n  def test_call_without_sandboxing(self):\n    def foo(x, y):\n      return x + y\n\n    self.assertEqual(\n        execution.call(foo, 1, y=2, sandbox=False),\n        3\n    )\n\n  def test_call_with_sandboxing(self):\n    def foo(x, y):\n      return x + y\n\n    self.assertEqual(\n        execution.call(foo, 1, y=2, sandbox=True),\n        3\n    )\n\n    def make_cls():\n      class A(pg.Object):\n        x: str\n      return A\n\n    with self.assertRaises(errors.SerializationError):\n      execution.call(make_cls, sandbox=True)\n\n  def test_call_with_automatic_sandboxing(self):\n    def foo(x, y):\n      return x + y\n\n    self.assertEqual(\n        execution.call(foo, 1, y=2),\n        3\n    )\n\n    def make_cls():\n      class A(pg.Object):\n        x: str\n      return A\n\n    self.assertTrue(inspect.isclass(execution.call(make_cls)))\n\n\nclass RunTest(unittest.TestCase):\n\n  def test_run_without_sandboxing(self):\n    self.assertEqual(\n        execution.run(\n            'x + y',\n            global_vars=dict(x=1, y=2),\n            sandbox=False,\n        ),\n        3,\n    )\n\n  def test_run_with_sandboxing(self):\n    self.assertEqual(\n        execution.run(\n            'x + y',\n            global_vars=dict(x=1, y=2),\n            sandbox=True,\n        ),\n        3,\n    )\n\n  def test_run_with_automatic_sandboxing(self):\n    self.assertEqual(\n        execution.run(\n            'x + y',\n            global_vars=dict(x=1, y=2),\n        ),\n        3,\n    )\n\n    r = execution.run(\n        inspect.cleandoc(\"\"\"\n            def foo(x, y):\n              return x + y\n\n            class A(pg.Object):\n              x: str\n            \"\"\"),\n        global_vars=dict(pg=pg),\n        outputs_intermediate=True,\n    )\n    self.assertTrue(inspect.isfunction(r['foo']))\n    self.assertTrue(inspect.isclass(r['A']))\n\n\nif __name__ == '__main__':\n  unittest.main()"
