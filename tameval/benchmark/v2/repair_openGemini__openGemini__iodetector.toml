[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Go"
go_version = "1.22"

[repo_info]
repository = "openGemini/openGemini"
sha = "b8992247864dd0395b2e433c6472bb6bdfe7b905"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out lib/iodetector/iodetector.go lib/iodetector/iodetector_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting lib/iodetector/iodetector.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 93.0
original_coverage = 93.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 86, 87, 88, 89, 93, 94, 95, 96, 97, 98, 99, 100, 101, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 152,]
missed_lines = [ 52, 55, 56, 57, 58, 60,]

[input_info]
test_file_path = "lib/iodetector/iodetector_test.go"
focal_file_path = "lib/iodetector/iodetector.go"
test_file_url = "https://github.com/openGemini/openGemini/blob/b8992247864dd0395b2e433c6472bb6bdfe7b905/lib/iodetector/iodetector_test.go"
focal_file_url = "https://github.com/openGemini/openGemini/blob/b8992247864dd0395b2e433c6472bb6bdfe7b905/lib/iodetector/iodetector.go"
first_commit_date = "2023-07-08"
last_commit_date = "2025-04-12"
test_file_content = "\n\npackage iodetector\n\nimport (\n\t\"errors\"\n\t\"os\"\n\t\"syscall\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/agiledragon/gomonkey/v2\"\n\t\"github.com/smartystreets/goconvey/convey\"\n)\n\nconst (\n\tdefaultLogDiskFilePath    = \"/opt/tsdb/log/io_detection.log\"\n\tdefaultSystemDiskFilePath = \"/home/Ruby/io_detection.log\"\n)\n\nfunc newIODetector(detectFilePath []string, timeout, flushInterval int) *IODetector {\n\treturn &IODetector{\n\t\tdetectFilePath:   detectFilePath,\n\t\tdetectCh:         make(chan time.Time),\n\t\tdetectCloseCh:    make(chan bool),\n\t\tflushCloseCh:     make(chan bool),\n\t\ttimeoutThreshold: timeout,\n\t\tflushInterval:    flushInterval,\n\t}\n}\n\nfunc TestIODetector_flushDiskForDetectIO(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tticker := time.NewTicker(100 * time.Millisecond)\n\t\tpatch1 := gomonkey.ApplyPrivateMethod(detector, \"flush\", func(_ *IODetector) {})\n\t\tpatch2 := gomonkey.ApplyFunc(time.NewTicker,\n\t\t\tfunc(d time.Duration) *time.Ticker {\n\t\t\t\treturn ticker\n\t\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t\tpatch2.Reset()\n\t\t}()\n\t\tgo detector.flushDiskForDetectIO()\n\t\tbeforeTime := <-detector.detectCh\n\t\tconvey.So(beforeTime, convey.ShouldNotBeNil)\n\t\tdetector.flushCloseCh <- true\n\t\tfor len(detector.flushCloseCh) > 0 {\n\t\t}\n\t}\n\tconvey.Convey(\"TestIODetector_flushDiskForDetectIO\", t, testFunc)\n}\n\nfunc TestFlushDiskForDetectIO_Alternative(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tticker := time.NewTicker(100 * time.Millisecond)\n\t\tpatch1 := gomonkey.ApplyPrivateMethod(detector, \"flush\", func(_ *IODetector) {})\n\t\tpatch2 := gomonkey.ApplyFunc(time.NewTicker,\n\t\t\tfunc(d time.Duration) *time.Ticker {\n\t\t\t\treturn ticker\n\t\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t\tpatch2.Reset()\n\t\t}()\n\t\tgo detector.flushDiskForDetectIO()\n\t\tbeforeTime := <-detector.detectCh\n\t\tconvey.So(beforeTime.Unix(), convey.ShouldBeGreaterThan, 0)\n\t\tdetector.flushCloseCh <- true\n\t\tselect {\n\t\tcase <-detector.flushCloseCh:\n\t\tcase <-time.After(1 * time.Second):\n\t\t\tt.Fatal(\"flushCloseCh did not close properly\")\n\t\t}\n\t}\n\tconvey.Convey(\"TestFlushDiskForDetectIO_Alternative\", t, testFunc)\n}\n\nfunc TestIODetector_detectIO_1(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tpatch1 := gomonkey.ApplyFunc(syscall.Kill, func(pid int, signal syscall.Signal) error {\n\t\t\treturn nil\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tgo detector.detectIO()\n\t\tdetector.detectCloseCh <- true\n\t}\n\tconvey.Convey(\"TestIODetector_detectIO\", t, testFunc)\n}\n\nfunc TestDetectIO_WithoutSignal(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tpatch1 := gomonkey.ApplyFunc(syscall.Kill, func(pid int, signal syscall.Signal) error {\n\t\t\treturn errors.New(\"signal not sent\")\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tgo detector.detectIO()\n\t\tdetector.detectCh <- time.Now()\n\t\tdetector.detectCloseCh <- true\n\t}\n\tconvey.Convey(\"TestDetectIO_WithoutSignal\", t, testFunc)\n}\n\nfunc TestIODetector_detectIO_2(t *testing.T) {\n\ttestFunc := func() {\n\t\tvar killed bool\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tpatch1 := gomonkey.ApplyFunc(syscall.Kill, func(pid int, signal syscall.Signal) error {\n\t\t\tkilled = true\n\t\t\treturn nil\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tgo detector.detectIO()\n\t\tdetector.detectCh <- time.Now().Add(-100 * time.Second)\n\t\tfor !killed {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t}\n\t\tconvey.So(killed, convey.ShouldEqual, true)\n\t}\n\tconvey.Convey(\"TestIODetector_detectIO\", t, testFunc)\n}\n\nfunc TestDetectIO_TimeoutThresholdExceeded(t *testing.T) {\n\ttestFunc := func() {\n\t\tvar killed bool\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, 1, defaultFlushInterval)\n\t\tpatch1 := gomonkey.ApplyFunc(syscall.Kill, func(pid int, signal syscall.Signal) error {\n\t\t\tkilled = true\n\t\t\treturn nil\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tgo detector.detectIO()\n\t\tdetector.detectCh <- time.Now().Add(-10 * time.Second)\n\t\tfor !killed {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t}\n\t\tconvey.So(killed, convey.ShouldEqual, true)\n\t}\n\tconvey.Convey(\"TestDetectIO_TimeoutThresholdExceeded\", t, testFunc)\n}\n\nfunc TestIODetector_newIODetector(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := newIODetector([]string{\"mock_path1\", \"mock_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tconvey.So(detector, convey.ShouldNotBeNil)\n\t\tif detector != nil {\n\t\t\tconvey.So(detector.detectFilePath, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.detectCh, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.flushCloseCh, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.detectCloseCh, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.timeoutThreshold, convey.ShouldEqual, defaultSuicideTimeout)\n\t\t\tconvey.So(detector.flushInterval, convey.ShouldEqual, defaultFlushInterval)\n\t\t}\n\t}\n\tconvey.Convey(\"TestIODetector_newIODetector\", t, testFunc)\n}\n\nfunc TestNewIODetector_WithDifferentPaths(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := newIODetector([]string{\"alternative_path1\", \"alternative_path2\"}, defaultSuicideTimeout, defaultFlushInterval)\n\t\tconvey.So(detector, convey.ShouldNotBeNil)\n\t\tif detector != nil {\n\t\t\tconvey.So(detector.detectFilePath, convey.ShouldResemble, []string{\"alternative_path1\", \"alternative_path2\"})\n\t\t\tconvey.So(detector.detectCh, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.flushCloseCh, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.detectCloseCh, convey.ShouldNotBeNil)\n\t\t\tconvey.So(detector.timeoutThreshold, convey.ShouldEqual, defaultSuicideTimeout)\n\t\t\tconvey.So(detector.flushInterval, convey.ShouldEqual, defaultFlushInterval)\n\t\t}\n\t}\n\tconvey.Convey(\"TestNewIODetector_WithDifferentPaths\", t, testFunc)\n}\n\nfunc TestIODetector_processIODetection(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := &IODetector{}\n\t\tf1, f2 := make(chan bool), make(chan bool)\n\t\tpatch1 := gomonkey.ApplyPrivateMethod(detector, \"flushDiskForDetectIO\", func(_ *IODetector) { f1 <- true })\n\t\tpatch2 := gomonkey.ApplyPrivateMethod(detector, \"detectIO\", func(_ *IODetector) { f2 <- true })\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t\tpatch2.Reset()\n\t\t}()\n\t\tdetector.processIODetection()\n\t\tf1Res := <-f1\n\t\tf2Res := <-f2\n\t\tconvey.So(f1Res, convey.ShouldEqual, true)\n\t\tconvey.So(f2Res, convey.ShouldEqual, true)\n\t}\n\tconvey.Convey(\"TestIODetector_processIODetection\", t, testFunc)\n}\n\nfunc TestProcessIODetection_SecondCall(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := &IODetector{}\n\t\tf1, f2 := make(chan bool), make(chan bool)\n\t\tpatch1 := gomonkey.ApplyPrivateMethod(detector, \"flushDiskForDetectIO\", func(_ *IODetector) { f1 <- true })\n\t\tpatch2 := gomonkey.ApplyPrivateMethod(detector, \"detectIO\", func(_ *IODetector) { f2 <- true })\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t\tpatch2.Reset()\n\t\t}()\n\t\tdetector.processIODetection()\n\t\tf1Res := <-f1\n\t\tf2Res := <-f2\n\t\tconvey.So(f1Res, convey.ShouldEqual, true)\n\t\tconvey.So(f2Res, convey.ShouldEqual, true)\n\t}\n\tconvey.Convey(\"TestProcessIODetection_SecondCall\", t, testFunc)\n}\n\nfunc TestIODetector_StartIODetection(t *testing.T) {\n\ttestFunc := func() {\n\t\tdetector := &IODetector{}\n\t\tpatch1 := gomonkey.ApplyPrivateMethod(detector, \"processIODetection\", func(_ *IODetector) {})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tconfig := NewIODetector()\n\t\tconfig.Paths = []string{defaultSystemDiskFilePath, defaultLogDiskFilePath}\n\t\tdetectorForAssert := startIODetection(config)\n\t\tconvey.So(detectorForAssert.detectFilePath, convey.ShouldResemble,\n\t\t\t[]string{defaultSystemDiskFilePath, defaultLogDiskFilePath})\n\t\tconvey.So(detectorForAssert.detectCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.detectCloseCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.flushCloseCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.timeoutThreshold, convey.ShouldEqual, defaultSuicideTimeout)\n\t\tconvey.So(detectorForAssert.flushInterval, convey.ShouldEqual, defaultFlushInterval)\n\n\t\tdetectorForAssert = startIODetection(config)\n\t\tconvey.So(detectorForAssert.detectFilePath, convey.ShouldResemble,\n\t\t\t[]string{defaultSystemDiskFilePath, defaultLogDiskFilePath})\n\t\tconvey.So(detectorForAssert.detectCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.detectCloseCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.flushCloseCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.timeoutThreshold, convey.ShouldEqual, defaultSuicideTimeout)\n\t\tconvey.So(detectorForAssert.flushInterval, convey.ShouldEqual, defaultFlushInterval)\n\n\t\tdetectorForAssert = startIODetection(&Config{\n\t\t\tPaths:          []string{\"mockpath1\", \"mockpath2\"},\n\t\t\tSuicideTimeout: 60,\n\t\t\tFlushInterval:  5,\n\t\t})\n\t\tconvey.So(detectorForAssert.detectFilePath, convey.ShouldResemble,\n\t\t\t[]string{\"mockpath1\", \"mockpath2\"})\n\t\tconvey.So(detectorForAssert.detectCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.detectCloseCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.flushCloseCh, convey.ShouldNotBeNil)\n\t\tconvey.So(detectorForAssert.timeoutThreshold, convey.ShouldEqual, 60)\n\t\tconvey.So(detectorForAssert.flushInterval, convey.ShouldEqual, 5)\n\t}\n\tconvey.Convey(\"TestIODetector_StartIODetection\", t, testFunc)\n}\n\nfunc TestStartIODetection_WithEmptyPaths(t *testing.T) {\n\ttestFunc := func() {\n\t\tconfig := NewIODetector()\n\t\tconfig.Paths = []string{}\n\t\tdetectorForAssert := startIODetection(config)\n\t\tconvey.So(detectorForAssert, convey.ShouldBeNil)\n\t}\n\tconvey.Convey(\"TestStartIODetection_WithEmptyPaths\", t, testFunc)\n}\n\nfunc TestIODetector_flush_1(t *testing.T) {\n\ttestFunc := func() {\n\t\tmockDetector := &IODetector{detectFilePath: []string{\"filepath\"}}\n\t\tpatch1 := gomonkey.ApplyFunc(os.OpenFile, func(name string, flag int, perm os.FileMode) (*os.File, error) {\n\t\t\treturn nil, errors.New(\"test err\")\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tmockDetector.flush()\n\t}\n\tconvey.Convey(\"TestIODetector_flush_1\", t, testFunc)\n}\n\nfunc TestFlushDisk_WithOpenFileError(t *testing.T) {\n\ttestFunc := func() {\n\t\tmockDetector := &IODetector{detectFilePath: []string{\"filepath\"}}\n\t\tpatch1 := gomonkey.ApplyFunc(os.OpenFile, func(name string, flag int, perm os.FileMode) (*os.File, error) {\n\t\t\treturn nil, errors.New(\"open file failed\")\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t}()\n\t\tmockDetector.flush()\n\t}\n\tconvey.Convey(\"TestFlushDisk_WithOpenFileError\", t, testFunc)\n}\n\nfunc TestIODetector_flush_2(t *testing.T) {\n\ttestFunc := func() {\n\t\tmockDetector := &IODetector{detectFilePath: []string{\"filepath\"}}\n\t\tmockFile := &os.File{}\n\t\tpatch1 := gomonkey.ApplyFunc(os.OpenFile, func(name string, flag int, perm os.FileMode) (*os.File, error) {\n\t\t\treturn &os.File{}, nil\n\t\t})\n\t\tpatch2 := gomonkey.ApplyMethod(mockFile, \"WriteAt\", func(_ *os.File, b []byte, off int64) (n int, err error) {\n\t\t\treturn 0, errors.New(\"test err\")\n\t\t})\n\t\tpatch3 := gomonkey.ApplyMethod(mockFile, \"Sync\", func(_ *os.File) error {\n\t\t\treturn errors.New(\"test err\")\n\t\t})\n\t\tpatch4 := gomonkey.ApplyMethod(mockFile, \"Close\", func(_ *os.File) error {\n\t\t\treturn errors.New(\"test err\")\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t\tpatch2.Reset()\n\t\t\tpatch3.Reset()\n\t\t\tpatch4.Reset()\n\t\t}()\n\t\tmockDetector.flush()\n\t}\n\tconvey.Convey(\"TestIODetector_flush_2\", t, testFunc)\n}\n\nfunc TestFlushDisk_WithMethodErrors(t *testing.T) {\n\ttestFunc := func() {\n\t\tmockDetector := &IODetector{detectFilePath: []string{\"filepath\"}}\n\t\tmockFile := &os.File{}\n\t\tpatch1 := gomonkey.ApplyFunc(os.OpenFile, func(name string, flag int, perm os.FileMode) (*os.File, error) {\n\t\t\treturn mockFile, nil\n\t\t})\n\t\tpatch2 := gomonkey.ApplyMethod(mockFile, \"WriteAt\", func(_ *os.File, b []byte, off int64) (n int, err error) {\n\t\t\treturn 0, errors.New(\"write at failed\")\n\t\t})\n\t\tpatch3 := gomonkey.ApplyMethod(mockFile, \"Sync\", func(_ *os.File) error {\n\t\t\treturn errors.New(\"sync failed\")\n\t\t})\n\t\tpatch4 := gomonkey.ApplyMethod(mockFile, \"Close\", func(_ *os.File) error {\n\t\t\treturn errors.New(\"close failed\")\n\t\t})\n\t\tdefer func() {\n\t\t\tpatch1.Reset()\n\t\t\tpatch2.Reset()\n\t\t\tpatch3.Reset()\n\t\t\tpatch4.Reset()\n\t\t}()\n\t\tmockDetector.flush()\n\t}\n\tconvey.Convey(\"TestFlushDisk_WithMethodErrors\", t, testFunc)\n}\n\nfunc TestIODetector_ConfigValidate(t *testing.T) {\n\tconfig := NewIODetector()\n\tconfig.FlushInterval = -1\n\tconfig.SuicideTimeout = -1\n\terr := config.Validate()\n\tif err == nil {\n\t\tt.Fatal(\"valid config fail\")\n\t}\n\tconfig.FlushInterval = 10\n\terr = config.Validate()\n\tif err == nil {\n\t\tt.Fatal(\"valid config fail\")\n\t}\n}\n\nfunc TestConfigValidation_WithNegativeTimeout(t *testing.T) {\n\tconfig := NewIODetector()\n\tconfig.FlushInterval = 10\n\tconfig.SuicideTimeout = -1\n\terr := config.Validate()\n\tif err == nil {\n\t\tt.Fatal(\"valid config fail\")\n\t}\n}\n\nfunc TestIODetector_StopFlush(t *testing.T) {\n\td := &IODetector{\n\t\tdetectCh:      make(chan time.Time),\n\t\tdetectCloseCh: make(chan bool),\n\t\tflushCloseCh:  make(chan bool),\n\t\tflushInterval: 1,\n\t}\n\n\tgo d.flushDiskForDetectIO()\n\ttime.Sleep(1 * time.Second)\n\td.Close()\n}\n\nfunc TestStopFlush_AfterShortDuration(t *testing.T) {\n\td := &IODetector{\n\t\tdetectCh:      make(chan time.Time),\n\t\tdetectCloseCh: make(chan bool),\n\t\tflushCloseCh:  make(chan bool),\n\t\tflushInterval: 1,\n\t}\n\n\tgo d.flushDiskForDetectIO()\n\ttime.Sleep(10 * time.Millisecond)\n\td.Close()\n}"
