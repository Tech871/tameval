[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "agrestio/agrest"
sha = "113d494706e4c3d1e86cc13936a67596d5265a9d"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl agrest-engine -Dtest=IncludeMergerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl agrest-engine -DtargetClasses=**.IncludeMerger  -DtargetTests=**.IncludeMergerTest  -DoutputFormats=XML"
coverage_report_path = "agrest-engine/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "agrest-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 88.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 29, 31, 32, 33, 34, 35, 58, 59, 61, 62, 63, 65, 66, 67, 68, 77, 80, 81, 82, 83, 84, 89, 91, 92, 93, 94, 95, 97, 99,]
missed_lines = [ 43, 44, 46, 78,]

[input_info]
test_file_path = "agrest-engine/src/test/java/io/agrest/runtime/entity/IncludeMergerTest.java"
focal_file_path = "agrest-engine/src/main/java/io/agrest/runtime/entity/IncludeMerger.java"
test_file_url = "https://github.com/agrestio/agrest/blob/113d494706e4c3d1e86cc13936a67596d5265a9d/agrest-engine/src/test/java/io/agrest/runtime/entity/IncludeMergerTest.java"
focal_file_url = "https://github.com/agrestio/agrest/blob/113d494706e4c3d1e86cc13936a67596d5265a9d/agrest-engine/src/main/java/io/agrest/runtime/entity/IncludeMerger.java"
first_commit_date = "2020-04-19"
last_commit_date = "2024-06-05"
test_file_content = "package io.agrest.runtime.entity;\n\nimport io.agrest.RelatedResourceEntity;\nimport io.agrest.ResourceEntity;\nimport io.agrest.RootResourceEntity;\nimport io.agrest.access.PathChecker;\nimport io.agrest.annotation.AgAttribute;\nimport io.agrest.annotation.AgId;\nimport io.agrest.annotation.AgRelationship;\nimport io.agrest.compiler.AgEntityCompiler;\nimport io.agrest.compiler.AnnotationsAgEntityCompiler;\nimport io.agrest.meta.AgEntity;\nimport io.agrest.meta.AgSchema;\nimport io.agrest.meta.LazySchema;\nimport io.agrest.protocol.Include;\nimport io.agrest.resolver.ThrowingRelatedDataResolver;\nimport io.agrest.runtime.meta.RequestSchema;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDate;\nimport java.util.Collections;\nimport java.util.List;\n\nimport static java.util.Arrays.asList;\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class IncludeMergerTest {\n\n    private AgSchema schema;\n    private IncludeMerger includeMerger;\n\n    @BeforeEach\n    public void setUp() {\n\n        AgEntityCompiler compiler = new AnnotationsAgEntityCompiler(Collections.emptyMap());\n        this.schema = new LazySchema(List.of(compiler));\n\n        IExpMerger expMerger = new ExpMerger();\n        ISortMerger sortMerger = new SortMerger();\n        IMapByMerger mapByMerger = new MapByMerger();\n        ISizeMerger sizeMerger = new SizeMerger();\n        this.includeMerger = new IncludeMerger(expMerger, sortMerger, mapByMerger, sizeMerger);\n    }\n\n\n\n    @Test\n    public void mergeAttributesAndRelationships() {\n\n        AgEntity<X> entity = schema.getEntity(X.class);\n        ResourceEntity<X> root = new RootResourceEntity<>(entity);\n        includeMerger.merge(root, asList(new Include(\"name\"), new Include(\"ys\")), new RequestSchema(schema), PathChecker.ofDefault());\n\n        assertEquals(1, root.getBaseProjection().getAttributes().size());\n        assertFalse(root.isIdIncluded());\n        assertEquals(1, root.getChildren().size());\n    }\n\n\n\n    public static class X {\n\n        private int id;\n        private LocalDate date;\n        private String name;\n        private List<Y> ys;\n\n        @AgId\n        public int getId() {\n            return id;\n        }\n\n        @AgAttribute\n        public LocalDate getDate() {\n            return date;\n        }\n\n        @AgAttribute\n        public String getName() {\n            return name;\n        }\n\n        @AgRelationship\n        public List<Y> getYs() {\n            return ys;\n        }\n    }\n\n    public static class Y {\n\n        private String name;\n        private String phoneNumber;\n        private Z z;\n\n        @AgAttribute\n        public String getName() {\n            return name;\n        }\n\n        @AgAttribute\n        public String getPhoneNumber() {\n            return phoneNumber;\n        }\n\n        @AgRelationship\n        public Z getZ() {\n            return z;\n        }\n    }\n\n    public static class Z {\n\n        private int id;\n        private String name;\n        private A a;\n\n        @AgId\n        public int getId() {\n            return id;\n        }\n\n        @AgAttribute\n        public String getName() {\n            return name;\n        }\n\n        @AgRelationship\n        public A getA() {\n            return a;\n        }\n    }\n\n    public static class A {\n        private int id;\n\n        @AgId\n        public int getId() {\n            return id;\n        }\n    }\n}\n"
