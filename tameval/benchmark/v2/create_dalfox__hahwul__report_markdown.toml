[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "hahwul/dalfox"
sha = "793d32632c00b306ec3e00b517bebc24745888f8"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/report/report_markdown.go internal/report/report_markdown_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/report/report_markdown.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 39.0
original_coverage = 100.0
mutation_kill_rate = 42.0
original_mutation_kill_rate = 100.0
covered_lines = [ 10, 11, 20, 21, 22, 23, 24, 25, 26, 27, 36, 37, 38, 52, 53, 54, 56,]
missed_lines = [ 12, 13, 14, 15, 16, 17, 18, 28, 29, 30, 31, 32, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,]

[input_info]
test_file_path = "internal/report/report_markdown_test.go"
focal_file_path = "internal/report/report_markdown.go"
test_file_url = "https://github.com/hahwul/dalfox/blob/793d32632c00b306ec3e00b517bebc24745888f8/internal/report/report_markdown_test.go"
focal_file_url = "https://github.com/hahwul/dalfox/blob/793d32632c00b306ec3e00b517bebc24745888f8/internal/report/report_markdown.go"
first_commit_date = "2025-07-05"
last_commit_date = "2025-07-06"
test_file_content = "package report\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/hahwul/dalfox/v2/pkg/model\"\n\t\"github.com/logrusorgru/aurora\"\n)\n\n\n\n\nfunc TestGenerateMarkdownReport_EmptyResult(t *testing.T) {\n\toptions := model.Options{\n\t\tAuroraObject: aurora.NewAurora(true),\n\t}\n\tscanResult := model.Result{\n\t\tStartTime: time.Date(2023, 10, 26, 10, 0, 0, 0, time.UTC),\n\t\tEndTime:   time.Date(2023, 10, 26, 11, 0, 0, 0, time.UTC),\n\t\tDuration:  1 * time.Hour,\n\t\tParams:    []model.ParamResult{}, // No Params\n\t\tPoCs:      []model.PoC{},         // No PoCs\n\t}\n\n\texpectedReport := `## Information\n- Start: 2023-10-26 10:00:00 +0000 UTC\n- End: 2023-10-26 11:00:00 +0000 UTC\n- Duration: 1h0m0s\n\n## Parameter Analysis\n| Param | Type | Reflected | R-Point | R-Code | Chars |\n|---|---|---|---|---|---|\n\n## XSS PoCs\nNo XSS vulnerabilities found.\n\n`\n\treport := GenerateMarkdownReport(scanResult, options)\n\n\tif report != expectedReport {\n\t\tt.Errorf(\"GenerateMarkdownReport() with empty result output did not match expected.\\nGot:\\n%s\\n\\nWant:\\n%s\", report, expectedReport)\n\t}\n}\n"
