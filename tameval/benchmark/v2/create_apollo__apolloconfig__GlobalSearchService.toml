[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apolloconfig/apollo"
sha = "4fa881a973996edf978c9b8e78719b437b64169c"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl apollo-portal -Dtest=GlobalSearchServiceTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl apollo-portal -DtargetClasses=**.GlobalSearchService  -DtargetTests=**.GlobalSearchServiceTest  -DoutputFormats=XML"
coverage_report_path = "apollo-portal/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "apollo-portal/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 75.0
original_coverage = 93.0
mutation_kill_rate = 33.0
original_mutation_kill_rate = 78.0
covered_lines = [ 36, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 55, 57, 58, 61, 62, 63, 67, 68, 73,]
missed_lines = [ 53, 59, 60, 64, 65, 69, 71,]

[input_info]
test_file_path = "apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/GlobalSearchServiceTest.java"
focal_file_path = "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/GlobalSearchService.java"
test_file_url = "https://github.com/apolloconfig/apollo/blob/4fa881a973996edf978c9b8e78719b437b64169c/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/service/GlobalSearchServiceTest.java"
focal_file_url = "https://github.com/apolloconfig/apollo/blob/4fa881a973996edf978c9b8e78719b437b64169c/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/service/GlobalSearchService.java"
first_commit_date = "2024-09-20"
last_commit_date = "2024-09-20"
test_file_content = "/*\n * Copyright 2024 Apollo Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage com.ctrip.framework.apollo.portal.service;\n\n/**\n * @author hujiyuan 2024-08-10\n */\n\nimport com.ctrip.framework.apollo.common.dto.ItemInfoDTO;\nimport com.ctrip.framework.apollo.common.dto.PageDTO;\nimport com.ctrip.framework.apollo.common.http.SearchResponseEntity;\nimport com.ctrip.framework.apollo.portal.api.AdminServiceAPI;\nimport com.ctrip.framework.apollo.portal.component.PortalSettings;\nimport com.ctrip.framework.apollo.portal.entity.vo.ItemInfo;\nimport com.ctrip.framework.apollo.portal.environment.Env;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.data.domain.PageRequest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.ArgumentMatchers.*;\nimport static org.mockito.Mockito.*;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class GlobalSearchServiceTest {\n\n    @Mock\n    private AdminServiceAPI.ItemAPI itemAPI;\n\n    @Mock\n    private PortalSettings portalSettings;\n\n    @InjectMocks\n    private GlobalSearchService globalSearchService;\n\n    private final List<Env> activeEnvs = new ArrayList<>();\n\n    @Before\n    public void setUp() {\n        when(portalSettings.getActiveEnvs()).thenReturn(activeEnvs);\n    }\n\n    @Test\n    public void testGet_PerEnv_ItemInfo_BySearch_withKeyAndValue_ReturnExpectedItemInfos() {\n        activeEnvs.add(Env.DEV);\n        activeEnvs.add(Env.PRO);\n\n        ItemInfoDTO itemInfoDTO = new ItemInfoDTO(\"TestApp\",\"TestCluster\",\"TestNamespace\",\"TestKey\",\"TestValue\");\n        List<ItemInfoDTO> mockItemInfoDTOs = new ArrayList<>();\n        mockItemInfoDTOs.add(itemInfoDTO);\n        Mockito.when(itemAPI.getPerEnvItemInfoBySearch(any(Env.class), eq(\"TestKey\"), eq(\"TestValue\"), eq(0), eq(1))).thenReturn(new PageDTO<>(mockItemInfoDTOs, PageRequest.of(0, 1), 1L));\n        SearchResponseEntity<List<ItemInfo>> mockItemInfos = globalSearchService.getAllEnvItemInfoBySearch(\"TestKey\", \"TestValue\", 0, 1);\n        assertEquals(2, mockItemInfos.getBody().size());\n\n        List<ItemInfo> devMockItemInfos = new ArrayList<>();\n        List<ItemInfo> proMockItemInfos = new ArrayList<>();\n        List<ItemInfo> allEnvMockItemInfos = new ArrayList<>();\n        devMockItemInfos.add(new ItemInfo(\"TestApp\", Env.DEV.getName(), \"TestCluster\", \"TestNamespace\", \"TestKey\", \"TestValue\"));\n        proMockItemInfos.add(new ItemInfo(\"TestApp\", Env.PRO.getName(), \"TestCluster\", \"TestNamespace\", \"TestKey\", \"TestValue\"));\n        allEnvMockItemInfos.addAll(devMockItemInfos);\n        allEnvMockItemInfos.addAll(proMockItemInfos);\n\n        verify(itemAPI,times(2)).getPerEnvItemInfoBySearch(any(Env.class), eq(\"TestKey\"), eq(\"TestValue\"), eq(0), eq(1));\n        verify(portalSettings,times(1)).getActiveEnvs();\n        assertEquals(allEnvMockItemInfos.toString(), mockItemInfos.getBody().toString());\n    }\n\n\n\n}\n"
