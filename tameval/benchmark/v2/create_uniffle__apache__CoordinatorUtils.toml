[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/uniffle"
sha = "e6f0941ad9768beb83ec330c964d20a3ce2e55e3"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl coordinator -Dtest=CoordinatorUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl coordinator -DtargetClasses=**.CoordinatorUtils  -DtargetTests=**.CoordinatorUtilsTest  -DoutputFormats=XML"
coverage_report_path = "coordinator/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "coordinator/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 43.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 41, 136, 137, 138, 141, 142, 143, 148, 149, 150, 151, 152, 153, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 172, 174, 176, 180, 181, 182, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201,]
missed_lines = [ 39, 47, 49, 50, 51, 52, 56, 57, 58, 60, 74, 75, 76, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 106, 107, 108, 109, 113, 114, 116, 121, 122, 123, 126, 127, 128, 129, 132, 144, 145, 154, 155, 169, 170, 184,]

[input_info]
test_file_path = "coordinator/src/test/java/org/apache/uniffle/coordinator/util/CoordinatorUtilsTest.java"
focal_file_path = "coordinator/src/main/java/org/apache/uniffle/coordinator/util/CoordinatorUtils.java"
test_file_url = "https://github.com/apache/uniffle/blob/e6f0941ad9768beb83ec330c964d20a3ce2e55e3/coordinator/src/test/java/org/apache/uniffle/coordinator/util/CoordinatorUtilsTest.java"
focal_file_url = "https://github.com/apache/uniffle/blob/e6f0941ad9768beb83ec330c964d20a3ce2e55e3/coordinator/src/main/java/org/apache/uniffle/coordinator/util/CoordinatorUtils.java"
first_commit_date = "2022-12-06"
last_commit_date = "2024-08-01"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.uniffle.coordinator.util;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport org.junit.jupiter.api.Test;\n\nimport org.apache.uniffle.common.PartitionRange;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\npublic class CoordinatorUtilsTest {\n\n\n\n  @Test\n  public void testExtractClusterConf() {\n    String confStr = \"h1,k1-1=v1-1,k1-2=v1-2;h2,k2-1=v2-1\";\n    Map<String, Map<String, String>> conf = CoordinatorUtils.extractRemoteStorageConf(confStr);\n    Map<String, Map<String, String>> expectConf = Maps.newTreeMap();\n    expectConf.put(\"h1\", ImmutableMap.of(\"k1-1\", \"v1-1\", \"k1-2\", \"v1-2\"));\n    expectConf.put(\"h2\", ImmutableMap.of(\"k2-1\", \"v2-1\"));\n    assertEquals(2, conf.size());\n    compareConfMap(expectConf, conf);\n\n    confStr = \"h1,k1-1=v1-1,k1-2=v1-2;\";\n    conf = CoordinatorUtils.extractRemoteStorageConf(confStr);\n    expectConf = Maps.newTreeMap();\n    expectConf.put(\"h1\", ImmutableMap.of(\"k1-1\", \"v1-1\", \"k1-2\", \"v1-2\"));\n    assertEquals(1, conf.size());\n    compareConfMap(expectConf, conf);\n\n    confStr = \"h1,k1-1=v1-1,k1-2=v1-2;h1,k1-1=\";\n    conf = CoordinatorUtils.extractRemoteStorageConf(confStr);\n    expectConf = Maps.newTreeMap();\n    expectConf.put(\"h1\", ImmutableMap.of(\"k1-1\", \"v1-1\", \"k1-2\", \"v1-2\"));\n    assertEquals(0, conf.size());\n\n    confStr = \"\";\n    conf = CoordinatorUtils.extractRemoteStorageConf(confStr);\n    expectConf = Maps.newTreeMap();\n    expectConf.put(\"h1\", ImmutableMap.of(\"k1-1\", \"v1-1\", \"k1-2\", \"v1-2\"));\n    assertEquals(0, conf.size());\n  }\n\n  private void compareConfMap(\n      Map<String, Map<String, String>> expect, Map<String, Map<String, String>> conf) {\n    assertEquals(expect.size(), conf.size());\n    assertEquals(expect.size(), conf.size());\n    for (String key1 : expect.keySet()) {\n      Map<String, String> expectMap = expect.get(key1);\n      Map<String, String> confMap = conf.get(key1);\n      assertNotNull(expectMap);\n      assertNotNull(confMap);\n      for (String key2 : expectMap.keySet()) {\n        assertEquals(expectMap.get(key2), confMap.get(key2));\n      }\n    }\n  }\n\n\n  private void validate(int[] expect, List<List<PartitionRange>> rangesGroup) {\n    assertEquals(expect.length, rangesGroup.size());\n    for (int i = 0; i < expect.length; i++) {\n      assertEquals(expect[i], rangesGroup.get(i).size());\n    }\n  }\n}\n"
