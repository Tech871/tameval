[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "f4b6a3/uuid-creator"
sha = "3f41c3e6ed9fa3c229303672960570281f35a125"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=UrnCodecTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.UrnCodec  -DtargetTests=**.UrnCodecTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 85.0
original_coverage = 100.0
mutation_kill_rate = 56.0
original_mutation_kill_rate = 67.0
covered_lines = [ 49, 54, 67, 68, 80, 83, 93, 94, 95, 96, 97,]
missed_lines = [ 81, 99,]

[input_info]
test_file_path = "src/test/java/com/github/f4b6a3/uuid/codec/UrnCodecTest.java"
focal_file_path = "src/main/java/com/github/f4b6a3/uuid/codec/UrnCodec.java"
test_file_url = "https://github.com/f4b6a3/uuid-creator/blob/3f41c3e6ed9fa3c229303672960570281f35a125/src/test/java/com/github/f4b6a3/uuid/codec/UrnCodecTest.java"
focal_file_url = "https://github.com/f4b6a3/uuid-creator/blob/3f41c3e6ed9fa3c229303672960570281f35a125/src/main/java/com/github/f4b6a3/uuid/codec/UrnCodec.java"
first_commit_date = "2022-06-26"
last_commit_date = "2025-03-29"
test_file_content = "package com.github.f4b6a3.uuid.codec;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\n\nimport java.util.UUID;\n\nimport com.github.f4b6a3.uuid.exception.InvalidUuidException;\n\npublic class UrnCodecTest {\n\n\tprivate static final int DEFAULT_LOOP_LIMIT = 100;\n\n\tprivate static final String URN_PREFIX = \"urn:uuid:\";\n\n\tprivate static final String RFC4122_URN_PATTERN = \"^urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-6][0-9a-fA-F]{3}-[89ab][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$\";\n\n\n\n\t@Test\n\tpublic void testEncodeAndDecode() {\n\t\tUrnCodec codec = new UrnCodec();\n\t\tfor (int i = 0; i < DEFAULT_LOOP_LIMIT; i++) {\n\t\t\tUUID uuid = UUID.randomUUID();\n\t\t\tString urn = codec.encode(uuid); // encode\n\t\t\tassertEquals(uuid, codec.decode(urn)); // decode back\n\t\t}\n\t}\n\n\n\n\n\tprivate void checkPattern(String string, String pattern) {\n\t\tassertTrue(\"Doesn't match the pattern: \" + string, string.matches(pattern));\n\t}\n}\n"
