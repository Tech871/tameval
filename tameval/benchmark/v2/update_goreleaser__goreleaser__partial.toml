[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "goreleaser/goreleaser"
sha = "683adbba952d63899c6ba08ff0240fc946252674"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/pipe/partial/partial.go internal/pipe/partial/partial_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/pipe/partial/partial.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 57.0
original_coverage = 100.0
mutation_kill_rate = 75.0
original_mutation_kill_rate = 89.0
covered_lines = [ 16, 17, 19, 20, 21, 22, 23, 25, 26, 27, 28, 33, 34, 35, 36, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 68,]
missed_lines = [ 30, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 103, 104, 105, 106, 107, 109,]

[input_info]
test_file_path = "internal/pipe/partial/partial_test.go"
focal_file_path = "internal/pipe/partial/partial.go"
test_file_url = "https://github.com/goreleaser/goreleaser/blob/683adbba952d63899c6ba08ff0240fc946252674/internal/pipe/partial/partial_test.go"
focal_file_url = "https://github.com/goreleaser/goreleaser/blob/683adbba952d63899c6ba08ff0240fc946252674/internal/pipe/partial/partial.go"
first_commit_date = "2023-11-27"
last_commit_date = "2025-01-13"
test_file_content = "package partial\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\t\"testing\"\n\n\t\"github.com/goreleaser/goreleaser/v2/internal/testctx\"\n\t\"github.com/goreleaser/goreleaser/v2/pkg/config\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar pipe = Pipe{}\n\nfunc TestString(t *testing.T) {\n\trequire.NotEmpty(t, pipe.String())\n}\n\nfunc TestSkip(t *testing.T) {\n\tt.Run(\"partial\", func(t *testing.T) {\n\t\tctx := testctx.New(testctx.Partial)\n\t\trequire.False(t, pipe.Skip(ctx))\n\t})\n\n\tt.Run(\"full\", func(t *testing.T) {\n\t\trequire.True(t, pipe.Skip(testctx.New()))\n\t})\n}\n\nfunc TestRun(t *testing.T) {\n\tt.Run(\"target\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist: \"dist\",\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"TARGET\", \"windows_arm64\")\n\t\trequire.NoError(t, pipe.Run(ctx))\n\t\trequire.Equal(t, \"windows_arm64\", ctx.PartialTarget)\n\t})\n\tt.Run(\"no target\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist: \"dist\",\n\t\t}, testctx.Partial)\n\t\trequire.Error(t, pipe.Run(ctx))\n\t})\n\tt.Run(\"using GGOOS and GGOARCH\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"windows\")\n\t\tt.Setenv(\"GGOARCH\", \"arm64\")\n\t\trequire.NoError(t, pipe.Run(ctx))\n\t\trequire.Equal(t, \"windows_arm64\", ctx.PartialTarget)\n\t})\n\tt.Run(\"custom GGOARM\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tt.Setenv(\"GGOARCH\", \"arm\")\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_arm\", ctx.PartialTarget)\n\t\t})\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\tt.Setenv(\"GGOARM\", \"7\")\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_arm_7\", ctx.PartialTarget)\n\t\t})\n\t})\n\tt.Run(\"custom GGOARM64\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tt.Setenv(\"GGOARCH\", \"arm64\")\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_arm64\", ctx.PartialTarget)\n\t\t})\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\tt.Setenv(\"GGOARM64\", \"v9.0\")\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_arm64_v9.0\", ctx.PartialTarget)\n\t\t})\n\t})\n\tt.Run(\"custom GGOAMD64\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tt.Setenv(\"GGOARCH\", \"amd64\")\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_amd64\", ctx.PartialTarget)\n\t\t})\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\tt.Setenv(\"GGOAMD64\", \"v4\")\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_amd64_v4\", ctx.PartialTarget)\n\t\t})\n\t})\n\tt.Run(\"custom GGOMIPS\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tfor _, mips := range []string{\"mips\", \"mips64\", \"mipsle\", \"mips64le\"} {\n\t\t\tt.Run(mips, func(t *testing.T) {\n\t\t\t\tt.Setenv(\"GGOARCH\", mips)\n\t\t\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\t\t\trequire.Equal(t, \"linux_\"+mips, ctx.PartialTarget)\n\t\t\t\t})\n\t\t\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\t\t\tt.Setenv(\"GGOMIPS\", \"softfloat\")\n\t\t\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\t\t\trequire.Equal(t, \"linux_\"+mips+\"_softfloat\", ctx.PartialTarget)\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t})\n\tt.Run(\"custom GGO386\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tt.Setenv(\"GGOARCH\", \"386\")\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_386\", ctx.PartialTarget)\n\t\t})\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\tt.Setenv(\"GGO386\", \"softfloat\")\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_386_softfloat\", ctx.PartialTarget)\n\t\t})\n\t})\n\tt.Run(\"custom GGOPPC64\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tt.Setenv(\"GGOARCH\", \"ppc64\")\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_ppc64\", ctx.PartialTarget)\n\t\t})\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\tt.Setenv(\"GGOPPC64\", \"power9\")\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_ppc64_power9\", ctx.PartialTarget)\n\t\t})\n\t})\n\tt.Run(\"custom GGORISCV64\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\tt.Setenv(\"GGOOS\", \"linux\")\n\t\tt.Setenv(\"GGOARCH\", \"riscv64\")\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_riscv64\", ctx.PartialTarget)\n\t\t})\n\t\tt.Run(\"default\", func(t *testing.T) {\n\t\t\tt.Setenv(\"GGORISCV64\", \"rva22u64\")\n\t\t\trequire.NoError(t, pipe.Run(ctx))\n\t\t\trequire.Equal(t, \"linux_riscv64_rva22u64\", ctx.PartialTarget)\n\t\t})\n\t})\n\tt.Run(\"using runtime\", func(t *testing.T) {\n\t\tctx := testctx.NewWithCfg(config.Project{\n\t\t\tDist:   \"dist\",\n\t\t\tBuilds: []config.Build{{Builder: \"go\"}},\n\t\t}, testctx.Partial)\n\t\trequire.NoError(t, pipe.Run(ctx))\n\t\ttarget := fmt.Sprintf(\"%s_%s\", runtime.GOOS, runtime.GOARCH)\n\t\trequire.Equal(t, target, ctx.PartialTarget)\n\t})\n}"
