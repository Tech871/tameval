[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.13"

[repo_info]
repository = "buraksezer/olric"
sha = "5256a2c3904fa5dc54677e645b9ebae987571128"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/kvstore/table/table.go internal/kvstore/table/table_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/kvstore/table/table.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 86.0
original_coverage = 86.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 96, 97, 98, 100, 101, 102, 104, 105, 106, 110, 111, 112, 113, 114, 115, 121, 129, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 211, 212, 217, 220, 221, 225, 228, 229, 234, 235, 236, 237, 238, 241, 242, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 459, 460, 463, 464, 465, 466, 468, 471, 472, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 491, 495, 496, 499, 500, 501, 502, 503,]
missed_lines = [ 88, 89, 90, 92, 93, 94, 107, 108, 109, 122, 123, 124, 130, 131, 132, 139, 140, 141, 180, 181, 182, 213, 214, 215, 222, 223, 224, 230, 231, 232, 243, 244, 245, 376, 377, 378, 417, 418, 421, 422, 427, 428, 429, 430, 456, 457, 473, 474, 475, 492, 493,]

[input_info]
test_file_path = "internal/kvstore/table/table_test.go"
focal_file_path = "internal/kvstore/table/table.go"
test_file_url = "https://github.com/buraksezer/olric/blob/5256a2c3904fa5dc54677e645b9ebae987571128/internal/kvstore/table/table_test.go"
focal_file_url = "https://github.com/buraksezer/olric/blob/5256a2c3904fa5dc54677e645b9ebae987571128/internal/kvstore/table/table.go"
first_commit_date = "2021-11-21"
last_commit_date = "2025-02-09"
test_file_content = "// Copyright 2018-2025 Burak Sezer\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage table\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/buraksezer/olric/internal/kvstore/entry\"\n\t\"github.com/buraksezer/olric/pkg/storage\"\n\t\"github.com/cespare/xxhash/v2\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nvar key = \"foobar\"\n\nconst hkey uint64 = 18071988\n\nfunc setupTable() (*Table, storage.Entry) {\n\ttb := New(1024)\n\te := entry.New()\n\te.SetKey(key)\n\te.SetValue([]byte(\"foobar-value\"))\n\treturn tb, e\n}\n\nfunc TestTable_Put(t *testing.T) {\n\ttb, e := setupTable()\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n}\n\nfunc TestTable_Get(t *testing.T) {\n\ttb, e := setupTable()\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\tvalue, err := tb.Get(hkey)\n\trequire.NoError(t, err)\n\n\trequire.Equal(t, e.Key(), value.Key())\n\trequire.Equal(t, e.Value(), value.Value())\n\trequire.Equal(t, e.TTL(), value.TTL())\n\trequire.Equal(t, int64(0), e.LastAccess())\n\trequire.NotEqual(t, int64(0), value.LastAccess())\n}\n\nfunc TestTable_Delete(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\terr = tb.Delete(hkey)\n\trequire.NoError(t, err)\n\n\t_, err = tb.Get(hkey)\n\trequire.ErrorIs(t, ErrHKeyNotFound, err)\n}\n\nfunc TestTable_Check(t *testing.T) {\n\ttb, e := setupTable()\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\trequire.True(t, tb.Check(hkey))\n\n\terr = tb.Delete(hkey)\n\trequire.NoError(t, err)\n\n\trequire.False(t, tb.Check(hkey))\n}\n\nfunc TestTable_PutRaw(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.PutRaw(hkey, e.Encode())\n\trequire.NoError(t, err)\n\n\tvalue, err := tb.Get(hkey)\n\trequire.NoError(t, err)\n\trequire.Equal(t, e, value)\n}\n\nfunc TestTable_GetRaw(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\traw, err := tb.GetRaw(hkey)\n\trequire.NoError(t, err)\n\textracted := entry.New()\n\textracted.Decode(raw)\n\n\trequire.Equal(t, e.Key(), extracted.Key())\n\trequire.Equal(t, e.Value(), extracted.Value())\n\trequire.Equal(t, e.TTL(), extracted.TTL())\n\trequire.Equal(t, int64(0), e.LastAccess())\n\trequire.NotEqual(t, int64(0), extracted.LastAccess())\n}\n\nfunc TestTable_GetRawKey(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\trawKey, err := tb.GetRawKey(hkey)\n\trequire.NoError(t, err)\n\trequire.Equal(t, key, string(rawKey))\n}\n\nfunc TestTable_GetKey(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\tk, err := tb.GetKey(hkey)\n\trequire.NoError(t, err)\n\trequire.Equal(t, key, k)\n}\n\nfunc TestTable_SetState(t *testing.T) {\n\ttb, _ := setupTable()\n\ttb.SetState(ReadOnlyState)\n\trequire.Equal(t, ReadOnlyState, tb.State())\n}\n\nfunc TestTable_GetTTL(t *testing.T) {\n\ttb, e := setupTable()\n\tttl := time.Now().UnixNano()\n\te.SetTTL(ttl)\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\tvalue, err := tb.GetTTL(hkey)\n\trequire.NoError(t, err)\n\trequire.Equal(t, ttl, value)\n}\n\nfunc TestTable_GetLastAccess(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\tvalue, err := tb.GetLastAccess(hkey)\n\trequire.NoError(t, err)\n\trequire.NotEqual(t, 0, value)\n}\n\nfunc TestTable_UpdateTTL(t *testing.T) {\n\ttb, e := setupTable()\n\tttl := time.Now().UnixNano()\n\te.SetTTL(ttl)\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\te.SetTTL(ttl + 1000)\n\terr = tb.UpdateTTL(hkey, e)\n\trequire.NoError(t, err)\n\n\tvalue, err := tb.GetTTL(hkey)\n\trequire.NoError(t, err)\n\trequire.Equal(t, ttl+1000, value)\n}\n\nfunc TestTable_UpdateTTL_Update_LastAccess(t *testing.T) {\n\ttb, e := setupTable()\n\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\tlastAccessOne, err := tb.GetLastAccess(hkey)\n\trequire.NoError(t, err)\n\n\t<-time.After(time.Millisecond)\n\n\tttl := time.Now().UnixNano() + 1000\n\te.SetTTL(ttl)\n\n\terr = tb.UpdateTTL(hkey, e)\n\trequire.NoError(t, err)\n\n\tlastAccessTwo, err := tb.GetLastAccess(hkey)\n\trequire.NoError(t, err)\n\n\trequire.Greater(t, lastAccessTwo, lastAccessOne)\n}\n\nfunc TestTable_State(t *testing.T) {\n\ttb, _ := setupTable()\n\trequire.Equal(t, ReadWriteState, tb.State())\n}\n\nfunc TestTable_Range(t *testing.T) {\n\tdata := make(map[uint64]storage.Entry)\n\n\ttb := New(1 << 20)\n\tfor i := 0; i < 100; i++ {\n\t\te := entry.New()\n\t\tikey := fmt.Sprintf(\"key-%d\", i)\n\t\tidata := []byte(fmt.Sprintf(\"value-%d\", i))\n\t\tihkey := xxhash.Sum64String(ikey)\n\t\te.SetKey(ikey)\n\t\te.SetValue(idata)\n\t\tdata[ihkey] = e\n\n\t\terr := tb.Put(ihkey, e)\n\t\trequire.NoError(t, err)\n\t}\n\n\ttb.Range(func(hk uint64, e storage.Entry) bool {\n\t\titem, ok := data[hk]\n\t\trequire.True(t, ok)\n\n\t\trequire.Equal(t, item.Key(), e.Key())\n\t\trequire.Equal(t, item.Value(), e.Value())\n\t\trequire.Equal(t, item.TTL(), e.TTL())\n\t\trequire.Equal(t, int64(0), item.LastAccess())\n\t\trequire.NotEqual(t, int64(0), e.LastAccess())\n\n\t\treturn true\n\t})\n}\n\nfunc TestTable_Stats(t *testing.T) {\n\ttb := New(1 << 20)\n\tfor i := 0; i < 100; i++ {\n\t\te := entry.New()\n\t\tikey := fmt.Sprintf(\"key-%d\", i)\n\t\tidata := []byte(fmt.Sprintf(\"value-%d\", i))\n\t\tihkey := xxhash.Sum64String(ikey)\n\t\te.SetKey(ikey)\n\t\te.SetValue(idata)\n\t\terr := tb.Put(ihkey, e)\n\t\trequire.NoError(t, err)\n\t}\n\n\ts := tb.Stats()\n\trequire.Equal(t, uint64(1<<20), s.Allocated)\n\trequire.Equal(t, 100, s.Length)\n\trequire.Equal(t, uint64(4280), s.Inuse)\n\trequire.Equal(t, uint64(0), s.Garbage)\n\n\tfor i := 0; i < 100; i++ {\n\t\tikey := fmt.Sprintf(\"key-%d\", i)\n\t\tihkey := xxhash.Sum64String(ikey)\n\t\terr := tb.Delete(ihkey)\n\t\trequire.NoError(t, err)\n\t}\n\n\ts = tb.Stats()\n\trequire.Equal(t, uint64(1<<20), s.Allocated)\n\trequire.Equal(t, 0, s.Length)\n\trequire.Equal(t, uint64(0), s.Inuse)\n\trequire.Equal(t, uint64(4280), s.Garbage)\n}\n\nfunc TestTable_Reset(t *testing.T) {\n\ttb := New(1 << 20)\n\tfor i := 0; i < 100; i++ {\n\t\te := entry.New()\n\t\tikey := fmt.Sprintf(\"key-%d\", i)\n\t\tidata := []byte(fmt.Sprintf(\"value-%d\", i))\n\t\tihkey := xxhash.Sum64String(ikey)\n\t\te.SetKey(ikey)\n\t\te.SetValue(idata)\n\t\terr := tb.Put(ihkey, e)\n\t\trequire.NoError(t, err)\n\t}\n\n\ttb.Reset()\n\n\tstats := tb.Stats()\n\trequire.Equal(t, RecycledState, tb.State())\n\trequire.Equal(t, uint64(0), stats.Garbage)\n\trequire.Equal(t, uint64(0), stats.Inuse)\n\trequire.Equal(t, tb.allocated, stats.Allocated)\n\trequire.Equal(t, 0, stats.Length)\n}\n\nfunc TestTable_Scan(t *testing.T) {\n\n\ttb := New(1 << 20)\n\tfor i := 0; i < 100; i++ {\n\t\te := entry.New()\n\t\tkey := fmt.Sprintf(\"key-%d\", i)\n\t\tdata := []byte(fmt.Sprintf(\"value-%d\", i))\n\t\thkey := xxhash.Sum64String(key)\n\t\te.SetKey(key)\n\t\te.SetValue(data)\n\n\t\terr := tb.Put(hkey, e)\n\t\trequire.NoError(t, err)\n\t}\n\n\tvar err error\n\tvar cursor uint64\n\tfor {\n\t\tcursor, err = tb.Scan(cursor, 10, func(e storage.Entry) bool {\n\t\t\treturn true\n\t\t})\n\t\trequire.NoError(t, err)\n\t\tif cursor == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestTable_ScanRegexMatch(t *testing.T) {\n\ttb := New(1 << 20)\n\tfor i := 0; i < 100; i++ {\n\t\tif i%2 == 0 {\n\t\t\tkey = \"even:\" + strconv.Itoa(i)\n\t\t} else {\n\t\t\tkey = \"odd:\" + strconv.Itoa(i)\n\t\t}\n\t\te := entry.New()\n\t\tdata := []byte(fmt.Sprintf(\"value-%d\", i))\n\t\thkey := xxhash.Sum64String(key)\n\t\te.SetKey(key)\n\t\te.SetValue(data)\n\n\t\terr := tb.Put(hkey, e)\n\t\trequire.NoError(t, err)\n\t}\n\n\tvar err error\n\tvar num int\n\tvar count int\n\tvar cursor uint64\n\tfor {\n\t\tnum++\n\t\tcursor, err = tb.ScanRegexMatch(cursor, \"even:\", 10, func(e storage.Entry) bool {\n\t\t\tcount++\n\t\t\treturn true\n\t\t})\n\t\trequire.NoError(t, err)\n\t\tif cursor == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\trequire.Equal(t, 6, num)\n\trequire.Equal(t, 50, count)\n}\n\nfunc TestTable_ScanRegexMatch_SingleMatch(t *testing.T) {\n\ttb := New(1 << 20)\n\tfor i := 0; i < 100; i++ {\n\t\te := entry.New()\n\t\tkey := fmt.Sprintf(\"key-%d\", i)\n\t\tdata := []byte(fmt.Sprintf(\"value-%d\", i))\n\t\thkey := xxhash.Sum64String(key)\n\t\te.SetKey(key)\n\t\te.SetValue(data)\n\n\t\terr := tb.Put(hkey, e)\n\t\trequire.NoError(t, err)\n\t}\n\n\te := entry.New()\n\te.SetKey(\"even:200\")\n\te.SetTTL(123123)\n\te.SetValue([]byte(\"my-value\"))\n\te.SetTimestamp(time.Now().UnixNano())\n\thkey := xxhash.Sum64([]byte(e.Key()))\n\terr := tb.Put(hkey, e)\n\trequire.NoError(t, err)\n\n\tvar num int\n\tvar count int\n\tvar cursor uint64\n\tfor {\n\t\tnum++\n\t\tcursor, err = tb.ScanRegexMatch(cursor, \"even:\", 10, func(e storage.Entry) bool {\n\t\t\tcount++\n\t\t\trequire.Equal(t, \"even:200\", e.Key())\n\t\t\trequire.Equal(t, \"my-value\", string(e.Value()))\n\t\t\treturn true\n\t\t})\n\t\trequire.NoError(t, err)\n\t\tif cursor == 0 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\trequire.Equal(t, 1, num)\n\trequire.Equal(t, 1, count)\n}\n"
