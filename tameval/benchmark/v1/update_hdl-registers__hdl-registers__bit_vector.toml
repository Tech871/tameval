[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/field/bit_vector.py -m pytest -q --junit-xml=test_output.xml hdl_registers/field/test/test_bit_vector.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.field.bit_vector --unit-test hdl_registers.field.test.test_bit_vector --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/field/bit_vector.py --unit-test hdl_registers/field/test/test_bit_vector.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 33.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 11, 12, 15, 20, 59, 60, 70, 91, 92, 98, 99, 127, 141, 153, 154, 157,]
missed_lines = [ 42, 43, 44, 46, 52, 53, 55, 57, 68, 75, 76, 79, 81, 82, 84, 85, 96, 103, 104, 108, 110, 111, 115, 117, 118, 119, 123, 125, 136, 137, 150, 151, 155, 158,]

[input_info]
test_file_path = "hdl_registers/field/test/test_bit_vector.py"
focal_file_path = "hdl_registers/field/bit_vector.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/field/test/test_bit_vector.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/field/bit_vector.py"
first_commit_date = "2023-07-13"
last_commit_date = "2025-02-11"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\n# Third party libraries\nimport pytest\n\n# First party libraries\nfrom hdl_registers.field.bit_vector import BitVector\nfrom hdl_registers.field.register_field_type import (\n    Signed,\n    SignedFixedPoint,\n    Unsigned,\n    UnsignedFixedPoint,\n)\n\n\ndef test_get_value():\n    bit = BitVector(name=\"\", base_index=2, description=\"\", width=4, default_value=\"0000\")\n\n    register_value = int(\"111000011\", base=2)\n    assert bit.get_value(register_value) == 0\n\n    register_value = int(\"000111100\", base=2)\n    assert bit.get_value(register_value) == 15\n\n    register_value = int(\"101010101\", base=2)\n    assert bit.get_value(register_value) == 5\n\n    # Test field_type\n    field = BitVector(\n        name=\"\",\n        base_index=2,\n        description=\"\",\n        width=16,\n        default_value=\"0\" * 16,\n        field_type=SignedFixedPoint.from_bit_widths(integer_bit_width=8, fraction_bit_width=8),\n    )\n    register_value = 0b11111111_00000011_11111111_11111100\n    assert field.get_value(register_value) == -0.00390625\n\n\ndef test_max_binary_value():\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=2, default_value=format(0, \"02b\")\n    )\n    assert bit_vector.max_binary_value == 0b11\n\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=32, default_value=format(0, \"032b\")\n    )\n    assert bit_vector.max_binary_value == 0b11111111_11111111_11111111_11111111\n\n    # Test with base_index > 0\n    bit_vector = BitVector(\n        name=\"\", base_index=4, description=\"\", width=4, default_value=format(0, \"04b\")\n    )\n    assert bit_vector.max_binary_value == 0b1111\n\n\ndef test_set_value():\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=2, default_value=format(0, \"02b\")\n    )\n    assert bit_vector.set_value(0b10) == 0b10\n    assert bit_vector.set_value(0b11) == 0b11\n\n    with pytest.raises(ValueError):\n        bit_vector.set_value(0b111)\n\n    bit_vector = BitVector(\n        name=\"\", base_index=2, description=\"\", width=2, default_value=format(0, \"02b\")\n    )\n    assert bit_vector.set_value(0b10) == 0b1000\n\n    bit_vector = BitVector(\n        name=\"\", base_index=3, description=\"\", width=4, default_value=format(0, \"04b\")\n    )\n    assert bit_vector.set_value(0b1111) == 0b1111000\n\n    bit_vector0 = BitVector(name=\"\", base_index=0, description=\"\", width=2, default_value=\"00\")\n    bit_vector1 = BitVector(name=\"\", base_index=2, description=\"\", width=4, default_value=\"0000\")\n    bit_vector2 = BitVector(name=\"\", base_index=6, description=\"\", width=3, default_value=\"000\")\n\n    register_value = int(\"111000011\", base=2)\n    value0 = bit_vector0.set_value(bit_vector0.get_value(register_value))\n    value1 = bit_vector1.set_value(bit_vector1.get_value(register_value))\n    value2 = bit_vector2.set_value(bit_vector2.get_value(register_value))\n    assert value0 | value1 | value2 == register_value\n\n    register_value = int(\"000111100\", base=2)\n    value0 = bit_vector0.set_value(bit_vector0.get_value(register_value))\n    value1 = bit_vector1.set_value(bit_vector1.get_value(register_value))\n    value2 = bit_vector2.set_value(bit_vector2.get_value(register_value))\n    assert value0 | value1 | value2 == register_value\n\n    register_value = int(\"101010101\", base=2)\n    value0 = bit_vector0.set_value(bit_vector0.get_value(register_value))\n    value1 = bit_vector1.set_value(bit_vector1.get_value(register_value))\n    value2 = bit_vector2.set_value(bit_vector2.get_value(register_value))\n    assert value0 | value1 | value2 == register_value\n\n    # Test field_type\n    field = BitVector(\n        name=\"\",\n        base_index=2,\n        description=\"\",\n        width=16,\n        default_value=\"0\" * 16,\n        field_type=SignedFixedPoint.from_bit_widths(integer_bit_width=8, fraction_bit_width=8),\n    )\n    assert field.set_value(-0.00390625) == 0b11_11111111_11111100\n\n\ndef test_min_and_max_value():\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=4, default_value=\"0000\", field_type=Unsigned()\n    )\n    assert bit_vector.min_value == 0\n    assert bit_vector.max_value == 15\n\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=4, default_value=\"0000\", field_type=Signed()\n    )\n    assert bit_vector.min_value == -8\n    assert bit_vector.max_value == 7\n\n    bit_vector = BitVector(\n        name=\"\",\n        base_index=0,\n        description=\"\",\n        width=4,\n        default_value=\"0000\",\n        field_type=UnsignedFixedPoint(1, -2),\n    )\n    assert bit_vector.min_value == 0\n    assert bit_vector.max_value == 3.75\n\n    bit_vector = BitVector(\n        name=\"\",\n        base_index=0,\n        description=\"\",\n        width=4,\n        default_value=\"0000\",\n        field_type=SignedFixedPoint(1, -2),\n    )\n    assert bit_vector.min_value == -2\n    assert bit_vector.max_value == 1.75\n\n\ndef test_repr():\n    # Check that repr is an actual representation, not just \"X object at 0xABCDEF\"\n    assert \"apa\" in repr(\n        BitVector(name=\"apa\", base_index=0, description=\"\", width=1, default_value=\"0\")\n    )\n\n    # Different name\n    assert repr(\n        BitVector(name=\"apa\", base_index=0, description=\"\", width=1, default_value=\"0\")\n    ) != repr(BitVector(name=\"hest\", base_index=0, description=\"\", width=1, default_value=\"0\"))\n\n    # Different base_index\n    assert repr(\n        BitVector(name=\"apa\", base_index=0, description=\"\", width=1, default_value=\"0\")\n    ) != repr(BitVector(name=\"apa\", base_index=1, description=\"\", width=1, default_value=\"0\"))\n\n    # Different description\n    assert repr(\n        BitVector(name=\"apa\", base_index=0, description=\"Blah\", width=1, default_value=\"0\")\n    ) != repr(BitVector(name=\"apa\", base_index=0, description=\"Gaah\", width=1, default_value=\"0\"))\n\n    # Different width\n    assert repr(\n        BitVector(name=\"apa\", base_index=0, description=\"\", width=1, default_value=\"1\")\n    ) != repr(BitVector(name=\"apa\", base_index=0, description=\"\", width=2, default_value=\"11\"))\n\n    # Different default_value\n    assert repr(\n        BitVector(name=\"apa\", base_index=0, description=\"\", width=1, default_value=\"1\")\n    ) != repr(BitVector(name=\"apa\", base_index=0, description=\"\", width=1, default_value=\"0\"))\n\n    # Different field_type\n    field0 = BitVector(\n        name=\"apa\",\n        base_index=0,\n        description=\"\",\n        width=10,\n        default_value=\"0\" * 10,\n        field_type=UnsignedFixedPoint(max_bit_index=7, min_bit_index=-2),\n    )\n    field1 = BitVector(\n        name=\"apa\",\n        base_index=0,\n        description=\"\",\n        width=10,\n        default_value=\"0\" * 10,\n        field_type=UnsignedFixedPoint(max_bit_index=7, min_bit_index=-2),\n    )\n    field2 = BitVector(\n        name=\"apa\",\n        base_index=0,\n        description=\"\",\n        width=10,\n        default_value=\"0\" * 10,\n        field_type=UnsignedFixedPoint(max_bit_index=8, min_bit_index=-1),\n    )\n    assert repr(field0) == repr(field1) != repr(field2)\n\n\ndef test_invalid_width():\n    with pytest.raises(ValueError) as exception_info:\n        BitVector(name=\"foo\", base_index=0, width=\"4\", description=\"\", default_value=\"0000\")\n    assert (\n        str(exception_info.value)\n        == 'Bit vector \"foo\" should have integer value for \"width\". Got: \"4\".'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        BitVector(name=\"foo\", base_index=0, width=33, description=\"\", default_value=\"0\")\n    assert str(exception_info.value) == 'Invalid width for bit vector \"foo\". Got: \"33\".'\n\n    with pytest.raises(ValueError) as exception_info:\n        BitVector(name=\"foo\", base_index=0, width=0, description=\"\", default_value=\"0\")\n    assert str(exception_info.value) == 'Invalid width for bit vector \"foo\". Got: \"0\".'\n\n\ndef test_invalid_default_value_should_raise_exception():\n    with pytest.raises(ValueError) as exception_info:\n        BitVector(name=\"hest\", base_index=0, description=\"\", width=4, default_value=1111)\n    assert str(exception_info.value) == (\n        'Bit vector \"hest\" should have string value for \"default_value\". Got: \"1111\"'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        BitVector(name=\"hest\", base_index=0, description=\"\", width=4, default_value=\"11\")\n    assert str(exception_info.value) == (\n        'Bit vector \"hest\" should have \"default_value\" of length 4. Got: \"11\".'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        BitVector(name=\"hest\", base_index=0, description=\"\", width=4, default_value=\"1121\")\n    assert str(exception_info.value) == (\n        'Bit vector \"hest\" invalid binary value for \"default_value\". Got: \"1121\".'\n    )\n\n\ndef test_can_update_default_value():\n    bit_vector = BitVector(name=\"hest\", base_index=0, description=\"\", width=4, default_value=\"1111\")\n    assert bit_vector.default_value == \"1111\"\n\n    bit_vector.default_value = \"0000\"\n    assert bit_vector.default_value == \"0000\"\n\n\ndef test_updating_to_invalid_default_value_should_raise_exception():\n    # Create with a valid default_value\n    bit_vector = BitVector(name=\"hest\", base_index=0, description=\"\", width=4, default_value=\"1111\")\n\n    # Update to an invalid value\n    with pytest.raises(ValueError) as exception_info:\n        bit_vector.default_value = 1111\n    assert str(exception_info.value) == (\n        'Bit vector \"hest\" should have string value for \"default_value\". Got: \"1111\"'\n    )\n\n\ndef test_default_value_uint():\n    bit_vector = BitVector(name=\"apa\", base_index=0, description=\"\", width=4, default_value=\"0000\")\n    assert bit_vector.default_value_uint == 0\n\n    bit_vector.default_value = \"0010\"\n    assert bit_vector.default_value_uint == 2\n\n    bit_vector.default_value = \"1001\"\n    assert bit_vector.default_value_uint == 9\n\n\ndef test_field_type():\n    bit_vector = BitVector(name=\"\", base_index=0, description=\"\", width=4, default_value=\"1111\")\n    assert isinstance(bit_vector.field_type, Unsigned)\n\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=4, default_value=\"1111\", field_type=Unsigned()\n    )\n    assert isinstance(bit_vector.field_type, Unsigned)\n\n    bit_vector = BitVector(\n        name=\"\", base_index=0, description=\"\", width=4, default_value=\"1111\", field_type=Signed()\n    )\n    assert isinstance(bit_vector.field_type, Signed)\n\n    bit_vector = BitVector(\n        name=\"\",\n        base_index=0,\n        description=\"\",\n        width=10,\n        default_value=\"1\" * 10,\n        field_type=SignedFixedPoint(max_bit_index=7, min_bit_index=-2),\n    )\n    assert isinstance(bit_vector.field_type, SignedFixedPoint)\n    assert bit_vector.field_type.max_bit_index == 7\n    assert bit_vector.field_type.min_bit_index == -2\n\n    bit_vector = BitVector(\n        name=\"\",\n        base_index=0,\n        description=\"\",\n        width=10,\n        default_value=\"1\" * 10,\n        field_type=UnsignedFixedPoint(max_bit_index=7, min_bit_index=-2),\n    )\n    assert isinstance(bit_vector.field_type, UnsignedFixedPoint)\n    assert bit_vector.field_type.max_bit_index == 7\n    assert bit_vector.field_type.min_bit_index == -2\n\n\ndef test_invalid_field_type_width_should_raise_exception():\n    def test(field_type):\n        with pytest.raises(ValueError) as exception_info:\n            BitVector(\n                name=\"apa\",\n                base_index=0,\n                description=\"\",\n                width=4,\n                default_value=\"1111\",\n                field_type=field_type,\n            )\n\n        type_width = field_type.integer_bit_width + field_type.fraction_bit_width\n        expected = (\n            f'Inconsistent width for bit vector \"apa\". Field is \"4\" bits, type is \"{type_width}\".'\n        )\n        assert str(exception_info.value) == expected\n\n    test(SignedFixedPoint(max_bit_index=7, min_bit_index=0))\n    test(UnsignedFixedPoint(max_bit_index=9, min_bit_index=-3))\n\n    test(SignedFixedPoint(max_bit_index=5, min_bit_index=0))\n    test(UnsignedFixedPoint(max_bit_index=3, min_bit_index=-3))"
