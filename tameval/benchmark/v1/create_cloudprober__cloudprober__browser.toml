[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.6"

[repo_info]
repository = "cloudprober/cloudprober"
sha = "01736e0103a53b703064edec034c30ef5e25681d"

[run_info]
docker_image = "golang:1.23.6"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out probes/browser/browser.go probes/browser/browser_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting probes/browser/browser.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 50.0
original_coverage = 50.0
mutation_kill_rate = 45.0
original_mutation_kill_rate = 45.0
covered_lines = [ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 139, 143, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 179, 180, 181, 182, 186, 187, 188, 192, 193, 198, 202, 203, 207, 208, 209, 217, 218, 219, 220, 221, 222, 227, 228, 229, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 250, 257, 261, 262, 271, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 346, 347, 348, 349, 350, 351, 355,]
missed_lines = [ 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 136, 137, 138, 140, 141, 142, 176, 177, 178, 183, 184, 185, 194, 195, 196, 199, 200, 201, 204, 205, 206, 210, 211, 212, 213, 214, 215, 223, 224, 225, 230, 231, 232, 247, 248, 249, 253, 254, 255, 258, 259, 260, 263, 264, 265, 266, 267, 268, 318, 319, 320, 321, 322, 343, 344, 345, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 378, 379, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441,]

[input_info]
test_file_path = "probes/browser/browser_test.go"
focal_file_path = "probes/browser/browser.go"
test_file_url = "https://github.com/cloudprober/cloudprober/blob/01736e0103a53b703064edec034c30ef5e25681d/probes/browser/browser_test.go"
focal_file_url = "https://github.com/cloudprober/cloudprober/blob/01736e0103a53b703064edec034c30ef5e25681d/probes/browser/browser.go"
first_commit_date = "2024-12-10"
last_commit_date = "2025-03-20"
test_file_content = "// Copyright 2024 The Cloudprober Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage browser\n\nimport (\n\t\"net\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/cloudprober/cloudprober/metrics\"\n\tconfigpb \"github.com/cloudprober/cloudprober/probes/browser/proto\"\n\t\"github.com/cloudprober/cloudprober/probes/options\"\n\t\"github.com/cloudprober/cloudprober/state\"\n\t\"github.com/cloudprober/cloudprober/targets/endpoint\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nfunc TestProbePrepareCommand(t *testing.T) {\n\tos.Setenv(\"PLAYWRIGHT_DIR\", \"/playwright\")\n\tdefer os.Unsetenv(\"PLAYWRIGHT_DIR\")\n\n\tbaseEnvVars := func(pwDir string) []string {\n\t\treturn []string{\"NODE_PATH=\" + pwDir + \"/node_modules\", \"PLAYWRIGHT_HTML_REPORT={OUTPUT_DIR}/report\", \"PLAYWRIGHT_HTML_OPEN=never\"}\n\t}\n\n\tcmdLine := func(npxPath string) []string {\n\t\treturn []string{npxPath, \"playwright\", \"test\", \"--config={WORKDIR}/playwright.config.ts\", \"--output=${OUTPUT_DIR}/results\", \"--reporter=html,{WORKDIR}/cloudprober-reporter.ts\"}\n\t}\n\n\tbaseWantEMLabels := [][2]string{{\"ptype\", \"browser\"}, {\"probe\", \"test_browser\"}, {\"dst\", \"\"}}\n\n\ttests := []struct {\n\t\tname               string\n\t\tdisableAggregation bool\n\t\tnpxPath            string\n\t\tplaywrightDir      string\n\t\ttestSpec           []string\n\t\ttarget             endpoint.Endpoint\n\t\twantCmdLine        []string\n\t\twantEnvVars        []string\n\t\twantWorkDir        string\n\t\twantEMLabels       [][2]string\n\t}{\n\t\t{\n\t\t\tname:         \"default\",\n\t\t\twantCmdLine:  cmdLine(\"npx\"),\n\t\t\twantEnvVars:  baseEnvVars(\"/playwright\"),\n\t\t\twantWorkDir:  \"/playwright\",\n\t\t\twantEMLabels: baseWantEMLabels,\n\t\t},\n\t\t{\n\t\t\tname:         \"with_target\",\n\t\t\ttarget:       endpoint.Endpoint{Name: \"test_target\", IP: net.ParseIP(\"12.12.12.12\"), Port: 9313, Labels: map[string]string{\"env\": \"prod\"}},\n\t\t\twantCmdLine:  cmdLine(\"npx\"),\n\t\t\twantEnvVars:  append(baseEnvVars(\"/playwright\"), \"target_name=test_target\", \"target_ip=12.12.12.12\", \"target_port=9313\", \"target_label_env=prod\"),\n\t\t\twantWorkDir:  \"/playwright\",\n\t\t\twantEMLabels: [][2]string{{\"ptype\", \"browser\"}, {\"probe\", \"test_browser\"}, {\"dst\", \"test_target:9313\"}},\n\t\t},\n\t\t{\n\t\t\tname:               \"disable_aggregation\",\n\t\t\tdisableAggregation: true,\n\t\t\twantCmdLine:        cmdLine(\"npx\"),\n\t\t\twantEnvVars:        baseEnvVars(\"/playwright\"),\n\t\t\twantWorkDir:        \"/playwright\",\n\t\t\twantEMLabels:       append(baseWantEMLabels, [2]string{\"run_id\", \"0\"}),\n\t\t},\n\t\t{\n\t\t\tname:          \"with_playwright_dir\",\n\t\t\tplaywrightDir: \"/app\",\n\t\t\twantCmdLine:   cmdLine(\"npx\"),\n\t\t\twantEnvVars:   baseEnvVars(\"/app\"),\n\t\t\twantWorkDir:   \"/app\",\n\t\t\twantEMLabels:  baseWantEMLabels,\n\t\t},\n\t\t{\n\t\t\tname:         \"with_npx_path\",\n\t\t\tnpxPath:      \"/usr/bin/npx\",\n\t\t\twantCmdLine:  cmdLine(\"/usr/bin/npx\"),\n\t\t\twantEnvVars:  baseEnvVars(\"/playwright\"),\n\t\t\twantWorkDir:  \"/playwright\",\n\t\t\twantEMLabels: baseWantEMLabels,\n\t\t},\n\t\t{\n\t\t\tname:         \"with_test_spec\",\n\t\t\ttestSpec:     []string{\"test_spec_1\", \"test_spec_2\"},\n\t\t\twantCmdLine:  append(cmdLine(\"npx\"), \"test_spec_1\", \"test_spec_2\"),\n\t\t\twantEnvVars:  baseEnvVars(\"/playwright\"),\n\t\t\twantWorkDir:  \"/playwright\",\n\t\t\twantEMLabels: baseWantEMLabels,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tconf := &configpb.ProbeConf{\n\t\t\t\tTestSpec: tt.testSpec,\n\t\t\t\tTestMetricsOptions: &configpb.TestMetricsOptions{\n\t\t\t\t\tDisableAggregation: &tt.disableAggregation,\n\t\t\t\t},\n\t\t\t}\n\t\t\tif tt.playwrightDir != \"\" {\n\t\t\t\tconf.PlaywrightDir = &tt.playwrightDir\n\t\t\t}\n\t\t\tif tt.npxPath != \"\" {\n\t\t\t\tconf.NpxPath = proto.String(filepath.FromSlash(tt.npxPath))\n\t\t\t}\n\n\t\t\topts := options.DefaultOptions()\n\t\t\topts.ProbeConf = conf\n\t\t\tp := &Probe{}\n\t\t\tif err := p.Init(\"test_browser\", opts); err != nil {\n\t\t\t\tt.Fatalf(\"Error in probe initialization: %v\", err)\n\t\t\t}\n\n\t\t\tts := time.Now()\n\t\t\tcmd, _ := p.prepareCommand(tt.target, ts)\n\n\t\t\toutputDir := p.outputDirPath(tt.target, ts)\n\t\t\tfor i, arg := range tt.wantCmdLine {\n\t\t\t\ttt.wantCmdLine[i] = strings.ReplaceAll(arg, \"{WORKDIR}\", p.workdir)\n\t\t\t\ttt.wantCmdLine[i] = filepath.FromSlash(strings.ReplaceAll(tt.wantCmdLine[i], \"${OUTPUT_DIR}\", outputDir))\n\t\t\t}\n\t\t\tfor i, envVar := range tt.wantEnvVars {\n\t\t\t\ttt.wantEnvVars[i] = filepath.FromSlash(strings.ReplaceAll(envVar, \"{OUTPUT_DIR}\", outputDir))\n\t\t\t}\n\n\t\t\tassert.Equal(t, tt.wantCmdLine, cmd.CmdLine)\n\t\t\tassert.Equal(t, tt.wantEnvVars, cmd.EnvVars)\n\t\t\tassert.Equal(t, tt.wantWorkDir, cmd.WorkDir)\n\n\t\t\tp.dataChan = make(chan *metrics.EventMetrics, 10)\n\t\t\tcmd.ProcessStreamingOutput([]byte(\"test_1_succeeded 1\\n\"))\n\t\t\tem := <-p.dataChan\n\t\t\tassert.Len(t, em.LabelsKeys(), len(tt.wantEMLabels))\n\t\t\tfor _, label := range tt.wantEMLabels {\n\t\t\t\tassert.Equal(t, label[1], em.Label(label[0]), \"label %s\", label[0])\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestProbeOutputDirPath(t *testing.T) {\n\ttests := []struct {\n\t\tname      string\n\t\toutputDir string\n\t\ttarget    endpoint.Endpoint\n\t\tts        time.Time\n\t\twant      string\n\t}{\n\t\t{\n\t\t\tname:      \"default\",\n\t\t\toutputDir: \"/tmp/output\",\n\t\t\tts:        time.Date(2024, time.January, 1, 0, 0, 0, 0, time.UTC),\n\t\t\twant:      \"/tmp/output/2024-01-01/1704067200000\",\n\t\t},\n\t\t{\n\t\t\tname:      \"with_target\",\n\t\t\toutputDir: \"/tmp/output\",\n\t\t\ttarget:    endpoint.Endpoint{Name: \"test_target\"},\n\t\t\tts:        time.Date(2024, time.February, 2, 12, 30, 45, 0, time.UTC),\n\t\t\twant:      \"/tmp/output/2024-02-02/1706877045000/test_target\",\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tp := &Probe{outputDir: tt.outputDir}\n\t\t\tassert.Equal(t, filepath.FromSlash(tt.want), p.outputDirPath(tt.target, tt.ts))\n\t\t})\n\t}\n}\n\nfunc TestProbeInitTemplates(t *testing.T) {\n\tif runtime.GOOS == \"windows\" {\n\t\tt.Skip(\"Skipping test on Windows, path issues - not worth it\")\n\t}\n\n\ttmpDir := t.TempDir()\n\n\toldConfigFilePath := state.ConfigFilePath()\n\tdefer state.SetConfigFilePath(oldConfigFilePath)\n\tstate.SetConfigFilePath(\"/cfg/cloudprober.cfg\")\n\n\tdefaultConfigContains := []string{\n\t\t\"testDir: \\\"/cfg\\\"\",\n\t\t\"screenshot: \\\"only-on-failure\\\"\",\n\t\t\"trace: \\\"off\\\"\",\n\t}\n\treporterContainTestLevel := []string{\n\t\t\"print(`test_status\",\n\t\t\"print(`test_latency\",\n\t}\n\treporterContainStepLevel := []string{\n\t\t\"print(`test_step_status\",\n\t\t\"print(`test_step_latency\",\n\t}\n\n\ttests := []struct {\n\t\tname                string\n\t\tconf                *configpb.ProbeConf\n\t\tconfigContains      []string\n\t\treporterContains    []string\n\t\treporterNotContains []string\n\t}{\n\t\t{\n\t\t\tname: \"default\",\n\t\t\tconf: &configpb.ProbeConf{\n\t\t\t\tWorkdir: proto.String(tmpDir),\n\t\t\t},\n\t\t\tconfigContains:      defaultConfigContains,\n\t\t\treporterContains:    reporterContainTestLevel,\n\t\t\treporterNotContains: reporterContainStepLevel,\n\t\t},\n\t\t{\n\t\t\tname: \"with_config_dir\",\n\t\t\tconf: &configpb.ProbeConf{\n\t\t\t\tTestDir: proto.String(\"/cfg/tests\"),\n\t\t\t\tWorkdir: proto.String(tmpDir),\n\t\t\t},\n\t\t\tconfigContains: []string{\n\t\t\t\t\"testDir: \\\"/cfg/tests\\\"\",\n\t\t\t\t\"screenshot: \\\"only-on-failure\\\"\",\n\t\t\t\t\"trace: \\\"off\\\"\",\n\t\t\t},\n\t\t\treporterContains:    reporterContainTestLevel,\n\t\t\treporterNotContains: reporterContainStepLevel,\n\t\t},\n\t\t{\n\t\t\tname: \"with_screenshots_and_traces\",\n\t\t\tconf: &configpb.ProbeConf{\n\t\t\t\tWorkdir:                   proto.String(tmpDir),\n\t\t\t\tSaveScreenshotsForSuccess: proto.Bool(true),\n\t\t\t\tSaveTraces:                proto.Bool(true),\n\t\t\t},\n\t\t\tconfigContains: []string{\n\t\t\t\t\"screenshot: \\\"on\\\"\",\n\t\t\t\t\"trace: \\\"on\\\"\",\n\t\t\t},\n\t\t\treporterContains:    reporterContainTestLevel,\n\t\t\treporterNotContains: reporterContainStepLevel,\n\t\t},\n\t\t{\n\t\t\tname: \"with_step_metrics\",\n\t\t\tconf: &configpb.ProbeConf{\n\t\t\t\tWorkdir: proto.String(tmpDir),\n\t\t\t\tTestMetricsOptions: &configpb.TestMetricsOptions{\n\t\t\t\t\tEnableStepMetrics: proto.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tconfigContains:   defaultConfigContains,\n\t\t\treporterContains: append(reporterContainTestLevel, reporterContainStepLevel...),\n\t\t},\n\t\t{\n\t\t\tname: \"disable_test_metrics\",\n\t\t\tconf: &configpb.ProbeConf{\n\t\t\t\tWorkdir: proto.String(tmpDir),\n\t\t\t\tTestMetricsOptions: &configpb.TestMetricsOptions{\n\t\t\t\t\tDisableTestMetrics: proto.Bool(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\tconfigContains:      defaultConfigContains,\n\t\t\treporterNotContains: append(reporterContainTestLevel, reporterContainStepLevel...),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tp := &Probe{\n\t\t\t\tname:    \"test_probe\",\n\t\t\t\tc:       tt.conf,\n\t\t\t\topts:    options.DefaultOptions(),\n\t\t\t\tworkdir: tmpDir,\n\t\t\t}\n\n\t\t\terr := p.initTemplates()\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"initTemplates() error = %v\", err)\n\t\t\t}\n\n\t\t\t// Verify playwright config file\n\t\t\tgot, err := os.ReadFile(p.playwrightConfigPath)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"Error reading playwright config: %v\", err)\n\t\t\t}\n\t\t\tfor _, want := range tt.configContains {\n\t\t\t\tassert.Contains(t, string(got), want, \"playwright config should contain: %s\", want)\n\t\t\t}\n\n\t\t\t// Verify reporter file\n\t\t\tgot, err = os.ReadFile(p.reporterPath)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"Error reading playwright config: %v\", err)\n\t\t\t}\n\t\t\tfor _, want := range tt.reporterContains {\n\t\t\t\tassert.Contains(t, string(got), want, \"reporter file should contain: %s\", want)\n\t\t\t}\n\t\t\tfor _, want := range tt.reporterNotContains {\n\t\t\t\tassert.NotContains(t, string(got), want, \"reporter file should not contain: %s\", want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestPlaywrightGlobalTimeoutMsec(t *testing.T) {\n\ttests := []struct {\n\t\tname                 string\n\t\ttimeout              time.Duration\n\t\trequestsPerProbe     int\n\t\trequestsIntervalMsec int\n\t\twant                 int64\n\t}{\n\t\t{\n\t\t\tname:    \"single_request\",\n\t\t\ttimeout: 10 * time.Second,\n\t\t\twant:    9000,\n\t\t},\n\t\t{\n\t\t\tname:                 \"multiple_requests\",\n\t\t\ttimeout:              20 * time.Second,\n\t\t\trequestsPerProbe:     3,\n\t\t\trequestsIntervalMsec: 1000,\n\t\t\twant:                 16200, // (20s - (3-1)*1s) - 0.9s (buffer)\n\t\t},\n\t\t{\n\t\t\tname:    \"large_buffer\",\n\t\t\ttimeout: 120 * time.Second,\n\t\t\twant:    118000,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tp := &Probe{\n\t\t\t\topts: &options.Options{\n\t\t\t\t\tTimeout: tt.timeout,\n\t\t\t\t},\n\t\t\t\tc: &configpb.ProbeConf{\n\t\t\t\t\tRequestsPerProbe:     proto.Int32(int32(tt.requestsPerProbe)),\n\t\t\t\t\tRequestsIntervalMsec: proto.Int32(int32(tt.requestsIntervalMsec)),\n\t\t\t\t},\n\t\t\t}\n\t\t\tif got := p.playwrightGlobalTimeoutMsec(); got != tt.want {\n\t\t\t\tt.Errorf(\"playwrightGlobalTimeoutMsec() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"
