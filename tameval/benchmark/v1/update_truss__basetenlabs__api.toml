[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "basetenlabs/truss"
sha = "9d37d8696d3229f91970f999827fcda0a5aed410"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=truss/remote/baseten/api.py -m pytest -q --junit-xml=test_output.xml truss/tests/remote/baseten/test_api.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target truss.remote.baseten.api --unit-test truss.tests.remote.baseten.test_api --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target truss/remote/baseten/api.py --unit-test truss/tests/remote/baseten/test_api.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 45.0
original_coverage = 57.0
mutation_kill_rate = nan
original_mutation_kill_rate = 29.0
covered_lines = [ 0, 1, 2, 4, 6, 7, 8, 9, 10, 12, 15, 25, 28, 48, 59, 60, 62, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 79, 80, 83, 84, 87, 88, 91, 92, 93, 94, 97, 101, 102, 103, 105, 106, 108, 109, 110, 111, 113, 115, 130, 169, 180, 202, 207, 242, 289, 302, 317, 349, 352, 357, 376, 395, 419, 442, 461, 491, 516, 534, 539, 544, 547, 548, 552, 554, 561, 567, 570, 582, 597, 612,]
missed_lines = [ 29, 35, 36, 38, 39, 41, 43, 51, 52, 53, 54, 81, 85, 89, 95, 116, 127, 128, 141, 164, 167, 205, 216, 237, 240, 252, 254, 261, 283, 287, 290, 299, 300, 303, 314, 315, 318, 343, 344, 345, 346, 347, 350, 353, 358, 373, 374, 377, 392, 393, 396, 416, 417, 420, 439, 440, 443, 458, 459, 462, 463, 479, 480, 483, 484, 485, 486, 487, 489, 492, 507, 508, 511, 512, 513, 514, 517, 528, 529, 532, 535, 540, 545, 555, 559, 562, 565, 568, 575, 576, 577, 578, 579, 580, 589, 595, 604, 610, 613, 616,]

[input_info]
test_file_path = "truss/tests/remote/baseten/test_api.py"
focal_file_path = "truss/remote/baseten/api.py"
test_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/tests/remote/baseten/test_api.py"
focal_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/remote/baseten/api.py"
first_commit_date = "2023-07-06"
last_commit_date = "2025-03-20"
test_file_content = "from unittest import mock\n\nimport pytest\nimport requests\nfrom requests import Response\nfrom truss.remote.baseten import custom_types as b10_types\nfrom truss.remote.baseten.api import BasetenApi\nfrom truss.remote.baseten.custom_types import ChainletDataAtomic, OracleData\nfrom truss.remote.baseten.error import ApiError\n\nimport truss_train.definitions as train_definitions\n\n\n@pytest.fixture\ndef mock_auth_service():\n    auth_service = mock.Mock()\n    auth_token = mock.Mock(headers=lambda: {\"Authorization\": \"Api-Key token\"})\n    auth_service.authenticate.return_value = auth_token\n    return auth_service\n\n\ndef mock_successful_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(return_value={\"data\": {\"status\": \"success\"}})\n    return response\n\n\ndef mock_graphql_error_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(return_value={\"errors\": [{\"message\": \"error\"}]})\n    return response\n\n\ndef mock_unsuccessful_response():\n    response = Response()\n    response.status_code = 400\n    return response\n\n\ndef mock_create_model_version_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(\n        return_value={\n            \"data\": {\n                \"create_model_version_from_truss\": {\"model_version\": {\"id\": \"12345\"}}\n            }\n        }\n    )\n    return response\n\n\ndef mock_create_model_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(\n        return_value={\n            \"data\": {\"create_model_from_truss\": {\"model_version\": {\"id\": \"12345\"}}}\n        }\n    )\n    return response\n\n\ndef mock_upsert_training_project_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(\n        return_value={\"training_project\": {\"id\": \"12345\", \"name\": \"training-project\"}}\n    )\n    return response\n\n\ndef mock_create_development_model_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(\n        return_value={\n            \"data\": {\"deploy_draft_truss\": {\"model_version\": {\"id\": \"12345\"}}}\n        }\n    )\n    return response\n\n\ndef mock_deploy_chain_deployment_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(\n        return_value={\n            \"data\": {\n                \"deploy_chain_atomic\": {\n                    \"chain_deployment\": {\"id\": \"54321\", \"chain\": {\"id\": \"12345\"}}\n                }\n            }\n        }\n    )\n    return response\n\n\n@pytest.fixture\ndef baseten_api(mock_auth_service):\n    return BasetenApi(\"https://app.test.com\", mock_auth_service)\n\n\n@mock.patch(\"requests.post\", return_value=mock_successful_response())\ndef test_post_graphql_query_success(mock_post, baseten_api):\n    response_data = {\"data\": {\"status\": \"success\"}}\n\n    result = baseten_api._post_graphql_query(\"sample_query_string\")\n\n    assert result == response_data\n\n\n@mock.patch(\"requests.post\", return_value=mock_graphql_error_response())\ndef test_post_graphql_query_error(mock_post, baseten_api):\n    with pytest.raises(ApiError):\n        baseten_api._post_graphql_query(\"sample_query_string\")\n\n\n@mock.patch(\"requests.post\", return_value=mock_unsuccessful_response())\ndef test_post_requests_error(mock_post, baseten_api):\n    with pytest.raises(requests.exceptions.HTTPError):\n        baseten_api._post_graphql_query(\"sample_query_string\")\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_model_version_response())\ndef test_create_model_version_from_truss(mock_post, baseten_api):\n    baseten_api.create_model_version_from_truss(\n        \"model_id\",\n        \"s3key\",\n        \"config_str\",\n        \"semver_bump\",\n        False,\n        \"deployment_name\",\n        \"production\",\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'model_id: \"model_id\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert 'semver_bump: \"semver_bump\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert \"scale_down_old_production: true\" in gql_mutation\n    assert 'name: \"deployment_name\"' in gql_mutation\n    assert 'environment_name: \"production\"' in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_model_version_response())\ndef test_create_model_version_from_truss_does_not_send_deployment_name_if_not_specified(\n    mock_post, baseten_api\n):\n    baseten_api.create_model_version_from_truss(\n        \"model_id\", \"s3key\", \"config_str\", \"semver_bump\", False, deployment_name=None\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'model_id: \"model_id\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert 'semver_bump: \"semver_bump\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert \"scale_down_old_production: true\" in gql_mutation\n    assert \" name: \" not in gql_mutation\n    assert \"environment_name: \" not in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_model_version_response())\ndef test_create_model_version_from_truss_does_not_scale_old_prod_to_zero_if_keep_previous_prod_settings(\n    mock_post, baseten_api\n):\n    baseten_api.create_model_version_from_truss(\n        \"model_id\",\n        \"s3key\",\n        \"config_str\",\n        \"semver_bump\",\n        True,\n        deployment_name=None,\n        environment=\"staging\",\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'model_id: \"model_id\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert 'semver_bump: \"semver_bump\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert \"scale_down_old_production: false\" in gql_mutation\n    assert \" name: \" not in gql_mutation\n    assert 'environment_name: \"staging\"' in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_model_response())\ndef test_create_model_from_truss(mock_post, baseten_api):\n    baseten_api.create_model_from_truss(\n        \"model_name\",\n        \"s3key\",\n        \"config_str\",\n        \"semver_bump\",\n        deployment_name=\"deployment_name\",\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'name: \"model_name\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert 'semver_bump: \"semver_bump\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert 'version_name: \"deployment_name\"' in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_model_response())\ndef test_create_model_from_truss_does_not_send_deployment_name_if_not_specified(\n    mock_post, baseten_api\n):\n    baseten_api.create_model_from_truss(\n        \"model_name\", \"s3key\", \"config_str\", \"semver_bump\", deployment_name=None\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'name: \"model_name\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert 'semver_bump: \"semver_bump\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert \"version_name: \" not in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_model_response())\ndef test_create_model_from_truss_with_allow_truss_download(mock_post, baseten_api):\n    baseten_api.create_model_from_truss(\n        \"model_name\", \"s3key\", \"config_str\", \"semver_bump\", allow_truss_download=False\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'name: \"model_name\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert 'semver_bump: \"semver_bump\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert \"allow_truss_download: false\" in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_create_development_model_response())\ndef test_create_development_model_from_truss_with_allow_truss_download(\n    mock_post, baseten_api\n):\n    baseten_api.create_development_model_from_truss(\n        \"model_name\", \"s3key\", \"config_str\", allow_truss_download=False\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n    assert 'name: \"model_name\"' in gql_mutation\n    assert 's3_key: \"s3key\"' in gql_mutation\n    assert 'config: \"config_str\"' in gql_mutation\n    assert {\n        \"trussUserEnv\": b10_types.TrussUserEnv.collect().model_dump_json()\n    } == mock_post.call_args[1][\"json\"][\"variables\"]\n    assert \"allow_truss_download: false\" in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_deploy_chain_deployment_response())\ndef test_deploy_chain_deployment(mock_post, baseten_api):\n    baseten_api.deploy_chain_atomic(\n        environment=\"production\",\n        chain_id=\"chain_id\",\n        dependencies=[],\n        entrypoint=ChainletDataAtomic(\n            name=\"chainlet-1\",\n            oracle=OracleData(\n                model_name=\"model-1\",\n                s3_key=\"s3-key-1\",\n                encoded_config_str=\"encoded-config-str-1\",\n            ),\n        ),\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n\n    assert 'environment: \"production\"' in gql_mutation\n    assert 'chain_id: \"chain_id\"' in gql_mutation\n    assert \"dependencies:\" in gql_mutation\n    assert \"entrypoint:\" in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_deploy_chain_deployment_response())\ndef test_deploy_chain_deployment_no_environment(mock_post, baseten_api):\n    baseten_api.deploy_chain_atomic(\n        chain_id=\"chain_id\",\n        dependencies=[],\n        entrypoint=ChainletDataAtomic(\n            name=\"chainlet-1\",\n            oracle=OracleData(\n                model_name=\"model-1\",\n                s3_key=\"s3-key-1\",\n                encoded_config_str=\"encoded-config-str-1\",\n            ),\n        ),\n    )\n\n    gql_mutation = mock_post.call_args[1][\"json\"][\"query\"]\n\n    assert 'chain_id: \"chain_id\"' in gql_mutation\n    assert \"environment\" not in gql_mutation\n    assert \"dependencies:\" in gql_mutation\n    assert \"entrypoint:\" in gql_mutation\n\n\n@mock.patch(\"requests.post\", return_value=mock_upsert_training_project_response())\ndef test_upsert_training_project(mock_post, baseten_api):\n    baseten_api.upsert_training_project(\n        training_project=train_definitions.TrainingProject(\n            name=\"training-project\",\n            job=train_definitions.TrainingJob(\n                image=train_definitions.Image(base_image=\"base-image\"),\n                runtime_config=train_definitions.Runtime(\n                    start_commands=[\"/bin/bash entrypoint.sh\"]\n                ),\n            ),\n        )\n    )\n\n    upsert_body = mock_post.call_args[1][\"json\"][\"training_project\"]\n    assert \"job\" not in upsert_body\n    assert \"training-project\" == upsert_body[\"name\"]"
