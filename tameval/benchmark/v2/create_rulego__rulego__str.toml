[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.20"

[repo_info]
repository = "rulego/rulego"
sha = "22ba0b1e693a9fafb84858dffec8ff8cf5509925"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out utils/str/str.go utils/str/str_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting utils/str/str.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 91.0
original_coverage = 91.0
mutation_kill_rate = 83.0
original_mutation_kill_rate = 83.0
covered_lines = [ 49, 50, 51, 52, 62, 63, 64, 65, 66, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 95, 99, 102, 103, 104, 106, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 128, 129, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 234, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 254, 255, 258, 259, 262, 265, 269, 270, 271, 272, 273, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301,]
missed_lines = [ 73, 74, 75, 96, 97, 98, 100, 101, 177, 178, 179, 305, 306, 307, 308, 309, 311,]

[input_info]
test_file_path = "utils/str/str_test.go"
focal_file_path = "utils/str/str.go"
test_file_url = "https://github.com/rulego/rulego/blob/22ba0b1e693a9fafb84858dffec8ff8cf5509925/utils/str/str_test.go"
focal_file_url = "https://github.com/rulego/rulego/blob/22ba0b1e693a9fafb84858dffec8ff8cf5509925/utils/str/str.go"
first_commit_date = "2023-07-27"
last_commit_date = "2025-05-30"
test_file_content = "/*\n * Copyright 2023 The RuleGo Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage str\n\nimport (\n\t\"errors\"\n\t\"math\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/rulego/rulego/test/assert\"\n)\n\n// 为了避免循环导入，在测试中直接定义常量\nconst (\n\tVars   = \"vars\"\n\tMsgKey = \"msg\"\n)\n\nfunc TestSprintfDict(t *testing.T) {\n\tdict := map[string]string{\n\t\t\"name\": \"Alice\",\n\t\t\"age\":  \"18\",\n\t\t\"addr\": \"\",\n\t}\n\ts := SprintfDict(\"Hello, ${name}. You are ${age} years old.${addr}\", dict)\n\tassert.Equal(t, \"Hello, Alice. You are 18 years old.\", s)\n}\n\nfunc TestExecuteTemplate(t *testing.T) {\n\tdict := map[string]interface{}{\n\t\t\"name\": \"Alice\",\n\t\t\"age\":  \"18\",\n\t\t\"info\": map[string]interface{}{\n\t\t\t\"job\": map[string]interface{}{\n\t\t\t\t\"title\": \"Engineer\",\n\t\t\t},\n\t\t\t\"location\": map[string]interface{}{\n\t\t\t\t\"city\": \"GZ\",\n\t\t\t\t\"addr\": \"\",\n\t\t\t},\n\t\t},\n\t}\n\n\ts := ExecuteTemplate(\"Hello, ${name}. You are ${age} years old. I am an ${info.job.title} from ${info.location.city} ${info.location.addr}. ${unknown}\", dict)\n\tassert.Equal(t, \"Hello, Alice. You are 18 years old. I am an Engineer from GZ . ${unknown}\", s)\n\n\ts = ExecuteTemplate(\"Hello, Alice.\", dict)\n\tassert.Equal(t, \"Hello, Alice.\", s)\n}\n\ntype Stringer struct {\n\tValue string\n}\n\nfunc (s *Stringer) String() string {\n\treturn s.Value\n}\n\nfunc TestToString(t *testing.T) {\n\t// Test cases\n\ttestCases := []struct {\n\t\twant  string\n\t\tinput interface{}\n\t}{\n\t\t{\"123\", int(123)},\n\t\t{\"123\", uint(123)},\n\t\t{\"123\", int8(123)},\n\t\t{\"123\", uint8(123)},\n\t\t{\"123\", int16(123)},\n\t\t{\"123\", uint16(123)},\n\t\t{\"123\", int32(123)},\n\t\t{\"123\", uint32(123)},\n\t\t{\"123\", int64(123)},\n\t\t{\"123\", uint64(123)},\n\t\t{\"3.14\", float32(3.14)},\n\t\t{\"3.14\", float64(3.14)},\n\t\t{\"true\", true},\n\t\t{\"hello\", &Stringer{\"hello\"}},\n\t\t{\"hello\", []byte(\"hello\")},\n\t\t{\"\", nil},\n\t\t{\"\", \"\"},\n\t\t{\"hello\", \"hello\"},\n\t\t{\"error\", errors.New(\"error\")},\n\t\t{\"{\\\"Username\\\":\\\"lala\\\",\\\"Age\\\":25,\\\"Address\\\":{\\\"Detail\\\":\\\"\\\"}}\", User{Username: \"lala\", Age: 25}},\n\t\t{\"{\\\"name\\\":\\\"lala\\\"}\", map[string]string{\n\t\t\t\"name\": \"lala\",\n\t\t}},\n\t\t{\"{\\\"name\\\":\\\"lala\\\"}\", map[interface{}]interface{}{\n\t\t\t\"name\": \"lala\",\n\t\t}},\n\t}\n\n\tfor _, tc := range testCases {\n\t\ts := ToString(tc.input)\n\t\tassert.Equal(t, tc.want, s)\n\t}\n}\n\nfunc TestToStringMaybeErr(t *testing.T) {\n\t// Test cases\n\ttestCases := []struct {\n\t\twant  string\n\t\tinput interface{}\n\t}{\n\t\t{\"123\", int(123)},\n\t\t{\"123\", uint(123)},\n\t\t{\"123\", int8(123)},\n\t\t{\"123\", uint8(123)},\n\t\t{\"123\", int16(123)},\n\t\t{\"123\", uint16(123)},\n\t\t{\"123\", int32(123)},\n\t\t{\"123\", uint32(123)},\n\t\t{\"123\", int64(123)},\n\t\t{\"123\", uint64(123)},\n\t\t{\"3.14\", float32(3.14)},\n\t\t{\"3.14\", float64(3.14)},\n\t\t{\"true\", true},\n\t\t{\"hello\", &Stringer{\"hello\"}},\n\t\t{\"hello\", []byte(\"hello\")},\n\t\t{\"\", nil},\n\t\t{\"\", \"\"},\n\t\t{\"hello\", \"hello\"},\n\t\t{\"error\", errors.New(\"error\")},\n\t\t{\"{\\\"Username\\\":\\\"lala\\\",\\\"Age\\\":25,\\\"Address\\\":{\\\"Detail\\\":\\\"\\\"}}\", User{Username: \"lala\", Age: 25}},\n\t\t{\"{\\\"name\\\":\\\"lala\\\"}\", map[string]string{\n\t\t\t\"name\": \"lala\",\n\t\t}},\n\t\t{\"json: unsupported value: NaN\", map[string]interface{}{\n\t\t\t\"name\": math.Sqrt(-1),\n\t\t}},\n\t}\n\n\tfor _, tc := range testCases {\n\t\ts, err := ToStringMaybeErr(tc.input)\n\t\tif err != nil {\n\t\t\tassert.Equal(t, tc.want, err.Error())\n\t\t} else {\n\t\t\tassert.Equal(t, tc.want, s)\n\t\t}\n\t}\n}\nfunc TestToStringMapString(t *testing.T) {\n\t// Test cases\n\ttestCases := []struct {\n\t\tinput interface{}\n\t}{\n\t\t{map[string]interface{}{\n\t\t\t\"name\": \"lala\",\n\t\t\t\"age\":  5,\n\t\t\t\"user\": User{},\n\t\t}},\n\t\t{map[interface{}]string{\n\t\t\t\"name\": \"lala\",\n\t\t}},\n\t\t{map[string]string{\n\t\t\t\"name\": \"lala\",\n\t\t}},\n\t\t{map[interface{}]interface{}{\n\t\t\t\"name\": \"lala\",\n\t\t}},\n\t\t{\"{\\\"name\\\":\\\"lala\\\"}\"},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tstrMap := ToStringMapString(tc.input)\n\t\tnameV := strMap[\"name\"]\n\t\tnameType := reflect.TypeOf(&nameV).Elem()\n\t\tassert.Equal(t, reflect.String, nameType.Kind())\n\t\tassert.Equal(t, \"lala\", nameV)\n\t}\n\n\tstrMap := ToStringMapString(&User{})\n\tassert.Equal(t, 0, len(strMap))\n}\n\nfunc TestRandomStr(t *testing.T) {\n\tv1 := RandomStr(10)\n\tassert.Equal(t, 10, len(v1))\n\tv2 := RandomStr(10)\n\tassert.Equal(t, 10, len(v2))\n\tv3 := RandomStr(4)\n\tassert.Equal(t, 4, len(v3))\n\tassert.True(t, v1 != v2)\n}\n\nfunc TestCheckHasVar(t *testing.T) {\n\tassert.True(t, CheckHasVar(\"${ddd}\"))\n\tassert.False(t, CheckHasVar(\"${ddd\"))\n\tassert.True(t, CheckHasVar(\"${ ddd }\"))\n\tassert.False(t, CheckHasVar(\"ddd\"))\n}\n\nfunc TestConvertDollarPlaceholder(t *testing.T) {\n\tsql := \"select * from user where name=? and age=?\"\n\tassert.Equal(t, \"select * from user where name=$1 and age=$2\", ConvertDollarPlaceholder(sql, \"postgres\"))\n\tassert.Equal(t, sql, ConvertDollarPlaceholder(sql, \"mysql\"))\n}\n\nfunc TestToLowerFirst(t *testing.T) {\n\tassert.Equal(t, \"\", ToLowerFirst(\"\"))\n\tassert.Equal(t, \"hello\", ToLowerFirst(\"Hello\"))\n\tassert.Equal(t, \"hello\", ToLowerFirst(\"hello\"))\n\tassert.Equal(t, \"hELLO\", ToLowerFirst(\"HELLO\"))\n}\n\nfunc TestRemoveBraces(t *testing.T) {\n\tassert.Equal(t, \"\", RemoveBraces(\"\"))\n\tassert.Equal(t, \"hello\", RemoveBraces(\"hello\"))\n\tassert.Equal(t, \"hello_lala\", RemoveBraces(\"${hello_lala}\"))\n\tassert.Equal(t, \"hello\", RemoveBraces(\"hello}\"))\n\tassert.Equal(t, \"hello\", RemoveBraces(\"${hello}\"))\n\tassert.Equal(t, \"helloage\", RemoveBraces(\"${hello} ${age}\"))\n}\n\nfunc TestParseVarsWithBraces(t *testing.T) {\n\ttestStr := \"This is a test string with ${vars.name} and ${vars.age} and ${vars.name} again.\"\n\tvars := ParseVarsWithBraces(Vars, testStr)\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"name\"))\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"age\"))\n\n\ttestStr = \"This is a test string with ${msg.name} and ${msg.age} and ${msg.name} again.\"\n\tvars = ParseVarsWithBraces(MsgKey, testStr)\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"name\"))\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"age\"))\n\n\ttestStr = \"This is a test string with vars.name and vars.age and vars.name again.\"\n\tvars = ParseVarsWithBraces(Vars, testStr)\n\tassert.Equal(t, 0, len(vars))\n}\nfunc TestParseVars(t *testing.T) {\n\ttestStr := \"This is a test string with ${vars.name} and ${vars.age} and ${vars.name} again.\"\n\tvars := ParseVars(Vars, testStr)\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"name\"))\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"age\"))\n\n\ttestStr = \"This is a test string with vars.name and vars.age and vars.name again.\"\n\tvars = ParseVars(Vars, testStr)\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"name\"))\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"age\"))\n\n\ttestStr = \"This is a test string with msg.name and msg.age and msg.name again.\"\n\tvars = ParseVars(MsgKey, testStr)\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"name\"))\n\tassert.True(t, strings.Contains(strings.Join(vars, \",\"), \"age\"))\n}\n\ntype User struct {\n\tUsername string\n\tAge      int\n\tAddress  Address\n}\ntype Address struct {\n\tDetail string\n}\n"
