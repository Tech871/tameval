[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "google-deepmind/android_env"
sha = "827047088b9e932f29a951d734962bf855587521"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=android_env/wrappers/tap_action_wrapper.py -m pytest -q --junit-xml=test_output.xml android_env/wrappers/tap_action_wrapper_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target android_env.wrappers.tap_action_wrapper --unit-test android_env.wrappers.tap_action_wrapper_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target android_env/wrappers/tap_action_wrapper.py --unit-test android_env/wrappers/tap_action_wrapper_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 45.0
original_coverage = 80.0
mutation_kill_rate = 30.0
original_mutation_kill_rate = 30.0
covered_lines = [ 17, 18, 20, 21, 22, 23, 24, 27, 30, 34, 35, 36, 37, 38, 40, 46, 49, 63, 71, 73, 75, 96,]
missed_lines = [ 42, 43, 44, 50, 51, 52, 55, 56, 57, 60, 64, 65, 66, 69, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90, 97, 98, 105,]

[input_info]
test_file_path = "android_env/wrappers/tap_action_wrapper_test.py"
focal_file_path = "android_env/wrappers/tap_action_wrapper.py"
test_file_url = "https://github.com/google-deepmind/android_env/blob/827047088b9e932f29a951d734962bf855587521/android_env/wrappers/tap_action_wrapper_test.py"
focal_file_url = "https://github.com/google-deepmind/android_env/blob/827047088b9e932f29a951d734962bf855587521/android_env/wrappers/tap_action_wrapper.py"
first_commit_date = "2021-08-23"
last_commit_date = "2025-07-21"
test_file_content = "# coding=utf-8\n# Copyright 2025 DeepMind Technologies Limited.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for tap_action_wrapper.\"\"\"\n\nfrom unittest import mock\n\nfrom absl.testing import absltest\nfrom android_env import env_interface\nfrom android_env.components import action_type\nfrom android_env.wrappers import tap_action_wrapper\nimport dm_env\nfrom dm_env import specs\nimport numpy as np\n\ndef _make_array_spec(shape, dtype, name):\n  return specs.BoundedArray(\n      name=name,\n      shape=shape,\n      dtype=dtype,\n      minimum=np.zeros(shape),\n      maximum=np.ones(shape),  # maximum is inclusive.\n  )\n\nclass TapActionWrapperTest(absltest.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    self._base_action_spec = {\n        'action_type': specs.DiscreteArray(\n            num_values=3, name='action_type'),\n        'touch_position': _make_array_spec(\n            shape=(2,), dtype=np.float32, name='touch_position'),\n    }\n    self.base_env = mock.create_autospec(env_interface.AndroidEnvInterface)\n    self.base_env.action_spec.return_value = self._base_action_spec\n\n  def test_process_action_repeat(self):\n    wrapped_env = tap_action_wrapper.TapActionWrapper(\n        self.base_env, num_frames=3)\n    action = {\n        'action_type': np.array(action_type.ActionType.REPEAT, dtype=np.int32),\n        'touch_position': np.array([0.5, 0.5], dtype=np.float32),\n    }\n    actions = wrapped_env._process_action(action)\n    self.assertLen(actions, wrapped_env._num_frames + 1)\n    self.assertEqual(action, actions[-1])\n\n  def test_reset(self):\n    wrapped_env = tap_action_wrapper.TapActionWrapper(\n        self.base_env, num_frames=5)\n    fake_timestep = 'ts'\n    self.base_env.reset.return_value = fake_timestep\n    ts = wrapped_env.reset()\n    self.base_env.reset.assert_called_once()\n    self.assertEqual(fake_timestep, ts)\n\nif __name__ == '__main__':\n  absltest.main()\n"
