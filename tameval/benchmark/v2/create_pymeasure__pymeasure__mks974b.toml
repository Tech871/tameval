[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pymeasure/pymeasure"
sha = "03452744481f5dd366eb1ee3764bff3995e384d1"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pymeasure/instruments/mksinst/mks974b.py -m pytest -q --junit-xml=test_output.xml tests/instruments/mksinst/test_mks974b.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pymeasure.instruments.mksinst.mks974b --unit-test tests.instruments.mksinst.test_mks974b --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pymeasure/instruments/mksinst/mks974b.py --unit-test tests/instruments/mksinst/test_mks974b.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 90.0
original_coverage = 90.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 24, 25, 27, 30, 31, 40, 41, 42, 43, 46, 48, 64, 81, 83, 85, 87, 88, 95, 99, 104, 109, 114, 119, 124, 129, 134, 139, 143, 156, 160, 164, 168, 172, 183, 190,]
missed_lines = [ 32, 33, 35, 97,]

[input_info]
test_file_path = "tests/instruments/mksinst/test_mks974b.py"
focal_file_path = "pymeasure/instruments/mksinst/mks974b.py"
test_file_url = "https://github.com/pymeasure/pymeasure/blob/03452744481f5dd366eb1ee3764bff3995e384d1/tests/instruments/mksinst/test_mks974b.py"
focal_file_url = "https://github.com/pymeasure/pymeasure/blob/03452744481f5dd366eb1ee3764bff3995e384d1/pymeasure/instruments/mksinst/mks974b.py"
first_commit_date = "2024-02-01"
last_commit_date = "2025-01-07"
test_file_content = "#\n# This file is part of the PyMeasure package.\n#\n# Copyright (c) 2013-2025 PyMeasure Developers\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\nimport pytest\n\nfrom pymeasure.test import expected_protocol\nfrom pymeasure.instruments.mksinst.mks974b import MKS974B, Unit\n\n\ndef test_device_type():\n    \"\"\"Verify the communication of the device type.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253DT?\", \"@253ACKQUADMAG\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.device_type == \"QUADMAG\"\n\n\ndef test_status():\n    \"\"\"Verify the communication of the status.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253T?\", \"@253ACKO\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.status == \"Ok\"\n\n\ndef test_pressure():\n    \"\"\"Verify the communication of the pressure getter.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253PR4?\", \"@253ACK1.234E-3\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.pressure == pytest.approx(1.234e-3)\n\n\ndef test_pirani_pressure():\n    \"\"\"Verify the communication of the pirani pressure getter.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253PR1?\", \"@253ACK1.23E-3\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.pirani_pressure == pytest.approx(1.23e-3)\n\n\ndef test_unit_setter():\n    \"\"\"Verify the communication of the unit setter.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253U!PASCAL\", \"@253ACKPASCAL\"),\n         (None, b\"FF\")],\n    ) as inst:\n        inst.unit = Unit.Pa\n\n\ndef test_unit_getter():\n    \"\"\"Verify the communication of the unit getter.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253U?\", \"@253ACKTORR\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.unit == Unit.Torr\n\n\ndef test_switch_enabled():\n    \"\"\"Verify the communication of the user swith getter.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253SW?\", \"@253ACKON\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.switch_enabled is True\n\n\ndef test_relay_value():\n    \"\"\"Verify the communication of the relay setpoint getter.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253SP1?\", \"@253ACK2.00E+1\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.relay_1.setpoint == pytest.approx(2.00e1)\n\n\ndef test_relay_direction():\n    \"\"\"Verify the communication of the relay direction.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253SD2?\", \"@253ACKBELOW\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.relay_2.direction == \"BELOW\"\n\n\ndef test_relay_enabled():\n    \"\"\"Verify the communication of the relay enabled property.\"\"\"\n    with expected_protocol(\n        MKS974B,\n        [(\"@253EN3?\", \"@253ACKPIR\"),\n         (None, b\"FF\")],\n    ) as inst:\n        assert inst.relay_3.enabled == \"pirani\"\n"
