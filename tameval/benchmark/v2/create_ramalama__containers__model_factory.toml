[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "containers/ramalama"
sha = "2c94e5f39c1f6c3253832353cbc2a225479b1dea"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ramalama/model_factory.py -m pytest -q --junit-xml=test_output.xml test/unit/test_model_factory.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ramalama.model_factory --unit-test test.unit.test_model_factory --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ramalama/model_factory.py --unit-test test/unit/test_model_factory.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 83.0
original_coverage = 83.0
mutation_kill_rate = 97.0
original_mutation_kill_rate = 97.0
covered_lines = [ 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 26, 27, 28, 29, 30, 31, 33, 35, 36, 38, 39, 41, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 73, 75, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 116, 119, 121, 122, 123, 125, 126, 127, 128, 131, 137,]
missed_lines = [ 42, 43, 44, 65, 114, 117, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,]

[input_info]
test_file_path = "test/unit/test_model_factory.py"
focal_file_path = "ramalama/model_factory.py"
test_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/test/unit/test_model_factory.py"
focal_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/ramalama/model_factory.py"
first_commit_date = "2025-02-24"
last_commit_date = "2025-07-31"
test_file_content = "from dataclasses import dataclass\nfrom typing import Union\n\nimport pytest\n\nfrom ramalama.huggingface import Huggingface\nfrom ramalama.model_factory import ModelFactory\nfrom ramalama.modelscope import ModelScope\nfrom ramalama.oci import OCI\nfrom ramalama.ollama import Ollama\nfrom ramalama.url import URL\n\n\n@dataclass\nclass Input:\n    Model: str\n    Transport: str\n    Engine: str\n\n\nclass ARGS:\n    store = \"/tmp/store\"\n    engine = \"\"\n    container = True\n\n    def __init__(self, engine=\"\"):\n        self.engine = engine\n\n\nhf_granite_blob = \"https://huggingface.co/ibm-granite/granite-3b-code-base-2k-GGUF/blob\"\n\n\n@pytest.mark.parametrize(\n    \"input,expected,error\",\n    [\n        (Input(\"\", \"\", \"\"), None, KeyError),\n        (Input(\"huggingface://granite-code\", \"\", \"\"), Huggingface, None),\n        (Input(\"hf://granite-code\", \"\", \"\"), Huggingface, None),\n        (Input(\"hf.co/granite-code\", \"\", \"\"), Huggingface, None),\n        (Input(\"modelscope://granite-code\", \"\", \"\"), ModelScope, None),\n        (Input(\"ms://granite-code\", \"\", \"\"), ModelScope, None),\n        (Input(\"ollama://granite-code\", \"\", \"\"), Ollama, None),\n        (Input(\"ollama.com/library/granite-code\", \"\", \"\"), Ollama, None),\n        (Input(\"oci://granite-code\", \"\", \"podman\"), OCI, None),\n        (Input(\"docker://granite-code\", \"\", \"podman\"), OCI, None),\n        (\n            Input(\n                f\"{hf_granite_blob}/main/granite-3b-code-base.Q4_K_M.gguf\",\n                \"\",\n                \"\",\n            ),\n            URL,\n            None,\n        ),\n        (\n            Input(\n                f\"{hf_granite_blob}/main/granite-3b-code-base.Q4_K_M.gguf\",\n                \"\",\n                \"\",\n            ),\n            URL,\n            None,\n        ),\n        (Input(\"file:///tmp/models/granite-3b-code-base.Q4_K_M.gguf\", \"\", \"\"), URL, None),\n        (Input(\"granite-code\", \"huggingface\", \"\"), Huggingface, None),\n        (Input(\"granite-code\", \"ollama\", \"\"), Ollama, None),\n        (Input(\"granite-code\", \"oci\", \"\"), OCI, ValueError),\n    ],\n)\ndef test_model_factory_create(input: Input, expected: type[Union[Huggingface, Ollama, URL, OCI]], error):\n    args = ARGS(input.Engine)\n\n    if error is not None:\n        with pytest.raises(error):\n            ModelFactory(input.Model, args, input.Transport).create()\n    else:\n        model = ModelFactory(input.Model, args, input.Transport).create()\n        assert isinstance(model, expected)\n\n\n@pytest.mark.parametrize(\n    \"input,error\",\n    [\n        (Input(\"\", \"\", \"\"), KeyError),\n        (Input(\"oci://granite-code\", \"\", \"podman\"), None),\n        (Input(\"docker://granite-code\", \"\", \"podman\"), None),\n        (Input(\"file:///tmp/models/granite-3b-code-base.Q4_K_M.gguf\", \"\", \"\"), ValueError),\n        (Input(\"huggingface://granite-code\", \"\", \"\"), ValueError),\n        (Input(\"hf://granite-code\", \"\", \"\"), ValueError),\n        (Input(\"hf.co/granite-code\", \"\", \"\"), None),\n        (Input(\"modelscope://granite-code\", \"\", \"\"), ValueError),\n        (Input(\"ms://granite-code\", \"\", \"\"), ValueError),\n        (Input(\"ollama://granite-code\", \"\", \"\"), ValueError),\n        (Input(\"ollama.com/library/granite-code\", \"\", \"\"), None),\n        (Input(\"granite-code\", \"ollama\", \"\"), None),\n        (Input(\"granite-code\", \"\", \"\"), KeyError),\n    ],\n)\ndef test_validate_oci_model_input(input: Input, error):\n    args = ARGS(input.Engine)\n\n    if error is not None:\n        with pytest.raises(error):\n            ModelFactory(input.Model, args, input.Transport).validate_oci_model_input()\n        return\n\n    ModelFactory(input.Model, args, input.Transport).validate_oci_model_input()\n\n\n@pytest.mark.parametrize(\n    \"input,expected\",\n    [\n        (Input(\"huggingface://granite-code\", \"\", \"\"), \"granite-code\"),\n        (\n            Input(\"huggingface://ibm-granite/granite-3b-code-base-2k-GGUF/granite-code\", \"\", \"\"),\n            \"ibm-granite/granite-3b-code-base-2k-GGUF/granite-code\",\n        ),\n        (Input(\"hf://granite-code\", \"\", \"\"), \"granite-code\"),\n        (Input(\"hf.co/granite-code\", \"\", \"\"), \"granite-code\"),\n        (Input(\"modelscope://granite-code\", \"\", \"\"), \"granite-code\"),\n        (\n            Input(\"modelscope://ibm-granite/granite-3b-code-base-2k-GGUF/granite-code\", \"\", \"\"),\n            \"ibm-granite/granite-3b-code-base-2k-GGUF/granite-code\",\n        ),\n        (Input(\"ms://granite-code\", \"\", \"\"), \"granite-code\"),\n        (Input(\"ollama://granite-code\", \"\", \"\"), \"granite-code\"),\n        (Input(\"ollama.com/library/granite-code\", \"\", \"\"), \"granite-code\"),\n        (\n            Input(\"ollama.com/library/ibm-granite/granite-3b-code-base-2k-GGUF/granite-code\", \"\", \"\"),\n            \"ibm-granite/granite-3b-code-base-2k-GGUF/granite-code\",\n        ),\n        (Input(\"oci://granite-code\", \"\", \"podman\"), \"granite-code\"),\n        (Input(\"docker://granite-code\", \"\", \"podman\"), \"granite-code\"),\n        (\n            Input(\n                f\"{hf_granite_blob}/main/granite-3b-code-base.Q4_K_M.gguf\",\n                \"\",\n                \"\",\n            ),\n            \"huggingface.co/ibm-granite/granite-3b-code-base-2k-GGUF/blob/main/granite-3b-code-base.Q4_K_M.gguf\",\n        ),\n        (\n            Input(\n                f\"{hf_granite_blob}/main/granite-3b-code-base.Q4_K_M.gguf\",\n                \"\",\n                \"\",\n            ),\n            \"huggingface.co/ibm-granite/granite-3b-code-base-2k-GGUF/blob/main/granite-3b-code-base.Q4_K_M.gguf\",\n        ),\n        (\n            Input(\"file:///tmp/models/granite-3b-code-base.Q4_K_M.gguf\", \"\", \"\"),\n            \"/tmp/models/granite-3b-code-base.Q4_K_M.gguf\",\n        ),\n        (Input(\"granite-code\", \"huggingface\", \"\"), \"granite-code\"),\n        (Input(\"granite-code\", \"ollama\", \"\"), \"granite-code\"),\n        (Input(\"granite-code\", \"oci\", \"\"), \"granite-code\"),\n    ],\n)\ndef test_prune_model_input(input: Input, expected: str):\n    args = ARGS(input.Engine)\n    pruned_model_input = ModelFactory(input.Model, args, input.Transport).prune_model_input()\n    assert pruned_model_input == expected\n"
