[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bufbuild/buf"
sha = "37b5a2a496a2279aa03507be64cba00193644a1e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out private/pkg/tmp/tmp.go private/pkg/tmp/tmp_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting private/pkg/tmp/tmp.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 75.56
original_coverage = 58.0
mutation_kill_rate = 17.65
original_mutation_kill_rate = nan
covered_lines = [ 44, 45, 49, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 70, 79, 80, 84, 88, 93, 97, 98, 99, 100, 101, 102, 124, 125, 126, 127, 128, 129, 131, 132, 133, 137, 138, 139, 145, 146, 147,]
missed_lines = [ 46, 47, 48, 50, 51, 52, 56, 57, 58, 66, 67, 68, 69, 81, 82, 83, 85, 86, 87, 89, 90, 91, 94, 95, 96, 112, 113, 114, 115,]

[input_info]
test_file_path = "private/pkg/tmp/tmp_test.go"
focal_file_path = "private/pkg/tmp/tmp.go"
test_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/pkg/tmp/tmp_test.go"
focal_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/pkg/tmp/tmp.go"
first_commit_date = "2021-08-25"
last_commit_date = "2025-01-02"
test_file_content = "// Copyright 2020-2025 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage tmp\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestFile(t *testing.T) {\n\tt.Parallel()\n\tctx := context.Background()\n\ttmpFile, err := NewFile(ctx, strings.NewReader(\"foo\"))\n\trequire.NoError(t, err)\n\tassert.True(t, filepath.IsAbs(tmpFile.Path()))\n\tdata, err := os.ReadFile(tmpFile.Path())\n\tassert.NoError(t, err)\n\tassert.Equal(t, \"foo\", string(data))\n\tassert.NoError(t, tmpFile.Close())\n\t_, err = os.ReadFile(tmpFile.Path())\n\tassert.Error(t, err)\n}\n\nfunc TestFileCancel(t *testing.T) {\n\tt.Parallel()\n\tctx, cancel := context.WithCancel(context.Background())\n\ttmpFile, err := NewFile(ctx, strings.NewReader(\"foo\"))\n\trequire.NoError(t, err)\n\t_, err = os.ReadFile(tmpFile.Path())\n\tassert.NoError(t, err)\n\tcancel()\n\ttime.Sleep(1 * time.Second)\n\t_, err = os.ReadFile(tmpFile.Path())\n\tassert.Error(t, err)\n}\n\nfunc TestDir(t *testing.T) {\n\tt.Parallel()\n\tctx := context.Background()\n\ttmpDir, err := NewDir(ctx)\n\trequire.NoError(t, err)\n\tassert.True(t, filepath.IsAbs(tmpDir.Path()))\n\tfileInfo, err := os.Lstat(tmpDir.Path())\n\tassert.NoError(t, err)\n\tassert.True(t, fileInfo.IsDir())\n\tassert.NoError(t, tmpDir.Close())\n\t_, err = os.Lstat(tmpDir.Path())\n\tassert.Error(t, err)\n}\n\nfunc TestDirCancel(t *testing.T) {\n\tt.Parallel()\n\tctx, cancel := context.WithCancel(context.Background())\n\ttmpDir, err := NewDir(ctx)\n\trequire.NoError(t, err)\n\t_, err = os.Lstat(tmpDir.Path())\n\tassert.NoError(t, err)\n\tcancel()\n\ttime.Sleep(1 * time.Second)\n\t_, err = os.Lstat(tmpDir.Path())\n\tassert.Error(t, err)\n}\n"
