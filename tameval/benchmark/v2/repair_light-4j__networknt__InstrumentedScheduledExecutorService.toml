[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "networknt/light-4j"
sha = "e6d76041442a1265369701cef8141b88c027f15c"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl metrics-config -Dtest=InstrumentedScheduledExecutorServiceTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl metrics-config -DtargetClasses=**.InstrumentedScheduledExecutorService  -DtargetTests=**.InstrumentedScheduledExecutorServiceTest  -DoutputFormats=XML"
coverage_report_path = "metrics-config/target/site/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "metrics-config/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 69.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "metrics-config/src/test/java/io/dropwizard/metrics/InstrumentedScheduledExecutorServiceTest.java"
focal_file_path = "metrics-config/src/main/java/io/dropwizard/metrics/InstrumentedScheduledExecutorService.java"
test_file_url = "https://github.com/networknt/light-4j/blob/e6d76041442a1265369701cef8141b88c027f15c/metrics-config/src/test/java/io/dropwizard/metrics/InstrumentedScheduledExecutorServiceTest.java"
focal_file_url = "https://github.com/networknt/light-4j/blob/e6d76041442a1265369701cef8141b88c027f15c/metrics-config/src/main/java/io/dropwizard/metrics/InstrumentedScheduledExecutorService.java"
first_commit_date = "2024-04-04"
last_commit_date = "2024-04-04"
test_file_content = "\n\npackage io.dropwizard.metrics;\n\n\nimport io.dropwizard.metrics.Counter;\nimport io.dropwizard.metrics.InstrumentedScheduledExecutorService;\n\n\n\npublic class InstrumentedScheduledExecutorServiceTest {\n    private final ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n    private final MetricRegistry registry = new MetricRegistry();\n    private final InstrumentedScheduledExecutorService instrumentedScheduledExecutor = new InstrumentedScheduledExecutorService(scheduledExecutor, registry, \"xs\");\n\n    final Meter submitted = registry.meter(\"xs.submitted\");\n\n    final Counter running = registry.counter(\"xs.running\");\n    final Meter completed = registry.meter(\"xs.completed\");\n    final Timer duration = registry.timer(\"xs.duration\");\n\n    final Meter scheduledOnce = registry.meter(\"xs.scheduled.once\");\n    final Meter scheduledRepetitively = registry.meter(\"xs.scheduled.repetitively\");\n    final Counter scheduledOverrun = registry.counter(\"xs.scheduled.overrun\");\n    final Histogram percentOfPeriod = registry.histogram(\"xs.scheduled.percent-of-period\");\n\n    @Test\n    public void testSubmitRunnable() throws Exception {\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isZero();\n        assertThat(duration.getCount()).isZero();\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n\n        Future<?> theFuture = instrumentedScheduledExecutor.submit(() -> {\n            assertThat(submitted.getCount()).isEqualTo(1);\n\n            assertThat(running.getCount()).isEqualTo(1);\n            assertThat(completed.getCount()).isZero();\n            assertThat(duration.getCount()).isZero();\n\n            assertThat(scheduledOnce.getCount()).isZero();\n            assertThat(scheduledRepetitively.getCount()).isZero();\n            assertThat(scheduledOverrun.getCount()).isZero();\n            assertThat(percentOfPeriod.getCount()).isZero();\n        });\n\n        theFuture.get();\n\n        assertThat(submitted.getCount()).isEqualTo(1);\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isEqualTo(1);\n        assertThat(duration.getCount()).isEqualTo(1);\n        assertThat(duration.getSnapshot().size()).isEqualTo(1);\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n    }\n\n    @Test\n    public void testScheduleRunnable() throws Exception {\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isZero();\n        assertThat(duration.getCount()).isZero();\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n\n        ScheduledFuture<?> theFuture = instrumentedScheduledExecutor.schedule(() -> {\n            assertThat(submitted.getCount()).isZero();\n\n            assertThat(running.getCount()).isEqualTo(1);\n            assertThat(completed.getCount()).isZero();\n            assertThat(duration.getCount()).isZero();\n\n            assertThat(scheduledOnce.getCount()).isEqualTo(1);\n            assertThat(scheduledRepetitively.getCount()).isZero();\n            assertThat(scheduledOverrun.getCount()).isZero();\n            assertThat(percentOfPeriod.getCount()).isZero();\n        }, 10L, TimeUnit.MILLISECONDS);\n\n        theFuture.get();\n\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isEqualTo(1);\n        assertThat(duration.getCount()).isEqualTo(1);\n        assertThat(duration.getSnapshot().size()).isEqualTo(1);\n\n        assertThat(scheduledOnce.getCount()).isEqualTo(1);\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n    }\n\n    @Test\n    public void testSubmitCallable() throws Exception {\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isZero();\n        assertThat(duration.getCount()).isZero();\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n\n        final Object obj = new Object();\n\n        Future<Object> theFuture = instrumentedScheduledExecutor.submit(() -> {\n            assertThat(submitted.getCount()).isEqualTo(1);\n\n            assertThat(running.getCount()).isEqualTo(1);\n            assertThat(completed.getCount()).isZero();\n            assertThat(duration.getCount()).isZero();\n\n            assertThat(scheduledOnce.getCount()).isZero();\n            assertThat(scheduledRepetitively.getCount()).isZero();\n            assertThat(scheduledOverrun.getCount()).isZero();\n            assertThat(percentOfPeriod.getCount()).isZero();\n\n            return obj;\n        });\n\n        assertThat(theFuture.get()).isEqualTo(obj);\n\n        assertThat(submitted.getCount()).isEqualTo(1);\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isEqualTo(1);\n        assertThat(duration.getCount()).isEqualTo(1);\n        assertThat(duration.getSnapshot().size()).isEqualTo(1);\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n    }\n\n    @Test\n    public void testScheduleCallable() throws Exception {\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isZero();\n        assertThat(duration.getCount()).isZero();\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n\n        final Object obj = new Object();\n\n        ScheduledFuture<Object> theFuture = instrumentedScheduledExecutor.schedule(() -> {\n            assertThat(submitted.getCount()).isZero();\n\n            assertThat(running.getCount()).isEqualTo(1);\n            assertThat(completed.getCount()).isZero();\n            assertThat(duration.getCount()).isZero();\n\n            assertThat(scheduledOnce.getCount()).isEqualTo(1);\n            assertThat(scheduledRepetitively.getCount()).isZero();\n            assertThat(scheduledOverrun.getCount()).isZero();\n            assertThat(percentOfPeriod.getCount()).isZero();\n\n            return obj;\n        }, 10L, TimeUnit.MILLISECONDS);\n\n        assertThat(theFuture.get()).isEqualTo(obj);\n\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isEqualTo(1);\n        assertThat(duration.getCount()).isEqualTo(1);\n        assertThat(duration.getSnapshot().size()).isEqualTo(1);\n\n        assertThat(scheduledOnce.getCount()).isEqualTo(1);\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n    }\n\n    @Test\n    public void testScheduleFixedRateCallable() throws Exception {\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isZero();\n        assertThat(duration.getCount()).isZero();\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isZero();\n        assertThat(scheduledOverrun.getCount()).isZero();\n        assertThat(percentOfPeriod.getCount()).isZero();\n\n        ScheduledFuture<?> theFuture = instrumentedScheduledExecutor.scheduleAtFixedRate(() -> {\n            assertThat(submitted.getCount()).isZero();\n\n            assertThat(running.getCount()).isEqualTo(1);\n\n            assertThat(scheduledOnce.getCount()).isEqualTo(0);\n            assertThat(scheduledRepetitively.getCount()).isEqualTo(1);\n\n            try {\n                TimeUnit.MILLISECONDS.sleep(50);\n            } catch (InterruptedException ex) {\n                Thread.currentThread().interrupt();\n            }\n\n        }, 10L, 10L, TimeUnit.MILLISECONDS);\n\n        TimeUnit.MILLISECONDS.sleep(100);\n        theFuture.cancel(true);\n        TimeUnit.MILLISECONDS.sleep(100);\n\n        assertThat(submitted.getCount()).isZero();\n\n        assertThat(running.getCount()).isZero();\n        assertThat(completed.getCount()).isNotEqualTo(0);\n        assertThat(duration.getCount()).isNotEqualTo(0);\n        assertThat(duration.getSnapshot().size()).isNotEqualTo(0);\n\n        assertThat(scheduledOnce.getCount()).isZero();\n        assertThat(scheduledRepetitively.getCount()).isEqualTo(1);\n        assertThat(scheduledOverrun.getCount()).isNotEqualTo(0);\n        assertThat(percentOfPeriod.getCount()).isNotEqualTo(0);\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        instrumentedScheduledExecutor.shutdown();\n        if (!instrumentedScheduledExecutor.awaitTermination(2, TimeUnit.SECONDS)) {\n            System.err.println(\"InstrumentedScheduledExecutorService did not terminate.\");\n        }\n    }\n\n}"
