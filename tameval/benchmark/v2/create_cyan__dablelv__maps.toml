[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.21.3"

[repo_info]
repository = "dablelv/cyan"
sha = "fcc58af2bdddc5303fa3360f2616ed0178089988"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out maps/maps.go maps/maps_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting maps/maps.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 94.0
original_coverage = 94.0
mutation_kill_rate = 89.0
original_mutation_kill_rate = 89.0
covered_lines = [ 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 55, 60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 74, 78, 79, 80, 81, 82, 84,]
missed_lines = [ 56, 57, 58,]

[input_info]
test_file_path = "maps/maps_test.go"
focal_file_path = "maps/maps.go"
test_file_url = "https://github.com/dablelv/cyan/blob/fcc58af2bdddc5303fa3360f2616ed0178089988/maps/maps_test.go"
focal_file_url = "https://github.com/dablelv/cyan/blob/fcc58af2bdddc5303fa3360f2616ed0178089988/maps/maps.go"
first_commit_date = "2025-04-14"
last_commit_date = "2025-04-21"
test_file_content = "package maps\n\nimport (\n\t\"testing\"\n\n\t\"github.com/dablelv/cyan/internal/utest\"\n)\n\nfunc TestKeys(t *testing.T) {\n\tassert := utest.NewAssert(t, \"TestMapKeys\")\n\n\t// to ints\n\tks := Keys(map[int]int{1: 1, 2: 2, 3: 3})\n\tassert.Equal(3, len(ks))\n}\n\nfunc TestSortedKeys(t *testing.T) {\n\tassert := utest.NewAssert(t, \"TestMapSortedKeys\")\n\n\t// to strings\n\tks := SortedKeys(map[string]int{\"a\": 1, \"b\": 2, \"c\": 3})\n\tassert.Equal(ks, []string{\"a\", \"b\", \"c\"})\n}\n\nfunc TestVals(t *testing.T) {\n\tassert := utest.NewAssert(t, \"TestMapVals\")\n\n\t// to ints\n\tvs := Vals(map[int]int{1: 1, 2: 2, 3: 3})\n\tassert.Equal(3, len(vs))\n}\n\nfunc TestMapSortedVals(t *testing.T) {\n\tassert := utest.NewAssert(t, \"TestMapSortedVals\")\n\n\t// to strings\n\tvs := SortedVals(map[int]string{1: \"a\", 2: \"b\", 3: \"c\"})\n\tassert.Equal(vs, []string{\"a\", \"b\", \"c\"})\n}\n\nfunc TestMapKeyVals(t *testing.T) {\n\tassert := utest.NewAssert(t, \"TestMapKeyVals\")\n\n\tks, vs := KeyVals(map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3})\n\tassert.Equal(3, len(ks))\n\tassert.Equal(3, len(vs))\n}\n\nfunc TestMerge(t *testing.T) {\n\t{\n\t\tassert := utest.NewAssert(t, \"TestMerge_one_map\")\n\t\tm := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tr := Merge(m)\n\t\tassert.Equal(r, m)\n\t}\n\n\t{\n\t\tassert := utest.NewAssert(t, \"TestMerge_two_map\")\n\t\tm1 := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tm2 := map[string]int{\"qux\": 4}\n\t\tr := Merge(m1, m2)\n\t\tassert.Equal(r, map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3, \"qux\": 4})\n\t}\n\n\t{\n\t\tassert := utest.NewAssert(t, \"TestMerge_three_map\")\n\t\tm1 := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tm2 := map[string]int{\"qux\": 4}\n\t\tm3 := map[string]int{\"foo\": 0}\n\t\tr := Merge(m1, m2, m3)\n\t\tassert.Equal(r, map[string]int{\"foo\": 0, \"bar\": 2, \"baz\": 3, \"qux\": 4})\n\t}\n}\n\nfunc TestContainsAllKeys(t *testing.T) {\n\t{\n\t\tassert := utest.NewAssert(t, \"exist\")\n\t\tm := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tb := ContainsAllKeys(m, []string{\"foo\", \"bar\", \"baz\"})\n\t\tassert.True(b)\n\t}\n\n\t{\n\t\tassert := utest.NewAssert(t, \"not_exist\")\n\t\tm := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tb := ContainsAllKeys(m, []string{\"foo\", \"bar\", \"baz\", \"qux\"})\n\t\tassert.False(b)\n\t}\n}\n\nfunc TestContainsAnyKey(t *testing.T) {\n\t{\n\t\tassert := utest.NewAssert(t, \"exist\")\n\t\tm := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tb := ContainsAnyKey(m, []string{\"foo\", \"bar\", \"baz\"})\n\t\tassert.True(b)\n\t}\n\n\t{\n\t\tassert := utest.NewAssert(t, \"not_exist\")\n\t\tm := map[string]int{\"foo\": 1, \"bar\": 2, \"baz\": 3}\n\t\tb := ContainsAnyKey(m, []string{\"qux\"})\n\t\tassert.False(b)\n\t}\n}\n"
