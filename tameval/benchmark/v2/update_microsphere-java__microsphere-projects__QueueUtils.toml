[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-java"
sha = "b4576dbd7bad0fe918d235617d466ccd5434cc66"
bench_version = 1

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-java-core -Dtest=QueueUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-java-core -DtargetClasses=**.QueueUtils  -DtargetTests=**.QueueUtilsTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-java-core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-java-core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "microsphere-java-core/src/test/java/io/microsphere/collection/QueueUtilsTest.java"
focal_file_path = "microsphere-java-core/src/main/java/io/microsphere/collection/QueueUtils.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/test/java/io/microsphere/collection/QueueUtilsTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/main/java/io/microsphere/collection/QueueUtils.java"
first_commit_date = "2024-04-08"
last_commit_date = "2025-03-01"
test_file_content = "package io.microsphere.collection;\n\n\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Deque;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Queue;\n\nimport static io.microsphere.collection.ListUtils.newLinkedList;\nimport static io.microsphere.collection.QueueUtils.emptyDeque;\nimport static io.microsphere.collection.QueueUtils.emptyQueue;\nimport static io.microsphere.collection.QueueUtils.isDeque;\nimport static io.microsphere.collection.QueueUtils.isQueue;\nimport static io.microsphere.collection.QueueUtils.singletonDeque;\nimport static io.microsphere.collection.QueueUtils.singletonQueue;\nimport static io.microsphere.collection.QueueUtils.unmodifiableDeque;\nimport static io.microsphere.collection.QueueUtils.unmodifiableQueue;\nimport static java.util.Collections.emptyIterator;\nimport static java.util.Collections.emptyList;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * {@link QueueUtils} Test\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy<a/>\n * @see QueueUtils\n * @since 1.0.0\n */\npublic class QueueUtilsTest {\n\n    @Test\n    public void testIsQueue() {\n        assertTrue(isQueue(emptyQueue()));\n        assertTrue(isQueue(emptyDeque()));\n        assertFalse(isQueue(null));\n        assertTrue(isQueue(unmodifiableQueue(emptyDeque())));\n        assertFalse(isQueue(emptyList()));\n    }\n\n    @Test\n    public void testIsDeque() {\n        assertTrue(isDeque(emptyQueue()));\n        assertTrue(isDeque(emptyDeque()));\n        assertFalse(isDeque(null));\n        assertTrue(isDeque(newLinkedList()));\n        assertTrue(isDeque(singletonQueue(\"a\")));\n        assertTrue(isDeque(singletonDeque(\"a\")));\n    }\n\n    @Test\n    public void testEmptyDeque() {\n        Deque<String> deque = emptyDeque();\n        assertTrue(deque.isEmpty());\n        assertSame(emptyIterator(), deque.iterator());\n        assertSame(emptyIterator(), deque.descendingIterator());\n\n        assertThrows(UnsupportedOperationException.class, () -> deque.offerFirst(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> deque.offerLast(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> deque.pollFirst());\n        assertThrows(UnsupportedOperationException.class, () -> deque.pollLast());\n        assertThrows(UnsupportedOperationException.class, () -> deque.getFirst());\n        assertThrows(UnsupportedOperationException.class, () -> deque.getLast());\n\n        assertFalse(deque.removeFirstOccurrence(\"a\"));\n        assertEquals(0, deque.size());\n    }\n\n    @Test\n    public void testUnmodifiableQueue() {\n        Queue<String> queue = unmodifiableQueue(emptyDeque());\n        assertUnmodifiableQueue(queue);\n    }\n\n    @Test\n    public void testUnmodifiableDeque() {\n        Deque<String> deque = unmodifiableDeque(emptyDeque());\n        assertUnmodifiableQueue(deque);\n        assertUnmodifiableDeque(deque);\n    }\n\n    @Test\n    public void testSingletonDeque() {\n        Deque<String> deque = singletonDeque(\"a\");\n        assertSingletonIterator(deque.iterator());\n        assertSingletonIterator(deque.descendingIterator());\n        assertFalse(deque.offerFirst(\"b\"));\n        assertFalse(deque.offerLast(\"b\"));\n\n        assertThrows(UnsupportedOperationException.class, deque::pollFirst);\n        assertThrows(UnsupportedOperationException.class, deque::pollLast);\n\n        assertEquals(\"a\", deque.getFirst());\n        assertEquals(\"a\", deque.getLast());\n\n        assertThrows(UnsupportedOperationException.class, () -> deque.removeLastOccurrence(\"b\"));\n\n        assertEquals(1, deque.size());\n    }\n\n    private static void assertSingletonIterator(Iterator<String> it) {\n        assertTrue(it.hasNext());\n        assertEquals(\"a\", it.next());\n        assertThrows(NoSuchElementException.class, () -> it.next());\n    }\n\n    private static void assertUnmodifiableDeque(Deque<String> deque) {\n        assertThrows(UnsupportedOperationException.class, () -> deque.addFirst(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> deque.addLast(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> deque.offerFirst(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> deque.offerLast(\"a\"));\n        assertThrows(UnsupportedOperationException.class, deque::removeFirst);\n        assertThrows(UnsupportedOperationException.class, deque::removeLast);\n        assertThrows(UnsupportedOperationException.class, deque::pollFirst);\n        assertThrows(UnsupportedOperationException.class, deque::pollLast);\n        assertThrows(UnsupportedOperationException.class, deque::getFirst);\n        assertThrows(UnsupportedOperationException.class, deque::getLast);\n        assertThrows(UnsupportedOperationException.class, deque::peekFirst);\n        assertThrows(UnsupportedOperationException.class, deque::peekLast);\n        assertThrows(UnsupportedOperationException.class, () -> deque.removeFirstOccurrence(null));\n        assertThrows(UnsupportedOperationException.class, () -> deque.removeLastOccurrence(null));\n        assertThrows(UnsupportedOperationException.class, () -> deque.push(\"a\"));\n        assertThrows(UnsupportedOperationException.class, deque::pop);\n\n        assertNotNull(deque.descendingIterator());\n    }\n\n    private static void assertUnmodifiableQueue(Queue<String> queue) {\n        assertEquals(0, queue.size());\n        assertTrue(queue.isEmpty());\n        assertFalse(queue.contains(\"a\"));\n        Iterator<String> iterator = queue.iterator();\n        assertFalse(iterator.hasNext());\n        assertThrows(NoSuchElementException.class, () -> iterator.next());\n        assertThrows(UnsupportedOperationException.class, () -> iterator.remove());\n\n        Object[] array = queue.toArray();\n        assertEquals(0, array.length);\n\n        String[] values = queue.toArray(new String[0]);\n        assertEquals(0, values.length);\n\n        assertThrows(UnsupportedOperationException.class, () -> queue.add(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> queue.remove(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> queue.offer(\"a\"));\n        assertThrows(UnsupportedOperationException.class, () -> queue.remove());\n        assertThrows(UnsupportedOperationException.class, () -> queue.poll());\n        assertThrows(UnsupportedOperationException.class, () -> queue.element());\n        assertThrows(UnsupportedOperationException.class, () -> queue.peek());\n\n        assertTrue(queue.containsAll(emptyList()));\n\n        assertThrows(UnsupportedOperationException.class, () -> queue.addAll(emptyList()));\n        assertThrows(UnsupportedOperationException.class, () -> queue.removeAll(emptyList()));\n        assertThrows(UnsupportedOperationException.class, () -> queue.removeIf(a -> true));\n        assertThrows(UnsupportedOperationException.class, () -> queue.retainAll(emptyList()));\n        assertThrows(UnsupportedOperationException.class, () -> queue.clear());\n\n        assertTrue(queue.equals(queue));\n        assertTrue(queue.equals(emptyQueue()));\n        assertTrue(queue.hashCode() > 0);\n\n        assertNotNull(queue.spliterator());\n        assertNotNull(queue.stream());\n        assertNotNull(queue.parallelStream());\n        queue.forEach(e -> {\n        });\n    }\n\n}"
