[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "UiPath/uipathcli"
sha = "f599d0fbb2bbbb5d055d76ba5f1f68f727e97612"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out cache/file_cache.go cache/file_cache_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting cache/file_cache.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 69.0
mutation_kill_rate = nan
original_mutation_kill_rate = 45.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "cache/file_cache_test.go"
focal_file_path = "cache/file_cache.go"
test_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/cache/file_cache_test.go"
focal_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/cache/file_cache.go"
first_commit_date = "2022-10-09"
last_commit_date = "2025-05-14"
test_file_content = "package cache\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestGetReturnsNoDataWhenNotCached(t *testing.T) {\n\tcache := NewFileCache()\n\n\tvalue, expiry := cache.Get(\"UNKNOWN\")\n\n\tif value != \"\" {\n\t\tt.Errorf(\"Should not return any data from cache, but got: %v\", value)\n\t}\n\tif expiry != 0 {\n\t\tt.Errorf(\"Should not return expiry value, but got: %v\", expiry)\n\t}\n}\n\nfunc TestGetReturnsDataWhenSet(t *testing.T) {\n\tcache := NewFileCache()\n\n\tkey := randomKey()\n\tbefore := time.Now().Unix() + int64(60)\n\n\tcache.Set(key, \"my-value\", 60)\n\tvalue, expiry := cache.Get(key)\n\n\tif value != \"my-value\" {\n\t\tt.Errorf(\"Should return data from cache, but got: %v\", value)\n\t}\n\tif expiry < float32(before) {\n\t\tt.Errorf(\"Should return expiry value which is after %v, but got: %v\", before, expiry)\n\t}\n}\n\nfunc TestGetDoesNotReturnExpiredData(t *testing.T) {\n\tcache := NewFileCache()\n\n\tkey := randomKey()\n\tcache.Set(key, \"my-value\", -1)\n\tvalue, expiry := cache.Get(key)\n\n\tif value != \"\" {\n\t\tt.Errorf(\"Should not return any data from cache, but got: %v\", value)\n\t}\n\tif expiry != 0 {\n\t\tt.Errorf(\"Should not return expiry value, but got: %v\", expiry)\n\t}\n}\n\nfunc TestGetDoesNotReturnDataWhichExpiresSoon(t *testing.T) {\n\tcache := NewFileCache()\n\n\tkey := randomKey()\n\tcache.Set(key, \"my-value\", 10)\n\tvalue, expiry := cache.Get(key)\n\n\tif value != \"\" {\n\t\tt.Errorf(\"Should not return any data from cache, but got: %v\", value)\n\t}\n\tif expiry != 0 {\n\t\tt.Errorf(\"Should not return expiry value, but got: %v\", expiry)\n\t}\n}\n\nfunc randomKey() string {\n\trandBytes := make([]byte, 32)\n\t_, err := rand.Read(randBytes)\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"Error generating random cache key: %w\", err))\n\t}\n\treturn hex.EncodeToString(randBytes)\n}"
