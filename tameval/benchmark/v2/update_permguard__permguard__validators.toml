[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.4"

[repo_info]
repository = "permguard/permguard"
sha = "aa7f57c02a54d803e3442cbc6b401110249df7f7"

[run_info]
docker_image = "golang:1.24.4"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/core/validators/validators.go pkg/core/validators/validators_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/core/validators/validators.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 70.0
mutation_kill_rate = nan
original_mutation_kill_rate = 60.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/core/validators/validators_test.go"
focal_file_path = "pkg/core/validators/validators.go"
test_file_url = "https://github.com/permguard/permguard/blob/aa7f57c02a54d803e3442cbc6b401110249df7f7/pkg/core/validators/validators_test.go"
focal_file_url = "https://github.com/permguard/permguard/blob/aa7f57c02a54d803e3442cbc6b401110249df7f7/pkg/core/validators/validators.go"
first_commit_date = "2024-12-28"
last_commit_date = "2025-05-23"
test_file_content = "// Copyright 2024 Nitro Agility S.r.l.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// SPDX-License-Identifier: Apache-2.0\n\npackage validators\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\tcerrors \"github.com/permguard/permguard/pkg/core/errors\"\n)\n\n// TestValidateCodeID tests the ValidateCodeID function.\nfunc TestValidateCodeID(t *testing.T) {\n\tassert := assert.New(t)\n\n\ttestCases := []struct {\n\t\tentity   string\n\t\tzoneID   int\n\t\thasError bool\n\t}{\n\t\t{\"zone\", -15000, true},\n\t\t{\"zone\", -1, true},\n\t\t{\"zone\", 0, true},\n\t\t{\"zone\", 1, true},\n\t\t{\"zone\", 99999999999, true},\n\t\t{\"zone\", 100000000000, false},\n\t\t{\"zone\", 999999999999, false},\n\t\t{\"zone\", 9999999999990, true},\n\t}\n\tfor _, tc := range testCases {\n\t\tresult := ValidateCodeID(tc.entity, int64(tc.zoneID))\n\t\tif tc.hasError {\n\t\t\tassert.NotNil(result, \"error should not be nil\")\n\t\t\tassert.True(cerrors.AreErrorsEqual(cerrors.ErrClientID, result), \"error should be ErrClientID\")\n\t\t} else {\n\t\t\tassert.Nil(result, \"error should be nil\")\n\t\t}\n\t}\n}\n\n// TestValidateUUID tests the validateUUID function.\nfunc TestValidateUUID(t *testing.T) {\n\tassert := assert.New(t)\n\n\ttestCases := []struct {\n\t\tentity   string\n\t\tUUID     string\n\t\thasError bool\n\t}{\n\t\t{\"zone\", \"\", true},\n\t\t{\"zone\", \" \", true},\n\t\t{\"zone\", \"-15000\", true},\n\t\t{\"zone\", \"15000\", true},\n\t\t{\"zone\", \"5e6c75ca-caeb-4f85-8007-Zdcf6bb1beff\", true},\n\t\t{\"zone\", \"d3967c8f54dc4a28bf3ca1dZca94fa95\", true},\n\t\t{\"zone\", \"f12bf1c12da44a9a97043650824b0a0b\", false},\n\t\t{\"zone\", \"ddd0e6a0-956b-4967-84a0-15c5e54b0b50\", false},\n\t\t{\"\", \"ddd0e6a0-956b-4967-84a0-15c5e54b0b50\", false},\n\t}\n\tfor _, tc := range testCases {\n\t\tresult := ValidateUUID(tc.entity, tc.UUID)\n\t\tif tc.hasError {\n\t\t\tassert.NotNil(result, \"error should not be nil\")\n\t\t\tassert.True(cerrors.AreErrorsEqual(cerrors.ErrClientUUID, result), \"error should be ErrClientUUID\")\n\t\t} else {\n\t\t\tassert.Nil(result, \"error should be nil\")\n\t\t}\n\t}\n}\n\n// TestValidateName tests the validateName function.\nfunc TestValidateName(t *testing.T) {\n\tassert := assert.New(t)\n\n\ttestCases := []struct {\n\t\tentity   string\n\t\tname     string\n\t\thasError bool\n\t}{\n\t\t{\"zone\", \"\", true},\n\t\t{\"zone\", \" s s d  \", true},\n\t\t{\"zone\", \"132465\", false},\n\t\t{\"zone\", \"13a2aa465\", false},\n\t\t{\"zone\", \"nome-@nonvalido\", true},\n\t\t{\"zone\", \"nome/nonvalido\", true},\n\t\t{\"zone\", \"nome\", false},\n\t\t{\"zone\", \"nome-valido\", false},\n\t\t{\"zone\", \"nome-Non-Valido\", true},\n\t\t{\"zone\", \"permguard\", true},\n\t\t{\"zone\", \"permguardpippo\", true},\n\t\t{\"\", \"nome-valido\", false},\n\t}\n\tfor _, tc := range testCases {\n\t\tresult := ValidateName(tc.entity, tc.name)\n\t\tif tc.hasError {\n\t\t\tassert.NotNil(result, \"error should not be nil\")\n\t\t\tassert.True(cerrors.AreErrorsEqual(cerrors.ErrClientName, result), \"error should be ErrClientName\")\n\t\t} else {\n\t\t\tassert.Nil(result, \"error should be nil\")\n\t\t}\n\t}\n}"
