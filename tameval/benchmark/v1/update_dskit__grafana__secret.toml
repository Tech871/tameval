[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "grafana/dskit"
sha = "22a660c7415734a00f68fde15a1e0fcf3b7a830d"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out flagext/secret.go flagext/secret_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting flagext/secret.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 50.0
original_coverage = 75.0
mutation_kill_rate = 67.0
original_mutation_kill_rate = 67.0
covered_lines = [ 17, 18, 19, 20, 23, 24, 29, 33, 34, 35, 36, 37,]
missed_lines = [ 3, 4, 5, 12, 13, 14, 25, 26, 27, 41, 42, 43,]

[input_info]
test_file_path = "flagext/secret_test.go"
focal_file_path = "flagext/secret.go"
test_file_url = "https://github.com/grafana/dskit/blob/22a660c7415734a00f68fde15a1e0fcf3b7a830d/flagext/secret_test.go"
focal_file_url = "https://github.com/grafana/dskit/blob/22a660c7415734a00f68fde15a1e0fcf3b7a830d/flagext/secret.go"
first_commit_date = "2021-08-19"
last_commit_date = "2025-03-05"
test_file_content = "package flagext\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"gopkg.in/yaml.v2\"\n)\n\nfunc TestSecretdYAML(t *testing.T) {\n\t// Test embedding of Secret.\n\t{\n\t\ttype TestStruct struct {\n\t\t\tSecret Secret `yaml:\"secret\"`\n\t\t}\n\n\t\tvar testStruct TestStruct\n\t\trequire.NoError(t, testStruct.Secret.Set(\"pa55w0rd\"))\n\t\texpected := []byte(`secret: '********'\n`)\n\n\t\tactual, err := yaml.Marshal(testStruct)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, expected, actual)\n\n\t\tvar actualStruct TestStruct\n\t\tyamlSecret := []byte(`secret: pa55w0rd\n`)\n\t\terr = yaml.Unmarshal(yamlSecret, &actualStruct)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, testStruct, actualStruct)\n\t}\n\n\t// Test pointers of Secret.\n\t{\n\t\ttype TestStruct struct {\n\t\t\tSecret *Secret `yaml:\"secret\"`\n\t\t}\n\n\t\tvar testStruct TestStruct\n\t\ttestStruct.Secret = &Secret{}\n\t\trequire.NoError(t, testStruct.Secret.Set(\"pa55w0rd\"))\n\t\texpected := []byte(`secret: '********'\n`)\n\n\t\tactual, err := yaml.Marshal(testStruct)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, expected, actual)\n\n\t\tvar actualStruct TestStruct\n\t\tyamlSecret := []byte(`secret: pa55w0rd\n`)\n\t\terr = yaml.Unmarshal(yamlSecret, &actualStruct)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, testStruct, actualStruct)\n\t}\n\n\t// Test no value set in Secret.\n\t{\n\t\ttype TestStruct struct {\n\t\t\tSecret Secret `yaml:\"secret\"`\n\t\t}\n\t\tvar testStruct TestStruct\n\t\texpected := []byte(`secret: \"\"\n`)\n\n\t\tactual, err := yaml.Marshal(testStruct)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, expected, actual)\n\n\t\tvar actualStruct TestStruct\n\t\terr = yaml.Unmarshal(expected, &actualStruct)\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, testStruct, actualStruct)\n\t}\n}"
