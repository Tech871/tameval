[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.1"

[repo_info]
repository = "argoproj/argo-workflows"
sha = "1f738e60f00c7983a47197e49e0c1bc6792e924e"

[run_info]
docker_image = "golang:1.23.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out util/json/json.go util/json/json_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting util/json/json.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 14.29
original_coverage = 53.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = nan
covered_lines = [ 63, 64, 65, 66,]
missed_lines = [ 14, 15, 16, 19, 20, 21, 24, 25, 26, 29, 30, 31, 34, 35, 36, 40, 41, 42, 43, 49, 50, 51, 52, 53, 54, 58, 59, 60,]

[input_info]
test_file_path = "util/json/json_test.go"
focal_file_path = "util/json/json.go"
test_file_url = "https://github.com/argoproj/argo-workflows/blob/1f738e60f00c7983a47197e49e0c1bc6792e924e/util/json/json_test.go"
focal_file_url = "https://github.com/argoproj/argo-workflows/blob/1f738e60f00c7983a47197e49e0c1bc6792e924e/util/json/json.go"
first_commit_date = "2020-01-15"
last_commit_date = "2025-03-24"
test_file_content = "package json\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n// TestDisallowUnknownFields tests ability to disallow unknown fields\n\nfunc TestIsJSON(t *testing.T) {\n\tassert.True(t, IsJSON([]byte(`\"foo\"`)))\n\tassert.True(t, IsJSON([]byte(`{\"a\": \"b\"}`)))\n\tassert.True(t, IsJSON([]byte(`[{\"a\": \"b\"}]`)))\n\tassert.False(t, IsJSON([]byte(`foo`)))\n\tassert.False(t, IsJSON([]byte(`foo: bar`)))\n}\n"
