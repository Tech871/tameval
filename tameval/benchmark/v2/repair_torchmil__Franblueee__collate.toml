[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Franblueee/torchmil"
sha = "733d8fafb5c020313cca7fe3e5c8ce9c28d13a09"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=torchmil/data/collate.py -m pytest -q --junit-xml=test_output.xml tests/data/test_collate.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target torchmil.data.collate --unit-test tests.data.test_collate --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target torchmil/data/collate.py --unit-test tests/data/test_collate.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = [ 0, 1, 3, 6, 21, 22, 23, 28, 29, 31, 32, 38, 42, 43, 44, 45, 47, 50, 73, 74, 75, 76, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 98, 102, 103, 106,]
missed_lines = [ 82, 104,]

[input_info]
test_file_path = "tests/data/test_collate.py"
focal_file_path = "torchmil/data/collate.py"
test_file_url = "https://github.com/Franblueee/torchmil/blob/733d8fafb5c020313cca7fe3e5c8ce9c28d13a09/tests/data/test_collate.py"
focal_file_url = "https://github.com/Franblueee/torchmil/blob/733d8fafb5c020313cca7fe3e5c8ce9c28d13a09/torchmil/data/collate.py"
first_commit_date = "2025-01-21"
last_commit_date = "2025-06-09"
test_file_content = "import torch\nfrom torchmil.data.collate import pad_tensors, collate_fn\nfrom tensordict import TensorDict\n\n\ndef test_pad_tensors_single_tensor():\n    tensor = torch.tensor([[1, 2], [3, 4]])\n    padded_tensor, mask = pad_tensors([tensor], padding_value=0)\n\n\n\ndef test_pad_tensors_multiple_tensors():\n    tensor1 = torch.tensor([[1, 2], [3, 4]])\n    tensor2 = torch.tensor([[5, 6]])\n    padded_tensor, mask = pad_tensors([tensor1, tensor2], padding_value=0)\n\n\n\ndef test_collate_fn_dense_tensors():\n    batch_list = [\n        {\"data\": torch.tensor([[1, 2], [3, 4]])},\n        {\"data\": torch.tensor([[5, 6]])},\n    ]\n    result = collate_fn(batch_list, sparse=False)\n\n\n\ndef test_collate_fn_sparse_tensors():\n    sparse_tensor1 = torch.sparse_coo_tensor(\n        indices=[[0, 1], [0, 1]], values=[1, 2], size=(2, 2)\n    )\n    sparse_tensor2 = torch.sparse_coo_tensor(\n        indices=[[0], [0]], values=[3], size=(2, 2)\n    )\n    batch_list = [{\"data\": sparse_tensor1}, {\"data\": sparse_tensor2}]\n    result = collate_fn(batch_list, sparse=True)"
