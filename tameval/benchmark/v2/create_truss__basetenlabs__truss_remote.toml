[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "basetenlabs/truss"
sha = "9d37d8696d3229f91970f999827fcda0a5aed410"
bench_version = 2

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=truss/remote/truss_remote.py -m pytest -q --junit-xml=test_output.xml truss/tests/remote/test_truss_remote.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target truss.remote.truss_remote --unit-test truss.tests.remote.test_truss_remote --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target truss/remote/truss_remote.py --unit-test truss/tests/remote/test_truss_remote.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 66.0
original_coverage = 71.0
mutation_kill_rate = 12.0
original_mutation_kill_rate = 12.0
covered_lines = [ 0, 1, 2, 4, 6, 8, 11, 14, 15, 17, 22, 40, 41, 42, 44, 68, 69, 71, 72, 73, 74, 84, 89, 91, 92, 101, 102, 116, 117, 131, 144, 150, 151, 161, 162, 163, 169, 170, 171, 177, 178, 185, 201, 204, 205, 208, 209, 222, 223, 232, 233, 246, 247, 267, 268, 271, 272, 275, 276,]
missed_lines = [ 7, 18, 19, 75, 76, 77, 78, 82, 85, 99, 112, 113, 114, 127, 128, 129, 142, 148, 159, 167, 175, 182, 202, 206, 277, 278, 279, 280, 281, 282, 284,]

[input_info]
test_file_path = "truss/tests/remote/test_truss_remote.py"
focal_file_path = "truss/remote/truss_remote.py"
test_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/tests/remote/test_truss_remote.py"
focal_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/remote/truss_remote.py"
first_commit_date = "2023-07-06"
last_commit_date = "2025-03-19"
test_file_content = "from typing import Iterator\nfrom unittest import mock\n\nimport pytest\nfrom requests import Response\n\nfrom truss.remote.truss_remote import TrussService\n\nTEST_SERVICE_URL = \"http://test.com\"\n\n\nclass TrussTestService(TrussService):\n    def __init__(self, _service_url: str, is_draft: bool, **kwargs):\n        super().__init__(_service_url, is_draft, **kwargs)\n\n    def authenticate(self):\n        return {}\n\n    def is_live(self) -> bool:\n        response = self._send_request(self._service_url, \"GET\")\n        if response.status_code == 200:\n            return True\n        return False\n\n    def is_ready(self) -> bool:\n        response = self._send_request(self._service_url, \"GET\")\n        if response.status_code == 200:\n            return True\n        return False\n\n    @property\n    def logs_url(self) -> str:\n        raise NotImplementedError()\n\n    @property\n    def predict_url(self) -> str:\n        return f\"{self._service_url}/v1/models/model:predict\"\n\n    def poll_deployment_status(self, sleep_secs: int = 1) -> Iterator[str]:\n        for status in [\"DEPLOYING\", \"ACTIVE\"]:\n            yield status\n\n\ndef mock_successful_response():\n    response = Response()\n    response.status_code = 200\n    response.json = mock.Mock(return_value={\"data\": {\"status\": \"success\"}})\n    return response\n\n\ndef mock_unsuccessful_response():\n    response = Response()\n    response.status_code = 404\n    return response\n\n\n\n\n\n\n@mock.patch(\"requests.request\", return_value=mock_successful_response())\ndef test_is_ready(mock_request):\n    service = TrussTestService(TEST_SERVICE_URL, True)\n    assert service.is_ready()\n\n\n\n\n"
