[meta]
task = "repair"
scenario = "repair_duplicate_entity"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "splunk/qbec"
sha = "57f20857bab8d25c968757a7e07bd83847c97e7b"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out vm/vars.go vm/vars_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting vm/vars.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 91.0
mutation_kill_rate = nan
original_mutation_kill_rate = 71.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "vm/vars_test.go"
focal_file_path = "vm/vars.go"
test_file_url = "https://github.com/splunk/qbec/blob/57f20857bab8d25c968757a7e07bd83847c97e7b/vm/vars_test.go"
focal_file_url = "https://github.com/splunk/qbec/blob/57f20857bab8d25c968757a7e07bd83847c97e7b/vm/vars.go"
first_commit_date = "2021-09-09"
last_commit_date = "2025-04-14"
test_file_content = "package vm\n\nimport (\n\t\"testing\"\n\n\t\"github.com/google/go-jsonnet\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestVMScratchVariableSet(t *testing.T) {\n\ta := assert.New(t)\n\tc := VariableSet{}\n\ta.Nil(c.Vars())\n\ta.Nil(c.TopLevelVars())\n\n\texts := []Var{\n\t\tNewVar(\"ext-foo\", \"bar\"),\n\t\tNewCodeVar(\"ext-code-foo\", \"true\"),\n\t}\n\ttlas := []Var{\n\t\tNewVar(\"tla-foo\", \"bar\"),\n\t\tNewVar(\"tls-bar\", \"baz\"),\n\t\tNewCodeVar(\"tla-code-foo\", \"100\"),\n\t\tNewCodeVar(\"tla-code-bar\", \"true\"),\n\t}\n\n\tc = c.WithVars(exts...).\n\t\tWithTopLevelVars(tlas...)\n\ta.Equal(2, len(c.Vars()))\n\ta.Equal(4, len(c.TopLevelVars()))\n\ta.True(c.HasTopLevelVar(\"tla-foo\"))\n\ta.True(c.HasTopLevelVar(\"tla-code-foo\"))\n\ta.False(c.HasTopLevelVar(\"ext-foo\"))\n\ta.False(c.HasTopLevelVar(\"ext-code-foo\"))\n\n\ta.False(c.HasVar(\"tla-foo\"))\n\ta.False(c.HasVar(\"tla-code-foo\"))\n\ta.True(c.HasVar(\"ext-foo\"))\n\ta.True(c.HasVar(\"ext-code-foo\"))\n\n\tc = c.WithoutTopLevel()\n\ta.False(c.HasTopLevelVar(\"tla-foo\"))\n\ta.False(c.HasTopLevelVar(\"tla-code-foo\"))\n}\n\nfunc TestVMScratchVariableSet(t *testing.T) {\n\ta := assert.New(t)\n\tc := VariableSet{}\n\ta.Nil(c.Vars())\n\ta.Nil(c.TopLevelVars())\n\n\texts := []Var{\n\t\tNewVar(\"ext-foo\", \"bar\"),\n\t\tNewCodeVar(\"ext-code-foo\", \"true\"),\n\t}\n\ttlas := []Var{\n\t\tNewVar(\"tla-foo\", \"bar\"),\n\t\tNewVar(\"tls-bar\", \"baz\"),\n\t\tNewCodeVar(\"tla-code-foo\", \"100\"),\n\t\tNewCodeVar(\"tla-code-bar\", \"true\"),\n\t}\n\n\tc = c.WithVars(exts...).\n\t\tWithTopLevelVars(tlas...)\n\ta.Equal(2, len(c.Vars()))\n\ta.Equal(4, len(c.TopLevelVars()))\n\ta.True(c.HasTopLevelVar(\"tla-foo\"))\n\ta.True(c.HasTopLevelVar(\"tla-code-foo\"))\n\ta.False(c.HasTopLevelVar(\"ext-foo\"))\n\ta.False(c.HasTopLevelVar(\"ext-code-foo\"))\n\n\ta.False(c.HasVar(\"tla-foo\"))\n\ta.False(c.HasVar(\"tla-code-foo\"))\n\ta.True(c.HasVar(\"ext-foo\"))\n\ta.True(c.HasVar(\"ext-code-foo\"))\n\n\tc = c.WithoutTopLevel()\n\ta.False(c.HasTopLevelVar(\"tla-foo\"))\n\ta.False(c.HasTopLevelVar(\"tla-code-foo\"))\n}\n\nfunc TestVMNoopVariableSet(t *testing.T) {\n\tc := VariableSet{}\n\tnewC := c.WithoutTopLevel().WithVars().\n\t\tWithTopLevelVars()\n\tassert.Equal(t, &newC, &c)\n}\n\nfunc TestVMNoopVariableSet(t *testing.T) {\n\tc := VariableSet{}\n\tnewC := c.WithoutTopLevel().WithVars().\n\t\tWithTopLevelVars()\n\tassert.Equal(t, &newC, &c)\n}\n\nfunc TestVMBadCodeVar(t *testing.T) {\n\tc := VariableSet{}.WithVars(NewCodeVar(\"foo\", \"{ foo: bar\"))\n\tjvm := jsonnet.MakeVM()\n\tc.register(jvm)\n\t_, err := jvm.EvaluateAnonymousSnippet(\"foo.jsonnet\", `std.extVar('foo')`)\n\trequire.Error(t, err)\n\tassert.Contains(t, err.Error(), \"<extvar:foo>:1:11 Expected a comma before next field\")\n}\n\nfunc TestVMBadCodeVar(t *testing.T) {\n\tc := VariableSet{}.WithVars(NewCodeVar(\"foo\", \"{ foo: bar\"))\n\tjvm := jsonnet.MakeVM()\n\tc.register(jvm)\n\t_, err := jvm.EvaluateAnonymousSnippet(\"foo.jsonnet\", `std.extVar('foo')`)\n\trequire.Error(t, err)\n\tassert.Contains(t, err.Error(), \"<extvar:foo>:1:11 Expected a comma before next field\")\n}\n\nfunc TestVMBadTLACodeVar(t *testing.T) {\n\tc := VariableSet{}.WithTopLevelVars(NewCodeVar(\"foo\", \"{ foo: bar\"))\n\tjvm := jsonnet.MakeVM()\n\tc.register(jvm)\n\t_, err := jvm.EvaluateAnonymousSnippet(\"foo.jsonnet\", `function (foo) foo`)\n\trequire.Error(t, err)\n\tassert.Contains(t, err.Error(), \"<top-level-arg:foo>:1:11 Expected a comma before next field\")\n}\n\nfunc TestVMBadTLACodeVar(t *testing.T) {\n\tc := VariableSet{}.WithTopLevelVars(NewCodeVar(\"foo\", \"{ foo: bar\"))\n\tjvm := jsonnet.MakeVM()\n\tc.register(jvm)\n\t_, err := jvm.EvaluateAnonymousSnippet(\"foo.jsonnet\", `function (foo) foo`)\n\trequire.Error(t, err)\n\tassert.Contains(t, err.Error(), \"<top-level-arg:foo>:1:11 Expected a comma before next field\")\n}\n\nfunc TestVMBadCodeVarNoRef(t *testing.T) {\n\tc := VariableSet{}.WithVars(NewCodeVar(\"foo\", \"{ foo: bar\"))\n\tjvm := jsonnet.MakeVM()\n\tc.register(jvm)\n\tret, err := jvm.EvaluateAnonymousSnippet(\"foo.jsonnet\", `10`)\n\trequire.NoError(t, err)\n\tassert.Equal(t, \"10\\n\", ret)\n}\n\nfunc TestVMBadCodeVarNoRef(t *testing.T) {\n\tc := VariableSet{}.WithVars(NewCodeVar(\"foo\", \"{ foo: bar\"))\n\tjvm := jsonnet.MakeVM()\n\tc.register(jvm)\n\tret, err := jvm.EvaluateAnonymousSnippet(\"foo.jsonnet\", `10`)\n\trequire.NoError(t, err)\n\tassert.Equal(t, \"10\\n\", ret)\n}"
