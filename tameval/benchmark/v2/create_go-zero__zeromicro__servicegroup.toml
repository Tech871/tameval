[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "zeromicro/go-zero"
sha = "6edfce63e396883d83ee74ceba2e0d9d11f0626d"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out core/service/servicegroup.go core/service/servicegroup_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting core/service/servicegroup.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 71.0
original_coverage = 100.0
mutation_kill_rate = 38.0
original_mutation_kill_rate = 46.0
covered_lines = [ 35, 36, 37, 38, 39, 42, 43, 44, 45, 50, 51, 52, 53, 54, 56, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85,]
missed_lines = [ 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 116, 117, 119, 120, 121,]

[input_info]
test_file_path = "core/service/servicegroup_test.go"
focal_file_path = "core/service/servicegroup.go"
test_file_url = "https://github.com/zeromicro/go-zero/blob/6edfce63e396883d83ee74ceba2e0d9d11f0626d/core/service/servicegroup_test.go"
focal_file_url = "https://github.com/zeromicro/go-zero/blob/6edfce63e396883d83ee74ceba2e0d9d11f0626d/core/service/servicegroup.go"
first_commit_date = "2020-07-26"
last_commit_date = "2025-01-01"
test_file_content = "package service\n\nimport (\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/zeromicro/go-zero/core/proc\"\n)\n\nvar (\n\tnumber = 1\n\tmutex  sync.Mutex\n\tdone   = make(chan struct{})\n)\n\nfunc TestServiceGroup(t *testing.T) {\n\tmultipliers := []int{2, 3, 5, 7}\n\twant := 1\n\n\tgroup := NewServiceGroup()\n\tfor _, multiplier := range multipliers {\n\t\twant *= multiplier\n\t\tservice := newMockedService(multiplier)\n\t\tgroup.Add(service)\n\t}\n\n\tgo group.Start()\n\n\tfor i := 0; i < len(multipliers); i++ {\n\t\t<-done\n\t}\n\n\tgroup.Stop()\n\tproc.Shutdown()\n\n\tmutex.Lock()\n\tdefer mutex.Unlock()\n\tassert.Equal(t, want, number)\n}\n\n\n\ntype mockedStarter struct {\n\tfn func()\n}\n\nfunc (s mockedStarter) Start() {\n\ts.fn()\n}\n\ntype mockedService struct {\n\tquit       chan struct{}\n\tmultiplier int\n}\n\nfunc newMockedService(multiplier int) *mockedService {\n\treturn &mockedService{\n\t\tquit:       make(chan struct{}),\n\t\tmultiplier: multiplier,\n\t}\n}\n\nfunc (s *mockedService) Start() {\n\tmutex.Lock()\n\tnumber *= s.multiplier\n\tmutex.Unlock()\n\tdone <- struct{}{}\n\t<-s.quit\n}\n\nfunc (s *mockedService) Stop() {\n\tclose(s.quit)\n}\n"
