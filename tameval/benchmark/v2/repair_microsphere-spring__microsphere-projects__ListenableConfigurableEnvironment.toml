[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-spring"
sha = "8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-spring-context -Dtest=ListenableConfigurableEnvironmentTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-spring-context -DtargetClasses=**.ListenableConfigurableEnvironment  -DtargetTests=**.ListenableConfigurableEnvironmentTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-spring-context/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-spring-context/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 56.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "microsphere-spring-context/src/test/java/io/microsphere/spring/core/env/ListenableConfigurableEnvironmentTest.java"
focal_file_path = "microsphere-spring-context/src/main/java/io/microsphere/spring/core/env/ListenableConfigurableEnvironment.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/test/java/io/microsphere/spring/core/env/ListenableConfigurableEnvironmentTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/main/java/io/microsphere/spring/core/env/ListenableConfigurableEnvironment.java"
first_commit_date = "2024-11-21"
last_commit_date = "2025-01-06"
test_file_content = "\npackage io.microsphere.spring.core.env;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.support.ConfigurableConversionService;\nimport org.springframework.core.env.ConfigurableEnvironment;\nimport org.springframework.core.env.MutablePropertySources;\nimport org.springframework.core.env.Profiles;\nimport org.springframework.format.support.DefaultFormattingConversionService;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.context.junit.jupiter.SpringExtension;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNotSame;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n\n@ExtendWith(SpringExtension.class)\n@ContextConfiguration(\n        classes = ListenableConfigurableEnvironmentTest.class,\n        initializers = ListenableConfigurableEnvironmentInitializer.class\n)\n@TestPropertySource(\n        properties = {\n                \"microsphere.spring.listenable-environment.enabled=true\",\n                \"spring.profiles.active=test\",\n                \"user.name=Mercy\",\n                \"score=99\"\n        }\n)\npublic class ListenableConfigurableEnvironmentTest {\n\n    @Autowired\n    private ListenableConfigurableEnvironment environment;\n\n    \n    @Test\n    public void testSetActiveProfiles() {\n        String[] activeProfiles = environment.getActiveProfiles();\n        environment.setActiveProfiles(activeProfiles, \"extraProfile\");\n    }\n\n    \n    @Test\n    public void testAddActiveProfile() {\n        environment.addActiveProfile(\"dev\", \"prod\");\n    }\n\n    \n    @Test\n    public void testSetDefaultProfiles() {\n        environment.setDefaultProfiles(\"default\");\n    }\n\n    \n    @Test\n    public void testGetPropertySources() {\n        MutablePropertySources propertySources = environment.getPropertySources();\n        assertNotNull(propertySources);\n        propertySources.enableLogging();\n    }\n\n    \n    @Test\n    public void testGetSystemProperties() {\n        assertSame(System.getProperties(), environment.getSystemProperties());\n        environment.getSystemProperties().refresh();\n    }\n\n    \n    @Test\n    public void testGetSystemEnvironment() {\n        assertSame(System.getenv(), environment.getSystemEnvironment());\n    }\n\n    \n    @Test\n    public void testMerge() {\n        environment.merge(environment, true);\n    }\n\n    \n    @Test\n    public void testGetActiveProfiles() {\n        String[] activeProfiles = environment.getActiveProfiles();\n        assertEquals(1, activeProfiles.length);\n        assertEquals(\"test\", activeProfiles[0]);\n        environment.clearActiveProfiles();\n    }\n\n    \n    @Test\n    public void testGetDefaultProfiles() {\n        String[] defaultProfiles = environment.getDefaultProfiles();\n        assertEquals(1, defaultProfiles.length);\n        assertEquals(\"default\", defaultProfiles[0]);\n    }\n\n    \n    @Test\n    public void testMatchesProfiles() {\n        assertTrue(environment.matchesProfiles(\"test\"));\n        assertFalse(environment.matchesProfiles(\"!test\"));\n    }\n\n    \n    @Test\n    public void testAcceptsProfiles() {\n        assertTrue(environment.acceptsProfiles(\"test\"));\n        assertTrue(environment.acceptsProfiles(profile -> true));\n        ListenableConfigurableEnvironment newEnv = new ListenableConfigurableEnvironment();\n    }\n\n    \n    @Test\n    public void testContainsProperty() {\n        assertTrue(environment.containsProperty(\"user.name\"));\n    }\n\n    \n    @Test\n    public void testGetProperty() {\n        String userName = environment.getProperty(\"user.name\");\n        assertEquals(\"Mercy\", userName);\n\n        String notFound = environment.getProperty(\"not.found\", \"not.found\");\n        assertEquals(\"not.found\", notFound);\n\n        int scope = environment.getProperty(\"score\", int.class);\n        assertEquals(99, scope);\n\n        scope = environment.getProperty(\"your.score\", int.class, 100);\n        assertEquals(100, scope);\n    }\n\n    \n    @Test\n    public void testGetRequiredProperty() {\n        String userName = environment.getRequiredProperty(\"user.name\");\n        assertEquals(\"Mercy\", userName);\n\n        int scope = environment.getRequiredProperty(\"score\", int.class);\n        assertEquals(99, scope);\n        environment.getRequiredProperties();\n    }\n\n    \n    @Test\n    public void testResolvePlaceholders() {\n        String userName = environment.resolvePlaceholders(\"${user.name}\");\n        assertEquals(\"Mercy\", userName);\n    }\n\n    \n    @Test\n    public void testResolveRequiredPlaceholders() {\n        String userName = environment.resolveRequiredPlaceholders(\"${user.name}\");\n        assertEquals(\"Mercy\", userName);\n    }\n\n    \n    @Test\n    public void testGetConversionService() {\n        ConfigurableConversionService conversionService = environment.getConversionService();\n        assertNotNull(conversionService);\n        conversionService.executeConversion(\"test\", String.class);\n    }\n\n    \n    @Test\n    public void testSetConversionService() {\n        environment.setConversionService(new DefaultFormattingConversionService());\n    }\n\n    \n    @Test\n    public void testSetPlaceholderPrefix() {\n        environment.setPlaceholderPrefix(\"${\");\n    }\n\n    \n    @Test\n    public void testSetPlaceholderSuffix() {\n        environment.setPlaceholderSuffix(\"}\");\n    }\n\n    \n    @Test\n    public void testSetValueSeparator() {\n        environment.setValueSeparator(\"#\");\n    }\n\n    \n    @Test\n    public void testSetIgnoreUnresolvableNestedPlaceholders() {\n        environment.setIgnoreUnresolvableNestedPlaceholders(true);\n    }\n\n    \n    @Test\n    public void testSetRequiredProperties() {\n        environment.setRequiredProperties(\"user.name\");\n    }\n\n    \n    @Test\n    public void testValidateRequiredProperties() {\n        environment.validateRequiredProperties();\n    }\n\n    @Test\n    public void testGetDelegate() {\n        assertTrue(ListenableConfigurableEnvironment.class.isInstance(environment));\n        assertNotSame(environment, environment.getDelegate());\n    }\n}"
