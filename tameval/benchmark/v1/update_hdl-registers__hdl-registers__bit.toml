[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/field/bit.py -m pytest -q --junit-xml=test_output.xml hdl_registers/field/test/test_bit.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.field.bit --unit-test hdl_registers.field.test.test_bit --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/field/bit.py --unit-test hdl_registers/field/test/test_bit.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 42.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 12, 17, 19, 35, 36, 42, 43, 59, 60, 63,]
missed_lines = [ 27, 28, 29, 31, 33, 40, 47, 48, 51, 53, 54, 55, 57, 61, 64,]

[input_info]
test_file_path = "hdl_registers/field/test/test_bit.py"
focal_file_path = "hdl_registers/field/bit.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/field/test/test_bit.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/field/bit.py"
first_commit_date = "2023-07-13"
last_commit_date = "2025-02-11"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\n# Third party libraries\nimport pytest\n\n# First party libraries\nfrom hdl_registers.field.bit import Bit\nfrom hdl_registers.field.register_field_type import Unsigned\n\n\ndef test_get_value():\n    bit = Bit(name=\"\", index=2, description=\"\", default_value=\"1\")\n\n    register_value = int(\"1111011\", base=2)\n    assert bit.get_value(register_value) == 0\n\n    register_value = int(\"0000100\", base=2)\n    assert bit.get_value(register_value) == 1\n\n\ndef test_max_binary_value():\n    bit = Bit(name=\"\", index=0, description=\"\", default_value=\"1\")\n    assert bit.max_binary_value == 0b1\n\n    bit = Bit(name=\"\", index=4, description=\"\", default_value=\"0\")\n    assert bit.max_binary_value == 0b1\n\n\ndef test_set_value():\n    bit = Bit(name=\"\", index=0, description=\"\", default_value=\"1\")\n    assert bit.set_value(0b1) == 0b1\n\n    with pytest.raises(ValueError):\n        bit.set_value(0b11)\n\n    bit = Bit(name=\"\", index=4, description=\"\", default_value=\"0\")\n    assert bit.set_value(0b1) == 0b10000\n\n    with pytest.raises(ValueError):\n        bit.set_value(0b11)\n\n\ndef test_repr():\n    # Check that repr is an actual representation, not just \"X object at 0xABCDEF\"\n    assert \"apa\" in repr(Bit(name=\"apa\", index=0, description=\"\", default_value=\"0\"))\n\n    # Different name\n    assert repr(Bit(name=\"apa\", index=0, description=\"\", default_value=\"0\")) != repr(\n        Bit(name=\"hest\", index=0, description=\"\", default_value=\"0\")\n    )\n\n    # Different index\n    assert repr(Bit(name=\"apa\", index=0, description=\"\", default_value=\"0\")) != repr(\n        Bit(name=\"apa\", index=1, description=\"\", default_value=\"0\")\n    )\n\n    # Different description\n    assert repr(Bit(name=\"apa\", index=0, description=\"Blah\", default_value=\"0\")) != repr(\n        Bit(name=\"apa\", index=0, description=\"Gaah\", default_value=\"0\")\n    )\n\n    # Different default_value\n    assert repr(Bit(name=\"apa\", index=0, description=\"\", default_value=\"1\")) != repr(\n        Bit(name=\"apa\", index=0, description=\"\", default_value=\"0\")\n    )\n\n\ndef test_default_value_uint():\n    assert Bit(name=\"apa\", index=0, description=\"\", default_value=\"1\").default_value_uint == 1\n    assert Bit(name=\"apa\", index=0, description=\"\", default_value=\"0\").default_value_uint == 0\n\n\ndef test_invalid_default_value_should_raise_exception():\n    with pytest.raises(ValueError) as exception_info:\n        Bit(name=\"hest\", index=0, description=\"\", default_value=1)\n    assert str(exception_info.value) == (\n        'Bit \"hest\" should have string value for \"default_value\". Got \"1\".'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        Bit(name=\"hest\", index=0, description=\"\", default_value=\"11\")\n    assert str(exception_info.value) == (\n        'Bit \"hest\" invalid binary value for \"default_value\". Got: \"11\".'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        Bit(name=\"hest\", index=0, description=\"\", default_value=\"2\")\n    assert str(exception_info.value) == (\n        'Bit \"hest\" invalid binary value for \"default_value\". Got: \"2\".'\n    )\n\n\ndef test_can_update_default_value():\n    bit = Bit(name=\"hest\", index=0, description=\"\", default_value=\"1\")\n    assert bit.default_value == \"1\"\n\n    bit.default_value = \"0\"\n    assert bit.default_value == \"0\"\n\n\ndef test_updating_to_invalid_default_value_should_raise_exception():\n    # Create with a valid default_value\n    bit = Bit(name=\"hest\", index=0, description=\"\", default_value=\"1\")\n\n    # Update to an invalid value\n    with pytest.raises(ValueError) as exception_info:\n        bit.default_value = \"2\"\n    assert str(exception_info.value) == (\n        'Bit \"hest\" invalid binary value for \"default_value\". Got: \"2\".'\n    )\n\n\ndef test_field_type():\n    bit = Bit(name=\"test\", index=0, description=\"\", default_value=\"1\")\n    assert isinstance(bit.field_type, Unsigned)"
