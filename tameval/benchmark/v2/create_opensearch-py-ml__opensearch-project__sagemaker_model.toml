[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.10"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "opensearch-project/opensearch-py-ml"
sha = "899cb82c8a383925501258dd30098bfa612e8af5"

[run_info]
docker_image = "python:3.10"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-dev.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=opensearch_py_ml/ml_commons/cli/ml_models/sagemaker_model.py -m pytest -q --junit-xml=test_output.xml tests/cli/test_ml_models/test_sagemaker_model.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target opensearch_py_ml.ml_commons.cli.ml_models.sagemaker_model --unit-test tests.cli.test_ml_models.test_sagemaker_model --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target opensearch_py_ml/ml_commons/cli/ml_models/sagemaker_model.py --unit-test tests/cli/test_ml_models/test_sagemaker_model.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 93.0
original_coverage = 93.0
mutation_kill_rate = 84.0
original_mutation_kill_rate = 84.0
covered_lines = [ 7, 9, 11, 12, 15, 16, 24, 25, 27, 33, 70, 73, 77, 78, 81, 83, 86, 92, 95, 122, 156, 159, 162, 166, 170, 177, 183, 187, 189, 193, 205, 206, 226, 227, 230, 231, 245, 247, 248,]
missed_lines = [ 215, 220, 221,]

[input_info]
test_file_path = "tests/cli/test_ml_models/test_sagemaker_model.py"
focal_file_path = "opensearch_py_ml/ml_commons/cli/ml_models/sagemaker_model.py"
test_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/tests/cli/test_ml_models/test_sagemaker_model.py"
focal_file_url = "https://github.com/opensearch-project/opensearch-py-ml/blob/899cb82c8a383925501258dd30098bfa612e8af5/opensearch_py_ml/ml_commons/cli/ml_models/sagemaker_model.py"
first_commit_date = "2025-04-25"
last_commit_date = "2025-05-27"
test_file_content = "# SPDX-License-Identifier: Apache-2.0\n# The OpenSearch Contributors require contributions made to\n# this file be licensed under the Apache-2.0 license or a\n# compatible open source license.\n# Any modifications Copyright OpenSearch Contributors. See\n# GitHub history for details.\n\nimport unittest\nfrom unittest.mock import Mock, patch\n\nfrom colorama import Fore, Style\n\nfrom opensearch_py_ml.ml_commons.cli.ml_models.sagemaker_model import SageMakerModel\n\n\nclass TestSageMakerModel(unittest.TestCase):\n\n    def setUp(self):\n        self.region = \"us-west-2\"\n        self.service_type = SageMakerModel.AMAZON_OPENSEARCH_SERVICE\n        self.mock_helper = Mock()\n        self.mock_save_config = Mock()\n        self.sagemaker_model = SageMakerModel(\n            opensearch_domain_region=self.region, service_type=self.service_type\n        )\n        self.connector_role_prefix = \"test_role\"\n        self.connector_endpoint_arn = \"test_arn\"\n        self.connector_endpoint_url = \"test_url\"\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.set_trusted_endpoint\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\"builtins.input\", side_effect=[\"test-url\", \"\"])\n    @patch(\"builtins.print\")\n    def test_create_connector_deepseek(\n        self, mock_print, mock_input, mock_get_model_details, mock_set_trusted_endpoint\n    ):\n        \"\"\"Test creating a SageMaker connector with DeepSeek R1 model\"\"\"\n        # Setup mocks\n        mock_get_model_details.return_value = \"1\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        result = self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            model_name=\"DeepSeek R1 model\",\n            endpoint_arn=self.connector_endpoint_arn,\n        )\n\n        # Verify method calls\n        mock_set_trusted_endpoint.assert_called_once_with(\n            self.mock_helper,\n            \"^https://runtime\\\\.sagemaker\\\\..*[a-z0-9-]\\\\.amazonaws\\\\.com/.*$\",\n        )\n        mock_get_model_details.assert_called_once_with(\n            \"Amazon SageMaker\",\n            SageMakerModel.AMAZON_OPENSEARCH_SERVICE,\n            \"DeepSeek R1 model\",\n        )\n        mock_input.assert_any_call(\"Enter your SageMaker inference endpoint URL: \")\n        mock_input.assert_any_call(f\"Enter your SageMaker region [{self.region}]: \")\n        self.assertTrue(result)\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.set_trusted_endpoint\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\"builtins.input\", side_effect=[\"test-url\", \"\"])\n    @patch(\"builtins.print\")\n    def test_create_connector_embedding(\n        self, mock_print, mock_input, mock_get_model_details, mock_set_trusted_endpoint\n    ):\n        \"\"\"Test creating a SageMaker connector with embedding model\"\"\"\n        # Setup mocks\n        mock_get_model_details.return_value = \"2\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        result = self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Embedding model\",\n            endpoint_arn=self.connector_endpoint_arn,\n        )\n\n        # Verify method cals\n        mock_set_trusted_endpoint.assert_called_once_with(\n            self.mock_helper,\n            \"^https://runtime\\\\.sagemaker\\\\..*[a-z0-9-]\\\\.amazonaws\\\\.com/.*$\",\n        )\n        mock_get_model_details.assert_called_once_with(\n            \"Amazon SageMaker\",\n            SageMakerModel.AMAZON_OPENSEARCH_SERVICE,\n            \"Embedding model\",\n        )\n        mock_input.assert_any_call(\"Enter your SageMaker inference endpoint URL: \")\n        self.assertTrue(result)\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.input_custom_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.set_trusted_endpoint\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    def test_create_connector_custom_model(\n        self, mock_get_model_details, mock_set_trusted_endpoint, mock_custom_model\n    ):\n        \"\"\"Test creating a SageMaker connector with custom model\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        mock_custom_model.return_value = {\n            \"name\": \"Custom Model\",\n            \"description\": \"Custom description\",\n            \"version\": \"1\",\n        }\n\n        result = self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Custom model\",\n            endpoint_arn=self.connector_endpoint_arn,\n            endpoint_url=self.connector_endpoint_url,\n        )\n\n        # Verify method calls\n        mock_set_trusted_endpoint.assert_called_once_with(\n            self.mock_helper,\n            \"^https://runtime\\\\.sagemaker\\\\..*[a-z0-9-]\\\\.amazonaws\\\\.com/.*$\",\n        )\n        mock_get_model_details.assert_called_once_with(\n            \"Amazon SageMaker\", SageMakerModel.AMAZON_OPENSEARCH_SERVICE, \"Custom model\"\n        )\n        mock_custom_model.assert_called_once()\n        self.assertTrue(result)\n\n    @patch(\"builtins.input\", side_effect=[\"1\"])\n    def test_create_connector_select_model_interactive(self, mock_input):\n        \"\"\"Test create_connector for selecting the model through the prompt\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n\n        result = self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            endpoint_arn=self.connector_endpoint_arn,\n            endpoint_url=self.connector_endpoint_url,\n        )\n        self.mock_helper.create_connector_with_role.assert_called_once()\n        self.assertTrue(result)\n\n    @patch(\"builtins.input\", side_effect=[\"test-endpoint-arn\"])\n    def test_create_connector_endpoint_arn(self, mock_input):\n        \"\"\"Test creating a SageMaker connector when user provides an endpoint ARN through the prompt\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Embedding model\",\n            endpoint_url=self.connector_endpoint_url,\n        )\n        mock_input.assert_any_call(\"Enter your SageMaker inference endpoint ARN: \")\n        connector_role_inline_policy = (\n            self.mock_helper.create_connector_with_role.call_args[0][0]\n        )\n        self.assertEqual(\n            connector_role_inline_policy[\"Statement\"][0][\"Resource\"],\n            \"test-endpoint-arn\",\n        )\n\n    @patch(\"builtins.input\", side_effect=[\"\"])\n    def test_create_connector_default_region(self, mock_input):\n        \"\"\"Test creating a SageMaker connector with default region\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            model_name=\"Embedding model\",\n            endpoint_arn=self.connector_endpoint_arn,\n            endpoint_url=self.connector_endpoint_url,\n        )\n        mock_input.assert_any_call(f\"Enter your SageMaker region [{self.region}]: \")\n        create_connector_calls = (\n            self.mock_helper.create_connector_with_role.call_args_list\n        )\n        self.assertEqual(len(create_connector_calls), 1)\n        _, _, _, connector_body = create_connector_calls[0][0]\n        self.assertEqual(connector_body[\"parameters\"][\"region\"], \"us-west-2\")\n\n    @patch(\"builtins.input\", side_effect=[\"us-east-1\"])\n    def test_create_connector_custom_region(self, mock_input):\n        \"\"\"Test creating a SageMaker connector with a custom region\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            model_name=\"Embedding model\",\n            endpoint_arn=self.connector_endpoint_arn,\n            endpoint_url=self.connector_endpoint_url,\n        )\n        mock_input.assert_any_call(f\"Enter your SageMaker region [{self.region}]: \")\n        create_connector_calls = (\n            self.mock_helper.create_connector_with_role.call_args_list\n        )\n        self.assertEqual(len(create_connector_calls), 1)\n        _, _, _, connector_body = create_connector_calls[0][0]\n        self.assertEqual(connector_body[\"parameters\"][\"region\"], \"us-east-1\")\n\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.input_custom_model_details\"\n    )\n    @patch(\n        \"opensearch_py_ml.ml_commons.cli.ml_models.model_base.ModelBase.get_model_details\"\n    )\n    @patch(\"builtins.print\")\n    def test_create_connector_invalid_choice(\n        self, mock_print, mock_get_model_details, mock_custom_model\n    ):\n        \"\"\"Test creating a SageMaker connector with invalid model choice\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = (\n            \"test_connector_id\",\n            \"test_role_arn\",\n            \"\",\n        )\n        mock_custom_model.return_value = {\n            \"name\": \"Custom Model\",\n            \"description\": \"Custom description\",\n            \"version\": \"1\",\n        }\n        self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Invalid Model\",\n            endpoint_arn=self.connector_endpoint_arn,\n            endpoint_url=self.connector_endpoint_url,\n        )\n        mock_custom_model.assert_called_once()\n        mock_print.assert_any_call(\n            f\"\\n{Fore.YELLOW}Invalid choice. Defaulting to 'Custom model'.{Style.RESET_ALL}\"\n        )\n\n    def test_create_connector_failure(self):\n        \"\"\"Test creating a SageMaker connector in failure scenario\"\"\"\n        self.mock_helper.create_connector_with_role.return_value = None, None, None\n        result = self.sagemaker_model.create_connector(\n            helper=self.mock_helper,\n            save_config_method=self.mock_save_config,\n            connector_role_prefix=self.connector_role_prefix,\n            region=self.region,\n            model_name=\"Embedding model\",\n            endpoint_arn=self.connector_endpoint_arn,\n            endpoint_url=self.connector_endpoint_url,\n        )\n        self.assertFalse(result)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
