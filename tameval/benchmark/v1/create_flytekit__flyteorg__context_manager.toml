[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "flyteorg/flytekit"
sha = "5503ee5e232fdbc633af39c7f4539a04906102fc"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r dev-requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=flytekit/core/context_manager.py -m pytest -q --junit-xml=test_output.xml tests/flytekit/unit/core/test_context_manager.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target flytekit.core.context_manager --unit-test tests.flytekit.unit.core.test_context_manager --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target flytekit/core/context_manager.py --unit-test tests/flytekit/unit/core/test_context_manager.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 75.0
original_coverage = 75.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 66, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 112, 116, 134, 135, 138, 152, 157, 175, 199, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 218, 219, 224, 226, 227, 234, 235, 236, 238, 239, 240, 242, 243, 248, 250, 251, 261, 263, 264, 274, 276, 277, 282, 284, 285, 288, 289, 294, 295, 299, 301, 302, 307, 308, 325, 326, 330, 332, 341, 347, 354, 366, 371, 372, 373, 375, 380, 382, 383, 384, 386, 387, 388, 390, 394, 396, 407, 410, 411, 412, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 431, 437, 439, 446, 447, 449, 455, 456, 457, 460, 461, 475, 476, 477, 478, 480, 483, 505, 513, 514, 517, 518, 535, 545, 550, 554, 557, 559, 561, 563, 565, 566, 567, 568, 569, 571, 579, 581, 582, 583, 584, 585, 586, 588, 595, 602, 613, 621, 622, 630, 636, 639, 640, 641, 644, 645, 646, 649, 652, 653, 662, 664, 667, 670, 682, 683, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 710, 712, 713, 715, 716, 717, 718, 721, 722, 734, 738, 739, 741, 742, 744, 745, 747, 750, 753, 756, 759, 762, 767, 769, 771, 776, 777, 778, 780, 781, 789, 791, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 840, 863, 864, 865, 867, 868, 869, 871, 874, 878, 882, 886, 890, 894, 901, 911, 932, 934, 935, 938, 939, 940, 941, 943, 945, 946, 947, 950, 952, 953, 954, 956, 957, 958, 959, 960, 961, 964, 966, 967, 968, 969, 970, 971, 972, 975, 977, 979, 980, 981, 982, 983, 984, 985, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1014, 1016, 1018, 1019, 1021, 1028, 1029, 1033, 1034, 1045, 1048, 1049, 1052, 1058, 1061,]
missed_lines = [ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 117, 118, 119, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 158, 200, 232, 286, 290, 292, 303, 305, 309, 311, 312, 313, 314, 315, 316, 317, 318, 320, 322, 323, 336, 337, 338, 339, 342, 343, 344, 345, 351, 481, 497, 580, 593, 600, 665, 668, 677, 709, 719, 736, 748, 751, 754, 757, 760, 811, 813, 845, 846, 848, 849, 850, 851, 852, 856, 860, 861, 872, 875, 876, 879, 880, 883, 884, 887, 888, 891, 892, 899, 906, 907, 908, 936, 942, 949, 955, 976, 1022, 1023, 1024,]

[input_info]
test_file_path = "tests/flytekit/unit/core/test_context_manager.py"
focal_file_path = "flytekit/core/context_manager.py"
test_file_url = "https://github.com/flyteorg/flytekit/blob/5503ee5e232fdbc633af39c7f4539a04906102fc/tests/flytekit/unit/core/test_context_manager.py"
focal_file_url = "https://github.com/flyteorg/flytekit/blob/5503ee5e232fdbc633af39c7f4539a04906102fc/flytekit/core/context_manager.py"
first_commit_date = "2021-02-04"
last_commit_date = "2025-03-21"
test_file_content = "import base64\nimport os\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom unittest.mock import Mock\n\nimport mock\nimport py\nimport pytest\n\nimport flytekit.configuration.plugin\nfrom flytekit.configuration import (\n    SERIALIZED_CONTEXT_ENV_VAR,\n    FastSerializationSettings,\n    Image,\n    ImageConfig,\n    SecretsConfig,\n    SerializationSettings,\n)\nfrom flytekit.core import mock_stats, context_manager\nfrom flytekit.core.context_manager import ExecutionParameters, FlyteContext, FlyteContextManager, SecretsManager\nfrom flytekit.models.core import identifier as id_models\n\n\nclass SampleTestClass(object):\n    def __init__(self, value):\n        self.value = value\n\n\ndef test_levels():\n    ctx = FlyteContextManager.current_context()\n    b = ctx.new_builder()\n    b.flyte_client = SampleTestClass(value=1)\n    with FlyteContextManager.with_context(b) as outer:\n        assert outer.flyte_client.value == 1\n        b = outer.new_builder()\n        b.flyte_client = SampleTestClass(value=2)\n        with FlyteContextManager.with_context(b) as ctx:\n            assert ctx.flyte_client.value == 2\n\n        with FlyteContextManager.with_context(outer.with_new_compilation_state()) as ctx:\n            assert ctx.flyte_client.value == 1\n\n\ndef test_default():\n    ctx = FlyteContext.current_context()\n    assert ctx.file_access is not None\n\n\ndef test_look_up_image_info():\n    img = Image.look_up_image_info(name=\"x\", image_identifier=\"docker.io/xyz\", allow_no_tag_or_digest=True)\n    assert img.name == \"x\"\n    assert img.tag is None\n    assert img.digest is None\n    assert img.fqn == \"docker.io/xyz\"\n\n    with pytest.raises(AssertionError):\n        Image.look_up_image_info(name=\"x\", image_identifier=\"docker.io/xyz\", allow_no_tag_or_digest=False)\n\n    with pytest.raises(ValueError):\n        Image(\n            name=\"x\",\n            fqn=\"docker.io/xyz\",\n            tag=\"latest\",\n            digest=\"sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d\",\n        )\n\n    img = Image.look_up_image_info(name=\"x\", image_identifier=\"docker.io/xyz:latest\", allow_no_tag_or_digest=True)\n    assert img.name == \"x\"\n    assert img.tag == \"latest\"\n    assert img.digest is None\n    assert img.fqn == \"docker.io/xyz\"\n\n    img = Image.look_up_image_info(name=\"x\", image_identifier=\"docker.io/xyz:latest\", allow_no_tag_or_digest=False)\n    assert img.name == \"x\"\n    assert img.tag == \"latest\"\n    assert img.digest is None\n    assert img.fqn == \"docker.io/xyz\"\n\n    img = Image.look_up_image_info(name=\"x\", image_identifier=\"localhost:5000/xyz:latest\", allow_no_tag_or_digest=False)\n    assert img.name == \"x\"\n    assert img.tag == \"latest\"\n    assert img.digest is None\n    assert img.fqn == \"localhost:5000/xyz\"\n\n    img = Image.look_up_image_info(\n        name=\"x\",\n        image_identifier=\"localhost:5000/xyz@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d\",\n        allow_no_tag_or_digest=False,\n    )\n    assert img.fqn == \"localhost:5000/xyz\"\n    assert img.tag is None\n    assert img.digest == \"sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d\"\n    assert img.full == \"localhost:5000/xyz@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d\"\n\n\n@mock.patch(\"flytekit.configuration.default_images.DefaultImages.default_image\")\ndef test_validate_image(mock_image):\n    mock_image.return_value = \"cr.flyte.org/flyteorg/flytekit:py3.9-latest\"\n    ic = ImageConfig.validate_image(None, \"image\", ())\n    assert ic\n    assert ic.default_image == Image(name=\"default\", fqn=\"cr.flyte.org/flyteorg/flytekit\", tag=\"py3.9-latest\")\n\n    img1 = \"xyz:latest\"\n    img2 = \"docker.io/xyz:latest\"\n    img3 = \"docker.io/xyz:latest\"\n    img3_cli = f\"default={img3}\"\n    img4 = \"docker.io/my:azb\"\n    img4_cli = f\"my_img={img4}\"\n    img5 = \"docker.io/my@sha256:26c68657ccce2cb0a31b330cb0be2b5e108d467f641c62e13ab40cbec258c68d\"\n\n    ic = ImageConfig.validate_image(None, \"image\", (img1,))\n    assert ic\n    assert ic.default_image.full == img1\n\n    ic = ImageConfig.validate_image(None, \"image\", (img2,))\n    assert ic\n    assert ic.default_image.full == img2\n\n    ic = ImageConfig.validate_image(None, \"image\", (img3_cli,))\n    assert ic\n    assert ic.default_image.full == img3\n\n    with pytest.raises(ValueError):\n        ImageConfig.validate_image(None, \"image\", (img1, img3_cli))\n\n    with pytest.raises(ValueError):\n        ImageConfig.validate_image(None, \"image\", (img1, img2))\n\n    with pytest.raises(ValueError):\n        ImageConfig.validate_image(None, \"image\", (img1, img1))\n\n    ic = ImageConfig.validate_image(None, \"image\", (img3_cli, img4_cli))\n    assert ic\n    assert ic.default_image.full == img3\n    assert len(ic.images) == 2\n    assert ic.images[1].full == img4\n\n    ic = ImageConfig.validate_image(None, \"image\", (img5,))\n    assert ic.default_image.full == img5\n\n\ndef test_secrets_manager_default():\n    with pytest.raises(ValueError):\n        sec = SecretsManager()\n        sec.get(\"group\", \"key2\")\n\n    with pytest.raises(ValueError):\n        _ = sec.group.key2\n\n\ndef test_secrets_manager_get_envvar():\n    sec = SecretsManager()\n    cfg = SecretsConfig.auto()\n    assert sec.get_secrets_env_var(\"group\", \"test\") == f\"{cfg.env_prefix}GROUP_TEST\"\n    assert sec.get_secrets_env_var(\"group\", \"test\", \"v1\") == f\"{cfg.env_prefix}GROUP_V1_TEST\"\n    assert sec.get_secrets_env_var(\"group\", group_version=\"v1\") == f\"{cfg.env_prefix}GROUP_V1\"\n    assert sec.get_secrets_env_var(\"group\") == f\"{cfg.env_prefix}GROUP\"\n\n\ndef test_secret_manager_no_group(monkeypatch):\n    plugin_mock = Mock()\n    plugin_mock.secret_requires_group.return_value = False\n    mock_global_plugin = {\"plugin\": plugin_mock}\n    monkeypatch.setattr(flytekit.configuration.plugin, \"_GLOBAL_CONFIG\", mock_global_plugin)\n\n    sec = SecretsManager()\n    cfg = SecretsConfig.auto()\n\n    assert sec.get_secrets_env_var(key=\"ABC\") == f\"{cfg.env_prefix}ABC\"\n\n    default_path = Path(cfg.default_dir)\n    expected_path = default_path / f\"{cfg.file_prefix}abc\"\n    assert sec.get_secrets_file(key=\"ABC\") == str(expected_path)\n\n\ndef test_secret_no_group_required_with_group(monkeypatch, tmp_path):\n    plugin_mock = Mock()\n    plugin_mock.secret_requires_group.return_value = False\n    mock_global_plugin = {\"plugin\": plugin_mock}\n    monkeypatch.setattr(flytekit.configuration.plugin, \"_GLOBAL_CONFIG\", mock_global_plugin)\n\n    cfg = SecretsConfig.auto()\n    sec = SecretsManager(secrets_cfg=cfg)\n    monkeypatch.setenv(f\"{cfg.env_prefix}MY-GROUP_V1_ABC\", \"my-super-secret\")\n\n    assert sec.get(key=\"ABC\", group=\"my-group\", group_version=\"v1\") == \"my-super-secret\"\n\n\ndef test_secrets_manager_get_file():\n    sec = SecretsManager()\n    cfg = SecretsConfig.auto()\n    assert sec.get_secrets_file(\"group\", \"test\") == os.path.join(\n        cfg.default_dir,\n        \"group\",\n        f\"{cfg.file_prefix}test\",\n    )\n    assert sec.get_secrets_file(\"group\", \"test\", \"v1\") == os.path.join(\n        cfg.default_dir,\n        \"group\",\n        \"v1\",\n        f\"{cfg.file_prefix}test\",\n    )\n\n\ndef test_secrets_manager_file(tmpdir: py.path.local):\n    tmp = tmpdir.mkdir(\"file_test\").dirname\n    os.environ[\"FLYTE_SECRETS_DEFAULT_DIR\"] = tmp\n    sec = SecretsManager()\n    f = os.path.join(tmp, \"test\")\n    with open(f, \"w+\") as w:\n        w.write(\"my-password\")\n\n    with pytest.raises(ValueError):\n        sec.get(\"\", \"x\")\n    # Group dir not exists\n    with pytest.raises(ValueError):\n        sec.get(\"group\", \"test\")\n\n    g = os.path.join(tmp, \"group\")\n    os.makedirs(g)\n    f = os.path.join(g, \"test\")\n    with open(f, \"w+\") as w:\n        w.write(\"my-password\")\n    assert sec.get(\"group\", \"test\") == \"my-password\"\n    assert sec.group.test == \"my-password\"\n\n    base64_string = \"R2Vla3NGb3JHZWV ==\"\n    base64_bytes = base64_string.encode(\"ascii\")\n    base64_str = base64.b64encode(base64_bytes)\n    with open(f, \"wb\") as w:\n        w.write(base64_str)\n    assert sec.get(\"group\", \"test\") != base64_str\n    assert sec.get(\"group\", \"test\", encode_mode=\"rb\") == base64_str\n\n    del os.environ[\"FLYTE_SECRETS_DEFAULT_DIR\"]\n\n\ndef test_secrets_manager_bad_env():\n    with pytest.raises(ValueError):\n        os.environ[\"TEST\"] = \"value\"\n        sec = SecretsManager()\n        sec.get(\"group\", \"test\")\n\n\ndef test_secrets_manager_env():\n    sec = SecretsManager()\n    os.environ[sec.get_secrets_env_var(\"group\", \"test\")] = \"value\"\n    assert sec.get(\"group\", \"test\") == \"value\"\n\n    os.environ[sec.get_secrets_env_var(group=\"group\", key=\"key\")] = \"value\"\n    assert sec.get(group=\"group\", key=\"key\") == \"value\"\n\n\n@pytest.mark.parametrize(\"is_local_execution, prefix\", [(True, \"\"), (False, \"_FSEC_\")])\ndef test_secrets_manager_execution(monkeypatch, is_local_execution, prefix):\n    if not is_local_execution:\n        execution_state = context_manager.ExecutionState.Mode.TASK_EXECUTION\n    else:\n        execution_state = context_manager.ExecutionState.Mode.LOCAL_TASK_EXECUTION\n\n    sec = SecretsManager()\n\n    monkeypatch.setenv(f\"{prefix}ABC_XYZ\", \"my-abc-secret\")\n\n    ctx = FlyteContext.current_context()\n    with FlyteContextManager.with_context(\n        ctx.with_execution_state(ctx.execution_state.with_params(mode=execution_state))\n    ):\n        assert sec.get(group=\"ABC\", key=\"XYZ\") == \"my-abc-secret\"\n\n\n@pytest.mark.parametrize(\"is_local_execution, prefix\", [(True, \"\"), (False, \"_FSEC_\")])\ndef test_secrets_manager_execution_no_group_required(monkeypatch, is_local_execution, prefix):\n    # Remove group requirements\n    plugin_mock = Mock()\n    plugin_mock.secret_requires_group.return_value = False\n    mock_global_plugin = {\"plugin\": plugin_mock}\n    monkeypatch.setattr(flytekit.configuration.plugin, \"_GLOBAL_CONFIG\", mock_global_plugin)\n\n    if not is_local_execution:\n        execution_state = context_manager.ExecutionState.Mode.TASK_EXECUTION\n    else:\n        execution_state = context_manager.ExecutionState.Mode.LOCAL_TASK_EXECUTION\n\n    sec = SecretsManager()\n\n    monkeypatch.setenv(f\"{prefix}XYZ\", \"my-abc-secret\")\n\n    ctx = FlyteContext.current_context()\n    with FlyteContextManager.with_context(\n        ctx.with_execution_state(ctx.execution_state.with_params(mode=execution_state))\n    ):\n        assert sec.get(key=\"XYZ\") == \"my-abc-secret\"\n\n\ndef test_serialization_settings_transport():\n    default_img = Image(name=\"default\", fqn=\"test\", tag=\"tag\")\n    serialization_settings = SerializationSettings(\n        project=\"project\",\n        domain=\"domain\",\n        version=\"version\",\n        env={\"hello\": \"blah\"},\n        image_config=ImageConfig(\n            default_image=default_img,\n            images=[default_img],\n        ),\n        flytekit_virtualenv_root=\"/opt/venv/blah\",\n        python_interpreter=\"/opt/venv/bin/python3\",\n        fast_serialization_settings=FastSerializationSettings(\n            enabled=True,\n            destination_dir=\"/opt/blah/blah/blah\",\n            distribution_location=\"s3://my-special-bucket/blah/bha/asdasdasd/cbvsdsdf/asdddasdasdasdasdasdasd.tar.gz\",\n        ),\n    )\n\n    tp = serialization_settings.serialized_context\n    with_serialized = serialization_settings.with_serialized_context()\n    assert serialization_settings.env == {\"hello\": \"blah\"}\n    assert with_serialized.env\n    assert with_serialized.env[SERIALIZED_CONTEXT_ENV_VAR] == tp\n    ss = SerializationSettings.from_transport(tp)\n    assert ss is not None\n    assert ss == serialization_settings\n    assert len(tp) == 408\n\n\ndef test_exec_params():\n    ep = ExecutionParameters(\n        execution_id=id_models.WorkflowExecutionIdentifier(\"p\", \"d\", \"n\"),\n        task_id=id_models.Identifier(id_models.ResourceType.TASK, \"local\", \"local\", \"local\", \"local\"),\n        execution_date=datetime.now(timezone.utc),\n        stats=mock_stats.MockStats(),\n        logging=None,\n        tmp_dir=\"/tmp\",\n        raw_output_prefix=\"\",\n        decks=[],\n    )\n\n    assert ep.task_id.name == \"local\"\n    ep_str = str(ep)\n    assert ep_str.startswith(\"ExecutionParameters(\")\n"
