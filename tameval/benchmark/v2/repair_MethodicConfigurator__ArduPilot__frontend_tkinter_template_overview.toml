[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "ArduPilot/MethodicConfigurator"
sha = "8f14cac0abb19c133ba74e6693d4efb6385cb8f0"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ardupilot_methodic_configurator/frontend_tkinter_template_overview.py -m pytest -q --junit-xml=test_output.xml tests/test_frontend_tkinter_template_overview.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ardupilot_methodic_configurator.frontend_tkinter_template_overview --unit-test tests.test_frontend_tkinter_template_overview --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ardupilot_methodic_configurator/frontend_tkinter_template_overview.py --unit-test tests/test_frontend_tkinter_template_overview.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0.0
original_coverage = 92.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = [ 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 30, 33, 34, 38, 39, 44, 47, 48, 53, 56, 75, 92, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 111, 112, 115, 116, 117, 119, 122, 125, 126, 127, 128, 131, 134, 135, 137, 139, 140, 141, 143, 146, 149, 150, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 177, 179, 181, 206, 212, 214, 216, 217, 219, 227, 228, 229, 230, 231, 232, 234, 236, 237, 239, 240, 241, 242, 245, 246, 247, 248, 252, 253, 255, 257, 258, 259, 260, 262, 263, 264, 270, 272, 274, 276, 277, 278, 279, 280, 281, 283, 293, 295, 297, 298, 299, 300, 301, 303, 305, 307, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 322, 325, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 344, 345, 347, 363, 366, 376, 386, 389, 397, 400, 402, 403, 405, 406, 408, 409, 412, 413,]

[input_info]
test_file_path = "tests/test_frontend_tkinter_template_overview.py"
focal_file_path = "ardupilot_methodic_configurator/frontend_tkinter_template_overview.py"
test_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/tests/test_frontend_tkinter_template_overview.py"
focal_file_url = "https://github.com/ArduPilot/MethodicConfigurator/blob/8f14cac0abb19c133ba74e6693d4efb6385cb8f0/ardupilot_methodic_configurator/frontend_tkinter_template_overview.py"
first_commit_date = "2024-12-02"
last_commit_date = "2025-08-16"
test_file_content = "\n\n\nimport argparse\nimport logging\nimport tkinter as tk\nfrom collections.abc import Generator\nfrom tkinter import ttk\nfrom typing import Any\nfrom unittest.mock import ANY, MagicMock, patch\n\nimport pytest\n\nfrom ardupilot_methodic_configurator.frontend_tkinter_base_window import BaseWindow\nfrom ardupilot_methodic_configurator.frontend_tkinter_template_overview import (\n    TemplateOverviewWindow,\n    argument_parser,\n    main,\n    setup_logging,\n)\n\n\n@pytest.fixture\ndef mock_logging_basicconfig() -> Generator[Any, Any, Any]:\n    with patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.logging_basicConfig\") as mock:\n        yield mock\n\n\n@pytest.fixture\ndef mock_logging_getlevelname() -> Generator[Any, Any, Any]:\n    with patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.logging_getLevelName\") as mock:\n        yield mock\n\n\n@pytest.fixture\ndef template_overview_window_setup() -> Generator[None, None, None]:\n    with (\n        patch(\"tkinter.Toplevel\"),\n        patch.object(BaseWindow, \"__init__\", return_value=None),\n        patch.object(TemplateOverviewWindow, \"_configure_window\"),\n        patch.object(TemplateOverviewWindow, \"_initialize_ui_components\"),\n        patch.object(TemplateOverviewWindow, \"_setup_layout\"),\n        patch.object(TemplateOverviewWindow, \"_configure_treeview\"),\n        patch.object(TemplateOverviewWindow, \"_bind_events\"),\n    ):\n        yield\n\n\n@pytest.fixture\ndef mock_vehicle_provider() -> MagicMock:\n    provider = MagicMock()\n    template_1 = MagicMock()\n    template_1.attributes.return_value = [\"name\", \"fc\", \"gnss\"]\n    template_1.name = \"QuadCopter X\"\n    template_1.fc = \"Pixhawk 6C\"\n    template_1.gnss = \"Here3+\"\n\n    template_2 = MagicMock()\n    template_2.attributes.return_value = [\"name\", \"fc\"]\n    template_2.name = \"Plane\"\n    template_2.fc = \"Cube Orange\"\n    template_2.gnss = \"\"\n\n    provider.get_vehicle_components_overviews.return_value = {\n        \"Copter/QuadX\": template_1,\n        \"Plane/FixedWing\": template_2,\n    }\n    provider.get_vehicle_image_filepath.return_value = \"/mock/path/image.jpg\"\n    return provider\n\n\n@pytest.fixture\ndef mock_program_provider() -> MagicMock:\n    return MagicMock()\n\n\n@pytest.fixture\ndef vehicle_filtering_templates() -> dict[str, MagicMock]:\n    return {\n        \"Copter/QuadX\": MagicMock(attributes=lambda: [\"name\"], name=\"QuadCopter\"),\n        \"Plane/FixedWing\": MagicMock(attributes=lambda: [\"name\"], name=\"Airplane\"),\n        \"Copter/HexaX\": MagicMock(attributes=lambda: [\"name\"], name=\"Hexacopter\"),\n        \"Rover/SkidSteer\": MagicMock(attributes=lambda: [\"name\"], name=\"Rover\"),\n        \"ArduCopter/QuadX\": MagicMock(attributes=lambda: [\"name\"], name=\"ArduCopter QuadX\"),\n        \"ArduPlane/FixedWing\": MagicMock(attributes=lambda: [\"name\"], name=\"ArduPlane\"),\n        \"Custom/Copter/Experimental\": MagicMock(attributes=lambda: [\"name\"], name=\"Experimental Copter\"),\n    }\n\n\n@pytest.fixture\ndef vehicle_window(mock_vehicle_provider, mock_program_provider, vehicle_filtering_templates) -> TemplateOverviewWindow:\n    mock_vehicle_provider.get_vehicle_components_overviews.return_value = vehicle_filtering_templates\n\n    with (\n        patch(\"tkinter.Toplevel\"),\n        patch.object(BaseWindow, \"__init__\", return_value=None),\n        patch.object(TemplateOverviewWindow, \"_configure_window\"),\n        patch.object(TemplateOverviewWindow, \"_initialize_ui_components\"),\n        patch.object(TemplateOverviewWindow, \"_setup_layout\"),\n        patch.object(TemplateOverviewWindow, \"_configure_treeview\"),\n        patch.object(TemplateOverviewWindow, \"_bind_events\"),\n    ):\n        window = TemplateOverviewWindow(\n            vehicle_components_provider=mock_vehicle_provider,\n            program_settings_provider=mock_program_provider,\n            connected_fc_vehicle_type=\"ArduCopter\",\n        )\n        window.root = MagicMock()\n        window.tree = MagicMock()\n        return window\n\n\n@pytest.fixture\ndef template_window(mock_vehicle_provider, mock_program_provider) -> TemplateOverviewWindow:\n    with (\n        patch(\"tkinter.Toplevel\"),\n        patch.object(BaseWindow, \"__init__\", return_value=None),\n        patch.object(TemplateOverviewWindow, \"_configure_window\"),\n        patch.object(TemplateOverviewWindow, \"_initialize_ui_components\"),\n        patch.object(TemplateOverviewWindow, \"_setup_layout\"),\n        patch.object(TemplateOverviewWindow, \"_configure_treeview\"),\n        patch.object(TemplateOverviewWindow, \"_bind_events\"),\n    ):\n        window = TemplateOverviewWindow(\n            vehicle_components_provider=mock_vehicle_provider,\n            program_settings_provider=mock_program_provider,\n            connected_fc_vehicle_type=None,\n        )\n        window.root = MagicMock()\n        window.tree = MagicMock()\n        return window\n\n\n@pytest.mark.parametrize(\n    (\"argv\", \"expected_level\"),\n    [\n        ([\"script.py\", \"--loglevel\", \"DEBUG\"], \"DEBUG\"),\n        ([\"script.py\", \"--loglevel\", \"INFO\"], \"INFO\"),\n        ([\"script.py\", \"--loglevel\", \"WARNING\"], \"WARNING\"),\n        ([\"script.py\", \"--loglevel\", \"ERROR\"], \"ERROR\"),\n    ],\n)\ndef test_argument_parser_loglevel_options(argv, expected_level, monkeypatch) -> None:\n    monkeypatch.setattr(\"sys.argv\", argv)\n    with patch(\"argparse.ArgumentParser.parse_args\") as mock_parse_args:\n        mock_parse_args.return_value = argparse.Namespace(loglevel=expected_level)\n        args = argument_parser()\n\n\ndef test_setup_logging(mock_logging_basicconfig, mock_logging_getlevelname) -> None:\n    loglevel = \"DEBUG\"\n    mock_logging_getlevelname.return_value = logging.DEBUG\n    setup_logging(loglevel)\n\n\nclass TestUserTemplateSelection:\n\n    def test_user_can_select_template_by_double_clicking(self, template_window) -> None:\n        template_window.tree.identify_row.return_value = \"item_1\"\n        template_window.tree.item.return_value = {\"text\": \"Copter/QuadCopter\"}\n\n        mock_event = MagicMock(y=100)\n        template_window._on_row_double_click(mock_event)\n\n    def test_user_sees_vehicle_image_when_selecting_template(self, template_window) -> None:\n        template_window.tree.selection.return_value = [\"item_1\"]\n        template_window.tree.item.return_value = {\"text\": \"Copter/QuadX\"}\n\n        with patch.object(template_window, \"_display_vehicle_image\") as mock_display:\n            mock_event = MagicMock()\n            template_window._on_row_selection_change(mock_event)\n            template_window._update_selection()\n\n    def test_user_sees_fallback_message_when_no_vehicle_image_available(self, template_window) -> None:\n        template_window.vehicle_components_provider.get_vehicle_image_filepath.return_value = \"\"\n        template_window.tree.selection.return_value = [\"item_1\"]\n        template_window.tree.item.return_value = {\"text\": \"Experimental/NewDesign\"}\n\n        with patch.object(template_window, \"_display_vehicle_image\") as mock_display:\n            mock_event = MagicMock()\n            template_window._on_row_selection_change(mock_event)\n            template_window._update_selection()\n\n\nclass TestTemplateDataDisplay:\n\n    def test_templates_are_populated_from_vehicle_components(self, template_window) -> None:\n        template_window._populate_treeview(\"\")\n\n        first_call = template_window.tree.insert.call_args_list[0]\n        second_call = template_window.tree.insert.call_args_list[1]\n\n    def test_sorting_helps_users_find_templates(self, template_window) -> None:\n        template_window.tree.get_children.return_value = [\"item1\", \"item2\", \"item3\"]\n        template_window.tree.set.side_effect = lambda item, col: {\n            (\"item1\", \"Frame\"): \"QuadCopter\",\n            (\"item2\", \"Frame\"): \"Airplane\",\n            (\"item3\", \"Frame\"): \"Helicopter\",\n        }.get((item, col), \"\")\n        template_window._sort_by_column(\"Frame\", reverse=False)\n\n\nclass TestAccessibilityAndUsability:\n\n    def test_window_scales_properly_for_high_dpi_displays(self, template_window) -> None:\n        template_window.dpi_scaling_factor = 2.0\n        with patch.object(template_window.root, \"geometry\") as mock_geometry:\n            template_window._configure_window()\n            geometry_call = mock_geometry.call_args[0][0]\n\n    def test_keyboard_navigation_works_for_accessibility(self, template_window) -> None:\n        template_window.tree.selection.return_value = [\"new_item\"]\n        template_window.tree.item.return_value = {\"text\": \"Plane/Glider\"}\n\n        with patch.object(template_window, \"_display_vehicle_image\") as mock_display:\n            mock_event = MagicMock()\n            template_window._on_row_selection_change(mock_event)\n\n            template_window._update_selection()\n\n\nclass TestErrorHandlingAndEdgeCases:\n\n    def test_graceful_handling_when_no_templates_available(self, template_overview_window_setup) -> None:\n        mock_vehicle_provider = MagicMock()\n        mock_vehicle_provider.get_vehicle_components_overviews.return_value = {}\n\n        window = TemplateOverviewWindow(vehicle_components_provider=mock_vehicle_provider)\n        window.tree = MagicMock()\n        window._populate_treeview(\"\")\n\n    def test_window_closes_properly_on_user_cancel(self, template_window) -> None:\n        template_window.close_window()\n\n\nclass TestUIComponentInitialization:\n\n    def test_high_dpi_displays_get_properly_scaled_components(self, template_window) -> None:\n        template_window.dpi_scaling_factor = 2.0\n        template_window.calculate_scaled_font_size = MagicMock(return_value=24)\n\n    def test_users_see_clear_instructions_for_template_selection(self, template_window) -> None:\n        instruction_text = template_window._get_instruction_text()\n\n    def test_window_layout_adapts_to_different_screen_sizes(self, template_window) -> None:\n        template_window.dpi_scaling_factor = 1.25\n        template_window.calculate_scaled_padding_tuple = MagicMock(return_value=(15, 30))\n        template_window.top_frame = MagicMock()\n        template_window.instruction_label = MagicMock()\n        template_window.image_label = MagicMock()\n        try:\n            TemplateOverviewWindow._setup_layout(template_window)\n            layout_success = True\n        except Exception:\n            layout_success = False\n\n\nclass TestTreeviewConfiguration:\n\n    def test_treeview_styling_adapts_to_user_display_settings(self, template_window) -> None:\n        template_window.calculate_scaled_padding = MagicMock(return_value=3)\n\n        with patch(\"tkinter.ttk.Style\") as mock_style_class:\n            mock_style = MagicMock()\n            mock_style_class.return_value = mock_style\n            template_window._setup_treeview_style()\n\n    def test_treeview_columns_resize_for_content_readability(self, template_window) -> None:\n        with patch(\"tkinter.font.Font\") as mock_font_class:\n            mock_font = MagicMock()\n            mock_font.measure.return_value = 100\n            mock_font_class.return_value = mock_font\n            template_window.tree.__getitem__.return_value = [\"Frame\", \"Size\"]\n            template_window.tree.get_children.return_value = [\"item1\", \"item2\"]\n            template_window.tree.item.side_effect = lambda item, key: {\n                \"values\": [\"QuadCopter\", \"Large\"] if item == \"item1\" else [\"Airplane\", \"Medium\"]\n            }.get(key, [\"QuadCopter\", \"Large\"])\n            template_window.dpi_scaling_factor = 1.5\n            template_window._adjust_treeview_column_widths()\n\n\nclass TestUserInteractionBehavior:\n\n    def test_user_selection_updates_provide_immediate_feedback(self, template_window) -> None:\n        template_window.tree.selection.return_value = [\"item1\"]\n        template_window.tree.item.return_value = {\"text\": \"Copter/QuadCopter\"}\n        template_window.store_template_dir = MagicMock()\n        template_window._display_vehicle_image = MagicMock()\n        mock_event = MagicMock()\n        template_window._on_row_selection_change(mock_event)\n        template_window._update_selection()\n\n    def test_user_double_click_provides_quick_template_selection(self, template_window) -> None:\n        template_window.tree.identify_row.return_value = \"item1\"\n        template_window.tree.item.return_value = {\"text\": \"Copter/QuadCopter\"}\n        template_window.store_template_dir = MagicMock()\n        template_window.close_window = MagicMock()\n        mock_event = MagicMock()\n        mock_event.y = 100\n        template_window._on_row_double_click(mock_event)\n\n\nclass TestVisualFeedbackAndImageDisplay:\n\n    def test_missing_vehicle_images_handled_gracefully_for_users(self, template_window) -> None:\n        template_window.top_frame = MagicMock()\n        template_window.top_frame.winfo_children.return_value = []\n        template_window.image_label = MagicMock()\n        template_window.dpi_scaling_factor = 1.0\n        template_window.vehicle_components_provider.get_vehicle_image_filepath.return_value = \"missing.png\"\n        template_window.get_vehicle_image_filepath = MagicMock(return_value=\"missing.png\")\n        template_window._display_vehicle_image(\"Copter/ExperimentalQuad\")\n\n\nclass TestApplicationEntryPoint:\n\n    def test_command_line_startup_creates_functional_user_interface(self) -> None:\n        with (\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.argument_parser\") as mock_parser,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.setup_logging\") as mock_setup_logging,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.ProgramSettings\") as mock_settings,\n            patch(\n                \"ardupilot_methodic_configurator.frontend_tkinter_template_overview.TemplateOverviewWindow\"\n            ) as mock_window_class,\n        ):\n            mock_args = MagicMock()\n            mock_args.loglevel = \"INFO\"\n            mock_parser.return_value = mock_args\n            mock_settings.get_recently_used_dirs.return_value = [\"/test/dir\"]\n\n            mock_window = MagicMock()\n            mock_window_class.return_value = mock_window\n            main()\n\n\nclass TestWindowInitialization:\n\n    def test_window_initialization_creates_all_required_components(self, template_overview_window_setup) -> None:\n        with (\n            patch(\"tkinter.ttk.Frame\"),\n            patch(\"tkinter.ttk.Label\"),\n            patch(\"tkinter.ttk.Treeview\"),\n        ):\n            mock_vehicle_provider = MagicMock()\n            mock_program_provider = MagicMock()\n            window = TemplateOverviewWindow(\n                vehicle_components_provider=mock_vehicle_provider,\n                program_settings_provider=mock_program_provider,\n            )\n\n    def test_ui_components_get_proper_dependency_injection(self, template_overview_window_setup) -> None:\n        mock_vehicle_provider = MagicMock()\n        mock_program_provider = MagicMock()\n        window = TemplateOverviewWindow(\n            vehicle_components_provider=mock_vehicle_provider,\n            program_settings_provider=mock_program_provider,\n        )\n\n    def test_window_uses_default_providers_when_none_specified(self, template_overview_window_setup) -> None:\n        with (\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.VehicleComponents\") as mock_vc,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.ProgramSettings\") as mock_ps,\n        ):\n            window = TemplateOverviewWindow()\n\n\nclass TestWindowApplicationRunner:\n\n    def test_toplevel_window_runs_with_update_loop(self, template_window) -> None:\n        template_window.root = MagicMock(spec=tk.Toplevel)\n        template_window.root.children = {\"child1\": MagicMock()}\n\n        def clear_children_after_call() -> None:\n            template_window.root.children = {}\n\n        template_window.root.update_idletasks.side_effect = clear_children_after_call\n        template_window.run_app()\n\n    def test_tk_window_runs_with_mainloop(self, template_window) -> None:\n        template_window.root = MagicMock(spec=tk.Tk)\n        template_window.run_app()\n\n    def test_tcl_error_handled_gracefully_in_toplevel_run(self, template_window) -> None:\n        template_window.root = MagicMock(spec=tk.Toplevel)\n        template_window.root.children = {\"child1\": MagicMock()}\n        template_window.root.update_idletasks.side_effect = tk.TclError(\"Test error\")\n        try:\n            template_window.run_app()\n            test_passed = True\n        except tk.TclError:\n            test_passed = False\n\n\nclass TestTreeviewConfigurationDetails:\n\n    def test_treeview_style_configuration_uses_proper_scaling(self, template_window) -> None:\n        template_window.dpi_scaling_factor = 1.5\n        template_window.calculate_scaled_padding = MagicMock(return_value=15)\n\n        with patch(\"tkinter.ttk.Style\") as mock_style_class:\n            mock_style = MagicMock()\n            mock_style_class.return_value = mock_style\n            template_window._setup_treeview_style()\n\n    def test_treeview_columns_setup_creates_proper_headings(self, template_window) -> None:\n        template_window.tree = MagicMock()\n        template_window.tree.__getitem__.return_value = [\"Template\", \"Frame\", \"FC\"]\n        template_window._setup_treeview_columns()\n\n    def test_event_binding_creates_all_required_handlers(self, template_window) -> None:\n        template_window.tree.__getitem__ = MagicMock(return_value=[\"Template\", \"Frame\"])\n        template_window._bind_events()\n        expected_events = [\"<ButtonRelease-1>\", \"<Up>\", \"<Down>\", \"<Double-1>\"]\n        actual_bind_calls = [call[0][0] for call in template_window.tree.bind.call_args_list]\n        for event in expected_events:\n\n\nclass TestSortingBehaviorDetails:\n\n    def test_numeric_sorting_works_with_float_values(self, template_window) -> None:\n        template_window.tree.get_children.return_value = [\"item1\", \"item2\", \"item3\"]\n        template_window.tree.set.side_effect = lambda item, col: {\n            (\"item1\", \"Size\"): \"1.5\",\n            (\"item2\", \"Size\"): \"10.2\",\n            (\"item3\", \"Size\"): \"2.0\",\n        }.get((item, col), \"0\")\n        template_window._sort_by_column(\"Size\", reverse=False)\n\n    def test_string_sorting_fallback_handles_non_numeric_data(self, template_window) -> None:\n        template_window.tree.get_children.return_value = [\"item1\", \"item2\"]\n        template_window.tree.set.side_effect = lambda item, col: {\n            (\"item1\", \"Name\"): \"Zebra\",\n            (\"item2\", \"Name\"): \"Alpha\",\n        }.get((item, col), \"\")\n        template_window._sort_by_column(\"Name\", reverse=False)\n\n    def test_sorting_indicators_update_properly(self, template_window) -> None:\n        template_window.sort_column = \"OldColumn\"\n        template_window.tree.get_children.return_value = [\"item1\"]\n        template_window.tree.set.return_value = \"value\"\n        template_window._sort_by_column(\"NewColumn\", reverse=False)\n\n\nclass TestImageDisplayBehavior:\n\n    def test_image_display_removes_previous_image_correctly(self, template_window) -> None:\n        old_image_widget = MagicMock(spec=ttk.Label)\n        template_window.image_label = old_image_widget\n        template_window.top_frame = MagicMock()\n        template_window.top_frame.winfo_children.return_value = [old_image_widget]\n        template_window.dpi_scaling_factor = 1.0\n\n        with (\n            patch.object(template_window, \"get_vehicle_image_filepath\", return_value=\"/path/to/image.jpg\"),\n            patch.object(template_window, \"put_image_in_label\", return_value=MagicMock()),\n        ):\n            template_window._display_vehicle_image(\"Copter/NewTemplate\")\n\n    def test_image_display_handles_file_not_found_gracefully(self, template_window) -> None:\n        template_window.top_frame = MagicMock()\n        template_window.top_frame.winfo_children.return_value = []\n        template_window.dpi_scaling_factor = 1.0\n\n        with (\n            patch.object(template_window, \"get_vehicle_image_filepath\", side_effect=FileNotFoundError),\n            patch(\"tkinter.ttk.Label\") as mock_label,\n        ):\n            template_window._display_vehicle_image(\"Copter/NoImage\")\n            call_args = mock_label.call_args[1]\n\n    def test_get_vehicle_image_filepath_delegates_to_provider(self, template_window) -> None:\n        template_window.vehicle_components_provider.get_vehicle_image_filepath.return_value = \"/test/path.jpg\"\n        result = template_window.get_vehicle_image_filepath(\"Copter/Test\")\n\n\nclass TestAdvancedMainFunctionality:\n\n    def test_main_function_logs_recently_used_directory_when_available(self) -> None:\n        with (\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.argument_parser\") as mock_parser,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.setup_logging\"),\n            patch(\n                \"ardupilot_methodic_configurator.frontend_tkinter_template_overview.TemplateOverviewWindow\"\n            ) as mock_window_class,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.ProgramSettings\") as mock_settings,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.logging_info\") as mock_log_info,\n        ):\n            mock_args = MagicMock()\n            mock_args.loglevel = \"INFO\"\n            mock_parser.return_value = mock_args\n\n            mock_window = MagicMock()\n            mock_window_class.return_value = mock_window\n            mock_settings.get_recently_used_dirs.return_value = [\"/recent/dir\"]\n            main()\n\n    def test_main_function_handles_no_recently_used_directories(self) -> None:\n        with (\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.argument_parser\") as mock_parser,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.setup_logging\"),\n            patch(\n                \"ardupilot_methodic_configurator.frontend_tkinter_template_overview.TemplateOverviewWindow\"\n            ) as mock_window_class,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.ProgramSettings\") as mock_settings,\n            patch(\"ardupilot_methodic_configurator.frontend_tkinter_template_overview.logging_info\") as mock_log_info,\n        ):\n            mock_args = MagicMock()\n            mock_args.loglevel = \"INFO\"\n            mock_parser.return_value = mock_args\n\n            mock_window = MagicMock()\n            mock_window_class.return_value = mock_window\n            mock_settings.get_recently_used_dirs.return_value = []\n            main()\n\n\nclass TestVehicleTypeFiltering:\n\n    def test_filtering_shows_only_matching_vehicle_templates(self, vehicle_window) -> None:\n        vehicle_window._populate_treeview(\"ArduCopter\")\n        call_args_list = vehicle_window.tree.insert.call_args_list\n        inserted_keys = [call[1][\"text\"] for call in call_args_list]\n\n    def test_no_filtering_shows_all_templates(self, vehicle_window) -> None:\n        vehicle_window._populate_treeview(\"\")\n\n        call_args_list = vehicle_window.tree.insert.call_args_list\n        inserted_keys = [call[1][\"text\"] for call in call_args_list]\n\n    def test_partial_vehicle_matching_works_correctly(self, vehicle_window) -> None:\n        vehicle_window._populate_treeview(\"ArduCopter\")\n\n        call_args_list = vehicle_window.tree.insert.call_args_list\n        inserted_keys = [call[1][\"text\"] for call in call_args_list]\n\n    def test_constructor_passes_vehicle_type_to_configure_treeview(self, mock_vehicle_provider, mock_program_provider) -> None:\n        with (\n            patch(\"tkinter.Toplevel\"),\n            patch.object(BaseWindow, \"__init__\", return_value=None),\n            patch.object(TemplateOverviewWindow, \"_configure_window\"),\n            patch.object(TemplateOverviewWindow, \"_initialize_ui_components\"),\n            patch.object(TemplateOverviewWindow, \"_setup_layout\"),\n            patch.object(TemplateOverviewWindow, \"_configure_treeview\") as mock_configure_treeview,\n            patch.object(TemplateOverviewWindow, \"_bind_events\"),\n        ):\n            TemplateOverviewWindow(\n                vehicle_components_provider=mock_vehicle_provider,\n                program_settings_provider=mock_program_provider,\n                connected_fc_vehicle_type=\"Plane\",\n            )"
