[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "mrjosh/helm-ls"
sha = "bcca382958d5f31960ebec27a24edb101aa495eb"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/lsp/ast_variable.go internal/lsp/ast_variable_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/lsp/ast_variable.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 81.0
original_coverage = 81.0
mutation_kill_rate = 0
original_mutation_kill_rate = 58.0
covered_lines = [ 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 43,]
missed_lines = [ 11, 12, 13, 40, 41, 42,]

[input_info]
test_file_path = "internal/lsp/ast_variable_test.go"
focal_file_path = "internal/lsp/ast_variable.go"
test_file_url = "https://github.com/mrjosh/helm-ls/blob/bcca382958d5f31960ebec27a24edb101aa495eb/internal/lsp/ast_variable_test.go"
focal_file_url = "https://github.com/mrjosh/helm-ls/blob/bcca382958d5f31960ebec27a24edb101aa495eb/internal/lsp/ast_variable.go"
first_commit_date = "2023-07-28"
last_commit_date = "2025-06-01"
test_file_content = "package lsp\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/mrjosh/helm-ls/internal/tree-sitter/gotemplate\"\n\tsitter \"github.com/smacker/go-tree-sitter\"\n)\n\nfunc TestGetVariableDefinitionDirectDecleration(t *testing.T) {\n\ttemplate := `\n{{ $variable := \"text\" }}\n{{ $variable }}\n\t`\n\n\tnode, err := sitter.ParseCtx(context.Background(), []byte(template), gotemplate.GetLanguage())\n\tif err != nil {\n\t\tt.Errorf(\"Parsing did not work\")\n\t}\n\n\tusageNode := node.NamedChild(1)\n\tdefinitionNode := GetVariableDefinition(\"variable\", usageNode, template)\n\n\tif definitionNode == nil {\n\t\tt.Errorf(\"Could not get definitionNode\")\n\t} else if definitionNode.Content([]byte(template)) != \"$variable := \\\"text\\\"\" {\n\t\tt.Errorf(\"Definition did not match but was %s\", definitionNode.Content([]byte(template)))\n\t}\n}\n\nfunc TestGetVariableDefinitionOtherDecleration(t *testing.T) {\n\ttemplate := `\n{{ $variable := \"text\" }}\n{{ $someOther := \"text\" }}\n{{ $variable }}\n\t`\n\n\tnode, err := sitter.ParseCtx(context.Background(), []byte(template), gotemplate.GetLanguage())\n\tif err != nil {\n\t\tt.Errorf(\"Parsing did not work\")\n\t}\n\n\tusageNode := node.NamedChild(2)\n\tdefinitionNode := GetVariableDefinition(\"variable\", usageNode, template)\n\n\tif definitionNode == nil {\n\t\tt.Errorf(\"Could not get definitionNode\")\n\t} else if definitionNode.Content([]byte(template)) != \"$variable := \\\"text\\\"\" {\n\t\tt.Errorf(\"Definition did not match but was %s\", definitionNode.Content([]byte(template)))\n\t}\n}\n\nfunc TestGetVariableDefinitionRange(t *testing.T) {\n\ttemplate := `{{ range $index, $element := pipeline }}{{ $index }}{{ $element }}{{ end }}`\n\n\tnode, err := sitter.ParseCtx(context.Background(), []byte(template), gotemplate.GetLanguage())\n\tif err != nil {\n\t\tt.Errorf(\"Parsing did not work\")\n\t}\n\n\telementUsageNode_start := sitter.Point{Row: 0, Column: 55}\n\telementUsageNode := node.NamedDescendantForPointRange(elementUsageNode_start, elementUsageNode_start)\n\tif elementUsageNode == nil {\n\t\tt.Errorf(\"Could not get elementUsageNode\")\n\t}\n\tif elementUsageNode.Content([]byte(template)) != \"$element\" {\n\t\tt.Errorf(\"Definition did not match but was %s\", elementUsageNode.Content([]byte(template)))\n\t}\n\tdefinitionNode := GetVariableDefinition(\"element\", elementUsageNode, template)\n\n\tif definitionNode == nil {\n\t\tt.Errorf(\"Could not get definitionNode\")\n\t} else if definitionNode.Content([]byte(template)) != \"$element\" {\n\t\tt.Errorf(\"Definition did not match but was %s\", definitionNode.Content([]byte(template)))\n\t}\n\n\tindexUsageNode_start := sitter.Point{Row: 0, Column: 43}\n\tindexUsageNode := node.NamedDescendantForPointRange(indexUsageNode_start, indexUsageNode_start)\n\tif indexUsageNode == nil {\n\t\tt.Errorf(\"Could not get indexUsageNode\")\n\t}\n\tif indexUsageNode.Content([]byte(template)) != \"$index\" {\n\t\tt.Errorf(\"Definition did not match but was %s\", indexUsageNode.Content([]byte(template)))\n\t}\n\tdefinitionNode = GetVariableDefinition(\"index\", indexUsageNode, template)\n\n\tif definitionNode == nil {\n\t\tt.Errorf(\"Could not get definitionNode\")\n\t} else if definitionNode.Content([]byte(template)) != \"$index\" {\n\t\tt.Errorf(\"Definition did not match but was %s\", definitionNode.Content([]byte(template)))\n\t}\n}"
