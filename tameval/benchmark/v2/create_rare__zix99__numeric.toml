[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "zix99/rare"
sha = "dbf03dd64fed323c2e7b3b36d97210f929fb64fa"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/humanize/numeric.go pkg/humanize/numeric_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/humanize/numeric.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 64.0
original_coverage = 100.0
mutation_kill_rate = 45.0
original_mutation_kill_rate = 78.0
covered_lines = [ 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 115, 116, 117, 118, 120,]
missed_lines = [ 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 57,]

[input_info]
test_file_path = "pkg/humanize/numeric_test.go"
focal_file_path = "pkg/humanize/numeric.go"
test_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/humanize/numeric_test.go"
focal_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/humanize/numeric.go"
first_commit_date = "2022-10-17"
last_commit_date = "2025-03-07"
test_file_content = "package humanize\n\nimport (\n\t\"math\"\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\nfunc TestFormatFloat(t *testing.T) {\n\tassert.Equal(t, \"0\", humanizeFloat(0.0, 0))\n\tassert.Equal(t, \"0.00\", humanizeFloat(0.0, 2))\n\tassert.Equal(t, \"1\", humanizeFloat(1.0, 0))\n\tassert.Equal(t, \"12\", humanizeFloat(12.0, 0))\n\tassert.Equal(t, \"123\", humanizeFloat(123.0, 0))\n\tassert.Equal(t, \"1,234\", humanizeFloat(1234.0, 0))\n\tassert.Equal(t, \"12,345.0\", humanizeFloat(12345.0, 1))\n\tassert.Equal(t, \"112,345.0\", humanizeFloat(112345.0, 1))\n\tassert.Equal(t, \"1\", humanizeFloat(1.123, 0))\n\tassert.Equal(t, \"-1\", humanizeFloat(-1.123, 0))\n\tassert.Equal(t, \"1,123,123\", humanizeFloat(1123123.123, 0))\n\tassert.Equal(t, \"-1,123,123\", humanizeFloat(-1123123.123, 0))\n\tassert.Equal(t, \"1,123,123.12\", humanizeFloat(1123123.123, 2))\n\tassert.Equal(t, \"1,123,123.123456\", humanizeFloat(1123123.123456, 6))\n\tassert.Equal(t, \"-1,123,123.123456\", humanizeFloat(-1123123.123456, 6))\n\tassert.Equal(t, \"-111,121,231,233,123.125000\", humanizeFloat(-111121231233123.123456, 6))\n\tassert.Equal(t, \"111,121,231,233,123.125000\", humanizeFloat(111121231233123.123456, 6))\n\tassert.Equal(t, \"28,446,744,073,709,551,616.0\", humanizeFloat(28446744073709551615.0, 1))\n\n\tassert.Equal(t, \"NaN\", humanizeFloat(math.NaN(), 2))\n\tassert.Equal(t, \"Inf\", humanizeFloat(math.Inf(1), 2))\n\tassert.Equal(t, \"Inf\", humanizeFloat(math.Inf(-1), 2))\n}\n\nfunc BenchmarkFormatInt(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\thumanizeInt(10000)\n\t}\n}\n\nfunc BenchmarkItoa(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\tstrconv.Itoa(10000)\n\t}\n}\n\n// BenchmarkFormatFloat-4   \t 2549425\t       473.6 ns/op\t      24 B/op\t       1 allocs/op\nfunc BenchmarkFormatFloat(b *testing.B) {\n\tfor i := 0; i < b.N; i++ {\n\t\thumanizeFloat(10000.123123123123, 10)\n\t}\n}\n"
