[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Franblueee/torchmil"
sha = "733d8fafb5c020313cca7fe3e5c8ce9c28d13a09"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=torchmil/data/representations.py -m pytest -q --junit-xml=test_output.xml tests/data/test_representations.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target torchmil.data.representations --unit-test tests.data.test_representations --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target torchmil/data/representations.py --unit-test tests/data/test_representations.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = [ 0, 3, 25, 26, 27, 28, 35, 38, 43, 46, 49, 51, 54, 75, 76, 77, 80, 86, 90, 92,]
missed_lines = []

[input_info]
test_file_path = "tests/data/test_representations.py"
focal_file_path = "torchmil/data/representations.py"
test_file_url = "https://github.com/Franblueee/torchmil/blob/733d8fafb5c020313cca7fe3e5c8ce9c28d13a09/tests/data/test_representations.py"
focal_file_url = "https://github.com/Franblueee/torchmil/blob/733d8fafb5c020313cca7fe3e5c8ce9c28d13a09/torchmil/data/representations.py"
first_commit_date = "2025-03-18"
last_commit_date = "2025-06-09"
test_file_content = "import torch\n\nfrom torchmil.data.representations import seq_to_spatial, spatial_to_seq\n\n\ndef test_seq_to_spatial_basic():\n    X = torch.tensor([[[1, 2], [3, 4], [5, 6]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0], [1, 0], [0, 1]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (1, 2, 2, 2)\n    expected_result = torch.tensor(\n        [[[[1, 2], [5, 6]], [[3, 4], [0, 0]]]], dtype=torch.float32\n    )\n\n\ndef test_seq_to_spatial_multiple_batches():\n    X = torch.tensor([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0], [1, 0]], [[0, 1], [1, 1]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (2, 2, 2, 2)\n    expected_result = torch.tensor(\n        [\n            [[[1.0, 2.0], [0.0, 0.0]], [[3.0, 4.0], [0.0, 0.0]]],\n            [[[0.0, 0.0], [5.0, 6.0]], [[0.0, 0.0], [7.0, 8.0]]],\n        ],\n        dtype=torch.float32,\n    )\n\n\ndef test_seq_to_spatial_different_dim():\n    X = torch.tensor([[[1, 2, 3], [4, 5, 6]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 1], [1, 0]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (1, 2, 2, 3)\n    expected_result = torch.tensor(\n        [[[[0.0, 0.0, 0.0], [1.0, 2.0, 3.0]], [[4.0, 5.0, 6.0], [0.0, 0.0, 0.0]]]],\n        dtype=torch.float32,\n    )\n\n\ndef test_seq_to_spatial_large_coordinates():\n    X = torch.tensor([[[1, 2], [3, 4]]], dtype=torch.float32)\n    coords = torch.tensor([[[10, 5], [20, 15]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (1, 21, 16, 2)\n    expected_result = torch.zeros(expected_shape, dtype=torch.float32)\n    expected_result[0, 10, 5, :] = X[0, 0, :]\n    expected_result[0, 20, 15, :] = X[0, 1, :]\n\n\ndef test_seq_to_spatial_3d_coordinates():\n    X = torch.tensor([[[1, 2], [3, 4]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0, 0], [1, 0, 1]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (1, 2, 1, 2, 2)\n    expected_result = torch.zeros(expected_shape, dtype=torch.float32)\n    expected_result[0, 0, 0, 0, :] = X[0, 0, :]\n    expected_result[0, 1, 0, 1, :] = X[0, 1, :]\n\n\ndef test_seq_to_spatial_bag_size_one():\n    X = torch.tensor([[[1, 2]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (1, 1, 1, 2)\n    expected_result = torch.tensor([[[[1, 2]]]], dtype=torch.float32)\n\n\ndef test_seq_to_spatial_coord_max_zero():\n    X = torch.tensor([[[1, 2], [3, 4]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0], [0, 0]]], dtype=torch.long)\n    X_esp = seq_to_spatial(X, coords)\n    expected_shape = (1, 1, 1, 2)\n    expected_result = torch.tensor([[[[3, 4]]]], dtype=torch.float32)\n\n\ndef test_spatial_to_seq_basic():\n    X_esp = torch.tensor([[[[1, 2], [3, 4]], [[5, 6], [7, 8]]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0], [1, 0]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (1, 2, 2)\n    expected_result = torch.tensor([[[1, 2], [5, 6]]], dtype=torch.float32)\n\n\ndef test_spatial_to_seq_multiple_batches():\n    X_esp = torch.tensor(\n        [\n            [[[1.0, 2.0], [3.0, 4.0]], [[0.0, 0.0], [0.0, 0.0]]],\n            [[[0.0, 0.0], [5.0, 6.0]], [[0.0, 0.0], [7.0, 8.0]]],\n        ],\n        dtype=torch.float32,\n    )\n    coords = torch.tensor([[[0, 0], [1, 0]], [[0, 1], [1, 1]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (2, 2, 2)\n    expected_result = torch.tensor(\n        [[[1, 2], [0, 0]], [[5, 6], [7, 8]]], dtype=torch.float32\n    )\n\n\ndef test_spatial_to_seq_different_dim():\n    X_esp = torch.tensor(\n        [[[[0.0, 0.0, 0.0], [1.0, 2.0, 3.0]], [[4.0, 5.0, 6.0], [0.0, 0.0, 0.0]]]],\n        dtype=torch.float32,\n    )\n    coords = torch.tensor([[[0, 1], [1, 0]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (1, 2, 3)\n    expected_result = torch.tensor([[[1, 2, 3], [4, 5, 6]]], dtype=torch.float32)\n\n\ndef test_spatial_to_seq_large_coordinates():\n    X_esp = torch.zeros((1, 21, 16, 2), dtype=torch.float32)\n    X_esp[0, 10, 5, :] = torch.tensor([1, 2], dtype=torch.float32)\n    X_esp[0, 20, 15, :] = torch.tensor([3, 4], dtype=torch.float32)\n    coords = torch.tensor([[[10, 5], [20, 15]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (1, 2, 2)\n    expected_result = torch.tensor([[[1, 2], [3, 4]]], dtype=torch.float32)\n\n\ndef test_spatial_to_seq_3d_coordinates():\n    X_esp = torch.zeros((1, 2, 1, 2, 2), dtype=torch.float32)\n    X_esp[0, 0, 0, 0, :] = torch.tensor([1, 2], dtype=torch.float32)\n    X_esp[0, 1, 0, 1, :] = torch.tensor([3, 4], dtype=torch.float32)\n\n    coords = torch.tensor([[[0, 0, 0], [1, 0, 1]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (1, 2, 2)\n    expected_result = torch.tensor([[[1, 2], [3, 4]]], dtype=torch.float32)\n\n\ndef test_spatial_to_seq_empty_input():\n    X_esp = torch.empty(0, 0, 0, 2, dtype=torch.float32)\n    coords = torch.empty(0, 0, 2, dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (0, 0, 2)\n\n\ndef test_spatial_to_seq_bag_size_one():\n    X_esp = torch.tensor([[[[1, 2]]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (1, 1, 2)\n    expected_result = torch.tensor([[[1, 2]]], dtype=torch.float32)\n\n\ndef test_spatial_to_seq_coord_max_zero():\n    X_esp = torch.tensor([[[[1, 2], [3, 4]]]], dtype=torch.float32)\n    coords = torch.tensor([[[0, 0], [0, 0]]], dtype=torch.long)\n    X_seq = spatial_to_seq(X_esp, coords)\n    expected_shape = (1, 2, 2)\n    expected_result = torch.tensor([[[1, 2], [1, 2]]], dtype=torch.float32)"
