[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "GIScience/openrouteservice"
sha = "957c6ace324fee2a0eeaea1791f36fc153e4c875"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl ors-engine -Dtest=EncoderNameEnumTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl ors-engine -DtargetClasses=**.EncoderNameEnum  -DtargetTests=**.EncoderNameEnumTest  -DoutputFormats=XML"
coverage_report_path = "ors-engine/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "ors-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 69.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "ors-engine/src/test/java/org/heigit/ors/common/EncoderNameEnumTest.java"
focal_file_path = "ors-engine/src/main/java/org/heigit/ors/common/EncoderNameEnum.java"
test_file_url = "https://github.com/GIScience/openrouteservice/blob/957c6ace324fee2a0eeaea1791f36fc153e4c875/ors-engine/src/test/java/org/heigit/ors/common/EncoderNameEnumTest.java"
focal_file_url = "https://github.com/GIScience/openrouteservice/blob/957c6ace324fee2a0eeaea1791f36fc153e4c875/ors-engine/src/main/java/org/heigit/ors/common/EncoderNameEnum.java"
first_commit_date = "2024-11-28"
last_commit_date = "2024-11-28"
test_file_content = "package org.heigit.ors.common;\n\nimport org.heigit.ors.routing.graphhopper.extensions.flagencoders.FlagEncoderNames;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass EncoderNameEnumTest {\n\n    @Test\n    void testGetName() {\n        assertEquals(\"driving-car\", EncoderNameEnum.DRIVING_CAR.getName());\n    }\n\n    @Test\n    void testGetValue() {\n        assertEquals(1, EncoderNameEnum.DRIVING_CAR.getValue());\n    }\n\n    @Test\n    void testIsDriving() {\n        assertTrue(EncoderNameEnum.isDriving(1));\n        assertFalse(EncoderNameEnum.isDriving(10));\n    }\n\n    @Test\n    void testIsHeavyVehicle() {\n        assertTrue(EncoderNameEnum.isHeavyVehicle(2));\n        assertFalse(EncoderNameEnum.isHeavyVehicle(1));\n    }\n\n    @Test\n    void testIsWalking() {\n        assertTrue(EncoderNameEnum.isWalking(20));\n        assertFalse(EncoderNameEnum.isWalking(1));\n    }\n\n    @Test\n    void testIsPedestrian() {\n        assertTrue(EncoderNameEnum.isPedestrian(20));\n        assertTrue(EncoderNameEnum.isPedestrian(30));\n        assertFalse(EncoderNameEnum.isPedestrian(1));\n    }\n\n    @Test\n    void testIsWheelchair() {\n        assertTrue(EncoderNameEnum.isWheelchair(30));\n        assertFalse(EncoderNameEnum.isWheelchair(1));\n    }\n\n    @Test\n    void testIsCycling() {\n        assertTrue(EncoderNameEnum.isCycling(10));\n        assertFalse(EncoderNameEnum.isCycling(1));\n    }\n\n    @Test\n    void testSupportMessages() {\n        assertTrue(EncoderNameEnum.supportMessages(1));\n        assertFalse(EncoderNameEnum.supportMessages(10));\n    }\n\n    @Test\n    void testGetNameByValue() {\n        assertEquals(\"driving-car\", EncoderNameEnum.getName(1));\n        assertEquals(\"default\", EncoderNameEnum.getName(99));\n    }\n\n    @Test\n    void testGetFromString() {\n        assertEquals(1, EncoderNameEnum.getFromString(\"driving-car\"));\n        assertEquals(0, EncoderNameEnum.getFromString(\"unknown-type\"));\n    }\n\n    @Test\n    void testGetEncoderName() {\n        assertEquals(FlagEncoderNames.CAR_ORS, EncoderNameEnum.getEncoderName(1));\n        assertEquals(FlagEncoderNames.GH_FOOT, EncoderNameEnum.getEncoderName(31));\n        assertEquals(FlagEncoderNames.GH_FOOT, EncoderNameEnum.getEncoderName(46));\n        assertEquals(FlagEncoderNames.UNKNOWN, EncoderNameEnum.getEncoderName(99));\n    }\n\n    @Test\n    void testGetFromEncoderName() {\n        assertEquals(1, EncoderNameEnum.getFromEncoderName(FlagEncoderNames.CAR_ORS));\n        assertEquals(20, EncoderNameEnum.getFromEncoderName(FlagEncoderNames.GH_FOOT));\n        assertEquals(20, EncoderNameEnum.getFromEncoderName(FlagEncoderNames.PEDESTRIAN_ORS));\n        assertEquals(30, EncoderNameEnum.getFromEncoderName(FlagEncoderNames.WHEELCHAIR));\n        assertEquals(0, EncoderNameEnum.getFromEncoderName(\"unknown-encoder\"));\n    }\n}"
