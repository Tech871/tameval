[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "eschava/psmqtt"
sha = "8a1c5601cdd494b206ab54de57930d4a398e73d3"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=src/handlers_base.py -m pytest -q --junit-xml=test_output.xml src/handlers_base_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target src.handlers_base --unit-test src.handlers_base_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target src/handlers_base.py --unit-test src/handlers_base_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 19.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 3, 4, 5, 16, 19, 21, 22, 23, 26, 27, 30, 31, 34, 43, 44, 45, 47, 72, 76, 86, 87, 91, 92, 94, 96, 100, 102, 104, 111, 121, 126, 147, 153, 180, 186, 240, 249, 250, 251, 253, 300, 307, 316, 317, 319, 382, 386, 392, 441,]
missed_lines = [ 24, 28, 32, 69, 70, 73, 93, 101, 115, 116, 117, 119, 127, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 154, 156, 157, 160, 162, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 195, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 254, 256, 257, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 304, 320, 322, 323, 325, 326, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 383, 393, 395, 396, 398, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 442,]

[input_info]
test_file_path = "src/handlers_base_test.py"
focal_file_path = "src/handlers_base.py"
test_file_url = "https://github.com/eschava/psmqtt/blob/8a1c5601cdd494b206ab54de57930d4a398e73d3/src/handlers_base_test.py"
focal_file_url = "https://github.com/eschava/psmqtt/blob/8a1c5601cdd494b206ab54de57930d4a398e73d3/src/handlers_base.py"
first_commit_date = "2025-01-29"
last_commit_date = "2025-03-13"
test_file_content = "# Copyright (c) 2016 psmqtt project\n# Licensed under the MIT License.  See LICENSE file in the project root for full license information.\n\nimport unittest\nfrom collections import namedtuple\nimport pytest\n\nfrom .handlers_base import (\n    IndexCommandHandler,\n    IndexOrTotalCommandHandler,\n    IndexOrTotalTupleCommandHandler,\n    IndexTupleCommandHandler,\n    NameOrTotalTupleCommandHandler,\n    TupleCommandHandler,\n    ValueCommandHandler,\n)\n\n@pytest.mark.unit\nclass TestHandlers(unittest.TestCase):\n\n    def test_value_command_handler(self) -> None:\n        handler = type(\n            \"TestHandler\",\n            (ValueCommandHandler, object),\n            {\"get_value\": lambda s: 50})('test')\n        # normal execution\n        self.assertEqual(50, handler.handle([]))\n        # exceptions\n        self.assertRaises(Exception, handler.handle, ['a'])\n        self.assertRaises(Exception, handler.handle, ['/'])\n        self.assertRaises(Exception, handler.handle, ['*'])\n\n    def test_ValueCommandHandler(self) -> None:\n        handler = ValueCommandHandler(\"cpu_percent\")\n        # normal execution\n        val = handler.handle([])\n        self.assertIsInstance(val, float)\n        # exceptions\n        self.assertRaises(Exception, handler.handle, ['a'])\n\n        return\n\n    def test_index_command_handler(self) -> None:\n        handler = type(\n            \"TestHandler\",\n            (IndexCommandHandler, object),\n            {\"get_value\": lambda s: [5, 6, 7]})('test')\n        # normal execution\n        self.assertEqual(5, handler.handle(['0']))\n        self.assertEqual([5, 6, 7], handler.handle(['*']))\n        self.assertEqual(\"[5, 6, 7]\", handler.handle(['+']))\n        self.assertEqual(3, handler.handle(['count']))\n\n        # exceptions\n        self.assertRaises(Exception, handler.handle, [''])\n        self.assertRaises(Exception, handler.handle, ['3'])\n        self.assertRaises(Exception, handler.handle, ['/'])\n        self.assertRaises(Exception, handler.handle, ['*/'])\n        self.assertRaises(Exception, handler.handle, ['/*'])\n        self.assertRaises(Exception, handler.handle, ['blabla'])\n        self.assertRaises(Exception, handler.handle, ['bla', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['bla/'])\n        self.assertRaises(Exception, handler.handle, ['', 'bla'])\n        return\n\n    def test_IndexCommandHandler(self) -> None:\n        handler = IndexCommandHandler('pids')\n        # normal execution\n        psutil_val = handler.get_value()\n        self.assertIsInstance(psutil_val, list)\n\n        val1 = handler.handle(['*'])\n        self.assertIsInstance(val1, list)\n\n        val2 = handler.handle(['count'])\n        assert isinstance(psutil_val, list)\n        self.assertEqual(val2, len(psutil_val))\n\n        val3 = handler.handle(['1'])\n        self.assertEqual(val3, psutil_val[1])\n        return\n\n    def test_tuple_command_handler(self) -> None:\n        test = namedtuple('test', 'a b')\n        handler = type(\n            \"TestHandler\",\n            (TupleCommandHandler, object),\n            {\n                \"get_value\": lambda s: test(10, 20)\n            })('test')\n        # normal execution\n        self.assertEqual(10, handler.handle(['a']))\n        self.assertEqual({'a': 10, 'b': 20}, handler.handle(['*']))\n        self.assertEqual('{\"a\": 10, \"b\": 20}', handler.handle(['+']))\n        # exceptions\n        self.assertRaises(Exception, handler.handle, [])\n        self.assertRaises(Exception, handler.handle, [''])\n        self.assertRaises(Exception, handler.handle, ['', '*'])\n        self.assertRaises(Exception, handler.handle, ['blabla'])\n        self.assertRaises(Exception, handler.handle, ['bla', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['bla/'])\n        self.assertRaises(Exception, handler.handle, ['', 'bla'])\n\n    def test_TupleCommandHandler(self) -> None:\n        for foo in ('cpu_times', 'cpu_stats', 'virtual_memory', 'swap_memory'):\n            handler = TupleCommandHandler(foo)\n            val = handler.get_value()\n            #print(val)\n            self.assertIsInstance(val, tuple)\n\n        # note that \"sensors_battery\" is not available on all platforms, so we accept\n        # None as return value of get_value() for \"sensors_battery\"\n        for foo_opt in ('sensors_battery'):\n            handler = TupleCommandHandler(foo)\n            val = handler.get_value()\n            #print(val)\n            if val is None:\n                pass\n            else:\n                self.assertIsInstance(val, tuple)\n        return\n\n    def test_index_tuple_command_handler(self) -> None:\n        test = namedtuple('test', 'a b')\n        r = [\n            test(1, 2),\n            test(3, 4)\n        ]\n        handler = type(\n            \"TestHandler\",\n            (IndexTupleCommandHandler, object),\n            {\"get_value\": lambda s: r})('test')\n        # normal execution\n        self.assertEqual([1, 3], handler.handle(['a', '*']))\n        self.assertEqual(\"[1, 3]\", handler.handle(['a', '+']))\n        self.assertEqual(3, handler.handle(['a', '1']))\n        self.assertEqual({'a': 3, 'b': 4}, handler.handle(['*', '1']))\n        self.assertEqual('{\"a\": 3, \"b\": 4}', handler.handle(['+', '1']))\n        # exceptions\n        self.assertRaises(Exception, handler.handle, [''])\n        self.assertRaises(Exception, handler.handle, ['*'])\n        self.assertRaises(Exception, handler.handle, ['+'])\n        self.assertRaises(Exception, handler.handle, ['a'])\n        self.assertRaises(Exception, handler.handle, ['a', ''])\n        self.assertRaises(Exception, handler.handle, ['*', ''])\n        self.assertRaises(Exception, handler.handle, ['', '*'])\n        self.assertRaises(Exception, handler.handle, ['blabla'])\n        self.assertRaises(Exception, handler.handle, ['bla', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['bla/'])\n        self.assertRaises(Exception, handler.handle, ['', 'bla'])\n\n    def test_index_or_total_command_handler(self) -> None:\n        handler = type(\"TestHandler\", (IndexOrTotalCommandHandler, object),\n                       {\"get_value\": lambda s, t: 5 if t else [1, 2, 3]})('test')\n        # normal execution\n        self.assertEqual(5, handler.handle(['']))\n        self.assertEqual(1, handler.handle(['0']))\n        self.assertEqual(3, handler.handle(['2']))\n        self.assertEqual([1, 2, 3], handler.handle(['*']))\n        self.assertEqual(\"[1, 2, 3]\", handler.handle(['+']))\n        self.assertEqual(3, handler.handle(['count']))\n        # exceptions\n        self.assertRaises(Exception, handler.handle, ['*-'])\n        self.assertRaises(Exception, handler.handle, ['*', ''])\n        self.assertRaises(Exception, handler.handle, ['', '*'])\n        self.assertRaises(Exception, handler.handle, '3')\n        self.assertRaises(Exception, handler.handle, ['blabla'])\n        self.assertRaises(Exception, handler.handle, ['bla', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['bla/'])\n        self.assertRaises(Exception, handler.handle, ['', 'bla'])\n\n    def test_index_or_total_tuple_command_handler(self) -> None:\n        test = namedtuple('test', 'a b')\n        total = test(10, 20)\n        single = [test(1, 2), test(3, 4)]\n        handler = type(\"TestHandler\", (IndexOrTotalTupleCommandHandler, object),\n                       {\"get_value\": lambda s, t: total if t else single})('test')\n        # normal execution\n        self.assertEqual({'a': 10, 'b': 20}, handler.handle(['*']))\n        self.assertEqual('{\"a\": 10, \"b\": 20}', handler.handle(['+']))\n        self.assertEqual(10, handler.handle(['a']))\n        self.assertEqual([1, 3], handler.handle(['a', '*']))\n        self.assertEqual(\"[1, 3]\", handler.handle(['a','+']))\n        self.assertEqual(3, handler.handle(['a','1']))\n        self.assertEqual({'a': 3, 'b': 4}, handler.handle(['*','1']))\n        self.assertEqual('{\"a\": 3, \"b\": 4}', handler.handle(['+','1']))\n        # exceptions\n        #self.assertRaisesRegex(Exception, \"Element '' in '' is not supported\", handler.handle, '')\n        self.assertRaisesRegex(Exception, \"Cannot list all elements and parameters at the same.*\", handler.handle, ['*','*'])\n        self.assertRaises(Exception, handler.handle, ['*-'])\n        self.assertRaises(Exception, handler.handle, ['','*'])\n        self.assertRaises(Exception, handler.handle, ['3'])\n        self.assertRaises(Exception, handler.handle, ['','3'])\n        self.assertRaises(Exception, handler.handle, ['blabla'])\n        self.assertRaises(Exception, handler.handle, ['bla', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['bla/'])\n        self.assertRaises(Exception, handler.handle, ['', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['*','5'])\n\n    def test_name_or_total_tuple_command_handler(self) -> None:\n        test = namedtuple('test', 'a b')\n        total = test(10, 20)\n        single = {\n            \"x\":  test(1, 2),\n            \"y\": test(3, 4)\n        }\n        handler = type(\n            \"TestHandler\",\n            (NameOrTotalTupleCommandHandler, object),\n            {\"get_value\": lambda s, t: total if t else single})('test')\n        # normal execution\n        self.assertEqual({'a': 10, 'b': 20}, handler.handle(['*']))\n        self.assertEqual('{\"a\": 10, \"b\": 20}', handler.handle(['+']))\n        self.assertEqual(10, handler.handle(['a']))\n        self.assertEqual({\"x\": 1, \"y\": 3}, handler.handle(['a','*']))\n        self.assertEqual('{\"x\": 1, \"y\": 3}', handler.handle(['a','+']))\n        self.assertEqual(3, handler.handle(['a','y']))\n        self.assertEqual({'a': 3, 'b': 4}, handler.handle(['*','y']))\n        self.assertEqual('{\"a\": 3, \"b\": 4}', handler.handle(['+','y']))\n        # exceptions\n        self.assertRaisesRegex(Exception, \"Element '' in .* is not supported\", handler.handle, [''])\n        self.assertRaisesRegex(Exception, \"Cannot list all elements and parameters at the same.*\", handler.handle, ['*','*'])\n        self.assertRaises(Exception, handler.handle, ['*-'])\n        self.assertRaises(Exception, handler.handle, ['','*'])\n        self.assertRaises(Exception, handler.handle, ['3'])\n        self.assertRaises(Exception, handler.handle, ['','3'])\n        self.assertRaises(Exception, handler.handle, ['a','0'])\n        self.assertRaises(Exception, handler.handle, ['c','x'])\n        self.assertRaises(Exception, handler.handle, ['blabla'])\n        self.assertRaises(Exception, handler.handle, ['bla', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['bla/'])\n        self.assertRaises(Exception, handler.handle, ['', 'bla'])\n        self.assertRaises(Exception, handler.handle, ['*','5'])"
