[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "jefferyjob/go-easy-utils"
sha = "e438f475b4adef971034c8fd744912fdeb865a74"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out cryptox/rsa.go cryptox/rsa_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting cryptox/rsa.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 64.0
original_coverage = 75.0
mutation_kill_rate = 18.0
original_mutation_kill_rate = 36.0
covered_lines = [ 11, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 40, 41, 42, 48, 54, 60, 65, 69, 70, 71, 72, 73, 74, 77, 83, 84, 85, 86, 88,]
missed_lines = [ 13, 14, 15, 28, 29, 30, 43, 44, 45, 49, 50, 51, 55, 56, 57, 61, 62, 63, 78, 79, 80,]

[input_info]
test_file_path = "cryptox/rsa_test.go"
focal_file_path = "cryptox/rsa.go"
test_file_url = "https://github.com/jefferyjob/go-easy-utils/blob/e438f475b4adef971034c8fd744912fdeb865a74/cryptox/rsa_test.go"
focal_file_url = "https://github.com/jefferyjob/go-easy-utils/blob/e438f475b4adef971034c8fd744912fdeb865a74/cryptox/rsa.go"
first_commit_date = "2025-07-08"
last_commit_date = "2025-07-08"
test_file_content = "package cryptox\n\nimport (\n\t\"errors\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\n// 伪造一个读取器，用来模拟产生错误的情况\ntype badRandomReader struct{}\n\nfunc (r *badRandomReader) Read([]byte) (int, error) {\n\treturn 0, errors.New(\"fake error\")\n}\n\n\n// 测试 rsa.GenerateKey 生产失败\n\n\n\nfunc TestDecryptRSA(t *testing.T) {\n\tprivateKey, publicKey, _ := GenerateRSAKeys()\n\n\t// 使用公钥加密一条消息，以便测试解密\n\tmessage := []byte(\"test message\")\n\tciphertext, err := EncryptRSA(publicKey, message)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to encrypt message: %v\", err)\n\t}\n\n\ttestCases := []struct {\n\t\tname          string\n\t\tprivateKeyStr string\n\t\tciphertext    []byte\n\t\texpected      []byte\n\t\texpectedErr   bool\n\t}{\n\t\t{\n\t\t\tname:          \"正常解密\",\n\t\t\tprivateKeyStr: privateKey,\n\t\t\tciphertext:    ciphertext,\n\t\t\texpected:      message,\n\t\t\texpectedErr:   false,\n\t\t},\n\t\t{\n\t\t\tname:          \"无效私钥\",\n\t\t\tprivateKeyStr: \"invalid private key\",\n\t\t\tciphertext:    ciphertext,\n\t\t\texpected:      nil,\n\t\t\texpectedErr:   true,\n\t\t},\n\t\t{\n\t\t\tname:          \"无效私钥格式\",\n\t\t\tprivateKeyStr: \"-----BEGIN RSA PRIVATE KEY-----\\nInvalidKey\\n-----END RSA PRIVATE KEY-----\",\n\t\t\tciphertext:    ciphertext,\n\t\t\texpected:      nil,\n\t\t\texpectedErr:   true,\n\t\t},\n\t\t{\n\t\t\tname:          \"无效密文\",\n\t\t\tprivateKeyStr: privateKey,\n\t\t\tciphertext:    []byte(\"invalid ciphertext\"),\n\t\t\texpected:      nil,\n\t\t\texpectedErr:   true,\n\t\t},\n\t\t{\n\t\t\tname:          \"无效私钥数据\",\n\t\t\tprivateKeyStr: \"-----BEGIN RSA PRIVATE KEY-----\\n\" + \"A\" + \"\\n-----END RSA PRIVATE KEY-----\",\n\t\t\tciphertext:    ciphertext,\n\t\t\texpected:      nil,\n\t\t\texpectedErr:   true,\n\t\t},\n\t\t{\n\t\t\tname: \"不完整的私钥\",\n\t\t\tprivateKeyStr: \"-----BEGIN RSA PRIVATE KEY-----\\n\" +\n\t\t\t\t\"MIICWwIBAAKBgQDEkzKS0u5p6kwl9m0g3g4mMI09S8QOAbW5aBMbDWZ5R0pUtH5h\" +\n\t\t\t\t\"J9mQFt8Uu4FJ8Yc9C5ZiM5F9pV5J2V4SeKk3RbKjFG2iD6rzO/OMrMZ3/1H8n02\" +\n\t\t\t\t\"eZ/D14SvnPBNhYnb8Ysdd4kS8A==\\n-----END RSA PRIVATE KEY-----\",\n\t\t\tciphertext:  ciphertext,\n\t\t\texpected:    nil,\n\t\t\texpectedErr: true,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult, err := DecryptRSA(tc.privateKeyStr, tc.ciphertext)\n\t\t\tif tc.expectedErr {\n\t\t\t\tassert.Error(t, err)\n\t\t\t\tassert.Nil(t, result)\n\t\t\t} else {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t\tassert.Equal(t, tc.expected, result)\n\t\t\t}\n\t\t})\n\t}\n}\n"
