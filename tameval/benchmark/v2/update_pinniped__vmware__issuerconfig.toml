[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.4"

[repo_info]
repository = "vmware/pinniped"
sha = "e20c5beb47391281e19d13b1e22c5fd42f577686"

[run_info]
docker_image = "golang:1.24.4"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/controller/issuerconfig/issuerconfig.go internal/controller/issuerconfig/issuerconfig_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/controller/issuerconfig/issuerconfig.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 68.0
mutation_kill_rate = nan
original_mutation_kill_rate = 71.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/controller/issuerconfig/issuerconfig_test.go"
focal_file_path = "internal/controller/issuerconfig/issuerconfig.go"
test_file_url = "https://github.com/vmware/pinniped/blob/e20c5beb47391281e19d13b1e22c5fd42f577686/internal/controller/issuerconfig/issuerconfig_test.go"
focal_file_url = "https://github.com/vmware/pinniped/blob/e20c5beb47391281e19d13b1e22c5fd42f577686/internal/controller/issuerconfig/issuerconfig.go"
first_commit_date = "2021-05-20"
last_commit_date = "2025-01-27"
test_file_content = "// Copyright 2021-2024 the Pinniped contributors. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\npackage issuerconfig\n\nimport (\n\t\"math/rand\"\n\t\"sort\"\n\t\"testing\"\n\t\"testing/quick\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\n\tconciergeconfigv1alpha1 \"go.pinniped.dev/generated/latest/apis/concierge/config/v1alpha1\"\n)\n\nfunc TestMergeStrategy(t *testing.T) {\n\tt1 := metav1.Now()\n\tt2 := metav1.NewTime(metav1.Now().Add(-1 * time.Hour))\n\n\ttests := []struct {\n\t\tname           string\n\t\tconfigToUpdate conciergeconfigv1alpha1.CredentialIssuerStatus\n\t\tstrategy       conciergeconfigv1alpha1.CredentialIssuerStrategy\n\t\texpected       conciergeconfigv1alpha1.CredentialIssuerStatus\n\t}{\n\t\t{\n\t\t\tname: \"new entry\",\n\t\t\tconfigToUpdate: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: nil,\n\t\t\t},\n\t\t\tstrategy: conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\tType:           \"Type1\",\n\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\tReason:         \"some reason\",\n\t\t\t\tMessage:        \"some message\",\n\t\t\t\tLastUpdateTime: t1,\n\t\t\t},\n\t\t\texpected: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\t\t\tReason:         \"some reason\",\n\t\t\t\t\t\tMessage:        \"some message\",\n\t\t\t\t\t\tLastUpdateTime: t1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"new entry updating deprecated kubeConfigInfo\",\n\t\t\tconfigToUpdate: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: nil,\n\t\t\t},\n\t\t\tstrategy: conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\tType:           \"Type1\",\n\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\tReason:         \"some reason\",\n\t\t\t\tMessage:        \"some message\",\n\t\t\t\tLastUpdateTime: t1,\n\t\t\t\tFrontend: &conciergeconfigv1alpha1.CredentialIssuerFrontend{\n\t\t\t\t\tType: \"TokenCredentialRequestAPI\",\n\t\t\t\t\tTokenCredentialRequestAPIInfo: &conciergeconfigv1alpha1.TokenCredentialRequestAPIInfo{\n\t\t\t\t\t\tServer:                   \"https://test-server\",\n\t\t\t\t\t\tCertificateAuthorityData: \"test-ca-bundle\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpected: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\t\t\tReason:         \"some reason\",\n\t\t\t\t\t\tMessage:        \"some message\",\n\t\t\t\t\t\tLastUpdateTime: t1,\n\t\t\t\t\t\tFrontend: &conciergeconfigv1alpha1.CredentialIssuerFrontend{\n\t\t\t\t\t\t\tType: \"TokenCredentialRequestAPI\",\n\t\t\t\t\t\t\tTokenCredentialRequestAPIInfo: &conciergeconfigv1alpha1.TokenCredentialRequestAPIInfo{\n\t\t\t\t\t\t\t\tServer:                   \"https://test-server\",\n\t\t\t\t\t\t\t\tCertificateAuthorityData: \"test-ca-bundle\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tKubeConfigInfo: &conciergeconfigv1alpha1.CredentialIssuerKubeConfigInfo{\n\t\t\t\t\tServer:                   \"https://test-server\",\n\t\t\t\t\tCertificateAuthorityData: \"test-ca-bundle\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"existing entry to update\",\n\t\t\tconfigToUpdate: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason\",\n\t\t\t\t\t\tMessage:        \"some starting message\",\n\t\t\t\t\t\tLastUpdateTime: t2,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tstrategy: conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\tType:           \"Type1\",\n\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\tReason:         \"some reason\",\n\t\t\t\tMessage:        \"some message\",\n\t\t\t\tLastUpdateTime: t1,\n\t\t\t},\n\t\t\texpected: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\t\t\tReason:         \"some reason\",\n\t\t\t\t\t\tMessage:        \"some message\",\n\t\t\t\t\t\tLastUpdateTime: t1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"existing entry matches except for LastUpdated time\",\n\t\t\tconfigToUpdate: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason\",\n\t\t\t\t\t\tMessage:        \"some starting message\",\n\t\t\t\t\t\tLastUpdateTime: t1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tstrategy: conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\tType:           \"Type1\",\n\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\tReason:         \"some starting reason\",\n\t\t\t\tMessage:        \"some starting message\",\n\t\t\t\tLastUpdateTime: t2,\n\t\t\t},\n\t\t\texpected: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason\",\n\t\t\t\t\t\tMessage:        \"some starting message\",\n\t\t\t\t\t\tLastUpdateTime: t1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"new entry among others\",\n\t\t\tconfigToUpdate: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type0\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason 0\",\n\t\t\t\t\t\tMessage:        \"some starting message 0\",\n\t\t\t\t\t\tLastUpdateTime: t2,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type2\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason 0\",\n\t\t\t\t\t\tMessage:        \"some starting message 0\",\n\t\t\t\t\t\tLastUpdateTime: t2,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tstrategy: conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\tType:           \"Type1\",\n\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\tReason:         \"some reason\",\n\t\t\t\tMessage:        \"some message\",\n\t\t\t\tLastUpdateTime: t1,\n\t\t\t},\n\t\t\texpected: conciergeconfigv1alpha1.CredentialIssuerStatus{\n\t\t\t\tStrategies: []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type0\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason 0\",\n\t\t\t\t\t\tMessage:        \"some starting message 0\",\n\t\t\t\t\t\tLastUpdateTime: t2,\n\t\t\t\t\t},\n\t\t\t\t\t// Expect the Type1 entry to be sorted alphanumerically between the existing entries.\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type1\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.SuccessStrategyStatus,\n\t\t\t\t\t\tReason:         \"some reason\",\n\t\t\t\t\t\tMessage:        \"some message\",\n\t\t\t\t\t\tLastUpdateTime: t1,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tType:           \"Type2\",\n\t\t\t\t\t\tStatus:         conciergeconfigv1alpha1.ErrorStrategyStatus,\n\t\t\t\t\t\tReason:         \"some starting reason 0\",\n\t\t\t\t\t\tMessage:        \"some starting message 0\",\n\t\t\t\t\t\tLastUpdateTime: t2,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tupdated := tt.configToUpdate.DeepCopy()\n\t\t\tmergeStrategy(updated, tt.strategy)\n\t\t\trequire.Equal(t, tt.expected.DeepCopy(), updated)\n\t\t})\n\t}\n}\n\nfunc TestStrategySorting(t *testing.T) {\n\texpected := []conciergeconfigv1alpha1.CredentialIssuerStrategy{\n\t\t{Type: conciergeconfigv1alpha1.KubeClusterSigningCertificateStrategyType},\n\t\t{Type: conciergeconfigv1alpha1.ImpersonationProxyStrategyType},\n\t\t{Type: \"Type1\"},\n\t\t{Type: \"Type2\"},\n\t\t{Type: \"Type3\"},\n\t}\n\trequire.NoError(t, quick.Check(func(seed int64) bool {\n\t\t// Create a randomly shuffled copy of the expected output.\n\t\t//nolint:gosec // this is not meant to be a secure random, just a seeded RNG for shuffling deterministically\n\t\trng := rand.New(rand.NewSource(seed))\n\t\toutput := make([]conciergeconfigv1alpha1.CredentialIssuerStrategy, len(expected))\n\t\tcopy(output, expected)\n\t\trng.Shuffle(\n\t\t\tlen(output),\n\t\t\tfunc(i, j int) { output[i], output[j] = output[j], output[i] },\n\t\t)\n\n\t\t// Sort it using the code under test.\n\t\tsort.Stable(sortableStrategies(output))\n\n\t\t// Assert that it's sorted back to the expected output order.\n\t\treturn assert.Equal(t, expected, output)\n\t}, nil))\n}"
