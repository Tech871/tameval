[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "authzed/spicedb"
sha = "449c43d3c8dbb72defa98dfd097392c2fa137870"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/genutil/mapz/multimap.go pkg/genutil/mapz/multimap_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/genutil/mapz/multimap.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 43.0
original_coverage = 43.0
mutation_kill_rate = 29.0
original_mutation_kill_rate = 29.0
covered_lines = [ 31, 32, 33, 56, 57, 58, 59, 61, 65, 66, 67, 70, 71, 72, 73, 79, 80, 81, 82, 83, 85, 94, 97, 100, 138, 139, 140, 141, 142, 149, 150, 151, 152, 169,]
missed_lines = [ 37, 38, 39, 47, 48, 49, 89, 90, 91, 103, 104, 105, 106, 107, 108, 112, 113, 114, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 134, 156, 157, 158, 159, 160, 162, 166, 172, 175, 176, 177, 178, 179, 180,]

[input_info]
test_file_path = "pkg/genutil/mapz/multimap_test.go"
focal_file_path = "pkg/genutil/mapz/multimap.go"
test_file_url = "https://github.com/authzed/spicedb/blob/449c43d3c8dbb72defa98dfd097392c2fa137870/pkg/genutil/mapz/multimap_test.go"
focal_file_url = "https://github.com/authzed/spicedb/blob/449c43d3c8dbb72defa98dfd097392c2fa137870/pkg/genutil/mapz/multimap.go"
first_commit_date = "2023-06-30"
last_commit_date = "2025-07-08"
test_file_content = "package mapz\n\nimport (\n\t\"sort\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestMultimapOperations(t *testing.T) {\n\tmm := NewMultiMap[string, int]()\n\trequire.Equal(t, 0, mm.Len())\n\trequire.True(t, mm.IsEmpty())\n\n\t// Add some values to the map.\n\tmm.Add(\"odd\", 1)\n\tmm.Add(\"odd\", 3)\n\tmm.Add(\"odd\", 5)\n\n\trequire.Equal(t, 1, mm.Len())\n\trequire.False(t, mm.IsEmpty())\n\n\trequire.True(t, mm.Has(\"odd\"))\n\tfound, ok := mm.Get(\"odd\")\n\trequire.True(t, ok)\n\trequire.Equal(t, []int{1, 3, 5}, found)\n\n\trequire.False(t, mm.Has(\"even\"))\n\tfound, ok = mm.Get(\"even\")\n\trequire.False(t, ok)\n\trequire.Equal(t, []int{}, found)\n\n\trequire.Equal(t, []string{\"odd\"}, mm.Keys())\n\n\t// Add some more values.\n\tmm.Add(\"even\", 2)\n\tmm.Add(\"even\", 4)\n\n\trequire.Equal(t, 2, mm.Len())\n\trequire.False(t, mm.IsEmpty())\n\n\trequire.True(t, mm.Has(\"even\"))\n\tfound, ok = mm.Get(\"even\")\n\trequire.True(t, ok)\n\trequire.Equal(t, []int{2, 4}, found)\n\n\tfoundKeys := mm.Keys()\n\tsort.Strings(foundKeys)\n\n\trequire.Equal(t, []string{\"even\", \"odd\"}, foundKeys)\n\n\t// Remove a key.\n\tmm.RemoveKey(\"odd\")\n\n\trequire.Equal(t, 1, mm.Len())\n\trequire.False(t, mm.IsEmpty())\n\n\tfoundKeys = mm.Keys()\n\tsort.Strings(foundKeys)\n\trequire.Equal(t, []string{\"even\"}, foundKeys)\n\n\trequire.False(t, mm.Has(\"odd\"))\n\tfound, ok = mm.Get(\"odd\")\n\trequire.False(t, ok)\n\trequire.Equal(t, []int{}, found)\n\n\t// Remove an unknown key.\n\tmm.RemoveKey(\"unknown\")\n\trequire.Equal(t, 1, mm.Len())\n\trequire.False(t, mm.IsEmpty())\n\n\t// Remove the last key.\n\tmm.RemoveKey(\"even\")\n\trequire.Equal(t, 0, mm.Len())\n\trequire.True(t, mm.IsEmpty())\n}\n\nfunc TestMultimapReadOnly(t *testing.T) {\n\tmm := NewMultiMap[string, int]()\n\trequire.Equal(t, 0, mm.Len())\n\trequire.True(t, mm.IsEmpty())\n\n\t// Add some values to the map.\n\tmm.Add(\"odd\", 1)\n\tmm.Add(\"odd\", 3)\n\tmm.Add(\"odd\", 5)\n\n\t// Make a read-only copy.\n\tro := mm.AsReadOnly()\n\n\t// Add some values to the original map.\n\tmm.Add(\"even\", 2)\n\tmm.Add(\"zero\", 0)\n\n\t// Make sure the read-only map was not modified.\n\trequire.Equal(t, 3, mm.Len())\n\trequire.Equal(t, 1, ro.Len())\n\n\trequire.True(t, mm.Has(\"even\"))\n\trequire.False(t, ro.Has(\"even\"))\n}\n"
