[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "factcast/factcast"
sha = "2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl factcast-server-security -Dtest=AccessRulesTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl factcast-server-security -DtargetClasses=**.AccessRules  -DtargetTests=**.AccessRulesTest  -DoutputFormats=XML"
coverage_report_path = "factcast-server-security/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "factcast-store/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 91.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 40, 41, 42, 43, 46, 47, 50, 53, 54, 55,]
missed_lines = [ 58,]

[input_info]
test_file_path = "factcast-server-security/src/test/java/org/factcast/server/security/auth/AccessRulesTest.java"
focal_file_path = "factcast-server-security/src/main/java/org/factcast/server/security/auth/AccessRules.java"
test_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-server-security/src/test/java/org/factcast/server/security/auth/AccessRulesTest.java"
focal_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-server-security/src/main/java/org/factcast/server/security/auth/AccessRules.java"
first_commit_date = "2023-10-14"
last_commit_date = "2025-02-11"
test_file_content = "/*\n * Copyright Â© 2017-2020 factcast.org\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.factcast.server.security.auth;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.*;\n\nclass AccessRulesTest {\n\n  private final AccessRules uut = new AccessRules();\n\n  @Test\n  void testIncludesDefaultsToNull() {\n    assertNull(uut.includes(\"foo\"));\n  }\n\n  @Test\n  void testIncludesNegative() {\n    uut.exclude().add(\"foo\");\n    assertFalse(uut.includes(\"foo\"));\n  }\n\n  @Test\n  void testIncludesNegativeExcludeWins() {\n    uut.exclude().add(\"foo\");\n    uut.include().add(\"foo\");\n    assertFalse(uut.includes(\"foo\"));\n  }\n\n  @Test\n  void testIncludesNegativeExcludeWildcardWins() {\n    uut.exclude().add(\"*\");\n    uut.include().add(\"foo\");\n    assertFalse(uut.includes(\"foo\"));\n  }\n\n  @Test\n  void testIncludesPositive() {\n    uut.include().add(\"foo\");\n    assertTrue(uut.includes(\"foo\"));\n  }\n\n  @Test\n  void testIncludesPositiveWildcardStar() {\n    uut.include().add(\"*\");\n    assertTrue(uut.includes(\"foo\"));\n  }\n\n  @Test\n  void testIncludesPositiveWildcard() {\n    uut.include().add(\"fo*\");\n    assertTrue(uut.includes(\"foo\"));\n  }\n}"
