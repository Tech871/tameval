[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"
bench_version = 1

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/generator/vhdl/simulation/check_package.py -m pytest -q --junit-xml=test_output.xml hdl_registers/generator/vhdl/simulation/test/test_check_package.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.generator.vhdl.simulation.check_package --unit-test hdl_registers.generator.vhdl.simulation.test.test_check_package --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/generator/vhdl/simulation/check_package.py --unit-test hdl_registers/generator/vhdl/simulation/test/test_check_package.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 25.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 11, 13, 14, 15, 16, 18, 20, 28, 53, 55, 57, 58, 62, 64, 74, 76, 121, 180, 215, 248, 302, 362,]
missed_lines = [ 21, 23, 24, 25, 83, 85, 125, 126, 128, 131, 134, 137, 140, 142, 144, 149, 159, 162, 164, 166, 171, 173, 174, 175, 176, 178, 186, 189, 194, 202, 224, 228, 231, 235, 252, 253, 255, 258, 263, 269, 271, 280, 287, 294, 295, 296, 297, 298, 300, 308, 311, 315, 319, 334, 336, 371, 374, 377, 380, 384, 395, 396, 397, 399, 402, 404, 406, 422, 424,]

[input_info]
test_file_path = "hdl_registers/generator/vhdl/simulation/test/test_check_package.py"
focal_file_path = "hdl_registers/generator/vhdl/simulation/check_package.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/generator/vhdl/simulation/test/test_check_package.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/generator/vhdl/simulation/check_package.py"
first_commit_date = "2024-02-05"
last_commit_date = "2025-02-12"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\n\"\"\"\nSome limited unit tests.\nNote that the generated VHDL code is also simulated in a functional test.\n\"\"\"\n\n# Third party libraries\nfrom tsfpga.system_utils import read_file\n\n# First party libraries\nfrom hdl_registers.generator.vhdl.simulation.check_package import (\n    VhdlSimulationCheckPackageGenerator,\n)\nfrom hdl_registers.register_list import RegisterList\n\n\ndef test_package_is_not_generated_without_registers(tmp_path):\n    register_list = RegisterList(name=\"test\", source_definition_file=None)\n\n    assert not VhdlSimulationCheckPackageGenerator(register_list, tmp_path).create().exists()\n\n    register_list.add_constant(name=\"apa\", value=True, description=\"\")\n    assert not VhdlSimulationCheckPackageGenerator(register_list, tmp_path).create().exists()\n\n    register_list.append_register(name=\"hest\", mode=\"r_w\", description=\"\")\n    assert VhdlSimulationCheckPackageGenerator(register_list, tmp_path).create().exists()\n\n\ndef test_re_generating_package_without_registers_should_delete_old_file(tmp_path):\n    register_list = RegisterList(name=\"test\", source_definition_file=None)\n    register_list.append_register(name=\"apa\", mode=\"r_w\", description=\"\")\n\n    assert VhdlSimulationCheckPackageGenerator(register_list, tmp_path).create().exists()\n\n    register_list.register_objects = []\n    assert not VhdlSimulationCheckPackageGenerator(register_list, tmp_path).create().exists()\n\n\ndef test_only_readable_registers_are_included(tmp_path):\n    register_list = RegisterList(name=\"test\", source_definition_file=None)\n\n    register_list.append_register(name=\"include_r\", mode=\"r\", description=\"\").append_bit(\n        name=\"\", description=\"\", default_value=\"0\"\n    )\n    register_list.append_register(name=\"exclude_w\", mode=\"w\", description=\"\").append_bit(\n        name=\"\", description=\"\", default_value=\"0\"\n    )\n    register_list.append_register(name=\"include_r_w\", mode=\"r_w\", description=\"\").append_bit(\n        name=\"\", description=\"\", default_value=\"0\"\n    )\n    register_list.append_register(name=\"exclude_wpulse\", mode=\"wpulse\", description=\"\").append_bit(\n        name=\"\", description=\"\", default_value=\"0\"\n    )\n    register_list.append_register(\n        name=\"include_r_wpulse\", mode=\"r_wpulse\", description=\"\"\n    ).append_bit(name=\"\", description=\"\", default_value=\"0\")\n\n    vhdl = read_file(VhdlSimulationCheckPackageGenerator(register_list, tmp_path).create())\n\n    assert \"include_r\" in vhdl\n    assert \"include_r_w\" in vhdl\n    assert \"include_r_wpulse\" in vhdl\n    assert \"exclude\" not in vhdl"
