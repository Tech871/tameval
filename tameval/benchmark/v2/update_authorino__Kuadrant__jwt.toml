[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.8"

[repo_info]
repository = "Kuadrant/authorino"
sha = "21d456d60269371848937208af54a83145957450"

[run_info]
docker_image = "golang:1.23.8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/evaluators/identity/jwt.go pkg/evaluators/identity/jwt_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/evaluators/identity/jwt.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 56.0
mutation_kill_rate = nan
original_mutation_kill_rate = 41.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/evaluators/identity/jwt_test.go"
focal_file_path = "pkg/evaluators/identity/jwt.go"
test_file_url = "https://github.com/Kuadrant/authorino/blob/21d456d60269371848937208af54a83145957450/pkg/evaluators/identity/jwt_test.go"
focal_file_url = "https://github.com/Kuadrant/authorino/blob/21d456d60269371848937208af54a83145957450/pkg/evaluators/identity/jwt.go"
first_commit_date = "2025-05-28"
last_commit_date = "2025-06-17"
test_file_content = "package identity\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\tenvoy_auth \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3\"\n\tmock_auth \"github.com/kuadrant/authorino/pkg/auth/mocks\"\n\tmock_identity \"github.com/kuadrant/authorino/pkg/evaluators/identity/mocks\"\n\t\"github.com/kuadrant/authorino/pkg/httptest\"\n\tmock_workers \"github.com/kuadrant/authorino/pkg/workers/mocks\"\n\n\toidc \"github.com/coreos/go-oidc/v3/oidc\"\n\t\"go.uber.org/mock/gomock\"\n\t\"gotest.tools/assert\"\n)\n\nconst oidcServerHost = \"127.0.0.1:9006\"\n\nvar jwtAuthenticationRequestMock = &envoy_auth.CheckRequest{\n\tAttributes: &envoy_auth.AttributeContext{\n\t\tRequest: &envoy_auth.AttributeContext_Request{\n\t\t\tHttp: &envoy_auth.AttributeContext_HttpRequest{\n\t\t\t\tHeaders: map[string]string{\n\t\t\t\t\t\"authorization\": \"Bearer token\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n}\n\nfunc oidcServerMockResponse(count int) httptest.HttpServerMockResponse {\n\treturn httptest.HttpServerMockResponse{\n\t\tStatus:  200,\n\t\tHeaders: map[string]string{\"Content-Type\": \"application/json\"},\n\t\tBody:    fmt.Sprintf(`{ \"issuer\": \"http://%v\", \"authorization_endpoint\": \"http://%v/auth?count=%v\" }`, oidcServerHost, oidcServerHost, count),\n\t}\n}\n\nfunc TestJWTAuthenticationCall(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := mock_identity.NewMockJWTVerifier(ctrl)\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\n\tconst issuer = \"http://keycloak:8080/auth/realms/kuadrant\"\n\tconst rawToken = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ5cm0tSWpweGRfd3dzVmZPR1FUWWE2NHVmdEVlOHY3VG5sQzFMLUl4ZUlJIn0.eyJleHAiOjIxNDU4NjU3NzMsImlhdCI6MTY1OTA4ODE3MywianRpIjoiZDI0ODliMWEtYjY0Yi00MzRhLWJhNmItMmQ4OGIyY2I1ZWE3IiwiaXNzIjoiaHR0cDovL2tleWNsb2FrOjgwODAvYXV0aC9yZWFsbXMva3VhZHJhbnQiLCJhdWQiOlsicmVhbG0tbWFuYWdlbWVudCIsImFjY291bnQiXSwic3ViIjoiMWEwYjZjNmUtNDdmNy00ZjI1LWEyNjYtYzg3MzZhOTkxODQ0IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiZGVtbyIsInNlc3Npb25fc3RhdGUiOiIxMTdkMTc1Ni1mM2RlLTRjM2MtOWEwZS0zYjU5Mzc2YmI0ZTgiLCJhY3IiOiIxIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwibWVtYmVyIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJyZWFsbS1tYW5hZ2VtZW50Ijp7InJvbGVzIjpbInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwidmlldy1yZWFsbSIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwicmVhbG0tYWRtaW4iLCJjcmVhdGUtY2xpZW50IiwibWFuYWdlLXVzZXJzIiwicXVlcnktcmVhbG1zIiwidmlldy1hdXRob3JpemF0aW9uIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LXVzZXJzIiwibWFuYWdlLWV2ZW50cyIsIm1hbmFnZS1yZWFsbSIsInZpZXctZXZlbnRzIiwidmlldy11c2VycyIsInZpZXctY2xpZW50cyIsIm1hbmFnZS1hdXRob3JpemF0aW9uIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsInNpZCI6IjExN2QxNzU2LWYzZGUtNGMzYy05YTBlLTNiNTkzNzZiYjRlOCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IlBldGVyIFdobyIsInByZWZlcnJlZF91c2VybmFtZSI6InBldGVyIiwiZ2l2ZW5fbmFtZSI6IlBldGVyIiwiZmFtaWx5X25hbWUiOiJXaG8iLCJlbWFpbCI6InBldGVyQGt1YWRyYW50LmlvIn0.Yy2aWR6_u0NBLx8x--OToYipfQ1f1KcC8zedsKDiymcbBiAaxrBQmaV2JC1PQVEgyxwmyMk0Rao2MdKGWk6pXB9mTUF5FX-pS8mkPIMUt1UVGJgzq7WR9KfRqdZSzRtFQHoDmTeA1-msayMYTAD8xtUH4JYRNbIXjY2cEtn8LjuLpQVR3DR4_ARMrEYXiDBS3rmmFKHdipqU7ozwJ_gtpZv8vfeiO3mUPyQLJKQ-nKpe_Z5z7tm_Ewh5MN2oBfn_0pcdANB3pe2RclGAm-YHlyNDTnAZL2Y1gdCmwzwigk7AJcgWtPqnRzvEQ9zRBxQRai5W5aNKYTxuKIG8k9N05w\"\n\n\tv := oidc.NewVerifier(issuer, nil, &oidc.Config{SkipClientIDCheck: true, SkipIssuerCheck: true, SkipExpiryCheck: true, InsecureSkipSignatureCheck: true})\n\ttoken, _ := v.Verify(context.TODO(), rawToken)\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tpipelineMock.EXPECT().GetRequest().Return(jwtAuthenticationRequestMock)\n\tauthCredMock.EXPECT().GetCredentialsFromReq(jwtAuthenticationRequestMock.GetAttributes().GetRequest().GetHttp()).Return(rawToken, nil)\n\tjwtVerifier.EXPECT().Verify(gomock.Any(), rawToken).Return(token, nil)\n\tobj, err := evaluator.Call(pipelineMock, context.TODO())\n\n\tassert.Equal(t, obj.(map[string]any)[\"iss\"].(string), issuer)\n\tassert.NilError(t, err)\n}\n\nfunc TestOIDCProviderVerifierUnknownHost(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewOIDCProviderVerifier(context.TODO(), \"http://unreachable-server\", 0)\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tpipelineMock.EXPECT().GetRequest().Return(jwtAuthenticationRequestMock)\n\tauthCredMock.EXPECT().GetCredentialsFromReq(jwtAuthenticationRequestMock.GetAttributes().GetRequest().GetHttp()).Return(\"token\", nil)\n\ttoken, err := evaluator.Call(pipelineMock, context.TODO())\n\n\tassert.Check(t, token == nil)\n\tassert.Error(t, err, \"missing openid connect configuration\")\n}\n\nfunc TestOIDCProviderVerifierNotFound(t *testing.T) {\n\tauthServer := httptest.NewHttpServerMock(oidcServerHost, map[string]httptest.HttpServerMockResponseFunc{\n\t\t\"/.well-known/openid-configuration\": func() httptest.HttpServerMockResponse { return httptest.HttpServerMockResponse{Status: 404} },\n\t})\n\tdefer authServer.Close()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewOIDCProviderVerifier(context.TODO(), fmt.Sprintf(\"http://%v\", oidcServerHost), 0)\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tpipelineMock.EXPECT().GetRequest().Return(jwtAuthenticationRequestMock)\n\tauthCredMock.EXPECT().GetCredentialsFromReq(jwtAuthenticationRequestMock.GetAttributes().GetRequest().GetHttp()).Return(\"token\", nil)\n\ttoken, err := evaluator.Call(pipelineMock, context.TODO())\n\n\tassert.Check(t, token == nil)\n\tassert.Error(t, err, \"missing openid connect configuration\")\n}\n\nfunc TestOIDCProviderVerifierInternalError(t *testing.T) {\n\tauthServer := httptest.NewHttpServerMock(oidcServerHost, map[string]httptest.HttpServerMockResponseFunc{\n\t\t\"/.well-known/openid-configuration\": func() httptest.HttpServerMockResponse { return httptest.HttpServerMockResponse{Status: 500} },\n\t})\n\tdefer authServer.Close()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewOIDCProviderVerifier(context.TODO(), fmt.Sprintf(\"http://%v\", oidcServerHost), 0)\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tpipelineMock.EXPECT().GetRequest().Return(jwtAuthenticationRequestMock)\n\tauthCredMock.EXPECT().GetCredentialsFromReq(jwtAuthenticationRequestMock.GetAttributes().GetRequest().GetHttp()).Return(\"token\", nil)\n\ttoken, err := evaluator.Call(pipelineMock, context.TODO())\n\n\tassert.Check(t, token == nil)\n\tassert.Error(t, err, \"missing openid connect configuration\")\n}\n\nfunc TestOIDCProviderVerifierRefresh(t *testing.T) {\n\tcount := 0\n\tauthServer := httptest.NewHttpServerMock(oidcServerHost, map[string]httptest.HttpServerMockResponseFunc{\n\t\t\"/.well-known/openid-configuration\": func() httptest.HttpServerMockResponse {\n\t\t\tcount += 1\n\t\t\treturn oidcServerMockResponse(count)\n\t\t},\n\t})\n\tdefer authServer.Close()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewOIDCProviderVerifier(context.TODO(), fmt.Sprintf(\"http://%v\", oidcServerHost), 3) // refresh every 3 seconds\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\tdefer evaluator.Clean(context.Background())\n\n\tverifier, _ := jwtVerifier.(*oidcProviderVerifier)\n\tassert.Check(t, verifier.refresher != nil)\n\n\ttime.Sleep(4 * time.Second)\n\tassert.Equal(t, 2, count)\n\tverifier, _ = jwtVerifier.(*oidcProviderVerifier)\n\tassert.Equal(t, fmt.Sprintf(\"http://%v/auth?count=2\", oidcServerHost), verifier.provider.Endpoint().AuthURL)\n}\n\nfunc TestOIDCProviderVerifierRefreshDisabled(t *testing.T) {\n\tcount := 0\n\tauthServer := httptest.NewHttpServerMock(oidcServerHost, map[string]httptest.HttpServerMockResponseFunc{\n\t\t\"/.well-known/openid-configuration\": func() httptest.HttpServerMockResponse {\n\t\t\tcount += 1\n\t\t\treturn oidcServerMockResponse(count)\n\t\t},\n\t})\n\tdefer authServer.Close()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewOIDCProviderVerifier(context.TODO(), fmt.Sprintf(\"http://%v\", oidcServerHost), 0) // refresh disabled\n\tdefer jwtVerifier.(*oidcProviderVerifier).Clean(context.Background())\n\n\ttime.Sleep(2 * time.Second)\n\tassert.Equal(t, 1, count)\n\tverifier, _ := jwtVerifier.(*oidcProviderVerifier)\n\tassert.Equal(t, fmt.Sprintf(\"http://%v/auth?count=1\", oidcServerHost), verifier.provider.Endpoint().AuthURL)\n}\n\nfunc TestOIDCProviderVerifierRefreshClean(t *testing.T) {\n\tcount := 0\n\tauthServer := httptest.NewHttpServerMock(oidcServerHost, map[string]httptest.HttpServerMockResponseFunc{\n\t\t\"/.well-known/openid-configuration\": func() httptest.HttpServerMockResponse {\n\t\t\tcount += 1\n\t\t\treturn oidcServerMockResponse(count)\n\t\t},\n\t})\n\tdefer authServer.Close()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := &oidcProviderVerifier{issuerUrl: fmt.Sprintf(\"http://%v\", oidcServerHost)}\n\trefresher := mock_workers.NewMockWorker(ctrl)\n\tjwtVerifier.refresher = refresher\n\trefresher.EXPECT().Stop()\n\terr := jwtVerifier.Clean(context.Background())\n\tassert.NilError(t, err)\n}\n\nfunc TestJWKSVerifierTokenExpired(t *testing.T) {\n\tauthServer := httptest.NewHttpServerMock(oidcServerHost, map[string]httptest.HttpServerMockResponseFunc{\n\t\t\"/certs\": func() httptest.HttpServerMockResponse {\n\t\t\treturn httptest.HttpServerMockResponse{\n\t\t\t\tStatus:  200,\n\t\t\t\tHeaders: map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\t\tBody:    `{\"keys\":[{\"kid\":\"nRygyU6fNLNMYEeCr4zXePyVEQFR85BXKZwt8pvlNYo\",\"kty\":\"RSA\",\"alg\":\"RS256\",\"use\":\"sig\",\"n\":\"wHMzFkVkYixA218jTCBSWJYwV1qsHq1lfNWG47CdLFWT6O-CZ2aGmb1vefOKpxvPzrP-RWQywllHpoktEoAmw6uy6d_A2TfdOdGvIGLgKLdm-4VXRFc5qlm6ipuXj8cCvo4Ff8UXxUewZrgvLMlf1Dq5GlfcfUOB6wAPfePmg2r5MlPEgC5ps8XF2hFweI6HjUM_EPUaxP3wkmv9cgU5TfTnbtStNLtdlrHDQDzx9x0GgQW1ttzLJ6O0E0Z6m1ghUnf1PPNCB9uQx6Z0xAmPEOAMmg4bbfn3550penZ6YvJqjZzu6EdHyhh6hyuNOUAihuKL2zXjfYnuS7dO0JAgzw\",\"e\":\"AQAB\",\"x5c\":[\"MIICnzCCAYcCBgGXF016gDANBgkqhkiG9w0BAQsFADATMREwDwYDVQQDDAhrdWFkcmFudDAeFw0yNTA1MjgxNDI5MDNaFw0zNTA1MjgxNDMwNDNaMBMxETAPBgNVBAMMCGt1YWRyYW50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwHMzFkVkYixA218jTCBSWJYwV1qsHq1lfNWG47CdLFWT6O+CZ2aGmb1vefOKpxvPzrP+RWQywllHpoktEoAmw6uy6d/A2TfdOdGvIGLgKLdm+4VXRFc5qlm6ipuXj8cCvo4Ff8UXxUewZrgvLMlf1Dq5GlfcfUOB6wAPfePmg2r5MlPEgC5ps8XF2hFweI6HjUM/EPUaxP3wkmv9cgU5TfTnbtStNLtdlrHDQDzx9x0GgQW1ttzLJ6O0E0Z6m1ghUnf1PPNCB9uQx6Z0xAmPEOAMmg4bbfn3550penZ6YvJqjZzu6EdHyhh6hyuNOUAihuKL2zXjfYnuS7dO0JAgzwIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQCFdkqG9Hm8nfFzAzyCWh5DrjE54e9Qj9/dosRkyV++Scaf8UfY7MC1y5n/aC29vP1SRPwkPRMXTFj0lEL+edQ9Y2IyyhIyH/V45pYFfeW7lJngED6wCCqWgObDEiX83S+GTTQIVxoEppW2hWTdWeSNOaCV5TJ70fGOhXgLeeY73/VmOnNkt5x3dSwS5Uk/b78BUCh+ZVjuwcXxzF2u9VTQyP/Qrpy7xsROYptzB8NabinieREe0XBPY4hesyWbVKYyliIhWwvjr9JVjfjr2zQTqz82625ZlK/hnxJQVdpMXaCm5A5bCIxuhDse+eaNbIAdHdKBXZDujG2URmHB5Fqk\"],\"x5t\":\"as4omm562civnCct6fmfOMzX1zc\",\"x5t#S256\":\"EY_x32hxjmBic5riPdoGDOFSN8CqZOYUaaB6KnCU-co\"}]}`,\n\t\t\t}\n\t\t},\n\t})\n\tdefer authServer.Close()\n\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewJwksVerifier(context.TODO(), fmt.Sprintf(\"http://%v/certs\", oidcServerHost))\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\n\tconst rawToken = \"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuUnlneVU2Zk5MTk1ZRWVDcjR6WGVQeVZFUUZSODVCWEtad3Q4cHZsTllvIn0.eyJleHAiOjE3NDg1MTIyMTYsImlhdCI6MTc0ODUxMTkxNiwianRpIjoiODJhOGViYTctYTAzYi00YzM5LTkxYjEtOTU1OTNiODgxMTFmIiwiaXNzIjoiaHR0cDovL2tleWNsb2FrOjgwODAvcmVhbG1zL2t1YWRyYW50IiwiYXVkIjpbInJlYWxtLW1hbmFnZW1lbnQiLCJhY2NvdW50Il0sInN1YiI6ImY2ZjZlYTlhLTU3YmMtNGJjYS1hYTFiLTk2ODdkNzIyMDgxNyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImRlbW8iLCJzZXNzaW9uX3N0YXRlIjoiOGJjMTBlNjMtNDhkYy00ZWJhLTllMTgtZDlkMWQyZWU4NTRiIiwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIm9mZmxpbmVfYWNjZXNzIiwibWVtYmVyIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJyZWFsbS1tYW5hZ2VtZW50Ijp7InJvbGVzIjpbInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwidmlldy1yZWFsbSIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwicmVhbG0tYWRtaW4iLCJjcmVhdGUtY2xpZW50IiwibWFuYWdlLXVzZXJzIiwicXVlcnktcmVhbG1zIiwidmlldy1hdXRob3JpemF0aW9uIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LXVzZXJzIiwibWFuYWdlLWV2ZW50cyIsIm1hbmFnZS1yZWFsbSIsInZpZXctZXZlbnRzIiwidmlldy11c2VycyIsInZpZXctY2xpZW50cyIsIm1hbmFnZS1hdXRob3JpemF0aW9uIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJzaWQiOiI4YmMxMGU2My00OGRjLTRlYmEtOWUxOC1kOWQxZDJlZTg1NGIiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibmFtZSI6IkpvaG4gRG9lIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiam9obiIsImdpdmVuX25hbWUiOiJKb2huIiwiZmFtaWx5X25hbWUiOiJEb2UiLCJlbWFpbCI6ImpvaG5Aa3VhZHJhbnQuaW8ifQ.vMlILMmxjadto_CHahbNdSQwhVIJil2pnCwA5dKEZlrYeLnTo1zrptVsGFzyvTSwiB6d0SozoGBqVRU7L6amFcd9KBxk-4dfDhMcKn6NfqBzuYs6NR20i7wknOsUgtdn5O7DmHYjKkNs1Kr55JG6htCLlHRXa4O6wun6qWC3Gp03aLS5n7a0vxPlnPDNszy-QXT4iXeED5n7eJ1s0CVZrD6pZ4fmYWaDWW8PUj25hOBukR6bRwKGN0qioGGYQtgVq491AsvG3cp083nlGfVj9hAEWDtwvuuokmCHCWPTbsppT1CNUcYXODl4QK95VUi7NK66NAbjVc9uD69awei-1A\"\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tpipelineMock.EXPECT().GetRequest().Return(jwtAuthenticationRequestMock)\n\tauthCredMock.EXPECT().GetCredentialsFromReq(jwtAuthenticationRequestMock.GetAttributes().GetRequest().GetHttp()).Return(rawToken, nil)\n\ttoken, err := evaluator.Call(pipelineMock, context.TODO())\n\n\tassert.Check(t, token == nil)\n\tassert.ErrorContains(t, err, \"oidc: token is expired\")\n}\n\nfunc TestJWKSVerifierMalformedJWT(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tjwtVerifier := NewJwksVerifier(context.TODO(), fmt.Sprintf(\"http://%v/certs\", oidcServerHost))\n\tauthCredMock := mock_auth.NewMockAuthCredentials(ctrl)\n\tevaluator := NewJWTAuthentication(context.TODO(), jwtVerifier, authCredMock)\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tpipelineMock.EXPECT().GetRequest().Return(jwtAuthenticationRequestMock)\n\tauthCredMock.EXPECT().GetCredentialsFromReq(jwtAuthenticationRequestMock.GetAttributes().GetRequest().GetHttp()).Return(\"token\", nil)\n\ttoken, err := evaluator.Call(pipelineMock, context.TODO())\n\n\tassert.Check(t, token == nil)\n\tassert.ErrorContains(t, err, \"oidc: malformed jwt\")\n}"
