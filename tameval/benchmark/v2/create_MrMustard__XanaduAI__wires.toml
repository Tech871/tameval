[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "XanaduAI/MrMustard"
sha = "a4e85ddf1df86333ecb8014f36d30e4437cbe4d4"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mrmustard/physics/wires.py -m pytest -q --junit-xml=test_output.xml tests/test_physics/test_wires.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mrmustard.physics.wires --unit-test tests.test_physics.test_wires --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mrmustard/physics/wires.py --unit-test tests/test_physics/test_wires.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 86.0
original_coverage = 100.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 25, 35, 38, 39, 40, 41, 42, 43, 46, 49, 50, 51, 52, 53, 54, 55, 58, 59, 73, 74, 75, 76, 77, 78, 79, 81, 90, 100, 105, 115, 116, 119, 120, 132, 133, 134, 135, 136, 138, 140, 148, 153, 158, 159, 162, 301, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 342, 343, 344, 345, 346, 347, 349, 350, 354, 363, 364, 369, 371, 372, 377, 379, 380, 391, 392, 396, 398, 399, 403, 405, 406, 411, 416, 417, 422, 424, 425, 429, 431, 432, 437, 442, 443, 448, 450, 451, 455, 457, 458, 469, 470, 471, 472, 474, 487, 512, 514, 519, 530, 531, 534, 536, 542, 543, 544, 546, 550, 551, 553, 559, 561, 563, 568, 569, 574, 578, 579, 584, 587, 588, 590, 591, 593, 629, 630, 631, 632, 633, 634, 637, 645, 647, 650, 651, 663, 668,]
missed_lines = [ 384, 385, 386, 387, 388, 389, 482, 483, 484, 485, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 510, 526, 527, 528, 532, 533, 585,]

[input_info]
test_file_path = "tests/test_physics/test_wires.py"
focal_file_path = "mrmustard/physics/wires.py"
test_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/tests/test_physics/test_wires.py"
focal_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/mrmustard/physics/wires.py"
first_commit_date = "2024-10-29"
last_commit_date = "2025-07-14"
test_file_content = "# Copyright 2023 Xanadu Quantum Technologies Inc.\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for Wires class.\"\"\"\n\nfrom unittest.mock import patch\n\nimport pytest\nfrom ipywidgets import HTML\n\nfrom mrmustard.physics.wires import Wires\n\nclass TestWires:\n    r\"\"\"\n    Tests for the Wires class.\n    \"\"\"\n\n    def test_indices(self):\n        w = Wires({0, 10, 20}, {30, 40, 50}, {60, 70}, {80})\n        assert w.indices == (0, 1, 2, 3, 4, 5, 6, 7, 8)\n\n    def test_adjoint(self):\n        w = Wires({0, 1, 2}, {3, 4, 5}, {6, 7}, {8})\n        w_adj = w.adjoint\n        assert w.input.ket.modes == w_adj.input.bra.modes\n        assert w.output.ket.modes == w_adj.output.bra.modes\n        assert w.input.bra.modes == w_adj.input.ket.modes\n        assert w.output.bra.modes == w_adj.output.ket.modes\n\n    def test_add_error(self):\n        w1 = Wires({0}, {1}, {2}, {3})\n        w2 = Wires({0}, {2}, {3}, {4})\n        with pytest.raises(ValueError, match=\"Overlapping quantum wires\"):\n            w1 + w2\n\n    def test_eq_neq(self):\n        w1 = Wires({0, 1}, {2, 3}, {4, 5}, {6, 7})\n        w2 = Wires({0, 1}, {2, 3}, {4, 5}, {6, 7})\n        w3 = Wires(set(), {2, 3}, {4, 5}, {6, 7})\n        w4 = Wires({0, 1}, set(), {4, 5}, {6, 7})\n        w5 = Wires({0, 1}, {2, 3}, set(), {6, 7})\n        w6 = Wires({0, 1}, {2, 3}, {4, 5}, set())\n\n        assert w1 == w2\n        assert w1 != w3\n        assert w1 != w4\n        assert w1 != w5\n        assert w1 != w6\n\n    def test_matmul(self):\n        # contracts 1,1 on bra side\n        # contracts 3,3 and 13,13 on ket side\n        # contracts 17,17 on classical\n        u = Wires({1, 5}, {2, 6, 15}, {3, 7, 13}, {4, 8}, {16, 17}, {18})\n        v = Wires({0, 9, 14}, {1, 10}, {2, 11}, {13, 3, 12}, {19}, {17})\n        new_wires, perm = u @ v\n        assert new_wires.args == (\n            {0, 5, 9, 14},\n            {2, 6, 10, 15},\n            {2, 7, 11},\n            {4, 8, 12},\n            {16, 19},\n            {18},\n        )\n        assert perm == [9, 0, 10, 11, 1, 2, 12, 3, 13, 4, 14, 5, 6, 15, 7, 16, 8]\n\nclass TestWiresDisplay:\n    \"\"\"Test the wires _ipython_display_ functionality.\"\"\"\n\n    @patch(\"mrmustard.physics.wires.display\")\n    def test_ipython_repr(self, mock_display):\n        \"\"\"Test the IPython repr function.\"\"\"\n        wires = Wires({0}, set(), {3}, {3, 4})\n        wires._ipython_display_()\n        [widget] = mock_display.call_args.args\n        assert isinstance(widget, HTML)\n\n    def test_ids(self):\n        wires = Wires({0}, {1})\n        for w in wires:\n            assert isinstance(w.id, int)\n"
