[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "tjblackheart/andcli"
sha = "98ec488fe834970ab8ea07ed19bff25439b42427"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/vaults/keepass/keepass.go internal/vaults/keepass/keepass_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/vaults/keepass/keepass.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 80.0
original_coverage = 80.0
mutation_kill_rate = 56.0
original_mutation_kill_rate = 56.0
covered_lines = [ 20, 21, 22, 23, 24, 29, 30, 31, 32, 33, 34, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 84, 87, 88, 89, 90, 91, 92, 93,]
missed_lines = [ 25, 26, 27, 36, 37, 38, 40, 41, 42, 61, 62, 63,]

[input_info]
test_file_path = "internal/vaults/keepass/keepass_test.go"
focal_file_path = "internal/vaults/keepass/keepass.go"
test_file_url = "https://github.com/tjblackheart/andcli/blob/98ec488fe834970ab8ea07ed19bff25439b42427/internal/vaults/keepass/keepass_test.go"
focal_file_url = "https://github.com/tjblackheart/andcli/blob/98ec488fe834970ab8ea07ed19bff25439b42427/internal/vaults/keepass/keepass.go"
first_commit_date = "2025-07-06"
last_commit_date = "2025-07-06"
test_file_content = "package keepass\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/tjblackheart/andcli/v2/internal/vaults\"\n\t\"github.com/tobischo/gokeepasslib/v3\"\n)\n\nfunc TestMain(m *testing.M) {\n\tm.Run()\n}\n\nfunc TestOpen(t *testing.T) {\n\ttests := []struct {\n\t\tname     string\n\t\tfilename string\n\t\tpassword string\n\t\tfails    bool\n\t}{\n\t\t{\"decrypts\", \"testdata/keepass-test.kdbx\", \"andcli-test\", false},\n\t\t{\"fails: wrong password\", \"testdata/keepass-test.kdbx\", \"\", true},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tv, err := Open(tt.filename, []byte(tt.password))\n\t\t\tif tt.fails {\n\t\t\t\tif err == nil {\n\t\t\t\t\tt.Fatal(\"Open() expected error, got nil\")\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tentries := v.Entries()\n\t\t\tif len(entries) != 3 {\n\t\t\t\tt.Fatalf(\"Open() expected len to be 3, have %v\", len(entries))\n\t\t\t}\n\n\t\t\tfor i := range 3 {\n\t\t\t\twant := fmt.Sprintf(\"demo%d\", i+1)\n\t\t\t\tif entries[i].Label != want {\n\t\t\t\t\tt.Fatalf(\"Open() have %v, %s\", entries[i].Label, want)\n\t\t\t\t}\n\t\t\t}\n\n\t\t})\n\t}\n}\n\nfunc TestEntries(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tinput []gokeepasslib.Entry\n\t\twant  []vaults.Entry\n\t}{\n\t\t{\n\t\t\t\"mitigates missing fields\",\n\t\t\t[]gokeepasslib.Entry{\n\t\t\t\t{Values: []gokeepasslib.ValueData{\n\t\t\t\t\t{Key: \"Title\", Value: gokeepasslib.V{Content: \"iss-1\"}},\n\t\t\t\t\t{Key: \"UserName\", Value: gokeepasslib.V{Content: \"demo1\"}},\n\t\t\t\t\t{Key: \"otp\", Value: gokeepasslib.V{Content: \"otpauth://totp/otp.provider.dev%3Ademo1?secret=secret&period=30&digits=6&issuer=otp.provider.dev&algorithm=SHA1\"}},\n\t\t\t\t}},\n\t\t\t\t{Values: []gokeepasslib.ValueData{\n\t\t\t\t\t{Key: \"Title\", Value: gokeepasslib.V{Content: \"iss-2\"}},\n\t\t\t\t\t{Key: \"UserName\", Value: gokeepasslib.V{Content: \"demo2\"}},\n\t\t\t\t\t{Key: \"otp\", Value: gokeepasslib.V{Content: \"otpauth://hotp/otp.provider.dev%3Ademo2?secret=secret&digits=6&issuer=otp.provider.dev&algorithm=SHA1\"}},\n\t\t\t\t}},\n\t\t\t\t{Values: []gokeepasslib.ValueData{\n\t\t\t\t\t{Key: \"Title\", Value: gokeepasslib.V{Content: \"iss-3\"}},\n\t\t\t\t\t{Key: \"UserName\", Value: gokeepasslib.V{Content: \"demo3\"}},\n\t\t\t\t\t{Key: \"otp\", Value: gokeepasslib.V{Content: \"otpauth://totp/otp.provider.dev%3Ademo3?secret=secret&period=20&issuer=otp.provider.dev&algorithm=SHA1\"}},\n\t\t\t\t}},\n\t\t\t\t{Values: []gokeepasslib.ValueData{\n\t\t\t\t\t{Key: \"Title\", Value: gokeepasslib.V{Content: \"iss-4\"}},\n\t\t\t\t\t{Key: \"UserName\", Value: gokeepasslib.V{Content: \"demo4\"}},\n\t\t\t\t\t{Key: \"otp\", Value: gokeepasslib.V{Content: \"otpauth://totp/otp.provider.dev%3Ademo1?secret=secret&digits=4&issuer=otp.provider.dev&algorithm=SHA256\"}},\n\t\t\t\t}},\n\t\t\t\t{Values: []gokeepasslib.ValueData{\n\t\t\t\t\t{Key: \"Title\", Value: gokeepasslib.V{Content: \"iss-5\"}},\n\t\t\t\t}},\n\t\t\t},\n\t\t\t[]vaults.Entry{\n\t\t\t\t{Issuer: \"iss-1\", Label: \"demo1\", Digits: 6, Secret: \"secret\", Type: \"TOTP\", Algorithm: \"SHA1\", Period: 30},\n\t\t\t\t{Issuer: \"iss-3\", Label: \"demo3\", Digits: 6, Secret: \"secret\", Type: \"TOTP\", Algorithm: \"SHA1\", Period: 20},\n\t\t\t\t{Issuer: \"iss-4\", Label: \"demo4\", Digits: 4, Secret: \"secret\", Type: \"TOTP\", Algorithm: \"SHA256\", Period: 30},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tentries := (&vault{tt.input}).Entries()\n\t\t\tif !reflect.DeepEqual(entries, tt.want) {\n\t\t\t\tt.Fatalf(\"Entries(): want %#v\\nhave %#v\", tt.want, entries)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc Test_parseGroups(t *testing.T) {\n\n\ttests := []struct {\n\t\tname   string\n\t\tgroups []gokeepasslib.Group\n\t\twant   []gokeepasslib.Entry\n\t}{\n\t\t{\n\t\t\t\"recursive subgroups\",\n\t\t\t[]gokeepasslib.Group{\n\t\t\t\t{Name: \"g1\", Entries: []gokeepasslib.Entry{{IconID: 1}}},\n\t\t\t\t{Name: \"g2\", Groups: []gokeepasslib.Group{\n\t\t\t\t\t{Name: \"g2-1\", Entries: []gokeepasslib.Entry{{IconID: 2}}},\n\t\t\t\t\t{Name: \"g2-2\", Entries: []gokeepasslib.Entry{{IconID: 3}, {IconID: 4}}},\n\t\t\t\t\t{Name: \"g2-3\"},\n\t\t\t\t}},\n\t\t\t\t{Name: \"g3\", Groups: []gokeepasslib.Group{\n\t\t\t\t\t{Name: \"g3-1\", Groups: []gokeepasslib.Group{\n\t\t\t\t\t\t{Name: \"g3-1-1\"},\n\t\t\t\t\t\t{Name: \"g3-1-2\", Entries: []gokeepasslib.Entry{{IconID: 5}}},\n\t\t\t\t\t}},\n\t\t\t\t}},\n\t\t\t},\n\t\t\t[]gokeepasslib.Entry{\n\t\t\t\t{IconID: 1},\n\t\t\t\t{IconID: 2},\n\t\t\t\t{IconID: 3},\n\t\t\t\t{IconID: 4},\n\t\t\t\t{IconID: 5},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot := parseGroups(tt.groups)\n\t\t\tif !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"parseGroups() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"
