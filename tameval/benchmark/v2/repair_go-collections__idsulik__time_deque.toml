[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.18"

[repo_info]
repository = "idsulik/go-collections"
sha = "3df35364890f66a33aee1837392a289e12914a5f"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out timedeque/time_deque.go timedeque/time_deque_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting timedeque/time_deque.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 80.0
original_coverage = 80.0
mutation_kill_rate = 0
original_mutation_kill_rate = 51.0
covered_lines = [ 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 68, 74, 79, 80, 81, 82, 83, 84, 85, 87, 93, 98, 99, 100, 101, 102, 103, 104, 106, 112, 117, 118, 119, 120, 121, 122, 123, 125, 131, 135, 136, 137, 138, 141, 142, 143, 146, 147, 148, 149, 152, 153, 154, 155, 156, 159, 160, 161, 162, 163, 164, 165, 166, 168, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 186, 187, 188, 200, 201, 202, 203, 204, 206, 207, 212, 213, 214, 215, 222, 228, 229, 230, 237, 238, 239, 240, 241, 242, 243, 244, 253, 254, 255, 256, 257, 260,]
missed_lines = [ 69, 70, 71, 72, 88, 89, 90, 91, 107, 108, 109, 110, 126, 127, 128, 129, 191, 192, 193, 194, 195, 196, 208, 209, 223, 224, 225, 231, 232, 233, 248, 249, 250,]

[input_info]
test_file_path = "timedeque/time_deque_test.go"
focal_file_path = "timedeque/time_deque.go"
test_file_url = "https://github.com/idsulik/go-collections/blob/3df35364890f66a33aee1837392a289e12914a5f/timedeque/time_deque_test.go"
focal_file_url = "https://github.com/idsulik/go-collections/blob/3df35364890f66a33aee1837392a289e12914a5f/timedeque/time_deque.go"
first_commit_date = "2025-02-22"
last_commit_date = "2025-02-22"
test_file_content = "package timedeque\n\nimport (\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestTimedDequeBasicOperations(t *testing.T) {\n\ttd := New[int](time.Hour)\n\tif !td.IsEmpty() {\n\t\tt.Error(\"New TimedDeque should be empty\")\n\t}\n\n\tif td.Len() != 0 {\n\t\tt.Errorf(\"Expected length 0, got %d\", td.Len())\n\t}\n\ttd.PushBack(1)\n\ttd.PushBack(2)\n\n\tif td.IsEmpty() {\n\t\tt.Error(\"TimedDeque should not be empty after pushing items\")\n\t}\n\n\tif td.Len() != 2 {\n\t\tt.Errorf(\"Expected length 2, got %d\", td.Len())\n\t}\n\n\tval, ok := td.PeekFront()\n\tif !ok || val != 1 {\n\t\tt.Errorf(\"PeekFront() = %d, %v; want 1, true\", val, ok)\n\t}\n\ttd.PushFront(3)\n\n\tval, ok = td.PeekFront()\n\tif !ok || val != 3 {\n\t\tt.Errorf(\"PeekFront() after PushFront = %d, %v; want 3, true\", val, ok)\n\t}\n\n\tval, ok = td.PeekBack()\n\tif !ok || val != 2 {\n\t\tt.Errorf(\"PeekBack() = %d, %v; want 2, true\", val, ok)\n\t}\n\tval, ok = td.PopFront()\n\tif !ok || val != 3 {\n\t\tt.Errorf(\"PopFront() = %d, %v; want 3, true\", val, ok)\n\t}\n\n\tif td.Len() != 2 {\n\t\tt.Errorf(\"Expected length 2 after PopFront, got %d\", td.Len())\n\t}\n\tval, ok = td.PopBack()\n\tif !ok || val != 2 {\n\t\tt.Errorf(\"PopBack() = %d, %v; want 2, true\", val, ok)\n\t}\n\n\tif td.Len() != 1 {\n\t\tt.Errorf(\"Expected length 1 after PopBack, got %d\", td.Len())\n\t}\n\ttd.Clear()\n\tif !td.IsEmpty() {\n\t\tt.Error(\"TimedDeque should be empty after Clear\")\n\t}\n}\n\nfunc TestTimedDequeExpiry(t *testing.T) {\n\tshortTTL := 50 * time.Millisecond\n\ttd := New[string](shortTTL)\n\ttd.PushBack(\"item1\")\n\ttd.PushBack(\"item2\")\n\tif td.Len() != 2 {\n\t\tt.Errorf(\"Expected initial length 2, got %d\", td.Len())\n\t}\n\ttime.Sleep(shortTTL + 10*time.Millisecond)\n\tif !td.IsEmpty() {\n\t\tt.Errorf(\"Expected TimedDeque to be empty after TTL, but has %d items\", td.Len())\n\t}\n\ttd.PushBack(\"new-item\")\n\n\tif td.Len() != 1 {\n\t\tt.Errorf(\"Expected length 1 after adding new item, got %d\", td.Len())\n\t}\n\n\tval, ok := td.PeekFront()\n\tif !ok || val != \"new-item\" {\n\t\tt.Errorf(\"PeekFront() = %s, %v; want new-item, true\", val, ok)\n\t}\n}\n\nfunc TestTimedDequeMixedExpiry(t *testing.T) {\n\tmediumTTL := 100 * time.Millisecond\n\ttd := New[int](mediumTTL)\n\ttd.PushBack(1)\n\ttd.PushBack(2)\n\ttime.Sleep(mediumTTL / 2)\n\ttd.PushBack(3)\n\ttd.PushBack(4)\n\tif td.Len() != 4 {\n\t\tt.Errorf(\"Expected all 4 items to still be valid, got %d\", td.Len())\n\t}\n\ttime.Sleep(mediumTTL/2 + 10*time.Millisecond)\n\tif td.Len() != 2 {\n\t\tt.Errorf(\"Expected 2 items to remain valid, got %d\", td.Len())\n\t}\n\n\tval, ok := td.PeekFront()\n\tif !ok || val != 3 {\n\t\tt.Errorf(\"PeekFront() = %d, %v; want 3, true\", val, ok)\n\t}\n\ttime.Sleep(mediumTTL)\n\n\tif !td.IsEmpty() {\n\t\tt.Error(\"Expected all items to expire\")\n\t}\n}\n\nfunc TestTimedDequeZeroTTL(t *testing.T) {\n\ttd := New[int](0)\n\n\ttd.PushBack(1)\n\ttd.PushBack(2)\n\ttime.Sleep(50 * time.Millisecond)\n\tif td.Len() != 2 {\n\t\tt.Errorf(\"Expected items not to expire with zero TTL, got length %d\", td.Len())\n\t}\n\ttd = New[int](-1 * time.Second)\n\n\ttd.PushBack(1)\n\ttime.Sleep(50 * time.Millisecond)\n\tif td.Len() != 1 {\n\t\tt.Errorf(\"Expected items not to expire with negative TTL, got length %d\", td.Len())\n\t}\n}\n\nfunc TestTimedDequeChangeTTL(t *testing.T) {\n\ttd := New[int](time.Hour)\n\n\ttd.PushBack(1)\n\ttd.PushBack(2)\n\tshortTTL := 50 * time.Millisecond\n\ttd.SetTTL(shortTTL)\n\tif td.GetTTL() != shortTTL {\n\t\tt.Errorf(\"Expected TTL to be %v, got %v\", shortTTL, td.GetTTL())\n\t}\n\ttime.Sleep(shortTTL + 10*time.Millisecond)\n\tif !td.IsEmpty() {\n\t\tt.Errorf(\"Expected items to expire after changing TTL, got length %d\", td.Len())\n\t}\n}\n\nfunc TestTimedDequeGetItems(t *testing.T) {\n\ttd := New[string](time.Hour)\n\titems := []string{\"item1\", \"item2\", \"item3\"}\n\tfor _, item := range items {\n\t\ttd.PushBack(item)\n\t}\n\tgotItems := td.GetItems()\n\n\tif len(gotItems) != len(items) {\n\t\tt.Errorf(\"Expected %d items, got %d\", len(items), len(gotItems))\n\t}\n\n\tfor i, item := range items {\n\t\tif gotItems[i] != item {\n\t\t\tt.Errorf(\"At index %d, expected %s, got %s\", i, item, gotItems[i])\n\t\t}\n\t}\n}\n\nfunc TestTimedDequeRemoveExpired(t *testing.T) {\n\tshortTTL := 50 * time.Millisecond\n\ttd := New[int](shortTTL)\n\ttd.PushBack(1)\n\ttd.PushBack(2)\n\ttime.Sleep(shortTTL / 2)\n\ttd.PushBack(3)\n\ttd.PushFront(0)\n\ttime.Sleep(shortTTL/2 + 10*time.Millisecond)\n\ttd.RemoveExpired()\n\tif td.Len() != 2 {\n\t\tt.Errorf(\"Expected 2 items after RemoveExpired, got %d\", td.Len())\n\t}\n\n\titems := td.GetItems()\n\tif len(items) != 2 {\n\t\tt.Errorf(\"Expected 2 items in the slice, got %d\", len(items))\n\t} else {\n\t\tif items[0] != 0 || items[1] != 3 {\n\t\t\tt.Errorf(\"Expected items [0, 3], got %v\", items)\n\t\t}\n\t}\n}\n\nfunc TestTimedDequeClone(t *testing.T) {\n\ttd := New[int](time.Hour)\n\ttd.PushBack(1)\n\ttd.PushBack(2)\n\tclone := td.Clone()\n\tif clone.Len() != td.Len() {\n\t\tt.Errorf(\"Clone length %d differs from original %d\", clone.Len(), td.Len())\n\t}\n\tif clone.GetTTL() != td.GetTTL() {\n\t\tt.Errorf(\"Clone TTL %v differs from original %v\", clone.GetTTL(), td.GetTTL())\n\t}\n\ttd.PushBack(3)\n\ttd.SetTTL(time.Minute)\n\tif clone.Len() == td.Len() {\n\t\tt.Error(\"Clone should be independent of original\")\n\t}\n\n\tif clone.GetTTL() == td.GetTTL() {\n\t\tt.Error(\"Clone TTL should be independent of original\")\n\t}\n}\n\nfunc TestTimedDequeCapacity(t *testing.T) {\n\ttd := NewWithCapacity[int](time.Hour, 100)\n\n\tif cap := td.Cap(); cap < 100 {\n\t\tt.Errorf(\"Expected capacity at least 100, got %d\", cap)\n\t}\n\tfor i := 0; i < 50; i++ {\n\t\ttd.PushBack(i)\n\t}\n\ttd.Clear()\n\n\tif td.Len() != 0 {\n\t\tt.Errorf(\"Expected length 0 after Clear, got %d\", td.Len())\n\t}\n\n\tif cap := td.Cap(); cap < 100 {\n\t\tt.Errorf(\"Expected capacity at least 100 after Clear, got %d\", cap)\n\t}\n}\n\nfunc TestTimedDequeEmptyOperations(t *testing.T) {\n\ttd := New[string](time.Hour)\n\tval, ok := td.PopFront()\n\tif ok || val != \"\" {\n\t\tt.Errorf(\"PopFront() on empty deque = %s, %v; want \\\"\\\", false\", val, ok)\n\t}\n\n\tval, ok = td.PopBack()\n\tif ok || val != \"\" {\n\t\tt.Errorf(\"PopBack() on empty deque = %s, %v; want \\\"\\\", false\", val, ok)\n\t}\n\n\tval, ok = td.PeekFront()\n\tif ok || val != \"\" {\n\t\tt.Errorf(\"PeekFront() on empty deque = %s, %v; want \\\"\\\", false\", val, ok)\n\t}\n\n\tval, ok = td.PeekBack()\n\tif ok || val != \"\" {\n\t\tt.Errorf(\"PeekBack() on empty deque = %s, %v; want \\\"\\\", false\", val, ok)\n\t}\n}\n\nfunc TestTimedDequeCustomTypes(t *testing.T) {\n\ttype Person struct {\n\t\tName string\n\t\tAge  int\n\t}\n\n\ttd := New[Person](time.Hour)\n\n\tp1 := Person{\"Alice\", 30}\n\tp2 := Person{\"Bob\", 25}\n\n\ttd.PushBack(p1)\n\ttd.PushBack(p2)\n\n\tperson, ok := td.PeekFront()\n\tif !ok || person.Name != \"Alice\" {\n\t\tt.Errorf(\"PeekFront() = %+v, %v; want %+v, true\", person, ok, p1)\n\t}\n\tperson, ok = td.PopFront()\n\tif !ok || person.Name != \"Alice\" {\n\t\tt.Errorf(\"PopFront() = %+v, %v; want %+v, true\", person, ok, p1)\n\t}\n\n\tperson, ok = td.PopFront()\n\tif !ok || person.Name != \"Bob\" {\n\t\tt.Errorf(\"Second PopFront() = %+v, %v; want %+v, true\", person, ok, p2)\n\t}\n}\n\nfunc BenchmarkTimedDequePushPop(b *testing.B) {\n\ttd := New[int](time.Hour)\n\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\ttd.PushBack(i)\n\t\ttd.PopFront()\n\t}\n}\n\nfunc BenchmarkTimedDequeRemoveExpired(b *testing.B) {\n\ttd := New[int](time.Millisecond * 100)\n\tfor i := 0; i < 1000; i++ {\n\t\ttd.PushBack(i)\n\t}\n\ttime.Sleep(time.Millisecond * 50)\n\tfor i := 0; i < 1000; i++ {\n\t\ttd.PushBack(i + 1000)\n\t}\n\n\tb.ResetTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\ttd.RemoveExpired()\n\t}\n}"
