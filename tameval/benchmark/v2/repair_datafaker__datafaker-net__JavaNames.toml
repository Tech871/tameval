[meta]
task = "repair"
scenario = "repair_undefined_enitity"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "datafaker-net/datafaker"
sha = "22730b57dee2b174d62276f9e8979cf59c1d219b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=JavaNamesTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.JavaNames  -DtargetTests=**.JavaNamesTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/net/datafaker/internal/helper/JavaNamesTest.java"
focal_file_path = "src/main/java/net/datafaker/internal/helper/JavaNames.java"
test_file_url = "https://github.com/datafaker-net/datafaker/blob/22730b57dee2b174d62276f9e8979cf59c1d219b/src/test/java/net/datafaker/internal/helper/JavaNamesTest.java"
focal_file_url = "https://github.com/datafaker-net/datafaker/blob/22730b57dee2b174d62276f9e8979cf59c1d219b/src/main/java/net/datafaker/internal/helper/JavaNames.java"
first_commit_date = "2024-08-23"
last_commit_date = "2024-08-23"
test_file_content = "package net.datafaker.internal.helper;\n\nimport org.junit.jupiter.api.Test;\n\nimport static net.datafaker.internal.helper.JavaNames.toJavaNames;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nclass JavaNamesTest {\n    @Test\n    void singleWord() {\n        assertThat(toJavaNames(\"variety\", false)).isEqualTo(\"Variety\");\n        assertThat(toJavaNames(\"variety\", true)).isEqualTo(\"variety\");\n    }\n\n    @Test\n    void emptyString() {\n        assertThat(toJavaNames(\"\", false)).isEqualTo(\"\");\n        assertThat(toJavaNames(\"\", true)).isEqualTo(\"\");\n    }\n\n    @Test\n    void nullString() {\n        assertThat(toJavaNames(null, false)).isNull();\n        assertThat(toJavaNames(null, true)).isNull();\n    }\n\n    @Test\n    void wordWithDigit() {\n        assertThat(toJavaNames(\"dota2\", false)).isEqualTo(\"Dota2\");\n        assertThat(toJavaNames(\"dota2\", true)).isEqualTo(\"dota2\");\n    }\n\n    @Test\n    void wordStartingWithDigit() {\n        assertThat(toJavaNames(\"1love\", false)).isEqualTo(\"1love\");\n        assertThat(toJavaNames(\"1love\", true)).isEqualTo(\"1love\");\n    }\n\n    @Test\n    void singleCharacter() {\n        assertThat(toJavaNames(\"x\", false)).isEqualTo(\"X\");\n        assertThat(toJavaNames(\"x\", true)).isEqualTo(\"x\");\n    }\n\n    @Test\n    void singleCharacterUnderscore() {\n        assertThat(toJavaNames(\"_\", false)).isEqualTo(\"\");\n        assertThat(toJavaNames(\"_\", true)).isEqualTo(\"\");\n    }\n\n    @Test\n    void onlyUnderscores() {\n        assertThat(toJavaNames(\"__\", false)).isEqualTo(\"\");\n        assertThat(toJavaNames(\"___\", true)).isEqualTo(\"\");\n    }\n\n    @Test\n    void multipleWordsSeparatedByUnderscores() {\n        assertThat(toJavaNames(\"big_bang_theory\", false)).isEqualTo(\"BigBangTheory\");\n        assertThat(toJavaNames(\"big_bang_theory\", true)).isEqualTo(\"bigBangTheory\");\n    }\n\n    @Test\n    void multipleUnderscoresInRow() {\n        assertThat(toJavaNames(\"big__bang___theory\", false)).isEqualTo(\"BigBangTheory\");\n        assertThat(toJavaNames(\"big__bang___theory\", true)).isEqualTo(\"bigBangTheory\");\n    }\n\n    @Test\n    void upperFirstCharacterWithoutUnderscores() {\n        assertThat(toJavaNames(\"A2013\", false)).isEqualTo(\"A2013\");\n        assertThat(toJavaNames(\"A2013\", true)).isEqualTo(\"a2013\");\n    }\n\n    @Test\n    void upperFirstCharacterWithUnderscores() {\n        assertThat(toJavaNames(\"IATA_airline\", false)).isEqualTo(\"IATAAirline\");\n        assertThat(toJavaNames(\"IATA_airline\", true)).isEqualTo(\"iATAAirline\");\n    }\n\n    @Test\n    void endingWithUnderscore() {\n        assertThat(toJavaNames(\"name_\", false)).isEqualTo(\"Name\");\n        assertThat(toJavaNames(\"name_\", true)).isEqualTo(\"name\");\n    }\n\n    @Test\n    void invalidCalls() {\n        assertThat(toJavaNames(\"test\", false)).isEqualTo(testMethod());\n        assertThat(toJavaNames(\"test\", true)).isEqualTo(testVariable);\n        assertThat(toJavaNames(\"test\", false)).isEqualTo(JavaNames.Transform.NO_SUCH_METHOD.transform('c'));\n        assertThat(toJavaNames(\"test\", true)).isEqualTo(uninitializedVar);\n        assertThat(toJavaNames(\"test\", false)).isEqualTo(unknownClass.someMethod());\n    }\n}"
