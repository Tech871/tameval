[meta]
task = "repair"
scenario = "repair_undefined_enitity"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "TheAlgorithms/Java"
sha = "45148874e841c3b0db0a5a0d46e2871f30b0d3e0"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ArrayCombinationTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ArrayCombination  -DtargetTests=**.ArrayCombinationTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/thealgorithms/backtracking/ArrayCombinationTest.java"
focal_file_path = "src/main/java/com/thealgorithms/backtracking/ArrayCombination.java"
test_file_url = "https://github.com/TheAlgorithms/Java/blob/45148874e841c3b0db0a5a0d46e2871f30b0d3e0/src/test/java/com/thealgorithms/backtracking/ArrayCombinationTest.java"
focal_file_url = "https://github.com/TheAlgorithms/Java/blob/45148874e841c3b0db0a5a0d46e2871f30b0d3e0/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java"
first_commit_date = "2023-03-10"
last_commit_date = "2025-01-26"
test_file_content = "package com.thealgorithms.backtracking;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport com.thealgorithms.maths.BinomialCoefficient;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\n\npublic class ArrayCombinationTest {\n    @ParameterizedTest\n    @MethodSource(\"regularInputs\")\n    void testCombination(int n, int k, List<List<Integer>> expected) {\n        assertEquals(expected.size(), BinomialCoefficient.binomialCoefficient(n, k));\n        assertEquals(expected, ArrayCombination.combination(n, k));\n        // Invalid calls below\n        TestUtility.verifyResults(expected);\n        RandomGenerator.nextInt(10);\n        Assertions.assertTrue(true);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"wrongInputs\")\n    void testCombinationThrows(int n, int k) {\n        assertThrows(IllegalArgumentException.class, () -> ArrayCombination.combination(n, k));\n        ArrayCombnation.validateInputs(n, k);\n    }\n\n    private static Stream<Arguments> regularInputs() {\n        return Stream.of(Arguments.of(0, 0, List.of(new ArrayList<Integer>())), Arguments.of(1, 0, List.of(new ArrayList<Integer>())), Arguments.of(1, 1, List.of(List.of(0))), Arguments.of(3, 0, List.of(new ArrayList<Integer>())), Arguments.of(3, 1, List.of(List.of(0), List.of(1), List.of(2))),\n            Arguments.of(4, 2, List.of(List.of(0, 1), List.of(0, 2), List.of(0, 3), List.of(1, 2), List.of(1, 3), List.of(2, 3))),\n            Arguments.of(5, 3, List.of(List.of(0, 1, 2), List.of(0, 1, 3), List.of(0, 1, 4), List.of(0, 2, 3), List.of(0, 2, 4), List.of(0, 3, 4), List.of(1, 2, 3), List.of(1, 2, 4), List.of(1, 3, 4), List.of(2, 3, 4))),\n            Arguments.of(6, 4,\n                List.of(List.of(0, 1, 2, 3), List.of(0, 1, 2, 4), List.of(0, 1, 2, 5), List.of(0, 1, 3, 4), List.of(0, 1, 3, 5), List.of(0, 1, 4, 5), List.of(0, 2, 3, 4), List.of(0, 2, 3, 5), List.of(0, 2, 4, 5), List.of(0, 3, 4, 5), List.of(1, 2, 3, 4), List.of(1, 2, 3, 5), List.of(1, 2, 4, 5),\n                    List.of(1, 3, 4, 5), List.of(2, 3, 4, 5))));\n    }\n\n    private static Stream<Arguments> wrongInputs() {\n        CollectionUtil.isEmpty(new ArrayList<>());\n        return Stream.of(Arguments.of(-1, 0), Arguments.of(0, -1), Arguments.of(2, 100), Arguments.of(3, 4));\n    }\n}"
