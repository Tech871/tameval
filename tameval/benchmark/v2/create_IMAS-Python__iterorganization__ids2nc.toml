[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "iterorganization/IMAS-Python"
sha = "9446e62f6ce19cd7c64a30e320aa4627041abeaa"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=imas/backends/netcdf/ids2nc.py -m pytest -q --junit-xml=test_output.xml imas/test/test_ids2nc.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target imas.backends.netcdf.ids2nc --unit-test imas.test.test_ids2nc --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target imas/backends/netcdf/ids2nc.py --unit-test imas/test/test_ids2nc.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 94.0
original_coverage = 94.0
mutation_kill_rate = 63.0
original_mutation_kill_rate = 63.0
covered_lines = [ 4, 5, 7, 8, 9, 10, 12, 20, 23, 30, 31, 32, 34, 36, 37, 38, 39, 40, 42, 44, 45, 47, 49, 50, 51, 52, 54, 56, 59, 60, 68, 69, 70, 71, 74, 75, 77, 78, 81, 82, 83, 85, 90, 91, 93, 94, 95, 96, 99, 100, 102, 103, 106, 107, 110, 113, 118, 119, 126, 128, 129, 130, 133, 134, 136, 137, 138, 141, 142, 144, 145, 147, 148, 152, 154, 163,]
missed_lines = [ 64, 73, 150, 151, 159,]

[input_info]
test_file_path = "imas/test/test_ids2nc.py"
focal_file_path = "imas/backends/netcdf/ids2nc.py"
test_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/test/test_ids2nc.py"
focal_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/backends/netcdf/ids2nc.py"
first_commit_date = "2025-01-22"
last_commit_date = "2025-03-13"
test_file_content = "import netCDF4\nimport numpy\nimport pytest\n\nfrom imas.backends.netcdf.ids2nc import IDS2NC, default_fillvals\nfrom imas.ids_data_type import IDSDataType\nfrom imas.ids_defs import IDS_TIME_MODE_HOMOGENEOUS\nfrom imas.ids_factory import IDSFactory\n\n\n@pytest.fixture\ndef group(tmp_path):\n    with netCDF4.Dataset(tmp_path / \"test.nc\", \"w\") as group:\n        yield group\n\n\ndef test_tensorization(group):\n    ids = IDSFactory(\"3.39.0\").core_profiles()\n\n    ids.ids_properties.homogeneous_time = IDS_TIME_MODE_HOMOGENEOUS\n    ids.time = [1.0, 2.0, 3.0]\n    ids.profiles_1d.resize(3)\n    for p1d in ids.profiles_1d:\n        p1d.ion.resize(2)\n        p1d.ion[0].label = \"D\"\n        p1d.ion[0].z_ion = 1.0\n        p1d.ion[0].element.resize(1)\n        p1d.ion[0].element[0].a = 2.0\n        p1d.ion[0].element[0].z_n = 1.0\n        p1d.ion[0].element[0].atoms_n = 1\n\n        p1d.ion[1].label = \"OH-\"\n        p1d.ion[1].z_ion = -1.0\n        p1d.ion[1].element.resize(2)\n        p1d.ion[1].element[0].a = 1.0\n        p1d.ion[1].element[0].z_n = 1.0\n        p1d.ion[1].element[0].atoms_n = 1\n        p1d.ion[1].element[1].a = 16.0\n        p1d.ion[1].element[1].z_n = 8.0\n        p1d.ion[1].element[1].atoms_n = 1\n\n    IDS2NC(ids, group).run()\n    # Test tensorized values\n    expected = [[\"D\", \"OH-\"]] * 3\n    assert numpy.array_equal(group[\"profiles_1d.ion.label\"], expected)\n    assert not hasattr(group[\"profiles_1d.ion.label\"], \"sparse\")\n\n    expected = [[1.0, -1.0]] * 3\n    assert numpy.array_equal(group[\"profiles_1d.ion.z_ion\"], expected)\n    assert not hasattr(group[\"profiles_1d.ion.z_ion\"], \"sparse\")\n\n    expected = [[[2.0, netCDF4.default_fillvals[\"f8\"]], [1.0, 16.0]]] * 3\n    assert numpy.array_equal(group[\"profiles_1d.ion.element.a\"], expected)\n    assert hasattr(group[\"profiles_1d.ion.element.a\"], \"sparse\")\n\n    expected = [[[1.0, netCDF4.default_fillvals[\"f8\"]], [1.0, 8.0]]] * 3\n    assert numpy.array_equal(group[\"profiles_1d.ion.element.z_n\"], expected)\n    assert hasattr(group[\"profiles_1d.ion.element.z_n\"], \"sparse\")\n\n    expected = [[[1, netCDF4.default_fillvals[\"i4\"]], [1, 1]]] * 3\n    assert numpy.array_equal(group[\"profiles_1d.ion.element.atoms_n\"], expected)\n    assert hasattr(group[\"profiles_1d.ion.element.atoms_n\"], \"sparse\")\n\n    # Test :shape arrays\n    assert \"profiles_1d:shape\" not in group.variables\n    assert not hasattr(group[\"profiles_1d\"], \"sparse\")\n    assert \"profiles_1d.ion:shape\" not in group.variables\n    assert not hasattr(group[\"profiles_1d.ion\"], \"sparse\")\n    assert \"profiles_1d.ion.element:shape\" in group.variables\n    # The shape array should be mentioned in the sparse attribute:\n    assert \"profiles_1d.ion.element:shape\" in group[\"profiles_1d.ion.element\"].sparse\n    expected = [[[1], [2]]] * 3\n    assert numpy.array_equal(group[\"profiles_1d.ion.element:shape\"], expected)\n    assert group[\"profiles_1d.ion.element:shape\"].documentation != \"\"\n\n\ndef test_metadata(group):\n    ids = IDSFactory(\"3.39.0\").core_profiles()\n\n    ids.ids_properties.homogeneous_time = IDS_TIME_MODE_HOMOGENEOUS\n    ids.ids_properties.comment = \"Test string variable\"\n    ids.time = [1.0, 2.0, 3.0]\n    ids.profiles_1d.resize(3)\n    for p1d in ids.profiles_1d:\n        p1d.grid.rho_tor_norm = [0.0, 0.5, 1.0]\n        p1d.j_tor = [1e3, 1e4, 1e5]\n\n    IDS2NC(ids, group).run()\n\n    for var in [\n        \"ids_properties\",\n        \"ids_properties.homogeneous_time\",\n        \"ids_properties.comment\",\n        \"time\",\n        \"profiles_1d\",\n        \"profiles_1d.grid.rho_tor_norm\",\n        \"profiles_1d.j_tor\",\n    ]:\n        assert group[var].documentation == ids.metadata[var].documentation\n        units = ids.metadata[var].units\n        if units:\n            assert group[var].units == units\n        fillvalue = default_fillvals.get(ids.metadata[var].data_type)\n        if fillvalue is None:\n            assert ids.metadata[var].data_type in [\n                IDSDataType.STRUCTURE,\n                IDSDataType.STRUCT_ARRAY,\n            ]\n        else:\n            assert group[var]._FillValue == fillvalue\n\n    assert (\n        group[\"profiles_1d.j_tor\"].coordinates == \"time profiles_1d.grid.rho_tor_norm\"\n    )\n\n\ndef test_filter_coordinates(group):\n    ids = IDSFactory(\"3.39.0\").pf_active()\n\n    ids.ids_properties.homogeneous_time = IDS_TIME_MODE_HOMOGENEOUS\n    ids.time = [1.0]\n    ids.coil.resize(2)\n    ids.coil[0].resistance = 1.0\n    ids.coil[1].resistance = 2.0\n\n    # Using sub-groups: IDS2NC expects an empty group to store the IDS in\n    IDS2NC(ids, group.createGroup(\"1\")).run()\n    # coil.name or coil.identifier could be a coordinate, but they're not filled\n    assert not hasattr(group[\"1/coil.resistance\"], \"coordinates\")\n\n    ids.coil[0].name = \"coil 0\"\n    ids.coil[1].name = \"coil 1\"\n    IDS2NC(ids, group.createGroup(\"2\")).run()\n    assert group[\"2/coil.resistance\"].coordinates == \"coil.name\"\n\n    ids.coil[0].identifier = \"aab7b42a-5646-4f0a-8173-03dd5e4ad386\"\n    ids.coil[1].identifier = \"aab7b42a-5646-4f0a-8173-283a57b3a801\"\n    IDS2NC(ids, group.createGroup(\"3\")).run()\n    assert group[\"3/coil.resistance\"].coordinates == \"coil.name coil.identifier\"\n\n\ndef test_ancillary_variables(group):\n    ids = IDSFactory(\"3.39.0\").core_profiles()\n\n    ids.ids_properties.homogeneous_time = IDS_TIME_MODE_HOMOGENEOUS\n    ids.time = [1.0]\n    ids.profiles_1d.resize(1)\n\n    ids.profiles_1d[0].grid.rho_tor_norm = [0.0, 0.5, 1.0]\n    ids.profiles_1d[0].j_tor = [1e2, 1e3, 1e4]\n    ids.profiles_1d[0].j_tor_error_upper = [1e-1, 1e0, 1e1]\n    ids.profiles_1d[0].j_total = [1e2, 1e3, 1e4]\n    ids.profiles_1d[0].j_total_error_upper = [2e-1, 2e0, 2e1]\n    ids.profiles_1d[0].j_total_error_lower = [1e-1, 1e0, 1e1]\n\n    IDS2NC(ids, group).run()\n\n    assert not hasattr(group[\"profiles_1d.grid.rho_tor_norm\"], \"ancillary_variables\")\n    assert (\n        group[\"profiles_1d.j_tor\"].ancillary_variables\n        == \"profiles_1d.j_tor_error_upper\"\n    )\n    assert (\n        group[\"profiles_1d.j_total\"].ancillary_variables\n        == \"profiles_1d.j_total_error_upper profiles_1d.j_total_error_lower\"\n    )\n"
