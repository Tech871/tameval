[meta]
task = "repair"
scenario = "repair_duplicate_entity"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "michelin/suricate"
sha = "9a15fd2f6de4e3fced8deb8f60160c43e27ba492"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=RepositoryServiceTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.RepositoryService  -DtargetTests=**.RepositoryServiceTest  -DoutputFormats=XML"
coverage_report_path = "target/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/michelin/suricate/service/api/RepositoryServiceTest.java"
focal_file_path = "src/main/java/com/michelin/suricate/service/api/RepositoryService.java"
test_file_url = "https://github.com/michelin/suricate/blob/9a15fd2f6de4e3fced8deb8f60160c43e27ba492/src/test/java/com/michelin/suricate/service/api/RepositoryServiceTest.java"
focal_file_url = "https://github.com/michelin/suricate/blob/9a15fd2f6de4e3fced8deb8f60160c43e27ba492/src/main/java/com/michelin/suricate/service/api/RepositoryService.java"
first_commit_date = "2024-04-07"
last_commit_date = "2025-03-12"
test_file_content = "package com.michelin.suricate.service.api;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport com.michelin.suricate.model.entity.Repository;\nimport com.michelin.suricate.model.entity.Repository_;\nimport com.michelin.suricate.repository.RepositoryRepository;\nimport com.michelin.suricate.service.specification.RepositorySearchSpecification;\nimport jakarta.persistence.metamodel.SingularAttribute;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.Pageable;\n\n@ExtendWith(MockitoExtension.class)\nclass RepositoryServiceTest {\n    @Mock\n    private SingularAttribute<Repository, String> name;\n\n    @Mock\n    private RepositoryRepository repositoryRepository;\n\n    @InjectMocks\n    private RepositoryService repositoryService;\n\n    @Test\n    void shouldGetAll() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n\n        Repository_.name = name;\n        when(repositoryRepository.findAll(any(RepositorySearchSpecification.class), any(Pageable.class)))\n                .thenReturn(new PageImpl<>(Collections.singletonList(repository)));\n\n        Page<Repository> actual = repositoryService.getAll(\"search\", Pageable.unpaged());\n\n        assertFalse(actual.isEmpty());\n        assertEquals(repository, actual.get().toList().getFirst());\n\n        verify(repositoryRepository)\n                .findAll(\n                        Mockito.<RepositorySearchSpecification>argThat(\n                                specification -> specification.getSearch().equals(\"search\")\n                                        && specification.getAttributes().contains(name.getName())),\n                        Mockito.<Pageable>argThat(pageable -> pageable.equals(Pageable.unpaged())));\n    }\n\n    @Test\n    void shouldFindAllByEnabledOrderByPriorityDescCreatedDateAsc() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n\n        when(repositoryRepository.findAllByEnabledOrderByPriorityDescCreatedDateAsc(true))\n                .thenReturn(Optional.of(Collections.singletonList(repository)));\n\n        Optional<List<Repository>> actual = repositoryService.findAllByEnabledOrderByPriorityDescCreatedDateAsc(true);\n\n        assertTrue(actual.isPresent());\n        assertFalse(actual.get().isEmpty());\n        assertEquals(repository, actual.get().getFirst());\n\n        verify(repositoryRepository).findAllByEnabledOrderByPriorityDescCreatedDateAsc(true);\n    }\n\n    @Test\n    void shouldGetOneById() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n\n        when(repositoryRepository.findById(any())).thenReturn(Optional.of(repository));\n\n        Optional<Repository> actual = repositoryService.getOneById(1L);\n\n        assertTrue(actual.isPresent());\n        assertEquals(repository, actual.get());\n\n        verify(repositoryRepository).findById(1L);\n    }\n\n    @Test\n    void shouldFindByName() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n\n        when(repositoryRepository.findByName(any())).thenReturn(Optional.of(repository));\n\n        Optional<Repository> actual = repositoryService.findByName(\"name\");\n\n        assertTrue(actual.isPresent());\n        assertEquals(repository, actual.get());\n\n        verify(repositoryRepository).findByName(\"name\");\n    }\n\n    @Test\n    void shouldExistsById() {\n        when(repositoryRepository.existsById(any())).thenReturn(true);\n\n        boolean actual = repositoryService.existsById(1L);\n\n        assertTrue(actual);\n\n        verify(repositoryRepository).existsById(1L);\n    }\n\n    @Test\n    void shouldAddOrUpdateRepository() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n\n        when(repositoryRepository.save(any())).thenAnswer(answer -> answer.getArgument(0));\n\n        repositoryService.addOrUpdateRepository(repository);\n\n        verify(repositoryRepository).save(repository);\n    }\n\n    @Test\n    void shouldAddOrUpdateRepositories() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n        List<Repository> repositories = Collections.singletonList(repository);\n\n        when(repositoryRepository.saveAll(any())).thenAnswer(answer -> answer.getArgument(0));\n\n        repositoryService.addOrUpdateRepositories(Collections.singletonList(repository));\n\n        verify(repositoryRepository).saveAll(repositories);\n    }\n\n    @Test\n    void shouldGetOneById() {\n        Repository repository = new Repository();\n        repository.setId(1L);\n\n        when(repositoryRepository.findById(any())).thenReturn(Optional.of(repository));\n\n        Optional<Repository> actual = repositoryService.getOneById(1L);\n\n        assertTrue(actual.isPresent());\n        assertEquals(repository, actual.get());\n\n        verify(repositoryRepository).findById(1L);\n    }\n}"
