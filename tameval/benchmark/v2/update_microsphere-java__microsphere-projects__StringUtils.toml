[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-java"
sha = "b4576dbd7bad0fe918d235617d466ccd5434cc66"
bench_version = 1

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-java-core -Dtest=StringUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-java-core -DtargetClasses=**.StringUtils  -DtargetTests=**.StringUtilsTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-java-core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-java-core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 50.0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 36, 39, 43, 47, 51, 52, 53, 55, 56, 57, 60, 64, 68, 72, 73, 75, 76, 80, 81, 83, 87, 88, 90, 94, 95, 97, 131, 163, 164, 166, 167, 168, 171, 172, 175, 176, 177, 178, 179, 180, 182, 184, 185,]
missed_lines = [ 30, 169, 173, 174, 209, 239, 240, 242, 243, 244, 245, 246, 249, 279, 280, 282, 283, 285, 286, 287, 289, 320, 321, 323, 324, 326, 327, 328, 330, 360, 361, 363, 364, 365, 367, 399, 400, 402, 403, 405, 406, 407, 409,]

[input_info]
test_file_path = "microsphere-java-core/src/test/java/io/microsphere/util/StringUtilsTest.java"
focal_file_path = "microsphere-java-core/src/main/java/io/microsphere/util/StringUtils.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/test/java/io/microsphere/util/StringUtilsTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/main/java/io/microsphere/util/StringUtils.java"
first_commit_date = "2024-04-08"
last_commit_date = "2025-03-19"
test_file_content = "package io.microsphere.util;\n\nimport org.junit.jupiter.api.Test;\n\nimport static io.microsphere.constants.SymbolConstants.COMMA;\nimport static io.microsphere.constants.SymbolConstants.COMMA_CHAR;\nimport static io.microsphere.constants.SymbolConstants.DOT;\nimport static io.microsphere.constants.SymbolConstants.SPACE;\nimport static io.microsphere.constants.SymbolConstants.SPACE_CHAR;\nimport static io.microsphere.constants.SymbolConstants.VERTICAL_BAR;\nimport static io.microsphere.util.ArrayUtils.ofArray;\nimport static io.microsphere.util.StringUtils.EMPTY;\nimport static io.microsphere.util.StringUtils.EMPTY_STRING;\nimport static io.microsphere.util.StringUtils.EMPTY_STRING_ARRAY;\nimport static io.microsphere.util.StringUtils.contains;\nimport static io.microsphere.util.StringUtils.endsWith;\nimport static io.microsphere.util.StringUtils.isBlank;\nimport static io.microsphere.util.StringUtils.isEmpty;\nimport static io.microsphere.util.StringUtils.isNotBlank;\nimport static io.microsphere.util.StringUtils.isNotEmpty;\nimport static io.microsphere.util.StringUtils.length;\nimport static io.microsphere.util.StringUtils.replace;\nimport static io.microsphere.util.StringUtils.split;\nimport static io.microsphere.util.StringUtils.startsWith;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertSame;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * {@link StringUtils} Test\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy<a/>\n * @see StringUtils\n * @since 1.0.0\n */\npublic class StringUtilsTest {\n\n    private static final String TEST_EMPTY_STRING = \"\";\n\n    private static final String TEST_BLANK_STRING = SPACE;\n\n    private static final String TEST_CSV_STRING = \"a,b,c\";\n\n    private static final String TEST_STRING = \"testing\";\n\n\n    @Test\n    public void testConstants() {\n        assertSame(TEST_EMPTY_STRING, EMPTY);\n        assertSame(TEST_EMPTY_STRING, EMPTY_STRING);\n        assertSame(ArrayUtils.EMPTY_STRING_ARRAY, EMPTY_STRING_ARRAY);\n        assertEquals(0, EMPTY_STRING_ARRAY.length);\n        assertArrayEquals(new String[0], EMPTY_STRING_ARRAY);\n    }\n\n    @Test\n    public void testLength() {\n        assertEquals(0, length(null));\n        assertEquals(0, length(TEST_EMPTY_STRING));\n        assertEquals(1, length(TEST_BLANK_STRING));\n        assertEquals(5, length(TEST_CSV_STRING));\n        assertEquals(7, length(TEST_STRING));\n    }\n\n    @Test\n    public void testIsEmpty() {\n        assertTrue(isEmpty(null));\n        assertTrue(isEmpty(TEST_EMPTY_STRING));\n        assertFalse(isEmpty(TEST_BLANK_STRING));\n        assertFalse(isEmpty(TEST_CSV_STRING));\n        assertFalse(isEmpty(TEST_STRING));\n    }\n\n    @Test\n    public void testIsNotEmpty() {\n        assertFalse(isNotEmpty(null));\n        assertFalse(isNotEmpty(TEST_EMPTY_STRING));\n        assertTrue(isNotEmpty(TEST_BLANK_STRING));\n        assertTrue(isNotEmpty(TEST_CSV_STRING));\n        assertTrue(isNotEmpty(TEST_STRING));\n    }\n\n    @Test\n    public void testIsBlank() {\n        assertTrue(isBlank(null));\n        assertTrue(isBlank(TEST_EMPTY_STRING));\n        assertTrue(isBlank(TEST_BLANK_STRING));\n        assertFalse(isBlank(TEST_CSV_STRING));\n        assertFalse(isBlank(TEST_STRING));\n    }\n\n    @Test\n    public void testIsNotBlank() {\n        assertFalse(isNotBlank(null));\n        assertFalse(isNotBlank(TEST_EMPTY_STRING));\n        assertFalse(isNotBlank(TEST_BLANK_STRING));\n        assertTrue(isNotBlank(TEST_CSV_STRING));\n        assertTrue(isNotBlank(TEST_STRING));\n    }\n\n    @Test\n    public void testSplit() {\n        String[] values = split(null, SPACE_CHAR);\n        assertSame(EMPTY_STRING_ARRAY, values);\n\n        values = split(TEST_EMPTY_STRING, SPACE);\n        assertSame(EMPTY_STRING_ARRAY, values);\n\n        values = split(TEST_BLANK_STRING, null);\n        assertSame(EMPTY_STRING_ARRAY, values);\n\n        values = split(TEST_BLANK_STRING, SPACE);\n        assertArrayEquals(EMPTY_STRING_ARRAY, values);\n\n        values = split(SPACE + SPACE, SPACE);\n        assertArrayEquals(EMPTY_STRING_ARRAY, values);\n\n        values = split(SPACE + SPACE + SPACE, SPACE);\n        assertArrayEquals(EMPTY_STRING_ARRAY, values);\n\n        values = split(TEST_CSV_STRING, COMMA_CHAR);\n        assertArrayEquals(ofArray(\"a\", \"b\", \"c\"), values);\n    }\n\n    @Test\n    public void testContains() {\n        assertFalse(contains(null, null));\n        assertFalse(contains(TEST_EMPTY_STRING, null));\n        assertTrue(contains(TEST_EMPTY_STRING, TEST_EMPTY_STRING));\n\n        assertFalse(contains(TEST_BLANK_STRING, null));\n        assertTrue(contains(TEST_BLANK_STRING, TEST_BLANK_STRING));\n\n        assertFalse(contains(TEST_CSV_STRING, DOT));\n        assertTrue(contains(TEST_CSV_STRING, COMMA));\n    }\n\n\n    @Test\n    public void testStartsWith() {\n        assertFalse(startsWith(null, null));\n        assertFalse(startsWith(TEST_EMPTY_STRING, null));\n        assertTrue(startsWith(TEST_EMPTY_STRING, TEST_EMPTY_STRING));\n\n        assertFalse(startsWith(TEST_BLANK_STRING, null));\n        assertTrue(startsWith(TEST_BLANK_STRING, TEST_BLANK_STRING));\n        assertFalse(startsWith(TEST_CSV_STRING, DOT));\n        assertFalse(startsWith(TEST_CSV_STRING, COMMA));\n\n        assertTrue(startsWith(TEST_CSV_STRING, \"a\"));\n        assertTrue(startsWith(TEST_CSV_STRING, \"a,\"));\n        assertTrue(startsWith(TEST_CSV_STRING, \"a,b\"));\n        assertTrue(startsWith(TEST_CSV_STRING, \"a,b,\"));\n        assertTrue(startsWith(TEST_CSV_STRING, new String(\"a,b,c\")));\n        assertTrue(startsWith(TEST_CSV_STRING, TEST_CSV_STRING));\n    }\n\n    @Test\n    public void testEndsWith() {\n        assertFalse(endsWith(null, null));\n        assertFalse(endsWith(TEST_EMPTY_STRING, null));\n        assertTrue(endsWith(TEST_EMPTY_STRING, TEST_EMPTY_STRING));\n\n        assertFalse(endsWith(TEST_BLANK_STRING, null));\n        assertTrue(endsWith(TEST_BLANK_STRING, TEST_BLANK_STRING));\n        assertFalse(endsWith(TEST_CSV_STRING, DOT));\n        assertFalse(endsWith(TEST_CSV_STRING, COMMA));\n\n        assertFalse(endsWith(TEST_CSV_STRING, \"a\"));\n        assertFalse(endsWith(TEST_CSV_STRING, \"a,\"));\n        assertFalse(endsWith(TEST_CSV_STRING, \"a,b\"));\n        assertFalse(endsWith(TEST_CSV_STRING, \"a,b,\"));\n        assertTrue(endsWith(TEST_CSV_STRING, \"c\"));\n        assertTrue(endsWith(TEST_CSV_STRING, \",c\"));\n        assertTrue(endsWith(TEST_CSV_STRING, \"b,c\"));\n        assertTrue(endsWith(TEST_CSV_STRING, new String(\"a,b,c\")));\n        assertTrue(endsWith(TEST_CSV_STRING, TEST_CSV_STRING));\n    }\n\n    @Test\n    public void testReplace() {\n        assertNull(replace(null, null, null));\n        assertEquals(TEST_EMPTY_STRING, replace(TEST_EMPTY_STRING, null, null));\n        assertEquals(TEST_EMPTY_STRING, replace(TEST_EMPTY_STRING, TEST_EMPTY_STRING, null));\n        assertEquals(TEST_EMPTY_STRING, replace(TEST_EMPTY_STRING, TEST_EMPTY_STRING, TEST_EMPTY_STRING, 0));\n\n        assertEquals(TEST_CSV_STRING, replace(TEST_CSV_STRING, null, null));\n        assertEquals(TEST_CSV_STRING, replace(TEST_CSV_STRING, TEST_EMPTY_STRING, null));\n        assertEquals(TEST_CSV_STRING, replace(TEST_CSV_STRING, COMMA, null));\n        assertEquals(TEST_CSV_STRING, replace(TEST_CSV_STRING, COMMA, VERTICAL_BAR, 0));\n\n        assertEquals(\"a|b|c\", replace(TEST_CSV_STRING, COMMA, VERTICAL_BAR));\n        assertEquals(\"a|b,c\", replace(TEST_CSV_STRING, COMMA, VERTICAL_BAR, 1));\n    }\n\n\n    @Test\n    public void testSubstringBetween() {\n    }\n\n    @Test\n    public void testTestSubstringBetween() {\n    }\n\n    @Test\n    public void testSubstringBefore() {\n    }\n\n    @Test\n    public void testSubstringAfter() {\n    }\n\n    @Test\n    public void testSubstringBeforeLast() {\n    }\n\n    @Test\n    public void testSubstringAfterLast() {\n    }\n}"
