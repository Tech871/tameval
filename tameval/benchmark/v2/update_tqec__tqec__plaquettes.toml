[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "tqec/tqec"
sha = "3c0db694339614f537772a7bf6a183c8ffcb78a7"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=src/tqec/compile/blocks/layers/atomic/plaquettes.py -m pytest -q --junit-xml=test_output.xml src/tqec/compile/blocks/layers/atomic/plaquettes_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target src.tqec.compile.blocks.layers.atomic.plaquettes --unit-test src.tqec.compile.blocks.layers.atomic.plaquettes_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target src/tqec/compile/blocks/layers/atomic/plaquettes.py --unit-test src/tqec/compile/blocks/layers/atomic/plaquettes_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 49.0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = 17.0
covered_lines = [ 0, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 21, 22, 54, 85, 86, 98, 99, 130, 131, 135, 136, 140, 141, 142, 147, 148, 161, 168, 171, 172, 173,]
missed_lines = [ 49, 50, 51, 52, 56, 57, 58, 59, 67, 68, 70, 71, 78, 79, 88, 89, 90, 96, 114, 118, 119, 120, 121, 133, 138, 143, 144, 145, 151, 152, 153, 154, 155, 162, 174,]

[input_info]
test_file_path = "src/tqec/compile/blocks/layers/atomic/plaquettes_test.py"
focal_file_path = "src/tqec/compile/blocks/layers/atomic/plaquettes.py"
test_file_url = "https://github.com/tqec/tqec/blob/3c0db694339614f537772a7bf6a183c8ffcb78a7/src/tqec/compile/blocks/layers/atomic/plaquettes_test.py"
focal_file_url = "https://github.com/tqec/tqec/blob/3c0db694339614f537772a7bf6a183c8ffcb78a7/src/tqec/compile/blocks/layers/atomic/plaquettes.py"
first_commit_date = "2025-03-12"
last_commit_date = "2025-07-25"
test_file_content = "import itertools\n\nimport pytest\n\nfrom tqec.compile.blocks.enums import SpatialBlockBorder, TemporalBlockBorder\nfrom tqec.compile.blocks.layers.atomic.plaquettes import PlaquetteLayer\nfrom tqec.plaquette.constants import MEASUREMENT_SCHEDULE\nfrom tqec.plaquette.plaquette import Plaquettes\nfrom tqec.plaquette.rpng.rpng import RPNGDescription\nfrom tqec.plaquette.rpng.translators.default import DefaultRPNGTranslator\nfrom tqec.templates._testing import FixedTemplate\nfrom tqec.templates.qubit import QubitTemplate\nfrom tqec.utils.exceptions import TQECException\nfrom tqec.utils.frozendefaultdict import FrozenDefaultDict\nfrom tqec.utils.scale import LinearFunction, PhysicalQubitScalable2D\n\n_TRANSLATOR = DefaultRPNGTranslator()\n_EMPTY_PLAQUETTE = _TRANSLATOR.translate(RPNGDescription.empty())\n\n\ndef test_creation() -> None:\n    template = FixedTemplate([[1]])\n    large_template = FixedTemplate([[1 for _ in range(10)] for _ in range(10)])\n    plaquettes = Plaquettes(FrozenDefaultDict({}, default_value=_EMPTY_PLAQUETTE))\n    PlaquetteLayer(template, plaquettes)\n    PlaquetteLayer(\n        large_template,\n        plaquettes,\n        trimmed_spatial_borders=frozenset([SpatialBlockBorder.X_NEGATIVE]),\n    )\n    PlaquetteLayer(\n        large_template,\n        plaquettes,\n        trimmed_spatial_borders=frozenset(SpatialBlockBorder),\n    )\n\n    with pytest.raises(TQECException):\n        PlaquetteLayer(\n            template,\n            plaquettes,\n            trimmed_spatial_borders=frozenset([SpatialBlockBorder.X_NEGATIVE]),\n        )\n\n\ndef test_scalable_shape() -> None:\n    template = FixedTemplate([[1]])\n    large_template = FixedTemplate([[1 for _ in range(10)] for _ in range(10)])\n    plaquettes = Plaquettes(FrozenDefaultDict({}, default_value=_EMPTY_PLAQUETTE))\n    single_plaquette_shape = PhysicalQubitScalable2D(LinearFunction(0, 3), LinearFunction(0, 3))\n    assert PlaquetteLayer(template, plaquettes).scalable_shape == single_plaquette_shape\n    assert PlaquetteLayer(\n        large_template,\n        plaquettes,\n        trimmed_spatial_borders=frozenset([SpatialBlockBorder.X_NEGATIVE]),\n    ).scalable_shape == PhysicalQubitScalable2D(LinearFunction(0, 19), LinearFunction(0, 21))\n    assert PlaquetteLayer(\n        large_template,\n        plaquettes,\n        trimmed_spatial_borders=frozenset(SpatialBlockBorder),\n    ).scalable_shape == PhysicalQubitScalable2D(LinearFunction(0, 17), LinearFunction(0, 17))\n\n\n@pytest.mark.parametrize(\"borders\", [(border,) for border in SpatialBlockBorder])\ndef test_with_spatial_borders_trimmed(borders: tuple[SpatialBlockBorder, ...]) -> None:\n    template = QubitTemplate()\n    plaquettes = Plaquettes(\n        FrozenDefaultDict(\n            {i + 1: _EMPTY_PLAQUETTE for i in range(template.expected_plaquettes_number)},\n            default_value=_EMPTY_PLAQUETTE,\n        )\n    )\n    layer = PlaquetteLayer(template, plaquettes)\n    all_indices = frozenset(plaquettes.collection.keys())\n    expected_plaquette_indices = all_indices - frozenset(\n        itertools.chain.from_iterable(\n            frozenset(template.get_border_indices(border.to_template_border()))\n            for border in borders\n        )\n    )\n    assert (\n        frozenset(layer.with_spatial_borders_trimmed(borders).plaquettes.collection.keys())\n        == expected_plaquette_indices\n    )\n\n\ndef test_with_temporal_borders_replaced_none() -> None:\n    template = FixedTemplate([[1]])\n    plaquettes = Plaquettes(FrozenDefaultDict({}, default_value=_EMPTY_PLAQUETTE))\n    layer = PlaquetteLayer(template, plaquettes)\n    assert layer.with_temporal_borders_replaced({}) == layer\n    assert layer.with_temporal_borders_replaced({TemporalBlockBorder.Z_NEGATIVE: None}) is None\n    assert layer.with_temporal_borders_replaced({TemporalBlockBorder.Z_POSITIVE: None}) is None\n    assert (\n        layer.with_temporal_borders_replaced(\n            {TemporalBlockBorder.Z_NEGATIVE: None, TemporalBlockBorder.Z_POSITIVE: None}\n        )\n        is None\n    )\n\n\ndef test_with_temporal_borders_replaced() -> None:\n    template = FixedTemplate([[1]])\n    plaquettes = Plaquettes(FrozenDefaultDict({}, default_value=_EMPTY_PLAQUETTE))\n    layer = PlaquetteLayer(template, plaquettes)\n    replacement_template = FixedTemplate([[2]])\n    replacement_plaquettes = Plaquettes(FrozenDefaultDict({}, default_value=_EMPTY_PLAQUETTE))\n    replacement_layer = PlaquetteLayer(replacement_template, replacement_plaquettes)\n\n    assert layer.with_temporal_borders_replaced({}) == layer\n    for replacement in [None, layer, replacement_layer]:\n        assert (\n            layer.with_temporal_borders_replaced({TemporalBlockBorder.Z_NEGATIVE: replacement})\n            == replacement\n        )\n    with pytest.raises(TQECException):\n        layer.with_temporal_borders_replaced(\n            {\n                TemporalBlockBorder.Z_NEGATIVE: None,\n                TemporalBlockBorder.Z_POSITIVE: replacement_layer,\n            }\n        )\n\n\ndef test_scalable_num_moments() -> None:\n    template = FixedTemplate([[1]])\n    plaquettes = Plaquettes(FrozenDefaultDict({}, default_value=_EMPTY_PLAQUETTE))\n    layer = PlaquetteLayer(template, plaquettes)\n    assert layer.scalable_num_moments == LinearFunction(0, 0)\n\n    plaquettes = Plaquettes(\n        FrozenDefaultDict(\n            {1: _TRANSLATOR.translate(RPNGDescription.from_string(\"-x1- -x2- -x3- -x4-\"))},\n            default_value=_EMPTY_PLAQUETTE,\n        )\n    )\n    layer = PlaquetteLayer(template, plaquettes)\n    # Note: even if there is no measurement in the plaquette, the measurement moment is\n    # still present, and so is accounted for. That is an implementation detail of the\n    # translator and may lead to inaccurate results.\n    assert layer.scalable_num_moments == LinearFunction(0, MEASUREMENT_SCHEDULE + 1)\n\n    plaquettes = Plaquettes(\n        FrozenDefaultDict(\n            {1: _TRANSLATOR.translate(RPNGDescription.from_string(\"-x1z -x2z -x3z -x4z\"))},\n            default_value=_EMPTY_PLAQUETTE,\n        )\n    )\n    print(plaquettes[1].circuit.get_circuit())\n    layer = PlaquetteLayer(template, plaquettes)\n    assert layer.scalable_num_moments == LinearFunction(0, MEASUREMENT_SCHEDULE + 1)"
