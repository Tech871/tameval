[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "NetApp/trident"
sha = "4d3b2b199cf35d9bee2ff4ea6bb4eb39d65304b3"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/convert/convert.go pkg/convert/convert_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/convert/convert.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 21.0
original_coverage = 63.0
mutation_kill_rate = 11.0
original_mutation_kill_rate = 45.0
covered_lines = [ 54, 55, 56, 57, 69, 70, 71, 72, 73, 74, 76, 79, 85, 91, 94, 95, 96, 97, 100, 101, 102, 103, 106, 110,]
missed_lines = [ 27, 28, 29, 32, 33, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 60, 61, 62, 63, 64, 66, 80, 81, 82, 86, 87, 88, 107, 108, 109, 114, 115, 116, 117, 120, 121, 122, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 186, 190, 191, 192, 193, 194,]

[input_info]
test_file_path = "pkg/convert/convert_test.go"
focal_file_path = "pkg/convert/convert.go"
test_file_url = "https://github.com/NetApp/trident/blob/4d3b2b199cf35d9bee2ff4ea6bb4eb39d65304b3/pkg/convert/convert_test.go"
focal_file_url = "https://github.com/NetApp/trident/blob/4d3b2b199cf35d9bee2ff4ea6bb4eb39d65304b3/pkg/convert/convert.go"
first_commit_date = "2025-01-13"
last_commit_date = "2025-01-13"
test_file_content = "// Copyright 2025 NetApp, Inc. All Rights Reserved.\n\npackage convert\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n)\n\n\n\n\nfunc TestToPrintableBoolPtr(t *testing.T) {\n\tvar bPtr *bool\n\tpval := ToPrintableBoolPtr(bPtr)\n\tassert.Equal(t, \"none\", pval)\n\n\ttmp := false\n\tbPtr = &tmp\n\tpval = ToPrintableBoolPtr(bPtr)\n\tassert.Equal(t, \"false\", pval)\n\n\ttmp = true\n\tpval = ToPrintableBoolPtr(bPtr)\n\tassert.Equal(t, \"true\", pval)\n}\n\n\nfunc TestToBool(t *testing.T) {\n\ttests := []struct {\n\t\tb        string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tb:        \"true\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tb:        \"false\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tb:        \"not a value\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.b, func(t *testing.T) {\n\t\t\tactual := ToBool(test.b)\n\t\t\tassert.Equal(t, test.expected, actual)\n\t\t})\n\t}\n}\n\n\n\nfunc TestBase64StringToObject_Fails(t *testing.T) {\n\ttype testObject struct {\n\t\tFoo string `json:\"foo\"`\n\t\tBar string `json:\"bar\"`\n\t\tBaz string `json:\"baz,omitempty\"`\n\t}\n\n\t// Encoded object is an empty string.\n\tactualObject := testObject{}\n\terr := Base64StringToObject(\"\", &actualObject)\n\tassert.Empty(t, actualObject.Foo)\n\tassert.Empty(t, actualObject.Bar)\n\tassert.Empty(t, actualObject.Baz)\n\tassert.Error(t, err)\n\n\t// Encoded object is an invalid value for a base64 string.\n\tactualObject = testObject{}\n\terr = Base64StringToObject(\"%\", &actualObject)\n\tassert.Empty(t, actualObject.Foo)\n\tassert.Empty(t, actualObject.Bar)\n\tassert.Empty(t, actualObject.Baz)\n\tassert.Error(t, err)\n\n\t// Encoded object contains non-ASCII characters for a base64 string.\n\tactualObject = testObject{}\n\terr = Base64StringToObject(\"ÃŸ-11234567890987654321234567890\", &actualObject)\n\tassert.Empty(t, actualObject.Foo)\n\tassert.Empty(t, actualObject.Bar)\n\tassert.Empty(t, actualObject.Baz)\n\tassert.Error(t, err)\n}\n\n\nfunc TestEncodeAndDecodeToAndFromBase64(t *testing.T) {\n\ttype testObject struct {\n\t\tFoo string `json:\"foo\"`\n\t\tBar string `json:\"bar\"`\n\t\tBaz string `json:\"baz,omitempty\"`\n\t}\n\n\t// Create a test object and encoded it.\n\toriginalObject := testObject{Foo: \"foo_test\", Bar: \"bar_test\", Baz: \"baz_test\"}\n\tencodedObject, err := ObjectToBase64String(originalObject)\n\tassert.NoError(t, err)\n\tassert.NotNil(t, encodedObject)\n\n\t// Decode the encoded test object and ensure the values extracted object and its values are equivalent to\n\t// those present in the original object.\n\tvar actualObject testObject\n\terr = Base64StringToObject(encodedObject, &actualObject)\n\tassert.NoError(t, err)\n\tassert.NotNil(t, encodedObject)\n\tassert.Equal(t, originalObject.Foo, actualObject.Foo)\n\tassert.Equal(t, originalObject.Bar, actualObject.Bar)\n\tassert.Equal(t, originalObject.Baz, actualObject.Baz)\n}\n\n"
