[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.4"

[repo_info]
repository = "vmware/pinniped"
sha = "e20c5beb47391281e19d13b1e22c5fd42f577686"

[run_info]
docker_image = "golang:1.24.4"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/endpointaddr/endpointaddr.go internal/endpointaddr/endpointaddr_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/endpointaddr/endpointaddr.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 82.0
original_coverage = 100.0
mutation_kill_rate = 73.0
original_mutation_kill_rate = 87.0
covered_lines = [ 30, 31, 32, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 59, 60, 61, 62, 65, 66, 68, 69, 70, 73, 74, 75, 76,]
missed_lines = [ 96, 97, 98, 99, 100, 101,]

[input_info]
test_file_path = "internal/endpointaddr/endpointaddr_test.go"
focal_file_path = "internal/endpointaddr/endpointaddr.go"
test_file_url = "https://github.com/vmware/pinniped/blob/e20c5beb47391281e19d13b1e22c5fd42f577686/internal/endpointaddr/endpointaddr_test.go"
focal_file_url = "https://github.com/vmware/pinniped/blob/e20c5beb47391281e19d13b1e22c5fd42f577686/internal/endpointaddr/endpointaddr.go"
first_commit_date = "2021-05-25"
last_commit_date = "2025-05-13"
test_file_content = "// Copyright 2021-2024 the Pinniped contributors. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\npackage endpointaddr\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestParse(t *testing.T) {\n\tt.Parallel()\n\tfor _, tt := range []struct {\n\t\tname           string\n\t\tinput          string\n\t\tdefaultPort    uint16\n\t\texpectErr      string\n\t\texpect         HostPort\n\t\texpectEndpoint string\n\t}{\n\t\t{\n\t\t\tname:           \"plain IPv4\",\n\t\t\tinput:          \"127.0.0.1\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"127.0.0.1\", Port: 443},\n\t\t\texpectEndpoint: \"127.0.0.1:443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"IPv4 with port\",\n\t\t\tinput:          \"127.0.0.1:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"127.0.0.1\", Port: 8443},\n\t\t\texpectEndpoint: \"127.0.0.1:8443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"IPv4 in brackets with port\",\n\t\t\tinput:          \"[127.0.0.1]:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"127.0.0.1\", Port: 8443},\n\t\t\texpectEndpoint: \"127.0.0.1:8443\",\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid IPv4\",\n\t\t\tinput:       \"1.1.1.\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"1.1.1.\" is not a valid hostname or IP address`,\n\t\t},\n\t\t{\n\t\t\tname:           \"IPv4 as IPv6 in brackets with port\",\n\t\t\tinput:          \"[::127.0.0.1]:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"::127.0.0.1\", Port: 8443},\n\t\t\texpectEndpoint: \"[::127.0.0.1]:8443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"IPv4 as IPv6 without port\",\n\t\t\tinput:          \"::127.0.0.1\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"::127.0.0.1\", Port: 443},\n\t\t\texpectEndpoint: \"[::127.0.0.1]:443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"plain IPv6 without port\",\n\t\t\tinput:          \"2001:db8::ffff\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"2001:db8::ffff\", Port: 443},\n\t\t\texpectEndpoint: \"[2001:db8::ffff]:443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"IPv6 with port\",\n\t\t\tinput:          \"[2001:db8::ffff]:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"2001:db8::ffff\", Port: 8443},\n\t\t\texpectEndpoint: \"[2001:db8::ffff]:8443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"plain hostname\",\n\t\t\tinput:          \"host.example.com\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"host.example.com\", Port: 443},\n\t\t\texpectEndpoint: \"host.example.com:443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"plain hostname with dash\",\n\t\t\tinput:          \"host-dev.example.com\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"host-dev.example.com\", Port: 443},\n\t\t\texpectEndpoint: \"host-dev.example.com:443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"hostname with port\",\n\t\t\tinput:          \"host.example.com:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"host.example.com\", Port: 8443},\n\t\t\texpectEndpoint: \"host.example.com:8443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"hostname in brackets with port\",\n\t\t\tinput:          \"[host.example.com]:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"host.example.com\", Port: 8443},\n\t\t\texpectEndpoint: \"host.example.com:8443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"hostname without dots\",\n\t\t\tinput:          \"localhost\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"localhost\", Port: 443},\n\t\t\texpectEndpoint: \"localhost:443\",\n\t\t},\n\t\t{\n\t\t\tname:           \"hostname and port without dots\",\n\t\t\tinput:          \"localhost:8443\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"localhost\", Port: 8443},\n\t\t\texpectEndpoint: \"localhost:8443\",\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid empty string\",\n\t\t\tinput:       \"\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"\" is not a valid hostname or IP address`,\n\t\t},\n\t\t{\n\t\t\t// IPv6 zone index specifiers are not yet supported.\n\t\t\tname:        \"IPv6 with port and zone index\",\n\t\t\tinput:       \"[2001:db8::ffff%lo0]:8443\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"2001:db8::ffff%lo0\" is not a valid hostname or IP address`,\n\t\t},\n\t\t{\n\t\t\tname:        \"IPv6 in brackets without port\",\n\t\t\tinput:       \"[2001:db8::ffff]\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `address [[2001:db8::ffff]]:443: missing port in address`,\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid HTTPS URL\",\n\t\t\tinput:       \"https://host.example.com\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `invalid port \"//host.example.com\"`,\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid host with URL path\",\n\t\t\tinput:       \"host.example.com/some/path\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"host.example.com/some/path\" is not a valid hostname or IP address`,\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid host with mismatched brackets\",\n\t\t\tinput:       \"[host.example.com\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   \"address [host.example.com:443: missing ']' in address\",\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid host with underscores\",\n\t\t\tinput:       \"___.example.com:1234\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"___.example.com\" is not a valid hostname or IP address`,\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid host with extra port\",\n\t\t\tinput:       \"host.example.com:port1:port2\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"host.example.com:port1:port2\" is not a valid hostname or IP address`,\n\t\t},\n\t\t{\n\t\t\tname:           \"hostname with upper case letters should be valid\",\n\t\t\tinput:          \"HoSt.EXamplE.cOM\",\n\t\t\tdefaultPort:    443,\n\t\t\texpect:         HostPort{Host: \"HoSt.EXamplE.cOM\", Port: 443},\n\t\t\texpectEndpoint: \"HoSt.EXamplE.cOM:443\",\n\t\t},\n\t\t{\n\t\t\tname:        \"unicode chars are disallowed in host names\",\n\t\t\tinput:       \"Hello.ä¸–ç•ŒðŸ™‚.com\",\n\t\t\tdefaultPort: 443,\n\t\t\texpectErr:   `host \"Hello.ä¸–ç•ŒðŸ™‚.com\" is not a valid hostname or IP address`,\n\t\t},\n\t} {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := Parse(tt.input, tt.defaultPort)\n\t\t\tif tt.expectErr == \"\" {\n\t\t\t\tassert.NoError(t, err)\n\t\t\t\tassert.Equal(t, tt.expect, got)\n\t\t\t\tassert.Equal(t, tt.expectEndpoint, got.Endpoint())\n\t\t\t} else {\n\t\t\t\tassert.EqualError(t, err, tt.expectErr)\n\t\t\t\tassert.Equal(t, HostPort{}, got)\n\t\t\t}\n\t\t})\n\t}\n}\n"
