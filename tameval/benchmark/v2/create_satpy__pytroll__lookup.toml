[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pytroll/satpy"
sha = "0beea130092f3270ae1af8a87644d47971acbbc4"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=satpy/composites/lookup.py -m pytest -q --junit-xml=test_output.xml satpy/tests/compositor_tests/test_lookup.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target satpy.composites.lookup --unit-test satpy.tests.compositor_tests.test_lookup --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target satpy/composites/lookup.py --unit-test satpy/tests/compositor_tests/test_lookup.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 53.0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 18, 20, 22, 23, 25, 27, 30, 42, 49, 50, 52, 57, 58, 61, 63, 64, 80, 115, 116, 130, 132, 133, 141, 143, 155, 162, 163, 171, 172, 178, 187, 188, 193, 202, 203, 211,]
missed_lines = [ 54, 55, 59, 66, 67, 74, 75, 77, 145, 146, 148, 150, 152, 153, 156, 157, 158, 159, 160, 164, 165, 166, 168, 169, 173, 189, 190, 204, 205, 208, 212, 213,]

[input_info]
test_file_path = "satpy/tests/compositor_tests/test_lookup.py"
focal_file_path = "satpy/composites/lookup.py"
test_file_url = "https://github.com/pytroll/satpy/blob/0beea130092f3270ae1af8a87644d47971acbbc4/satpy/tests/compositor_tests/test_lookup.py"
focal_file_url = "https://github.com/pytroll/satpy/blob/0beea130092f3270ae1af8a87644d47971acbbc4/satpy/composites/lookup.py"
first_commit_date = "2025-06-24"
last_commit_date = "2025-08-08"
test_file_content = "#!/usr/bin/env python\n# Copyright (c) 2018-2025 Satpy developers\n#\n# This file is part of satpy.\n#\n# satpy is free software: you can redistribute it and/or modify it under the\n# terms of the GNU General Public License as published by the Free Software\n# Foundation, either version 3 of the License, or (at your option) any later\n# version.\n#\n# satpy is distributed in the hope that it will be useful, but WITHOUT ANY\n# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along with\n# satpy.  If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Tests for compositors using lookup tables.\"\"\"\n\nimport unittest\n\nimport dask.array as da\nimport numpy as np\nimport xarray as xr\n\nclass TestColormapCompositor(unittest.TestCase):\n    \"\"\"Test the ColormapCompositor.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up the test case.\"\"\"\n        from satpy.composites.lookup import ColormapCompositor\n        self.colormap_compositor = ColormapCompositor(\"test_cmap_compositor\")\n\n    def test_build_colormap_with_int_data_and_with_meanings(self):\n        \"\"\"Test colormap building.\"\"\"\n        palette = xr.DataArray(np.array([[0, 0, 0], [127, 127, 127], [255, 255, 255]]),\n                               dims=[\"value\", \"band\"])\n        palette.attrs[\"palette_meanings\"] = [2, 3, 4]\n        colormap, squeezed_palette = self.colormap_compositor.build_colormap(palette, np.uint8, {})\n        assert np.allclose(colormap.values, [2, 3, 4])\n        assert np.allclose(squeezed_palette, palette / 255.0)\n\nclass TestPaletteCompositor(unittest.TestCase):\n    \"\"\"Test the PaletteCompositor.\"\"\"\n\nclass TestColorizeCompositor(unittest.TestCase):\n    \"\"\"Test the ColorizeCompositor.\"\"\"\n\nclass TestCategoricalDataCompositor(unittest.TestCase):\n    \"\"\"Test composiotor for recategorization of categorical data.\"\"\"\n\n    def setUp(self):\n        \"\"\"Create test data.\"\"\"\n        attrs = {\"name\": \"foo\"}\n        data = xr.DataArray(da.from_array([[2., 1.], [3., 0.]]), attrs=attrs,\n                            dims=(\"y\", \"x\"), coords={\"y\": [0, 1], \"x\": [0, 1]})\n\n        self.data = data\n\n    def test_too_many_datasets(self):\n        \"\"\"Test that ValueError is raised if more than one dataset is provided.\"\"\"\n        from satpy.composites.lookup import CategoricalDataCompositor\n        lut = [np.nan, 0, 1, 1]\n        comp = CategoricalDataCompositor(name=\"foo\", lut=lut)\n        np.testing.assert_raises(ValueError, comp, [self.data, self.data])\n"
