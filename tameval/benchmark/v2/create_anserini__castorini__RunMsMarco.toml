[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "castorini/anserini"
sha = "a9ec58ac9208f0246e39a39d7d8c95a431b45b56"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=RunMsMarcoTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.RunMsMarco  -DtargetTests=**.RunMsMarcoTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 87.0
original_coverage = 87.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 27, 28, 34, 35, 38, 39, 40, 53, 56, 57, 59, 60, 61, 66, 67, 68, 69, 73, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 142, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158,]
missed_lines = [ 26, 41, 42, 44, 45, 46, 47, 49, 51, 52, 62, 63,]

[input_info]
test_file_path = "src/test/java/io/anserini/repro/RunMsMarcoTest.java"
focal_file_path = "src/main/java/io/anserini/reproduce/RunMsMarco.java"
test_file_url = "https://github.com/castorini/anserini/blob/a9ec58ac9208f0246e39a39d7d8c95a431b45b56/src/test/java/io/anserini/repro/RunMsMarcoTest.java"
focal_file_url = "https://github.com/castorini/anserini/blob/a9ec58ac9208f0246e39a39d7d8c95a431b45b56/src/main/java/io/anserini/reproduce/RunMsMarco.java"
first_commit_date = "2024-03-18"
last_commit_date = "2025-08-11"
test_file_content = "/*\n * Anserini: A Lucene toolkit for reproducible information retrieval research\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.anserini.repro;\n\nimport io.anserini.reproduce.RunMsMarco;\nimport org.junit.Test;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintStream;\n\nimport static org.junit.Assert.assertTrue;\n\npublic class RunMsMarcoTest {\n  private final ByteArrayOutputStream out = new ByteArrayOutputStream();\n  private final ByteArrayOutputStream err = new ByteArrayOutputStream();\n  private PrintStream saveOut;\n  private PrintStream saveErr;\n\n  private void redirectStderr() {\n    saveErr = System.err;\n    err.reset();\n    System.setErr(new PrintStream(err));\n  }\n\n  private void restoreStderr() {\n    System.setErr(saveErr);\n  }\n\n  private void redirectStdout() {\n    saveOut = System.out;\n    out.reset();\n    System.setOut(new PrintStream(out));\n  }\n\n  private void restoreStdout() {\n    System.setOut(saveOut);\n  }\n\n  @Test\n  public void testInvalidOption() throws Exception {\n    redirectStderr();\n\n    String[] args = new String[] {\"-dry\"};\n    RunMsMarco.main(args);\n\n    assertTrue(err.toString().startsWith(\"Error: \\\"-dry\\\" is not a valid option.\"));\n    restoreStderr();\n  }\n\n  @Test\n  public void test1() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\"};\n    RunMsMarco.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    restoreStdout();\n  }\n\n  @Test\n  public void test2() throws Exception {\n    redirectStdout();\n\n    String[] args = new String[] {\"-dryRun\", \"-printCommands\"};\n    RunMsMarco.main(args);\n\n    assertTrue(out.toString().startsWith(\"# Running condition\"));\n    assertTrue(out.toString().contains(\"Retrieval command\"));\n    assertTrue(out.toString().contains(\"Eval command\"));\n\n    restoreStdout();\n  }\n}\n"
