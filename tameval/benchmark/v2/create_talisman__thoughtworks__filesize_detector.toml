[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "thoughtworks/talisman"
sha = "12fab7055d7e640d5dae43209bafc48bf5ef1fd7"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out detector/filesize/filesize_detector.go detector/filesize/filesize_detector_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting detector/filesize/filesize_detector.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 62.0
original_coverage = 100.0
mutation_kill_rate = 38.0
original_mutation_kill_rate = 46.0
covered_lines = [ 17, 18, 19, 21, 22, 23, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45,]
missed_lines = [ 24, 25, 26, 27, 28, 29, 30, 41, 42, 43,]

[input_info]
test_file_path = "detector/filesize/filesize_detector_test.go"
focal_file_path = "detector/filesize/filesize_detector.go"
test_file_url = "https://github.com/thoughtworks/talisman/blob/12fab7055d7e640d5dae43209bafc48bf5ef1fd7/detector/filesize/filesize_detector_test.go"
focal_file_url = "https://github.com/thoughtworks/talisman/blob/12fab7055d7e640d5dae43209bafc48bf5ef1fd7/detector/filesize/filesize_detector.go"
first_commit_date = "2020-06-12"
last_commit_date = "2025-03-21"
test_file_content = "package filesize\n\nimport (\n\t\"talisman/detector/helpers\"\n\t\"testing\"\n\n\t\"talisman/gitrepo\"\n\t\"talisman/talismanrc\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nvar talismanRC = &talismanrc.TalismanRC{}\nvar defaultIgnoreEvaluator = helpers.BuildIgnoreEvaluator(\"default\", talismanRC, gitrepo.RepoLocatedAt(\".\"))\n\nfunc ignoreEvaluatorWithTalismanRC(tRC *talismanrc.TalismanRC) helpers.IgnoreEvaluator {\n\treturn helpers.BuildIgnoreEvaluator(\"default\", tRC, gitrepo.RepoLocatedAt(\".\"))\n}\n\nfunc TestShouldFlagLargeFiles(t *testing.T) {\n\tresults := helpers.NewDetectionResults()\n\tcontent := []byte(\"more than one byte\")\n\tadditions := []gitrepo.Addition{gitrepo.NewAddition(\"filename\", content)}\n\tNewFileSizeDetector(2).Test(defaultIgnoreEvaluator, additions, talismanRC, results, func() {})\n\tassert.True(t, results.HasFailures(), \"Expected file to fail the check against file size detector.\")\n}\n\n"
