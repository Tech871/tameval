[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "notaryproject/ratify"
sha = "67aa7a4993f915deac10ae371cdafb67a4bf697c"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/policyprovider/policyquery/rego/query.go pkg/policyprovider/policyquery/rego/query_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/policyprovider/policyquery/rego/query.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 68.0
original_coverage = 68.0
mutation_kill_rate = 52.0
original_mutation_kill_rate = 52.0
covered_lines = [ 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 60, 61, 68, 72,]
missed_lines = [ 62, 63, 64, 65, 66, 69, 70, 71,]

[input_info]
test_file_path = "pkg/policyprovider/policyquery/rego/query_test.go"
focal_file_path = "pkg/policyprovider/policyquery/rego/query.go"
test_file_url = "https://github.com/notaryproject/ratify/blob/67aa7a4993f915deac10ae371cdafb67a4bf697c/pkg/policyprovider/policyquery/rego/query_test.go"
focal_file_url = "https://github.com/notaryproject/ratify/blob/67aa7a4993f915deac10ae371cdafb67a4bf697c/pkg/policyprovider/policyquery/rego/query.go"
first_commit_date = "2023-07-12"
last_commit_date = "2025-05-08"
test_file_content = "package query\n\nimport (\n\t\"context\"\n\t\"testing\"\n)\n\nconst (\n\tpolicy1 = `\n  package ratify.policy\n  \n  default valid := false\n  \n  valid {\n\t  input.method == \"GET\"\n  }\n  `\n\tpolicy2 = \"package\"\n)\n\nfunc TestCreate(t *testing.T) {\n\ttestcases := []struct {\n\t\tname        string\n\t\tpolicy      string\n\t\texpectErr   bool\n\t\texpectQuery bool\n\t}{\n\t\t{\n\t\t\tname:        \"valid policy\",\n\t\t\tpolicy:      policy1,\n\t\t\texpectErr:   false,\n\t\t\texpectQuery: true,\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid policy\",\n\t\t\tpolicy:      policy2,\n\t\t\texpectErr:   true,\n\t\t\texpectQuery: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testcases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tfactory := &RegoFactory{}\n\t\t\tquery, err := factory.Create(tc.policy)\n\t\t\tif tc.expectErr != (err != nil) {\n\t\t\t\tt.Fatalf(\"error = %v, expectErr = %v\", err, tc.expectErr)\n\t\t\t}\n\t\t\tif tc.expectQuery != (query != nil) {\n\t\t\t\tt.Fatalf(\"query = %v, expectQuery = %v\", query, tc.expectQuery)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc VerifyCreate(t *testing.T) {\n\ttestcases := []struct {\n\t\tname        string\n\t\tpolicy      string\n\t\texpectErr   bool\n\t\texpectQuery bool\n\t}{\n\t\t{\n\t\t\tname:        \"valid policy\",\n\t\t\tpolicy:      policy1,\n\t\t\texpectErr:   false,\n\t\t\texpectQuery: true,\n\t\t},\n\t\t{\n\t\t\tname:        \"invalid policy\",\n\t\t\tpolicy:      policy2,\n\t\t\texpectErr:   true,\n\t\t\texpectQuery: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testcases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tfactory := &RegoFactory{}\n\t\t\tqueryObj, err := factory.Create(tc.policy)\n\t\t\tif tc.expectErr != (err != nil) {\n\t\t\t\tt.Fatalf(\"error = %v, expectErr = %v\", err, tc.expectErr)\n\t\t\t}\n\t\t\tif tc.expectQuery != (queryObj != nil) {\n\t\t\t\tt.Fatalf(\"queryObj = %v, expectQuery = %v\", queryObj, tc.expectQuery)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestEvaluate(t *testing.T) {\n\tfactory := &RegoFactory{}\n\tquery, err := factory.Create(policy1)\n\tif err != nil {\n\t\tt.Fatalf(\"err = %v\", err)\n\t}\n\n\ttestcases := []struct {\n\t\tname         string\n\t\tinput        map[string]interface{}\n\t\texpectResult bool\n\t\texpectErr    bool\n\t}{\n\t\t{\n\t\t\tname:         \"empty input\",\n\t\t\tinput:        nil,\n\t\t\texpectResult: false,\n\t\t\texpectErr:    false,\n\t\t},\n\t\t{\n\t\t\tname: \"input with false result\",\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"method\": \"POST\",\n\t\t\t},\n\t\t\texpectResult: false,\n\t\t\texpectErr:    false,\n\t\t},\n\t\t{\n\t\t\tname: \"valid input\",\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"method\": \"GET\",\n\t\t\t},\n\t\t\texpectResult: true,\n\t\t\texpectErr:    false,\n\t\t},\n\t}\n\n\tfor _, tc := range testcases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult, err := query.Evaluate(context.Background(), tc.input)\n\t\t\tif tc.expectErr != (err != nil) {\n\t\t\t\tt.Fatalf(\"error = %v, expectErr = %v\", err, tc.expectErr)\n\t\t\t}\n\t\t\tif tc.expectResult != result {\n\t\t\t\tt.Fatalf(\"result = %v, expectResult = %v\", result, tc.expectResult)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc CheckEvaluate(t *testing.T) {\n\tfactory := &RegoFactory{}\n\tqueryObj, err := factory.Create(policy1)\n\tif err != nil {\n\t\tt.Fatalf(\"err = %v\", err)\n\t}\n\n\ttestcases := []struct {\n\t\tname         string\n\t\tinput        map[string]interface{}\n\t\texpectResult bool\n\t\texpectErr    bool\n\t}{\n\t\t{\n\t\t\tname:         \"empty input\",\n\t\t\tinput:        nil,\n\t\t\texpectResult: false,\n\t\t\texpectErr:    false,\n\t\t},\n\t\t{\n\t\t\tname: \"input with false result\",\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"method\": \"POST\",\n\t\t\t},\n\t\t\texpectResult: false,\n\t\t\texpectErr:    false,\n\t\t},\n\t\t{\n\t\t\tname: \"valid input\",\n\t\t\tinput: map[string]interface{}{\n\t\t\t\t\"method\": \"GET\",\n\t\t\t},\n\t\t\texpectResult: true,\n\t\t\texpectErr:    false,\n\t\t},\n\t}\n\n\tfor _, tc := range testcases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres, err := queryObj.Evaluate(context.Background(), tc.input)\n\t\t\tif tc.expectErr != (err != nil) {\n\t\t\t\tt.Fatalf(\"error = %v, expectErr = %v\", err, tc.expectErr)\n\t\t\t}\n\t\t\tif tc.expectResult != res {\n\t\t\t\tt.Fatalf(\"res = %v, expectResult = %v\", res, tc.expectResult)\n\t\t\t}\n\t\t})\n\t}\n}"
