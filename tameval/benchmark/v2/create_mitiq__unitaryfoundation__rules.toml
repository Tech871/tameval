[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "unitaryfoundation/mitiq"
sha = "3d4516eb01e0c82220a829bbf570ac537143b5a5"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mitiq/ddd/rules/rules.py -m pytest -q --junit-xml=test_output.xml mitiq/ddd/rules/tests/test_rules.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mitiq.ddd.rules.rules --unit-test mitiq.ddd.rules.tests.test_rules --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mitiq/ddd/rules/rules.py --unit-test mitiq/ddd/rules/tests/test_rules.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 54.0
original_coverage = 100.0
mutation_kill_rate = 37.0
original_mutation_kill_rate = 76.0
covered_lines = [ 9, 11, 12, 24, 52, 53, 54, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 79, 102, 125, 148,]
missed_lines = [ 55, 64, 70, 72, 73, 74, 75, 76, 94, 99, 117, 122, 140, 145, 168, 169, 170, 171, 182,]

[input_info]
test_file_path = "mitiq/ddd/rules/tests/test_rules.py"
focal_file_path = "mitiq/ddd/rules/rules.py"
test_file_url = "https://github.com/unitaryfoundation/mitiq/blob/3d4516eb01e0c82220a829bbf570ac537143b5a5/mitiq/ddd/rules/tests/test_rules.py"
focal_file_url = "https://github.com/unitaryfoundation/mitiq/blob/3d4516eb01e0c82220a829bbf570ac537143b5a5/mitiq/ddd/rules/rules.py"
first_commit_date = "2022-03-24"
last_commit_date = "2025-06-07"
test_file_content = "# Copyright (C) Unitary Foundation\n#\n# This source code is licensed under the GPL license (v3) found in the\n# LICENSE file in the root directory of this source tree.\n\n\"\"\"Unit tests for DDD rules.\"\"\"\n\nimport pytest\nfrom cirq import CNOT, Circuit, I, LineQubit, X, Y, Z, bit_flip\n\nfrom mitiq.ddd.rules.rules import general_rule, repeated_rule, xx, xyxy, yy\nfrom mitiq.utils import _equal\n\n@pytest.mark.parametrize(\n    \"slack_length\",\n    [1, 2, 3, 5],\n)\n@pytest.mark.parametrize(\n    \"gates\",\n    [\n        [X],\n        [Y],\n        [Z],\n    ],\n)\ndef test_general_for_incomplete_rule(slack_length, gates):\n    with pytest.raises(ValueError, match=\"too short to make a ddd sequence\"):\n        general_rule(\n            slack_length=slack_length,\n            gates=gates,\n        )\n\n@pytest.mark.parametrize(\n    \"slack_length\",\n    [3, 5],\n)\n@pytest.mark.parametrize(\n    \"gates\",\n    [\n        [CNOT, X, Y],\n    ],\n)\ndef test_general_for_multi_qubit_gate(slack_length, gates):\n    with pytest.raises(ValueError, match=\"Wrong number of qubits\"):\n        general_rule(\n            slack_length=slack_length,\n            gates=gates,\n        )\n"
