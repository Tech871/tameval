[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "valkey-io/valkey-java"
sha = "b631ea3dee9402cde1f9c5e0cb3f0a13979f3575"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=JedisByteHashMapTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.JedisByteHashMap  -DtargetTests=**.JedisByteHashMapTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = 50.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/io/valkey/collections/JedisByteHashMapTest.java"
focal_file_path = "src/main/java/io/valkey/util/JedisByteHashMap.java"
test_file_url = "https://github.com/valkey-io/valkey-java/blob/b631ea3dee9402cde1f9c5e0cb3f0a13979f3575/src/test/java/io/valkey/collections/JedisByteHashMapTest.java"
focal_file_url = "https://github.com/valkey-io/valkey-java/blob/b631ea3dee9402cde1f9c5e0cb3f0a13979f3575/src/main/java/io/valkey/util/JedisByteHashMap.java"
first_commit_date = "2024-07-24"
last_commit_date = "2024-07-24"
test_file_content = "package io.valkey.collections;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport io.valkey.util.JedisByteHashMap;\nimport org.junit.Assert;\nimport org.junit.Before;\n\npublic class JedisByteHashMapTest {\n  private static JedisByteHashMap map = new JedisByteHashMap();\n\n  private byte[][] keys = { { 'k', 'e', 'y', '1' }, { 'k', 'e', 'y', '2' }, { 'k', 'e', 'y', '3' } };\n  private byte[][] vals = { { 'v', 'a', 'l', '1' }, { 'v', 'a', 'l', '2' }, { 'v', 'a', 'l', '3' } };\n\n  @Before\n  public void before() throws Exception {\n    map.clear();\n  }\n\n  private boolean arrayContainsKey(byte[][] arr, byte[] key) {\n    for (byte[] anArr : arr) {\n      if (Arrays.equals(anArr, key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private boolean entryContainsKV(Set<Map.Entry<byte[], byte[]>> s, byte[] key, byte[] value) {\n    for (Map.Entry<byte[], byte[]> en : s) {\n      if (Arrays.equals(en.getKey(), key) && Arrays.equals(en.getValue(), value)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private boolean entrySetSame(Set<Map.Entry<byte[], byte[]>> s1, Set<Map.Entry<byte[], byte[]>> s2) {\n    for (Map.Entry<byte[], byte[]> en1 : s1) {\n      if (!entryContainsKV(s2, en1.getKey(), en1.getValue())) {\n        return false;\n      }\n    }\n    for (Map.Entry<byte[], byte[]> en2 : s2) {\n      if (!entryContainsKV(s1, en2.getKey(), en2.getValue())) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  @Test\n  public void mapOperations() {\n    map.put(keys[0], vals[0]);\n    Assert.assertEquals(1, map.size());\n    Map<byte[], byte[]> kvMap = new HashMap<>();\n    kvMap.put(keys[1], vals[1]);\n    kvMap.put(keys[2], vals[2]);\n    map.putAll(kvMap);\n    Assert.assertEquals(3, map.size());\n    Assert.assertTrue(map.containsKey(keys[0]));\n    Assert.assertTrue(map.containsValue(vals[0]));\n    Set<Entry<byte[], byte[]>> entries = map.entrySet();\n    Assert.assertEquals(3, entries.size());\n    for (Entry<byte[], byte[]> entry : entries) {\n      Assert.assertTrue(arrayContainsKey(keys, entry.getKey()));\n      Assert.assertTrue(arrayContainsKey(vals, entry.getValue()));\n    }\n    Assert.assertArrayEquals(vals[0], map.get(keys[0]));\n    Assert.assertFalse(map.isEmpty());\n    for (byte[] key : map.keySet()) {\n      Assert.assertTrue(arrayContainsKey(keys, key));\n    }\n    for (byte[] value : map.values()) {\n      Assert.assertTrue(arrayContainsKey(vals, value));\n    }\n    map.remove(keys[0]);\n    Assert.assertEquals(2, map.size());\n    map.clear();\n    Assert.assertEquals(0, map.size());\n  }\n\n  @Test\n  public void serialize() throws Exception {\n    for (int i = 0; i < keys.length; i++) {\n      map.put(keys[i], vals[i]);\n    }\n\n    ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n    ObjectOutputStream objOut = new ObjectOutputStream(byteOut);\n    objOut.writeObject(map);\n\n    ByteArrayInputStream byteIn = new ByteArrayInputStream(byteOut.toByteArray());\n    ObjectInputStream objIn = new ObjectInputStream(byteIn);\n    JedisByteHashMap mapRead = (JedisByteHashMap) objIn.readObject();\n\n    Assert.assertTrue(entrySetSame(map.entrySet(), mapRead.entrySet()));\n  }\n}"
