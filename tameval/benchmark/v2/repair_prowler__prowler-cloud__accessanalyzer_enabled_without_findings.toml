[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "prowler-cloud/prowler"
sha = "39e4d20b24b2b7150da7b29e75cce77c14fe046f"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=prowler/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings.py -m pytest -q --junit-xml=test_output.xml tests/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings --unit-test tests.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target prowler/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings.py --unit-test tests/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 17.0
covered_lines = [ 0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 25, 27,]
missed_lines = []

[input_info]
test_file_path = "tests/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings_test.py"
focal_file_path = "prowler/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings.py"
test_file_url = "https://github.com/prowler-cloud/prowler/blob/39e4d20b24b2b7150da7b29e75cce77c14fe046f/tests/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings_test.py"
focal_file_url = "https://github.com/prowler-cloud/prowler/blob/39e4d20b24b2b7150da7b29e75cce77c14fe046f/prowler/providers/aws/services/accessanalyzer/accessanalyzer_enabled_without_findings/accessanalyzer_enabled_without_findings.py"
first_commit_date = "2022-12-13"
last_commit_date = "2025-01-23"
test_file_content = "from unittest import mock\n\nfrom prowler.providers.aws.services.accessanalyzer.accessanalyzer_service import (\n    Analyzer,\n    Finding,\n)\n\nAWS_REGION_1 = \"eu-west-1\"\nAWS_REGION_2 = \"eu-west-2\"\nAWS_ACCOUNT_NUMBER = \"123456789012\"\nAWS_ACCOUNT_ARN = f\"arn:aws:iam::{AWS_ACCOUNT_NUMBER}:root\"\nACCESS_ANALYZER_NAME = \"test-analyzer\"\nACCESS_ANALYZER_ARN = f\"arn:aws:access-analyzer:{AWS_REGION_2}:{AWS_ACCOUNT_NUMBER}:analyzer/{ACCESS_ANALYZER_NAME}\"\n\n\nclass Test_accessanalyzer_enabled_without_findings:\n    def test_no_analyzers(self):\n        accessanalyzer_client = mock.MagicMock\n        accessanalyzer_client.analyzers = []\n        with mock.patch(\n            \"prowler.providers.aws.services.accessanalyzer.accessanalyzer_service.AccessAnalyzer\",\n            new=accessanalyzer_client,\n        ):\n            from prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings import (\n                accessanalyzer_enabled_without_findings,\n            )\n\n            check = accessanalyzer_enabled_without_findings()\n            result = check.execute()\n\n\n    def test_one_analyzer_not_available(self):\n        accessanalyzer_client = mock.MagicMock\n        accessanalyzer_client.analyzers = [\n            Analyzer(\n                arn=AWS_ACCOUNT_ARN,\n                name=AWS_ACCOUNT_NUMBER,\n                status=\"NOT_AVAILABLE\",\n                tags=[],\n                type=\"\",\n                fidings=[],\n                region=AWS_REGION_1,\n            )\n        ]\n        with mock.patch(\n            \"prowler.providers.aws.services.accessanalyzer.accessanalyzer_service.AccessAnalyzer\",\n            accessanalyzer_client,\n        ):\n            from prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings import (\n                accessanalyzer_enabled_without_findings,\n            )\n\n            check = accessanalyzer_enabled_without_findings()\n            result = check.execute()\n\n\n    def test_two_analyzers_but_one_with_findings(self):\n        accessanalyzer_client = mock.MagicMock\n        accessanalyzer_client.analyzers = [\n            Analyzer(\n                arn=AWS_ACCOUNT_ARN,\n                name=AWS_ACCOUNT_NUMBER,\n                status=\"NOT_AVAILABLE\",\n                tags=[],\n                fidings=[],\n                type=\"\",\n                region=AWS_REGION_1,\n            ),\n            Analyzer(\n                arn=ACCESS_ANALYZER_ARN,\n                name=ACCESS_ANALYZER_NAME,\n                status=\"ACTIVE\",\n                findings=[\n                    Finding(\n                        id=\"test-finding-1\",\n                        status=\"ACTIVE\",\n                    ),\n                    Finding(\n                        id=\"test-finding-2\",\n                        status=\"ARCHIVED\",\n                    ),\n                ],\n                tags=[],\n                type=\"\",\n                region=AWS_REGION_2,\n            ),\n        ]\n        with mock.patch(\n            \"prowler.providers.aws.services.accessanalyzer.accessanalyzer_service.AccessAnalyzer\",\n            new=accessanalyzer_client,\n        ):\n            from prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings import (\n                accessanalyzer_enabled_without_findings,\n            )\n\n            check = accessanalyzer_enabled_without_findings()\n            result = check.execute()\n\n\n\n    def test_one_active_analyzer_without_findings(self):\n        accessanalyzer_client = mock.MagicMock\n        accessanalyzer_client.analyzers = [\n            Analyzer(\n                arn=ACCESS_ANALYZER_ARN,\n                name=ACCESS_ANALYZER_NAME,\n                status=\"ACTIVE\",\n                tags=[],\n                fidings=[],\n                type=\"\",\n                region=AWS_REGION_2,\n            )\n        ]\n\n        with mock.patch(\n            \"prowler.providers.aws.services.accessanalyzer.accessanalyzer_service.AccessAnalyzer\",\n            new=accessanalyzer_client,\n        ):\n            from prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings import (\n                accessanalyzer_enabled_without_findings,\n            )\n\n            check = accessanalyzer_enabled_without_findings()\n            result = check.execute()\n\n\n    def test_one_active_analyzer_not_active_without_findings(self):\n        accessanalyzer_client = mock.MagicMock\n        accessanalyzer_client.analyzers = [\n            Analyzer(\n                arn=AWS_ACCOUNT_ARN,\n                name=AWS_ACCOUNT_NUMBER,\n                status=\"NOT_AVAILABLE\",\n                tags=[],\n                fidings=[],\n                type=\"\",\n                region=AWS_REGION_1,\n            ),\n        ]\n        with mock.patch(\n            \"prowler.providers.aws.services.accessanalyzer.accessanalyzer_service.AccessAnalyzer\",\n            new=accessanalyzer_client,\n        ):\n            from prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings import (\n                accessanalyzer_enabled_without_findings,\n            )\n\n            check = accessanalyzer_enabled_without_findings()\n            result = check.execute()\n\n\n    def test_analyzer_finding_without_status(self):\n        accessanalyzer_client = mock.MagicMock\n        accessanalyzer_client.analyzers = [\n            Analyzer(\n                arn=ACCESS_ANALYZER_ARN,\n                name=ACCESS_ANALYZER_NAME,\n                status=\"ACTIVE\",\n                findings=[\n                    Finding(\n                        id=\"test-finding-1\",\n                        status=\"\",\n                    ),\n                ],\n                tags=[],\n                type=\"\",\n                region=AWS_REGION_1,\n            ),\n        ]\n        with mock.patch(\n            \"prowler.providers.aws.services.accessanalyzer.accessanalyzer_service.AccessAnalyzer\",\n            new=accessanalyzer_client,\n        ):\n            from prowler.providers.aws.services.accessanalyzer.accessanalyzer_enabled_without_findings.accessanalyzer_enabled_without_findings import (\n                accessanalyzer_enabled_without_findings,\n            )\n\n            check = accessanalyzer_enabled_without_findings()\n            result = check.execute()"
