[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "GIScience/openrouteservice"
sha = "957c6ace324fee2a0eeaea1791f36fc153e4c875"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl ors-api -Dtest=IsochronesServiceTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl ors-api -DtargetClasses=**.IsochronesService  -DtargetTests=**.IsochronesServiceTest  -DoutputFormats=XML"
coverage_report_path = "ors-api/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "ors-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 53.0
original_coverage = 53.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 43, 44, 45, 46, 65, 67, 68, 70, 76, 78, 79, 81, 82, 87, 93, 95, 96, 98, 99, 104, 112, 113, 116, 127, 128, 132, 133, 139, 140, 143, 146, 147, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 175, 177, 179, 181, 183, 185, 187, 189, 192, 193, 198, 200, 201, 215, 233, 235, 236, 237, 239, 241, 242, 244, 247, 248, 249, 250, 254, 255, 258, 261, 263, 265, 267, 268, 270, 274, 275, 279, 280, 281, 282, 283, 351, 352, 354, 355, 358, 360, 361, 362, 363, 364, 365, 366, 368, 369, 373, 374, 377, 379, 383, 385, 387, 389,]
missed_lines = [ 49, 50, 52, 55, 57, 58, 60, 62, 84, 101, 114, 118, 119, 129, 130, 131, 144, 145, 173, 174, 178, 180, 182, 184, 186, 188, 190, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 238, 240, 245, 259, 260, 264, 271, 272, 287, 288, 289, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 306, 309, 310, 311, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 329, 333, 334, 337, 338, 339, 340, 342, 343, 344, 347, 356, 357, 375, 391, 393, 394,]

[input_info]
test_file_path = "ors-api/src/test/java/org/heigit/ors/api/services/IsochronesServiceTest.java"
focal_file_path = "ors-api/src/main/java/org/heigit/ors/api/services/IsochronesService.java"
test_file_url = "https://github.com/GIScience/openrouteservice/blob/957c6ace324fee2a0eeaea1791f36fc153e4c875/ors-api/src/test/java/org/heigit/ors/api/services/IsochronesServiceTest.java"
focal_file_url = "https://github.com/GIScience/openrouteservice/blob/957c6ace324fee2a0eeaea1791f36fc153e4c875/ors-api/src/main/java/org/heigit/ors/api/services/IsochronesService.java"
first_commit_date = "2023-07-20"
last_commit_date = "2024-12-13"
test_file_content = "package org.heigit.ors.api.services;\n\nimport org.heigit.ors.api.APIEnums;\nimport org.heigit.ors.api.config.EndpointsProperties;\nimport org.heigit.ors.api.requests.isochrones.IsochronesRequest;\nimport org.heigit.ors.api.requests.isochrones.IsochronesRequestEnums;\nimport org.heigit.ors.api.requests.routing.RequestProfileParams;\nimport org.heigit.ors.api.requests.routing.RequestProfileParamsRestrictions;\nimport org.heigit.ors.api.requests.routing.RequestProfileParamsWeightings;\nimport org.heigit.ors.api.requests.routing.RouteRequestOptions;\nimport org.heigit.ors.common.TravelRangeType;\nimport org.heigit.ors.common.TravellerInfo;\nimport org.heigit.ors.exceptions.ParameterOutOfRangeException;\nimport org.heigit.ors.exceptions.ParameterValueException;\nimport org.heigit.ors.isochrones.IsochroneRequest;\nimport org.heigit.ors.routing.*;\nimport org.heigit.ors.routing.pathprocessors.BordersExtractor;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.locationtech.jts.geom.Coordinate;\nimport org.locationtech.jts.geom.Polygon;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\n@ActiveProfiles(\"unittest\")\npublic class IsochronesServiceTest {\n    IsochronesRequest request;\n\n    private RequestProfileParamsRestrictions vehicleParams;\n    private RequestProfileParamsRestrictions cyclingParams;\n    private RequestProfileParamsRestrictions walkingParams;\n    private RequestProfileParamsRestrictions wheelchairParams;\n    private JSONObject geoJsonPolygon;\n\n    @Autowired\n    private EndpointsProperties endpointsProperties = new EndpointsProperties();\n    @Autowired\n    private IsochronesService isochronesService;\n\n    private JSONObject constructGeoJson() {\n        JSONObject geoJsonPolygon = new JSONObject();\n        geoJsonPolygon.put(\"type\", \"Polygon\");\n        JSONArray coordsArray = new JSONArray();\n        coordsArray.add(new Double[]{49.0, 8.0});\n        coordsArray.add(new Double[]{49.005, 8.01});\n        coordsArray.add(new Double[]{49.01, 8.0});\n        coordsArray.add(new Double[]{49.0, 8.0});\n        JSONArray coordinates = new JSONArray();\n\n        coordinates.add(coordsArray);\n        geoJsonPolygon.put(\"coordinates\", coordinates);\n\n        return geoJsonPolygon;\n    }\n\n    @BeforeEach\n    void init() throws Exception {\n\n        geoJsonPolygon = constructGeoJson();\n\n        Double[][] coords = new Double[2][2];\n        coords[0] = new Double[]{24.5, 39.2};\n        coords[1] = new Double[]{27.4, 38.6};\n\n        request = new IsochronesRequest();\n        request.setLocations(coords);\n\n        request.setProfile(APIEnums.Profile.DRIVING_CAR);\n        request.setAttributes(new IsochronesRequestEnums.Attributes[]{IsochronesRequestEnums.Attributes.AREA, IsochronesRequestEnums.Attributes.REACH_FACTOR});\n        request.setResponseType(APIEnums.RouteResponseType.GEOJSON);\n\n        RouteRequestOptions options = new RouteRequestOptions();\n        options.setAvoidBorders(APIEnums.AvoidBorders.CONTROLLED);\n        options.setAvoidCountries(new String[]{\"115\"});\n        options.setAvoidFeatures(new APIEnums.AvoidFeatures[]{APIEnums.AvoidFeatures.FORDS});\n\n        options.setAvoidPolygonFeatures(geoJsonPolygon);\n\n        vehicleParams = new RequestProfileParamsRestrictions();\n\n        vehicleParams.setAxleLoad(10.0f);\n        vehicleParams.setHazardousMaterial(true);\n        vehicleParams.setHeight(5.0f);\n        vehicleParams.setLength(15.0f);\n        vehicleParams.setWeight(30.0f);\n        vehicleParams.setWidth(4.5f);\n\n        wheelchairParams = new RequestProfileParamsRestrictions();\n        wheelchairParams.setMaxIncline(3);\n        wheelchairParams.setMaxSlopedKerb(1.0f);\n        wheelchairParams.setMinWidth(2.0f);\n        wheelchairParams.setSmoothnessType(APIEnums.SmoothnessTypes.SMOOTHNESS_GOOD);\n        wheelchairParams.setSurfaceType(\"asphalt\");\n\n        RequestProfileParams params = new RequestProfileParams();\n        RequestProfileParamsWeightings weightings = new RequestProfileParamsWeightings();\n        weightings.setGreenIndex(0.5f);\n        weightings.setQuietIndex(0.2f);\n        weightings.setSteepnessDifficulty(3);\n\n        params.setWeightings(weightings);\n\n        options.setProfileParams(params);\n        request.setIsochronesOptions(options);\n    }\n\n    @Test\n    void convertSmoothing() throws ParameterValueException {\n        Float smoothing = isochronesService.convertSmoothing(10.234);\n        assertEquals(10.234, smoothing, 0.01);\n    }\n\n    @Test\n    void convertSmoothingFailWhenTooHigh() throws ParameterValueException {\n        assertThrows(ParameterValueException.class, () -> {\n            isochronesService.convertSmoothing(105.0);\n        });\n    }\n\n    @Test\n    void convertSmoothingFailWhenTooLow() throws ParameterValueException {\n        assertThrows(ParameterValueException.class, () -> {\n            isochronesService.convertSmoothing(-5.0);\n        });\n    }\n\n    @Test\n    void convertLocationType() throws ParameterValueException {\n        String locationType = isochronesService.convertLocationType(IsochronesRequestEnums.LocationType.DESTINATION);\n        assertEquals(\"destination\", locationType);\n        locationType = isochronesService.convertLocationType(IsochronesRequestEnums.LocationType.START);\n        assertEquals(\"start\", locationType);\n    }\n\n    @Test\n    void convertRangeType() throws ParameterValueException {\n        TravelRangeType rangeType = isochronesService.convertRangeType(IsochronesRequestEnums.RangeType.DISTANCE);\n        assertEquals(TravelRangeType.DISTANCE, rangeType);\n        rangeType = isochronesService.convertRangeType(IsochronesRequestEnums.RangeType.TIME);\n        assertEquals(TravelRangeType.TIME, rangeType);\n    }\n\n    @Test\n    void convertAreaUnit() throws ParameterValueException {\n        String unit = isochronesService.convertAreaUnit(APIEnums.Units.KILOMETRES);\n        assertEquals(\"km\", unit);\n        unit = isochronesService.convertAreaUnit(APIEnums.Units.METRES);\n        assertEquals(\"m\", unit);\n        unit = isochronesService.convertAreaUnit(APIEnums.Units.MILES);\n        assertEquals(\"mi\", unit);\n    }\n\n    @Test\n    void convertRangeUnit() throws ParameterValueException {\n        String unit = isochronesService.convertRangeUnit(APIEnums.Units.KILOMETRES);\n        assertEquals(\"km\", unit);\n        unit = isochronesService.convertRangeUnit(APIEnums.Units.METRES);\n        assertEquals(\"m\", unit);\n        unit = isochronesService.convertRangeUnit(APIEnums.Units.MILES);\n        assertEquals(\"mi\", unit);\n    }\n\n    @Test\n    void convertSingleCoordinate() throws ParameterValueException {\n        Coordinate coord = isochronesService.convertSingleCoordinate(new Double[]{123.4, 321.0});\n        assertEquals(123.4, coord.x, 0.0001);\n        assertEquals(321.0, coord.y, 0.0001);\n    }\n\n    @Test\n    void convertSingleCoordinateInvalidLengthShort() throws ParameterValueException {\n        assertThrows(ParameterValueException.class, () -> {\n            isochronesService.convertSingleCoordinate(new Double[]{123.4});\n        });\n    }\n\n    @Test\n    void convertSingleCoordinateInvalidLengthLong() throws ParameterValueException {\n        assertThrows(ParameterValueException.class, () -> {\n            isochronesService.convertSingleCoordinate(new Double[]{123.4, 123.4, 123.4});\n        });\n    }\n\n    @Test\n    void setRangeAndIntervals() throws ParameterValueException, ParameterOutOfRangeException {\n        TravellerInfo info = new TravellerInfo();\n        List<Double> rangeValues = new ArrayList<>();\n        rangeValues.add(20.0);\n        double intervalValue = 10;\n\n        isochronesService.setRangeAndIntervals(info, rangeValues, intervalValue);\n\n        assertEquals(10.0, info.getRanges()[0], 0.0f);\n        assertEquals(20.0, info.getRanges()[1], 0.0f);\n\n        info = new TravellerInfo();\n        rangeValues = new ArrayList<>();\n        rangeValues.add(15.0);\n        rangeValues.add(30.0);\n        isochronesService.setRangeAndIntervals(info, rangeValues, intervalValue);\n        assertEquals(15.0, info.getRanges()[0], 0.0f);\n        assertEquals(30.0, info.getRanges()[1], 0.0f);\n\n    }\n\n    @Test\n    void convertAttributes() {\n        IsochronesRequestEnums.Attributes[] atts = new IsochronesRequestEnums.Attributes[]{IsochronesRequestEnums.Attributes.AREA, IsochronesRequestEnums.Attributes.REACH_FACTOR, IsochronesRequestEnums.Attributes.TOTAL_POPULATION};\n        String[] attStr = IsochronesRequest.convertAttributes(atts);\n        assertEquals(\"area\", attStr[0]);\n        assertEquals(\"reachfactor\", attStr[1]);\n        assertEquals(\"total_pop\", attStr[2]);\n    }\n\n    @Test\n    void convertCalcMethod() throws ParameterValueException {\n        String calcMethod = isochronesService.convertCalcMethod(IsochronesRequestEnums.CalculationMethod.CONCAVE_BALLS);\n        assertEquals(\"concaveballs\", calcMethod);\n        calcMethod = isochronesService.convertCalcMethod(IsochronesRequestEnums.CalculationMethod.GRID);\n        assertEquals(\"grid\", calcMethod);\n    }\n\n    @Test\n    void convertIsochroneRequest() throws Exception {\n        IsochronesRequest request = new IsochronesRequest();\n        Double[][] locations = {{9.676034, 50.409675}, {9.676034, 50.409675}};\n        Coordinate coord0 = new Coordinate();\n        coord0.x = 9.676034;\n        coord0.y = 50.409675;\n\n        request.setLocations(locations);\n        request.setProfile(APIEnums.Profile.DRIVING_CAR);\n        List<Double> range = new ArrayList<>();\n        range.add(300.0);\n        range.add(600.0);\n        request.setRange(range);\n        IsochroneRequest isochroneRequest = isochronesService.convertIsochroneRequest(request);\n        assertNotNull(isochroneRequest);\n        assertFalse(isochroneRequest.getIncludeIntersections());\n        assertNull(request.getAttributes());\n        assertFalse(request.hasSmoothing());\n        assertNull(request.getSmoothing());\n        assertNull(request.getId());\n        assertEquals(coord0.x, isochroneRequest.getLocations()[0].x, 0);\n        assertEquals(coord0.y, isochroneRequest.getLocations()[0].y, 0);\n        assertEquals(coord0.x, isochroneRequest.getLocations()[1].x, 0);\n        assertEquals(coord0.y, isochroneRequest.getLocations()[1].y, 0);\n        assertEquals(2, isochroneRequest.getTravellers().size());\n        for (int i = 0; i < isochroneRequest.getTravellers().size(); i++) {\n            TravellerInfo travellerInfo = isochroneRequest.getTravellers().get(i);\n            assertEquals(String.valueOf(i), travellerInfo.getId());\n            assertEquals(coord0, travellerInfo.getLocation());\n            assertEquals(IsochronesRequestEnums.LocationType.START.toString(), travellerInfo.getLocationType());\n            assertNotNull(travellerInfo.getRanges());\n            assertEquals(TravelRangeType.TIME, travellerInfo.getRangeType());\n            assertNotNull(travellerInfo.getRouteSearchParameters());\n        }\n\n    }\n\n    @Test\n    void constructTravellerInfo() throws Exception {\n        Double[][] coordinates = {{1.0, 3.0}, {1.0, 3.0}};\n        Double[] coordinate = {1.0, 3.0};\n        Coordinate realCoordinate = new Coordinate();\n        realCoordinate.x = 1.0;\n        realCoordinate.y = 3.0;\n        IsochronesRequest request = new IsochronesRequest();\n        request.setProfile(APIEnums.Profile.DRIVING_CAR);\n        request.setLocations(coordinates);\n        List<Double> range = new ArrayList<>();\n        range.add(300.0);\n        range.add(600.0);\n        request.setRange(range);\n        TravellerInfo travellerInfo = isochronesService.constructTravellerInfo(request, coordinate);\n        assertEquals(String.valueOf(0), travellerInfo.getId());\n        assertEquals(realCoordinate, travellerInfo.getLocation());\n        assertEquals(\"start\", travellerInfo.getLocationType());\n        assertEquals(range.toString(), Arrays.toString(travellerInfo.getRanges()));\n        assertEquals(TravelRangeType.TIME, travellerInfo.getRangeType());\n    }\n\n    @Test\n    void constructRouteSearchParametersTest() throws Exception {\n        Double[][] coordinates = {{1.0, 3.0}, {1.0, 3.0}};\n        IsochronesRequest request = new IsochronesRequest();\n        request.setProfile(APIEnums.Profile.DRIVING_CAR);\n        request.setLocations(coordinates);\n        RouteSearchParameters routeSearchParameters = isochronesService.constructRouteSearchParameters(request);\n        assertEquals(RoutingProfileType.DRIVING_CAR, routeSearchParameters.getProfileType());\n        assertEquals(WeightingMethod.RECOMMENDED, routeSearchParameters.getWeightingMethod());\n        assertFalse(routeSearchParameters.getConsiderTurnRestrictions());\n        assertNull(routeSearchParameters.getAvoidAreas());\n        assertEquals(0, routeSearchParameters.getAvoidFeatureTypes());\n        assertEquals(0, routeSearchParameters.getVehicleType());\n        assertFalse(routeSearchParameters.hasFlexibleMode());\n        assertEquals(BordersExtractor.Avoid.NONE, routeSearchParameters.getAvoidBorders());\n        assertNull(routeSearchParameters.getProfileParameters());\n        assertNull(routeSearchParameters.getBearings());\n        assertNull(routeSearchParameters.getMaximumRadiuses());\n        assertNull(routeSearchParameters.getAvoidCountries());\n    }\n\n    @Test\n    void processIsochronesRequestOptionsTest() throws Exception {\n        RouteSearchParameters routeSearchParameters = isochronesService.constructRouteSearchParameters(request);\n\n        assertEquals(RoutingProfileType.DRIVING_CAR, routeSearchParameters.getProfileType());\n        assertEquals(WeightingMethod.RECOMMENDED, routeSearchParameters.getWeightingMethod());\n        assertFalse(routeSearchParameters.getConsiderTurnRestrictions());\n        checkPolygon(routeSearchParameters.getAvoidAreas(), geoJsonPolygon);\n        assertEquals(16, routeSearchParameters.getAvoidFeatureTypes());\n        assertEquals(0, routeSearchParameters.getVehicleType());\n        assertFalse(routeSearchParameters.hasFlexibleMode());\n        assertEquals(BordersExtractor.Avoid.CONTROLLED, routeSearchParameters.getAvoidBorders());\n        assertNull(routeSearchParameters.getBearings());\n        assertNull(routeSearchParameters.getMaximumRadiuses());\n        assertEquals(115, routeSearchParameters.getAvoidCountries()[0]);\n\n        ProfileWeightingCollection weightings = routeSearchParameters.getProfileParameters().getWeightings();\n        ProfileWeighting weighting;\n        Iterator<ProfileWeighting> iter = weightings.getIterator();\n        while (iter.hasNext() && (weighting = iter.next()) != null) {\n            if (weighting.getName().equals(\"green\")) {\n                assertEquals(0.5, weighting.getParameters().getDouble(\"factor\", -1), 0.0001);\n            }\n            if (weighting.getName().equals(\"quiet\")) {\n                assertEquals(0.2, weighting.getParameters().getDouble(\"factor\", -1), 0.0001);\n            }\n            if (weighting.getName().equals(\"steepness_difficulty\")) {\n                assertEquals(3, weighting.getParameters().getInt(\"level\", -1), 0.0001);\n            }\n        }\n    }\n\n    @Test\n    void getIsoMapsTest() {\n        assertNull(request.getIsoMaps());\n    }\n\n    @Test\n    void getIsochroneRequestTest() {\n        assertNull(request.getIsochroneRequest());\n    }\n\n    private void checkPolygon(Polygon[] requestPolys, JSONObject apiPolys) {\n        assertEquals(1, requestPolys.length);\n\n        JSONArray jsonCoords = (JSONArray) ((JSONArray) apiPolys.get(\"coordinates\")).get(0);\n        for (int i = 0; i < jsonCoords.size(); i++) {\n            Double[] coordPair = (Double[]) jsonCoords.get(i);\n            Coordinate c = new Coordinate(coordPair[0], coordPair[1]);\n\n            compareCoordinates(c, requestPolys[0].getCoordinates()[i]);\n        }\n    }\n\n    private void compareCoordinates(Coordinate c1, Coordinate c2) {\n        assertEquals(c1.x, c2.x, 0);\n        assertEquals(c1.y, c2.y, 0);\n    }\n\n}\n"
