[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "JustSkiv/goschedviz"
sha = "48ad1c1ea69350237e9569c68a0e0b7c2bc493b1"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/collector/godebug/parser.go internal/collector/godebug/parser_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/collector/godebug/parser.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 72.06
original_coverage = 62.0
mutation_kill_rate = 30.93
original_mutation_kill_rate = nan
covered_lines = [ 21, 22, 23, 24, 27, 32, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 83, 84, 88, 96, 101, 102, 103, 104, 105, 106, 108, 114, 119, 124, 129, 134, 139, 144, 149, 155, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 186,]
missed_lines = [ 28, 29, 30, 33, 34, 35, 63, 64, 65, 68, 69, 70, 73, 74, 75, 78, 79, 80, 85, 86, 87, 92, 93, 94, 109, 110, 111, 115, 116, 117, 120, 121, 122, 125, 126, 127, 130, 131, 132, 135, 136, 137, 140, 141, 142, 145, 146, 147, 150, 151, 152, 162, 163, 164, 182, 183, 184,]

[input_info]
test_file_path = "internal/collector/godebug/parser_test.go"
focal_file_path = "internal/collector/godebug/parser.go"
test_file_url = "https://github.com/JustSkiv/goschedviz/blob/48ad1c1ea69350237e9569c68a0e0b7c2bc493b1/internal/collector/godebug/parser_test.go"
focal_file_url = "https://github.com/JustSkiv/goschedviz/blob/48ad1c1ea69350237e9569c68a0e0b7c2bc493b1/internal/collector/godebug/parser.go"
first_commit_date = "2025-02-11"
last_commit_date = "2025-02-23"
test_file_content = "package godebug\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\nfunc TestParser_GoroutinesUpdate(t *testing.T) {\n\tparser := NewParser()\n\n\t// First parse metrics line\n\tsnapshot, ok := parser.Parse(\"PROCMETR num_goroutines=1234\")\n\tassert.False(t, ok, \"Metrics line should not produce snapshot\")\n\n\t// Then parse sched line to get snapshot with goroutines count\n\tschedLine := \"SCHED 1000ms: gomaxprocs=4 idleprocs=2 threads=8 spinningthreads=1 needspinning=0 idlethreads=3 runqueue=5 [1 2 1 0]\"\n\tsnapshot, ok = parser.Parse(schedLine)\n\tassert.True(t, ok, \"Should parse sched line\")\n\tassert.Equal(t, 1234, snapshot.Goroutines, \"Should include goroutines count\")\n\n\t// Test that goroutines count persists between sched lines\n\tsnapshot, ok = parser.Parse(schedLine)\n\tassert.True(t, ok, \"Should parse sched line\")\n\tassert.Equal(t, 1234, snapshot.Goroutines, \"Should maintain goroutines count\")\n\n\t// Test updating goroutines count\n\tsnapshot, ok = parser.Parse(\"PROCMETR num_goroutines=5678\")\n\tassert.False(t, ok, \"Metrics line should not produce snapshot\")\n\n\tsnapshot, ok = parser.Parse(schedLine)\n\tassert.True(t, ok, \"Should parse sched line\")\n\tassert.Equal(t, 5678, snapshot.Goroutines, \"Should update goroutines count\")\n}\n"
