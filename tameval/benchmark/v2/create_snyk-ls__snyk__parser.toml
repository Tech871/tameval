[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "snyk/snyk-ls"
sha = "cf5a04582d11c4040e39fda2c39fe0c4ebb7470f"
bench_version = 2

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out ast/maven/parser.go ast/maven/parser_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting ast/maven/parser.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 77.0
original_coverage = 77.0
mutation_kill_rate = 46.0
original_mutation_kill_rate = 46.0
covered_lines = [ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 74, 75, 85, 86, 87, 89, 90, 91, 97, 98, 99, 101, 106, 111, 112, 114, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,]
missed_lines = [ 51, 52, 53, 54, 55, 68, 69, 70, 76, 77, 78, 81, 82, 83, 92, 93, 94, 102, 103, 104, 107, 108, 109, 120, 121, 122,]

[input_info]
test_file_path = "ast/maven/parser_test.go"
focal_file_path = "ast/maven/parser.go"
test_file_url = "https://github.com/snyk/snyk-ls/blob/cf5a04582d11c4040e39fda2c39fe0c4ebb7470f/ast/maven/parser_test.go"
focal_file_url = "https://github.com/snyk/snyk-ls/blob/cf5a04582d11c4040e39fda2c39fe0c4ebb7470f/ast/maven/parser.go"
first_commit_date = "2022-03-17"
last_commit_date = "2025-07-23"
test_file_content = "/*\n * Â© 2022 Snyk Limited All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage maven\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/snyk/snyk-ls/internal/testutil\"\n\t\"github.com/snyk/snyk-ls/internal/types\"\n)\n\nfunc TestCreateDependencyTree(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\tvar testPath, _ = filepath.Abs(\"testdata/pom.xml\")\n\tvar testContent, _ = os.ReadFile(testPath)\n\tparser := Parser{logger: c.Logger()}\n\ttree := parser.Parse(string(testContent), types.FilePath(testPath))\n\tchildren := tree.Root.Children\n\tassert.Len(t, children, 2, \"Should have extracted 2 deps from pom.xml\")\n\n\tassert.Equal(t, 54, children[0].Line)\n\tassert.Equal(t, 15, children[0].StartChar)\n\tassert.Equal(t, 21, children[0].EndChar)\n\n\tassert.Equal(t, 59, children[1].Line)\n\tassert.Equal(t, 15, children[1].StartChar)\n\tassert.Equal(t, 21, children[1].EndChar)\n}\n\nfunc TestCreateHierarchicalDependencyTree(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\tvar testPath, _ = filepath.Abs(\"testdata/maven-goof/sub/pom.xml\")\n\tvar testContent, _ = os.ReadFile(testPath)\n\tparser := Parser{logger: c.Logger()}\n\ttree := parser.Parse(string(testContent), types.FilePath(testPath))\n\n\tassert.NotNilf(t, tree.ParentTree, \"Should have returned a Parent tree\")\n\n\tassert.Len(t, tree.ParentTree.Root.Children, 2)\n}\n"
