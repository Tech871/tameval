[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "castorini/anserini"
sha = "a9ec58ac9208f0246e39a39d7d8c95a431b45b56"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ShardInfoTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ShardInfo  -DtargetTests=**.ShardInfoTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 84.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 20, 21, 38, 39, 40, 41, 43, 44, 55, 56, 57, 60, 64, 65, 66, 71,]
missed_lines = [ 47, 51, 67,]

[input_info]
test_file_path = "src/test/java/io/anserini/index/ShardInfoTest.java"
focal_file_path = "src/main/java/io/anserini/index/ShardInfo.java"
test_file_url = "https://github.com/castorini/anserini/blob/a9ec58ac9208f0246e39a39d7d8c95a431b45b56/src/test/java/io/anserini/index/ShardInfoTest.java"
focal_file_url = "https://github.com/castorini/anserini/blob/a9ec58ac9208f0246e39a39d7d8c95a431b45b56/src/main/java/io/anserini/index/ShardInfo.java"
first_commit_date = "2025-03-16"
last_commit_date = "2025-03-16"
test_file_content = "/*\n * Anserini: A Lucene toolkit for reproducible information retrieval research\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.anserini.index;\n\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\npublic class ShardInfoTest {\n\n  @Test\n  public void testFromIdentifier() {\n    String identifier = \"msmarco-v2.1-doc-segmented.arctic-embed-l.hnsw-int8\";\n    ShardInfo shardInfo = ShardInfo.fromIdentifier(identifier);\n    assertNotNull(String.format(\"Expected non-null ShardInfo for identifier '%s'\", identifier), shardInfo);\n    assertEquals(String.format(\"Expected identifier '%s', got '%s'\", identifier, shardInfo.getIdentifier()),\n                identifier, shardInfo.getIdentifier());\n    assertEquals(String.format(\"Expected 10 shards, got %d shards\", shardInfo.getShards().length),\n                10, shardInfo.getShards().length);\n  }\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testFromIdentifierInvalid() {\n    ShardInfo.fromIdentifier(\"invalid-identifier\");\n  }\n\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testGetShardInvalid() {\n    ShardInfo.getShard(\"nonexistent-index\");\n  }\n\n\n  @Test(expected = IllegalArgumentException.class)\n  public void testFindShardGroupInvalid() {\n    ShardInfo.findShardGroup(\"nonexistent-index\");\n  }\n}\n"
