[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "containers/ramalama"
sha = "2c94e5f39c1f6c3253832353cbc2a225479b1dea"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=ramalama/engine.py -m pytest -q --junit-xml=test_output.xml test/unit/test_engine.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target ramalama.engine --unit-test test.unit.test_engine --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target ramalama/engine.py --unit-test test/unit/test_engine.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 43.0
original_coverage = 56.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 14, 15, 16, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 44, 45, 47, 48, 56, 58, 59, 62, 63, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 80, 81, 86, 89, 90, 91, 96, 97, 100, 101, 104, 105, 108, 109, 110, 112, 113, 114, 117, 119, 120, 124, 127, 128, 131, 144, 145, 146, 155, 156, 159, 160, 162, 165, 168, 171, 177, 178, 179, 181, 184, 185, 188, 189, 190, 193, 194, 197, 200, 203, 204, 205, 207, 213, 214, 215, 218, 219, 226, 229, 232, 233, 234, 236, 242, 257, 272, 283, 322, 337, 338, 345, 346, 347, 350, 383,]
missed_lines = [ 42, 49, 50, 51, 52, 53, 54, 60, 64, 65, 87, 92, 93, 94, 98, 102, 106, 115, 121, 122, 125, 129, 133, 134, 135, 138, 139, 140, 142, 148, 149, 151, 153, 157, 163, 166, 169, 172, 173, 174, 180, 182, 191, 195, 198, 201, 206, 208, 209, 210, 216, 220, 222, 224, 227, 230, 235, 237, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 273, 274, 275, 276, 277, 279, 280, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 305, 306, 307, 308, 310, 312, 313, 314, 315, 316, 317, 319, 323, 324, 325, 326, 328, 329, 330, 332, 333, 334, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 379, 380, 385, 386, 388, 389, 390, 391, 392, 393, 394, 396,]

[input_info]
test_file_path = "test/unit/test_engine.py"
focal_file_path = "ramalama/engine.py"
test_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/test/unit/test_engine.py"
focal_file_url = "https://github.com/containers/ramalama/blob/2c94e5f39c1f6c3253832353cbc2a225479b1dea/ramalama/engine.py"
first_commit_date = "2025-04-23"
last_commit_date = "2025-08-13"
test_file_content = "import unittest\nfrom argparse import Namespace\nfrom unittest.mock import patch\n\nfrom ramalama.engine import Engine, containers, dry_run, images\n\n\nclass TestEngine(unittest.TestCase):\n    def setUp(self):\n        self.base_args = Namespace(\n            engine=\"podman\",\n            debug=False,\n            dryrun=False,\n            pull=\"never\",\n            image=\"test-image:latest\",\n            quiet=True,\n            selinux=False,\n        )\n\n    def test_init_basic(self):\n        engine = Engine(self.base_args)\n        self.assertEqual(engine.use_podman, True)\n        self.assertEqual(engine.use_docker, False)\n        self.assertIn(\"--rm\", engine.exec_args)\n\n    def test_add_container_labels(self):\n        args = Namespace(**vars(self.base_args), MODEL=\"test-model\", port=\"8080\", subcommand=\"run\")\n        engine = Engine(args)\n        exec_args = engine.exec_args\n        self.assertIn(\"--label\", exec_args)\n        self.assertIn(\"ai.ramalama.model=test-model\", exec_args)\n        self.assertIn(\"ai.ramalama.port=8080\", exec_args)\n        self.assertIn(\"ai.ramalama.command=run\", exec_args)\n\n    @patch('os.access')\n    @patch('ramalama.engine.check_nvidia')\n    def test_add_oci_runtime_nvidia(self, mock_check_nvidia, mock_os_access):\n        mock_check_nvidia.return_value = \"cuda\"\n        mock_os_access.return_value = True\n\n        # Test Podman\n        podman_engine = Engine(self.base_args)\n        self.assertIn(\"--runtime\", podman_engine.exec_args)\n        self.assertIn(\"/usr/bin/nvidia-container-runtime\", podman_engine.exec_args)\n\n        # Test Podman when nvidia-container-runtime executable is missing\n        # This is expected with the official package\n        mock_os_access.return_value = False\n        podman_engine = Engine(self.base_args)\n        self.assertNotIn(\"--runtime\", podman_engine.exec_args)\n        self.assertNotIn(\"/usr/bin/nvidia-container-runtime\", podman_engine.exec_args)\n\n        # Test Docker\n        args = self.base_args\n        args.engine = \"docker\"\n        docker_args = Namespace(**vars(args))\n        docker_engine = Engine(docker_args)\n        self.assertIn(\"--runtime\", docker_engine.exec_args)\n        self.assertIn(\"nvidia\", docker_engine.exec_args)\n\n    def test_add_privileged_options(self):\n        # Test non-privileged (default)\n        engine = Engine(self.base_args)\n        self.assertIn(\"--security-opt=label=disable\", engine.exec_args)\n        self.assertIn(\"--cap-drop=all\", engine.exec_args)\n\n        # Test privileged\n        privileged_args = Namespace(**vars(self.base_args), privileged=True)\n        privileged_engine = Engine(privileged_args)\n        self.assertIn(\"--privileged\", privileged_engine.exec_args)\n\n    def test_add_selinux(self):\n        self.base_args.selinux = True\n        # Test non-privileged (default)\n        engine = Engine(self.base_args)\n        self.assertNotIn(\"--security-opt=label=disable\", engine.exec_args)\n\n    def test_add_port_option(self):\n        args = Namespace(**vars(self.base_args), port=\"8080\")\n        engine = Engine(args)\n        self.assertIn(\"-p\", engine.exec_args)\n        self.assertIn(\"8080:8080\", engine.exec_args)\n\n    @patch('ramalama.engine.run_cmd')\n    def test_images(self, mock_run_cmd):\n        mock_run_cmd.return_value.stdout = b\"image1\\nimage2\\n\"\n        args = Namespace(engine=\"podman\", debug=False, format=\"\", noheading=False, notrunc=False)\n        result = images(args)\n        self.assertEqual(result, [\"image1\", \"image2\"])\n        mock_run_cmd.assert_called_once()\n\n    @patch('ramalama.engine.run_cmd')\n    def test_containers(self, mock_run_cmd):\n        mock_run_cmd.return_value.stdout = b\"container1\\ncontainer2\\n\"\n        args = Namespace(engine=\"podman\", debug=False, format=\"\", noheading=False, notrunc=False)\n        result = containers(args)\n        self.assertEqual(result, [\"container1\", \"container2\"])\n        mock_run_cmd.assert_called_once()\n\n    def test_dry_run(self):\n        with patch('sys.stdout') as mock_stdout:\n            dry_run([\"podman\", \"run\", \"--rm\", \"test-image\"])\n            mock_stdout.write.assert_called()\n\n\nif __name__ == '__main__':\n    unittest.main()"
