[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "datageartech/datagear"
sha = "0cde3799fad38f74d53c73e087b0e3296237e466"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl datagear-analysis -Dtest=DataSetFieldExpEvaluatorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl datagear-analysis -DtargetClasses=**.DataSetFieldExpEvaluator  -DtargetTests=**.DataSetFieldExpEvaluatorTest  -DoutputFormats=XML"
coverage_report_path = "datagear-analysis/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "datagear-analysis/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 55.0
original_coverage = 64.0
mutation_kill_rate = 33.0
original_mutation_kill_rate = 49.0
covered_lines = [ 142, 150, 152, 156, 157, 191, 193, 194, 278, 279, 280, 282, 285, 289, 291, 294, 296, 297, 299, 301, 302, 305, 307, 331, 333, 335, 337, 338, 340, 341, 343, 344, 346, 351, 381, 389, 403, 405, 407, 412, 415, 416, 418, 419, 434, 437, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 461, 464, 466, 468, 470, 492, 493, 495, 498, 545, 546, 551, 557, 563, 564,]
missed_lines = [ 161, 166, 167, 171, 176, 177, 196, 198, 200, 202, 219, 221, 222, 224, 226, 228, 230, 246, 248, 249, 251, 253, 255, 257, 283, 309, 311, 313, 315, 356, 358, 360, 363, 369, 371, 373, 376, 391, 393, 395, 397, 413, 435, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 462, 496, 570, 576,]

[input_info]
test_file_path = "datagear-analysis/src/test/java/org/datagear/analysis/support/DataSetFieldExpEvaluatorTest.java"
focal_file_path = "datagear-analysis/src/main/java/org/datagear/analysis/support/DataSetFieldExpEvaluator.java"
test_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-analysis/src/test/java/org/datagear/analysis/support/DataSetFieldExpEvaluatorTest.java"
focal_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-analysis/src/main/java/org/datagear/analysis/support/DataSetFieldExpEvaluator.java"
first_commit_date = "2024-06-07"
last_commit_date = "2024-06-11"
test_file_content = "/*\n * Copyright 2018-present datagear.tech\n *\n * This file is part of DataGear.\n *\n * DataGear is free software: you can redistribute it and/or modify it under the terms of\n * the GNU Lesser General Public License as published by the Free Software Foundation,\n * either version 3 of the License, or (at your option) any later version.\n *\n * DataGear is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with DataGear.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n\npackage org.datagear.analysis.support;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.datagear.analysis.DataSetField;\nimport org.datagear.analysis.support.DataSetFieldExpEvaluator.ValueSetter;\nimport org.junit.Test;\n\n/**\n * {@linkplain DataSetFieldExpEvaluator}单元测试类。\n * \n * @author datagear@163.com\n *\n */\npublic class DataSetFieldExpEvaluatorTest\n{\n\tprivate DataSetFieldExpEvaluator evaluator = new DataSetFieldExpEvaluator();\n\n\t@Test\n\tpublic void evalTest() throws Throwable\n\t{\n\t\tMap<String, Object> data = new HashMap<String, Object>();\n\t\tdata.put(\"width\", 3);\n\t\tdata.put(\"height\", 6);\n\t\tdata.put(\"bean\", new ExpBean());\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"size\", 6);\n\t\tmap.put(\"age\", 12);\n\t\tmap.put(\"weight\", 5);\n\t\tdata.put(\"map\", map);\n\t\tdata.put(\"list\", Arrays.asList(1,3,5));\n\t\tdata.put(\"BigInteger\", BigInteger.valueOf(1000L));\n\t\tdata.put(\"BigDecimal\", BigDecimal.valueOf(1.2D));\n\t\tdata.put(\"string\", \"abc\");\n\t\tdata.put(\"中文关键字\", 6);\n\t\tdata.put(\"special']name\", 6);\n\t\tdata.put(\"special\\\"]name\", 6);\n\n\t\t// 基本数值运算，简单Map访问方式\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"(width * height)/2 + map.size + bean.d + list[1] + 5%2\",\n\t\t\t\t\tdata);\n\t\t\tassertEquals(21, result.intValue());\n\t\t}\n\t\t\n\t\t// 基本数值运算，标准Map访问方式\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator\n\t\t\t\t\t.eval(\"(['width'] * height)/2 + map[\\\"size\\\"] + bean.d + list[1] + 5%2\",\n\t\t\t\t\tdata);\n\t\t\tassertEquals(21, result.intValue());\n\t\t}\n\n\t\t//三元运算\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"width > height ? width + map.size : height + map.size\", data);\n\t\t\tassertEquals(12, result.intValue());\n\t\t}\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"width == null ?  0 : width\", data);\n\t\t\tassertEquals(3, result.intValue());\n\t\t}\n\n\t\t// BigInteger、BigDecimal\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"(BigInteger * BigDecimal)/2 + width - 1\", data);\n\t\t\tassertEquals(602, result.intValue());\n\t\t}\n\n\t\t// 混合\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\n\t\t\t\t\t\"(width * height)/2 + map.size + bean.d + list[1] + (width > height ? width + map.size : height + map.size) - 1\",\n\t\t\t\t\tdata);\n\t\t\tassertEquals(31, result.intValue());\n\t\t}\n\n\t\t// 字符串合并\n\t\t{\n\t\t\tString result = (String) this.evaluator.eval(\"string + '-suffix'\", data);\n\t\t\tassertEquals(\"abc-suffix\", result);\n\t\t}\n\n\t\t// 特殊字符\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"(['中文关键字'] + 2) * 3\", data);\n\t\t\tassertEquals(24, result.intValue());\n\t\t}\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"([\\\"special']name\\\"] + 2) * 3\", data);\n\t\t\tassertEquals(24, result.intValue());\n\t\t}\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"(['special\\\"]name'] + 2) * 3\", data);\n\t\t\tassertEquals(24, result.intValue());\n\t\t}\n\n\t\t// 字面值\n\t\t{\n\t\t\tString result = (String) this.evaluator.eval(\"'abc'\", data);\n\t\t\tassertEquals(\"abc\", result);\n\t\t}\n\t\t{\n\t\t\tString result = (String) this.evaluator.eval(\"\\\"abc\\\"\", data);\n\t\t\tassertEquals(\"abc\", result);\n\t\t}\n\t\t{\n\t\t\tInteger result = (Integer) this.evaluator.eval(\"3\", data);\n\t\t\tassertEquals(3, result.intValue());\n\t\t}\n\t\t{\n\t\t\tNumber result = (Number) this.evaluator.eval(\"3.25\", data);\n\t\t\tassertEquals(3.25d, result.doubleValue(), 0.001d);\n\t\t}\n\t\t{\n\t\t\tBoolean result = (Boolean) this.evaluator.eval(\"true\", data);\n\t\t\tassertTrue(result.booleanValue());\n\t\t}\n\t\t{\n\t\t\tBoolean result = (Boolean) this.evaluator.eval(\"false\", data);\n\t\t\tassertFalse(result.booleanValue());\n\t\t}\n\t\t{\n\t\t\tObject result = this.evaluator.eval(\"null\", data);\n\t\t\tassertNull(result);\n\t\t}\n\t}\n\n\t\n\t\n\n\n\t@Test\n\tpublic void evalTest_List_DataSetField()\n\t{\n\t\tList<Map<String, Object>> datas = new ArrayList<Map<String, Object>>();\n\n\t\tMap<String, Object> data = new HashMap<String, Object>();\n\t\tdata.put(\"v0\", 2);\n\t\tdata.put(\"v1\", 3);\n\t\tdata.put(\"v2\", 4);\n\n\t\tCollections.addAll(datas, data);\n\n\t\tList<DataSetField> fields = new ArrayList<DataSetField>();\n\t\t{\n\t\t\tDataSetField p0 = new DataSetField(\"v0\", DataSetField.DataType.INTEGER);\n\t\t\tDataSetField p1 = new DataSetField(\"v1\", DataSetField.DataType.INTEGER);\n\t\t\tDataSetField p2 = new DataSetField(\"v2\", DataSetField.DataType.INTEGER);\n\t\t\tDataSetField p3 = new DataSetField(\"v3\", DataSetField.DataType.INTEGER);\n\n\t\t\tp1.setEvaluated(true);\n\t\t\tp1.setExpression(\"v0 + v1 + v2\");\n\n\t\t\tp2.setEvaluated(true);\n\t\t\tp2.setExpression(\"v0 + v1\");\n\n\t\t\tp3.setEvaluated(true);\n\t\t\tp3.setExpression(\"v0 + v1 + v2\");\n\n\t\t\tCollections.addAll(fields, p0, p1, p2, p3);\n\t\t}\n\n\t\tthis.evaluator.eval(fields, datas, new ValueSetter<Map<String, Object>>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void set(DataSetField field, int fieldIndex, Map<String, Object> data, Object value)\n\t\t\t{\n\t\t\t\tdata.put(field.getName(), value);\n\t\t\t}\n\t\t});\n\n\t\tassertEquals(2, ((Number) data.get(\"v0\")).intValue());\n\t\tassertEquals(9, ((Number) data.get(\"v1\")).intValue());\n\t\tassertEquals(11, ((Number) data.get(\"v2\")).intValue());\n\t\tassertEquals(22, ((Number) data.get(\"v3\")).intValue());\n\t}\n\n\n\tprotected static class ExpBean\n\t{\n\t\tprivate int d = 2;\n\t\tprivate int m = 3;\n\n\t\tpublic ExpBean()\n\t\t{\n\t\t\tsuper();\n\t\t}\n\n\t\tpublic int getD()\n\t\t{\n\t\t\treturn d;\n\t\t}\n\n\t\tpublic void setD(int d)\n\t\t{\n\t\t\tthis.d = d;\n\t\t}\n\n\t\tpublic int getM()\n\t\t{\n\t\t\treturn m;\n\t\t}\n\n\t\tpublic void setM(int m)\n\t\t{\n\t\t\tthis.m = m;\n\t\t}\n\t}\n}\n"
