[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.1"

[repo_info]
repository = "numaproj/numaflow"
sha = "4a25fe0cf8500638f1ae7efb8aad5547619744eb"

[run_info]
docker_image = "golang:1.24.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/window/strategy/session/session.go pkg/window/strategy/session/session_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/window/strategy/session/session.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 45.71
original_coverage = 89.0
mutation_kill_rate = 52.94
original_mutation_kill_rate = 71.0
covered_lines = [ 60, 61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 290, 291, 292, 293, 294, 315, 316, 317, 318, 319, 320, 321, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 342, 349, 350, 363, 364, 365, 391, 392, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 422, 426,]
missed_lines = [ 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 99, 102, 106, 107, 108, 109, 111, 112, 113, 164, 165, 166, 169, 170, 171, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 231, 232, 233, 234, 283, 284, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 313, 314, 343, 344, 345, 346, 347, 354, 355, 356, 357, 358, 359, 360, 369, 370, 371, 372, 374, 375, 376, 377, 378, 381, 393, 394, 395, 415, 416, 417, 418, 419,]

[input_info]
test_file_path = "pkg/window/strategy/session/session_test.go"
focal_file_path = "pkg/window/strategy/session/session.go"
test_file_url = "https://github.com/numaproj/numaflow/blob/4a25fe0cf8500638f1ae7efb8aad5547619744eb/pkg/window/strategy/session/session_test.go"
focal_file_url = "https://github.com/numaproj/numaflow/blob/4a25fe0cf8500638f1ae7efb8aad5547619744eb/pkg/window/strategy/session/session.go"
first_commit_date = "2023-12-19"
last_commit_date = "2025-03-21"
test_file_content = "/*\nCopyright 2022 The Numaproj Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\thttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\npackage session\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\tdfv1 \"github.com/numaproj/numaflow/pkg/apis/numaflow/v1alpha1\"\n\t\"github.com/numaproj/numaflow/pkg/isb\"\n\t\"github.com/numaproj/numaflow/pkg/window\"\n)\n\nvar keyedVertex = &dfv1.VertexInstance{\n\tVertex: &dfv1.Vertex{Spec: dfv1.VertexSpec{\n\t\tPipelineName: \"test-pl\",\n\t\tAbstractVertex: dfv1.AbstractVertex{\n\t\t\tName: \"testVertex\",\n\t\t\tUDF:  &dfv1.UDF{GroupBy: &dfv1.GroupBy{Keyed: true}},\n\t\t},\n\t}},\n\tHostname: \"test-host\",\n\tReplica:  0,\n}\n\n\n\n\nfunc TestSession_CloseWindowsWithoutMerge(t *testing.T) {\n\tbaseTime := time.UnixMilli(60000)\n\n\twin1 := &sessionWindow{\n\t\tstartTime: baseTime,\n\t\tendTime:   baseTime.Add(10 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tkeys:      []string{\"key-1\"},\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.UnixMilli(), baseTime.Add(10*time.Second).UnixMilli(), \"slot-0\", \"key-1\"),\n\t}\n\twin2 := &sessionWindow{\n\t\tstartTime: baseTime.Add(30 * time.Second),\n\t\tendTime:   baseTime.Add(59 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tkeys:      []string{\"key-1\"},\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.Add(30*time.Second).UnixMilli(), baseTime.Add(59*time.Second).UnixMilli(), \"slot-0\", \"key-1\"),\n\t}\n\twin3 := &sessionWindow{\n\t\tstartTime: baseTime.Add(60 * time.Second),\n\t\tendTime:   baseTime.Add(90 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tkeys:      []string{\"key-1\"},\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.Add(60*time.Second).UnixMilli(), baseTime.Add(90*time.Second).UnixMilli(), \"slot-0\", \"key-1\"),\n\t}\n\n\twindower := NewWindower(10*time.Second, keyedVertex)\n\n\twindower.InsertWindow(win1)\n\twindower.InsertWindow(win2)\n\twindower.InsertWindow(win3)\n\n\t// close the window with end time less than baseTime + 120 seconds\n\twindowRequests := windower.CloseWindows(baseTime.Add(60 * time.Second))\n\n\tassert.Equal(t, 2, len(windowRequests))\n\n\tassert.Equal(t, window.Close, windowRequests[0].Operation)\n\tassert.Equal(t, baseTime.Add(30*time.Second), windowRequests[0].Windows[0].StartTime())\n\tassert.Equal(t, baseTime.Add(59*time.Second), windowRequests[0].Windows[0].EndTime())\n\n\tassert.Equal(t, window.Close, windowRequests[1].Operation)\n\tassert.Equal(t, baseTime, windowRequests[1].Windows[0].StartTime())\n\tassert.Equal(t, baseTime.Add(10*time.Second), windowRequests[1].Windows[0].EndTime())\n\n\twindowRequests = windower.CloseWindows(baseTime.Add(120 * time.Second))\n\tassert.Equal(t, 1, len(windowRequests))\n\n\tassert.Equal(t, window.Close, windowRequests[0].Operation)\n\tassert.Equal(t, baseTime.Add(60*time.Second), windowRequests[0].Windows[0].StartTime())\n\tassert.Equal(t, baseTime.Add(90*time.Second), windowRequests[0].Windows[0].EndTime())\n}\n\n\n\nfunc TestSession_DeleteWindows(t *testing.T) {\n\tbaseTime := time.UnixMilli(60000)\n\n\twin1 := &sessionWindow{\n\t\tstartTime: baseTime,\n\t\tendTime:   baseTime.Add(60 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tkeys:      []string{\"key-1\"},\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.UnixMilli(), baseTime.Add(60*time.Second).UnixMilli(), \"slot-0\", \"key-1\"),\n\t}\n\twin2 := &sessionWindow{\n\t\tstartTime: baseTime.Add(60 * time.Second),\n\t\tendTime:   baseTime.Add(120 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tkeys:      []string{\"key-1\"},\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.Add(60*time.Second).UnixMilli(), baseTime.Add(120*time.Second).UnixMilli(), \"slot-0\", \"key-1\"),\n\t}\n\twin3 := &sessionWindow{\n\t\tstartTime: baseTime.Add(60 * time.Second),\n\t\tendTime:   baseTime.Add(120 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tkeys:      []string{\"key-2\"},\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.Add(60*time.Second).UnixMilli(), baseTime.Add(120*time.Second).UnixMilli(), \"slot-0\", \"key-2\"),\n\t}\n\twin4 := &sessionWindow{\n\t\tstartTime: baseTime.Add(120 * time.Second),\n\t\tendTime:   baseTime.Add(180 * time.Second),\n\t\tslot:      \"slot-0\",\n\t\tkeys:      []string{\"key-2\"},\n\t\tpartition: &window.SharedUnalignedPartition,\n\t\tid:        fmt.Sprintf(\"%d-%d-%s-%s\", baseTime.Add(120*time.Second).UnixMilli(), baseTime.Add(180*time.Second).UnixMilli(), \"slot-0\", \"key-2\"),\n\t}\n\n\twindower := &Windower{\n\t\tgap:           10 * time.Second,\n\t\tactiveWindows: make(map[string]*window.SortedWindowListByEndTime),\n\t\tclosedWindows: window.NewSortedWindowListByEndTime(),\n\t}\n\n\t// insert the windows\n\twindower.InsertWindow(win1)\n\twindower.InsertWindow(win2)\n\twindower.InsertWindow(win3)\n\twindower.InsertWindow(win4)\n\n\t// close all the windows\n\twindower.CloseWindows(baseTime.Add(180 * time.Second))\n\n\t// delete one of the windows\n\twindower.DeleteClosedWindow(window.NewUnalignedTimedWindow(\n\t\tbaseTime,\n\t\tbaseTime.Add(60*time.Second),\n\t\t\"slot-0\",\n\t\t[]string{\"key-1\"},\n\t))\n\n\t// since we deleted one of the windows, the closed windows should be 3\n\tassert.Equal(t, 3, windower.closedWindows.Len())\n\n\twindower.DeleteClosedWindow(window.NewUnalignedTimedWindow(\n\t\tbaseTime.Add(60*time.Second),\n\t\tbaseTime.Add(120*time.Second),\n\t\t\"slot-0\",\n\t\t[]string{\"key-1\"},\n\t))\n\t// since we deleted two windows, the closed windows should be 2\n\tassert.Equal(t, 2, windower.closedWindows.Len())\n}\n\n\n\nfunc buildReadMessage(time time.Time, keys []string) *isb.ReadMessage {\n\treturn &isb.ReadMessage{\n\t\tMessage: isb.Message{\n\t\t\tHeader: isb.Header{\n\t\t\t\tKeys: keys,\n\t\t\t\tMessageInfo: isb.MessageInfo{\n\t\t\t\t\tEventTime: time,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n}\n"
