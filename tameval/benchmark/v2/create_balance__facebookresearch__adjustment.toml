[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "setup.py"

[repo_info]
repository = "facebookresearch/balance"
sha = "80a89cf6f5d7de64f55f2bebe7d666e51d6f9bb9"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install . && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=balance/adjustment.py -m pytest -q --junit-xml=test_output.xml tests/test_adjustment.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target balance.adjustment --unit-test tests.test_adjustment --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target balance/adjustment.py --unit-test tests/test_adjustment.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 94.0
original_coverage = 94.0
mutation_kill_rate = 67.0
original_mutation_kill_rate = 67.0
covered_lines = [ 7, 9, 11, 13, 14, 15, 16, 18, 19, 26, 28, 31, 40, 150, 151, 152, 153, 155, 159, 162, 167, 169, 170, 171, 172, 173, 179, 181, 184, 189, 190, 192, 195, 208, 209, 210, 212, 213, 217, 218, 220, 221, 224, 277, 278, 282, 283, 284, 285, 286, 288, 290, 291, 292, 294, 300, 301, 304, 305, 306, 311, 315, 316, 318, 320, 327, 331, 333, 335, 337, 338, 339, 341, 342, 344, 345, 348, 352, 353, 355, 358, 372, 373, 375, 377,]
missed_lines = [ 174, 175, 176, 178, 185,]

[input_info]
test_file_path = "tests/test_adjustment.py"
focal_file_path = "balance/adjustment.py"
test_file_url = "https://github.com/facebookresearch/balance/blob/80a89cf6f5d7de64f55f2bebe7d666e51d6f9bb9/tests/test_adjustment.py"
focal_file_url = "https://github.com/facebookresearch/balance/blob/80a89cf6f5d7de64f55f2bebe7d666e51d6f9bb9/balance/adjustment.py"
first_commit_date = "2022-11-16"
last_commit_date = "2025-01-06"
test_file_content = "# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\n# pyre-unsafe\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\n\nimport random\n\nimport balance\n\nimport balance.testutil\n\nimport numpy as np\nimport pandas as pd\n\nfrom balance.adjustment import (\n    apply_transformations,\n    default_transformations,\n    trim_weights,\n)\nfrom balance.sample_class import Sample\nfrom balance.util import fct_lump, quantize\nfrom balance.weighting_methods import (\n    cbps as balance_cbps,\n    ipw as balance_ipw,\n    poststratify as balance_poststratify,\n)\n\nEPSILON = 0.00001\n\n\nsample = Sample.from_frame(\n    df=pd.DataFrame(\n        {\n            \"a\": (1, 2, 3, 1),\n            \"b\": (-42, 8, 2, -42),\n            \"o\": (7, 8, 9, 10),\n            \"c\": (\"x\", \"y\", \"z\", \"x\"),\n            \"id\": (1, 2, 3, 4),\n            \"w\": (0.5, 2, 1, 1),\n        }\n    ),\n    id_column=\"id\",\n    weight_column=\"w\",\n    outcome_columns=\"o\",\n)\n\ntarget = Sample.from_frame(\n    pd.DataFrame(\n        {\n            \"a\": (1, 2, 3),\n            \"b\": (-42, 8, 2),\n            \"c\": (\"x\", \"y\", \"z\"),\n            \"id\": (1, 2, 3),\n            \"w\": (2, 0.5, 1),\n        }\n    ),\n    id_column=\"id\",\n    weight_column=\"w\",\n)\n\n\nclass TestAdjustment(\n    balance.testutil.BalanceTestCase,\n):\n    def test_trim_weights(self):\n        # Test no trimming\n        # Notice how it changes the dtype of int64 to float64~\n        pd.testing.assert_series_equal(\n            trim_weights(pd.Series([0, 1, 2])), pd.Series([0.0, 1.0, 2.0])\n        )\n        self.assertEqual(type(trim_weights(pd.Series([0, 1, 2]))), pd.Series)\n        self.assertEqual(trim_weights(pd.Series([0, 1, 2])).dtype, np.float64)\n\n        random.seed(42)\n        w = np.random.uniform(0, 1, 10000)\n        self.assertEqual(\n            trim_weights(\n                w,\n                weight_trimming_percentile=None,\n                weight_trimming_mean_ratio=None,\n                keep_sum_of_weights=False,\n            ),\n            w,\n        )\n\n        # Test exceptions\n        with self.assertRaisesRegex(\n            TypeError, \"weights must be np.array or pd.Series, are of type*\"\n        ):\n            trim_weights(\"Strings don't get trimmed\", weight_trimming_mean_ratio=1)\n        with self.assertRaisesRegex(ValueError, \"Only one\"):\n            trim_weights(\n                np.array([0, 1, 2]),\n                1,\n                1,\n            )\n\n        # Test weight_trimming_mean_ratio\n        random.seed(42)\n        w = np.random.uniform(0, 1, 10000)\n        res = trim_weights(w, weight_trimming_mean_ratio=1)\n        self.assertAlmostEqual(np.mean(w), np.mean(res), delta=EPSILON)\n        self.assertAlmostEqual(\n            np.mean(w) / np.min(w), np.max(res) / np.min(res), delta=EPSILON\n        )\n\n        # Test weight_trimming_percentile\n        random.seed(42)\n        w = np.random.uniform(0, 1, 10000)\n        self.assertTrue(\n            max(\n                trim_weights(\n                    w, weight_trimming_percentile=(0, 0.11), keep_sum_of_weights=False\n                )\n            )\n            < 0.9\n        )\n        self.assertTrue(\n            min(\n                trim_weights(\n                    w, weight_trimming_percentile=(0.11, 0), keep_sum_of_weights=False\n                )\n            )\n            > 0.1\n        )\n        e = trim_weights(w, weight_trimming_percentile=(0.11, 0.11))\n        self.assertTrue(min(e) > 0.1)\n        self.assertTrue(max(e) < 0.9)\n\n    def test_default_transformations(self):\n        # For multiple dataframes\n        input = (\n            pd.DataFrame({\"a\": (1, 2), \"b\": (\"a\", \"b\")}),\n            pd.DataFrame({\"c\": (1, 2), \"d\": (\"a\", \"b\")}),\n        )\n        r = default_transformations(input)\n        self.assertEqual(\n            r,\n            {\n                \"a\": quantize,\n                \"b\": fct_lump,\n                \"c\": quantize,\n                \"d\": fct_lump,\n            },\n        )\n\n        # For one dataframe\n        input = pd.DataFrame({\"a\": (1, 2), \"b\": (\"a\", \"b\")})\n        r = default_transformations([input])\n        self.assertEqual(\n            r,\n            {\n                \"a\": quantize,\n                \"b\": fct_lump,\n            },\n        )\n\n        # For boolean and Int64 input\n        input = pd.DataFrame({\"a\": (1, 2), \"b\": (True, False)})\n        input = input.astype(\n            dtype={\n                \"a\": \"Int64\",\n                \"b\": \"boolean\",\n            }\n        )\n        r = default_transformations([input])\n        self.assertEqual(\n            r,\n            {\n                \"a\": quantize,\n                \"b\": fct_lump,\n            },\n        )\n\n    def test_default_transformations_pd_int64(self):\n        nullable_int = pd.DataFrame({\"a\": pd.array((1, 2), dtype=\"Int64\")})\n\n        numpy_int = nullable_int.astype(np.int64)\n\n        test = default_transformations([nullable_int])\n        truth = default_transformations([numpy_int])\n\n        self.assertEqual(test, truth)\n\n    def test_apply_transformations(self):\n        s = pd.DataFrame({\"d\": [1, 2, 3], \"e\": [1, 2, 3]})\n        t = pd.DataFrame({\"d\": [4, 5, 6, 7], \"e\": [1, 2, 3, 4]})\n\n        transformations = {\"d\": lambda x: x * 2, \"f\": lambda x: x.d + 1}\n        r = apply_transformations((s, t), transformations)\n\n        e = (\n            pd.DataFrame({\"d\": [2, 4, 6], \"f\": [2, 3, 4]}),\n            pd.DataFrame({\"d\": [8, 10, 12, 14], \"f\": [5, 6, 7, 8]}),\n        )\n\n        self.assertEqual(r[0], e[0], lazy=True)\n        self.assertEqual(r[1], e[1], lazy=True)\n\n        # No transformations or additions\n        self.assertEqual(apply_transformations((s, t), None), (s, t))\n\n        # Only transformations\n        r = apply_transformations((s, t), {\"d\": lambda x: x * 2})\n        e = (pd.DataFrame({\"d\": [2, 4, 6]}), pd.DataFrame({\"d\": [8, 10, 12, 14]}))\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Only additions\n        r = apply_transformations((s, t), {\"f\": lambda x: x.d + 1})\n        e = (pd.DataFrame({\"f\": [2, 3, 4]}), pd.DataFrame({\"f\": [5, 6, 7, 8]}))\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Warns about dropping variable\n        self.assertWarnsRegexp(\n            r\"Dropping the variables: \\['e'\\]\",\n            apply_transformations,\n            (s, t),\n            transformations,\n        )\n\n        # Does not drop\n        r = apply_transformations((s, t), transformations, drop=False)\n        e = (\n            pd.DataFrame({\"d\": [2, 4, 6], \"e\": [1, 2, 3], \"f\": [2, 3, 4]}),\n            pd.DataFrame({\"d\": [8, 10, 12, 14], \"e\": [1, 2, 3, 4], \"f\": [5, 6, 7, 8]}),\n        )\n        self.assertEqual(r[0], e[0], lazy=True)\n        self.assertEqual(r[1], e[1], lazy=True)\n\n        # Works on three dfs\n        q = pd.DataFrame({\"d\": [8, 9], \"g\": [1, 2]})\n        r = apply_transformations((s, t, q), transformations)\n        e = (\n            pd.DataFrame({\"d\": [2, 4, 6], \"f\": [2, 3, 4]}),\n            pd.DataFrame({\"d\": [8, 10, 12, 14], \"f\": [5, 6, 7, 8]}),\n            pd.DataFrame({\"d\": [16, 18], \"f\": [9, 10]}),\n        )\n        self.assertEqual(r[0], e[0], lazy=True)\n        self.assertEqual(r[1], e[1], lazy=True)\n        self.assertEqual(r[2], e[2], lazy=True)\n\n        # Test that functions are computed over all dfs passed, not each individually\n        transformations = {\"d\": lambda x: x / max(x)}\n        r = apply_transformations((s, t), transformations)\n        e = (\n            pd.DataFrame({\"d\": [2 / 14, 4 / 14, 6 / 14]}),\n            pd.DataFrame({\"d\": [8 / 14, 10 / 14, 12 / 14, 14 / 14]}),\n        )\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Transformation of a column which does not exist in one of the dataframes\n        s = pd.DataFrame({\"d\": [1, 2, 3], \"e\": [1, 2, 3]})\n        t = pd.DataFrame({\"d\": [4, 5, 6, 7]})\n        transformations = {\"e\": lambda x: x * 2}\n        r = apply_transformations((s, t), transformations)\n        e = (\n            pd.DataFrame({\"e\": [2.0, 4.0, 6.0]}),\n            pd.DataFrame({\"e\": [np.nan, np.nan, np.nan, np.nan]}),\n        )\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Additon of a column based on one which does not exist in one of the dataframes\n        transformations = {\"f\": lambda x: x.e * 2}\n        r = apply_transformations((s, t), transformations)\n        e = (\n            pd.DataFrame({\"f\": [2.0, 4.0, 6.0]}),\n            pd.DataFrame({\"f\": [np.nan, np.nan, np.nan, np.nan]}),\n        )\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Column which does not exist in one of the dataframes\n        # and is also specified\n        s = pd.DataFrame({\"d\": [1, 2, 3], \"e\": [0, 0, 0]})\n        t = pd.DataFrame({\"d\": [4, 5, 6, 7]})\n        transformations = {\"e\": lambda x: x + 1}\n        r = apply_transformations((s, t), transformations)\n        e = (\n            pd.DataFrame({\"e\": [1.0, 1.0, 1.0]}),\n            pd.DataFrame({\"e\": [np.nan, np.nan, np.nan, np.nan]}),\n        )\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Test that indices are ignored in splitting dfs\n        s = pd.DataFrame({\"d\": [1, 2, 3]}, index=(5, 6, 7))\n        t = pd.DataFrame({\"d\": [4, 5, 6, 7]}, index=(0, 1, 2, 3))\n        transformations = {\"d\": lambda x: x}\n        r = apply_transformations((s, t), transformations)\n        e = (s, t)\n        self.assertEqual(r[0], e[0])\n        self.assertEqual(r[1], e[1])\n\n        # Test indices are handeled okay (this example reuired reset_index of all_data)\n        s = pd.DataFrame({\"a\": (0, 0, 0, 0, 0, 0, 0, 0)})\n        t = pd.DataFrame({\"a\": (1, 1, 1, 1)})\n        r = apply_transformations((s, t), \"default\")\n        e = (\n            pd.DataFrame({\"a\": [\"(-0.001, 0.7]\"] * 8}),\n            pd.DataFrame({\"a\": [\"(0.7, 1.0]\"] * 4}),\n        )\n        self.assertEqual(r[0].astype(str), e[0])\n        self.assertEqual(r[1].astype(str), e[1])\n\n        #  Test default transformations\n        s = pd.DataFrame({\"d\": range(0, 100), \"e\": [\"a\"] * 96 + [\"b\"] * 4})\n        t = pd.DataFrame({\"d\": range(0, 100), \"e\": [\"a\"] * 96 + [\"b\"] * 4})\n        r_s, r_t = apply_transformations((s, t), \"default\")\n\n        self.assertEqual(r_s[\"d\"].drop_duplicates().values.shape[0], 10)\n        self.assertEqual(r_t[\"d\"].drop_duplicates().values.shape[0], 10)\n\n        self.assertEqual(r_s[\"e\"].drop_duplicates().values, (\"a\", \"_lumped_other\"))\n        self.assertEqual(r_t[\"e\"].drop_duplicates().values, (\"a\", \"_lumped_other\"))\n\n    def test_invalid_input_to_apply_transformations(self):\n        # Test non-existent transformation\n        self.assertRaisesRegex(\n            NotImplementedError,\n            \"Unknown transformations\",\n            apply_transformations,\n            (sample.df,),\n            \"foobar\",\n        )\n\n        # Test non-dataframe input\n        self.assertRaisesRegex(\n            AssertionError,\n            \"'dfs' must contain DataFrames\",\n            apply_transformations,\n            (sample,),\n            \"foobar\",\n        )\n\n        # Test non-tuple input\n        self.assertRaisesRegex(\n            AssertionError,\n            \"'dfs' argument must be a tuple of DataFrames\",\n            apply_transformations,\n            sample.df,\n            \"foobar\",\n        )\n\n    def test__find_adjustment_method(self):\n        self.assertTrue(\n            balance.adjustment._find_adjustment_method(\"ipw\") is balance_ipw.ipw\n        )\n        self.assertTrue(\n            balance.adjustment._find_adjustment_method(\"cbps\") is balance_cbps.cbps\n        )\n        self.assertTrue(\n            balance.adjustment._find_adjustment_method(\"poststratify\")\n            is balance_poststratify.poststratify\n        )\n        with self.assertRaisesRegex(ValueError, \"Unknown adjustment method*\"):\n            balance.adjustment._find_adjustment_method(\"some_other_value\")\n"
