[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "zix99/rare"
sha = "dbf03dd64fed323c2e7b3b36d97210f929fb64fa"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/multiterm/termscaler/scale.go pkg/multiterm/termscaler/scale_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/multiterm/termscaler/scale.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 70.0
original_coverage = 100.0
mutation_kill_rate = 60.0
original_mutation_kill_rate = 81.0
covered_lines = [ 21, 34, 35, 36, 37, 38, 40, 44, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 70, 71, 72, 75, 76, 77, 80, 81, 82, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 104, 105, 106,]
missed_lines = [ 17, 18, 22, 25, 26, 27, 28, 29, 31, 45, 46, 47, 63, 64, 65, 107, 108, 109, 110, 112,]

[input_info]
test_file_path = "pkg/multiterm/termscaler/scale_test.go"
focal_file_path = "pkg/multiterm/termscaler/scale.go"
test_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/multiterm/termscaler/scale_test.go"
focal_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/multiterm/termscaler/scale.go"
first_commit_date = "2023-07-16"
last_commit_date = "2025-01-19"
test_file_content = "package termscaler\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\n// More realistic use-case\nfunc TestLogScale2(t *testing.T) {\n\ts := ScalerLog10\n\n\tassert.Equal(t, 0, s.Bucket(16, -100, 0, 10000))\n\tassert.Equal(t, 0, s.Bucket(16, 0, 0, 10000))\n\tassert.Equal(t, 1, s.Bucket(16, 2, 0, 10000))\n\tassert.Equal(t, 1, s.Bucket(16, 3, 0, 10000))\n\tassert.Equal(t, 1, s.Bucket(16, 2, 0, 10000))\n\tassert.Equal(t, 2, s.Bucket(16, 5, 0, 10000))\n\tassert.Equal(t, 3, s.Bucket(16, 7, 0, 10000))\n\tassert.Equal(t, 14, s.Bucket(16, 9999, 0, 10000))\n\tassert.Equal(t, 15, s.Bucket(16, 10000, 0, 10000))\n\tassert.Equal(t, []int64{1, 3, 6, 11, 21, 39, 73, 135, 251, 464, 857, 1584, 2928, 5411, 10000}, s.ScaleKeys(16, 0, 10000))\n}\n\nfunc TestLengthVal(t *testing.T) {\n\ts, _ := ScalerByName(\"linear\")\n\tassert.Equal(t, 0, s.LengthVal(5, -5, 0, 10))\n\tassert.Equal(t, 0, s.LengthVal(5, 0, 0, 10))\n\tassert.Equal(t, 2, s.LengthVal(5, 5, 0, 10))\n\tassert.Equal(t, 5, s.LengthVal(5, 10, 0, 10))\n\tassert.Equal(t, 5, s.LengthVal(5, 20, 0, 10))\n\tassert.Equal(t, 1, s.LengthVal(5, 120, 100, 200))\n\tassert.Equal(t, 3, s.LengthVal(5, 175, 100, 200))\n\n\t// Edge cases\n\tassert.Equal(t, 0, s.LengthVal(5, 20, 20, 10))\n\tassert.Equal(t, 5, s.LengthVal(5, 20, 10, 10))\n\tassert.Equal(t, 0, s.LengthVal(5, -100, 0, -10))\n}\n\n\n"
