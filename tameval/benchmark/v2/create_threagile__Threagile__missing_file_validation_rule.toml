[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "Threagile/threagile"
sha = "9c1d403638a1f7d83faa4c528531c6c5025885c8"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/risks/builtin/missing_file_validation_rule.go pkg/risks/builtin/missing_file_validation_rule_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/risks/builtin/missing_file_validation_rule.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = 71.0
original_mutation_kill_rate = 71.0
covered_lines = [ 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 55, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,]
missed_lines = [ 38, 39, 40,]

[input_info]
test_file_path = "pkg/risks/builtin/missing_file_validation_rule_test.go"
focal_file_path = "pkg/risks/builtin/missing_file_validation_rule.go"
test_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/missing_file_validation_rule_test.go"
focal_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/missing_file_validation_rule.go"
first_commit_date = "2024-06-07"
last_commit_date = "2025-07-22"
test_file_content = "package builtin\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/threagile/threagile/pkg/types\"\n)\n\nfunc TestMissingFileValidationRuleGenerateRisksEmptyModelNoRisksCreated(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksOutOfScopeNoRisksCreated(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: true,\n\t\t\t\tOutOfScope:           true,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksNotCustomlyDevelopedTechnicalAssetNoRisksCreated(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: false,\n\t\t\t\tOutOfScope:           false,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksNoFileAcceptedAssetNoRisksCreated(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: true,\n\t\t\t\tOutOfScope:           false,\n\t\t\t\tDataFormatsAccepted:  []types.DataFormat{types.CSV, types.Serialization, types.XML},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksFileDataFormatsAcceptedRisksCreated(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: true,\n\t\t\t\tOutOfScope:           false,\n\t\t\t\tDataFormatsAccepted:  []types.DataFormat{types.File},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Len(t, risks, 1)\n\tassert.Equal(t, types.LowImpact, risks[0].ExploitationImpact)\n\tassert.Equal(t, \"<b>Missing File Validation</b> risk at <b>Test Technical Asset</b>\", risks[0].Title)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksProcessStrictlyConfidentialDataRisksCreatedWithMediumImpact(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: true,\n\t\t\t\tOutOfScope:           false,\n\t\t\t\tDataFormatsAccepted:  []types.DataFormat{types.File},\n\t\t\t\tDataAssetsProcessed:  []string{\"da1\"},\n\t\t\t},\n\t\t},\n\t\tDataAssets: map[string]*types.DataAsset{\n\t\t\t\"da1\": {\n\t\t\t\tTitle:           \"Test Data Asset\",\n\t\t\t\tConfidentiality: types.StrictlyConfidential,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Len(t, risks, 1)\n\tassert.Equal(t, types.MediumImpact, risks[0].ExploitationImpact)\n\tassert.Equal(t, \"<b>Missing File Validation</b> risk at <b>Test Technical Asset</b>\", risks[0].Title)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksProcessMissionCriticalIntegrityDataRisksCreatedWithMediumImpact(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: true,\n\t\t\t\tOutOfScope:           false,\n\t\t\t\tDataFormatsAccepted:  []types.DataFormat{types.File},\n\t\t\t\tDataAssetsProcessed:  []string{\"da1\"},\n\t\t\t},\n\t\t},\n\t\tDataAssets: map[string]*types.DataAsset{\n\t\t\t\"da1\": {\n\t\t\t\tTitle:     \"Test Data Asset\",\n\t\t\t\tIntegrity: types.MissionCritical,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Len(t, risks, 1)\n\tassert.Equal(t, types.MediumImpact, risks[0].ExploitationImpact)\n\tassert.Equal(t, \"<b>Missing File Validation</b> risk at <b>Test Technical Asset</b>\", risks[0].Title)\n}\n\nfunc TestMissingFileValidationRuleGenerateRisksProcessMissionCriticalAvailabilityDataRisksCreatedWithMediumImpact(t *testing.T) {\n\trule := NewMissingFileValidationRule()\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"ta1\": {\n\t\t\t\tTitle:                \"Test Technical Asset\",\n\t\t\t\tCustomDevelopedParts: true,\n\t\t\t\tOutOfScope:           false,\n\t\t\t\tDataFormatsAccepted:  []types.DataFormat{types.File},\n\t\t\t\tDataAssetsProcessed:  []string{\"da1\"},\n\t\t\t},\n\t\t},\n\t\tDataAssets: map[string]*types.DataAsset{\n\t\t\t\"da1\": {\n\t\t\t\tTitle:        \"Test Data Asset\",\n\t\t\t\tAvailability: types.MissionCritical,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.Len(t, risks, 1)\n\tassert.Equal(t, types.MediumImpact, risks[0].ExploitationImpact)\n\tassert.Equal(t, \"<b>Missing File Validation</b> risk at <b>Test Technical Asset</b>\", risks[0].Title)\n}\n"
