[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.22"

[repo_info]
repository = "milvus-io/milvus"
sha = "16efcda5c46748062abcfe563f70e1e2e53d0da1"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/kv/mock_snapshot_kv.go internal/kv/mock_snapshot_kv_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/kv/mock_snapshot_kv.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 91.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/kv/mock_snapshot_kv_test.go"
focal_file_path = "internal/kv/mock_snapshot_kv.go"
test_file_url = "https://github.com/milvus-io/milvus/blob/16efcda5c46748062abcfe563f70e1e2e53d0da1/internal/kv/mock_snapshot_kv_test.go"
focal_file_url = "https://github.com/milvus-io/milvus/blob/16efcda5c46748062abcfe563f70e1e2e53d0da1/internal/kv/mock_snapshot_kv.go"
first_commit_date = "2022-08-10"
last_commit_date = "2025-02-22"
test_file_content = "package kv\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/milvus-io/milvus/pkg/util/typeutil\"\n)\n\nfunc Test_mockSnapshotKV_Save(t *testing.T) {\n\tt.Run(\"func not set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\terr := snapshot.Save(context.TODO(), \"k\", \"v\", 0)\n\t\tassert.NoError(t, err)\n\t})\n\tt.Run(\"func set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\tsnapshot.SaveFunc = func(ctx context.Context, key string, value string, ts typeutil.Timestamp) error {\n\t\t\treturn nil\n\t\t}\n\t\terr := snapshot.Save(context.TODO(), \"k\", \"v\", 0)\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc Test_mockSnapshotKV_Load(t *testing.T) {\n\tt.Run(\"func not set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\t_, err := snapshot.Load(context.TODO(), \"k\", 0)\n\t\tassert.NoError(t, err)\n\t})\n\tt.Run(\"func set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\tsnapshot.LoadFunc = func(ctx context.Context, key string, ts typeutil.Timestamp) (string, error) {\n\t\t\treturn \"\", nil\n\t\t}\n\t\t_, err := snapshot.Load(context.TODO(), \"k\", 0)\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc Test_mockSnapshotKV_MultiSave(t *testing.T) {\n\tt.Run(\"func not set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\terr := snapshot.MultiSave(context.TODO(), nil, 0)\n\t\tassert.NoError(t, err)\n\t})\n\tt.Run(\"func set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\tsnapshot.MultiSaveFunc = func(ctx context.Context, kvs map[string]string, ts typeutil.Timestamp) error {\n\t\t\treturn nil\n\t\t}\n\t\terr := snapshot.MultiSave(context.TODO(), nil, 0)\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc Test_mockSnapshotKV_LoadWithPrefix(t *testing.T) {\n\tt.Run(\"func not set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\t_, _, err := snapshot.LoadWithPrefix(context.TODO(), \"prefix\", 0)\n\t\tassert.NoError(t, err)\n\t})\n\tt.Run(\"func set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\tsnapshot.LoadWithPrefixFunc = func(ctx context.Context, key string, ts typeutil.Timestamp) ([]string, []string, error) {\n\t\t\treturn nil, nil, nil\n\t\t}\n\t\t_, _, err := snapshot.LoadWithPrefix(context.TODO(), \"prefix\", 0)\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc Test_mockSnapshotKV_MultiSaveAndRemoveWithPrefix(t *testing.T) {\n\tt.Run(\"func not set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\terr := snapshot.MultiSaveAndRemoveWithPrefix(context.TODO(), nil, nil, 0)\n\t\tassert.NoError(t, err)\n\t})\n\tt.Run(\"func set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\tsnapshot.MultiSaveAndRemoveWithPrefixFunc = func(ctx context.Context, saves map[string]string, removals []string, ts typeutil.Timestamp) error {\n\t\t\treturn nil\n\t\t}\n\t\terr := snapshot.MultiSaveAndRemoveWithPrefix(context.TODO(), nil, nil, 0)\n\t\tassert.NoError(t, err)\n\t})\n}\n\nfunc Test_mockSnapshotKV_MultiSaveAndRemove(t *testing.T) {\n\tt.Run(\"func not set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\terr := snapshot.MultiSaveAndRemove(context.TODO(), nil, nil, 0)\n\t\tassert.NoError(t, err)\n\t})\n\tt.Run(\"func set\", func(t *testing.T) {\n\t\tsnapshot := NewMockSnapshotKV()\n\t\tsnapshot.MultiSaveAndRemoveWithPrefixFunc = func(ctx context.Context, saves map[string]string, removals []string, ts typeutil.Timestamp) error {\n\t\t\treturn nil\n\t\t}\n\t\terr := snapshot.MultiSaveAndRemove(context.TODO(), nil, nil, 0)\n\t\tassert.NoError(t, err)\n\t})\n}"
