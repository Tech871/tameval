[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/bifromq"
sha = "c07c2c0099f39282ba5fd30d6af8c2e91b03348d"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl base-util -Dtest=FutureTrackerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl base-util -DtargetClasses=**.FutureTracker  -DtargetTests=**.FutureTrackerTest  -DoutputFormats=XML"
coverage_report_path = "base-util/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "base-util/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 30, 31, 40, 41, 42, 49, 50, 51, 52, 55, 56, 60, 61,]
missed_lines = []

[input_info]
test_file_path = "base-util/src/test/java/org/apache/bifromq/base/util/FutureTrackerTest.java"
focal_file_path = "base-util/src/main/java/org/apache/bifromq/base/util/FutureTracker.java"
test_file_url = "https://github.com/apache/bifromq/blob/c07c2c0099f39282ba5fd30d6af8c2e91b03348d/base-util/src/test/java/org/apache/bifromq/base/util/FutureTrackerTest.java"
focal_file_url = "https://github.com/apache/bifromq/blob/c07c2c0099f39282ba5fd30d6af8c2e91b03348d/base-util/src/main/java/org/apache/bifromq/base/util/FutureTracker.java"
first_commit_date = "2025-06-03"
last_commit_date = "2025-06-06"
test_file_content = "\n\npackage org.apache.bifromq.base.util;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertTrue;\nimport static org.testng.Assert.fail;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Test;\n\npublic class FutureTrackerTest {\n\n    private FutureTracker tracker;\n\n    @BeforeMethod\n    public void setup() {\n        tracker = new FutureTracker();\n    }\n\n    @Test\n    public void testTrackCompletesNormally() throws Exception {\n        CompletableFuture<String> future = new CompletableFuture<>();\n        CompletableFuture<String> tracked = tracker.track(future);\n\n        future.complete(\"done\");\n\n\n        CompletableFuture<Void> allDone = tracker.whenComplete((v, e) -> {\n        });\n        allDone.get();\n    }\n\n    @Test\n    public void testTrackCompletesExceptionally() throws Exception {\n        CompletableFuture<String> future = new CompletableFuture<>();\n        CompletableFuture<String> tracked = tracker.track(future);\n\n        Exception testEx = new RuntimeException(\"test exception\");\n        future.completeExceptionally(testEx);\n\n        try {\n            tracked.get();\n            fail();\n        } catch (ExecutionException ex) {\n        }\n\n        CompletableFuture<Void> allDone = tracker.whenComplete((v, e) -> {\n        });\n        allDone.get();\n    }\n\n    @Test\n    public void testStopCancelsFutures() {\n        CompletableFuture<String> future = new CompletableFuture<>();\n        CompletableFuture<String> tracked = tracker.track(future);\n\n        tracker.stop();\n\n    }\n\n    @Test\n    public void testWhenComplete() throws Exception {\n        AtomicInteger callbackCount = new AtomicInteger(0);\n        CompletableFuture<String> future1 = CompletableFuture.completedFuture(\"one\");\n        CompletableFuture<String> future2 = CompletableFuture.completedFuture(\"two\");\n\n        tracker.track(future1);\n        tracker.track(future2);\n\n        CompletableFuture<Void> whenDone = tracker.whenComplete((v, e) -> callbackCount.incrementAndGet());\n        whenDone.get();\n\n    }\n\n    @Test\n    public void testWhenCompleteAsync() throws Exception {\n        AtomicBoolean asyncCallbackInvoked = new AtomicBoolean(false);\n        CompletableFuture<String> future1 = CompletableFuture.completedFuture(\"one\");\n        CompletableFuture<String> future2 = CompletableFuture.completedFuture(\"two\");\n\n        tracker.track(future1);\n        tracker.track(future2);\n\n        CompletableFuture<Void> whenDoneAsync =\n            tracker.whenCompleteAsync((v, e) -> asyncCallbackInvoked.set(true), Executors.newSingleThreadExecutor());\n        whenDoneAsync.get();\n    }\n}"
