[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "tensorflow/datasets"
sha = "5afdc02a1a6ce1a5ded7e2395c7a3498216936bb"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tensorflow_datasets/core/github_api/github_path.py -m pytest -q --junit-xml=test_output.xml tensorflow_datasets/core/github_api/github_path_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tensorflow_datasets.core.github_api.github_path --unit-test tensorflow_datasets.core.github_api.github_path_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tensorflow_datasets/core/github_api/github_path.py --unit-test tensorflow_datasets/core/github_api/github_path_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 46.0
original_coverage = 94.0
mutation_kill_rate = 0
original_mutation_kill_rate = 100.0
covered_lines = [ 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 31, 34, 41, 52, 55, 58, 75, 91, 109, 113, 114, 123, 124, 125, 127, 128, 136, 137, 140, 142, 145, 155, 156, 172, 173, 174, 184, 185, 188, 189, 190, 191, 193, 194, 199, 200, 220, 229, 237, 238, 241, 244, 247, 248, 261, 262, 265, 266, 270, 271, 275, 276, 280, 281, 284, 291, 295, 302, 306, 310, 314, 325, 329, 354,]
missed_lines = [ 38, 42, 43, 44, 49, 56, 60, 61, 62, 63, 64, 65, 73, 87, 88, 104, 105, 106, 110, 131, 132, 133, 143, 146, 147, 148, 149, 150, 153, 158, 159, 161, 162, 163, 167, 168, 169, 170, 176, 180, 181, 195, 196, 222, 223, 224, 225, 230, 231, 234, 235, 239, 242, 245, 259, 263, 268, 273, 278, 282, 286, 293, 297, 298, 299, 300, 304, 308, 312, 322, 323, 327, 346, 347, 348, 350, 351, 368, 373, 374, 375, 376, 377, 378, 379, 382, 383, 384, 386,]

[input_info]
test_file_path = "tensorflow_datasets/core/github_api/github_path_test.py"
focal_file_path = "tensorflow_datasets/core/github_api/github_path.py"
test_file_url = "https://github.com/tensorflow/datasets/blob/5afdc02a1a6ce1a5ded7e2395c7a3498216936bb/tensorflow_datasets/core/github_api/github_path_test.py"
focal_file_url = "https://github.com/tensorflow/datasets/blob/5afdc02a1a6ce1a5ded7e2395c7a3498216936bb/tensorflow_datasets/core/github_api/github_path.py"
first_commit_date = "2021-01-26"
last_commit_date = "2025-06-02"
test_file_content = "\n\n\nimport contextlib\nimport os\nimport textwrap\nfrom unittest import mock\n\nfrom etils import epath\nimport pytest\n\nfrom tensorflow_datasets.core.github_api import github_path\n\n_SKIP_NON_HERMETIC = False\nnon_hermetic_test = pytest.mark.skipif(\n    _SKIP_NON_HERMETIC,\n    reason='Non-hermetic test skipped.',\n)\n\n_original_query_github = github_path.GithubApi.query\n\n_AUTHOR_EXPECTED_CONTENT = textwrap.dedent(\n)\n\n\n@contextlib.contextmanager\ndef enable_api_call():\n  with mock.patch.object(\n      github_path.GithubApi, 'query', _original_query_github\n  ):\n    yield\n\n\ndef test_parse_github_path():\n  url = 'github://tensorflow/datasets/tree/master/docs/README.md'\n  repo, branch, path = github_path._parse_github_path(url)\n\n  url = 'github://tensorflow/datasets/tree/master'\n  repo, branch, path = github_path._parse_github_path(url)\n\n\ndef test_github_path_registered_as_path():\n  uri = 'github://tensorflow/datasets/tree/master/docs/README.md'\n  path = epath.Path(uri)\n\n\ndef test_invalid_github_path():\n\n  with pytest.raises(ValueError, match='Invalid github path'):\n    _ = github_path.GithubPath()._metadata\n\n  with pytest.raises(ValueError, match='Invalid github path'):\n    _ = github_path.GithubPath('')._metadata\n\n  with pytest.raises(ValueError, match='Invalid github path'):\n    _ = github_path.GithubPath('github://not/a/path')\n\n  with pytest.raises(ValueError, match='Invalid github path'):\n    _ = github_path.GithubPath('github://tensorflow/tree/master/docs/README.md')\n  with pytest.raises(ValueError, match=\"/blob/` isn't accepted.\"):\n    _ = github_path.GithubPath(\n        'github://tensorflow/datasets/blob/master/docs/README.md'\n    )\n\n  p = github_path.GithubPath(\n      'github://tensorflow/datasets/tree/master/docs/README.md'\n  )\n  p = p.parent\n  _ = p._metadata\n  p = p.parent\n  _ = p._metadata\n  p = p.parent\n  with pytest.raises(ValueError, match='Invalid github path'):\n    _ = p._metadata\n\n\ndef test_github_path_purepath():\n  p = github_path.GithubPath('github://tensorflow/datasets/tree/master')\n  sub_p = p / 'some_folder'\n\n\ndef test_github_path_as_url():\n  p = github_path.GithubPath.from_repo('tensorflow/datasets', 'v3.1.0')\n  p /= 'README.md'\n  expected = (\n      'https://raw.githubusercontent.com/tensorflow/datasets/v3.1.0/README.md'\n  )\n\n\n@non_hermetic_test\ndef test_github_api_listdir():\n  p = github_path.GithubPath.from_repo('tensorflow/datasets', 'v3.1.0')\n  p = p / 'tensorflow_datasets' / 'testing'\n\n  with enable_api_call():\n    sub_dirs = sorted(p.iterdir())\n  all_dir_names = [d.name for d in sub_dirs if d.is_dir()]\n  all_file_names = [d.name for d in sub_dirs if d.is_file()]\n  all_names = [d.name for d in sub_dirs]\n\n  with pytest.raises(NotADirectoryError):\n    list((p / '__init__.py').iterdir())\n\n\n\n@non_hermetic_test\ndef test_github_api_exists():\n  p = github_path.GithubPath.from_repo('tensorflow/datasets', 'v3.1.0')\n  with enable_api_call():\n\n  readme = p / 'README.md'\n  core = p / 'tensorflow_datasets' / 'core'\n  with enable_api_call():\n  readme_recreated = core.parent.parent / 'README.md'\n\n\n@non_hermetic_test\ndef test_github_api_read_bytes_text():\n  p = github_path.GithubPath.from_repo('tensorflow/datasets', 'v3.1.0')\n\n  content = (p / 'AUTHORS').read_bytes()\n\n  content = (p / 'AUTHORS').read_text()\n  with pytest.raises(FileNotFoundError, match='Request failed'):\n    (p / 'tensorflow_datasets' / 'core').read_bytes()\n\n\n@non_hermetic_test\ndef test_github_api_copy(tmp_path):\n  p = github_path.GithubPath.from_repo('tensorflow/datasets', 'v3.1.0')\n  src = p / 'AUTHORS'\n  dst = tmp_path / 'AUTHORS'\n\n  target = src.copy(dst)\n\n  with pytest.raises(FileExistsError, match='Destination .* exists'):\n    src.copy(dst)\n\n  src.copy(dst, overwrite=True)\n\n\ndef test_assert_no_api_call():\n  with pytest.raises(AssertionError, match='Forbidden API call'):\n    github_path.GithubPath.from_repo('tensorflow/datasets', 'v1.0.0').exists()\n\n\ndef test_get_tree():\n  tree = {\n      'tree': [\n          {\n              'path': 'code1.py',\n              'type': 'blob',\n          },\n          {\n              'path': 'myfolder',\n              'type': 'tree',\n          },\n          {\n              'path': 'myfolder/code2.py',\n              'type': 'blob',\n          },\n          {\n              'path': 'myfolder/mysubfolder',\n              'type': 'tree',\n          },\n          {\n              'path': 'myfolder/mysubfolder/code3.py',\n              'type': 'blob',\n          },\n      ]\n  }\n  with mock.patch.object(github_path.GithubApi, 'query', return_value=tree):\n    root = github_path.GithubPath.from_repo('tensorflow/datasets', 'v9.9.9')\n\n    def gh_path(file: str) -> github_path.GithubPath:\n      return github_path.GithubPath(\n          f'github://tensorflow/datasets/tree/v9.9.9/{file}'\n      )\n\n    def assert_is_file(file):\n\n    def assert_is_folder(folder, files):\n\n    myfolder = gh_path('myfolder')\n    mysubfolder = gh_path('myfolder/mysubfolder')\n    code1 = gh_path('code1.py')\n    code2 = gh_path('myfolder/code2.py')\n    code3 = gh_path('myfolder/mysubfolder/code3.py')"
