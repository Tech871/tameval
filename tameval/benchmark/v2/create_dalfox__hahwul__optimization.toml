[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "hahwul/dalfox"
sha = "793d32632c00b306ec3e00b517bebc24745888f8"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/optimization/optimization.go internal/optimization/optimization_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/optimization/optimization.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 2.0
original_coverage = 48.0
mutation_kill_rate = 17.0
original_mutation_kill_rate = 29.0
covered_lines = [ 73, 74, 75, 76, 77, 78, 79,]
missed_lines = [ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 159, 160, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 200, 201, 202, 203, 204, 206, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363,]

[input_info]
test_file_path = "internal/optimization/optimization_test.go"
focal_file_path = "internal/optimization/optimization.go"
test_file_url = "https://github.com/hahwul/dalfox/blob/793d32632c00b306ec3e00b517bebc24745888f8/internal/optimization/optimization_test.go"
focal_file_url = "https://github.com/hahwul/dalfox/blob/793d32632c00b306ec3e00b517bebc24745888f8/internal/optimization/optimization.go"
first_commit_date = "2025-03-15"
last_commit_date = "2025-08-09"
test_file_content = "package optimization\n\nimport (\n\t\"net/http\"\n\t\"testing\"\n\n)\n\n\nfunc TestGetRawCookie(t *testing.T) {\n\ttype args struct {\n\t\tcookies []*http.Cookie\n\t}\n\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant string\n\t}{\n\t\t{\n\t\t\tname: \"test - nil\",\n\t\t\targs: args{},\n\t\t\twant: \"\",\n\t\t},\n\t\t{\n\t\t\tname: \"test - nil\",\n\t\t\targs: args{\n\t\t\t\tcookies: []*http.Cookie{\n\t\t\t\t\t&http.Cookie{\n\t\t\t\t\t\tName:     \"test\",\n\t\t\t\t\t\tValue:    \"1234\",\n\t\t\t\t\t\tHttpOnly: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: \"test=1234\",\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := GetRawCookie(tt.args.cookies); got != tt.want {\n\t\t\t\tt.Errorf(\"GetRawCookie() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\n\n"
