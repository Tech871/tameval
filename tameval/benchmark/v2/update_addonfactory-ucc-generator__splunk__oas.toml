[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "splunk/addonfactory-ucc-generator"
sha = "0ceda52ad4ba2548071b64914a75aae987787a86"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=splunk_add_on_ucc_framework/commands/openapi_generator/oas.py -m pytest -q --junit-xml=test_output.xml tests/unit/commands/openapi_generator/test_oas.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target splunk_add_on_ucc_framework.commands.openapi_generator.oas --unit-test tests.unit.commands.openapi_generator.test_oas --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target splunk_add_on_ucc_framework/commands/openapi_generator/oas.py --unit-test tests/unit/commands/openapi_generator/test_oas.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = [ 15, 16, 17, 27, 30, 31, 35, 36, 39, 40, 41, 42, 43, 46, 47, 53, 54, 55, 58, 59, 60, 63, 64, 65, 68, 69, 72, 73, 74, 75, 78, 79, 82, 83, 84, 87, 88, 89, 92, 93, 94, 97, 98, 99, 102, 103, 104, 107, 108, 109, 110, 111, 112, 120, 121, 122, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 151, 152, 155, 156, 157, 159, 160, 165, 166, 167, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 205, 208, 214, 215, 216, 219, 220, 221, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 255,]

[input_info]
test_file_path = "tests/unit/commands/openapi_generator/test_oas.py"
focal_file_path = "splunk_add_on_ucc_framework/commands/openapi_generator/oas.py"
test_file_url = "https://github.com/splunk/addonfactory-ucc-generator/blob/0ceda52ad4ba2548071b64914a75aae987787a86/tests/unit/commands/openapi_generator/test_oas.py"
focal_file_url = "https://github.com/splunk/addonfactory-ucc-generator/blob/0ceda52ad4ba2548071b64914a75aae987787a86/splunk_add_on_ucc_framework/commands/openapi_generator/oas.py"
first_commit_date = "2023-02-22"
last_commit_date = "2025-02-11"
test_file_content = "from openapi3 import OpenAPI\nfrom splunk_add_on_ucc_framework.commands.openapi_generator import oas\nfrom splunk_add_on_ucc_framework.commands.openapi_generator.oas import (\n    OpenAPIObject,\n    ServerObject,\n    ServerVariableObject,\n    InfoObject,\n)\n\n\nclass __MinOpenAPI:\n    @property\n    def title(self) -> str:\n        return \"Splunk_TA_Acme\"\n\n    @property\n    def version(self) -> str:\n        return \"1.2.3\"\n\n    @property\n    def open_api_object(self) -> OpenAPIObject:\n        return OpenAPIObject(\n            openapi=oas.OPENAPI_300,\n            info=InfoObject(title=self.title, version=self.version),\n            paths={},\n        )\n\n\ndef test_servers():\n    min_open_api = __MinOpenAPI()\n    open_api_object = min_open_api.open_api_object\n    description = \"Access via management interface\"\n    default_domain = \"localhost\"\n\n    variables = {}\n    variables[\"domain\"] = ServerVariableObject(default=default_domain)\n    variables[\"port\"] = ServerVariableObject(default=\"8089\")\n    server = ServerObject(\n        url=\"https://{domain}:{port}/servicesNS/-/Splunk_TA_Acme\",\n        description=description,\n        variables=variables,\n    )\n\n    open_api_object.servers = [server]\n    j = open_api_object.json\n    assert j[\"openapi\"] == oas.OPENAPI_300\n    assert j[\"servers\"][0][\"description\"] == description\n    assert j[\"servers\"][0][\"variables\"][\"domain\"][\"default\"] == default_domain\n\n\ndef test_info():\n    min_open_api = __MinOpenAPI()\n    open_api_object = min_open_api.open_api_object\n\n    info_title = \"Info title\"\n    info_version = \"1.3.0b52f0112\"\n    license_name = \"Splunk Software License Agreement\"\n    license_url = \"http://www.splunk.com/view/SP-CAAAAFA\"\n    contact_name = \"Splunk, Inc.\"\n    contact_email = \"support@splunk.com\"\n\n    info = oas.InfoObject(\n        title=info_title,\n        version=info_version,\n        license=oas.LicenseObject(name=license_name, url=license_url),\n        contact=oas.ContactObject(name=contact_name, email=contact_email),\n    )\n\n    open_api_object.info = info\n    j = open_api_object.json\n    assert j[\"openapi\"] == oas.OPENAPI_300\n    assert j[\"info\"][\"title\"] == info_title\n    assert j[\"info\"][\"version\"] == info_version\n    assert j[\"info\"][\"license\"][\"name\"] == license_name\n    assert j[\"info\"][\"license\"][\"url\"] == license_url\n    assert j[\"info\"][\"contact\"][\"name\"] == contact_name\n    assert j[\"info\"][\"contact\"][\"email\"] == contact_email\n\n\ndef test_components():\n    min_open_api = __MinOpenAPI()\n    open_api_object = min_open_api.open_api_object\n\n    logging = \"logging\"\n    basic_auth = \"BasicAuth\"\n    http = \"http\"\n    basic = \"basic\"\n    object = \"object\"\n\n    components = oas.ComponentsObject(\n        schemas={\n            logging: oas.SchemaObject(\n                type=object,\n                properties={\n                    \"loglevel\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n                    }\n                },\n            )\n        },\n        securitySchemes={\n            basic_auth: oas.SecuritySchemeObjects(type=http, scheme=basic)\n        },\n    )\n\n    open_api_object.components = components\n\n    j = open_api_object.json\n    assert j[\"openapi\"] == oas.OPENAPI_300\n    assert j[\"components\"][\"schemas\"][logging][\"type\"] == object\n    assert j[\"components\"][\"securitySchemes\"][basic_auth][\"type\"] == http\n    assert j[\"components\"][\"securitySchemes\"][basic_auth][\"scheme\"] == basic\n\n\ndef test_paths_get():\n    min_open_api = __MinOpenAPI()\n    open_api_object = min_open_api.open_api_object\n\n    logging = \"logging\"\n    basic_auth = \"BasicAuth\"\n    http = \"http\"\n    basic = \"basic\"\n    object = \"object\"\n\n    components = oas.ComponentsObject(\n        schemas={\n            logging: oas.SchemaObject(\n                type=object,\n                properties={\n                    \"loglevel\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n                    }\n                },\n            )\n        },\n        securitySchemes={\n            basic_auth: oas.SecuritySchemeObjects(type=http, scheme=basic)\n        },\n    )\n\n    path_settings_logging = \"/splunk_ta_acme_settings/logging\"\n    path_settings_logging_get_description = \"Get logging details\"\n    paths = {\n        path_settings_logging: oas.PathItemObject(\n            get=oas.OperationObject(\n                description=path_settings_logging_get_description,\n                responses={\n                    \"200\": oas.ResponseObject(\n                        description=path_settings_logging_get_description\n                    )\n                },\n            )\n        )\n    }\n    security = [{basic_auth: []}]\n\n    open_api_object.components = components\n    open_api_object.paths = paths\n    open_api_object.security = security\n\n    j = open_api_object.json\n    open_api = OpenAPI(j)\n    assert j[\"openapi\"] == oas.OPENAPI_300\n    assert j[\"components\"][\"schemas\"][logging][\"type\"] == object\n    assert j[\"components\"][\"securitySchemes\"][basic_auth][\"type\"] == http\n    assert j[\"components\"][\"securitySchemes\"][basic_auth][\"scheme\"] == basic\n    assert (\n        j[\"paths\"][path_settings_logging][\"get\"][\"description\"]\n        == path_settings_logging_get_description\n    )\n    assert (\n        j[\"paths\"][path_settings_logging][\"get\"][\"responses\"][\"200\"][\"description\"]\n        == path_settings_logging_get_description\n    )\n    assert j[\"security\"][0][basic_auth] == []\n    assert (\n        open_api.paths[path_settings_logging].get.security[0].name == basic_auth\n    )  # conceptually, root level security is populated down\n\n\ndef test_paths_post():\n    min_open_api = __MinOpenAPI()\n    open_api_object = min_open_api.open_api_object\n\n    logging = \"logging\"\n    basic_auth = \"BasicAuth\"\n    http = \"http\"\n    basic = \"basic\"\n    object = \"object\"\n\n    components = oas.ComponentsObject(\n        schemas={\n            logging: oas.SchemaObject(\n                type=object,\n                properties={\n                    \"loglevel\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\"],\n                    }\n                },\n            )\n        },\n        securitySchemes={\n            basic_auth: oas.SecuritySchemeObjects(type=http, scheme=basic)\n        },\n    )\n\n    path_settings_logging = \"/splunk_ta_acme_settings/logging\"\n    path_settings_logging_post_description = \"Update logging details\"\n    media_type_application_x_www_form_urlencoded = \"application/x-www-form-urlencoded\"\n    request_body_content = {\"schema\": {\"$ref\": \"#/components/schemas/logging\"}}\n    paths = {\n        path_settings_logging: oas.PathItemObject(\n            post=oas.OperationObject(\n                description=path_settings_logging_post_description,\n                requestBody=oas.RequestBodyObject(\n                    content={\n                        media_type_application_x_www_form_urlencoded: request_body_content\n                    }\n                ),\n                responses={\n                    \"200\": oas.ResponseObject(\n                        description=path_settings_logging_post_description\n                    )\n                },\n            )\n        )\n    }\n\n    open_api_object.components = components\n    open_api_object.paths = paths\n    open_api_object.security = [{basic_auth: []}]\n\n    j = open_api_object.json\n    assert (\n        j[\"paths\"][path_settings_logging][\"post\"][\"requestBody\"][\"content\"][\n            media_type_application_x_www_form_urlencoded\n        ]\n        == request_body_content\n    )"
