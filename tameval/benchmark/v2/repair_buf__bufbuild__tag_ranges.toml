[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bufbuild/buf"
sha = "37b5a2a496a2279aa03507be64cba00193644a1e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges.go private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 51.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges_test.go"
focal_file_path = "private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges.go"
test_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges_test.go"
focal_file_url = "https://github.com/bufbuild/buf/blob/37b5a2a496a2279aa03507be64cba00193644a1e/private/bufpkg/bufcheck/bufcheckserver/internal/bufcheckserverhandle/tag_ranges.go"
first_commit_date = "2024-09-04"
last_commit_date = "2025-01-02"
test_file_content = "\n\npackage bufcheckserverhandle\n\nimport (\n\t\"math/rand\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCollapseRanges(t *testing.T) {\n\tt.Parallel()\n\tt.Run(\"empty\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\tdoCollapseRanges(\n\t\t\tt,\n\t\t\t[]simpleTagRange{},\n\t\t\tnil,\n\t\t)\n\t})\n\tt.Run(\"single\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\tdoCollapseRanges(\n\t\t\tt,\n\t\t\t[]simpleTagRange{\n\t\t\t\t{1, 100},\n\t\t\t},\n\t\t\t[]simpleTagRange{\n\t\t\t\t{1, 100},\n\t\t\t},\n\t\t)\n\t})\n\tt.Run(\"many\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\tdoCollapseRanges(\n\t\t\tt,\n\t\t\t[]simpleTagRange{\n\t\t\t\t{1, 1},\n\t\t\t\t{2, 5},\n\t\t\t\t{7, 20},\n\t\t\t\t{21, 21},\n\t\t\t\t{22, 23},\n\t\t\t\t{99, 99},\n\t\t\t\t{100, 100},\n\t\t\t\t{101, 101},\n\t\t\t\t{110, 120},\n\t\t\t},\n\t\t\t[]simpleTagRange{\n\t\t\t\t{1, 5},\n\t\t\t\t{7, 23},\n\t\t\t\t{99, 101},\n\t\t\t\t{110, 120},\n\t\t\t},\n\t\t)\n\t})\n\tt.Run(\"overlaps\", func(t *testing.T) {\n\t\tt.Parallel()\n\t\tdoCollapseRanges(\n\t\t\tt,\n\t\t\t[]simpleTagRange{\n\t\t\t\t{1, 5},\n\t\t\t\t{2, 3},\n\t\t\t\t{7, 20},\n\t\t\t\t{15, 23},\n\t\t\t\t{99, 99},\n\t\t\t\t{100, 100},\n\t\t\t\t{101, 101},\n\t\t\t\t{110, 118},\n\t\t\t\t{116, 120},\n\t\t\t\t{120, 120},\n\t\t\t},\n\t\t\t[]simpleTagRange{\n\t\t\t\t{1, 5},\n\t\t\t\t{7, 23},\n\t\t\t\t{99, 101},\n\t\t\t\t{110, 120},\n\t\t\t},\n\t\t)\n\t})\n}\n\nfunc TestFindMissing(t *testing.T) {\n\tt.Parallel()\n\tranges := []simpleTagRange{\n\t\t{10, 100},\n\t\t{200, 200},\n\t\t{300, 302},\n\t\t{305, 310},\n\t\t{312, 320},\n\t\t{330, 350},\n\t}\n\tmissing := findMissing(10, 100, ranges)\n\tmissing = findMissing(1, 5, ranges)\n\tmissing = findMissing(101, 110, ranges)\n\tmissing = findMissing(150, 200, ranges)\n\tmissing = findMissing(199, 201, ranges)\n\tmissing = findMissing(200, 200, ranges)\n\tmissing = findMissing(300, 300, ranges)\n\tmissing = findMissing(300, 350, ranges)\n\tmissing = findMissing(335, 360, ranges)\n\tmissing = findMissing(400, 400, ranges)\n\tmissing = findMissing(1, 400, ranges)\n}\n\nfunc doCollapseRanges(t *testing.T, input, expected []simpleTagRange) {\n\tt.Helper()\n\tcollapsed := collapseRanges(input)\n\tfor i := 0; i < 10; i++ {\n\t\trand.Shuffle(len(input), func(i, j int) {\n\t\t\tinput[i], input[j] = input[j], input[i]\n\t\t})\n\t\tcollapsed := collapseRanges(input)\n\t}\n}"
