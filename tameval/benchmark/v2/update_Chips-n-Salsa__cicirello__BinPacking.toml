[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "cicirello/Chips-n-Salsa"
sha = "0dc132865b107fc955f50f8659bca138cbfc43c5"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=BinPackingTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.BinPacking  -DtargetTests=**.BinPackingTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/org/cicirello/search/problems/binpack/BinPackingTests.java"
focal_file_path = "src/main/java/org/cicirello/search/problems/binpack/BinPacking.java"
test_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/test/java/org/cicirello/search/problems/binpack/BinPackingTests.java"
focal_file_url = "https://github.com/cicirello/Chips-n-Salsa/blob/0dc132865b107fc955f50f8659bca138cbfc43c5/src/main/java/org/cicirello/search/problems/binpack/BinPacking.java"
first_commit_date = "2022-02-07"
last_commit_date = "2024-05-17"
test_file_content = "/*\n * Chips-n-Salsa: A library of parallel self-adaptive local search algorithms.\n * Copyright (C) 2002-2022 Vincent A. Cicirello\n *\n * This file is part of Chips-n-Salsa (https://chips-n-salsa.cicirello.org/).\n *\n * Chips-n-Salsa is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Chips-n-Salsa is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npackage org.cicirello.search.problems.binpack;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport org.cicirello.permutations.Permutation;\nimport org.junit.jupiter.api.*;\n\n/** JUnit test cases for the the BinPacking problem related classes. */\npublic class BinPackingTests {\n\n  @Test\n  public void testBin() {\n    final Bin b = new Bin(100);\n    assertEquals(0, b.size());\n    assertEquals(100, b.space());\n    IllegalArgumentException thrown =\n        assertThrows(IllegalArgumentException.class, () -> b.addItem(99, 101));\n    assertEquals(0, b.size());\n    assertEquals(100, b.space());\n\n    b.addItem(42, 34);\n    assertEquals(1, b.size());\n    assertEquals(66, b.space());\n    thrown = assertThrows(IllegalArgumentException.class, () -> b.addItem(99, 67));\n    assertEquals(1, b.size());\n    assertEquals(66, b.space());\n    assertEquals(42, b.getItem(0));\n\n    b.addItem(13, 40);\n    assertEquals(2, b.size());\n    assertEquals(26, b.space());\n    thrown = assertThrows(IllegalArgumentException.class, () -> b.addItem(99, 27));\n    assertEquals(2, b.size());\n    assertEquals(26, b.space());\n    assertEquals(42, b.getItem(0));\n    assertEquals(13, b.getItem(1));\n\n    b.addItem(101, 26);\n    assertEquals(3, b.size());\n    assertEquals(0, b.space());\n    thrown = assertThrows(IllegalArgumentException.class, () -> b.addItem(99, 1));\n    assertEquals(3, b.size());\n    assertEquals(0, b.space());\n    assertEquals(42, b.getItem(0));\n    assertEquals(13, b.getItem(1));\n    assertEquals(101, b.getItem(2));\n  }\n\n  @Test\n  public void testBinPackingSolution() {\n    int capacity = 100;\n    int[] items = {54, 16, 31, 30, 60, 10, 9};\n    int[] p1 = {0, 1, 2, 3, 4, 5, 6};\n    BinPackingSolution solution = new BinPackingSolution(new Permutation(p1), capacity, items);\n    assertEquals(3, solution.cost());\n    Bin b = solution.getBin(0);\n    assertEquals(0, b.space());\n    assertEquals(3, b.size());\n    assertEquals(0, b.getItem(0));\n    assertEquals(1, b.getItem(1));\n    assertEquals(3, b.getItem(2));\n    b = solution.getBin(1);\n    assertEquals(0, b.space());\n    assertEquals(3, b.size());\n    assertEquals(2, b.getItem(0));\n    assertEquals(4, b.getItem(1));\n    assertEquals(6, b.getItem(2));\n    b = solution.getBin(2);\n    assertEquals(90, b.space());\n    assertEquals(1, b.size());\n    assertEquals(5, b.getItem(0));\n\n    int[] p2 = {6, 5, 4, 3, 2, 1, 0};\n    solution = new BinPackingSolution(new Permutation(p2), capacity, items);\n    assertEquals(3, solution.cost());\n    b = solution.getBin(0);\n    assertEquals(5, b.space());\n    assertEquals(4, b.size());\n    assertEquals(6, b.getItem(0));\n    assertEquals(5, b.getItem(1));\n    assertEquals(4, b.getItem(2));\n    assertEquals(1, b.getItem(3));\n    b = solution.getBin(1);\n    assertEquals(39, b.space());\n    assertEquals(2, b.size());\n    assertEquals(3, b.getItem(0));\n    assertEquals(2, b.getItem(1));\n    b = solution.getBin(2);\n    assertEquals(46, b.space());\n    assertEquals(1, b.size());\n    assertEquals(0, b.getItem(0));\n  }\n\n  @Test\n  public void testBaseClassNotAllFull() {\n    int capacity = 100;\n    int[] items = {54, 16, 31, 30, 60, 10, 9};\n    BinPacking problem = new BinPacking(capacity, items.clone());\n    assertEquals(capacity, problem.getCapacity());\n    assertEquals(items.length, problem.numItems());\n    for (int i = 0; i < items.length; i++) {\n      assertEquals(items[i], problem.getSize(i));\n    }\n    assertEquals(3, problem.minCost());\n\n    int[] p1 = {0, 1, 2, 3, 4, 5, 6};\n    Permutation perm = new Permutation(p1);\n    BinPackingSolution solution = problem.permutationToBinPackingSolution(perm);\n    assertEquals(3, solution.cost());\n    assertEquals(3, problem.cost(perm));\n    assertEquals(3, problem.value(perm));\n    Bin b = solution.getBin(0);\n    assertEquals(0, b.space());\n    assertEquals(3, b.size());\n    assertEquals(0, b.getItem(0));\n    assertEquals(1, b.getItem(1));\n    assertEquals(3, b.getItem(2));\n    b = solution.getBin(1);\n    assertEquals(0, b.space());\n    assertEquals(3, b.size());\n    assertEquals(2, b.getItem(0));\n    assertEquals(4, b.getItem(1));\n    assertEquals(6, b.getItem(2));\n    b = solution.getBin(2);\n    assertEquals(90, b.space());\n    assertEquals(1, b.size());\n    assertEquals(5, b.getItem(0));\n\n    int[] p2 = {6, 5, 4, 3, 2, 1, 0};\n    perm = new Permutation(p2);\n    solution = problem.permutationToBinPackingSolution(perm);\n    assertEquals(3, solution.cost());\n    assertEquals(3, problem.cost(perm));\n    assertEquals(3, problem.value(perm));\n    b = solution.getBin(0);\n    assertEquals(5, b.space());\n    assertEquals(4, b.size());\n    assertEquals(6, b.getItem(0));\n    assertEquals(5, b.getItem(1));\n    assertEquals(4, b.getItem(2));\n    assertEquals(1, b.getItem(3));\n    b = solution.getBin(1);\n    assertEquals(39, b.space());\n    assertEquals(2, b.size());\n    assertEquals(3, b.getItem(0));\n    assertEquals(2, b.getItem(1));\n    b = solution.getBin(2);\n    assertEquals(46, b.space());\n    assertEquals(1, b.size());\n    assertEquals(0, b.getItem(0));\n  }\n\n  @Test\n  public void testBaseClassPossibleToFillAll() {\n    int capacity = 100;\n    int[] items = {54, 16, 31, 30, 60, 10, 9, 90};\n    BinPacking problem = new BinPacking(capacity, items.clone());\n    assertEquals(capacity, problem.getCapacity());\n    assertEquals(items.length, problem.numItems());\n    for (int i = 0; i < items.length; i++) {\n      assertEquals(items[i], problem.getSize(i));\n    }\n    assertEquals(3, problem.minCost());\n\n    int[] p1 = {0, 1, 2, 3, 4, 5, 6, 7};\n    Permutation perm = new Permutation(p1);\n    BinPackingSolution solution = problem.permutationToBinPackingSolution(perm);\n    assertEquals(3, solution.cost());\n    assertEquals(3, problem.cost(perm));\n    assertEquals(3, problem.value(perm));\n    Bin b = solution.getBin(0);\n    assertEquals(0, b.space());\n    assertEquals(3, b.size());\n    assertEquals(0, b.getItem(0));\n    assertEquals(1, b.getItem(1));\n    assertEquals(3, b.getItem(2));\n    b = solution.getBin(1);\n    assertEquals(0, b.space());\n    assertEquals(3, b.size());\n    assertEquals(2, b.getItem(0));\n    assertEquals(4, b.getItem(1));\n    assertEquals(6, b.getItem(2));\n    b = solution.getBin(2);\n    assertEquals(0, b.space());\n    assertEquals(2, b.size());\n    assertEquals(5, b.getItem(0));\n    assertEquals(7, b.getItem(1));\n\n    int[] p2 = {6, 5, 4, 3, 2, 1, 0, 7};\n    perm = new Permutation(p2);\n    solution = problem.permutationToBinPackingSolution(perm);\n    assertEquals(4, solution.cost());\n    assertEquals(4, problem.cost(perm));\n    assertEquals(4, problem.value(perm));\n    b = solution.getBin(0);\n    assertEquals(5, b.space());\n    assertEquals(4, b.size());\n    assertEquals(6, b.getItem(0));\n    assertEquals(5, b.getItem(1));\n    assertEquals(4, b.getItem(2));\n    assertEquals(1, b.getItem(3));\n    b = solution.getBin(1);\n    assertEquals(39, b.space());\n    assertEquals(2, b.size());\n    assertEquals(3, b.getItem(0));\n    assertEquals(2, b.getItem(1));\n    b = solution.getBin(2);\n    assertEquals(46, b.space());\n    assertEquals(1, b.size());\n    assertEquals(0, b.getItem(0));\n    b = solution.getBin(3);\n    assertEquals(10, b.space());\n    assertEquals(1, b.size());\n    assertEquals(7, b.getItem(0));\n  }\n\n  @Test\n  public void testExceptions() {\n    IllegalArgumentException thrown =\n        assertThrows(\n            IllegalArgumentException.class, () -> new BinPacking(90, new int[] {91, 1, 1}));\n    thrown =\n        assertThrows(\n            IllegalArgumentException.class, () -> new BinPacking(90, new int[] {1, 91, 1}));\n    thrown =\n        assertThrows(\n            IllegalArgumentException.class, () -> new BinPacking(90, new int[] {1, 1, 91}));\n\n    thrown =\n        assertThrows(\n            IllegalArgumentException.class, () -> new BinPacking.UniformRandom(10, 100, 21, 20));\n    NegativeArraySizeException thrown2 =\n        assertThrows(\n            NegativeArraySizeException.class, () -> new BinPacking.UniformRandom(-1, 100, 21, 30));\n    thrown2 = assertThrows(NegativeArraySizeException.class, () -> new BinPacking.Triplet(-1));\n  }\n\n  @Test\n  public void testUniformRandomOnlyNumItems() {\n    for (int numItems = 0; numItems <= 10; numItems++) {\n      BinPacking.UniformRandom problem = new BinPacking.UniformRandom(numItems);\n      assertEquals(150, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      for (int i = 0; i < numItems; i++) {\n        assertTrue(problem.getSize(i) >= 20);\n        assertTrue(problem.getSize(i) <= 100);\n      }\n    }\n  }\n\n  @Test\n  public void testUniformRandomNumItemsSeed() {\n    for (int numItems = 0; numItems <= 10; numItems++) {\n      BinPacking.UniformRandom problem = new BinPacking.UniformRandom(numItems, 42);\n      assertEquals(150, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      for (int i = 0; i < numItems; i++) {\n        assertTrue(problem.getSize(i) >= 20);\n        assertTrue(problem.getSize(i) <= 100);\n      }\n    }\n  }\n\n  @Test\n  public void testUniformRandomAllButSeed() {\n    for (int numItems = 0; numItems <= 10; numItems++) {\n      BinPacking.UniformRandom problem = new BinPacking.UniformRandom(numItems, 99, 10, 20);\n      assertEquals(99, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      for (int i = 0; i < numItems; i++) {\n        assertTrue(problem.getSize(i) >= 10);\n        assertTrue(problem.getSize(i) <= 20);\n      }\n    }\n  }\n\n  @Test\n  public void testUniformRandomAllParams() {\n    for (int numItems = 0; numItems <= 10; numItems++) {\n      BinPacking.UniformRandom problem = new BinPacking.UniformRandom(numItems, 99, 10, 20, 42);\n      assertEquals(99, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      for (int i = 0; i < numItems; i++) {\n        assertTrue(problem.getSize(i) >= 10);\n        assertTrue(problem.getSize(i) <= 20);\n      }\n    }\n  }\n\n  @Test\n  public void testUniformRandomForceSize() {\n    for (int numItems = 0; numItems <= 10; numItems++) {\n      BinPacking.UniformRandom problem = new BinPacking.UniformRandom(numItems, 99, 8, 8);\n      assertEquals(99, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      for (int i = 0; i < numItems; i++) {\n        assertEquals(8, problem.getSize(i));\n      }\n    }\n  }\n\n  @Test\n  public void testTripletNoSeed() {\n    for (int numTriplets = 0; numTriplets <= 5; numTriplets++) {\n      int numItems = numTriplets * 3;\n      BinPacking.Triplet problem = new BinPacking.Triplet(numTriplets);\n      assertEquals(1000, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      int total = 0;\n      int count = 0;\n      for (int i = 0; i < numItems; i++) {\n        total += problem.getSize(i);\n        if (problem.getSize(i) >= 380 && problem.getSize(i) <= 490) {\n          count++;\n        }\n      }\n      assertEquals(1000 * numTriplets, total);\n      assertEquals(numTriplets, count);\n    }\n  }\n\n  @Test\n  public void testTripletSeed() {\n    for (int numTriplets = 0; numTriplets <= 5; numTriplets++) {\n      int numItems = numTriplets * 3;\n      BinPacking.Triplet problem = new BinPacking.Triplet(numTriplets, 42);\n      assertEquals(1000, problem.getCapacity());\n      assertEquals(numItems, problem.numItems());\n      int total = 0;\n      int count = 0;\n      for (int i = 0; i < numItems; i++) {\n        total += problem.getSize(i);\n        if (problem.getSize(i) >= 380 && problem.getSize(i) <= 490) {\n          count++;\n        }\n      }\n      assertEquals(1000 * numTriplets, total);\n      assertEquals(numTriplets, count);\n    }\n  }\n}"
