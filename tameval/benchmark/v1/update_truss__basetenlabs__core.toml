[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "basetenlabs/truss"
sha = "9d37d8696d3229f91970f999827fcda0a5aed410"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=truss/remote/baseten/core.py -m pytest -q --junit-xml=test_output.xml truss/tests/remote/baseten/test_core.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target truss.remote.baseten.core --unit-test truss.tests.remote.baseten.test_core --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target truss/remote/baseten/core.py --unit-test truss/tests/remote/baseten/test_core.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 58.0
original_coverage = 65.0
mutation_kill_rate = nan
original_mutation_kill_rate = 45.0
covered_lines = [ 0, 1, 2, 3, 4, 5, 7, 9, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 30, 31, 34, 35, 39, 40, 44, 45, 49, 50, 51, 54, 55, 56, 59, 60, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 77, 94, 107, 180, 191, 192, 193, 194, 198, 202, 205, 210, 220, 221, 222, 223, 226, 237, 238, 239, 242, 272, 276, 277, 278, 279, 282, 306, 321, 322, 323, 324, 327, 330, 429, 440, 441, 442, 443, 444, 445, 446,]
missed_lines = [ 10, 36, 41, 46, 88, 90, 91, 95, 96, 99, 100, 101, 104, 116, 117, 121, 123, 130, 131, 138, 143, 144, 151, 152, 156, 161, 162, 163, 165, 172, 200, 206, 207, 243, 244, 252, 260, 261, 262, 266, 291, 293, 294, 297, 299, 302, 303, 363, 364, 373, 379, 380, 381, 383, 394, 400, 401, 411, 412, 416, 420, 422,]

[input_info]
test_file_path = "truss/tests/remote/baseten/test_core.py"
focal_file_path = "truss/remote/baseten/core.py"
test_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/tests/remote/baseten/test_core.py"
focal_file_url = "https://github.com/basetenlabs/truss/blob/9d37d8696d3229f91970f999827fcda0a5aed410/truss/remote/baseten/core.py"
first_commit_date = "2023-07-06"
last_commit_date = "2025-03-17"
test_file_content = "import json\nfrom tempfile import NamedTemporaryFile\nfrom unittest.mock import MagicMock\n\nimport pytest\nfrom truss.base.constants import PRODUCTION_ENVIRONMENT_NAME\nfrom truss.base.errors import ValidationError\nfrom truss.remote.baseten import core\nfrom truss.remote.baseten.api import BasetenApi\nfrom truss.remote.baseten.core import create_truss_service\nfrom truss.remote.baseten.error import ApiError\n\n\ndef test_exists_model():\n    def mock_get_model(model_name):\n        if model_name == \"first model\":\n            return {\"model\": {\"id\": \"1\"}}\n        elif model_name == \"second model\":\n            return {\"model\": {\"id\": \"2\"}}\n        else:\n            raise ApiError(\n                \"Oracle not found\",\n                BasetenApi.GraphQLErrorCodes.RESOURCE_NOT_FOUND.value,\n            )\n\n    api = MagicMock()\n    api.get_model.side_effect = mock_get_model\n\n    assert core.exists_model(api, \"first model\")\n    assert core.exists_model(api, \"second model\")\n    assert not core.exists_model(api, \"third model\")\n\n\ndef test_upload_truss():\n    api = MagicMock()\n    api.model_s3_upload_credentials.return_value = {\n        \"s3_key\": \"key\",\n        \"s3_bucket\": \"bucket\",\n    }\n    core.multipart_upload_boto3 = MagicMock()\n    core.multipart_upload_boto3.return_value = None\n    test_file = NamedTemporaryFile()\n    assert core.upload_truss(api, test_file, None) == \"key\"\n\n\ndef test_get_dev_version_from_versions():\n    versions = [{\"id\": \"1\", \"is_draft\": False}, {\"id\": \"2\", \"is_draft\": True}]\n    dev_version = core.get_dev_version_from_versions(versions)\n    assert dev_version[\"id\"] == \"2\"\n\n\ndef test_get_dev_version_from_versions_error():\n    versions = [{\"id\": \"1\", \"is_draft\": False}]\n    dev_version = core.get_dev_version_from_versions(versions)\n    assert dev_version is None\n\n\ndef test_get_dev_version():\n    versions = [{\"id\": \"1\", \"is_draft\": False}, {\"id\": \"2\", \"is_draft\": True}]\n    api = MagicMock()\n    api.get_model.return_value = {\"model\": {\"versions\": versions}}\n\n    dev_version = core.get_dev_version(api, \"my_model\")\n    assert dev_version[\"id\"] == \"2\"\n\n\ndef test_get_prod_version_from_versions():\n    versions = [\n        {\"id\": \"1\", \"is_draft\": False, \"is_primary\": False},\n        {\"id\": \"2\", \"is_draft\": True, \"is_primary\": False},\n        {\"id\": \"3\", \"is_draft\": False, \"is_primary\": True},\n    ]\n    prod_version = core.get_prod_version_from_versions(versions)\n    assert prod_version[\"id\"] == \"3\"\n\n\ndef test_get_prod_version_from_versions_error():\n    versions = [\n        {\"id\": \"1\", \"is_draft\": True, \"is_primary\": False},\n        {\"id\": \"2\", \"is_draft\": False, \"is_primary\": False},\n    ]\n    prod_version = core.get_prod_version_from_versions(versions)\n    assert prod_version is None\n\n\n@pytest.mark.parametrize(\"environment\", [None, PRODUCTION_ENVIRONMENT_NAME])\ndef test_create_truss_service_handles_eligible_environment_values(environment):\n    api = MagicMock()\n    return_value = {\n        \"id\": \"model_version_id\",\n        \"oracle\": {\"id\": \"model_id\", \"hostname\": \"hostname\"},\n    }\n    api.create_model_from_truss.return_value = return_value\n    version_handle = create_truss_service(\n        api,\n        \"model_name\",\n        \"s3_key\",\n        \"config\",\n        preserve_previous_prod_deployment=False,\n        is_draft=False,\n        model_id=None,\n        deployment_name=\"deployment_name\",\n        environment=environment,\n    )\n    assert version_handle.version_id == \"model_version_id\"\n    assert version_handle.model_id == \"model_id\"\n    api.create_model_from_truss.assert_called_once()\n\n\n@pytest.mark.parametrize(\"model_id\", [\"some_model_id\", None])\ndef test_create_truss_services_handles_is_draft(model_id):\n    api = MagicMock()\n    return_value = {\n        \"id\": \"model_version_id\",\n        \"oracle\": {\"id\": \"model_id\", \"hostname\": \"hostname\"},\n    }\n    api.create_development_model_from_truss.return_value = return_value\n    version_handle = create_truss_service(\n        api,\n        \"model_name\",\n        \"s3_key\",\n        \"config\",\n        preserve_previous_prod_deployment=False,\n        is_draft=True,\n        model_id=model_id,\n        deployment_name=\"deployment_name\",\n    )\n    assert version_handle.version_id == \"model_version_id\"\n    assert version_handle.model_id == \"model_id\"\n    api.create_development_model_from_truss.assert_called_once()\n\n\n@pytest.mark.parametrize(\n    \"inputs\",\n    [\n        {\n            \"environment\": None,\n            \"deployment_name\": \"some deployment\",\n            \"preserve_previous_prod_deployment\": False,\n        },\n        {\n            \"environment\": PRODUCTION_ENVIRONMENT_NAME,\n            \"deployment_name\": None,\n            \"preserve_previous_prod_deployment\": False,\n        },\n        {\n            \"environment\": \"staging\",\n            \"deployment_name\": \"some_deployment_name\",\n            \"preserve_previous_prod_deployment\": True,\n        },\n    ],\n)\ndef test_create_truss_service_handles_existing_model(inputs):\n    api = MagicMock()\n    return_value = {\n        \"id\": \"model_version_id\",\n        \"oracle\": {\"id\": \"model_id\", \"hostname\": \"hostname\"},\n    }\n    api.create_model_version_from_truss.return_value = return_value\n    version_handle = create_truss_service(\n        api,\n        \"model_name\",\n        \"s3_key\",\n        \"config\",\n        is_draft=False,\n        model_id=\"model_id\",\n        **inputs,\n    )\n\n    assert version_handle.version_id == \"model_version_id\"\n    assert version_handle.model_id == \"model_id\"\n    api.create_model_version_from_truss.assert_called_once()\n    _, kwargs = api.create_model_version_from_truss.call_args\n    for k, v in inputs.items():\n        assert kwargs[k] == v\n\n\n@pytest.mark.parametrize(\"allow_truss_download\", [True, False])\n@pytest.mark.parametrize(\"is_draft\", [True, False])\ndef test_create_truss_service_handles_allow_truss_download_for_new_models(\n    is_draft, allow_truss_download\n):\n    api = MagicMock()\n    return_value = {\n        \"id\": \"model_version_id\",\n        \"oracle\": {\"id\": \"model_id\", \"hostname\": \"hostname\"},\n    }\n    api.create_model_from_truss.return_value = return_value\n    api.create_development_model_from_truss.return_value = return_value\n\n    version_handle = create_truss_service(\n        api,\n        \"model_name\",\n        \"s3_key\",\n        \"config\",\n        preserve_previous_prod_deployment=False,\n        is_draft=is_draft,\n        model_id=None,\n        deployment_name=\"deployment_name\",\n        allow_truss_download=allow_truss_download,\n    )\n    assert version_handle.version_id == \"model_version_id\"\n    assert version_handle.model_id == \"model_id\"\n\n    create_model_mock = (\n        api.create_development_model_from_truss\n        if is_draft\n        else api.create_model_from_truss\n    )\n    create_model_mock.assert_called_once()\n    _, kwargs = create_model_mock.call_args\n    assert kwargs[\"allow_truss_download\"] is allow_truss_download\n\n\ndef test_validate_truss_config():\n    def mock_validate_truss(config):\n        if config == {}:\n            return {\"success\": True, \"details\": json.dumps({})}\n        elif \"hi\" in config:\n            return {\"success\": False, \"details\": json.dumps({\"errors\": [\"error\"]})}\n        else:\n            return {\n                \"success\": False,\n                \"details\": json.dumps({\"errors\": [\"error\", \"and another one\"]}),\n            }\n\n    api = MagicMock()\n    api.validate_truss.side_effect = mock_validate_truss\n\n    assert core.validate_truss_config(api, {}) is None\n    with pytest.raises(\n        ValidationError, match=\"Validation failed with the following errors:\\n  error\"\n    ):\n        core.validate_truss_config(api, {\"hi\": \"hi\"})\n    with pytest.raises(\n        ValidationError,\n        match=\"Validation failed with the following errors:\\n  error\\n  and another one\",\n    ):\n        core.validate_truss_config(api, {\"should_error\": \"hi\"})"
