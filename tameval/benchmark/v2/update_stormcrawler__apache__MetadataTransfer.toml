[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/stormcrawler"
sha = "9d4b0302a7859f9f24caa1fe3cdabb498f968112"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl core -Dtest=MetadataTransferTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl core -DtargetClasses=**.MetadataTransfer  -DtargetTests=**.MetadataTransferTest  -DoutputFormats=XML"
coverage_report_path = "core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "core/src/test/java/org/apache/stormcrawler/util/MetadataTransferTest.java"
focal_file_path = "core/src/main/java/org/apache/stormcrawler/util/MetadataTransfer.java"
test_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/test/java/org/apache/stormcrawler/util/MetadataTransferTest.java"
focal_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/main/java/org/apache/stormcrawler/util/MetadataTransfer.java"
first_commit_date = "2024-03-28"
last_commit_date = "2024-05-21"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stormcrawler.util;\n\nimport java.net.MalformedURLException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.stormcrawler.Metadata;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class MetadataTransferTest {\n    @Test\n    public void testTransfer() throws MalformedURLException {\n        Map<String, Object> conf = new HashMap<>();\n        conf.put(MetadataTransfer.trackDepthParamName, true);\n        conf.put(MetadataTransfer.metadataTransferParamName, List.of(\"cookie.*\"));\n        MetadataTransfer mdt = MetadataTransfer.getInstance(conf);\n\n        Metadata parentMD = new Metadata();\n        parentMD.addValue(\"cookie.id\", \"42\");\n        parentMD.addValue(\"cookie.source\", \"example.com\");\n        parentMD.addValue(\"fetchInterval\", \"200\");\n\n        Metadata outlinkMD =\n                mdt.getMetaForOutlink(\n                        \"http://www.example.com/outlink.html\", \"http://www.example.com\", parentMD);\n\n        // test the value of track seed, depth and fetch fields\n        Assert.assertEquals(\"1\", outlinkMD.getFirstValue(MetadataTransfer.depthKeyName));\n        Set<String> expectedFields =\n                Set.of(\n                        MetadataTransfer.urlPathKeyName,\n                        MetadataTransfer.depthKeyName,\n                        \"cookie.id\",\n                        \"cookie.source\");\n        Assert.assertEquals(expectedFields, outlinkMD.keySet());\n        String[] urlpath = outlinkMD.getValues(MetadataTransfer.urlPathKeyName);\n        Assert.assertEquals(1, urlpath.length);\n    }\n\n    @Test\n    public void testCustomTransferClass() throws MalformedURLException {\n        Map<String, Object> conf = new HashMap<>();\n        conf.put(MetadataTransfer.metadataTransferClassParamName, \"thisclassnameWillNEVERexist\");\n        boolean hasThrownException = false;\n        try {\n            MetadataTransfer.getInstance(conf);\n        } catch (Exception e) {\n            hasThrownException = true;\n        }\n        Assert.assertEquals(true, hasThrownException);\n\n        conf = new HashMap<>();\n        conf.put(\n                MetadataTransfer.metadataTransferClassParamName,\n                myCustomTransferClass.class.getName());\n        hasThrownException = false;\n        try {\n            MetadataTransfer.getInstance(conf);\n        } catch (Exception e) {\n            hasThrownException = true;\n        }\n        Assert.assertEquals(false, hasThrownException);\n    }\n\n    @Test\n    public void testFilterWithAsterisk() {\n        Metadata metadata = new Metadata();\n        metadata.addValue(\"fetch.statusCode\", \"500\");\n        metadata.addValue(\"fetch.error.count\", \"2\");\n        metadata.addValue(\"fetch.exception\", \"java.lang.Exception\");\n        metadata.addValue(\"fetchInterval\", \"200\");\n        metadata.addValue(\"isFeed\", \"true\");\n        metadata.addValue(\"depth\", \"1\");\n\n        // test for empty metadata.persist list\n        Map<String, Object> conf = new HashMap<>();\n        conf.put(MetadataTransfer.metadataPersistParamName, List.of());\n        MetadataTransfer mdt = MetadataTransfer.getInstance(conf);\n        Metadata filteredMetadata = mdt.filter(metadata);\n        Assert.assertEquals(2, filteredMetadata.size());\n\n        // test for metadata.persist list with asterisk entry\n        conf = new HashMap<>();\n        conf.put(MetadataTransfer.metadataPersistParamName, List.of(\"fetch*\"));\n        mdt = MetadataTransfer.getInstance(conf);\n        filteredMetadata = mdt.filter(metadata);\n        Assert.assertEquals(5, filteredMetadata.size());\n\n        // test for metadata.persist list with asterisk entry after a dot\n        conf = new HashMap<>();\n        conf.put(MetadataTransfer.metadataPersistParamName, List.of(\"fetch.*\"));\n        mdt = MetadataTransfer.getInstance(conf);\n        filteredMetadata = mdt.filter(metadata);\n        Assert.assertEquals(4, filteredMetadata.size());\n\n        // test for persist all metadata\n        conf = new HashMap<>();\n        conf.put(MetadataTransfer.metadataPersistParamName, List.of(\"*\"));\n        mdt = MetadataTransfer.getInstance(conf);\n        filteredMetadata = mdt.filter(metadata);\n        Assert.assertEquals(6, filteredMetadata.size());\n    }\n}\n\nclass myCustomTransferClass extends MetadataTransfer {}"
