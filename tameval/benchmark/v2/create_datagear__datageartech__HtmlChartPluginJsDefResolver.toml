[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "datageartech/datagear"
sha = "0cde3799fad38f74d53c73e087b0e3296237e466"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl datagear-analysis -Dtest=HtmlChartPluginJsDefResolverTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl datagear-analysis -DtargetClasses=**.HtmlChartPluginJsDefResolver  -DtargetTests=**.HtmlChartPluginJsDefResolverTest  -DoutputFormats=XML"
coverage_report_path = "datagear-analysis/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "datagear-analysis/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 86.0
original_coverage = 86.0
mutation_kill_rate = 73.0
original_mutation_kill_rate = 73.0
covered_lines = [ 74, 75, 86, 89, 93, 94, 98, 111, 112, 114, 116, 117, 119, 124, 125, 127, 128, 130, 132, 135, 137, 138, 140, 142, 144, 146, 148, 149, 152, 154, 157, 159, 166, 167, 169, 171, 172, 174, 175, 177, 178, 179, 181, 184, 185, 189, 202, 204, 206, 208, 210, 212, 214, 216, 217, 220, 222, 225, 227, 228, 231, 233, 235, 239, 241, 258, 259, 260, 264, 279, 284, 285,]
missed_lines = [ 87, 163, 164, 201, 237, 249, 253, 254, 269, 270, 274, 290,]

[input_info]
test_file_path = "datagear-analysis/src/test/java/org/datagear/analysis/support/html/HtmlChartPluginJsDefResolverTest.java"
focal_file_path = "datagear-analysis/src/main/java/org/datagear/analysis/support/html/HtmlChartPluginJsDefResolver.java"
test_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-analysis/src/test/java/org/datagear/analysis/support/html/HtmlChartPluginJsDefResolverTest.java"
focal_file_url = "https://github.com/datageartech/datagear/blob/0cde3799fad38f74d53c73e087b0e3296237e466/datagear-analysis/src/main/java/org/datagear/analysis/support/html/HtmlChartPluginJsDefResolver.java"
first_commit_date = "2020-01-23"
last_commit_date = "2024-03-15"
test_file_content = "/*\n * Copyright 2018-present datagear.tech\n *\n * This file is part of DataGear.\n *\n * DataGear is free software: you can redistribute it and/or modify it under the terms of\n * the GNU Lesser General Public License as published by the Free Software Foundation,\n * either version 3 of the License, or (at your option) any later version.\n *\n * DataGear is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License along with DataGear.\n * If not, see <https://www.gnu.org/licenses/>.\n */\n\npackage org.datagear.analysis.support.html;\n\nimport java.io.IOException;\n\nimport org.datagear.analysis.support.html.HtmlChartPluginJsDefResolver.JsDefContent;\nimport org.junit.Assert;\nimport org.junit.Test;\n\n/**\n * {@linkplain HtmlChartPluginJsDefResolver}单元测试类。\n * \n * @author datagear@163.com\n *\n */\npublic class HtmlChartPluginJsDefResolverTest\n{\n\tprivate HtmlChartPluginJsDefResolver resolver = new HtmlChartPluginJsDefResolver();\n\n\t@Test\n\tpublic void resolveTest() throws IOException\n\t{\n\t\t// 无引号\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', renderer:{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', renderer:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', renderer:{render:function() {}}, b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', renderer:{}, b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{renderer:{render:function() {}}, a: 'a', b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{renderer:{}, a: 'a', b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 单引号\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', 'renderer':{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', 'renderer':{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', 'renderer':{render:function() {}}, b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', 'renderer':{}, b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{'renderer':{render:function() {}}, a: 'a', b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{'renderer':{}, a: 'a', b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 双引号\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', \\\"renderer\\\":{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', \\\"renderer\\\":{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', \\\"renderer\\\":{render:function() {}}, b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', \\\"renderer\\\":{}, b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{\\\"renderer\\\":{render:function() {}}, a: 'a', b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{\\\"renderer\\\":{}, a: 'a', b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 带注释\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', /*sdf*/renderer/*sdf*/:{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', /*sdf*/renderer/*sdf*/:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', /*sdf*/ renderer /*sdf*/ :{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', /*sdf*/ renderer /*sdf*/ :{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', //sdf\\nrenderer//sdf\\n:{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', //sdf\\nrenderer//sdf\\n:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b',  //sdf\\n renderer //sdf\\n :{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b',  //sdf\\n renderer //sdf\\n :{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 复杂内容\n\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b',  //sdf\\n renderer //sdf\\n :{render:function() { if(a==b) {}; /*sdf*/  \\n\\n //sdf\\n var a= {};   }}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b',  //sdf\\n renderer //sdf\\n :{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() { if(a==b) {}; /*sdf*/  \\n\\n //sdf\\n var a= {};   }}\",\n\t\t\t\t\tcontent.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', renderer: {render:function() { var options = { tooltip: {formatter: \\\"{a} <br/>{b} : {c}%\\\"} }; }}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', renderer:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\n\t\t\t\t\t\" {render:function() { var options = { tooltip: {formatter: \\\"{a} <br/>{b} : {c}%\\\"} }; }}\",\n\t\t\t\t\tcontent.getPluginRenderer());\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void resolveTestForOldVersion() throws IOException\n\t{\n\t\t// 无引号\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', chartRenderer:{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', chartRenderer:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', chartRenderer:{render:function() {}}, b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', chartRenderer:{}, b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{chartRenderer:{render:function() {}}, a: 'a', b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{chartRenderer:{}, a: 'a', b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 单引号\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', 'chartRenderer':{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', 'chartRenderer':{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', 'chartRenderer':{render:function() {}}, b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', 'chartRenderer':{}, b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{'chartRenderer':{render:function() {}}, a: 'a', b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{'chartRenderer':{}, a: 'a', b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 双引号\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', \\\"chartRenderer\\\":{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', \\\"chartRenderer\\\":{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', \\\"chartRenderer\\\":{render:function() {}}, b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', \\\"chartRenderer\\\":{}, b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{\\\"chartRenderer\\\":{render:function() {}}, a: 'a', b : 'b'}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{\\\"chartRenderer\\\":{}, a: 'a', b : 'b'}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 带注释\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', /*sdf*/chartRenderer/*sdf*/:{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', /*sdf*/chartRenderer/*sdf*/:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', /*sdf*/ chartRenderer /*sdf*/ :{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', /*sdf*/ chartRenderer /*sdf*/ :{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', //sdf\\nchartRenderer//sdf\\n:{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', //sdf\\nchartRenderer//sdf\\n:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b',  //sdf\\n chartRenderer //sdf\\n :{render:function() {}}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b',  //sdf\\n chartRenderer //sdf\\n :{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() {}}\", content.getPluginRenderer());\n\t\t}\n\n\t\t// 复杂内容\n\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b',  //sdf\\n chartRenderer //sdf\\n :{render:function() { if(a==b) {}; /*sdf*/  \\n\\n //sdf\\n var a= {};   }}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b',  //sdf\\n chartRenderer //sdf\\n :{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\"{render:function() { if(a==b) {}; /*sdf*/  \\n\\n //sdf\\n var a= {};   }}\",\n\t\t\t\t\tcontent.getPluginRenderer());\n\t\t}\n\t\t{\n\t\t\tString text = \"{a: 'a', b : 'b', chartRenderer: {render:function() { var options = { tooltip: {formatter: \\\"{a} <br/>{b} : {c}%\\\"} }; }}}\";\n\n\t\t\tJsDefContent content = resolver.resolve(text);\n\n\t\t\tAssert.assertEquals(\"{a: 'a', b : 'b', chartRenderer:{}}\", content.getPluginJson());\n\t\t\tAssert.assertEquals(\n\t\t\t\t\t\" {render:function() { var options = { tooltip: {formatter: \\\"{a} <br/>{b} : {c}%\\\"} }; }}\",\n\t\t\t\t\tcontent.getPluginRenderer());\n\t\t}\n\t}\n}\n"
