[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.18"

[repo_info]
repository = "bytedance/gg"
sha = "420f8369dd6e235b8124691860e822d015969fb6"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out collection/list/list.go collection/list/list_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting collection/list/list.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 80.0
original_coverage = 100.0
mutation_kill_rate = 60.0
original_mutation_kill_rate = 68.0
covered_lines = [ 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 63, 64, 65, 66, 67, 68, 71, 75, 78, 79, 80, 81, 82, 86, 87, 88, 89, 90, 94, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 127, 131, 132, 133, 134, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 156, 159, 160, 161, 162, 167, 172, 178, 183, 189, 194, 200, 205, 211, 215, 221, 225, 230, 231, 232, 233, 234, 239, 240, 241, 242, 243,]
missed_lines = [ 95, 96, 97, 128, 129, 130, 168, 169, 170, 179, 180, 181, 190, 191, 192, 201, 202, 203, 212, 213, 214, 222, 223, 224,]

[input_info]
test_file_path = "collection/list/list_test.go"
focal_file_path = "collection/list/list.go"
test_file_url = "https://github.com/bytedance/gg/blob/420f8369dd6e235b8124691860e822d015969fb6/collection/list/list_test.go"
focal_file_url = "https://github.com/bytedance/gg/blob/420f8369dd6e235b8124691860e822d015969fb6/collection/list/list.go"
first_commit_date = "2025-06-26"
last_commit_date = "2025-06-26"
test_file_content = "// Copyright 2025 Bytedance Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage list\n\nimport (\n\t\"testing\"\n\n\t\"github.com/bytedance/gg/internal/assert\"\n)\n\nfunc TestNew(t *testing.T) {\n\tl := New[int]()\n\tassert.NotNil(t, l)\n\tassert.Equal(t, 0, l.Len())\n\tassert.Nil(t, l.Front())\n\tassert.Nil(t, l.Back())\n}\n\nfunc TestListPush(t *testing.T) {\n\tl := New[int]()\n\tl.PushBack(3)  // 3\n\tl.PushBack(4)  // 3->4\n\tl.PushFront(1) // 1->3->4\n\tl.PushFront(2) // 2->1->3->4\n\n\tassert.Equal(t, 4, l.Len())\n\tassert.Equal(t, 2, l.Front().Value)\n\tassert.Equal(t, 1, l.Front().Next().Value)\n\tassert.Equal(t, 3, l.Front().Next().Next().Value)\n\tassert.Equal(t, 4, l.Front().Next().Next().Next().Value)\n\tassert.Nil(t, l.Front().Next().Next().Next().Next())\n\tassert.Equal(t, 4, l.Back().Value)\n\tassert.Equal(t, 3, l.Back().Prev().Value)\n\tassert.Equal(t, 1, l.Back().Prev().Prev().Value)\n\tassert.Equal(t, 2, l.Back().Prev().Prev().Prev().Value)\n\tassert.Nil(t, l.Back().Prev().Prev().Prev().Prev())\n}\n\nfunc TestListRemove(t *testing.T) {\n\tl := New[int]()\n\te := l.PushBack(1)\n\tl.Remove(e)\n\n\tassert.Equal(t, 0, l.Len())\n\tassert.Nil(t, l.Front())\n\tassert.Nil(t, l.Back())\n}\n\nfunc TestListInsert(t *testing.T) {\n\tl := New[int]()\n\te1 := l.PushBack(2)         // 2\n\te2 := l.InsertBefore(1, e1) // 1->2\n\tl.InsertAfter(3, e1)        // 1->2->3\n\tl.InsertBefore(4, e2)       // 4->1->2->3\n\n\tassert.Equal(t, 4, l.Len())\n\tassert.Equal(t, 4, l.Front().Value)\n\tassert.Equal(t, 1, l.Front().Next().Value)\n\tassert.Equal(t, 2, l.Back().Prev().Value)\n\tassert.Equal(t, 3, l.Back().Value)\n}\n\nfunc TestListMoveToFront(t *testing.T) {\n\tl := New[int]()\n\tl.PushBack(1)\n\tl.PushBack(2)\n\te := l.PushBack(3)\n\tl.MoveToFront(e)\n\n\tassert.Equal(t, 3, l.Front().Value)\n\tassert.Equal(t, 2, l.Back().Value)\n}\n\nfunc TestListMove(t *testing.T) {\n\tl := New[int]()\n\te1 := l.PushBack(1) // 1\n\te2 := l.PushBack(2) // 1->2\n\te3 := l.PushBack(3) // 1->2->3\n\te4 := l.PushBack(4) // 1->2->3->4\n\te5 := l.PushBack(5) // 1->2->3->4->5\n\n\tl.MoveToBack(e1)     // 2->3->4->5->1\n\tl.MoveToFront(e5)    // 5->2->3->4->1\n\tl.MoveAfter(e2, e3)  // 5->3->2->4->1\n\tl.MoveBefore(e4, e3) // 5->4->3->2->1\n\n\tassert.Equal(t, 5, l.Front().Value)\n\tassert.Equal(t, 4, l.Front().Next().Value)\n\tassert.Equal(t, 3, l.Front().Next().Next().Value)\n\tassert.Equal(t, 2, l.Back().Prev().Value)\n\tassert.Equal(t, 1, l.Back().Value)\n}\n\nfunc TestListPushBackList(t *testing.T) {\n\tl1 := New[int]()\n\tl1.PushBack(1) // 1\n\tl1.PushBack(2) // 1->2\n\n\tl2 := New[int]()\n\tl2.PushBack(3)      // 3\n\tl2.PushBackList(l1) // 3->1->2\n\n\tassert.Equal(t, 3, l2.Len())\n\tassert.Equal(t, 3, l2.Front().Value)\n\tassert.Equal(t, 2, l2.Back().Value)\n}\n\nfunc TestListPushFrontList(t *testing.T) {\n\tl1 := New[int]()\n\tl1.PushBack(1) // 1\n\tl1.PushBack(2) // 1->2\n\n\tl2 := New[int]()\n\tl2.PushBack(3) // 3\n\tl2.PushFrontList(l1)\n\n\tassert.Equal(t, 3, l2.Len())\n\tassert.Equal(t, 1, l2.Front().Value)\n\tassert.Equal(t, 3, l2.Back().Value)\n}"
