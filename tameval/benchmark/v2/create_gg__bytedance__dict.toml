[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.18"

[repo_info]
repository = "bytedance/gg"
sha = "420f8369dd6e235b8124691860e822d015969fb6"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/jsonbuilder/dict.go internal/jsonbuilder/dict_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/jsonbuilder/dict.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 81.0
original_coverage = 81.0
mutation_kill_rate = 66.0
original_mutation_kill_rate = 66.0
covered_lines = [ 33, 34, 35, 38, 47, 48, 49, 50, 51, 52, 55, 56, 60, 61, 62, 63, 64, 65, 69, 74, 75, 76, 77, 80, 81, 82, 83, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120,]
missed_lines = [ 39, 40, 41, 42, 43, 44, 53, 54, 66, 67, 68, 70, 71, 72,]

[input_info]
test_file_path = "internal/jsonbuilder/dict_test.go"
focal_file_path = "internal/jsonbuilder/dict.go"
test_file_url = "https://github.com/bytedance/gg/blob/420f8369dd6e235b8124691860e822d015969fb6/internal/jsonbuilder/dict_test.go"
focal_file_url = "https://github.com/bytedance/gg/blob/420f8369dd6e235b8124691860e822d015969fb6/internal/jsonbuilder/dict.go"
first_commit_date = "2025-05-20"
last_commit_date = "2025-05-20"
test_file_content = "// Copyright 2025 Bytedance Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage jsonbuilder\n\nimport (\n\t\"encoding/json\"\n\t\"testing\"\n\n\t\"github.com/bytedance/gg/internal/assert\"\n)\n\nfunc TestDict(t *testing.T) {\n\t{\n\t\ts := map[int]string{1: \"1\", 2: \"2\", 3: \"3\", 4: \"4\", 5: \"5\"}\n\t\td := NewDict()\n\t\tfor k, v := range s {\n\t\t\tassert.Nil(t, d.Store(k, v))\n\t\t}\n\t\td.Sort()\n\t\tbs, err := d.Build()\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, []byte(`{\"1\":\"1\",\"2\":\"2\",\"3\":\"3\",\"4\":\"4\",\"5\":\"5\"}`), bs)\n\t}\n\n\t{\n\t\ts := map[int]string{}\n\t\td := NewDict()\n\t\tfor k, v := range s {\n\t\t\tassert.Nil(t, d.Store(k, v))\n\t\t}\n\t\tbs, err := d.Build()\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, []byte(`{}`), bs)\n\t}\n\n\t{\n\t\ts := map[int]string{1: \"1\"}\n\t\td := NewDict()\n\t\tfor k, v := range s {\n\t\t\tassert.Nil(t, d.Store(k, v))\n\t\t}\n\t\tbs, err := d.Build()\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, []byte(`{\"1\":\"1\"}`), bs)\n\t}\n\n\t{\n\t\td := NewDict()\n\t\tassert.Nil(t, d.Store(\"a\", \"b\"))\n\t\tassert.NotNil(t, d.Store(1.4, \"b\")) // float key is not supported\n\t\tassert.Nil(t, d.Store(1, 1.2))\n\t\tassert.Nil(t, d.Store(\"w\", []int{1}))\n\n\t\tbs, err := d.Build()\n\t\tassert.Nil(t, err)\n\t\tt.Log(string(bs))\n\t\tassert.Equal(t, []byte(`{\"a\":\"b\",\"1\":1.2,\"w\":[1]}`), bs)\n\t}\n\n\t{\n\t\tvar d *Dict\n\t\tbs, err := d.Build()\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, []byte(`null`), bs)\n\t}\n}\n\nfunc TestDict2(t *testing.T) {\n\n\ttestCases := []map[string]interface{}{\n\t\t{\n\t\t\t\"Name\":       \"John Doe\",\n\t\t\t\"Age\":        float64(30),\n\t\t\t\"Profession\": \"Software Engineer\",\n\t\t},\n\t\t{\n\t\t\t\"Name\":       \"John Doe\",\n\t\t\t\"Age\":        float64(1 / 3),\n\t\t\t\"Profession\": \"Software Engineer\",\n\t\t},\n\t\t{\n\t\t\t\"customerID\": \"1234\",\n\t\t\t\"amount\":     99.99,\n\t\t\t\"items\": []interface{}{\n\t\t\t\tmap[string]interface{}{\"id\": float64(1), \"name\": \"Apple\", \"price\": 1.99},\n\t\t\t\tmap[string]interface{}{\"id\": float64(2), \"name\": \"Banana\", \"price\": 2.99},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"author\": \"Jane Austen\",\n\t\t\t\"books\": []interface{}{\n\t\t\t\t\"Pride and Prejudice\",\n\t\t\t\t\"Sense and Sensibility\",\n\t\t\t\t\"Emma\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t\"pi\":       3.14159265359,\n\t\t\t\"e\":        2.71828182846,\n\t\t\t\"sqrt_two\": 1.41421356237,\n\t\t\t\"phi\":      1.61803398875,\n\t\t},\n\t}\n\n\tfor _, c := range testCases {\n\t\tdict := NewDict()\n\t\tfor k, v := range c {\n\t\t\tdict.Store(k, v)\n\t\t}\n\t\tout, err := dict.Build()\n\t\tassert.Nil(t, err)\n\t\tvar m map[string]interface{}\n\t\tassert.Nil(t, json.Unmarshal(out, &m))\n\t\tt.Log(c, len(c))\n\t\tt.Log(m, len(m))\n\t\tassert.Equal(t, c, m)\n\t}\n\n}\n"
