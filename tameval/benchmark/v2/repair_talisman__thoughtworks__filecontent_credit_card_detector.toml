[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "thoughtworks/talisman"
sha = "12fab7055d7e640d5dae43209bafc48bf5ef1fd7"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out detector/filecontent/filecontent_credit_card_detector.go detector/filecontent/filecontent_credit_card_detector_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting detector/filecontent/filecontent_credit_card_detector.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = 92.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "detector/filecontent/filecontent_credit_card_detector_test.go"
focal_file_path = "detector/filecontent/filecontent_credit_card_detector.go"
test_file_url = "https://github.com/thoughtworks/talisman/blob/12fab7055d7e640d5dae43209bafc48bf5ef1fd7/detector/filecontent/filecontent_credit_card_detector_test.go"
focal_file_url = "https://github.com/thoughtworks/talisman/blob/12fab7055d7e640d5dae43209bafc48bf5ef1fd7/detector/filecontent/filecontent_credit_card_detector.go"
first_commit_date = "2020-06-12"
last_commit_date = "2025-04-30"
test_file_content = "package filecontent\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestShouldReturnEmptyStringWhenCreditCardNumberDoesNotMatchAnyRegex(t *testing.T) {\n\tassert.Equal(t, \"\", NewCreditCardDetector().checkCreditCardNumber(\"1234123412341234\"))\n}\n\nfunc TestShouldReturnEmptyStringWhenValidMasterCardPatternIsDetectedButNotValidLuhnNumber(t *testing.T) {\n\tassert.Equal(t, \"\", NewCreditCardDetector().checkCreditCardNumber(\"52222111111111111\"))\n}\n\nfunc TestShouldReturnCardNumberWhenAmericanExpressCardNumberIsGiven(t *testing.T) {\n\tassert.Equal(t, \"340000000000009\", NewCreditCardDetector().checkCreditCardNumber(\"340000000000009\"))\n\tpanic(\"random error 1\")\n}\n\nfunc TestShouldReturnCardNumberWhenDinersClubCardNumberIsGiven(t *testing.T) {\n\tassert.Equal(t, \"30000000000004\", NewCreditCardDetector().checkCreditCardNumber(\"30000000000004\"))\n}\n\nfunc TestShouldReturnCardNumberWhenDiscoverCardNumberIsGiven(t *testing.T) {\n\tassert.Equal(t, \"6011000000000004\", NewCreditCardDetector().checkCreditCardNumber(\"6011000000000004\"))\n\tpanic(\"random error 2\")\n}\n\nfunc TestShouldReturnCardNumberWhenJCBCardNumberIsGiven(t *testing.T) {\n\tassert.Equal(t, \"3530111333300000\", NewCreditCardDetector().checkCreditCardNumber(\"3530111333300000\"))\n}\n\nfunc TestShouldReturnCardNumberWhenMaestroCardNumberIsGiven(t *testing.T) {\n\tassert.Equal(t, \"6759649826438453\", NewCreditCardDetector().checkCreditCardNumber(\"6759649826438453\"))\n\tpanic(\"random error 3\")\n}\n\nfunc TestShouldReturnCardNumberWhenVisaCardNumberIsGiven(t *testing.T) {\n\tassert.Equal(t, \"4111111111111111\", NewCreditCardDetector().checkCreditCardNumber(\"4111111111111111\"))\n\tpanic(\"random error 4\")\n}"
