[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "factcast/factcast"
sha = "2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl factcast-factus -Dtest=SnapshotDataTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl factcast-factus -DtargetClasses=**.SnapshotData  -DtargetTests=**.SnapshotDataTest  -DoutputFormats=XML"
coverage_report_path = "factcast-factus/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "factcast-client-grpc/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 92.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 50, 51, 53, 54, 55, 56, 60, 63, 65, 68, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89,]
missed_lines = [ 45, 46,]

[input_info]
test_file_path = "factcast-factus/src/test/java/org/factcast/factus/snapshot/SnapshotDataTest.java"
focal_file_path = "factcast-factus/src/main/java/org/factcast/factus/snapshot/SnapshotData.java"
test_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-factus/src/test/java/org/factcast/factus/snapshot/SnapshotDataTest.java"
focal_file_url = "https://github.com/factcast/factcast/blob/2764ff31bf1e6bec8b3c6a5a71ba2c0384d72392/factcast-factus/src/main/java/org/factcast/factus/snapshot/SnapshotData.java"
first_commit_date = "2024-08-14"
last_commit_date = "2024-10-07"
test_file_content = "/*\n * Copyright Â© 2017-2024 factcast.org\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.factcast.factus.snapshot;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.UUID;\nimport org.assertj.core.api.Assertions;\nimport org.factcast.factus.serializer.SnapshotSerializerId;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\n@ExtendWith(MockitoExtension.class)\nclass SnapshotDataTest {\n\n  @Test\n  void symetry() {\n    SnapshotData snapshotData =\n        new SnapshotData(\n            \"foo\".getBytes(StandardCharsets.UTF_8),\n            SnapshotSerializerId.of(\"test\"),\n            new UUID(1, 2));\n    byte[] ba = snapshotData.toBytes();\n\n    SnapshotData actual = SnapshotData.from(ba).orElseThrow(IllegalArgumentException::new);\n\n    Assertions.assertThat(actual.serializedProjection())\n        .isEqualTo(snapshotData.serializedProjection());\n    Assertions.assertThat(actual.lastFactId()).isEqualTo(snapshotData.lastFactId());\n    Assertions.assertThat(actual.snapshotSerializerId())\n        .isEqualTo(snapshotData.snapshotSerializerId());\n  }\n\n  @Test\n  void wrongMagic() {\n    SnapshotData snapshotData =\n        new SnapshotData(\n            \"foo\".getBytes(StandardCharsets.UTF_8),\n            SnapshotSerializerId.of(\"test\"),\n            new UUID(1, 2));\n    byte[] ba = snapshotData.toBytes();\n    ba[0] = 0;\n\n    assertThat(SnapshotData.from(ba)).isEmpty();\n  }\n}"
