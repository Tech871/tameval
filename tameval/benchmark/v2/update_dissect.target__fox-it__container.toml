[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "fox-it/dissect.target"
sha = "12306a3a840971af7da3dbd338527eb3360dbbd9"
bench_version = 1

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=dissect/target/container.py -m pytest -q --junit-xml=test_output.xml tests/test_container.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target dissect.target.container --unit-test tests.test_container --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target dissect/target/container.py --unit-test tests/test_container.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 84.0
original_coverage = 84.0
mutation_kill_rate = 43.0
original_mutation_kill_rate = 100.0
covered_lines = [ 0, 2, 3, 4, 5, 7, 8, 9, 11, 14, 15, 17, 18, 20, 23, 38, 39, 41, 42, 43, 46, 48, 51, 54, 55, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 89, 90, 91, 92, 99, 103, 104, 118, 119, 135, 139, 143, 158, 162, 166, 171, 174, 186, 187, 189, 192, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 225, 226, 227, 229, 230, 231, 233, 236, 237, 240, 241, 243, 244, 245, 246, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260,]
missed_lines = [ 12, 49, 52, 93, 94, 95, 96, 97, 101, 116, 133, 137, 141, 156, 160, 164, 238, 239, 248,]

[input_info]
test_file_path = "tests/test_container.py"
focal_file_path = "dissect/target/container.py"
test_file_url = "https://github.com/fox-it/dissect.target/blob/12306a3a840971af7da3dbd338527eb3360dbbd9/tests/test_container.py"
focal_file_url = "https://github.com/fox-it/dissect.target/blob/12306a3a840971af7da3dbd338527eb3360dbbd9/dissect/target/container.py"
first_commit_date = "2022-07-20"
last_commit_date = "2025-02-20"
test_file_content = "import struct\nfrom io import BytesIO\nfrom pathlib import Path\nfrom unittest.mock import Mock, patch\n\nimport pytest\n\nfrom dissect.target import container\nfrom dissect.target.containers import raw, vhd\nfrom dissect.target.exceptions import ContainerError\n\n\n@pytest.fixture\ndef mocked_ewf_detect():\n    mocked_ewf = Mock()\n    mocked_ewf.EwfContainer.detect.return_value = True\n    mocked_ewf.EwfContainer.detect\n    with patch.object(container, \"CONTAINERS\", [mocked_ewf.EwfContainer]):\n        yield mocked_ewf.EwfContainer\n\n\n@pytest.mark.parametrize(\n    \"path, expected_output\",\n    [\n        (\"hello\", Path(\"hello\")),\n        ([\"hello\"], [Path(\"hello\")]),\n        ([Path(\"hello\")], [Path(\"hello\")]),\n    ],\n)\ndef test_open_inputs(mocked_ewf_detect: Mock, path, expected_output):\n    container.open(path)\n    mocked_ewf_detect.assert_called_with(expected_output)\n\n\ndef test_open_fallback_fh(tmp_path):\n    # Create a valid VHD file\n    fake_vhd = (\n        (bytes(range(256)) * 2)\n        + b\"conectix\"\n        + (b\"\\x00\" * 8)\n        + (b\"\\xFF\" * 8)\n        + (b\"\\x00\" * 24)\n        + struct.pack(\">Q\", 512)\n        + (b\"\\x00\" * 455)\n    )\n\n    tmp_with_ext = tmp_path.joinpath(\"testfile.vhd\")\n    tmp_without_ext = tmp_path.joinpath(\"testfile\")\n    tmp_with_wrong_ext = tmp_path.joinpath(\"testfile.qcow2\")\n\n    for path in [tmp_with_ext, tmp_without_ext, tmp_with_wrong_ext]:\n        path.write_bytes(fake_vhd)\n\n        assert isinstance(container.open(path), vhd.VhdContainer)\n        assert vhd.VhdContainer.detect(path)\n\n        with path.open(\"rb\") as fh:\n            assert isinstance(container.open(fh), vhd.VhdContainer)\n\n        with path.open(\"rb\") as fh:\n            assert vhd.VhdContainer.detect(fh)\n\n    tmp_nonexistent = tmp_path.joinpath(\"doesntexist\")\n    with pytest.raises(ContainerError):\n        container.open(tmp_nonexistent)\n\n    assert not vhd.VhdContainer.detect(tmp_nonexistent)\n\n    tmp_dummy = tmp_path.joinpath(\"testdummy\")\n    tmp_dummy.write_bytes(b\"\\x00\" * 1024)\n    assert isinstance(container.open(tmp_dummy), raw.RawContainer)\n    assert not vhd.VhdContainer.detect(tmp_dummy)\n\n\ndef test_reset_file_position() -> None:\n    fh = BytesIO(b\"\\x00\" * 8192)\n    fh.seek(512)\n\n    class MockContainer(container.Container):\n        def __init__(self, fh):\n            assert fh.tell() == 0\n            fh.seek(1024)\n            self.success = True\n\n        @staticmethod\n        def _detect_fh(fh, *args, **kwargs):\n            assert fh.tell() == 0\n            fh.seek(256)\n            return True\n\n    mock_container = Mock()\n    mock_container.MockContainer = MockContainer\n    with patch.object(container, \"CONTAINERS\", [mock_container.MockContainer]):\n        opened_container = container.open(fh)\n        assert isinstance(opened_container, mock_container.MockContainer)\n        assert opened_container.success\n        assert fh.tell() == 512"
