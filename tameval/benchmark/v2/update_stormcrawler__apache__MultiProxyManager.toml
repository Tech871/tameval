[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/stormcrawler"
sha = "9d4b0302a7859f9f24caa1fe3cdabb498f968112"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl core -Dtest=MultiProxyManagerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl core -DtargetClasses=**.MultiProxyManager  -DtargetTests=**.MultiProxyManagerTest  -DoutputFormats=XML"
coverage_report_path = "core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 82.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "core/src/test/java/org/apache/stormcrawler/proxy/MultiProxyManagerTest.java"
focal_file_path = "core/src/main/java/org/apache/stormcrawler/proxy/MultiProxyManager.java"
test_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/test/java/org/apache/stormcrawler/proxy/MultiProxyManagerTest.java"
focal_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/main/java/org/apache/stormcrawler/proxy/MultiProxyManager.java"
first_commit_date = "2024-03-28"
last_commit_date = "2025-06-16"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stormcrawler.proxy;\n\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport org.apache.storm.Config;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass MultiProxyManagerTest {\n\n    @Test\n    void testMultiProxyManagerConstructorArray() {\n        String[] proxyStrings = {\n            \"http://example.com:8080\",\n            \"https://example.com:8080\",\n            \"http://user1:pass1@example.com:8080\",\n            \"sock5://user1:pass1@example.com:8080\",\n            \"http://example.com:80\",\n            \"sock5://example.com:64000\"\n        };\n        MultiProxyManager pm = new MultiProxyManager();\n        pm.configure(MultiProxyManager.ProxyRotation.RANDOM, proxyStrings);\n        Assertions.assertEquals(pm.proxyCount(), proxyStrings.length);\n    }\n\n    @Test\n    void testMultiProxyManagerConstructorFile() throws IOException {\n        String[] proxyStrings = {\n            \"http://example.com:8080\",\n            \"https://example.com:8080\",\n            \"http://user1:pass1@example.com:8080\",\n            \"sock5://user1:pass1@example.com:8080\",\n            \"http://example.com:80\",\n            \"sock5://example.com:64000\"\n        };\n        FileWriter writer = new FileWriter(\"/tmp/proxies.txt\", StandardCharsets.UTF_8);\n        for (String proxyString : proxyStrings) {\n            writer.write(\"# fake comment to test\" + \"\\n\");\n            writer.write(\"// fake comment to test\" + \"\\n\");\n            writer.write(\"       \" + \"\\n\");\n            writer.write(\"\\n\");\n            writer.write(proxyString + \"\\n\");\n        }\n        writer.close();\n        Config config = new Config();\n        config.put(\"http.proxy.file\", \"/tmp/proxies.txt\");\n        config.put(\"http.proxy.rotation\", \"ROUND_ROBIN\");\n        MultiProxyManager pm = new MultiProxyManager();\n        pm.configure(config);\n        Assertions.assertEquals(pm.proxyCount(), proxyStrings.length);\n        Files.deleteIfExists(Paths.get(\"/tmp/proxies.txt\"));\n    }\n\n    @Test\n    void testGetRandom() {\n        String[] proxyStrings = {\n            \"http://example.com:8080\",\n            \"https://example.com:8080\",\n            \"http://user1:pass1@example.com:8080\",\n            \"sock5://user1:pass1@example.com:8080\",\n            \"http://example.com:80\",\n            \"sock5://example.com:64000\"\n        };\n        MultiProxyManager pm = new MultiProxyManager();\n        pm.configure(MultiProxyManager.ProxyRotation.RANDOM, proxyStrings);\n        for (int i = 0; i < 1000; i++) {\n            SCProxy proxy = pm.getProxy(null);\n            Assertions.assertTrue(proxy.toString().length() > 0);\n        }\n    }\n\n    @Test\n    void testGetRoundRobin() {\n        String[] proxyStrings = {\n            \"http://example.com:8080\",\n            \"https://example.com:8080\",\n            \"http://user1:pass1@example.com:8080\",\n            \"sock5://user1:pass1@example.com:8080\",\n            \"http://example.com:80\",\n            \"sock5://example.com:64000\"\n        };\n        MultiProxyManager pm = new MultiProxyManager();\n        pm.configure(MultiProxyManager.ProxyRotation.ROUND_ROBIN, proxyStrings);\n        SCProxy proxy1 = pm.getProxy(null);\n        SCProxy proxy2 = pm.getProxy(null);\n        SCProxy proxy3 = pm.getProxy(null);\n        Assertions.assertNotEquals(proxy1.toString(), proxy2.toString());\n        Assertions.assertNotEquals(proxy1.toString(), proxy3.toString());\n        Assertions.assertNotEquals(proxy2.toString(), proxy1.toString());\n        Assertions.assertNotEquals(proxy2.toString(), proxy3.toString());\n        Assertions.assertNotEquals(proxy3.toString(), proxy1.toString());\n        Assertions.assertNotEquals(proxy3.toString(), proxy2.toString());\n        for (int i = 0; i < 3; i++) {\n            pm.getProxy(null);\n        }\n        SCProxy proxy4 = pm.getProxy(null);\n        SCProxy proxy5 = pm.getProxy(null);\n        SCProxy proxy6 = pm.getProxy(null);\n        Assertions.assertNotEquals(proxy4.toString(), proxy5.toString());\n        Assertions.assertNotEquals(proxy4.toString(), proxy6.toString());\n        Assertions.assertNotEquals(proxy5.toString(), proxy4.toString());\n        Assertions.assertNotEquals(proxy5.toString(), proxy6.toString());\n        Assertions.assertNotEquals(proxy6.toString(), proxy4.toString());\n        Assertions.assertNotEquals(proxy6.toString(), proxy5.toString());\n        Assertions.assertEquals(proxy1.toString(), proxy4.toString());\n        Assertions.assertEquals(proxy2.toString(), proxy5.toString());\n        Assertions.assertEquals(proxy3.toString(), proxy6.toString());\n    }\n\n    @Test\n    void testGetLeastUsed() {\n        String[] proxyStrings = {\n            \"http://example.com:8080\",\n            \"https://example.com:8080\",\n            \"http://user1:pass1@example.com:8080\",\n            \"sock5://user1:pass1@example.com:8080\",\n            \"http://example.com:80\",\n            \"sock5://example.com:64000\"\n        };\n        MultiProxyManager pm = new MultiProxyManager();\n        pm.configure(MultiProxyManager.ProxyRotation.LEAST_USED, proxyStrings);\n        SCProxy proxy1 = pm.getProxy(null);\n        SCProxy proxy2 = pm.getProxy(null);\n        SCProxy proxy3 = pm.getProxy(null);\n        Assertions.assertNotEquals(proxy1.toString(), proxy2.toString());\n        Assertions.assertNotEquals(proxy1.toString(), proxy3.toString());\n        Assertions.assertNotEquals(proxy2.toString(), proxy1.toString());\n        Assertions.assertNotEquals(proxy2.toString(), proxy3.toString());\n        Assertions.assertNotEquals(proxy3.toString(), proxy1.toString());\n        Assertions.assertNotEquals(proxy3.toString(), proxy2.toString());\n        Assertions.assertEquals(proxy1.getUsage(), 1);\n        Assertions.assertEquals(proxy2.getUsage(), 1);\n        Assertions.assertEquals(proxy3.getUsage(), 1);\n        for (int i = 0; i < 3; i++) {\n            pm.getProxy(null);\n        }\n        SCProxy proxy4 = pm.getProxy(null);\n        SCProxy proxy5 = pm.getProxy(null);\n        SCProxy proxy6 = pm.getProxy(null);\n        Assertions.assertNotEquals(proxy4.toString(), proxy5.toString());\n        Assertions.assertNotEquals(proxy4.toString(), proxy6.toString());\n        Assertions.assertNotEquals(proxy5.toString(), proxy4.toString());\n        Assertions.assertNotEquals(proxy5.toString(), proxy6.toString());\n        Assertions.assertNotEquals(proxy6.toString(), proxy4.toString());\n        Assertions.assertNotEquals(proxy6.toString(), proxy5.toString());\n        Assertions.assertEquals(proxy4.getUsage(), 2);\n        Assertions.assertEquals(proxy5.getUsage(), 2);\n        Assertions.assertEquals(proxy6.getUsage(), 2);\n        Assertions.assertEquals(proxy1.toString(), proxy4.toString());\n        Assertions.assertEquals(proxy2.toString(), proxy5.toString());\n        Assertions.assertEquals(proxy3.toString(), proxy6.toString());\n    }\n}"
