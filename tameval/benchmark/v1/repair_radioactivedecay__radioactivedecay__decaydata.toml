[meta]
task = "repair"
scenario = "repair_syntax_error"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "radioactivedecay/radioactivedecay"
sha = "95f428cc8079e2cc762b6a559fba85c8c5e01500"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=radioactivedecay/decaydata.py -m pytest -q --junit-xml=test_output.xml tests/test_decaydata.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target radioactivedecay.decaydata --unit-test tests.test_decaydata --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target radioactivedecay/decaydata.py --unit-test tests/test_decaydata.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tests/test_decaydata.py"
focal_file_path = "radioactivedecay/decaydata.py"
test_file_url = "https://github.com/radioactivedecay/radioactivedecay/blob/95f428cc8079e2cc762b6a559fba85c8c5e01500/tests/test_decaydata.py"
focal_file_url = "https://github.com/radioactivedecay/radioactivedecay/blob/95f428cc8079e2cc762b6a559fba85c8c5e01500/radioactivedecay/decaydata.py"
first_commit_date = "2020-06-02"
last_commit_date = "2025-01-09"
test_file_content = "\nimport unittest\n\nimport numpy as np\nfrom scipy import sparse\nfrom sympy import Integer, Matrix, log\nfrom sympy.matrices import SparseMatrix\n\nfrom radioactivedecay import decaydata, icrp107_ame2020_nubase2020\n\n\nclass TestFunctions(unittest.TestCase):\n    \"\"\"\n    Unit tests for the decaydata.py functions.\n    \"\"\"\n\n    # pylint: disable=protected-access\n\n    def test__csr_matrix_equal(self) -> None:\n        \"\"\"\n        Test function to check equality of two SciPy Compressed Sparse Row (CSR) matrices.\n        \"\"\"\n\n        matrix_a = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_b = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c = sparse.csr_matrix(([1.0], ([1], [0])), shape=(2, 2))\n        self.assertEqual(decaydata._csr_matrix_equal(matrix_a, matrix_b), True)\n        self.assertEqual(decaydata._csr_matrix_equal(matrix_a, matrix_c), False)\n\n\nclass TestDecayMatricesScipy(unittest.TestCase):\n    \"\"\"\n    Unit tests for the decaydata.py DecayMatricesScipy class.\n    \"\"\"\n\n    def test_instantiation(self) -> None:\n        \"\"\"\n        Test instantiation of DecayMatricesScipy objects.\n        \"\"\"\n\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([1.0], ([1], [1])), shape=(2, 2))\n        decay_mats = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertEqual(decay_mats.atomic_masses[0], 0.0)\n        self.assertEqual(decay_mats.atomic_masses[1], 0.0)\n        self.assertEqual(decay_mats.decay_consts[0], 0.0)\n        self.assertEqual(decay_mats.decay_consts[1], 0.0)\n        self.assertEqual(decay_mats.ln2, np.log(2))\n        self.assertEqual(decay_mats.matrix_c[0, 0], 1.0)\n        self.assertEqual(decay_mats.matrix_c_inv[1, 1], 1.0)\n        self.assertEqual(decay_mats.matrix_e[0, 0], 0.0)\n        self.assertEqual(decay_mats.matrix_e[1, 1], 0.0)\n        self.assertEqual(decay_mats.vector_n0[0], 0.0)\n        self.assertEqual(decay_mats.vector_n0[1], 0.0)\n\n    def test___eq__(self) -> None:\n        \"\"\"\n        Test DecayMatricesScipy equality.\n        \"\"\"\n\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        decay_mats_a = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        decay_mats_b = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertEqual(decay_mats_a, decay_mats_b)\n\n        self.assertFalse(decay_mats_a == \"random object\")\n\n    def test___ne__(self) -> None:\n        \"\"\"\n        Test DecayMatricesScipy inequal.\n        \"\"\"\n\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        decay_mats_a = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([2.0], ([0], [0])), shape=(2, 2))\n        decay_mats_b = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertNotEqual(decay_mats_a, decay_mats_b)\n\n        self.assertTrue(decay_mats_a != \"random object\")\n\n    def test___repr__(self) -> None:\n        \"\"\"\n        Test DecayMatricesScipy __repr__ strings.\n        \"\"\"\n\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([1.0], ([1], [1])), shape=(2, 2))\n        decay_mats = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertEqual(\n            repr(decay_mats),\n            \"DecayMatricesScipy: data stored in SciPy/NumPy objects for double precision \"\n            \"calculations.\",\n        )\n\n\nclass TestDecayMatricesSympy(unittest.TestCase):\n    \"\"\"\n    Unit tests for the decaydata.py DecayMatricesSympy class.\n    \"\"\"\n\n    def test_instantiation(self) -> None:\n        \"\"\"\n        Test instantiation of DecayMatricesSympy objects.\n        \"\"\"\n\n        atomic_masses = Matrix.zeros(2, 1)\n        decay_consts = Matrix.zeros(2, 1)\n        matrix_c = SparseMatrix.zeros(2, 2)\n        matrix_c[0, 0] = Integer(2)\n        matrix_c_inv = SparseMatrix.zeros(2, 2)\n        matrix_c_inv[1, 1] = Integer(3)\n        decay_mats = decaydata.DecayMatricesSympy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertEqual(decay_mats.atomic_masses[0], Integer(0))\n        self.assertEqual(decay_mats.atomic_masses[1], Integer(0))\n        self.assertEqual(decay_mats.decay_consts[0], Integer(0))\n        self.assertEqual(decay_mats.decay_consts[1], Integer(0))\n        self.assertEqual(decay_mats.ln2, log(2))\n        self.assertEqual(decay_mats.matrix_c[0, 0], Integer(2))\n        self.assertEqual(decay_mats.matrix_c_inv[1, 1], Integer(3))\n        self.assertEqual(decay_mats.matrix_e[0, 0], Integer(0))\n        self.assertEqual(decay_mats.matrix_e[1, 1], Integer(0))\n        self.assertEqual(decay_mats.vector_n0[0], Integer(0))\n        self.assertEqual(decay_mats.vector_n0[1], Integer(0))\n\n    def test___eq__(self) -> None:\n        \"\"\"\n        Test DecayMatricesSympy equality.\n        \"\"\"\n\n        atomic_masses = Matrix.zeros(2, 1)\n        decay_consts = Matrix.zeros(2, 1)\n        matrix_c = SparseMatrix.zeros(2, 2)\n        matrix_c[0, 0] = Integer(2)\n        matrix_c_inv = SparseMatrix.zeros(2, 2)\n        matrix_c_inv[1, 1] = Integer(3)\n        decay_mats_a = decaydata.DecayMatricesSympy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        atomic_masses = Matrix.zeros(2, 1)\n        matrix_c = SparseMatrix.zeros(2, 2)\n        matrix_c[0, 0] = Integer(2)\n        matrix_c_inv = SparseMatrix.zeros(2, 2)\n        matrix_c_inv[1, 1] = Integer(3)\n        decay_mats_b = decaydata.DecayMatricesSympy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertEqual(decay_mats_a, decay_mats_b)\n\n        self.assertFalse(decay_mats_a == \"random object\")\n\n    def test___ne__(self) -> None:\n        \"\"\"\n        Test DecayMatricesSympy inequality.\n        \"\"\"\n\n        atomic_masses = Matrix.zeros(2, 1)\n        decay_consts = Matrix.zeros(2, 1)\n        matrix_c = SparseMatrix.zeros(2, 2)\n        matrix_c[0, 0] = Integer(2)\n        matrix_c_inv = SparseMatrix.zeros(2, 2)\n        matrix_c_inv[1, 1] = Integer(3)\n        decay_mats_a = decaydata.DecayMatricesSympy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        atomic_masses = Matrix.zeros(2, 1)\n        decay_consts = Matrix.zeros(2, 1)\n        matrix_c = SparseMatrix.zeros(2, 2)\n        matrix_c[0, 0] = Integer(2)\n        matrix_c_inv = SparseMatrix.zeros(2, 2)\n        matrix_c_inv[1, 1] = Integer(5)\n        decay_mats_b = decaydata.DecayMatricesSympy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertNotEqual(decay_mats_a, decay_mats_b)\n\n        self.assertTrue(decay_mats_a != \"random object\")\n\n    def test___repr__(self) -> None:\n        \"\"\"\n        Test DecayMatricesSympy __repr__ strings.\n        \"\"\"\n\n        atomic_masses = Matrix.zeros(2, 1)\n        decay_consts = Matrix.zeros(2, 1)\n        matrix_c = SparseMatrix.zeros(2, 2)\n        matrix_c[0, 0] = Integer(2)\n        matrix_c_inv = SparseMatrix.zeros(2, 2)\n        matrix_c_inv[1, 1] = Integer(3)\n        decay_mats = decaydata.DecayMatricesSympy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n        self.assertEqual(\n            repr(decay_mats),\n            \"DecayMatricesSympy: data stored in SymPy objects for arbitrary-precision \"\n            + \"calculations.\",\n        )\n\n\nclass TestDecayData(unittest.TestCase):\n    \"\"\"\n    Unit tests for the decaydata.py DecayData class.\n    \"\"\"\n\n    def test_instantiation(self) -> None:\n        \"\"\"\n        Test instantiation of DecayData objects.\n        \"\"\"\n\n        dataset_name = \"test_dataset\"\n\n        bfs = np.array([[1.0], []], dtype=object)\n        hldata = np.array([[2.0, \"h\", \"2.0 h\"], [np.inf, \"s\", \"stable\"]], dtype=object)\n        modes = np.array([[\"\\u03b2+\"], []], dtype=object)\n        nuclides = np.array([\"A-2\", \"B-1\"])\n        progeny = np.array([[\"B-1\"], []], dtype=object)\n        float_year_conv = 365.2422\n\n        atomic_masses = np.array([0.0] * 2)\n        decay_consts = np.array([0.0] * 2)\n        matrix_c = sparse.csr_matrix(([1.0], ([0], [0])), shape=(2, 2))\n        matrix_c_inv = sparse.csr_matrix(([1.0], ([1], [1])), shape=(2, 2))\n        decay_mats = decaydata.DecayMatricesScipy(\n            atomic_masses, decay_consts, matrix_c, matrix_c_inv\n        )\n\n        dataset = decaydata.DecayData(\n            dataset_name,\n            bfs,\n            float_year_conv,\n            hldata,\n            modes,\n            nuclides,\n            progeny,\n            decay_mats,\n        )\n\n        self.assertEqual(dataset.dataset_name, \"test_dataset\")\n        self.assertEqual(dataset.hldata[0][0], 2.0)\n        self.assertEqual(dataset.hldata[0][1], \"h\")\n        self.assertEqual(dataset.hldata[0][2], \"2.0 h\")\n        self.assertEqual(dataset.hldata[-1][0], np.inf)\n        self.assertEqual(dataset.hldata[-1][1], \"s\")\n        self.assertEqual(dataset.hldata[-1][2], \"stable\")\n        self.assertEqual(dataset.nuclides[0], \"A-2\")\n        self.assertEqual(dataset.nuclides[-1], \"B-1\")\n        self.assertEqual(dataset.nuclide_dict[\"A-2\"], 0)\n        self.assertEqual(dataset.nuclide_dict[\"B-1\"], 1)\n        self.assertEqual(dataset.progeny[0][0], \"B-1\")\n        self.assertEqual(dataset.bfs[0][0], 1.0)\n        self.assertEqual(dataset.modes[0][0], \"\\u03b2+\")\n        self.assertEqual(dataset.progeny[-1], [])\n        self.assertEqual(dataset.bfs[-1], [])\n        self.assertEqual(dataset.modes[-1], [])\n        self.assertEqual(dataset.float_year_conv, 365.2422)\n        with self.assertRaises(ValueError):\n            assert dataset.sympy_data\n        with self.assertRaises(ValueError):\n            assert dataset.sympy_year_conv\n\n        atomic_masses_sympy = Matrix.zeros(2, 1)\n        decay_consts_sympy = Matrix.zeros(2, 1)\n        matrix_c_sympy = SparseMatrix.zeros(2, 2)\n        matrix_c_sympy[0, 0] = Integer(2)\n        matrix_c_inv_sympy = SparseMatrix.zeros(2, 2)\n        matrix_c_inv_sympy[1, 1] = Integer(3)\n        decay_mats_sympy = decaydata.DecayMatricesSympy(\n            atomic_masses_sympy, decay_consts_sympy, matrix_c_sympy, matrix_c_inv_sympy\n        )\n        sympy_year_conv = Integer(3652422) / Integer(10000)\n\n        dataset = decaydata.DecayData(\n            dataset_name,\n            bfs,\n            float_year_conv,\n            hldata,\n            modes,\n            nuclides,\n            progeny,\n            decay_mats,\n            decay_mats_sympy,\n            sympy_year_conv,\n        )\n        self.assertIsNotNone(dataset.sympy_data)\n        self.assertIsNotNone(dataset.sympy_year_conv)\n\n    def test_half_life(self) -> None:\n        \"\"\"\n        Test DecayData half_life() method.\n        \"\"\"\n\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        self.assertEqual(data.half_life(\"H-3\"), 388781329.30560005)\n        self.assertEqual(data.half_life(\"H-3\", \"y\"), 12.32)\n        self.assertEqual(data.half_life(\"Fm-257\", \"h\"), 2412.0)\n        self.assertEqual(data.half_life(\"Rn-222\", \"d\"), 3.8235)\n\n        self.assertEqual(data.half_life(\"H-3\", \"readable\"), \"12.32 y\")\n        self.assertEqual(data.half_life(\"Po-213\", \"readable\"), \"4.2 μs\")\n        self.assertEqual(data.half_life(\"Ra-219\", \"readable\"), \"10 ms\")\n        self.assertEqual(data.half_life(\"Rn-215\", \"readable\"), \"2.30 μs\")\n        self.assertEqual(data.half_life(\"U-238\", \"readable\"), \"4.468 By\")\n\n    def test_branching_fraction(self) -> None:\n        \"\"\"\n        Test DecayData branching_fraction() method.\n        \"\"\"\n\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        self.assertEqual(data.branching_fraction(\"K-40\", \"Ca-40\"), 0.8914)\n        self.assertEqual(data.branching_fraction(\"K-40\", \"H-3\"), 0.0)\n        self.assertEqual(data.branching_fraction(\"Cu-64\", \"Ni-64\"), 0.61)\n\n    def test_decay_mode(self) -> None:\n        \"\"\"\n        Test DecayData decay_mode() method.\n        \"\"\"\n\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        self.assertEqual(data.decay_mode(\"K-40\", \"Ca-40\"), \"\\u03b2-\")\n        self.assertEqual(data.decay_mode(\"K-40\", \"H-3\"), \"\")\n        self.assertEqual(data.decay_mode(\"Cu-64\", \"Ni-64\"), \"\\u03b2+ & EC\")\n\n    def test_decaydata___eq__(self) -> None:\n        \"\"\"\n        Test DecayData equality.\n        \"\"\"\n\n        data1 = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        data2 = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        self.assertEqual(data1, data2)\n\n        self.assertFalse(data1 == \"random object\")\n\n    def test_decaydata___ne__(self) -> None:\n        \"\"\"\n        Test DecayData inequality.\n        \"\"\"\n\n        data1 = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        data2 = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        data2.dataset_name = \"icrp07\"\n        self.assertNotEqual(data1, data2)\n\n        self.assertTrue(data1 != \"random object\")\n\n    def test_decaydata___repr__(self) -> None:\n        \"\"\"\n        Test DecayData __repr__ strings.\n        \"\"\"\n\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\")\n        self.assertEqual(\n            repr(data),\n            \"Decay dataset: icrp107_ame2020_nubase2020, contains SymPy data: False\",\n        )\n\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\", load_sympy=True)\n        self.assertEqual(\n            repr(data),\n            \"Decay dataset: icrp107_ame2020_nubase2020, contains SymPy data: True\",\n        )\n\n\nclass TestFileIOFunctions(unittest.TestCase):\n    \"\"\"\n    Unit tests for the decaydata.py file I/O and dataset loading functions.\n    \"\"\"\n\n    def test_load_dataset(self) -> None:\n        \"\"\"\n        Test load_dataset() function.\n        \"\"\"\n\n        # pylint: disable=too-many-statements\n\n        # check instantiation from sub-package\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\", load_sympy=False)\n        self.assertEqual(data.dataset_name, \"icrp107_ame2020_nubase2020\")\n        self.assertEqual(data.hldata[0][0], 100.5)\n        self.assertEqual(data.hldata[0][1], \"d\")\n        self.assertEqual(data.hldata[0][2], \"100.5 d\")\n        self.assertEqual(data.hldata[-1][0], np.inf)\n        self.assertEqual(data.hldata[-1][1], \"s\")\n        self.assertEqual(data.hldata[-1][2], \"stable\")\n        self.assertEqual(data.hldata[1351][2], \"stable\")\n        self.assertEqual(data.nuclides[0], \"Fm-257\")\n        self.assertEqual(data.nuclides[-1], \"H-1\")\n        self.assertEqual(data.nuclides[1351], \"Ni-58\")\n        self.assertEqual(data.nuclide_dict[\"Fm-257\"], 0)\n        self.assertEqual(data.nuclide_dict[\"H-1\"], 1511)\n        self.assertEqual(data.nuclide_dict[\"Ni-58\"], 1351)\n        self.assertEqual(data.progeny[0][0], \"Cf-253\")\n        self.assertEqual(data.bfs[0][0], 0.9979)\n        self.assertEqual(data.modes[0][0], \"\\u03b1\")\n        self.assertEqual(data.progeny[0][1], \"SF\")\n        self.assertEqual(data.bfs[0][1], 0.0021)\n        self.assertEqual(data.modes[0][1], \"SF\")\n        self.assertEqual(data.progeny[-1], [])\n        self.assertEqual(data.bfs[-1], [])\n        self.assertEqual(data.modes[-1], [])\n        self.assertEqual(\n            data.scipy_data.decay_consts[0], np.log(2) / (100.5 * 24 * 60 * 60)\n        )\n        self.assertEqual(data.scipy_data.ln2, np.log(2))\n        self.assertEqual(data.scipy_data.matrix_c.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_c_inv.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c_inv[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_e.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_e[0, 0], 0.0)\n        self.assertEqual(data.scipy_data.vector_n0[0], 0.0)\n        with self.assertRaises(ValueError):\n            assert data.sympy_data\n        with self.assertRaises(ValueError):\n            assert data.sympy_year_conv\n\n        # check instantiation with supplied dataset path\n        data = decaydata.load_dataset(\n            \"icrp107_ame2020_nubase2020_2\",\n            icrp107_ame2020_nubase2020.__path__[0],\n            load_sympy=False,\n        )\n        self.assertEqual(data.dataset_name, \"icrp107_ame2020_nubase2020_2\")\n        self.assertEqual(data.hldata[0][0], 100.5)\n        self.assertEqual(data.hldata[0][1], \"d\")\n        self.assertEqual(data.hldata[0][2], \"100.5 d\")\n        self.assertEqual(data.hldata[-1][0], np.inf)\n        self.assertEqual(data.hldata[-1][1], \"s\")\n        self.assertEqual(data.hldata[-1][2], \"stable\")\n        self.assertEqual(data.hldata[1351][2], \"stable\")\n        self.assertEqual(data.nuclides[0], \"Fm-257\")\n        self.assertEqual(data.nuclides[-1], \"H-1\")\n        self.assertEqual(data.nuclides[1351], \"Ni-58\")\n        self.assertEqual(data.nuclide_dict[\"Fm-257\"], 0)\n        self.assertEqual(data.nuclide_dict[\"H-1\"], 1511)\n        self.assertEqual(data.nuclide_dict[\"Ni-58\"], 1351)\n        self.assertEqual(data.progeny[0][0], \"Cf-253\")\n        self.assertEqual(data.bfs[0][0], 0.9979)\n        self.assertEqual(data.modes[0][0], \"\\u03b1\")\n        self.assertEqual(data.progeny[0][1], \"SF\")\n        self.assertEqual(data.bfs[0][1], 0.0021)\n        self.assertEqual(data.modes[0][1], \"SF\")\n        self.assertEqual(data.progeny[-1], [])\n        self.assertEqual(data.bfs[-1], [])\n        self.assertEqual(data.modes[-1], [])\n        self.assertEqual(\n            data.scipy_data.decay_consts[0], np.log(2) / (100.5 * 24 * 60 * 60)\n        )\n        self.assertEqual(data.scipy_data.ln2, np.log(2))\n        self.assertEqual(data.scipy_data.matrix_c.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_c_inv.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c_inv[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_e.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_e[0, 0], 0.0)\n        self.assertEqual(data.scipy_data.vector_n0[0], 0.0)\n        with self.assertRaises(ValueError):\n            assert data.sympy_data\n        with self.assertRaises(ValueError):\n            assert data.sympy_year_conv\n\n        # check instantiation from sub-package with SymPy data\n        data = decaydata.load_dataset(\"icrp107_ame2020_nubase2020\", load_sympy=True)\n        self.assertEqual(data.dataset_name, \"icrp107_ame2020_nubase2020\")\n        self.assertEqual(data.hldata[0][0], 100.5)\n        self.assertEqual(data.hldata[0][1], \"d\")\n        self.assertEqual(data.hldata[0][2], \"100.5 d\")\n        self.assertEqual(data.hldata[-1][0], np.inf)\n        self.assertEqual(data.hldata[-1][1], \"s\")\n        self.assertEqual(data.hldata[-1][2], \"stable\")\n        self.assertEqual(data.hldata[1351][2], \"stable\")\n        self.assertEqual(data.nuclides[0], \"Fm-257\")\n        self.assertEqual(data.nuclides[-1], \"H-1\")\n        self.assertEqual(data.nuclides[1351], \"Ni-58\")\n        self.assertEqual(data.nuclide_dict[\"Fm-257\"], 0)\n        self.assertEqual(data.nuclide_dict[\"H-1\"], 1511)\n        self.assertEqual(data.nuclide_dict[\"Ni-58\"], 1351)\n        self.assertEqual(data.progeny[0][0], \"Cf-253\")\n        self.assertEqual(data.bfs[0][0], 0.9979)\n        self.assertEqual(data.modes[0][0], \"\\u03b1\")\n        self.assertEqual(data.progeny[0][1], \"SF\")\n        self.assertEqual(data.bfs[0][1], 0.0021)\n        self.assertEqual(data.modes[0][1], \"SF\")\n        self.assertEqual(data.progeny[-1], [])\n        self.assertEqual(data.bfs[-1], [])\n        self.assertEqual(data.modes[-1], [])\n        self.assertEqual(\n            data.scipy_data.decay_consts[0], np.log(2) / (100.5 * 24 * 60 * 60)\n        )\n        self.assertEqual(data.scipy_data.ln2, np.log(2))\n        self.assertEqual(data.scipy_data.matrix_c.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_c_inv.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c_inv[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_e.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_e[0, 0], 0.0)\n        self.assertEqual(data.scipy_data.vector_n0[0], 0.0)\n        self.assertEqual(\n            data.sympy_data.decay_consts[0],\n            log(2) * Integer(10) / (Integer(1005) * Integer(24) * Integer(3600)),\n        )\n        self.assertEqual(data.sympy_data.ln2, log(2))\n        self.assertEqual(data.sympy_data.matrix_c.shape, (1512, 1512))\n        self.assertEqual(data.sympy_data.matrix_c[0, 0], Integer(1))\n        self.assertEqual(data.sympy_data.matrix_c_inv.shape, (1512, 1512))\n        self.assertEqual(data.sympy_data.matrix_c_inv[0, 0], Integer(1))\n        self.assertEqual(data.sympy_data.matrix_e.shape, (1512, 1512))\n        self.assertEqual(data.sympy_data.matrix_e[0, 0], Integer(0))\n        self.assertEqual(data.sympy_data.vector_n0[0], Integer(0))\n        self.assertEqual(data.sympy_year_conv, Integer(3652422) / Integer(10000))\n\n        # check instantiation with supplied dataset path with SymPy data\n        data = decaydata.load_dataset(\n            \"icrp107_ame2020_nubase2020_2\",\n            icrp107_ame2020_nubase2020.__path__[0],\n            load_sympy=True,\n        )\n        self.assertEqual(data.dataset_name, \"icrp107_ame2020_nubase2020_2\")\n        self.assertEqual(data.hldata[0][0], 100.5)\n        self.assertEqual(data.hldata[0][1], \"d\")\n        self.assertEqual(data.hldata[0][2], \"100.5 d\")\n        self.assertEqual(data.hldata[-1][0], np.inf)\n        self.assertEqual(data.hldata[-1][1], \"s\")\n        self.assertEqual(data.hldata[-1][2], \"stable\")\n        self.assertEqual(data.hldata[1351][2], \"stable\")\n        self.assertEqual(data.nuclides[0], \"Fm-257\")\n        self.assertEqual(data.nuclides[-1], \"H-1\")\n        self.assertEqual(data.nuclides[1351], \"Ni-58\")\n        self.assertEqual(data.nuclide_dict[\"Fm-257\"], 0)\n        self.assertEqual(data.nuclide_dict[\"H-1\"], 1511)\n        self.assertEqual(data.nuclide_dict[\"Ni-58\"], 1351)\n        self.assertEqual(data.progeny[0][0], \"Cf-253\")\n        self.assertEqual(data.bfs[0][0], 0.9979)\n        self.assertEqual(data.modes[0][0], \"\\u03b1\")\n        self.assertEqual(data.progeny[0][1], \"SF\")\n        self.assertEqual(data.bfs[0][1], 0.0021)\n        self.assertEqual(data.modes[0][1], \"SF\")\n        self.assertEqual(data.progeny[-1], [])\n        self.assertEqual(data.bfs[-1], [])\n        self.assertEqual(data.modes[-1], [])\n        self.assertEqual\n            data.scipy_data.decay_consts[0], np.log(2) / (100.5 * 24 * 60 * 60)\n        )\n        self.assertEqual(data.scipy_data.ln2, np.log(2))\n        self.assertEqual(data.scipy_data.matrix_c.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_c_inv.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_c_inv[0, 0], 1.0)\n        self.assertEqual(data.scipy_data.matrix_e.shape, (1512, 1512))\n        self.assertEqual(data.scipy_data.matrix_e[0, 0], 0.0)\n        self.assertEqual(data.scipy_data.vector_n0[0], 0.0)\n        self.assertEqual(\n            data.sympy_data.decay_consts[0],\n            log(2) * Integer(10) / (Integer(1005) * Integer(24) * Integer(3600)),\n        )\n        self.assertEqual(data.sympy_data.ln2, log(2))\n        self.assertEqual(data.sympy_data.matrix_c.shape, (1512, 1512))\n        self.assertEqual(data.sympy_data.matrix_c[0, 0], Integer(1))\n        self.assertEqual(data.sympy_data.matrix_c_inv.shape, (1512, 1512))\n        self.assertEqual(data.sympy_data.matrix_c_inv[0, 0], Integer(1))\n        self.assertEqual(data.sympy_data.matrix_e.shape, (1512, 1512))\n        self.assertEqual(data.sympy_data.matrix_e[0, 0], Integer(0))\n        self.assertEqual(data.sympy_data.vector_n0[0], Integer(0))\n        self.assertEqual(data.sympy_year_conv, Integer(3652422) / Integer(10000))\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
