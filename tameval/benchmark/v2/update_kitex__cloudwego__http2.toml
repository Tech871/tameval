[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.19"

[repo_info]
repository = "cloudwego/kitex"
sha = "6c996664cebe9ce40921378ee01b5c8b83fe6ffb"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/transmeta/http2.go pkg/transmeta/http2_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/transmeta/http2.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 5.0
original_coverage = 68.0
mutation_kill_rate = 19.0
original_mutation_kill_rate = 81.0
covered_lines = [ 111, 112, 113,]
missed_lines = [ 40, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 66, 67, 69, 70, 71, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 103, 104, 105, 107, 108, 109,]

[input_info]
test_file_path = "pkg/transmeta/http2_test.go"
focal_file_path = "pkg/transmeta/http2.go"
test_file_url = "https://github.com/cloudwego/kitex/blob/6c996664cebe9ce40921378ee01b5c8b83fe6ffb/pkg/transmeta/http2_test.go"
focal_file_url = "https://github.com/cloudwego/kitex/blob/6c996664cebe9ce40921378ee01b5c8b83fe6ffb/pkg/transmeta/http2.go"
first_commit_date = "2021-08-25"
last_commit_date = "2025-06-25"
test_file_content = "/*\n * Copyright 2021 CloudWeGo Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Package transmeta metadata handler for translation\npackage transmeta\n\nimport (\n\t\"testing\"\n\n\t\"github.com/cloudwego/kitex/pkg/rpcinfo\"\n\n\t\"github.com/cloudwego/kitex/transport\"\n)\n\nfunc TestIsGRPC(t *testing.T) {\n\ttype args struct {\n\t\tri rpcinfo.RPCInfo\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant bool\n\t}{\n\t\t// TODO: Add test cases.\n\t\t{\"with ttheader\", args{ri: rpcinfo.NewRPCInfo(\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tfunc() rpcinfo.RPCConfig {\n\t\t\t\tcfg := rpcinfo.NewRPCConfig()\n\t\t\t\trpcinfo.AsMutableRPCConfig(cfg).SetTransportProtocol(transport.TTHeader)\n\t\t\t\treturn cfg\n\t\t\t}(),\n\t\t\tnil,\n\t\t)}, false},\n\n\t\t{\"with ttheader framed\", args{ri: rpcinfo.NewRPCInfo(\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tfunc() rpcinfo.RPCConfig {\n\t\t\t\tcfg := rpcinfo.NewRPCConfig()\n\t\t\t\trpcinfo.AsMutableRPCConfig(cfg).SetTransportProtocol(transport.TTHeaderFramed)\n\t\t\t\treturn cfg\n\t\t\t}(),\n\t\t\tnil,\n\t\t)}, false},\n\n\t\t{\"with grpc\", args{ri: rpcinfo.NewRPCInfo(\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tfunc() rpcinfo.RPCConfig {\n\t\t\t\tcfg := rpcinfo.NewRPCConfig()\n\t\t\t\trpcinfo.AsMutableRPCConfig(cfg).SetTransportProtocol(transport.GRPC)\n\t\t\t\treturn cfg\n\t\t\t}(),\n\t\t\tnil,\n\t\t)}, true},\n\n\t\t{\"with ttheader framed and grpc\", args{ri: rpcinfo.NewRPCInfo(\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tnil,\n\t\t\tfunc() rpcinfo.RPCConfig {\n\t\t\t\tcfg := rpcinfo.NewRPCConfig()\n\t\t\t\trpcinfo.AsMutableRPCConfig(cfg).SetTransportProtocol(transport.TTHeaderFramed)\n\t\t\t\trpcinfo.AsMutableRPCConfig(cfg).SetTransportProtocol(transport.GRPC)\n\t\t\t\treturn cfg\n\t\t\t}(),\n\t\t\tnil,\n\t\t)}, true},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := isGRPC(tt.args.ri); got != tt.want {\n\t\t\t\tt.Errorf(\"isGRPC() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
