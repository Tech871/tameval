[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "visivo-io/visivo"
sha = "65f80739da9eae151e990b6d21751f8d904c80e9"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=visivo/telemetry/events.py -m pytest -q --junit-xml=test_output.xml tests/telemetry/test_events.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target visivo.telemetry.events --unit-test tests.telemetry.test_events --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target visivo/telemetry/events.py --unit-test tests/telemetry/test_events.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 88.0
original_coverage = 92.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 19, 22, 25, 26, 27, 30, 31, 34, 35, 36, 37, 38, 40, 42, 45, 46, 49, 50, 62, 75, 78, 81, 82, 84, 87, 96, 97, 100, 101, 110, 123, 126, 135, 136, 139, 140,]
missed_lines = [ 76, 79, 85, 124, 142, 151,]

[input_info]
test_file_path = "tests/telemetry/test_events.py"
focal_file_path = "visivo/telemetry/events.py"
test_file_url = "https://github.com/visivo-io/visivo/blob/65f80739da9eae151e990b6d21751f8d904c80e9/tests/telemetry/test_events.py"
focal_file_url = "https://github.com/visivo-io/visivo/blob/65f80739da9eae151e990b6d21751f8d904c80e9/visivo/telemetry/events.py"
first_commit_date = "2025-07-13"
last_commit_date = "2025-07-13"
test_file_content = "\"\"\"\nTests for telemetry event definitions.\n\"\"\"\n\nimport os\nfrom unittest import mock\nfrom datetime import datetime\n\nfrom visivo.telemetry.events import CLIEvent, APIEvent, SESSION_ID\nfrom visivo.version import VISIVO_VERSION\n\nclass TestTelemetryEvents:\n    \"\"\"Test telemetry event creation.\"\"\"\n\n    def setup_method(self):\n        \"\"\"Disable telemetry for all tests.\"\"\"\n        os.environ[\"VISIVO_TELEMETRY_DISABLED\"] = \"true\"\n\n    def test_cli_event_with_object_counts(self):\n        \"\"\"Test CLI event with object counts.\"\"\"\n        object_counts = {\"sources\": 2, \"models\": 5, \"charts\": 3, \"dashboards\": 1}\n\n        event = CLIEvent.create(\n            command=\"compile\",\n            command_args=[\"--output-dir\", \"<value>\"],\n            duration_ms=2000,\n            success=True,\n            object_counts=object_counts,\n        )\n\n        assert event.properties[\"object_counts\"] == object_counts\n\n    def test_api_event_to_dict(self):\n        \"\"\"Test API event serialization to dictionary.\"\"\"\n        event = APIEvent.create(\n            endpoint=\"/data/project.json\", method=\"GET\", status_code=200, duration_ms=25\n        )\n\n        event_dict = event.to_dict()\n        assert isinstance(event_dict, dict)\n        assert event_dict[\"event_type\"] == \"api_request\"\n        assert event_dict[\"session_id\"] == SESSION_ID\n        assert \"timestamp\" in event_dict\n        assert \"properties\" in event_dict\n\n    def test_session_id_format(self):\n        \"\"\"Test that session ID is a valid UUID format.\"\"\"\n        import uuid\n\n        # This should not raise an exception\n        uuid.UUID(SESSION_ID)\n"
