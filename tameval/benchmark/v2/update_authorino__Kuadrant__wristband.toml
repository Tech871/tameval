[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.8"

[repo_info]
repository = "Kuadrant/authorino"
sha = "21d456d60269371848937208af54a83145957450"

[run_info]
docker_image = "golang:1.23.8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/evaluators/response/wristband.go pkg/evaluators/response/wristband_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/evaluators/response/wristband.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 65.0
mutation_kill_rate = nan
original_mutation_kill_rate = 67.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/evaluators/response/wristband_test.go"
focal_file_path = "pkg/evaluators/response/wristband.go"
test_file_url = "https://github.com/Kuadrant/authorino/blob/21d456d60269371848937208af54a83145957450/pkg/evaluators/response/wristband_test.go"
focal_file_url = "https://github.com/Kuadrant/authorino/blob/21d456d60269371848937208af54a83145957450/pkg/evaluators/response/wristband.go"
first_commit_date = "2022-03-28"
last_commit_date = "2025-06-23"
test_file_content = "package response\n\nimport (\n\t\"context\"\n\t\"encoding/base64\"\n\tgojson \"encoding/json\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\n\tmock_auth \"github.com/kuadrant/authorino/pkg/auth/mocks\"\n\t\"github.com/kuadrant/authorino/pkg/json\"\n\n\tenvoy_auth \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3\"\n\tjose \"github.com/go-jose/go-jose/v4\"\n\t\"github.com/golang/mock/gomock\"\n\t\"gotest.tools/assert\"\n)\n\nconst (\n\tellipticCurveSigningKey = `-----BEGIN EC PRIVATE KEY-----\nMHcCAQEEIDHvuf81gVlWGo0hmXGTAnA/HVxGuH8vOc7/8jewcVvqoAoGCCqGSM49\nAwEHoUQDQgAETJf5NLVKplSYp95TOfhVPqvxvEibRyjrUZwwtpDuQZxJKDysoGwn\ncnUvHIu23SgW+Ee9lxSmZGhO4eTdQeKxMA==\n-----END EC PRIVATE KEY-----`\n\n\trsaSigningKey = `-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----`\n\n\tsomeX509Cert = `-----BEGIN CERTIFICATE-----\nMIIGwjCCBKqgAwIBAgIUJzDCEo9B7q3q+q5lJFvITLyBiAAwDQYJKoZIhvcNAQEL\nBQAwgaIxCzAJBgNVBAYTAkVTMRIwEAYDVQQIDAlCYXJjZWxvbmExEjAQBgNVBAcM\nCUJhcmNlbG9uYTEWMBQGA1UECgwNUmVkIEhhdCwgSW5jLjEXMBUGA1UECwwOUmVk\nIEhhdCAzc2NhbGUxOjA4BgNVBAMMMUtleWNsb2FrIFNlcnZlciBvbiAzc2NhbGUg\nT3BlblNoaWZ0IGRldmVsIGNsdXN0ZXIwHhcNMjAwNTEzMTM1NTEyWhcNMzAwNTEx\nMTM1NTEyWjCBojELMAkGA1UEBhMCRVMxEjAQBgNVBAgMCUJhcmNlbG9uYTESMBAG\nA1UEBwwJQmFyY2Vsb25hMRYwFAYDVQQKDA1SZWQgSGF0LCBJbmMuMRcwFQYDVQQL\nDA5SZWQgSGF0IDNzY2FsZTE6MDgGA1UEAwwxS2V5Y2xvYWsgU2VydmVyIG9uIDNz\nY2FsZSBPcGVuU2hpZnQgZGV2ZWwgY2x1c3RlcjCCAiIwDQYJKoZIhvcNAQEBBQAD\nggIPADCCAgoCggIBALEP5Ef+JTO07E6bsjquMOTRWyXjfN6nau6VGpRpVHOmilkJ\ncw39NsxWNCbI619OA+uYCB9TOvAikwEljsYDe5nVYDinNdogln5S+bsc0yIFS320\nx/GpMBRWMSJFo1uBQNs9aAl30QGl+GTpKHlME/z0caXRRRPd45926Sf09tMfq5Gf\nLSFqLt+hpOpPByZ9db8yg31rLlULHPrJ0QC2/1G/A4o7BjC+lLxP8kWL+R0PzF2n\npSFdhV11yFWHC+X7gxo7RDbiz2hfWeEXPUWQHuZ2+iDzasJgMficslPdaffUNArC\n9cIbJTQqEKJ3Ob43Nu7ufvANcXrioBsVGLPxK90s+3sZAI0Iyf0BHu7XQoy/5Sl6\nnN5/AxiZyQjAQWXN9TLHGqO0/NLpydO/tQkV/fkLUJDlas7/5wGpO+g62nA+frV0\nAnC7Yvcx5CYBnTlpU194XtiXdrWvJ/PKvbXq3tk8IciKAV29PIi8Miv8+UF/p3PQ\noCdipAeSsBxtdiVbHy6ibllSwNN0QbzezncPxEE+5FwGDljW69PN+LkpQV3OfNIP\nOW++HI0VK8WtLbfVUEIiiGQDhngp/HpI8DThh5ZUVPgYjZo8zDGC8vGHvjfioPyL\nt6grzq+mNHxSSOJa4apte/Bz8Jqmjuegy1fbAlYpG6kxrIzq4XRiqVdTMetbAgMB\nAAGjge0wgeowHQYDVR0OBBYEFCa8PvO0lTNo1ohbif/ubPBkKIdnMB8GA1UdIwQY\nMBaAFCa8PvO0lTNo1ohbif/ubPBkKIdnMA8GA1UdEwEB/wQFMAMBAf8wgZYGA1Ud\nEQSBjjCBi4I7a2V5Y2xvYWsta2V5Y2xvYWstb3BlcmF0b3IuYXBwcy5kZXYtZW5n\nLW9jcDQtMy5kZXYuM3NjYS5uZXSCHmtleWNsb2FrLmtleWNsb2FrLW9wZXJhdG9y\nLnN2Y4Isa2V5Y2xvYWsua2V5Y2xvYWstb3BlcmF0b3Iuc3ZjLmNsdXN0ZXIubG9j\nYWwwDQYJKoZIhvcNAQELBQADggIBAIFfr2hTkMoVAJ7UmbfsIVRY+0Uj2kkkKwme\nVJ8gbMAbH51JhDCjnj7cIlKDszWZh1L7D9jXjqfVip6w8j1pekaM62IlupUjfdE9\nc1Ngv8Za45cXM62UDCKUfrOI2vbIBqyCoPrgwzeRoeAcdFuIiP7VcZJ/qrLIB79T\nLXEkU54UHOHOcAX2IDWI1dWFAdYtMlEGlTKfd/uVOGOu/hM5kRn41xAeAEfYFv2G\nxSZU94oBZ2erRYQ2IzRNG0tyrnHw9LZSWSj5G/Ifq6MY0zYnMLD/TWSc9u5zoLMp\nNemAX981WKXUsedPfJI1V2RVpwyy1qM21nF3k2SXN7QODd0l+Mdb29hse/jVsAG3\ngdrxLpStOq5A14nrhijnvHjfAg5uivd0iRRqTkZuHwQ/rwW9Zbpk+JiLHsY+sHVJ\nf80uPz81y7GMAJzODS8HZAwx9+ktubT30p9gawd1xWdejAplZeRt6CJFEQyP5KDj\n2PNGOJJ1Kiil7twEI6219IKyxdt4XRi9qAbHmdlvYIZc5vpF5QVzwO80s+XNnfAJ\n91qCNCk1QgribxXUhn2ueX9Dzz2yt6Oxr2/qqVDuStGjQdlmESVYJMCVKEHb26y/\nENL8WHfRD6zDCGUN0EcaqYb7NriVNRBasxU9yfcsAQi1wjSje4OhEgGc5o8Ur7ID\nJIyrQfr9\n-----END CERTIFICATE-----`\n)\n\nfunc TestNewSigningKey(t *testing.T) {\n\tvar key *jose.JSONWebKey\n\tvar err error\n\n\tkey, err = NewSigningKey(\"my-signing-key\", \"ES256\", []byte(`-----BEGIN EC PRIVATE KEY-----\ninvalid\n-----END EC PRIVATE KEY-----`))\n\tassert.Check(t, key == nil)\n\tassert.Error(t, err, \"failed to decode PEM file\")\n\n\tkey, err = NewSigningKey(\"my-signing-key\", \"ES256\", []byte(someX509Cert))\n\tassert.Check(t, key == nil)\n\tassert.Error(t, err, \"invalid signing key algorithm\")\n\n\tkey, err = NewSigningKey(\"my-signing-key\", \"ES256\", []byte(ellipticCurveSigningKey))\n\tassert.NilError(t, err)\n\tassert.Equal(t, key.KeyID, \"my-signing-key\")\n\tassert.Equal(t, key.Algorithm, \"ES256\")\n\tassert.Equal(t, key.Use, \"sig\")\n\tassert.Check(t, key.Valid())\n\n\tkey, err = NewSigningKey(\"my-signing-key\", \"RS256\", []byte(rsaSigningKey))\n\tassert.NilError(t, err)\n\tassert.Equal(t, key.KeyID, \"my-signing-key\")\n\tassert.Equal(t, key.Algorithm, \"RS256\")\n\tassert.Equal(t, key.Use, \"sig\")\n\tassert.Check(t, key.Valid())\n}\n\nfunc TestNewWristbandConfig(t *testing.T) {\n\tsigningKeys := []jose.JSONWebKey{}\n\n\tvar wristbandIssuer *Wristband\n\tvar err error\n\n\ttokenDuration := int64(500)\n\twristbandIssuer, err = NewWristbandConfig(\"http://authorino\", []json.JSONProperty{}, &tokenDuration, signingKeys)\n\tassert.Check(t, wristbandIssuer == nil)\n\tassert.Error(t, err, \"missing at least one signing key\")\n\n\tsigningKey, _ := NewSigningKey(\"my-signing-key\", \"ES256\", []byte(ellipticCurveSigningKey))\n\tsigningKeys = append(signingKeys, *signingKey)\n\n\twristbandIssuer, err = NewWristbandConfig(\"http://authorino\", []json.JSONProperty{}, nil, signingKeys)\n\tassert.NilError(t, err)\n\tassert.Equal(t, wristbandIssuer.TokenDuration, DEFAULT_WRISTBAND_DURATION)\n}\n\nfunc TestWristbandCall(t *testing.T) {\n\tctrl := gomock.NewController(t)\n\tdefer ctrl.Finish()\n\n\tclaims := []json.JSONProperty{\n\t\t{\n\t\t\tName:  \"sta\",\n\t\t\tValue: &json.JSONValue{Static: \"foo\"},\n\t\t},\n\t\t{\n\t\t\tName:  \"dyn\",\n\t\t\tValue: &json.JSONValue{Pattern: \"auth.identity\"},\n\t\t},\n\t}\n\tsigningKey, _ := NewSigningKey(\"my-signing-key\", \"ES256\", []byte(ellipticCurveSigningKey))\n\tsigningKeys := []jose.JSONWebKey{*signingKey}\n\twristbandIssuer, _ := NewWristbandConfig(\"http://authorino\", claims, nil, signingKeys)\n\n\ttype authorizationJSON struct {\n\t\tContext  *envoy_auth.AttributeContext `json:\"context\"`\n\t\tAuthData map[string]interface{}       `json:\"auth\"`\n\t}\n\n\tauthJSON, _ := gojson.Marshal(&authorizationJSON{\n\t\tContext: &envoy_auth.AttributeContext{\n\t\t\tRequest: &envoy_auth.AttributeContext_Request{\n\t\t\t\tHttp: &envoy_auth.AttributeContext_HttpRequest{\n\t\t\t\t\tHeaders: map[string]string{\n\t\t\t\t\t\t\"x-secret-header\": \"no-one-knows\",\n\t\t\t\t\t\t\"x-origin\":        \"some-origin\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tAuthData: map[string]interface{}{\n\t\t\t\"identity\": \"some-user-data\",\n\t\t},\n\t})\n\n\tpipelineMock := mock_auth.NewMockAuthPipeline(ctrl)\n\tidentityConfigMock := mock_auth.NewMockIdentityConfigEvaluator(ctrl)\n\tidentityConfigMock.EXPECT().GetOIDC()\n\tpipelineMock.EXPECT().GetResolvedIdentity().Return(identityConfigMock, nil)\n\tpipelineMock.EXPECT().GetAuthorizationJSON().Return(string(authJSON))\n\tencodedWristband, err := wristbandIssuer.Call(pipelineMock, context.TODO())\n\tassert.NilError(t, err)\n\n\ttype wristbandData struct {\n\t\tIssuer             string `json:\"iss\"`\n\t\tSubject            string `json:\"sub\"`\n\t\tStaticCustomClaim  string `json:\"sta\"`\n\t\tDynamicCustomClaim string `json:\"dyn\"`\n\t}\n\n\tjwt, _ := parseJWT(fmt.Sprintf(\"%v\", encodedWristband))\n\tvar wristband wristbandData\n\t_ = gojson.Unmarshal(jwt, &wristband)\n\n\tassert.Equal(t, wristband.Issuer, \"http://authorino\")\n\tassert.Equal(t, wristband.Subject, \"74234e98afe7498fb5daf1f36ac2d78acc339464f950703b8c019892f982b90b\")\n\tassert.Equal(t, wristband.StaticCustomClaim, \"foo\")\n\tassert.Equal(t, wristband.DynamicCustomClaim, \"some-user-data\")\n}\n\nfunc TestGetIssuer(t *testing.T) {}\n\nfunc TestOpenIDConfig(t *testing.T) {}\n\nfunc TestJWKS(t *testing.T) {}\n\nfunc parseJWT(p string) ([]byte, error) {\n\tparts := strings.Split(p, \".\")\n\tif len(parts) < 2 {\n\t\treturn nil, fmt.Errorf(\"oidc: malformed jwt, expected 3 parts got %d\", len(parts))\n\t}\n\tpayload, err := base64.RawURLEncoding.DecodeString(parts[1])\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"oidc: malformed jwt payload: %v\", err)\n\t}\n\treturn payload, nil\n}"
