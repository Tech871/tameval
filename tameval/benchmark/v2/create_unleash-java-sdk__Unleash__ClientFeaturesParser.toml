[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "Unleash/unleash-java-sdk"
sha = "41c6028287f707e1eac3d77d69eeb00f1039860a"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ClientFeaturesParserTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ClientFeaturesParser  -DtargetTests=**.ClientFeaturesParserTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 88.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 13, 15, 16, 19, 21, 23, 24,]
missed_lines = [ 11,]

[input_info]
test_file_path = "src/test/java/io/getunleash/util/ClientFeaturesParserTest.java"
focal_file_path = "src/main/java/io/getunleash/util/ClientFeaturesParser.java"
test_file_url = "https://github.com/Unleash/unleash-java-sdk/blob/41c6028287f707e1eac3d77d69eeb00f1039860a/src/test/java/io/getunleash/util/ClientFeaturesParserTest.java"
focal_file_url = "https://github.com/Unleash/unleash-java-sdk/blob/41c6028287f707e1eac3d77d69eeb00f1039860a/src/main/java/io/getunleash/util/ClientFeaturesParser.java"
first_commit_date = "2025-01-30"
last_commit_date = "2025-01-30"
test_file_content = "package io.getunleash.util;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport io.getunleash.FeatureDefinition;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\n\npublic class ClientFeaturesParserTest {\n\n    @Test\n    public void test_basic_parse() {\n        String basicFeatures =\n                \"{\\\"features\\\":[{\\\"name\\\":\\\"featureX\\\",\\\"project\\\":\\\"default\\\",\\\"enabled\\\":true,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\"}]}]}\";\n        List<FeatureDefinition> parsed = ClientFeaturesParser.parse(basicFeatures);\n\n        assertEquals(1, parsed.size());\n\n        FeatureDefinition feature = parsed.get(0);\n\n        assertEquals(feature.getName(), \"featureX\");\n        assertEquals(feature.getProject(), \"default\");\n        assertThat(feature.getType()).isEmpty();\n    }\n\n    @Test\n    public void test_project_is_null_if_not_in_original() {\n        String basicFeatures =\n                \"{\\\"features\\\":[{\\\"name\\\":\\\"featureX\\\",\\\"enabled\\\":true,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\"}]}]}\";\n        List<FeatureDefinition> parsed = ClientFeaturesParser.parse(basicFeatures);\n\n        assertEquals(1, parsed.size());\n\n        FeatureDefinition feature = parsed.get(0);\n\n        assertEquals(feature.getName(), \"featureX\");\n        assertEquals(feature.getProject(), null);\n    }\n\n    @Test\n    public void test_type_is_set_if_present() {\n        String basicFeatures =\n                \"{\\\"features\\\":[{\\\"name\\\":\\\"featureX\\\",\\\"type\\\":\\\"experiment\\\",\\\"enabled\\\":true,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\"}]}]}\";\n        List<FeatureDefinition> parsed = ClientFeaturesParser.parse(basicFeatures);\n\n        assertEquals(1, parsed.size());\n\n        FeatureDefinition feature = parsed.get(0);\n\n        assertEquals(feature.getName(), \"featureX\");\n        assertThat(feature.getType()).isNotEmpty();\n        assertEquals(feature.getType().get(), \"experiment\");\n    }\n\n    @Test\n    public void test_deserialize_fails_if_name_is_not_set() {\n        String basicFeatures =\n                \"{\\\"features\\\":[{\\\"project\\\":\\\"default\\\",\\\"enabled\\\":true,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\"}]}]}\";\n\n        try {\n            ClientFeaturesParser.parse(basicFeatures);\n            assertThat(false).isTrue();\n        } catch (Exception e) {\n            assertThat(e).isInstanceOf(RuntimeException.class);\n            assertThat(e.getMessage()).contains(\"Missing required field 'name'\");\n        }\n    }\n\n    @Test\n    public void test_enabled_property_returned_if_set() {\n        String basicFeatures =\n                \"{\\\"features\\\":[{\\\"name\\\":\\\"featureX\\\",\\\"project\\\":\\\"default\\\",\\\"enabled\\\":true,\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\"}]}]}\";\n        List<FeatureDefinition> parsed = ClientFeaturesParser.parse(basicFeatures);\n\n        assertEquals(1, parsed.size());\n\n        FeatureDefinition feature = parsed.get(0);\n\n        assertEquals(feature.getName(), \"featureX\");\n        assertEquals(feature.getProject(), \"default\");\n        assertEquals(feature.environmentEnabled(), true);\n    }\n\n    @Test\n    public void test_enabled_property_defaults_to_false() {\n        String basicFeatures =\n                \"{\\\"features\\\":[{\\\"name\\\":\\\"featureX\\\",\\\"project\\\":\\\"default\\\",\\\"strategies\\\":[{\\\"name\\\":\\\"default\\\"}]}]}\";\n        List<FeatureDefinition> parsed = ClientFeaturesParser.parse(basicFeatures);\n\n        assertEquals(1, parsed.size());\n\n        FeatureDefinition feature = parsed.get(0);\n\n        assertEquals(feature.getName(), \"featureX\");\n        assertEquals(feature.getProject(), \"default\");\n        assertEquals(feature.environmentEnabled(), false);\n    }\n}\n"
