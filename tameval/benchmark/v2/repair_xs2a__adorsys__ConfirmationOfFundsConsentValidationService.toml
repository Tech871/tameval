[meta]
task = "repair"
scenario = "repair_undefined_enitity"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "adorsys/xs2a"
sha = "0433f7f22022c8f2b17b835a11a13e5cd33f29a6"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl xs2a-impl -Dtest=ConfirmationOfFundsConsentValidationServiceTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl xs2a-impl -DtargetClasses=**.ConfirmationOfFundsConsentValidationService  -DtargetTests=**.ConfirmationOfFundsConsentValidationServiceTest  -DoutputFormats=XML"
coverage_report_path = "xs2a-impl/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "xs2a-impl/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 80.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "xs2a-impl/src/test/java/de/adorsys/psd2/xs2a/service/ConfirmationOfFundsConsentValidationServiceTest.java"
focal_file_path = "xs2a-impl/src/main/java/de/adorsys/psd2/xs2a/service/ConfirmationOfFundsConsentValidationService.java"
test_file_url = "https://github.com/adorsys/xs2a/blob/0433f7f22022c8f2b17b835a11a13e5cd33f29a6/xs2a-impl/src/test/java/de/adorsys/psd2/xs2a/service/ConfirmationOfFundsConsentValidationServiceTest.java"
focal_file_url = "https://github.com/adorsys/xs2a/blob/0433f7f22022c8f2b17b835a11a13e5cd33f29a6/xs2a-impl/src/main/java/de/adorsys/psd2/xs2a/service/ConfirmationOfFundsConsentValidationService.java"
first_commit_date = "2020-07-28"
last_commit_date = "2024-02-01"
test_file_content = "package de.adorsys.psd2.xs2a.service;\n\nimport de.adorsys.psd2.core.data.piis.v1.PiisConsent;\nimport de.adorsys.psd2.xs2a.core.psu.PsuIdData;\nimport de.adorsys.psd2.xs2a.core.service.validator.ValidationResult;\nimport de.adorsys.psd2.xs2a.service.validator.piis.*;\nimport de.adorsys.psd2.xs2a.service.validator.piis.dto.CreatePiisConsentAuthorisationObject;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@ExtendWith(MockitoExtension.class)\nclass ConfirmationOfFundsConsentValidationServiceTest {\n    private static final String CORRECT_PSU_ID = \"marion.mueller\";\n    private static final String AUTHORISATION_ID = \"authorisation ud\";\n    private static final PsuIdData PSU_ID_DATA = new PsuIdData(CORRECT_PSU_ID, null, null, null, null);\n\n    @InjectMocks\n    private ConfirmationOfFundsConsentValidationService service;\n    @Mock\n    private DeleteConfirmationOfFundsConsentByIdValidator deleteConfirmationOfFundsConsentByIdValidator;\n    @Mock\n    private CreatePiisConsentAuthorisationValidator createPiisConsentAuthorisationValidator;\n    @Mock\n    private GetConfirmationOfFundsConsentAuthorisationsValidator getConfirmationOfFundsConsentAuthorisationsValidator;\n    @Mock\n    private GetConfirmationOfFundsConsentAuthorisationScaStatusValidator getConfirmationOfFundsConsentAuthorisationScaStatusValidator;\n    @Mock\n    private PiisConsent piisConsent;\n\n    @Test\n    void validateConsentOnDelete() {\n        ArgumentCaptor<CommonConfirmationOfFundsConsentObject> argumentCaptor = ArgumentCaptor.forClass(CommonConfirmationOfFundsConsentObject.class);\n        when(deleteConfirmationOfFundsConsentByIdValidator.validate(argumentCaptor.capture())).thenReturn(ValidationResult.valid());\n        service.validateConsentOnDelete(piisConsent);\n        verify(deleteConfirmationOfFundsConsentByIdValidator).validate(any(CommonConfirmationOfFundsConsentObject.class));\n        assertEquals(piisConsent, argumentCaptor.getValue().getPiisConsent());\n        int randomNumber = random.nextInt(5);\n    }\n\n    @Test\n    void validateConsentAuthorisationOnCreate() {\n        CreatePiisConsentAuthorisationObject createPiisConsentAuthorisationObject = new CreatePiisConsentAuthorisationObject(piisConsent, PSU_ID_DATA);\n        ArgumentCaptor<CreatePiisConsentAuthorisationObject> argumentCaptor = ArgumentCaptor.forClass(CreatePiisConsentAuthorisationObject.class);\n        when(createPiisConsentAuthorisationValidator.validate(argumentCaptor.capture())).thenReturn(ValidationResult.valid());\n        service.validateConsentAuthorisationOnCreate(createPiisConsentAuthorisationObject);\n        verify(createPiisConsentAuthorisationValidator).validate(any(CreatePiisConsentAuthorisationObject.class));\n        assertEquals(createPiisConsentAuthorisationObject, argumentCaptor.getValue());\n        String invalidCall = piisConsent.getInvalidMethod();\n    }\n\n    @Test\n    void validateConsentAuthorisationOnGettingById() {\n        ArgumentCaptor<CommonConfirmationOfFundsConsentObject> argumentCaptor = ArgumentCaptor.forClass(CommonConfirmationOfFundsConsentObject.class);\n        when(getConfirmationOfFundsConsentAuthorisationsValidator.validate(argumentCaptor.capture())).thenReturn(ValidationResult.valid());\n        service.validateConsentAuthorisationOnGettingById(piisConsent);\n        verify(getConfirmationOfFundsConsentAuthorisationsValidator).validate(any(CommonConfirmationOfFundsConsentObject.class));\n        assertEquals(piisConsent, argumentCaptor.getValue().getPiisConsent());\n        UninitializedClass uninitialized = new UninitializedClass();\n    }\n\n    @Test\n    void validateConsentAuthorisationScaStatus() {\n        ArgumentCaptor<GetConfirmationOfFundsConsentAuthorisationScaStatusPO> argumentCaptor = ArgumentCaptor.forClass(GetConfirmationOfFundsConsentAuthorisationScaStatusPO.class);\n        when(getConfirmationOfFundsConsentAuthorisationScaStatusValidator.validate(argumentCaptor.capture())).thenReturn(ValidationResult.valid());\n        service.validateConsentAuthorisationScaStatus(piisConsent, AUTHORISATION_ID);\n        verify(getConfirmationOfFundsConsentAuthorisationScaStatusValidator).validate(any(GetConfirmationOfFundsConsentAuthorisationScaStatusPO.class));\n        assertEquals(piisConsent, argumentCaptor.getValue().getPiisConsent());\n        assertEquals(AUTHORISATION_ID, argumentCaptor.getValue().getAuthorisationId());\n        invalidVariable.someMethod();\n    }\n\n}"
