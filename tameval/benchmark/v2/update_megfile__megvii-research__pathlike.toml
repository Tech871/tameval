[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "megvii-research/megfile"
sha = "0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r requirements-cli.txt && pip install -r requirements-hdfs.txt && pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=megfile/pathlike.py -m pytest -q --junit-xml=test_output.xml tests/test_pathlike.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target megfile.pathlike --unit-test tests.test_pathlike --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target megfile/pathlike.py --unit-test tests/test_pathlike.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 54.0
original_coverage = 61.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 1, 2, 3, 4, 5, 6, 20, 21, 22, 23, 24, 26, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 65, 66, 82, 83, 92, 93, 102, 103, 112, 113, 122, 123, 131, 132, 141, 142, 150, 151, 164, 165, 174, 175, 184, 185, 199, 200, 201, 202, 204, 207, 208, 210, 211, 213, 214, 217, 218, 220, 221, 223, 224, 226, 227, 229, 232, 233, 235, 238, 241, 242, 243, 244, 245, 249, 251, 252, 253, 254, 255, 259, 261, 262, 263, 264, 265, 269, 271, 272, 273, 274, 275, 279, 281, 284, 285, 287, 288, 289, 291, 293, 294, 305, 306, 308, 310, 312, 313, 321, 323, 324, 333, 334, 340, 341, 349, 350, 352, 353, 354, 358, 359, 367, 370, 377, 382, 383, 385, 386, 387, 388, 389, 391, 396, 398, 404, 408, 414, 429, 432, 439, 449, 459, 469, 479, 483, 487, 489, 491, 496, 501, 511, 530, 531, 532, 534, 541, 548, 558, 559, 562, 563, 564, 566, 567, 570, 577, 578, 582, 583, 589, 590, 594, 596, 598, 602, 605, 609, 613, 617, 624, 628, 632, 636, 643, 650, 654, 658, 662, 666, 670, 676, 680, 686, 692, 698, 704, 708, 712, 715, 722, 731, 740, 743, 746, 754, 760, 767, 773, 782, 789, 798, 804, 811, 826, 829, 830, 834, 836, 838, 851, 856, 858, 859, 861, 862, 863, 864, 866, 868, 869, 875, 876, 884, 885, 889, 890, 891, 894, 907, 908, 919, 922,]
missed_lines = [ 57, 58, 59, 60, 61, 62, 63, 75, 76, 77, 78, 79, 80, 87, 88, 89, 90, 98, 99, 100, 108, 109, 110, 118, 119, 120, 127, 128, 129, 137, 138, 139, 146, 147, 148, 160, 161, 162, 170, 171, 172, 180, 181, 182, 194, 195, 196, 205, 230, 236, 239, 282, 290, 299, 300, 301, 302, 303, 325, 326, 327, 328, 331, 338, 343, 344, 345, 346, 347, 355, 356, 361, 362, 363, 364, 365, 368, 371, 372, 373, 374, 375, 392, 393, 394, 400, 401, 402, 406, 410, 411, 412, 416, 417, 419, 420, 422, 423, 424, 425, 427, 430, 437, 447, 457, 467, 477, 481, 485, 493, 494, 498, 499, 506, 507, 508, 509, 515, 516, 517, 519, 520, 521, 523, 525, 539, 545, 546, 553, 556, 560, 568, 575, 580, 587, 592, 600, 603, 607, 611, 615, 622, 626, 630, 634, 641, 648, 652, 656, 660, 664, 668, 674, 678, 684, 690, 696, 702, 706, 710, 713, 720, 729, 738, 741, 744, 752, 758, 765, 771, 780, 787, 796, 802, 809, 823, 835, 839, 840, 841, 845, 846, 847, 848, 849, 865, 873, 878, 879, 880, 881, 882, 892, 899, 900, 901, 902, 903, 904, 910, 911, 912, 913, 914, 916, 917, 920, 923, 924, 926, 927, 928, 929, 931, 932,]

[input_info]
test_file_path = "tests/test_pathlike.py"
focal_file_path = "megfile/pathlike.py"
test_file_url = "https://github.com/megvii-research/megfile/blob/0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35/tests/test_pathlike.py"
focal_file_url = "https://github.com/megvii-research/megfile/blob/0dd2329354b37b41cb8ec31cfd5c15c5e0b1af35/megfile/pathlike.py"
first_commit_date = "2021-08-23"
last_commit_date = "2025-01-07"
test_file_content = "import pytest\n\nfrom megfile.pathlike import (\n    BasePath,\n    FileEntry,\n    PathLike,\n    StatResult,\n    URIPath,\n)\n\n\ndef test_file_entry():\n    stat_result = StatResult(size=100, ctime=1.1, mtime=1.2, isdir=False, islnk=False)\n    file_entry = FileEntry(name=\"test\", path=\"test\", stat=stat_result)\n    assert file_entry.is_file() is True\n    assert file_entry.is_dir() is False\n    assert file_entry.is_symlink() is False\n\n\ndef test_base_path(mocker):\n    path = \"/test\"\n    base_path = BasePath(path)\n    base_path.protocol = \"p\"\n    assert base_path.__fspath__() == \"p://test\"\n\n    funcA = mocker.patch(\"megfile.pathlike.BasePath.open\")\n    base_path.touch()\n    funcA.assert_called_once_with(\"w\")\n\n    with pytest.raises(NotImplementedError):\n        base_path.is_dir()\n\n\ndef test_base_uri_path_as_posix(mocker):\n    path = \"/test\"\n    base_uri_path = BasePath(path)\n    mocker.patch(\"megfile.pathlike.BasePath.protocol\", \"fs\")\n    assert base_uri_path.as_posix() == \"fs://test\"\n\n\ndef test_base_uri_path(mocker):\n    from megfile.utils import classproperty\n\n    mocker.patch(\"megfile.pathlike.BasePath.protocol\", \"fs\")\n\n    path = \"/test\"\n    base_uri_path = BasePath(path)\n\n    other_path_a = 1\n    with pytest.raises(TypeError):\n        base_uri_path > other_path_a\n\n    with pytest.raises(TypeError):\n        base_uri_path < other_path_a\n\n    with pytest.raises(TypeError):\n        base_uri_path >= other_path_a\n\n    with pytest.raises(TypeError):\n        base_uri_path <= other_path_a\n\n    class BaseURIPathB(BasePath):\n        def __init__(self, path: PathLike):\n            super().__init__(path)\n\n        @classproperty\n        def protocol(cls) -> str:\n            return \"test_b\"\n\n    other_path_b = BaseURIPathB(\"/test_b\")\n    with pytest.raises(TypeError):\n        base_uri_path > other_path_b\n\n    with pytest.raises(TypeError):\n        base_uri_path < other_path_b\n\n    with pytest.raises(TypeError):\n        base_uri_path >= other_path_b\n\n    with pytest.raises(TypeError):\n        base_uri_path <= other_path_b\n\n    other_path_c = BasePath(\"/test2\")\n    assert (base_uri_path > other_path_c) is False\n    assert (base_uri_path < other_path_c) is True\n    assert (base_uri_path >= other_path_c) is False\n    assert (base_uri_path <= other_path_c) is True\n\n\ndef test_uri_path(mocker):\n    mocker.patch(\"megfile.pathlike.URIPath.protocol\", \"fs\")\n    mocker.patch(\"megfile.pathlike.URIPath.path_without_protocol\", \"\")\n\n    path = \"/test\"\n    uri_path = URIPath(path)\n    assert uri_path.name == \"\"\n\n    mocker.patch(\"megfile.pathlike.URIPath.name\", \".\")\n    uri_path_b = URIPath(path)\n    assert uri_path_b.suffixes == []\n\n    with pytest.raises(TypeError):\n        uri_path.relative_to()\n\n    with pytest.raises(ValueError):\n        uri_path.relative_to(1)\n    assert uri_path.resolve() == \"fs://test\""
