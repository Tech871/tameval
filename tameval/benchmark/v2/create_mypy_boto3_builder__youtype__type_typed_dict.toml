[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "youtype/mypy_boto3_builder"
sha = "098fadc5ab3152e2c85008a592ac975328a9fca8"
bench_version = 2

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.mkdocs.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mypy_boto3_builder/type_annotations/type_typed_dict.py -m pytest -q --junit-xml=test_output.xml tests/type_annotations/test_type_typed_dict.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mypy_boto3_builder.type_annotations.type_typed_dict --unit-test tests.type_annotations.test_type_typed_dict --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mypy_boto3_builder/type_annotations/type_typed_dict.py --unit-test tests/type_annotations/test_type_typed_dict.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 61.0
original_coverage = 89.0
mutation_kill_rate = 70.0
original_mutation_kill_rate = 89.0
covered_lines = [ 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 33, 34, 35, 36, 38, 42, 44, 48, 49, 53, 60, 62, 71, 75, 77, 81, 83, 87, 90, 101, 109, 110, 111, 112, 113, 114, 115, 117, 121, 123, 129, 135, 139, 141, 153, 164, 173, 179, 190, 196, 202, 208, 214, 220, 224, 231, 235, 237, 241, 242, 243, 244, 246, 253, 268, 275, 281, 282, 299, 309, 315,]
missed_lines = [ 51, 69, 127, 133, 148, 149, 151, 157, 162, 168, 169, 170, 171, 177, 188, 194, 200, 206, 212, 218, 250, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 279, 288, 293, 295, 296, 297, 303, 313, 319, 320, 321, 323, 324, 325, 327,]

[input_info]
test_file_path = "tests/type_annotations/test_type_typed_dict.py"
focal_file_path = "mypy_boto3_builder/type_annotations/type_typed_dict.py"
test_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/tests/type_annotations/test_type_typed_dict.py"
focal_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/mypy_boto3_builder/type_annotations/type_typed_dict.py"
first_commit_date = "2020-01-23"
last_commit_date = "2025-02-22"
test_file_content = "from mypy_boto3_builder.type_annotations.type import Type\nfrom mypy_boto3_builder.type_annotations.type_literal import TypeLiteral\nfrom mypy_boto3_builder.type_annotations.type_typed_dict import TypedDictAttribute, TypeTypedDict\n\n\nclass TestTypedDictAttribute:\n    result: TypedDictAttribute\n\n    def setup_method(self) -> None:\n        self.result = TypedDictAttribute(\"test\", Type.DictStrAny, required=True)\n\n    def test_init(self) -> None:\n        assert self.result.name == \"test\"\n        assert self.result.is_required()\n\n    def test_render(self) -> None:\n        assert self.result.render() == '\"test\": Dict[str, Any]'\n\n    def test_mark_as_required(self) -> None:\n        self.result.required = False\n        assert not self.result.is_required()\n        self.result.mark_as_required()\n        assert self.result.is_required()\n\n\nclass TestTypeTypedDict:\n    result: TypeTypedDict\n\n    def setup_method(self) -> None:\n        self.result = TypeTypedDict(\n            \"MyDict\",\n            [\n                TypedDictAttribute(\"required\", Type.bool, required=True),\n                TypedDictAttribute(\"optional\", Type.str, required=False),\n            ],\n            \"documentation\",\n        )\n\n\n\n\n\n    def test_get_types(self) -> None:\n        assert set(self.result.iterate_types()) == {self.result}\n\n\n\n\n\n\n\n    def test_copy(self) -> None:\n        assert self.result.copy().name == self.result.name\n\n    def test_is_same(self) -> None:\n        assert self.result.is_same(\n            TypeTypedDict(\n                \"MyDict\",\n                [\n                    TypedDictAttribute(\"required\", Type.bool, required=True),\n                    TypedDictAttribute(\"optional\", Type.str, required=False),\n                ],\n            ),\n        )\n        assert not self.result.is_same(\n            TypeTypedDict(\n                \"MyDict\",\n                [\n                    TypedDictAttribute(\"required\", Type.bool, required=True),\n                    TypedDictAttribute(\"optional\", Type.float, required=False),\n                ],\n            ),\n        )\n\n    def test_get_children_types(self) -> None:\n        assert self.result.get_children_types() == {\n            Type.str,\n            # Type.NotRequired,\n            Type.bool,\n        }\n\n"
