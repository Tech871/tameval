[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "splunk/addonfactory-ucc-generator"
sha = "0ceda52ad4ba2548071b64914a75aae987787a86"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=splunk_add_on_ucc_framework/main.py -m pytest -q --junit-xml=test_output.xml tests/unit/test_main.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target splunk_add_on_ucc_framework.main --unit-test tests.unit.test_main --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target splunk_add_on_ucc_framework/main.py --unit-test tests/unit/test_main.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 93.0
original_coverage = 100.0
mutation_kill_rate = 24.0
original_mutation_kill_rate = 24.0
covered_lines = [ 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 56, 57, 64, 67, 68, 69, 70, 71, 73, 74, 81, 89, 96, 103, 109, 119, 125, 132, 139, 147, 148, 154, 162, 165, 171, 178, 184, 190, 196, 202, 208, 223, 231, 234, 241, 242, 243, 255, 257, 269, 273, 276, 277, 278, 279, 280, 281, 282,]
missed_lines = [ 59, 63, 256, 258, 270,]

[input_info]
test_file_path = "tests/unit/test_main.py"
focal_file_path = "splunk_add_on_ucc_framework/main.py"
test_file_url = "https://github.com/splunk/addonfactory-ucc-generator/blob/0ceda52ad4ba2548071b64914a75aae987787a86/tests/unit/test_main.py"
focal_file_url = "https://github.com/splunk/addonfactory-ucc-generator/blob/0ceda52ad4ba2548071b64914a75aae987787a86/splunk_add_on_ucc_framework/main.py"
first_commit_date = "2022-09-02"
last_commit_date = "2025-01-07"
test_file_content = "from unittest import mock\n\nimport pytest\n\nfrom splunk_add_on_ucc_framework import main\n\n\n\n\n\n\n\n\n\n\n\n\n@pytest.mark.parametrize(\n    \"config_path,should_pass\",\n    (\n        [\"path/to/config.json\", True],\n        [\"path/to/config.yaml\", True],\n        [\"path/to/config_but_not_jsonnor_yaml.xyz\", False],\n        [\"config.yml\", False],\n    ),\n)\n@mock.patch(\"splunk_add_on_ucc_framework.commands.build.generate\")\ndef test_correct_config_argument(\n    mock_ucc_gen_generate, caplog, config_path, should_pass\n):\n    args = [\"build\", \"--config\"]\n    args.append(config_path)\n\n    if should_pass:\n        main.main(args)\n\n        args, kwargs = mock_ucc_gen_generate.call_args\n        assert kwargs[\"config_path\"] == config_path\n\n    else:  # Failing scenario - config file is not .json nor .yaml\n        with pytest.raises(SystemExit):\n            main.main(args)\n\n        expected_msg = f\" Global config file should be a JSON or YAML file. Provided: {config_path}\"\n        assert expected_msg in caplog.text\n"
