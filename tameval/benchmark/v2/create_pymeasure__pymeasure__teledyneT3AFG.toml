[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pymeasure/pymeasure"
sha = "03452744481f5dd366eb1ee3764bff3995e384d1"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pymeasure/instruments/teledyne/teledyneT3AFG.py -m pytest -q --junit-xml=test_output.xml tests/instruments/teledyne/test_teledyneT3AFG.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pymeasure.instruments.teledyne.teledyneT3AFG --unit-test tests.instruments.teledyne.test_teledyneT3AFG --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pymeasure/instruments/teledyne/teledyneT3AFG.py --unit-test tests/instruments/teledyne/test_teledyneT3AFG.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 88.0
original_coverage = 92.0
mutation_kill_rate = 58.0
original_mutation_kill_rate = 100.0
covered_lines = [ 24, 26, 27, 29, 30, 33, 36, 37, 38, 39, 47, 50, 51, 62, 73, 85, 99, 113, 124, 149, 151, 153, 154,]
missed_lines = [ 40, 42, 45,]

[input_info]
test_file_path = "tests/instruments/teledyne/test_teledyneT3AFG.py"
focal_file_path = "pymeasure/instruments/teledyne/teledyneT3AFG.py"
test_file_url = "https://github.com/pymeasure/pymeasure/blob/03452744481f5dd366eb1ee3764bff3995e384d1/tests/instruments/teledyne/test_teledyneT3AFG.py"
focal_file_url = "https://github.com/pymeasure/pymeasure/blob/03452744481f5dd366eb1ee3764bff3995e384d1/pymeasure/instruments/teledyne/teledyneT3AFG.py"
first_commit_date = "2022-12-14"
last_commit_date = "2025-04-28"
test_file_content = "#\n# This file is part of the PyMeasure package.\n#\n# Copyright (c) 2013-2025 PyMeasure Developers\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n\nfrom pymeasure.test import expected_protocol\nfrom pymeasure.instruments.teledyne.teledyneT3AFG import TeledyneT3AFG\n\ndef test_frequency():\n    \"\"\"Verify the frequency setter and getter for ramp or sine wavetype.\"\"\"\n    with expected_protocol(\n        TeledyneT3AFG,\n        [(\"C1:BSWV FRQ,1000\", None),\n         (\"SYST:ERR?\", \"-0, No errors\"),\n         (\"C1:BSWV?\", \"C1:BSWV WVTP,SINE,FRQ,0.3HZ,PERI,3.33333S,AMP,0.08V,\"\n          \"AMPVRMS,0.02828Vrms,MAX_OUTPUT_AMP,4.6V,OFST,-2V,HLEV,-1.96V,LLEV,-2.04V,PHSE,0\")],\n    ) as inst:\n        inst.ch_1.frequency = 1000\n        assert inst.ch_1.frequency == 0.3\n"
