[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"
bench_version = 2

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/register_list.py -m pytest -q --junit-xml=test_output.xml hdl_registers/test/test_register_list.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.register_list --unit-test hdl_registers.test.test_register_list --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/register_list.py --unit-test hdl_registers/test/test_register_list.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 53.0
original_coverage = 85.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 23, 30, 35, 46, 47, 49, 50, 52, 53, 85, 99, 100, 105, 117, 118, 122, 123, 125, 155, 173, 209, 229, 232, 233, 249, 250, 252, 262, 263, 264, 266, 268, 269, 282, 283,]
missed_lines = [ 24, 26, 27, 72, 73, 74, 78, 80, 81, 83, 102, 103, 143, 144, 145, 147, 148, 149, 151, 165, 166, 167, 169, 192, 194, 196, 199, 200, 204, 205, 207, 230, 235, 236, 239, 240, 242, 243, 246, 247, 280,]

[input_info]
test_file_path = "hdl_registers/test/test_register_list.py"
focal_file_path = "hdl_registers/register_list.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/test/test_register_list.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/register_list.py"
first_commit_date = "2021-10-21"
last_commit_date = "2025-02-11"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\n# Standard libraries\nimport copy\nfrom pathlib import Path\n\n# Third party libraries\nimport pytest\n\n# First party libraries\nfrom hdl_registers.register import Register\nfrom hdl_registers.register_list import RegisterList\n\n\ndef test_from_default_registers():\n    register_a = Register(name=\"a\", index=0, mode=\"r\", description=\"AA\")\n    register_b = Register(name=\"b\", index=1, mode=\"w\", description=\"BB\")\n    default_registers = [register_a, register_b]\n\n    register_list = RegisterList.from_default_registers(\n        name=\"apa\", source_definition_file=None, default_registers=default_registers\n    )\n\n    # Change some things in the register objects to show that they are copied\n    default_registers.append(Register(name=\"c\", index=2, mode=\"r_w\", description=\"CC\"))\n    register_a.mode = \"w\"\n    register_b.name = \"x\"\n\n    assert len(register_list.register_objects) == 2\n    assert register_list.get_register(\"a\").mode == \"r\"\n    assert register_list.get_register(\"b\").name == \"b\"\n\n\ndef test_from_default_registers_with_bad_indexes_should_raise_exception():\n    register_a = Register(name=\"a\", index=0, mode=\"r\", description=\"\")\n    register_b = Register(name=\"b\", index=0, mode=\"w\", description=\"\")\n    default_registers = [register_a, register_b]\n\n    with pytest.raises(ValueError) as exception_info:\n        RegisterList.from_default_registers(\n            name=\"apa\", source_definition_file=None, default_registers=default_registers\n        )\n    assert (\n        str(exception_info.value)\n        == 'Default register index mismatch for \"b\". Got \"0\", expected \"1\".'\n    )\n\n\ndef test_header_constants():\n    registers = RegisterList(name=\"apa\", source_definition_file=None)\n    hest = registers.add_constant(\"hest\", 123, \"\")\n    zebra = registers.add_constant(\"zebra\", 456, \"description\")\n\n    assert len(registers.constants) == 2\n\n    assert registers.get_constant(\"hest\") == hest\n    assert registers.get_constant(\"zebra\") == zebra\n\n    with pytest.raises(ValueError) as exception_info:\n        assert registers.get_constant(\"non existing\") is None\n    assert (\n        str(exception_info.value)\n        == 'Could not find constant \"non existing\" within register list \"apa\"'\n    )\n\n    zebra.value = -5\n    assert registers.get_constant(\"zebra\").value == -5\n\n\ndef test_invalid_register_mode_should_raise_exception():\n    registers = RegisterList(None, None)\n    registers.append_register(name=\"test\", mode=\"r_w\", description=\"\")\n\n    with pytest.raises(ValueError) as exception_info:\n        registers.append_register(name=\"hest\", mode=\"x\", description=\"\")\n    assert str(exception_info.value) == 'Invalid mode \"x\" for register \"hest\"'\n\n    register_array = registers.append_register_array(\"array\", 2, \"\")\n    register_array.append_register(name=\"apa\", mode=\"r\", description=\"\")\n    with pytest.raises(ValueError) as exception_info:\n        register_array.append_register(name=\"zebra\", mode=\"y\", description=\"\")\n    assert str(exception_info.value) == 'Invalid mode \"y\" for register \"zebra\"'\n\n\ndef test_registers_are_appended_properly_and_can_be_edited_in_place():\n    register_array = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n\n    register_hest = register_array.append_register(name=\"hest\", mode=\"r\", description=\"\")\n    assert register_hest.index == 0\n\n    register_zebra = register_array.append_register(name=\"zebra\", mode=\"r\", description=\"\")\n    assert register_zebra.index == 1\n\n    register_hest.description = \"new desc\"\n    assert register_array.register_objects[0].description == \"new desc\"\n\n\ndef test_register_arrays_are_appended_properly_and_can_be_edited_in_place():\n    register_array = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n\n    register_array_hest = register_array.append_register_array(\n        name=\"hest\", length=4, description=\"\"\n    )\n    assert register_array_hest.base_index == 0\n    register_array_hest.append_register(name=\"foo\", mode=\"r\", description=\"\")\n    register_array_hest.append_register(name=\"bar\", mode=\"w\", description=\"\")\n\n    register_array_zebra = register_array.append_register_array(\n        name=\"zebra\", length=2, description=\"\"\n    )\n    assert register_array_zebra.base_index == 8\n\n\ndef test_get_register():\n    register_list = RegisterList(name=\"apa\", source_definition_file=None)\n    apa = register_list.append_register(name=\"apa\", mode=\"r\", description=\"\")\n    hest = register_list.append_register(name=\"hest\", mode=\"r\", description=\"\")\n    register_array = register_list.append_register_array(\n        name=\"register_array\", length=3, description=\"\"\n    )\n    zebra = register_array.append_register(name=\"zebra\", mode=\"r\", description=\"\")\n\n    assert register_list.get_register(register_name=\"apa\") is apa\n    assert register_list.get_register(register_name=\"hest\") is hest\n\n    with pytest.raises(ValueError) as exception_info:\n        assert register_list.get_register(register_name=\"non existing\") is None\n    assert (\n        str(exception_info.value)\n        == 'Could not find register \"non existing\" within register list \"apa\"'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        register_list.get_register(register_name=\"register_array\")\n    assert (\n        str(exception_info.value)\n        == 'Could not find register \"register_array\" within register list \"apa\"'\n    )\n    register_list.get_register_array(\"register_array\")\n\n    with pytest.raises(ValueError) as exception_info:\n        register_list.get_register(register_name=\"zebra\")\n    assert str(exception_info.value) == 'Could not find register \"zebra\" within register list \"apa\"'\n\n    assert (\n        register_list.get_register(register_name=\"zebra\", register_array_name=\"register_array\")\n        is zebra\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        register_list.get_register(register_name=\"hest\", register_array_name=\"register_array\")\n    assert (\n        str(exception_info.value)\n        == 'Could not find register \"hest\" within register array \"register_array\"'\n    )\n\n\ndef test_get_register_array():\n    register_list = RegisterList(name=\"apa\", source_definition_file=None)\n\n    hest = register_list.append_register_array(name=\"hest\", length=3, description=\"\")\n    hest.append_register(name=\"foo\", mode=\"r\", description=\"\")\n\n    zebra = register_list.append_register_array(name=\"zebra\", length=2, description=\"\")\n    zebra.append_register(name=\"bar\", mode=\"r\", description=\"\")\n\n    register_list.append_register(name=\"register\", mode=\"r\", description=\"\")\n\n    assert register_list.get_register_array(\"hest\") is hest\n    assert register_list.get_register_array(\"zebra\") is zebra\n\n    with pytest.raises(ValueError) as exception_info:\n        register_list.get_register_array(\"non existing\")\n    assert (\n        str(exception_info.value)\n        == 'Could not find register array \"non existing\" within register list \"apa\"'\n    )\n\n    with pytest.raises(ValueError) as exception_info:\n        register_list.get_register_array(\"register\")\n    assert (\n        str(exception_info.value)\n        == 'Could not find register array \"register\" within register list \"apa\"'\n    )\n    register_list.get_register(\"register\")\n\n\ndef test_get_register_index():\n    register_list = RegisterList(name=None, source_definition_file=None)\n\n    register_list.append_register(name=\"apa\", mode=\"r\", description=\"\")\n    register_list.append_register(name=\"hest\", mode=\"r\", description=\"\")\n\n    zebra = register_list.append_register_array(name=\"zebra\", length=2, description=\"\")\n    zebra.append_register(name=\"bar\", mode=\"r\", description=\"\")\n    zebra.append_register(name=\"baz\", mode=\"r\", description=\"\")\n\n    assert register_list.get_register_index(register_name=\"apa\") == 0\n    assert register_list.get_register_index(register_name=\"hest\") == 1\n    assert (\n        register_list.get_register_index(\n            register_name=\"bar\", register_array_name=\"zebra\", register_array_index=0\n        )\n        == 2\n    )\n    assert (\n        register_list.get_register_index(\n            register_name=\"baz\", register_array_name=\"zebra\", register_array_index=1\n        )\n        == 5\n    )\n\n\ndef test_repr_basic():\n    # Check that repr is an actual representation, not just \"X object at 0xABCDEF\"\n    assert \"apa\" in repr(RegisterList(name=\"apa\", source_definition_file=Path(\".\")))\n\n    # Different name\n    assert repr(RegisterList(name=\"apa\", source_definition_file=Path(\".\"))) != repr(\n        RegisterList(name=\"hest\", source_definition_file=Path(\".\"))\n    )\n\n    # Different source_definition_file\n    assert repr(RegisterList(name=\"apa\", source_definition_file=Path(\".\"))) != repr(\n        RegisterList(name=\"apa\", source_definition_file=Path(\"./zebra\"))\n    )\n\n\ndef test_repr_with_constant_added():\n    register_list_a = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n    register_list_b = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n    assert repr(register_list_a) == repr(register_list_b)\n\n    register_list_a.add_constant(name=\"zebra\", value=3, description=\"\")\n\n    assert repr(register_list_a) != repr(register_list_b)\n\n\ndef test_repr_with_register_appended():\n    register_list_a = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n    register_list_b = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n    assert repr(register_list_a) == repr(register_list_b)\n\n    register_list_a.append_register(name=\"zebra\", mode=\"w\", description=\"\")\n\n    assert repr(register_list_a) != repr(register_list_b)\n\n\ndef test_repr_with_register_array_appended():\n    register_list_a = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n    register_list_b = RegisterList(name=\"apa\", source_definition_file=Path(\".\"))\n    assert repr(register_list_a) == repr(register_list_b)\n\n    register_list_a.append_register_array(name=\"zebra\", length=4, description=\"\")\n\n    assert repr(register_list_a) != repr(register_list_b)\n\n\ndef test_deep_copy_of_register_list_actually_copies_everything():\n    original_list = RegisterList(\"original\", Path(\"/original_file.txt\"))\n    original_list.add_constant(\"original_constant\", value=2, description=\"original constant\")\n    original_list.append_register(\"original_register\", \"w\", description=\"original register\")\n    original_array = original_list.append_register_array(\"original_array\", length=4, description=\"\")\n    original_array.append_register(name=\"original_register_in_array\", mode=\"r\", description=\"\")\n\n    copied_list = copy.deepcopy(original_list)\n\n    assert copied_list.constants is not original_list.constants\n    assert copied_list.constants[0] is not original_list.constants[0]\n\n    copied_list.add_constant(name=\"new_constant\", value=5, description=\"\")\n    assert len(copied_list.constants) == 2 and len(original_list.constants) == 1\n\n    assert copied_list.register_objects is not original_list.register_objects\n    assert copied_list.register_objects[0] is not original_list.register_objects[0]\n\n    # Original register in position 0, original register array in position 1, new register in 2\n    copied_list.append_register(name=\"new_register\", mode=\"r\", description=\"\")\n    assert len(copied_list.register_objects) == 3 and len(original_list.register_objects) == 2\n\n    assert copied_list.register_objects[1] is not original_list.register_objects[1]\n    assert (\n        copied_list.register_objects[1].registers is not original_list.register_objects[1].registers\n    )\n    assert (\n        copied_list.register_objects[1].registers[0]\n        is not original_list.register_objects[1].registers[0]\n    )\n    copied_list.register_objects[1].append_register(\n        name=\"new_register_in_array\", mode=\"r_w\", description=\"\"\n    )\n    assert len(copied_list.register_objects[1].registers) == 2\n    assert len(original_list.register_objects[1].registers) == 1"
