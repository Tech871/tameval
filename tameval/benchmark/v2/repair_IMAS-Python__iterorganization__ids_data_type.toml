[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "iterorganization/IMAS-Python"
sha = "9446e62f6ce19cd7c64a30e320aa4627041abeaa"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=imas/ids_data_type.py -m pytest -q --junit-xml=test_output.xml imas/test/test_ids_data_type.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target imas.ids_data_type --unit-test imas.test.test_ids_data_type --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target imas/ids_data_type.py --unit-test imas/test/test_ids_data_type.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 91.0
original_coverage = 91.0
mutation_kill_rate = 81.0
original_mutation_kill_rate = 81.0
covered_lines = [ 5, 6, 7, 9, 11, 22, 25, 26, 28, 29, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 51, 53, 59, 61, 67, 69, 74, 76, 77, 78, 98, 100, 102, 105, 106, 107, 108, 110, 113, 114,]
missed_lines = [ 99, 101, 103, 112,]

[input_info]
test_file_path = "imas/test/test_ids_data_type.py"
focal_file_path = "imas/ids_data_type.py"
test_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/test/test_ids_data_type.py"
focal_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/ids_data_type.py"
first_commit_date = "2025-01-22"
last_commit_date = "2025-01-23"
test_file_content = "import pytest\n\nfrom imas.ids_data_type import IDSDataType\n\n\ndef test_legacy_type():\n    assert IDSDataType.parse(\"str_type\") == (IDSDataType.STR, 0)\n    assert IDSDataType.parse(\"str_1d_type\") == (IDSDataType.STR, 1)\n    assert IDSDataType.parse(\"flt_type\") == (IDSDataType.FLT, 0)\n    assert IDSDataType.parse(\"flt_1d_type\") == (IDSDataType.FLT, 1)\n    assert IDSDataType.parse(\"int_type\") == (IDSDataType.INT, 0)\n\n\n@pytest.mark.parametrize(\"ndim\", range(2))\ndef test_string_types(ndim):\n    result = IDSDataType.parse(f\"STR_{ndim}D\")\n    expected = (IDSDataType.STR, ndim)\n    assert result == expected\n\n\n@pytest.mark.parametrize(\"ndim\", range(4))\ndef test_integer_types(ndim):\n    assert IDSDataType.parse(f\"INT_{ndim}D\") == (IDSDataType.INT, ndim)\n\n\n@pytest.mark.parametrize(\"ndim\", range(7))\ndef test_floating_point_types(ndim):\n    assert IDSDataType.parse(f\"FLT_{ndim}D\") == (IDSDataType.FLT, ndim)\n\n\n@pytest.mark.parametrize(\"ndim\", range(7))\ndef test_complex_types(ndim):\n    assert IDSDataType.parse(f\"CPX_{ndim}D\") == (IDSDataType.CPX, ndim)\n\n\ndef test_default_values():\n    assert IDSDataType.STR.default == \"\"\n    assert IDSDataType.INT.default == -999_999_999\n    assert IDSDataType.FLT.default == -9e40\n    assert IDSDataType.CPX.default == -9e40 - 9e40j\n    assert IDSDataType.STRUCT_ARRAY.default is None\n    assert IDSDataType.STRUCTURE.default is None\n\n\n@pytest.mark.parametrize(\"ndim\", range(2))\ndef check_str_types(ndim):\n    parsed_type, dimensions = IDSDataType.parse(f\"STR_{ndim}D\")\n    assert parsed_type is IDSDataType.STR\n    assert dimensions == ndim\n\n\n@pytest.mark.parametrize(\"ndim\", range(4))\ndef verify_int_types(ndim):\n    assert IDSDataType.parse(f\"INT_{ndim}D\")[0] == IDSDataType.INT\n    assert IDSDataType.parse(f\"INT_{ndim}D\")[1] == ndim"
