[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "XMU-Kuangnan-Fang-Team/GENetLib"
sha = "4caa08b3f0c3db1cf7640d638dc5def9fbcbdce7"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=GENetLib/basis_mat.py -m pytest -q --junit-xml=test_output.xml pytest/test_basis_mat.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target GENetLib.basis_mat --unit-test pytest.test_basis_mat --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target GENetLib/basis_mat.py --unit-test pytest/test_basis_mat.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 71.0
original_coverage = 87.0
mutation_kill_rate = 28.0
original_mutation_kill_rate = 30.0
covered_lines = [ 0, 1, 3, 6, 9, 11, 12, 13, 14, 15, 17, 19, 20, 21, 23, 25, 27, 29, 31, 33, 34, 36, 37, 38, 39, 42, 43, 45, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 163, 164, 165, 166, 167, 168, 169, 170, 187,]
missed_lines = [ 16, 18, 22, 24, 26, 28, 30, 32, 35, 41, 47, 76, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 126, 140, 141, 152, 156, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186,]

[input_info]
test_file_path = "pytest/test_basis_mat.py"
focal_file_path = "GENetLib/basis_mat.py"
test_file_url = "https://github.com/XMU-Kuangnan-Fang-Team/GENetLib/blob/4caa08b3f0c3db1cf7640d638dc5def9fbcbdce7/pytest/test_basis_mat.py"
focal_file_url = "https://github.com/XMU-Kuangnan-Fang-Team/GENetLib/blob/4caa08b3f0c3db1cf7640d638dc5def9fbcbdce7/GENetLib/basis_mat.py"
first_commit_date = "2024-09-26"
last_commit_date = "2025-01-22"
test_file_content = "import pytest\nimport numpy as np\nimport pandas as pd\nfrom GENetLib.spline_design import spline_design\nfrom GENetLib.basis_mat import bspline_mat, expon_mat, fourier_mat, monomial_mat, polyg_mat, power_mat\n\n# Test B-spline matrix\ndef test_bspline_mat():\n    x = np.linspace(0, 1, 10)\n    breaks = np.linspace(0, 1, 5)\n    result = bspline_mat(x, breaks)\n    assert result.shape is not None\n\ndef test_bspline_mat_errors():\n    x = np.linspace(0, 1, 10)\n    breaks = [0, 0.5]\n    with pytest.raises(ValueError):\n        bspline_mat(x, breaks)  # Not enough breaks\n    with pytest.raises(ValueError):\n        bspline_mat(x, breaks, norder=0)  # Invalid order\n    with pytest.raises(ValueError):\n        bspline_mat(x, breaks, nderiv=-1)  # Negative derivative\n\n# Test Exponential matrix\ndef test_expon_mat():\n    x = np.linspace(0, 1, 10)\n    ratevec = [0.5]\n    result = expon_mat(x, ratevec)\n    assert result.shape is not None\n\n# Test Fourier matrix\ndef test_fourier_mat():\n    x = np.linspace(0, 1, 10)\n    result = fourier_mat(x)\n    assert result.shape[1] > 1\n\ndef test_fourier_mat_errors():\n    x = np.linspace(0, 1, 10)\n    with pytest.raises(ValueError):\n        fourier_mat(x, period=-1)  # Negative period\n    with pytest.raises(ValueError):\n        fourier_mat(x, nbasis=-1)  # Negative basis\n\n# Test Monomial matrix\ndef test_monomial_mat():\n    x = np.linspace(0, 1, 10)\n    exponents = [1, 2]\n    result = monomial_mat(x, exponents)\n    assert result.shape is not None\n\ndef test_monomial_mat_errors():\n    x = np.linspace(0, 1, 10)\n    exponents = [1.5, 2]  # Non-integer exponent\n    with pytest.raises(ValueError):\n        monomial_mat(x, exponents)\n    exponents = [1, 1]  # Duplicate exponents\n    with pytest.raises(ValueError):\n        monomial_mat(x, exponents)\n\n# Test Polynomial matrix\ndef test_polyg_mat():\n    x = np.linspace(0, 1, 10)\n    argvals = np.linspace(0, 1, 5)\n    result = polyg_mat(x, argvals)\n    assert result.shape is not None\n\ndef test_polyg_mat_errors():\n    x = np.linspace(0, 1, 10)\n    argvals = [0, 0.5, 0.5]  # Non-strictly increasing argvals\n    with pytest.raises(ValueError):\n        polyg_mat(x, argvals)\n\n# Test Power matrix\ndef test_power_mat():\n    x = np.linspace(0, 1, 10)\n    exponents = [1, 2]\n    result = power_mat(x, exponents)\n    assert result.shape is not None\n\n# Additional tests for edge cases and specific conditions\ndef test_bspline_mat_return_matrix():\n    x = np.linspace(0, 1, 10)\n    breaks = np.linspace(0, 1, 5)\n    result = bspline_mat(x, breaks, returnMatrix=True)\n    assert result is not None\n\ndef test_bspline_mat_nderiv():\n    x = np.linspace(0, 1, 10)\n    breaks = np.linspace(0, 1, 5)\n    result = bspline_mat(x, breaks, nderiv=1)\n    assert result.shape is not None\n\ndef test_fourier_mat_even_nbasis():\n    x = np.linspace(0, 1, 10)\n    result = fourier_mat(x, nbasis=4)\n    assert result.shape[1] is not None\n\ndef test_monomial_mat_nderiv():\n    x = np.linspace(0, 1, 10)\n    exponents = [2, 3]\n    result = monomial_mat(x, exponents, nderiv=1)\n    assert result.shape is not None"
