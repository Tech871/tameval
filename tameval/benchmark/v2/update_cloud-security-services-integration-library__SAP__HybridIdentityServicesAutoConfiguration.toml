[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "SAP/cloud-security-services-integration-library"
sha = "bc3a37687860d8dd34ca2e26b45d942bd4a3e85b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl spring-security -Dtest=HybridIdentityServicesAutoConfigurationTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl spring-security -DtargetClasses=**.HybridIdentityServicesAutoConfiguration  -DtargetTests=**.HybridIdentityServicesAutoConfigurationTest  -DoutputFormats=XML"
coverage_report_path = "spring-security/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "spring-security/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "spring-security/src/test/java/com/sap/cloud/security/spring/autoconfig/HybridIdentityServicesAutoConfigurationTest.java"
focal_file_path = "spring-security/src/main/java/com/sap/cloud/security/spring/autoconfig/HybridIdentityServicesAutoConfiguration.java"
test_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/spring-security/src/test/java/com/sap/cloud/security/spring/autoconfig/HybridIdentityServicesAutoConfigurationTest.java"
focal_file_url = "https://github.com/SAP/cloud-security-services-integration-library/blob/bc3a37687860d8dd34ca2e26b45d942bd4a3e85b/spring-security/src/main/java/com/sap/cloud/security/spring/autoconfig/HybridIdentityServicesAutoConfiguration.java"
first_commit_date = "2021-02-16"
last_commit_date = "2024-06-20"
test_file_content = "/**\n * SPDX-FileCopyrightText: 2018-2023 SAP SE or an SAP affiliate company and Cloud Security Client Java contributors\n * <p>\n * SPDX-License-Identifier: Apache-2.0\n */\npackage com.sap.cloud.security.spring.autoconfig;\n\nimport com.sap.cloud.security.spring.token.authentication.HybridJwtDecoder;\nimport com.sap.cloud.security.spring.token.authentication.IasJwtDecoder;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.AutoConfigurations;\nimport org.springframework.boot.test.context.runner.WebApplicationContextRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass HybridIdentityServicesAutoConfigurationTest {\n\tprivate final List<String> properties = new ArrayList<>();\n\tprivate WebApplicationContextRunner runner;\n\n\t@BeforeEach\n\tvoid setup() {\n\t\tproperties.add(\"sap.security.services.xsuaa.url:http://localhost\");\n\t\tproperties.add(\"sap.security.services.xsuaa.uaadomain:localhost\");\n\t\tproperties.add(\"sap.security.services.xsuaa.xsappname:theAppName\");\n\t\tproperties.add(\"sap.security.services.xsuaa.clientid:cid\");\n\t\tproperties.add(\"sap.security.services.identity.url:http://localhost\");\n\t\tproperties.add(\"sap.security.services.identity.clientid:cid\");\n\n\t\trunner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(properties.toArray(new String[0]))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\t}\n\n\t@Test\n\tvoid autoConfigurationActive() {\n\t\trunner.run(context -> assertNotNull(context.getBean(\"hybridJwtDecoder\", HybridJwtDecoder.class)));\n\t}\n\n\t@Test\n\tvoid autoConfigurationActiveInclProperties() {\n\t\trunner.withPropertyValues(\"sap.spring.security.hybrid.auto:true\")\n\t\t\t\t.run((context) -> assertNotNull(context.getBean(HybridJwtDecoder.class)));\n\t}\n\n\t@Test\n\tvoid autoConfigurationDisabledByProperty() {\n\t\trunner.withPropertyValues(\"sap.spring.security.hybrid.auto:false\")\n\t\t\t\t.run((context) -> assertFalse(context.containsBean(\"hybridJwtDecoder\")));\n\t}\n\n\t@Test\n\tvoid autoConfigurationForIdentityAndSingleXsuaaService() {\n\t\tWebApplicationContextRunner mt_runner;\n\n\t\tList<String> mt_properties = new ArrayList<>();\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].url:http://localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].uaadomain:localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].xsappname:theAppName\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].clientid:cid\");\n\t\tmt_properties.add(\"sap.security.services.identity.url:http://localhost\");\n\t\tmt_properties.add(\"sap.security.services.identity.clientid:cid\");\n\n\t\tmt_runner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(mt_properties.toArray(new String[0]))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\n\t\tmt_runner.run(context -> {\n\t\t\tassertFalse(context.containsBean(\"hybridJwtDecoder\"));\n\t\t\tassertTrue(context.containsBean(\"hybridJwtDecoderMultiXsuaaServices\"));\n\t\t});\n\t}\n\n\t@Test\n\tvoid autoConfigurationUsesDecoderForMultipleXsuaaServicesAsPrimary() {\n\t\tWebApplicationContextRunner mt_runner;\n\n\t\tList<String> mt_properties = new ArrayList<>(properties);\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].url:http://localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].uaadomain:localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].xsappname:theAppName\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].clientid:cid\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[1].clientid:cid2\");\n\t\tmt_properties.add(\"sap.security.services.identity.url:http://localhost\");\n\t\tmt_properties.add(\"sap.security.services.identity.clientid:cid\");\n\n\t\tmt_runner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(mt_properties.toArray(new String[0]))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\n\t\tmt_runner.run(context -> {\n\t\t\tassertTrue(context.containsBean(\"hybridJwtDecoder\"));\n\t\t\tassertTrue(context.containsBean(\"hybridJwtDecoderMultiXsuaaServices\"));\n\t\t\tassertNotEquals(context.getBean(HybridJwtDecoder.class), context.getBean(\"hybridJwtDecoder\"));\n\t\t\tassertEquals(context.getBean(HybridJwtDecoder.class),\n\t\t\t\t\tcontext.getBean(\"hybridJwtDecoderMultiXsuaaServices\"));\n\t\t});\n\t}\n\n\t@Test\n\tvoid autoConfigurationUsesDecoderForSingleXsuaaService() {\n\t\tWebApplicationContextRunner mt_runner;\n\n\t\tList<String> mt_properties = new ArrayList<>();\n\t\tmt_properties.add(\"sap.security.services.xsuaa.url:http://localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa.uaadomain:localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa.xsappname:theAppName\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa.clientid:xsuaacid\");\n\n\t\tmt_runner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(mt_properties.toArray(new String[0]))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\n\t\tmt_runner.run(context -> {\n\t\t\tassertTrue(context.containsBean(\"hybridJwtDecoder\"));\n\t\t\tassertFalse(context.containsBean(\"hybridJwtDecoderMultiXsuaaServices\"));\n\t\t\tassertEquals(context.getBean(HybridJwtDecoder.class),\n\t\t\t\t\tcontext.getBean(\"hybridJwtDecoder\"));\n\t\t});\n\t}\n\n\t@Test\n\tvoid autoConfigurationUsesDecoderForMultipleXsuaaServices() {\n\t\tWebApplicationContextRunner mt_runner;\n\n\t\tList<String> mt_properties = new ArrayList<>();\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].url:http://localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].uaadomain:localhost\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].xsappname:theAppName\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[0].clientid:xsuaacid\");\n\t\tmt_properties.add(\"sap.security.services.xsuaa[1].clientid:cid2\");\n\n\t\tmt_runner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(mt_properties.toArray(new String[0]))\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\n\t\tmt_runner.run(context -> {\n\t\t\tassertFalse(context.containsBean(\"hybridJwtDecoder\"));\n\t\t\tassertTrue(context.containsBean(\"hybridJwtDecoderMultiXsuaaServices\"));\n\t\t\tassertEquals(context.getBean(HybridJwtDecoder.class),\n\t\t\t\t\tcontext.getBean(\"hybridJwtDecoderMultiXsuaaServices\"));\n\t\t});\n\t}\n\n\t@Test\n\tvoid userConfigurationCanOverrideDefaultBeans() {\n\t\trunner.withUserConfiguration(UserConfiguration.class)\n\t\t\t\t.run((context) -> {\n\t\t\t\t\tassertFalse(context.containsBean(\"hybridJwtDecoder\"));\n\t\t\t\t\tassertNotNull(context.getBean(\"customJwtDecoder\", NimbusJwtDecoder.class));\n\t\t\t\t});\n\t}\n\n\t@Test\n\tvoid autoConfigurationIdentityServiceOnly() {\n\t\tList<String> identityProperties = new ArrayList<>();\n\t\tidentityProperties.add(\"sap.security.services.identity.url:http://localhost\");\n\t\tidentityProperties.add(\"sap.security.services.identity.domains:localhost\");\n\t\tidentityProperties.add(\"sap.security.services.identity.clientid:cid\");\n\n\t\tWebApplicationContextRunner runner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(identityProperties.toArray(new String[0]))\n\t\t\t\t.withBean(org.springframework.web.context.support.HttpRequestHandlerServlet.class)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\t\trunner.run(context -> assertNotNull(context.getBean(\"iasJwtDecoder\", IasJwtDecoder.class)));\n\t}\n\n\t@Test\n\tvoid autoConfigurationProofTokenCheckEnabled() {\n\t\tList<String> identityProperties = new ArrayList<>();\n\t\tidentityProperties.add(\"sap.security.services.identity.url:http://localhost\");\n\t\tidentityProperties.add(\"sap.security.services.identity.domains:localhost\");\n\t\tidentityProperties.add(\"sap.security.services.identity.clientid:cid\");\n\t\tidentityProperties.add(\"sap.spring.security.identity.prooftoken:true\");\n\n\t\tWebApplicationContextRunner runner = new WebApplicationContextRunner()\n\t\t\t\t.withPropertyValues(identityProperties.toArray(new String[0]))\n\t\t\t\t.withBean(org.springframework.web.context.support.HttpRequestHandlerServlet.class)\n\t\t\t\t.withConfiguration(AutoConfigurations.of(HybridIdentityServicesAutoConfiguration.class));\n\t\trunner.run(context -> assertNotNull(context.getBean(\"iasJwtDecoderWithProofTokenCheck\", IasJwtDecoder.class)));\n\t}\n\n\t@Configuration\n\tstatic class UserConfiguration {\n\n\t\t@Bean\n\t\tpublic JwtDecoder customJwtDecoder() {\n\t\t\treturn NimbusJwtDecoder.withJwkSetUri(\"http://localhost:8080/uaa/oauth/token_keys\").build();\n\t\t}\n\t}\n\n}"
