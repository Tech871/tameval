[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "mdabrowski1990/uds"
sha = "81ca93afdc4ac9e386bbdebaf44ab0ac9cc22941"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=uds/message/service_identifiers.py -m pytest -q --junit-xml=test_output.xml tests/software_tests/message/test_service_identifiers.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target uds.message.service_identifiers --unit-test tests.software_tests.message.test_service_identifiers --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target uds/message/service_identifiers.py --unit-test tests/software_tests/message/test_service_identifiers.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 94.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = [ 7, 10, 12, 14, 16, 17, 20, 21, 22, 23, 26, 27, 28, 29, 32, 47, 48, 55, 56, 64, 65, 68, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 95, 97, 98, 99, 100, 101, 102, 105, 106, 117, 119, 120, 128, 129, 132, 137, 138,]
missed_lines = [ 66, 69, 130, 133,]

[input_info]
test_file_path = "tests/software_tests/message/test_service_identifiers.py"
focal_file_path = "uds/message/service_identifiers.py"
test_file_url = "https://github.com/mdabrowski1990/uds/blob/81ca93afdc4ac9e386bbdebaf44ab0ac9cc22941/tests/software_tests/message/test_service_identifiers.py"
focal_file_url = "https://github.com/mdabrowski1990/uds/blob/81ca93afdc4ac9e386bbdebaf44ab0ac9cc22941/uds/message/service_identifiers.py"
first_commit_date = "2021-11-18"
last_commit_date = "2025-08-09"
test_file_content = "import pytest\nfrom mock import patch\n\nfrom uds.message.service_identifiers import RequestSID, ResponseSID, \\\n    ByteEnum, ValidatedEnum, ExtendableEnum\n\n\nSCRIPT_LOCATION = \"uds.message.service_identifiers\"\n\n\nclass TestRequestSID:\n    \"\"\"Unit tests for 'RequestSID' enum.\"\"\"\n\n    def setup_method(self):\n        self._patcher_warn = patch(f\"{SCRIPT_LOCATION}.warn\")\n        self.mock_warn = self._patcher_warn.start()\n        self._patcher_is_member = patch(f\"{SCRIPT_LOCATION}.RequestSID.is_member\")\n        self.mock_is_member = self._patcher_is_member.start()\n        self._patcher_possible_request_sids = patch(f\"{SCRIPT_LOCATION}.POSSIBLE_REQUEST_SIDS\")\n        self.mock_possible_request_sids = self._patcher_possible_request_sids.start()\n\n    def teardown_method(self):\n        self._patcher_warn.stop()\n        self._patcher_is_member.stop()\n        self._patcher_possible_request_sids.stop()\n\n    def test_inheritance__byte_enum(self):\n        assert issubclass(RequestSID, ByteEnum)\n\n    def test_inheritance__validated_enum(self):\n        assert issubclass(RequestSID, ValidatedEnum)\n\n    def test_inheritance__extendable_enum(self):\n        assert issubclass(ResponseSID, ExtendableEnum)\n\n    @pytest.mark.parametrize(\"value\", [1, 0x55, 0xFF])\n    def test_is_request_sid__member(self, value):\n        self.mock_is_member.return_value = True\n        self.mock_possible_request_sids.__contains__.return_value = True\n        assert RequestSID.is_request_sid(value=value) is True\n        self.mock_warn.assert_not_called()\n        self.mock_is_member.assert_called_once_with(value)\n        self.mock_possible_request_sids.__contains__.assert_called_once_with(value)\n\n    @pytest.mark.parametrize(\"value\", [1, 0x55, 0xFF])\n    def test_is_request_sid__unsupported(self, value):\n        self.mock_is_member.return_value = False\n        self.mock_possible_request_sids.__contains__.return_value = True\n        assert RequestSID.is_request_sid(value=value) is True\n        self.mock_warn.assert_called_once()\n        self.mock_is_member.assert_called_once_with(value)\n        self.mock_possible_request_sids.__contains__.assert_called_once_with(value)\n\n    @pytest.mark.parametrize(\"value\", [1, 0x55, 0xFF])\n    def test_is_request_sid__invalid(self, value):\n        self.mock_is_member.return_value = False\n        self.mock_possible_request_sids.__contains__.return_value = False\n        assert RequestSID.is_request_sid(value=value) is False\n        self.mock_warn.assert_not_called()\n        self.mock_is_member.assert_not_called()\n        self.mock_possible_request_sids.__contains__.assert_called_once_with(value)\n\n\nclass TestResponseSID:\n    \"\"\"Unit tests for 'ResponseSID' enum.\"\"\"\n\n    def setup_method(self):\n        self._patcher_warn = patch(f\"{SCRIPT_LOCATION}.warn\")\n        self.mock_warn = self._patcher_warn.start()\n        self._patcher_is_member = patch(f\"{SCRIPT_LOCATION}.ResponseSID.is_member\")\n        self.mock_is_member = self._patcher_is_member.start()\n        self._patcher_possible_response_sids = patch(f\"{SCRIPT_LOCATION}.POSSIBLE_RESPONSE_SIDS\")\n        self.mock_possible_response_sids = self._patcher_possible_response_sids.start()\n\n    def teardown_method(self):\n        self._patcher_warn.stop()\n        self._patcher_is_member.stop()\n        self._patcher_possible_response_sids.stop()\n\n    def test_inheritance__byte_enum(self):\n        assert issubclass(ResponseSID, ByteEnum)\n\n    def test_inheritance__validated_enum(self):\n        assert issubclass(ResponseSID, ValidatedEnum)\n\n    def test_inheritance__extendable_enum(self):\n        assert issubclass(ResponseSID, ExtendableEnum)\n\n    @pytest.mark.parametrize(\"value\", [1, 0x55, 0xFF])\n    def test_is_response_sid__member(self, value):\n        self.mock_is_member.return_value = True\n        self.mock_possible_response_sids.__contains__.return_value = True\n        assert ResponseSID.is_response_sid(value=value) is True\n        self.mock_warn.assert_not_called()\n        self.mock_is_member.assert_called_once_with(value)\n        self.mock_possible_response_sids.__contains__.assert_called_once_with(value)\n\n    @pytest.mark.parametrize(\"value\", [1, 0x55, 0xFF])\n    def test_is_response_sid__unsupported(self, value):\n        self.mock_is_member.return_value = False\n        self.mock_possible_response_sids.__contains__.return_value = True\n        assert ResponseSID.is_response_sid(value=value) is True\n        self.mock_warn.assert_called_once()\n        self.mock_is_member.assert_called_once_with(value)\n        self.mock_possible_response_sids.__contains__.assert_called_once_with(value)\n\n    @pytest.mark.parametrize(\"value\", [1, 0x55, 0xFF])\n    def test_is_response_sid__invalid(self, value):\n        self.mock_is_member.return_value = False\n        self.mock_possible_response_sids.__contains__.return_value = False\n        assert ResponseSID.is_response_sid(value=value) is False\n        self.mock_warn.assert_not_called()\n        self.mock_is_member.assert_not_called()\n        self.mock_possible_response_sids.__contains__.assert_called_once_with(value)\n\n\n@pytest.mark.integration\nclass TestSIDIntegration:\n\n    SYSTEM_SPECIFIC_REQUEST_SID_VALUES = range(0xBA, 0xBF)\n    SYSTEM_SPECIFIC_RESPONSE_SID_VALUES = range(0xFA, 0xFF)\n\n    def test_number_of_members(self):\n        assert len(ResponseSID) == len(RequestSID) + 1, \\\n            \"ResponseSID shall contain RSID for each SID and one additional element for 'NegativeResponse'.\"\n\n    @pytest.mark.parametrize(\"request_sid_member\", list(RequestSID))\n    def test_rsid_members(self, request_sid_member):\n        assert ResponseSID[request_sid_member.name] == request_sid_member + 0x40, \\\n            \"Verify each ResponseSID member has correct value (SID + 0x40).\"\n\n    @pytest.mark.parametrize(\"undefined_value\", SYSTEM_SPECIFIC_REQUEST_SID_VALUES)\n    def test_undefined_request_sid(self, undefined_value):\n        assert RequestSID.is_request_sid(undefined_value) is True\n        assert RequestSID.is_member(undefined_value) is False\n\n    @pytest.mark.parametrize(\"undefined_value\", SYSTEM_SPECIFIC_RESPONSE_SID_VALUES)\n    def test_undefined_response_sid(self, undefined_value):\n        assert ResponseSID.is_response_sid(undefined_value) is True\n        assert ResponseSID.is_member(undefined_value) is False"
