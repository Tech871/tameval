[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/uniffle"
sha = "e6f0941ad9768beb83ec330c964d20a3ce2e55e3"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl client -Dtest=ClientUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl client -DtargetClasses=**.ClientUtils  -DtargetTests=**.ClientUtilsTest  -DoutputFormats=XML"
coverage_report_path = "client/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "client/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 56.0
original_coverage = 67.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 58, 59, 61, 62, 64, 66, 67, 68, 70, 71, 75, 77, 79, 80, 83, 84, 85, 89, 90, 92, 108, 109, 110, 111, 113,]
missed_lines = [ 33, 41, 42, 43, 45, 47, 48, 52, 73, 74, 97, 98, 99, 100, 104, 118, 121, 122, 125, 129,]

[input_info]
test_file_path = "client/src/test/java/org/apache/uniffle/client/ClientUtilsTest.java"
focal_file_path = "client/src/main/java/org/apache/uniffle/client/util/ClientUtils.java"
test_file_url = "https://github.com/apache/uniffle/blob/e6f0941ad9768beb83ec330c964d20a3ce2e55e3/client/src/test/java/org/apache/uniffle/client/ClientUtilsTest.java"
focal_file_url = "https://github.com/apache/uniffle/blob/e6f0941ad9768beb83ec330c964d20a3ce2e55e3/client/src/main/java/org/apache/uniffle/client/util/ClientUtils.java"
first_commit_date = "2022-07-04"
last_commit_date = "2024-07-05"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.uniffle.client;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\nimport org.awaitility.Awaitility;\nimport org.junit.jupiter.api.Test;\nimport org.roaringbitmap.longlong.LongIterator;\nimport org.roaringbitmap.longlong.Roaring64NavigableMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.apache.uniffle.client.util.ClientUtils;\nimport org.apache.uniffle.client.util.DefaultIdHelper;\nimport org.apache.uniffle.common.util.BlockIdLayout;\nimport org.apache.uniffle.common.util.RssUtils;\n\nimport static org.apache.uniffle.client.util.ClientUtils.waitUntilDoneOrFail;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.fail;\n\npublic class ClientUtilsTest {\n  private static final Logger LOGGER = LoggerFactory.getLogger(ClientUtilsTest.class);\n\n  private ExecutorService executorService = Executors.newFixedThreadPool(10);\n\n  @Test\n  public void testGenerateTaskIdBitMap() {\n    int partitionId = 1;\n    BlockIdLayout layout = BlockIdLayout.DEFAULT;\n    Roaring64NavigableMap blockIdMap = Roaring64NavigableMap.bitmapOf();\n    int taskSize = 10;\n    long[] except = new long[taskSize];\n    for (int i = 0; i < taskSize; i++) {\n      except[i] = i;\n      for (int j = 0; j < 100; j++) {\n        long blockId = layout.getBlockId(j, partitionId, i);\n        blockIdMap.addLong(blockId);\n      }\n    }\n    Roaring64NavigableMap taskIdBitMap =\n        RssUtils.generateTaskIdBitMap(blockIdMap, new DefaultIdHelper(layout));\n    assertEquals(taskSize, taskIdBitMap.getLongCardinality());\n    LongIterator longIterator = taskIdBitMap.getLongIterator();\n    for (int i = 0; i < taskSize; i++) {\n      assertEquals(except[i], longIterator.next());\n    }\n  }\n\n  private List<CompletableFuture<Boolean>> getFutures(boolean fail) {\n    List<CompletableFuture<Boolean>> futures = new ArrayList<>();\n    for (int i = 0; i < 3; i++) {\n      final int index = i;\n      CompletableFuture<Boolean> future =\n          CompletableFuture.supplyAsync(\n              () -> {\n                if (index == 2) {\n                  try {\n                    Thread.sleep(3000);\n                  } catch (InterruptedException interruptedException) {\n                    LOGGER.info(\"Capture the InterruptedException\");\n                    return false;\n                  }\n                  LOGGER.info(\"Finished index: \" + index);\n                  return true;\n                }\n                if (fail && index == 1) {\n                  return false;\n                }\n                return true;\n              },\n              executorService);\n      futures.add(future);\n    }\n    return futures;\n  }\n\n  @Test\n  public void testWaitUntilDoneOrFail() {\n    // case1: enable fail fast\n    List<CompletableFuture<Boolean>> futures1 = getFutures(true);\n    Awaitility.await()\n        .timeout(2, TimeUnit.SECONDS)\n        .until(() -> !waitUntilDoneOrFail(futures1, true));\n\n    // case2: disable fail fast\n    List<CompletableFuture<Boolean>> futures2 = getFutures(true);\n    try {\n      Awaitility.await()\n          .timeout(2, TimeUnit.SECONDS)\n          .until(() -> !waitUntilDoneOrFail(futures2, false));\n      fail();\n    } catch (Exception e) {\n      // ignore\n    }\n\n    // case3: all succeed\n    List<CompletableFuture<Boolean>> futures3 = getFutures(false);\n    Awaitility.await()\n        .timeout(4, TimeUnit.SECONDS)\n        .until(() -> waitUntilDoneOrFail(futures3, true));\n  }\n\n  @Test\n  public void testValidateClientType() {\n    String clientType = \"GRPC_NETTY\";\n    ClientUtils.validateClientType(clientType);\n    clientType = \"test\";\n    try {\n      ClientUtils.validateClientType(clientType);\n      fail();\n    } catch (Exception e) {\n      // Ignore\n    }\n  }\n}"
