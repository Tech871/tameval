[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "d-kuro/gwq"
sha = "7fad1c9ddcea371f8f51c70758439d4c94e5de70"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/git/git.go internal/git/git_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/git/git.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 57.0
original_coverage = 57.0
mutation_kill_rate = 0
original_mutation_kill_rate = 41.0
covered_lines = [ 22, 23, 24, 25, 26, 29, 30, 34, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 91, 92, 93, 99, 103, 104, 105, 106, 107, 108, 109, 110, 116, 135, 136, 140, 141, 146, 167, 171, 175, 176, 181, 186, 187, 188, 189, 194, 199, 200, 201, 202, 203, 204, 205, 206, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 230, 231, 235, 244, 245, 246, 247, 249, 250, 255, 256, 257, 258, 263, 268, 269, 270, 271, 272, 273, 274, 275, 278, 282, 283, 284, 285, 287, 291, 295, 296, 297, 300, 301, 305, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354,]
missed_lines = [ 31, 32, 33, 40, 41, 42, 61, 62, 67, 68, 69, 112, 113, 114, 120, 121, 122, 123, 124, 125, 127, 128, 129, 131, 137, 138, 139, 142, 143, 144, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 168, 169, 170, 177, 178, 179, 182, 183, 184, 190, 191, 195, 196, 207, 208, 209, 232, 233, 234, 239, 240, 241, 251, 252, 253, 259, 260, 264, 265, 288, 289, 290, 302, 303, 304, 309, 310, 311, 312, 313, 314, 321, 322, 323, 327, 328, 329, 335, 336, 337, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 376,]

[input_info]
test_file_path = "internal/git/git_test.go"
focal_file_path = "internal/git/git.go"
test_file_url = "https://github.com/d-kuro/gwq/blob/7fad1c9ddcea371f8f51c70758439d4c94e5de70/internal/git/git_test.go"
focal_file_url = "https://github.com/d-kuro/gwq/blob/7fad1c9ddcea371f8f51c70758439d4c94e5de70/internal/git/git.go"
first_commit_date = "2025-05-26"
last_commit_date = "2025-06-14"
test_file_content = "package git\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/d-kuro/gwq/pkg/models\"\n)\ntype TestRepository struct {\n\tPath string\n}\nfunc NewTestRepository(t *testing.T) *TestRepository {\n\tt.Helper()\n\n\ttmpDir := t.TempDir()\n\trepo := &TestRepository{Path: tmpDir}\n\tt.Setenv(\"GIT_AUTHOR_NAME\", \"Test User\")\n\tt.Setenv(\"GIT_AUTHOR_EMAIL\", \"test@example.com\")\n\tt.Setenv(\"GIT_COMMITTER_NAME\", \"Test User\")\n\tt.Setenv(\"GIT_COMMITTER_EMAIL\", \"test@example.com\")\n\tif err := repo.run(\"init\", \"-b\", \"main\"); err != nil {\n\t\tt.Fatalf(\"Failed to init repository: %v\", err)\n\t}\n\tif err := repo.run(\"config\", \"user.name\", \"Test User\"); err != nil {\n\t\tt.Fatalf(\"Failed to set user.name: %v\", err)\n\t}\n\tif err := repo.run(\"config\", \"user.email\", \"test@example.com\"); err != nil {\n\t\tt.Fatalf(\"Failed to set user.email: %v\", err)\n\t}\n\ttestFile := filepath.Join(tmpDir, \"README.md\")\n\tif err := os.WriteFile(testFile, []byte(\"# Test Repository\\n\"), 0644); err != nil {\n\t\tt.Fatalf(\"Failed to create test file: %v\", err)\n\t}\n\tif err := repo.run(\"add\", \".\"); err != nil {\n\t\tt.Fatalf(\"Failed to add files: %v\", err)\n\t}\n\tif err := repo.run(\"commit\", \"-m\", \"Initial commit\"); err != nil {\n\t\tt.Fatalf(\"Failed to create initial commit: %v\", err)\n\t}\n\n\treturn repo\n}\nfunc (r *TestRepository) run(args ...string) error {\n\tcmd := exec.Command(\"git\", args...)\n\tcmd.Dir = r.Path\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn fmt.Errorf(\"git %s failed: %v\\nOutput: %s\", strings.Join(args, \" \"), err, output)\n\t}\n\treturn nil\n}\nfunc (r *TestRepository) CreateBranch(t *testing.T, name string) {\n\tt.Helper()\n\tif err := r.run(\"checkout\", \"-b\", name); err != nil {\n\t\tt.Fatalf(\"Failed to create branch %s: %v\", name, err)\n\t}\n}\nfunc (r *TestRepository) CreateWorktree(t *testing.T, path, branch string) {\n\tt.Helper()\n\tcurrentBranch, _ := r.getCurrentBranch()\n\tif currentBranch == branch {\n\t\tif err := r.run(\"checkout\", \"main\"); err != nil {\n\t\t\tif err := r.run(\"checkout\", \"-b\", \"temp-branch-\"+branch); err != nil {\n\t\t\t\tt.Fatalf(\"Failed to switch away from branch: %v\", err)\n\t\t\t}\n\t\t}\n\t}\n\n\tif err := r.run(\"worktree\", \"add\", path, branch); err != nil {\n\t\tt.Fatalf(\"Failed to create worktree: %v\", err)\n\t}\n}\n\nfunc (r *TestRepository) getCurrentBranch() (string, error) {\n\tcmd := exec.Command(\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n\tcmd.Dir = r.Path\n\toutput, err := cmd.Output()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn strings.TrimSpace(string(output)), nil\n}\n\nfunc TestNew(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\n\tif g.workDir != repo.Path {\n\t\tt.Errorf(\"New() workDir = %s, want %s\", g.workDir, repo.Path)\n\t}\n}\n\nfunc TestNewFromCwd(t *testing.T) {\n\trepo := NewTestRepository(t)\n\torigDir, err := os.Getwd()\n\tif err != nil {\n\t\tt.Fatalf(\"Failed to get current directory: %v\", err)\n\t}\n\tt.Cleanup(func() { _ = os.Chdir(origDir) })\n\n\tif err := os.Chdir(repo.Path); err != nil {\n\t\tt.Fatalf(\"Failed to change directory: %v\", err)\n\t}\n\n\tg, err := NewFromCwd()\n\tif err != nil {\n\t\tt.Fatalf(\"NewFromCwd() error = %v\", err)\n\t}\n\tresolvedWorkDir, _ := filepath.EvalSymlinks(g.workDir)\n\tresolvedRepoPath, _ := filepath.EvalSymlinks(repo.Path)\n\n\tif resolvedWorkDir != resolvedRepoPath {\n\t\tt.Errorf(\"NewFromCwd() workDir = %s, want %s\", resolvedWorkDir, resolvedRepoPath)\n\t}\n}\n\nfunc TestListWorktrees(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\trepo.CreateBranch(t, \"feature/test1\")\n\tworktree1Path := filepath.Join(t.TempDir(), \"worktree1\")\n\trepo.CreateWorktree(t, worktree1Path, \"feature/test1\")\n\tif err := repo.run(\"checkout\", \"main\"); err != nil {\n\t\tt.Fatalf(\"Failed to checkout main: %v\", err)\n\t}\n\n\trepo.CreateBranch(t, \"feature/test2\")\n\tworktree2Path := filepath.Join(t.TempDir(), \"worktree2\")\n\trepo.CreateWorktree(t, worktree2Path, \"feature/test2\")\n\tworktrees, err := g.ListWorktrees()\n\tif err != nil {\n\t\tt.Fatalf(\"ListWorktrees() error = %v\", err)\n\t}\n\tif len(worktrees) != 3 {\n\t\tt.Errorf(\"ListWorktrees() returned %d worktrees, want 3\", len(worktrees))\n\t}\n\tfoundMain := false\n\tfor _, wt := range worktrees {\n\t\tif wt.IsMain {\n\t\t\tfoundMain = true\n\t\t\tresolvedWtPath, _ := filepath.EvalSymlinks(wt.Path)\n\t\t\tresolvedRepoPath, _ := filepath.EvalSymlinks(repo.Path)\n\t\t\tif resolvedWtPath != resolvedRepoPath {\n\t\t\t\tt.Errorf(\"Main worktree path = %s, want %s\", resolvedWtPath, resolvedRepoPath)\n\t\t\t}\n\t\t}\n\t}\n\tif !foundMain {\n\t\tt.Error(\"Main worktree not found\")\n\t}\n\tif !containsWorktreeWithPath(worktrees, worktree1Path) {\n\t\tt.Errorf(\"Worktree 1 not found at path %s\", worktree1Path)\n\t}\n\tif !containsWorktreeWithPath(worktrees, worktree2Path) {\n\t\tt.Errorf(\"Worktree 2 not found at path %s\", worktree2Path)\n\t}\n}\n\nfunc TestAddWorktree(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\n\tt.Run(\"ExistingBranch\", func(t *testing.T) {\n\t\trepo.CreateBranch(t, \"existing-branch\")\n\t\tif err := repo.run(\"checkout\", \"main\"); err != nil {\n\t\t\tt.Fatalf(\"Failed to checkout main: %v\", err)\n\t\t}\n\t\tworktreePath := filepath.Join(t.TempDir(), \"existing-wt\")\n\t\terr := g.AddWorktree(worktreePath, \"existing-branch\", false)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"AddWorktree() error = %v\", err)\n\t\t}\n\t\tif _, err := os.Stat(worktreePath); os.IsNotExist(err) {\n\t\t\tt.Error(\"Worktree directory was not created\")\n\t\t}\n\t})\n\n\tt.Run(\"NewBranch\", func(t *testing.T) {\n\t\tworktreePath := filepath.Join(t.TempDir(), \"new-wt\")\n\t\terr := g.AddWorktree(worktreePath, \"new-branch\", true)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"AddWorktree() with new branch error = %v\", err)\n\t\t}\n\t\tif _, err := os.Stat(worktreePath); os.IsNotExist(err) {\n\t\t\tt.Error(\"Worktree directory was not created\")\n\t\t}\n\t\tworktrees, err := g.ListWorktrees()\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"ListWorktrees() error = %v\", err)\n\t\t}\n\n\t\tfound := false\n\t\tfor _, wt := range worktrees {\n\t\t\tresolvedWtPath, _ := filepath.EvalSymlinks(wt.Path)\n\t\t\tresolvedWorktreePath, _ := filepath.EvalSymlinks(worktreePath)\n\n\t\t\tif resolvedWtPath == resolvedWorktreePath {\n\t\t\t\tfound = true\n\t\t\t\tif wt.Branch != \"new-branch\" {\n\t\t\t\t\tt.Errorf(\"Worktree branch = %s, want new-branch\", wt.Branch)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif !found {\n\t\t\tt.Error(\"New branch worktree not found\")\n\t\t}\n\t})\n}\n\nfunc TestRemoveWorktree(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\trepo.CreateBranch(t, \"to-remove\")\n\tworktreePath := filepath.Join(t.TempDir(), \"remove-wt\")\n\trepo.CreateWorktree(t, worktreePath, \"to-remove\")\n\terr := g.RemoveWorktree(worktreePath, false)\n\tif err != nil {\n\t\tt.Fatalf(\"RemoveWorktree() error = %v\", err)\n\t}\n\tworktrees, _ := g.ListWorktrees()\n\tfor _, wt := range worktrees {\n\t\tif wt.Path == worktreePath {\n\t\t\tt.Error(\"Worktree still exists in list after removal\")\n\t\t}\n\t}\n}\n\nfunc TestPruneWorktrees(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\trepo.CreateBranch(t, \"to-prune\")\n\tworktreePath := filepath.Join(t.TempDir(), \"prune-wt\")\n\trepo.CreateWorktree(t, worktreePath, \"to-prune\")\n\tif err := os.RemoveAll(worktreePath); err != nil {\n\t\tt.Fatalf(\"Failed to remove worktree directory: %v\", err)\n\t}\n\terr := g.PruneWorktrees()\n\tif err != nil {\n\t\tt.Fatalf(\"PruneWorktrees() error = %v\", err)\n\t}\n\tworktrees, _ := g.ListWorktrees()\n\tfor _, wt := range worktrees {\n\t\tif wt.Path == worktreePath {\n\t\t\tt.Error(\"Deleted worktree still exists after prune\")\n\t\t}\n\t}\n}\n\nfunc TestListBranches(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\tbranches := []string{\"feature/test\", \"bugfix/issue-123\", \"release/v1.0\"}\n\tfor _, branch := range branches {\n\t\trepo.CreateBranch(t, branch)\n\t\ttestFile := filepath.Join(repo.Path, fmt.Sprintf(\"%s.txt\", strings.ReplaceAll(branch, \"/\", \"-\")))\n\t\tif err := os.WriteFile(testFile, []byte(branch), 0644); err != nil {\n\t\t\tt.Fatalf(\"Failed to create test file: %v\", err)\n\t\t}\n\t\tif err := repo.run(\"add\", \".\"); err != nil {\n\t\t\tt.Fatalf(\"Failed to add files: %v\", err)\n\t\t}\n\t\tif err := repo.run(\"commit\", \"-m\", fmt.Sprintf(\"Commit for %s\", branch)); err != nil {\n\t\t\tt.Fatalf(\"Failed to commit: %v\", err)\n\t\t}\n\t}\n\tt.Run(\"LocalOnly\", func(t *testing.T) {\n\t\tbranchList, err := g.ListBranches(false)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"ListBranches(false) error = %v\", err)\n\t\t}\n\t\tif len(branchList) < 4 {\n\t\t\tt.Errorf(\"ListBranches(false) returned %d branches, want at least 4\", len(branchList))\n\t\t}\n\t\tfoundCurrent := false\n\t\tfor _, b := range branchList {\n\t\t\tif b.IsCurrent {\n\t\t\t\tfoundCurrent = true\n\t\t\t}\n\t\t\tif b.IsRemote {\n\t\t\t\tt.Error(\"Found remote branch when includeRemote=false\")\n\t\t\t}\n\t\t\tif b.LastCommit.Hash == \"\" {\n\t\t\t\tt.Errorf(\"Branch %s has empty commit hash\", b.Name)\n\t\t\t}\n\t\t\tif b.LastCommit.Message == \"\" {\n\t\t\t\tt.Errorf(\"Branch %s has empty commit message\", b.Name)\n\t\t\t}\n\t\t\tif b.LastCommit.Author == \"\" {\n\t\t\t\tt.Errorf(\"Branch %s has empty commit author\", b.Name)\n\t\t\t}\n\t\t\tif b.LastCommit.Date.IsZero() {\n\t\t\t\tt.Errorf(\"Branch %s has zero commit date\", b.Name)\n\t\t\t}\n\t\t}\n\n\t\tif !foundCurrent {\n\t\t\tt.Error(\"No current branch found\")\n\t\t}\n\t})\n}\n\nfunc TestGetRepositoryName(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\n\tname, err := g.GetRepositoryName()\n\tif err != nil {\n\t\tt.Fatalf(\"GetRepositoryName() error = %v\", err)\n\t}\n\texpectedName := filepath.Base(repo.Path)\n\tif name != expectedName {\n\t\tt.Errorf(\"GetRepositoryName() = %s, want %s\", name, expectedName)\n\t}\n}\n\nfunc TestGetRecentCommits(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\texpectedMessages := []string{\n\t\t\"Third commit\",\n\t\t\"Second commit\",\n\t\t\"First additional commit\",\n\t}\n\n\tfor i := len(expectedMessages) - 1; i >= 0; i-- {\n\t\ttestFile := filepath.Join(repo.Path, fmt.Sprintf(\"file%d.txt\", i))\n\t\tif err := os.WriteFile(testFile, []byte(fmt.Sprintf(\"Content %d\", i)), 0644); err != nil {\n\t\t\tt.Fatalf(\"Failed to create test file: %v\", err)\n\t\t}\n\t\tif err := repo.run(\"add\", \".\"); err != nil {\n\t\t\tt.Fatalf(\"Failed to add files: %v\", err)\n\t\t}\n\t\tif err := repo.run(\"commit\", \"-m\", expectedMessages[i]); err != nil {\n\t\t\tt.Fatalf(\"Failed to commit: %v\", err)\n\t\t}\n\t\ttime.Sleep(10 * time.Millisecond)\n\t}\n\tcommits, err := g.GetRecentCommits(repo.Path, 3)\n\tif err != nil {\n\t\tt.Fatalf(\"GetRecentCommits() error = %v\", err)\n\t}\n\n\tif len(commits) != 3 {\n\t\tt.Errorf(\"GetRecentCommits() returned %d commits, want 3\", len(commits))\n\t}\n\tfor i, commit := range commits {\n\t\tif commit.Message != expectedMessages[i] {\n\t\t\tt.Errorf(\"Commit[%d].Message = %s, want %s\", i, commit.Message, expectedMessages[i])\n\t\t}\n\t\tif commit.Hash == \"\" {\n\t\t\tt.Errorf(\"Commit[%d] has empty hash\", i)\n\t\t}\n\t\tif commit.Author != \"Test User\" {\n\t\t\tt.Errorf(\"Commit[%d].Author = %s, want Test User\", i, commit.Author)\n\t\t}\n\t\tif commit.Date.IsZero() {\n\t\t\tt.Errorf(\"Commit[%d] has zero date\", i)\n\t\t}\n\t}\n}\n\nfunc TestGetCurrentBranch(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\tbranch := g.getCurrentBranch(repo.Path)\n\tif branch != \"main\" && branch != \"master\" {\n\t\tt.Errorf(\"getCurrentBranch() = %s, want main or master\", branch)\n\t}\n\trepo.CreateBranch(t, \"test-branch\")\n\n\tbranch = g.getCurrentBranch(repo.Path)\n\tif branch != \"test-branch\" {\n\t\tt.Errorf(\"getCurrentBranch() after checkout = %s, want test-branch\", branch)\n\t}\n}\n\nfunc TestGetRootDir(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tsubDir := filepath.Join(repo.Path, \"subdir\")\n\tif err := os.MkdirAll(subDir, 0755); err != nil {\n\t\tt.Fatalf(\"Failed to create subdirectory: %v\", err)\n\t}\n\tg := New(subDir)\n\trootDir, err := g.getRootDir()\n\tif err != nil {\n\t\tt.Fatalf(\"getRootDir() error = %v\", err)\n\t}\n\tresolvedRootDir, _ := filepath.EvalSymlinks(rootDir)\n\tresolvedRepoPath, _ := filepath.EvalSymlinks(repo.Path)\n\n\tif resolvedRootDir != resolvedRepoPath {\n\t\tt.Errorf(\"getRootDir() = %s, want %s\", resolvedRootDir, resolvedRepoPath)\n\t}\n}\n\nfunc TestRunCommand(t *testing.T) {\n\trepo := NewTestRepository(t)\n\tg := New(repo.Path)\n\toutput, err := g.run(\"status\", \"--short\")\n\tif err != nil {\n\t\tt.Fatalf(\"run('status --short') error = %v\", err)\n\t}\n\tif strings.TrimSpace(output) != \"\" {\n\t\tt.Errorf(\"run('status --short') output = %s, want empty\", output)\n\t}\n\t_, err = g.run(\"invalid-command\")\n\tif err == nil {\n\t\tt.Error(\"run('invalid-command') should return error\")\n\t}\n}\nfunc containsWorktreeWithPath(worktrees []models.Worktree, path string) bool {\n\tresolvedPath, _ := filepath.EvalSymlinks(path)\n\tfor _, wt := range worktrees {\n\t\tresolvedWtPath, _ := filepath.EvalSymlinks(wt.Path)\n\t\tif resolvedWtPath == resolvedPath {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}"
