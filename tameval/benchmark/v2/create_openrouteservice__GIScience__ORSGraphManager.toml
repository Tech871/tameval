[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "GIScience/openrouteservice"
sha = "957c6ace324fee2a0eeaea1791f36fc153e4c875"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl ors-engine -Dtest=ORSGraphManagerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl ors-engine -DtargetClasses=**.ORSGraphManager  -DtargetTests=**.ORSGraphManagerTest  -DoutputFormats=XML"
coverage_report_path = "ors-engine/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "ors-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 56.0
original_coverage = 56.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 0.0
covered_lines = [ 23, 37, 38, 39, 40, 42, 44, 45, 46, 50, 52, 54, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67, 71, 84, 105, 106, 108, 112, 114, 116, 117, 119, 120, 121, 122, 124, 136, 140, 144, 145, 146,]
missed_lines = [ 32, 33, 75, 76, 80, 88, 92, 96, 100, 104, 125, 126, 128, 129, 130, 131, 133, 134, 139, 141, 142, 149, 150, 154, 155, 159, 160, 163, 167, 168, 169, 170,]

[input_info]
test_file_path = "ors-engine/src/test/java/org/heigit/ors/routing/graphhopper/extensions/manage/ORSGraphManagerTest.java"
focal_file_path = "ors-engine/src/main/java/org/heigit/ors/routing/graphhopper/extensions/manage/ORSGraphManager.java"
test_file_url = "https://github.com/GIScience/openrouteservice/blob/957c6ace324fee2a0eeaea1791f36fc153e4c875/ors-engine/src/test/java/org/heigit/ors/routing/graphhopper/extensions/manage/ORSGraphManagerTest.java"
focal_file_url = "https://github.com/GIScience/openrouteservice/blob/957c6ace324fee2a0eeaea1791f36fc153e4c875/ors-engine/src/main/java/org/heigit/ors/routing/graphhopper/extensions/manage/ORSGraphManager.java"
first_commit_date = "2024-11-28"
last_commit_date = "2025-05-05"
test_file_content = "package org.heigit.ors.routing.graphhopper.extensions.manage;\n\nimport org.heigit.ors.routing.graphhopper.extensions.manage.local.FlatORSGraphFolderStrategy;\nimport org.heigit.ors.routing.graphhopper.extensions.manage.local.ORSGraphFileManager;\nimport org.heigit.ors.routing.graphhopper.extensions.manage.remote.NamedGraphsRepoStrategy;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.mockito.junit.jupiter.MockitoExtension;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\n\n@ExtendWith(MockitoExtension.class)\nclass ORSGraphManagerTest {\n\n    @ParameterizedTest\n    @CsvSource({\n            \"true,  true,  repoName, http://my.domain.com\",\n            \"false, true,  repoName,                     \",\n            \"false, true,          , http://my.domain.com\",\n            \"false, false, repoName, http://my.domain.com\",\n    })\n    void useGraphRepository(boolean expectUseRepo, boolean enable, String repoName, String baseUri) {\n        GraphManagementRuntimeProperties managementProps = GraphManagementRuntimeProperties.Builder.empty()\n                .withEnabled(enable)\n                .withRepoName(repoName)\n                .withRepoBaseUri(baseUri)\n                .withLocalGraphsRootAbsPath(\"target/test-output/graphs\")\n                .withLocalProfileName(\"useGraphRepository\")\n                .build();\n        ORSGraphManager orsGraphManager = ORSGraphManager.initializeGraphManagement(managementProps);\n        assertNotNull(orsGraphManager);\n        assertEquals(expectUseRepo, orsGraphManager.useGraphRepository());\n    }\n\n    @ParameterizedTest\n    @CsvSource({\n            \"HttpGraphRepoClient, http://my.domain.com\",\n            \"HttpGraphRepoClient, https://my.domain.com/\",\n            \"NullGraphRepoClient, file:relative/path\",\n            \"NullGraphRepoClient, file://relative/path\",\n            \"NullGraphRepoClient, file://relative/path.txt\",\n            \"FileSystemGraphRepoClient, file:///absolute/path\",\n            \"FileSystemGraphRepoClient, file:///absolute/path.txt\",\n            \"FileSystemGraphRepoClient, relative/path\",\n            \"FileSystemGraphRepoClient, relative/path.txt\",\n            \"FileSystemGraphRepoClient, /absolute/path\",\n            \"FileSystemGraphRepoClient, /absolute/path.txt\",\n            \"FileSystemGraphRepoClient, ~/absolute/path\",\n            \"FileSystemGraphRepoClient, ~/absolute/path.txt\",\n            \"MinioGraphRepoClient, minio:http://my.domain.com\",\n            \"MinioGraphRepoClient, minio:https://my.domain.com/\",\n    })\n    void getOrsGraphRepoClient(String className, String repoUri) {\n        GraphManagementRuntimeProperties managementProps = GraphManagementRuntimeProperties.Builder.empty()\n                .withLocalGraphsRootAbsPath(\"graphs\")\n                .withRepoBaseUri(repoUri)\n                .withGraphVersion(\"1\")\n                .withLocalProfileName(\"driving-car\")\n                .build();\n        FlatORSGraphFolderStrategy orsGraphFolderStrategy = new FlatORSGraphFolderStrategy(managementProps);\n        ORSGraphFileManager orsGraphFileManager = new ORSGraphFileManager(managementProps, orsGraphFolderStrategy);\n        NamedGraphsRepoStrategy orsGraphRepoStrategy = new NamedGraphsRepoStrategy(managementProps);\n        assertEquals(className, ORSGraphManager.getOrsGraphRepoClient(managementProps, orsGraphRepoStrategy, orsGraphFileManager).getClass().getSimpleName());\n    }\n}"
