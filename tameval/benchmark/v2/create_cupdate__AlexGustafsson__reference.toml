[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "AlexGustafsson/cupdate"
sha = "1d16570b6ddcce6fef954443916636cfcc74cae2"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/oci/reference.go internal/oci/reference_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/oci/reference.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 62.0
original_coverage = 62.0
mutation_kill_rate = 88.0
original_mutation_kill_rate = 88.0
covered_lines = [ 32, 33, 34, 39, 44, 45, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 138,]
missed_lines = [ 35, 36, 46, 47, 48, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 117, 118, 119, 142, 143, 144, 145, 148, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160,]

[input_info]
test_file_path = "internal/oci/reference_test.go"
focal_file_path = "internal/oci/reference.go"
test_file_url = "https://github.com/AlexGustafsson/cupdate/blob/1d16570b6ddcce6fef954443916636cfcc74cae2/internal/oci/reference_test.go"
focal_file_url = "https://github.com/AlexGustafsson/cupdate/blob/1d16570b6ddcce6fef954443916636cfcc74cae2/internal/oci/reference.go"
first_commit_date = "2024-12-23"
last_commit_date = "2025-02-25"
test_file_content = "package oci\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestReference(t *testing.T) {\n\ttestCases := []struct {\n\t\tReference string\n\n\t\tExpectedName   string\n\t\tExpectedString string\n\t\tExpectedDomain string\n\t\tExpectedPath   string\n\t\tExpectedTag    string\n\t\tExpectedDigest string\n\t}{\n\t\t{\n\t\t\tReference: \"mongo\",\n\n\t\t\tExpectedName:   \"mongo\",\n\t\t\tExpectedString: \"mongo\",\n\t\t\tExpectedDomain: \"docker.io\",\n\t\t\tExpectedPath:   \"library/mongo\",\n\t\t\tExpectedTag:    \"latest\",\n\t\t},\n\t\t{\n\t\t\tReference: \"mongo:4\",\n\n\t\t\tExpectedName:   \"mongo\",\n\t\t\tExpectedString: \"mongo:4\",\n\t\t\tExpectedDomain: \"docker.io\",\n\t\t\tExpectedPath:   \"library/mongo\",\n\t\t\tExpectedTag:    \"4\",\n\t\t},\n\t\t{\n\t\t\tReference: \"library/mongo:4\",\n\n\t\t\tExpectedName:   \"mongo\",\n\t\t\tExpectedString: \"mongo:4\",\n\t\t\tExpectedDomain: \"docker.io\",\n\t\t\tExpectedPath:   \"library/mongo\",\n\t\t\tExpectedTag:    \"4\",\n\t\t},\n\t\t{\n\t\t\tReference: \"docker.io/library/mongo:4\",\n\n\t\t\tExpectedName:   \"mongo\",\n\t\t\tExpectedString: \"mongo:4\",\n\t\t\tExpectedDomain: \"docker.io\",\n\t\t\tExpectedPath:   \"library/mongo\",\n\t\t\tExpectedTag:    \"4\",\n\t\t},\n\t\t{\n\t\t\tReference: \"ghcr.io/mongo/mongo\",\n\n\t\t\tExpectedName:   \"ghcr.io/mongo/mongo\",\n\t\t\tExpectedString: \"ghcr.io/mongo/mongo\",\n\t\t\tExpectedDomain: \"ghcr.io\",\n\t\t\tExpectedPath:   \"mongo/mongo\",\n\t\t\tExpectedTag:    \"latest\",\n\t\t},\n\t\t{\n\t\t\tReference: \"ghcr.io/mongo/mongo:4\",\n\n\t\t\tExpectedName:   \"ghcr.io/mongo/mongo\",\n\t\t\tExpectedString: \"ghcr.io/mongo/mongo:4\",\n\t\t\tExpectedDomain: \"ghcr.io\",\n\t\t\tExpectedPath:   \"mongo/mongo\",\n\t\t\tExpectedTag:    \"4\",\n\t\t},\n\t\t{\n\t\t\tReference: \"mongo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\n\t\t\tExpectedName:   \"mongo\",\n\t\t\tExpectedString: \"mongo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t\tExpectedDomain: \"docker.io\",\n\t\t\tExpectedPath:   \"library/mongo\",\n\t\t\tExpectedDigest: \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t},\n\t\t{\n\t\t\tReference: \"mongo:latest@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\n\t\t\tExpectedName:   \"mongo\",\n\t\t\tExpectedString: \"mongo:latest@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t\tExpectedDomain: \"docker.io\",\n\t\t\tExpectedPath:   \"library/mongo\",\n\t\t\tExpectedTag:    \"latest\",\n\t\t\tExpectedDigest: \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t},\n\t\t{\n\t\t\tReference: \"ghcr.io/mongo/mongo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\n\t\t\tExpectedName:   \"ghcr.io/mongo/mongo\",\n\t\t\tExpectedString: \"ghcr.io/mongo/mongo@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t\tExpectedDomain: \"ghcr.io\",\n\t\t\tExpectedPath:   \"mongo/mongo\",\n\t\t\tExpectedDigest: \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t},\n\t\t{\n\t\t\tReference: \"ghcr.io/mongo/mongo:6.0.0@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\n\t\t\tExpectedName:   \"ghcr.io/mongo/mongo\",\n\t\t\tExpectedString: \"ghcr.io/mongo/mongo:6.0.0@sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t\tExpectedDomain: \"ghcr.io\",\n\t\t\tExpectedPath:   \"mongo/mongo\",\n\t\t\tExpectedTag:    \"6.0.0\",\n\t\t\tExpectedDigest: \"sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\n\t\t},\n\t\t{\n\t\t\tReference: \"[1234:5678:9012:1::1]:8080/test/image:1.0.0\",\n\n\t\t\tExpectedName:   \"[1234:5678:9012:1::1]:8080/test/image\",\n\t\t\tExpectedString: \"[1234:5678:9012:1::1]:8080/test/image:1.0.0\",\n\t\t\tExpectedDomain: \"[1234:5678:9012:1::1]:8080\",\n\t\t\tExpectedPath:   \"test/image\",\n\t\t\tExpectedTag:    \"1.0.0\",\n\t\t},\n\t\t{\n\t\t\tReference: \"192.168.1.2:8080/test/image:1.0.0\",\n\n\t\t\tExpectedName:   \"192.168.1.2:8080/test/image\",\n\t\t\tExpectedString: \"192.168.1.2:8080/test/image:1.0.0\",\n\t\t\tExpectedDomain: \"192.168.1.2:8080\",\n\t\t\tExpectedPath:   \"test/image\",\n\t\t\tExpectedTag:    \"1.0.0\",\n\t\t},\n\t\t{\n\t\t\tReference: \"[1234:5678:9012:1::1]/test/image:1.0.0\",\n\n\t\t\tExpectedName:   \"[1234:5678:9012:1::1]/test/image\",\n\t\t\tExpectedString: \"[1234:5678:9012:1::1]/test/image:1.0.0\",\n\t\t\tExpectedDomain: \"[1234:5678:9012:1::1]\",\n\t\t\tExpectedPath:   \"test/image\",\n\t\t\tExpectedTag:    \"1.0.0\",\n\t\t},\n\t\t{\n\t\t\tReference: \"192.168.1.2/test/image:1.0.0\",\n\n\t\t\tExpectedName:   \"192.168.1.2/test/image\",\n\t\t\tExpectedString: \"192.168.1.2/test/image:1.0.0\",\n\t\t\tExpectedDomain: \"192.168.1.2\",\n\t\t\tExpectedPath:   \"test/image\",\n\t\t\tExpectedTag:    \"1.0.0\",\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t\tt.Run(testCase.Reference, func(t *testing.T) {\n\t\t\tr, err := ParseReference(testCase.Reference)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tassert.Equal(t, testCase.ExpectedName, r.Name())\n\t\t\tassert.Equal(t, testCase.ExpectedString, r.String())\n\t\t\tassert.Equal(t, testCase.ExpectedDomain, r.Domain)\n\t\t\tassert.Equal(t, testCase.ExpectedPath, r.Path)\n\n\t\t\tif testCase.ExpectedTag == \"\" {\n\t\t\t\tassert.False(t, r.HasTag)\n\t\t\t\tassert.Equal(t, \"\", r.Tag)\n\t\t\t} else {\n\t\t\t\tassert.True(t, r.HasTag)\n\t\t\t\tassert.Equal(t, testCase.ExpectedTag, r.Tag)\n\t\t\t}\n\n\t\t\tif testCase.ExpectedDigest == \"\" {\n\t\t\t\tassert.False(t, r.HasDigest)\n\t\t\t\tassert.Equal(t, \"\", r.Digest)\n\t\t\t} else {\n\t\t\t\tassert.True(t, r.HasDigest)\n\t\t\t\tassert.Equal(t, testCase.ExpectedDigest, r.Digest)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestReferenceCanonical(t *testing.T) {\n\tref := Reference{\n\t\tPath: \"mongo\",\n\t}\n\n\tcanonical := Reference{\n\t\tDomain: \"docker.io\",\n\t\tPath:   \"library/mongo\",\n\t\tHasTag: true,\n\t\tTag:    \"latest\",\n\t}\n\n\tassert.Equal(t, canonical, ref.Canonical())\n}\n"
