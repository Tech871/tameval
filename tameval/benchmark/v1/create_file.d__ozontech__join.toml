[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "ozontech/file.d"
sha = "0b8e06edc7baa07bda8b1d7637edf1ae5108ea4b"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out plugin/action/join/join.go plugin/action/join/join_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting plugin/action/join/join.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 75.0
original_coverage = 82.0
mutation_kill_rate = 58.0
original_mutation_kill_rate = 66.0
covered_lines = [ 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 155, 156, 159, 160, 164, 165, 168, 176, 177, 178, 179, 182, 183, 184, 187, 188, 189, 190, 192, 193, 194, 195, 198, 199, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213,]
missed_lines = [ 150, 151, 152, 153, 161, 162, 163, 169, 170, 171, 172, 173, 180, 181, 200, 201, 217, 218, 219, 220,]

[input_info]
test_file_path = "plugin/action/join/join_test.go"
focal_file_path = "plugin/action/join/join.go"
test_file_url = "https://github.com/ozontech/file.d/blob/0b8e06edc7baa07bda8b1d7637edf1ae5108ea4b/plugin/action/join/join_test.go"
focal_file_url = "https://github.com/ozontech/file.d/blob/0b8e06edc7baa07bda8b1d7637edf1ae5108ea4b/plugin/action/join/join.go"
first_commit_date = "2020-03-06"
last_commit_date = "2025-02-06"
test_file_content = "package join\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/atomic\"\n\n\t\"github.com/ozontech/file.d/cfg\"\n\t\"github.com/ozontech/file.d/pipeline\"\n\t\"github.com/ozontech/file.d/test\"\n)\n\nconst contentPostgres = `# ===next===\n2021-10-12 08:25:44 GMT [23379] => [520-1] client=[local],db=exampledb,user=none LOG:  duration: 0.287 ms  bind <unnamed>: select distinct connamespace as schema_id\n\tfrom pg_catalog.pg_constraint F,\n\t    pg_catalog.pg_class O\n\twhere F.contype = 'f'\n\t and F.confrelid = O.oid\n\t and O.relnamespace in ($1)\n\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [521-1] client=[local],db=exampledb,user=none DETAIL:  parameters: $1 = '2200'\n\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [522-1] client=[local],db=exampledb,user=none LOG:  duration: 0.043 ms  execute <unnamed>: select distinct connamespace as schema_id\n\tfrom pg_catalog.pg_constraint F,\n\t    pg_catalog.pg_class O\n\twhere F.contype = 'f'\n\t and F.confrelid = O.oid\n\t and O.relnamespace in ($1)\n\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [523-1] client=[local],db=exampledb,user=none DETAIL:  parameters: $1 = '2200'\n\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [524-1] client=[local],db=exampledb,user=none LOG:  duration: 0.056 ms  parse <unnamed>: SHOW TRANSACTION ISOLATION LEVEL\n\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [525-1] client=[local],db=exampledb,user=none LOG:  duration: 0.009 ms  bind <unnamed>: SHOW TRANSACTION ISOLATION LEVEL\n\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [526-1] client=[local],db=exampledb,user=none LOG:  duration: 0.018 ms  execute <unnamed>: SHOW TRANSACTION ISOLATION LEVEL\n`\n\nconst contentPostgresWithNilNodes = `# ===next===\n2021-10-12 08:25:44 GMT [23379] => [520-1] client=[local],db=exampledb,user=none LOG:  duration: 0.287 ms  bind <unnamed>: select distinct connamespace as schema_id\n\tfrom pg_catalog.pg_constraint F,\n\t    pg_catalog.pg_class O\n\twhere F.contype = 'f'\nNilNode:some message\nNilNode:some message 2\n\t and F.confrelid = O.oid\n\t and O.relnamespace in ($1)\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [521-1] client=[local],db=exampledb,user=none DETAIL:  parameters: $1 = '2200'\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [522-1] client=[local],db=exampledb,user=none LOG:  duration: 0.043 ms  execute <unnamed>: select distinct connamespace as schema_id\n\tfrom pg_catalog.pg_constraint F,\n\t    pg_catalog.pg_class O\nNilNode:some other message\n\twhere F.contype = 'f'\n\t and F.confrelid = O.oid\n\t and O.relnamespace in ($1)\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [523-1] client=[local],db=exampledb,user=none DETAIL:  parameters: $1 = '2200'\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [524-1] client=[local],db=exampledb,user=none LOG:  duration: 0.056 ms  parse <unnamed>: SHOW TRANSACTION ISOLATION LEVEL\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [525-1] client=[local],db=exampledb,user=none LOG:  duration: 0.009 ms  bind <unnamed>: SHOW TRANSACTION ISOLATION LEVEL\n# ===next===\n2021-10-12 08:25:44 GMT [23379] => [526-1] client=[local],db=exampledb,user=none LOG:  duration: 0.018 ms  execute <unnamed>: SHOW TRANSACTION ISOLATION LEVEL`\n\nconst contentCustomWithNilNodes = `# ===next===\nStart: event 1\nContinue: event 1 cont\nNilNode: event 2\nContinue: event 3\n# ===next===\nStart: event 4\n\nContinue: event 4 cont\n# ===next===\nStart: event 5\n\nContinue: event 5 cont\n\nNilNode: event 6\nContinue: event 7\nStart: event 8\n`\n\nfunc TestSimpleJoin(t *testing.T) {\n\tconst startPattern = `/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d.*?\\[\\d+\\] => .+?client=.+?,db=.+?,user=.+:.*/`\n\tcases := []struct {\n\t\tname        string\n\t\tstartPat    string\n\t\tcontinuePat string\n\t\tcontent     string\n\t\texpEvents   int32\n\t\titerations  int\n\t\tnegate      bool\n\t}{\n\t\t{\n\t\t\tname:        \"should_ok_for_postgres_logs\",\n\t\t\tstartPat:    startPattern,\n\t\t\tcontinuePat: `/.+/`,\n\t\t\tcontent:     contentPostgres,\n\t\t\titerations:  100,\n\t\t\texpEvents:   7 * 100,\n\t\t},\n\t\t{\n\t\t\tname:        \"should_ok_for_postgres_logs_with_negate\",\n\t\t\tstartPat:    startPattern,\n\t\t\tcontinuePat: startPattern,\n\t\t\tcontent:     contentPostgres,\n\t\t\titerations:  100,\n\t\t\texpEvents:   7 * 100,\n\t\t\tnegate:      true,\n\t\t},\n\t}\n\n\tfor _, tt := range cases {\n\t\ttt := tt\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tformat := `{\"log\":\"%s\\n\"}`\n\t\t\tcontent := strings.ReplaceAll(tt.content, \"# ===next===\\n\", \"\")\n\t\t\tlines := make([]string, 0)\n\t\t\tfor _, line := range strings.Split(content, \"\\n\") {\n\t\t\t\tif line == \"\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tlines = append(lines, fmt.Sprintf(format, line))\n\t\t\t}\n\n\t\t\tconfig := test.NewConfig(&Config{\n\t\t\t\tField:    \"log\",\n\t\t\t\tStart:    cfg.Regexp(tt.startPat),\n\t\t\t\tContinue: cfg.Regexp(tt.continuePat),\n\t\t\t\tNegate:   tt.negate,\n\t\t\t}, nil)\n\n\t\t\tp, input, output := test.NewPipelineMock(\n\t\t\t\ttest.NewActionPluginStaticInfo(\n\t\t\t\t\tfactory,\n\t\t\t\t\tconfig,\n\t\t\t\t\tpipeline.MatchModeAnd,\n\t\t\t\t\tnil,\n\t\t\t\t\tfalse,\n\t\t\t\t),\n\t\t\t\t\"short_event_timeout\",\n\t\t\t)\n\n\t\t\tinEvents := atomic.Int32{}\n\t\t\tinput.SetInFn(func() {\n\t\t\t\tinEvents.Inc()\n\t\t\t})\n\n\t\t\toutEvents := atomic.Int32{}\n\t\t\tlastID := atomic.Uint64{}\n\t\t\toutput.SetOutFn(func(e *pipeline.Event) {\n\t\t\t\toutEvents.Inc()\n\t\t\t\tid := lastID.Swap(e.SeqID)\n\t\t\t\tif id != 0 && id >= e.SeqID {\n\t\t\t\t\tpanic(\"wrong id\")\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tfor i := 0; i < tt.iterations; i++ {\n\t\t\t\tfor m, line := range lines {\n\t\t\t\t\tinput.In(0, \"test.log\", test.NewOffset(int64(i*10000+m)), []byte(line))\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar (\n\t\t\t\ti     = 0\n\t\t\t\titers = 100\n\t\t\t)\n\t\t\tfor ; i < iters; i++ {\n\t\t\t\tx := outEvents.Load()\n\t\t\t\tif x < tt.expEvents {\n\t\t\t\t\ttime.Sleep(time.Millisecond * 100)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tp.Stop()\n\n\t\t\trequire.True(t, iters > i, \"test timed out\")\n\t\t\tassert.Equal(t, tt.expEvents, outEvents.Load(), \"wrong out events count\")\n\t\t})\n\t}\n}\n"
