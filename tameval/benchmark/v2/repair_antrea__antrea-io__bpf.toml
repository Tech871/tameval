[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "antrea-io/antrea"
sha = "0cd2eed3cc54448553096bf4e6ee74836c9c1d11"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/agent/packetcapture/capture/bpf.go pkg/agent/packetcapture/capture/bpf_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/agent/packetcapture/capture/bpf.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 99.0
mutation_kill_rate = 0
original_mutation_kill_rate = 90.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/agent/packetcapture/capture/bpf_test.go"
focal_file_path = "pkg/agent/packetcapture/capture/bpf.go"
test_file_url = "https://github.com/antrea-io/antrea/blob/0cd2eed3cc54448553096bf4e6ee74836c9c1d11/pkg/agent/packetcapture/capture/bpf_test.go"
focal_file_url = "https://github.com/antrea-io/antrea/blob/0cd2eed3cc54448553096bf4e6ee74836c9c1d11/pkg/agent/packetcapture/capture/bpf.go"
first_commit_date = "2024-11-09"
last_commit_date = "2025-03-10"
test_file_content = "\n\npackage capture\n\nimport (\n\t\"net\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"golang.org/x/net/bpf\"\n\t\"k8s.io/apimachinery/pkg/util/intstr\"\n\n\tcrdv1alpha1 \"antrea.io/antrea/pkg/apis/crd/v1alpha1\"\n)\n\nvar (\n\ttestTCPProtocol       = intstr.FromString(\"TCP\")\n\ttestUDPProtocol       = intstr.FromString(\"UDP\")\n\ttestSrcPort     int32 = 12345\n\ttestDstPort     int32 = 80\n)\n\nfunc TestCalculateInstructionsSize(t *testing.T) {\n\ttt := []struct {\n\t\tname      string\n\t\tpacket    *crdv1alpha1.Packet\n\t\tcount     int\n\t\tdirection crdv1alpha1.CaptureDirection\n\t}{\n\t\t{\n\t\t\tname: \"proto and host and port\",\n\t\t\tpacket: &crdv1alpha1.Packet{\n\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcount:     17,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t},\n\t\t{\n\t\t\tname: \"proto and host and port and DestinationToSource\",\n\t\t\tpacket: &crdv1alpha1.Packet{\n\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcount:     17,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionDestinationToSource,\n\t\t},\n\t\t{\n\t\t\tname: \"proto and host to port and Both\",\n\t\t\tpacket: &crdv1alpha1.Packet{\n\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcount:     28,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionBoth,\n\t\t},\n\t\t{\n\t\t\tname: \"proto with host\",\n\t\t\tpacket: &crdv1alpha1.Packet{\n\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t},\n\t\t\tcount:     10,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t},\n\t\t{\n\t\t\tname: \"proto with src port\",\n\t\t\tpacket: &crdv1alpha1.Packet{\n\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcount:     15,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t},\n\t\t{\n\t\t\tname: \"proto with dst port\",\n\t\t\tpacket: &crdv1alpha1.Packet{\n\t\t\t\tProtocol: &testUDPProtocol,\n\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\tUDP: &crdv1alpha1.UDPHeader{\n\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tcount:     15,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t},\n\n\t\t{\n\t\t\tname:      \"any proto\",\n\t\t\tpacket:    &crdv1alpha1.Packet{},\n\t\t\tcount:     8,\n\t\t\tdirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t},\n\t}\n\n\tfor _, item := range tt {\n\t}\n}\n\nfunc TestPacketCaptureCompileBPF(t *testing.T) {\n\ttt := []struct {\n\t\tname  string\n\t\tsrcIP net.IP\n\t\tdstIP net.IP\n\t\tspec  *crdv1alpha1.PacketCaptureSpec\n\t\tinst  []bpf.Instruction\n\t}{\n\t\t{\n\t\t\tname:  \"with-proto-and-port\",\n\t\t\tsrcIP: net.ParseIP(\"127.0.0.1\"),\n\t\t\tdstIP: net.ParseIP(\"127.0.0.2\"),\n\t\t\tspec: &crdv1alpha1.PacketCaptureSpec{\n\t\t\t\tPacket: &crdv1alpha1.Packet{\n\t\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t\tDirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t\t},\n\t\t\tinst: []bpf.Instruction{\n\t\t\t\tbpf.LoadAbsolute{Off: 12, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x800, SkipFalse: 14},\n\t\t\t\tbpf.LoadAbsolute{Off: 23, Size: 1},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x6, SkipFalse: 12},\n\t\t\t\tbpf.LoadAbsolute{Off: 26, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 10},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 8},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 6},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 14, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x3039, SkipFalse: 3},\n\t\t\t\tbpf.LoadIndirect{Off: 16, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipFalse: 1},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.RetConstant{Val: 0},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"udp-proto-str\",\n\t\t\tsrcIP: net.ParseIP(\"127.0.0.1\"),\n\t\t\tdstIP: net.ParseIP(\"127.0.0.2\"),\n\t\t\tspec: &crdv1alpha1.PacketCaptureSpec{\n\t\t\t\tPacket: &crdv1alpha1.Packet{\n\t\t\t\t\tProtocol: &testUDPProtocol,\n\t\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\t\tUDP: &crdv1alpha1.UDPHeader{\n\t\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t\tDirection: crdv1alpha1.CaptureDirectionSourceToDestination,\n\t\t\t},\n\t\t\tinst: []bpf.Instruction{\n\t\t\t\tbpf.LoadAbsolute{Off: 12, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x800, SkipFalse: 14},\n\t\t\t\tbpf.LoadAbsolute{Off: 23, Size: 1},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x11, SkipFalse: 12},\n\t\t\t\tbpf.LoadAbsolute{Off: 26, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 10},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 8},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 6},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 14, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x3039, SkipFalse: 3},\n\t\t\t\tbpf.LoadIndirect{Off: 16, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipFalse: 1},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.RetConstant{Val: 0},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"with-proto-port-DestinationToSource\",\n\t\t\tsrcIP: net.ParseIP(\"127.0.0.1\"),\n\t\t\tdstIP: net.ParseIP(\"127.0.0.2\"),\n\t\t\tspec: &crdv1alpha1.PacketCaptureSpec{\n\t\t\t\tPacket: &crdv1alpha1.Packet{\n\t\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t\tDirection: crdv1alpha1.CaptureDirectionDestinationToSource,\n\t\t\t},\n\t\t\tinst: []bpf.Instruction{\n\t\t\t\tbpf.LoadAbsolute{Off: 12, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x800, SkipFalse: 14},\n\t\t\t\tbpf.LoadAbsolute{Off: 23, Size: 1},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x6, SkipFalse: 12},\n\t\t\t\tbpf.LoadAbsolute{Off: 26, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 10},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 8},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 6},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 14, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipFalse: 3},\n\t\t\t\tbpf.LoadIndirect{Off: 16, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x3039, SkipFalse: 1},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.RetConstant{Val: 0},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"with-proto-dstPort-and-Both\",\n\t\t\tsrcIP: net.ParseIP(\"127.0.0.1\"),\n\t\t\tdstIP: net.ParseIP(\"127.0.0.2\"),\n\t\t\tspec: &crdv1alpha1.PacketCaptureSpec{\n\t\t\t\tPacket: &crdv1alpha1.Packet{\n\t\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t\tDirection: crdv1alpha1.CaptureDirectionBoth,\n\t\t\t},\n\t\t\tinst: []bpf.Instruction{\n\t\t\t\tbpf.LoadAbsolute{Off: 12, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x800, SkipFalse: 21},\n\t\t\t\tbpf.LoadAbsolute{Off: 23, Size: 1},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x6, SkipFalse: 19},\n\t\t\t\tbpf.LoadAbsolute{Off: 26, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 8},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 15},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 13},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 16, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipTrue: 0, SkipFalse: 10},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 8},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 6},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 4},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 14, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipFalse: 1},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.RetConstant{Val: 0},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"with-proto-port-and-Both\",\n\t\t\tsrcIP: net.ParseIP(\"127.0.0.1\"),\n\t\t\tdstIP: net.ParseIP(\"127.0.0.2\"),\n\t\t\tspec: &crdv1alpha1.PacketCaptureSpec{\n\t\t\t\tPacket: &crdv1alpha1.Packet{\n\t\t\t\t\tProtocol: &testTCPProtocol,\n\t\t\t\t\tTransportHeader: crdv1alpha1.TransportHeader{\n\t\t\t\t\t\tTCP: &crdv1alpha1.TCPHeader{\n\t\t\t\t\t\t\tSrcPort: &testSrcPort,\n\t\t\t\t\t\t\tDstPort: &testDstPort,\n\t\t\t\t\t\t}},\n\t\t\t\t},\n\t\t\t\tDirection: crdv1alpha1.CaptureDirectionBoth,\n\t\t\t},\n\t\t\tinst: []bpf.Instruction{\n\t\t\t\tbpf.LoadAbsolute{Off: 12, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x800, SkipFalse: 25},\n\t\t\t\tbpf.LoadAbsolute{Off: 23, Size: 1},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x6, SkipFalse: 23},\n\t\t\t\tbpf.LoadAbsolute{Off: 26, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 10},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 19},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 17},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 14, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x3039, SkipFalse: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 16, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipTrue: 0, SkipFalse: 12},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000002, SkipTrue: 0, SkipFalse: 10},\n\t\t\t\tbpf.LoadAbsolute{Off: 30, Size: 4},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x7f000001, SkipTrue: 0, SkipFalse: 8},\n\t\t\t\tbpf.LoadAbsolute{Off: 20, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpBitsSet, Val: 0x1fff, SkipTrue: 6},\n\t\t\t\tbpf.LoadMemShift{Off: 14},\n\t\t\t\tbpf.LoadIndirect{Off: 14, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x50, SkipFalse: 3},\n\t\t\t\tbpf.LoadIndirect{Off: 16, Size: 2},\n\t\t\t\tbpf.JumpIf{Cond: bpf.JumpEqual, Val: 0x3039, SkipFalse: 1},\n\t\t\t\tbpf.RetConstant{Val: 262144},\n\t\t\t\tbpf.RetConstant{Val: 0},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, item := range tt {\n\t}\n}"
