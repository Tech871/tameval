[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dapr/java-sdk"
sha = "57f6b96d60aefd07b736d747995addf0e40b95d1"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl sdk-workflows -Dtest=DefaultWorkflowContextTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl sdk-workflows -DtargetClasses=**.DefaultWorkflowContext  -DtargetTests=**.DefaultWorkflowContextTest  -DoutputFormats=XML"
coverage_report_path = "sdk-workflows/target/jacoco-report/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "sdk-workflows/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 91.0
original_coverage = 91.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 0.0
covered_lines = [ 46, 47, 57, 58, 59, 61, 62, 65, 66, 67, 73, 74, 76, 83, 90, 97, 104, 105, 113, 134, 155, 162, 164, 171, 178, 185, 201, 203, 211, 212, 227, 231, 232, 235, 236, 237, 238, 241, 242, 244,]
missed_lines = [ 150, 192, 219, 220,]

[input_info]
test_file_path = "sdk-workflows/src/test/java/io/dapr/workflows/DefaultWorkflowContextTest.java"
focal_file_path = "sdk-workflows/src/main/java/io/dapr/workflows/runtime/DefaultWorkflowContext.java"
test_file_url = "https://github.com/dapr/java-sdk/blob/57f6b96d60aefd07b736d747995addf0e40b95d1/sdk-workflows/src/test/java/io/dapr/workflows/DefaultWorkflowContextTest.java"
focal_file_url = "https://github.com/dapr/java-sdk/blob/57f6b96d60aefd07b736d747995addf0e40b95d1/sdk-workflows/src/main/java/io/dapr/workflows/runtime/DefaultWorkflowContext.java"
first_commit_date = "2025-01-04"
last_commit_date = "2025-02-28"
test_file_content = "/*\n * Copyright 2023 The Dapr Authors\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage io.dapr.workflows;\n\nimport com.microsoft.durabletask.CompositeTaskFailedException;\nimport com.microsoft.durabletask.Task;\nimport com.microsoft.durabletask.TaskCanceledException;\nimport com.microsoft.durabletask.TaskOptions;\nimport com.microsoft.durabletask.TaskOrchestrationContext;\n\nimport io.dapr.workflows.runtime.DefaultWorkflowContext;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\nimport org.slf4j.Logger;\n\nimport javax.annotation.Nullable;\n\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.time.ZonedDateTime;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.times;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class DefaultWorkflowContextTest {\n  private DefaultWorkflowContext context;\n  private TaskOrchestrationContext mockInnerContext;\n  private WorkflowContext testWorkflowContext;\n\n  @BeforeEach\n  public void setUp() {\n    mockInnerContext = mock(TaskOrchestrationContext.class);\n    context = new DefaultWorkflowContext(mockInnerContext);\n    testWorkflowContext = new WorkflowContext() {\n      @Override\n      public Logger getLogger() {\n        return null;\n      }\n\n      @Override\n      public String getName() {\n        return null;\n      }\n\n      @Override\n      public String getInstanceId() {\n        return null;\n      }\n\n      @Override\n      public Instant getCurrentInstant() {\n        return null;\n      }\n\n      @Override\n      public void complete(Object output) {\n\n      }\n\n      @Override\n      public <V> Task<V> waitForExternalEvent(String name, Duration timeout, Class<V> dataType)\n          throws TaskCanceledException {\n        return null;\n      }\n\n      @Override\n      public Task<Void> waitForExternalEvent(String name, Duration timeout) throws TaskCanceledException {\n        return null;\n      }\n\n      @Override\n      public Task<Void> waitForExternalEvent(String name) throws TaskCanceledException {\n        return null;\n      }\n\n      @Override\n      public <V> Task<V> callActivity(String name, Object input, WorkflowTaskOptions options, Class<V> returnType) {\n        return null;\n      }\n\n      @Override\n      public boolean isReplaying() {\n        return false;\n      }\n\n      @Override\n      public <V> Task<List<V>> allOf(List<Task<V>> tasks) throws CompositeTaskFailedException {\n        return null;\n      }\n\n      @Override\n      public Task<Task<?>> anyOf(List<Task<?>> tasks) {\n        return null;\n      }\n\n      @Override\n      public Task<Void> createTimer(Duration duration) {\n        return null;\n      }\n\n      @Override\n      public <V> V getInput(Class<V> targetType) {\n        return null;\n      }\n\n      @Override\n      public <V> Task<V> callChildWorkflow(String name, @Nullable Object input, @Nullable String instanceID,\n                                           @Nullable WorkflowTaskOptions options, Class<V> returnType) {\n        return null;\n      }\n\n      @Override\n      public void continueAsNew(Object input, boolean preserveUnprocessedEvents) {\n      }\n    };\n  }\n\n  @Test\n  public void getNameTest() {\n    context.getName();\n    verify(mockInnerContext, times(1)).getName();\n  }\n\n  @Test\n  public void getInstanceIdTest() {\n    context.getInstanceId();\n    verify(mockInnerContext, times(1)).getInstanceId();\n  }\n\n  @Test\n  public void getCurrentInstantTest() {\n    context.getCurrentInstant();\n    verify(mockInnerContext, times(1)).getCurrentInstant();\n  }\n\n  @Test\n  public void waitForExternalEventWithEventAndDurationTest() {\n    String expectedEvent = \"TestEvent\";\n    Duration expectedDuration = Duration.ofSeconds(1);\n\n    context.waitForExternalEvent(expectedEvent, expectedDuration);\n    verify(mockInnerContext, times(1)).waitForExternalEvent(expectedEvent, expectedDuration, Void.class);\n  }\n\n  @Test\n  public void waitForExternalEventTest() {\n    String expectedEvent = \"TestEvent\";\n    Duration expectedDuration = Duration.ofSeconds(1);\n\n    context.waitForExternalEvent(expectedEvent, expectedDuration, String.class);\n    verify(mockInnerContext, times(1)).waitForExternalEvent(expectedEvent, expectedDuration, String.class);\n  }\n\n  @Test\n  public void callActivityTest() {\n    String expectedName = \"TestActivity\";\n    String expectedInput = \"TestInput\";\n\n    context.callActivity(expectedName, expectedInput, String.class);\n    verify(mockInnerContext, times(1)).callActivity(expectedName, expectedInput, null, String.class);\n  }\n\n  @Test\n  public void DaprWorkflowContextWithEmptyInnerContext() {\n    assertThrows(IllegalArgumentException.class, () ->\n        context = new DefaultWorkflowContext(mockInnerContext, (Logger)null));  }\n\n  @Test\n  public void DaprWorkflowContextWithEmptyLogger() {\n    assertThrows(IllegalArgumentException.class, () -> context = new DefaultWorkflowContext(null, (Logger)null));\n  }\n\n  @Test\n  public void completeTest() {\n    context.complete(null);\n    verify(mockInnerContext, times(1)).complete(null);\n  }\n\n  @Test\n  public void getIsReplayingTest() {\n    context.isReplaying();\n    verify(mockInnerContext, times(1)).getIsReplaying();\n  }\n\n  @Test\n  public void getLoggerReplayingTest() {\n    Logger mockLogger = mock(Logger.class);\n    when(context.isReplaying()).thenReturn(true);\n    DefaultWorkflowContext testContext = new DefaultWorkflowContext(mockInnerContext, mockLogger);\n\n    String expectedArg = \"test print\";\n    testContext.getLogger().info(expectedArg);\n\n    verify(mockLogger, times(0)).info(any(String.class));\n  }\n\n  @Test\n  public void getLoggerFirstTimeTest() {\n    Logger mockLogger = mock(Logger.class);\n    when(context.isReplaying()).thenReturn(false);\n    DefaultWorkflowContext testContext = new DefaultWorkflowContext(mockInnerContext, mockLogger);\n\n    String expectedArg = \"test print\";\n    testContext.getLogger().info(expectedArg);\n\n    verify(mockLogger, times(1)).info(expectedArg);\n  }\n\n  @Test\n  public void continueAsNewTest() {\n    String expectedInput = \"TestInput\";\n    context.continueAsNew(expectedInput);\n    verify(mockInnerContext, times(1)).continueAsNew(expectedInput);\n  }\n\n  @Test\n  public void allOfTest() {\n    Task<Void> t1 = mockInnerContext.callActivity(\"task1\");\n    Task<Void> t2 = mockInnerContext.callActivity(\"task2\");\n    List<Task<Void>> taskList = Arrays.asList(t1, t2);\n    context.allOf(taskList);\n    verify(mockInnerContext, times(1)).allOf(taskList);\n  }\n\n  @Test\n  public void anyOfTest() {\n    Task<Void> t1 = mockInnerContext.callActivity(\"task1\");\n    Task<Void> t2 = mockInnerContext.callActivity(\"task2\");\n    Task<Void> t3 = mockInnerContext.callActivity(\"task3\");\n    List<Task<?>> taskList = Arrays.asList(t1, t2);\n\n    context.anyOf(taskList);\n    verify(mockInnerContext, times(1)).anyOf(taskList);\n\n    context.anyOf(t1, t2, t3);\n    verify(mockInnerContext, times(1)).anyOf(Arrays.asList(t1, t2, t3));\n  }\n\n  @Test\n  public void createTimerTest() {\n    context.createTimer(Duration.ofSeconds(10));\n    verify(mockInnerContext, times(1)).createTimer(Duration.ofSeconds(10));\n  }\n\n  @Test\n  public void createTimerWithZonedDateTimeThrowsTest() {\n    assertThrows(UnsupportedOperationException.class, () -> context.createTimer(ZonedDateTime.now()));\n  }\n\n  @Test\n  public void callChildWorkflowWithName() {\n    String expectedName = \"TestActivity\";\n\n    context.callChildWorkflow(expectedName);\n    verify(mockInnerContext, times(1)).callSubOrchestrator(expectedName, null, null, null, null);\n  }\n\n  @Test\n  public void callChildWorkflowWithOptions() {\n    String expectedName = \"TestActivity\";\n    String expectedInput = \"TestInput\";\n    String expectedInstanceId = \"TestInstanceId\";\n    WorkflowTaskRetryPolicy retryPolicy = WorkflowTaskRetryPolicy.newBuilder()\n        .setMaxNumberOfAttempts(1)\n        .setFirstRetryInterval(Duration.ofSeconds(10))\n        .build();\n    WorkflowTaskOptions executionOptions = new WorkflowTaskOptions(retryPolicy);\n    ArgumentCaptor<TaskOptions> captor = ArgumentCaptor.forClass(TaskOptions.class);\n\n    context.callChildWorkflow(expectedName, expectedInput, expectedInstanceId, executionOptions, String.class);\n\n    verify(mockInnerContext, times(1))\n        .callSubOrchestrator(\n            eq(expectedName),\n            eq(expectedInput),\n            eq(expectedInstanceId),\n            captor.capture(),\n            eq(String.class)\n        );\n\n    TaskOptions taskOptions = captor.getValue();\n\n    assertEquals(retryPolicy.getMaxNumberOfAttempts(), taskOptions.getRetryPolicy().getMaxNumberOfAttempts());\n    assertEquals(retryPolicy.getFirstRetryInterval(), taskOptions.getRetryPolicy().getFirstRetryInterval());\n  }\n\n  @Test\n  public void callChildWorkflow() {\n    String expectedName = \"TestActivity\";\n    String expectedInput = \"TestInput\";\n\n    context.callChildWorkflow(expectedName, expectedInput, String.class);\n    verify(mockInnerContext, times(1)).callSubOrchestrator(expectedName, expectedInput, null, null, String.class);\n  }\n\n  @Test\n  public void newUuidTest() {\n    context.newUuid();\n    verify(mockInnerContext, times(1)).newUUID();\n  }\n\n  @Test\n  public void newUuidTestNoImplementationExceptionTest() {\n    RuntimeException runtimeException = assertThrows(RuntimeException.class, testWorkflowContext::newUuid);\n    String expectedMessage = \"No implementation found.\";\n    assertEquals(expectedMessage, runtimeException.getMessage());\n  }\n}\n"
