[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "taosdata/taosadapter"
sha = "2e4a8bb5b4d61bb7a6f5b5a722fc038f8c8d1270"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out thread/locker.go thread/locker_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting thread/locker.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 75.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "thread/locker_test.go"
focal_file_path = "thread/locker.go"
test_file_url = "https://github.com/taosdata/taosadapter/blob/2e4a8bb5b4d61bb7a6f5b5a722fc038f8c8d1270/thread/locker_test.go"
focal_file_url = "https://github.com/taosdata/taosadapter/blob/2e4a8bb5b4d61bb7a6f5b5a722fc038f8c8d1270/thread/locker.go"
first_commit_date = "2021-11-08"
last_commit_date = "2025-04-19"
test_file_content = "package thread\nfunc TestNewLocker(t *testing.T) {\n\ttype args struct {\n\t\tcount int\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test\",\n\t\t\targs: args{\n\t\t\t\tcount: 1,\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(_ *testing.T) {\n\t\t\tlocker := NewSemaphore(tt.args.count)\n\t\t\tlocker.Acquire()\n\t\t\ta := 1\n\t\t\t_ = a\n\t\t\tlocker.Release()\n\t\t})\n\t}\n}\n\nfunc TestSetGauge(t *testing.T) {\n\tlocker := NewSemaphore(1)\n\tg := metrics.NewGauge(\"test\")\n\tlocker.SetGauge(g)\n\tlocker.Acquire()\n\tassert.Equal(t, float64(1), g.Value())\n\tlocker.Release()\n\tassert.Equal(t, float64(0), g.Value())\n}"
