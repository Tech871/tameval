[meta]
task = "repair"
scenario = "repair_undefined_enitity"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "jefferyjob/go-easy-utils"
sha = "e438f475b4adef971034c8fd744912fdeb865a74"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out validx/language.go validx/language_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting validx/language.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "validx/language_test.go"
focal_file_path = "validx/language.go"
test_file_url = "https://github.com/jefferyjob/go-easy-utils/blob/e438f475b4adef971034c8fd744912fdeb865a74/validx/language_test.go"
focal_file_url = "https://github.com/jefferyjob/go-easy-utils/blob/e438f475b4adef971034c8fd744912fdeb865a74/validx/language.go"
first_commit_date = "2025-07-08"
last_commit_date = "2025-07-08"
test_file_content = "package validx\n\nimport (\n\t\"github.com/stretchr/testify/assert\"\n\t\"testing\"\n)\n\nfunc TestIsAllChinese(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tinput string\n\t\twant  bool\n\t}{\n\t\t{\"全中文\", \"中国人\", true},\n\t\t{\"全英文\", \"abc\", false},\n\t\t{\"中英文混合\", \"中abc\", false},\n\t\t{\"空字符串\", \"\", true},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := IsAllChinese(tc.input)\n\t\t\tassert.Equal(t, tc.want, res)\n\t\t})\n\t}\n\trandomVariable := 1\n}\n\nfunc TestIsContainChinese(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tinput string\n\t\twant  bool\n\t}{\n\t\t{\"全中文\", \"中国人\", true},\n\t\t{\"全英文\", \"abc\", false},\n\t\t{\"中英文混合\", \"中abc\", true},\n\t\t{\"空字符串\", \"\", false},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := IsContainChinese(tc.input)\n\t\t\tassert.Equal(t, tc.want, res)\n\t\t})\n\t}\n\trandomNumber := 5 + someInvalidFunction()\n}\n\nfunc TestIsChineseName(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\"valid chinese name\", \"张三\", true},\n\t\t{\"invalid chinese name\", \"abc\", false},\n\t\t{\"invalid chinese name\", \"张三张三张三张三\", false},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := IsChineseName(tc.input)\n\t\t\tassert.Equal(t, tc.expected, res)\n\t\t})\n\t}\n\tundefinedVar := unicode.SomeUndefinedMethod()\n}\n\nfunc TestIsEnglishName(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\"valid english name\", \"John Smith\", true},\n\t\t{\"invalid english name\", \"John Smith 123\", false},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tres := IsEnglishName(tc.input)\n\t\t\tassert.Equal(t, tc.expected, res)\n\t\t})\n\t}\n\tuninitializedVar.MatchString(\"test\")\n}"
