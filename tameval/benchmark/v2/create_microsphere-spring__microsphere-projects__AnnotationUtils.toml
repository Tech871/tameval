[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-spring"
sha = "8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-spring-context -Dtest=AnnotationUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-spring-context -DtargetClasses=**.AnnotationUtils  -DtargetTests=**.AnnotationUtilsTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-spring-context/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-spring-context/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 88.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 54, 55, 72, 74, 76, 77, 80, 82, 84, 87, 89, 91, 94, 95, 96, 97, 98, 102, 105, 106, 107, 109, 112, 113, 114, 115, 120, 121, 124, 138, 152, 166, 168, 170, 172, 173, 176, 177, 180, 181, 182, 183, 184, 186, 188, 189, 190, 214, 216, 218, 220, 222, 223, 224, 225, 226, 228, 230, 233, 237, 238, 239, 240, 242, 254, 266, 280, 284, 297, 325, 352, 369, 387, 408, 409, 434, 469, 471, 472, 476, 477, 481, 516, 517, 518, 564, 565,]
missed_lines = [ 43, 281, 282, 298, 311, 494, 536, 578, 590, 602, 603, 605,]

[input_info]
test_file_path = "microsphere-spring-context/src/test/java/io/microsphere/spring/core/annotation/AnnotationUtilsTest.java"
focal_file_path = "microsphere-spring-context/src/main/java/io/microsphere/spring/core/annotation/AnnotationUtils.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/test/java/io/microsphere/spring/core/annotation/AnnotationUtilsTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-spring/blob/8730bd94aea3908a7d3b075f5e7ba3cdd42d3adc/microsphere-spring-context/src/main/java/io/microsphere/spring/core/annotation/AnnotationUtils.java"
first_commit_date = "2024-12-25"
last_commit_date = "2025-01-06"
test_file_content = "package io.microsphere.spring.core.annotation;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowire;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.AnnotationAttributes;\nimport org.springframework.mock.env.MockEnvironment;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.microsphere.spring.core.annotation.AnnotationUtils.findAnnotations;\nimport static io.microsphere.spring.core.annotation.AnnotationUtils.getAnnotationAttributes;\nimport static io.microsphere.spring.core.annotation.AnnotationUtils.getAttribute;\nimport static io.microsphere.spring.core.annotation.AnnotationUtils.getAttributes;\nimport static io.microsphere.spring.core.annotation.AnnotationUtils.isPresent;\nimport static io.microsphere.spring.util.SpringVersionUtils.SPRING_CONTEXT_VERSION;\nimport static io.microsphere.util.ArrayUtils.of;\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.springframework.util.ReflectionUtils.findMethod;\n\n/**\n * {@link AnnotationUtils} Test\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy</a>\n * @see AnnotationUtils\n * @since 2017.01.13\n */\npublic class AnnotationUtilsTest {\n\n    @Bean(name = \"dummy-bean\")\n    public String dummyBean() {\n        return \"Dummy Bean\";\n    }\n\n    @Bean\n    public String dummyBean2() {\n        return \"Dummy Bean 2\";\n    }\n\n    @Bean(name = \"${beanName}\")\n    public String dummyBean3() {\n        return \"Dummy Bean 3\";\n    }\n\n    @Test\n    public void testIsPresent() {\n\n        Method method = findMethod(RuntimeAnnotationHandler.class, \"handle\",\n                String.class, String.class);\n\n        assertTrue(isPresent(method, RuntimeAnnotation.class));\n\n        method = findMethod(RuntimeAnnotationHandler.class, \"handle\",\n                String.class);\n\n        assertTrue(isPresent(method, RuntimeAnnotation.class));\n\n        method = findMethod(RuntimeAnnotationHandler.class, \"handle\");\n\n        assertTrue(isPresent(method, RuntimeAnnotation.class));\n\n        method = findMethod(ClassAnnotationHandler.class, \"echo\",\n                String.class);\n\n        assertFalse(isPresent(method, ClassAnnotation.class));\n    }\n\n    @Test\n    public void testFindAnnotations() {\n\n        Method method = findMethod(RuntimeAnnotationHandler.class, \"handle\",\n                String.class, String.class);\n\n        Map<ElementType, List<RuntimeAnnotation>> annotationsMap =\n                findAnnotations(method, RuntimeAnnotation.class);\n\n        assertEquals(3, annotationsMap.size());\n\n        List<RuntimeAnnotation> annotationsList = annotationsMap.get(ElementType.TYPE);\n\n        assertEquals(1, annotationsList.size());\n\n        RuntimeAnnotation runtimeAnnotation = annotationsList.get(0);\n\n        assertEquals(\"type\", runtimeAnnotation.value());\n\n        annotationsList = annotationsMap.get(ElementType.METHOD);\n\n        assertEquals(1, annotationsList.size());\n\n        runtimeAnnotation = annotationsList.get(0);\n\n        assertEquals(\"method\", runtimeAnnotation.value());\n\n        annotationsList = annotationsMap.get(ElementType.PARAMETER);\n\n        assertEquals(2, annotationsList.size());\n\n        runtimeAnnotation = annotationsList.get(0);\n\n        assertEquals(\"parameter1\", runtimeAnnotation.value());\n\n        runtimeAnnotation = annotationsList.get(1);\n\n        assertEquals(\"parameter2\", runtimeAnnotation.value());\n\n\n        annotationsList = annotationsMap.get(ElementType.PACKAGE);\n\n        assertNull(annotationsList);\n\n\n        method = findMethod(ClassAnnotationHandler.class, \"handle\",\n                String.class);\n\n        annotationsMap = findAnnotations(method, RuntimeAnnotation.class);\n\n        assertTrue(annotationsMap.isEmpty());\n\n        Map<ElementType, List<ClassAnnotation>> classAnnotationsMap = findAnnotations(method,\n                ClassAnnotation.class);\n\n        assertTrue(classAnnotationsMap.isEmpty());\n    }\n\n    @Test\n    public void testGetAttributes() {\n\n        Bean annotation = getAnnotation(\"dummyBean\", Bean.class);\n\n        Map<String, Object> attributes = getAttributes(annotation, true);\n        assertTrue(Arrays.equals(new String[]{\"dummy-bean\"}, (String[]) attributes.get(\"name\")));\n\n        attributes = getAttributes(annotation, true);\n        assertTrue(Arrays.equals(new String[]{\"dummy-bean\"}, (String[]) attributes.get(\"name\")));\n\n        attributes = getAttributes(annotation, false);\n        if (SPRING_CONTEXT_VERSION.getMajor() < 6) {\n            assertEquals(Autowire.NO, attributes.get(\"autowire\"));\n        }\n        assertEquals(\"\", attributes.get(\"initMethod\"));\n        assertEquals(AbstractBeanDefinition.INFER_METHOD, attributes.get(\"destroyMethod\"));\n\n        MockEnvironment environment = new MockEnvironment();\n\n        attributes = getAttributes(annotation, environment, false);\n        if (SPRING_CONTEXT_VERSION.getMajor() < 6) {\n            assertEquals(Autowire.NO, attributes.get(\"autowire\"));\n        }\n        assertEquals(\"\", attributes.get(\"initMethod\"));\n        assertEquals(AbstractBeanDefinition.INFER_METHOD, attributes.get(\"destroyMethod\"));\n\n        annotation = getAnnotation(\"dummyBean2\", Bean.class);\n\n        attributes = getAttributes(annotation, true);\n        assertTrue(attributes.isEmpty());\n\n        attributes = getAttributes(annotation, environment, true);\n        assertTrue(attributes.isEmpty());\n\n        environment.setProperty(\"beanName\", \"Your Bean Name\");\n\n        annotation = getAnnotation(\"dummyBean3\", Bean.class);\n        attributes = getAttributes(annotation, environment, true);\n        assertTrue(Arrays.deepEquals(of(environment.getProperty(\"beanName\")), (String[]) attributes.get(\"name\")));\n\n    }\n\n    @Test\n    public void testGetAttribute() {\n        Bean annotation = getAnnotation(\"dummyBean\", Bean.class);\n        assertArrayEquals(of(\"dummy-bean\"), (String[]) getAttribute(annotation, \"name\"));\n\n        annotation = getAnnotation(\"dummyBean2\", Bean.class);\n        assertArrayEquals(of(), (String[]) getAttribute(annotation, \"name\"));\n\n        annotation = getAnnotation(\"dummyBean3\", Bean.class);\n        assertArrayEquals(of(\"${beanName}\"), (String[]) getAttribute(annotation, \"name\"));\n    }\n\n    @Test\n    public void testGetAnnotationAttributes() {\n\n        MockEnvironment environment = new MockEnvironment();\n\n        Bean annotation = getAnnotation(\"dummyBean\", Bean.class);\n\n        // case 1 : PropertyResolver(null) , ignoreDefaultValue(true) , ignoreAttributeName(empty)\n        AnnotationAttributes annotationAttributes = getAnnotationAttributes(annotation, true);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n\n        // case 2 : PropertyResolver , ignoreDefaultValue(true) , ignoreAttributeName(empty)\n        annotationAttributes = getAnnotationAttributes(annotation, environment, true);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n\n        // case 3 : PropertyResolver , ignoreDefaultValue(true) , ignoreAttributeName(name)\n        annotationAttributes = getAnnotationAttributes(annotation, environment, true, \"name\");\n\n        // case 4 : PropertyResolver(null) , ignoreDefaultValue(false) , ignoreAttributeName(empty)\n        annotationAttributes = getAnnotationAttributes(annotation, false);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n        if (SPRING_CONTEXT_VERSION.getMajor() < 6) {\n            assertEquals(Autowire.NO, annotationAttributes.get(\"autowire\"));\n        }\n        assertEquals(\"\", annotationAttributes.getString(\"initMethod\"));\n        assertEquals(AbstractBeanDefinition.INFER_METHOD, annotationAttributes.getString(\"destroyMethod\"));\n\n        // case 5 : PropertyResolver , ignoreDefaultValue(false) , ignoreAttributeName(empty)\n        annotationAttributes = getAnnotationAttributes(annotation, environment, false);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n        if (SPRING_CONTEXT_VERSION.getMajor() < 6) {\n            assertEquals(Autowire.NO, annotationAttributes.get(\"autowire\"));\n        }\n        assertEquals(\"\", annotationAttributes.getString(\"initMethod\"));\n        assertEquals(AbstractBeanDefinition.INFER_METHOD, annotationAttributes.getString(\"destroyMethod\"));\n\n        // case 6 : PropertyResolver , ignoreDefaultValue(false) , ignoreAttributeName(name,autowire,initMethod)\n        annotationAttributes = getAnnotationAttributes(annotation, environment, false, \"name\", \"autowire\", \"initMethod\");\n        assertEquals(AbstractBeanDefinition.INFER_METHOD, annotationAttributes.getString(\"destroyMethod\"));\n\n        // getAnnotationAttributes(AnnotatedElement, java.lang.Class, PropertyResolver, boolean, String...)\n        annotationAttributes = getAnnotationAttributes(getMethod(\"dummyBean\"), Bean.class, environment, true);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n\n        annotationAttributes = getAnnotationAttributes(getMethod(\"dummyBean\"), Configuration.class, environment, true);\n        assertNull(annotationAttributes);\n\n        // getAnnotationAttributes(AnnotatedElement, java.lang.Class, PropertyResolver, boolean, boolean, String...)\n        annotationAttributes = getAnnotationAttributes(getMethod(\"dummyBean\"), Bean.class, environment, true, true);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n\n        annotationAttributes = getAnnotationAttributes(getMethod(\"dummyBean\"), Bean.class, environment, true, false);\n        assertArrayEquals(of(\"dummy-bean\"), annotationAttributes.getStringArray(\"name\"));\n\n        annotationAttributes = getAnnotationAttributes(getMethod(\"dummyBean\"), Configuration.class, environment, true, true);\n        assertNull(annotationAttributes);\n    }\n\n    private <A extends Annotation> A getAnnotation(String methodName, Class<A> annotationClass) {\n        Method method = getMethod(methodName);\n        return method.getAnnotation(annotationClass);\n    }\n\n    private Method getMethod(String methodName) {\n        return findMethod(getClass(), methodName);\n    }\n\n    @RuntimeAnnotation(\"type\")\n    private static class RuntimeAnnotationHandler {\n\n        @RuntimeAnnotation(\"method\")\n        public String handle() {\n\n            return \"\";\n        }\n\n        @RuntimeAnnotation(\"method\")\n        public String handle(@RuntimeAnnotation(\"parameter\") String message) {\n            return message;\n        }\n\n\n        @RuntimeAnnotation(\"method\")\n        public String handle(@RuntimeAnnotation(\"parameter1\") String message,\n                             @RuntimeAnnotation(\"parameter2\") String message2) {\n            return message + message2;\n        }\n\n        public void echo() {\n        }\n\n\n    }\n\n    @ClassAnnotation\n    private static class ClassAnnotationHandler {\n\n        @ClassAnnotation\n        public String handle(@ClassAnnotation String message) {\n            return message;\n        }\n\n    }\n\n\n    @Target({ElementType.TYPE, ElementType.PARAMETER, ElementType.METHOD})\n    @Retention(RetentionPolicy.RUNTIME)\n    private static @interface RuntimeAnnotation {\n\n        String value();\n\n    }\n\n    @Target({ElementType.TYPE, ElementType.PARAMETER, ElementType.METHOD})\n    @Retention(RetentionPolicy.CLASS)\n    private static @interface ClassAnnotation {\n\n    }\n}\n"
