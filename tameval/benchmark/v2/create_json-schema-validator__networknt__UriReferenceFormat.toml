[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "networknt/json-schema-validator"
sha = "a8bda4c9f43f17f657513083c0ae6f9690e51b9b"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=UriReferenceFormatTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.UriReferenceFormat  -DtargetTests=**.UriReferenceFormatTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 70.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 7, 12, 13, 14, 16, 21, 26,]
missed_lines = [ 11, 17, 31,]

[input_info]
test_file_path = "src/test/java/com/networknt/schema/format/UriReferenceFormatTest.java"
focal_file_path = "src/main/java/com/networknt/schema/format/UriReferenceFormat.java"
test_file_url = "https://github.com/networknt/json-schema-validator/blob/a8bda4c9f43f17f657513083c0ae6f9690e51b9b/src/test/java/com/networknt/schema/format/UriReferenceFormatTest.java"
focal_file_url = "https://github.com/networknt/json-schema-validator/blob/a8bda4c9f43f17f657513083c0ae6f9690e51b9b/src/main/java/com/networknt/schema/format/UriReferenceFormat.java"
first_commit_date = "2023-05-17"
last_commit_date = "2024-06-07"
test_file_content = "/*\n * Copyright (c) 2024 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.networknt.schema.format;\n\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\n\nimport com.networknt.schema.InputFormat;\nimport com.networknt.schema.JsonSchema;\nimport com.networknt.schema.JsonSchemaFactory;\nimport com.networknt.schema.SchemaValidatorsConfig;\nimport com.networknt.schema.SpecVersion.VersionFlag;\nimport com.networknt.schema.ValidationMessage;\n\nclass UriReferenceFormatTest {\n\n\n    @Test\n    void queryWithEncodedBracketsShouldPass() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"format\\\": \\\"uri-reference\\\"\\r\\n\"\n                + \"}\";\n\n        SchemaValidatorsConfig config = SchemaValidatorsConfig.builder().formatAssertionsEnabled(true).build();\n        JsonSchema schema = JsonSchemaFactory.getInstance(VersionFlag.V202012).getSchema(schemaData, config);\n        Set<ValidationMessage> messages = schema.validate(\"\\\"https://test.com/assets/product.pdf?filter%5Btest%5D=1\\\"\",\n                InputFormat.JSON);\n        assertTrue(messages.isEmpty());\n    }\n\n\n\n    @Test\n    void noSchemeNoAuthorityShouldPass() {\n        String schemaData = \"{\\r\\n\"\n                + \"  \\\"format\\\": \\\"uri-reference\\\"\\r\\n\"\n                + \"}\";\n\n        SchemaValidatorsConfig config = SchemaValidatorsConfig.builder().formatAssertionsEnabled(true).build();\n        JsonSchema schema = JsonSchemaFactory.getInstance(VersionFlag.V202012).getSchema(schemaData, config);\n        Set<ValidationMessage> messages = schema.validate(\"\\\"//\\\"\", InputFormat.JSON);\n        assertTrue(messages.isEmpty());\n    }\n\n}\n"
