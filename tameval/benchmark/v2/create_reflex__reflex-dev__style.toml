[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "reflex-dev/reflex"
sha = "7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=reflex/style.py -m pytest -q --junit-xml=test_output.xml tests/units/test_style.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target reflex.style --unit-test tests.units.test_style --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target reflex/style.py --unit-test tests/units/test_style.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 28.0
original_coverage = 93.0
mutation_kill_rate = 8.0
original_mutation_kill_rate = 32.0
covered_lines = [ 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 25, 31, 41, 51, 75, 77, 79, 84, 96, 108, 138, 162, 222, 238, 241, 244, 261, 281, 297, 318, 339, 387, 402,]
missed_lines = [ 65, 69, 105, 122, 123, 127, 129, 130, 133, 134, 135, 149, 150, 151, 152, 154, 156, 157, 158, 159, 173, 174, 176, 179, 180, 182, 183, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 211, 212, 214, 216, 217, 219, 232, 233, 234, 235, 251, 252, 254, 255, 256, 258, 259, 268, 269, 271, 272, 273, 274, 276, 278, 279, 289, 290, 292, 295, 306, 307, 308, 310, 312, 313, 314, 315, 327, 328, 329, 330, 331, 333, 334, 335, 336, 348, 350, 352, 353, 354, 355, 356, 364, 370, 371, 373, 374, 375, 377, 379, 380, 381, 382, 383, 384, 399,]

[input_info]
test_file_path = "tests/units/test_style.py"
focal_file_path = "reflex/style.py"
test_file_url = "https://github.com/reflex-dev/reflex/blob/7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788/tests/units/test_style.py"
focal_file_url = "https://github.com/reflex-dev/reflex/blob/7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788/reflex/style.py"
first_commit_date = "2023-06-25"
last_commit_date = "2025-05-29"
test_file_content = "from __future__ import annotations\n\nfrom typing import Any\n\nimport pytest\n\nimport reflex as rx\nfrom reflex import style\nfrom reflex.components.component import evaluate_style_namespaces\nfrom reflex.style import Style\nfrom reflex.vars import VarData\nfrom reflex.vars.base import LiteralVar, Var\n\nstyle_var = rx.Var.create({\"height\": \"42px\"})\n\ntest_style = [\n    ({\"a\": 1}, {\"a\": 1}),\n    ({\"&\": style_var}, {\"&\": {\"height\": \"42px\"}}),\n    (\n        {\"&\": rx.cond(style_var, style_var, {})},\n        {\"&\": rx.cond(style_var, style_var, {})},\n    ),\n    ({\"a\": LiteralVar.create(\"abc\")}, {\"a\": \"abc\"}),\n    ({\"test_case\": 1}, {\"testCase\": 1}),\n    ({\"test_case\": {\"a\": 1}}, {\"test_case\": {\"a\": 1}}),\n    ({\":test_case\": {\"a\": 1}}, {\":test_case\": {\"a\": 1}}),\n    ({\"::test_case\": {\"a\": 1}}, {\"::test_case\": {\"a\": 1}}),\n    (\n        {\"::-webkit-scrollbar\": {\"display\": \"none\"}},\n        {\"::-webkit-scrollbar\": {\"display\": \"none\"}},\n    ),\n    ({\"margin_y\": \"2rem\"}, {\"marginTop\": \"2rem\", \"marginBottom\": \"2rem\"}),\n    ({\"marginY\": \"2rem\"}, {\"marginTop\": \"2rem\", \"marginBottom\": \"2rem\"}),\n    (\n        {\"::-webkit-scrollbar\": {\"bgColor\": \"red\"}},\n        {\"::-webkit-scrollbar\": {\"backgroundColor\": \"red\"}},\n    ),\n    (\n        {\"paddingX\": [\"2rem\", \"3rem\"]},\n        {\n            \"paddingInlineStart\": [\"2rem\", \"3rem\"],\n            \"paddingInlineEnd\": [\"2rem\", \"3rem\"],\n        },\n    ),\n]\n\ndef compare_dict_of_var(d1: dict[str, Any], d2: dict[str, Any]):\n    \"\"\"Compare two dictionaries of Var objects.\n\n    Args:\n        d1: The first dictionary.\n        d2: The second dictionary.\n    \"\"\"\n    assert len(d1) == len(d2)\n    for key, value in d1.items():\n        assert key in d2\n        if isinstance(value, dict):\n            compare_dict_of_var(value, d2[key])\n        elif isinstance(value, Var):\n            assert value.equals(d2[key])\n        else:\n            assert value == d2[key]\n\nclass StyleState(rx.State):\n    \"\"\"Style vars in a substate.\"\"\"\n\n    color: str = \"hotpink\"\n    color2: str = \"red\"\n\ndef test_evaluate_style_namespaces():\n    \"\"\"Test that namespaces get converted to component create functions.\"\"\"\n    style_dict = {rx.text: {\"color\": \"blue\"}}\n    assert rx.text.__call__ not in style_dict\n    style_dict = evaluate_style_namespaces({**style_dict})\n    assert rx.text.__call__ in style_dict\n"
