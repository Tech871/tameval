[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dromara/disjob"
sha = "b5eb98544c8fc8fde39354d89a24f8d935b3ff20"
bench_version = 1

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl disjob-common -Dtest=TreeNodeTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl disjob-common -DtargetClasses=**.TreeNode  -DtargetTests=**.TreeNodeTest  -DoutputFormats=XML"
coverage_report_path = "disjob-common/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "disjob-common/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 63.0
original_coverage = 93.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 66, 69, 70, 73, 74, 87, 91, 107, 111, 115, 118, 120, 121, 124, 125, 126, 127, 129, 133, 134, 140, 141, 153, 157, 160, 163, 166, 171, 172, 317, 318, 320, 334, 335, 336, 337, 338, 339, 342, 355, 356, 360, 362, 363, 373, 376, 377, 379, 380, 383, 384, 386, 387, 389, 390, 394, 395, 396, 397, 399, 401, 403, 405, 409, 412, 414, 416, 420, 425, 426, 427, 430, 431, 434, 435, 436, 439, 440, 443, 446, 447, 449, 453, 454, 459, 460, 461, 464, 466, 468, 471, 473, 474, 477, 478, 479, 480, 481, 485, 487, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 504, 505, 506, 508, 511, 512, 516, 519, 520, 521, 522, 526, 527, 528, 529, 531,]
missed_lines = [ 117, 167, 181, 182, 183, 184, 185, 187, 188, 189, 199, 200, 201, 203, 205, 207, 219, 220, 221, 222, 223, 225, 226, 227, 256, 257, 258, 259, 260, 261, 262, 263, 287, 288, 289, 345, 346, 347, 348, 350, 364, 365, 378, 421, 429, 437, 444, 450, 463, 484, 535, 536, 538, 539, 540, 541, 543, 544, 545, 548, 550, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 565,]

[input_info]
test_file_path = "disjob-common/src/test/java/cn/ponfee/disjob/common/tree/TreeNodeTest.java"
focal_file_path = "disjob-common/src/main/java/cn/ponfee/disjob/common/tree/TreeNode.java"
test_file_url = "https://github.com/dromara/disjob/blob/b5eb98544c8fc8fde39354d89a24f8d935b3ff20/disjob-common/src/test/java/cn/ponfee/disjob/common/tree/TreeNodeTest.java"
focal_file_url = "https://github.com/dromara/disjob/blob/b5eb98544c8fc8fde39354d89a24f8d935b3ff20/disjob-common/src/main/java/cn/ponfee/disjob/common/tree/TreeNode.java"
first_commit_date = "2023-05-03"
last_commit_date = "2025-02-12"
test_file_content = "/*\n * Copyright 2022-2024 Ponfee (http://www.ponfee.cn/)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage cn.ponfee.disjob.common.tree;\n\nimport cn.ponfee.disjob.common.util.Jsons;\nimport org.assertj.core.api.Assertions;\nimport org.json.JSONException;\nimport org.junit.jupiter.api.Test;\nimport org.skyscreamer.jsonassert.JSONAssert;\nimport org.skyscreamer.jsonassert.JSONCompareMode;\n\nimport java.util.*;\n\n/**\n * NodePath test\n *\n * @author Ponfee\n */\npublic class TreeNodeTest {\n\n\n\n\n\n\n\n\n\n    @Test\n    public void testBuild2() throws JSONException {\n        List<PlainNode<Integer, Object>> plainNodes = Arrays.asList(\n            new PlainNode<>(100, null),\n            new PlainNode<>(110, 100),\n            new PlainNode<>(120, 100),\n            new PlainNode<>(111, 110)\n        );\n        TreeNode<Integer, Object> root1 = TreeNode.build(plainNodes);\n        JSONAssert.assertEquals(\"{\\\"id\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":0,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":2,\\\"treeNodeCount\\\":4,\\\"treeLeafCount\\\":2,\\\"children\\\":[{\\\"id\\\":110,\\\"parentId\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":1,\\\"treeDegree\\\":1,\\\"treeHeight\\\":1,\\\"treeNodeCount\\\":2,\\\"treeLeafCount\\\":1,\\\"children\\\":[{\\\"id\\\":111,\\\"parentId\\\":110,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":2,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]},{\\\"id\\\":120,\\\"parentId\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":1,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]}\", Jsons.toJson(root1), JSONCompareMode.NON_EXTENSIBLE);\n        System.out.println(\"root1:\\n\" + root1);\n\n\n        List<PlainNode<Integer, Object>> plainNodes2 = Arrays.asList(\n            new PlainNode<>(121, 120),\n            new PlainNode<>(131, 121),\n            new PlainNode<>(132, 121)\n        );\n        TreeNode<Integer, Object> root2 = TreeNode.build(plainNodes2);\n        JSONAssert.assertEquals(\"{\\\"id\\\":121,\\\"parentId\\\":120,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":0,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":1,\\\"treeNodeCount\\\":3,\\\"treeLeafCount\\\":2,\\\"children\\\":[{\\\"id\\\":131,\\\"parentId\\\":121,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]},{\\\"id\\\":132,\\\"parentId\\\":121,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":1,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]}\", Jsons.toJson(root2), JSONCompareMode.NON_EXTENSIBLE);\n        System.out.println(\"root2:\\n\" + root2);\n\n\n        List<PlainNode<Integer, Object>> plainNodes3 = Arrays.asList(\n            root1,\n            root2,\n            new PlainNode<>(112, 110)\n        );\n        TreeNode<Integer, Object> root3 = TreeNode.build(plainNodes3);\n        JSONAssert.assertEquals(\"{\\\"id\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":0,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":3,\\\"treeNodeCount\\\":8,\\\"treeLeafCount\\\":4,\\\"children\\\":[{\\\"id\\\":110,\\\"parentId\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":1,\\\"treeNodeCount\\\":3,\\\"treeLeafCount\\\":2,\\\"children\\\":[{\\\"id\\\":111,\\\"parentId\\\":110,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":2,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]},{\\\"id\\\":112,\\\"parentId\\\":110,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":2,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":1,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]},{\\\"id\\\":120,\\\"parentId\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":2,\\\"nodeDegree\\\":1,\\\"treeDegree\\\":2,\\\"treeHeight\\\":2,\\\"treeNodeCount\\\":4,\\\"treeLeafCount\\\":2,\\\"children\\\":[{\\\"id\\\":121,\\\"parentId\\\":120,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":2,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":2,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":1,\\\"treeNodeCount\\\":3,\\\"treeLeafCount\\\":2,\\\"children\\\":[{\\\"id\\\":131,\\\"parentId\\\":121,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":3,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":2,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]},{\\\"id\\\":132,\\\"parentId\\\":121,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":3,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":3,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]}]}]}\", Jsons.toJson(root3), JSONCompareMode.NON_EXTENSIBLE);\n        System.out.println(\"root3:\\n\" + root3);\n    }\n\n    @Test\n    public void testBuild3() throws JSONException {\n        List<PlainNode<Integer, Object>> plainNodes = Arrays.asList(\n            new PlainNode<>(100, 0),\n            new PlainNode<>(110, 100),\n            new PlainNode<>(120, 100),\n            new PlainNode<>(111, 110),\n            new PlainNode<>(200, 0)\n        );\n        TreeNode<Integer, Object> root = TreeNode.build(plainNodes);\n        JSONAssert.assertEquals(\"{\\\"available\\\":true,\\\"id\\\":0,\\\"enabled\\\":true,\\\"level\\\":0,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":3,\\\"treeNodeCount\\\":6,\\\"treeLeafCount\\\":3,\\\"children\\\":[{\\\"id\\\":100,\\\"parentId\\\":0,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":2,\\\"treeDegree\\\":2,\\\"treeHeight\\\":2,\\\"treeNodeCount\\\":4,\\\"treeLeafCount\\\":2,\\\"children\\\":[{\\\"id\\\":110,\\\"parentId\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":2,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":1,\\\"treeDegree\\\":1,\\\"treeHeight\\\":1,\\\"treeNodeCount\\\":2,\\\"treeLeafCount\\\":1,\\\"children\\\":[{\\\"id\\\":111,\\\"parentId\\\":110,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":3,\\\"siblingOrdinal\\\":0,\\\"leftLeafCount\\\":0,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]},{\\\"id\\\":120,\\\"parentId\\\":100,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":2,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":1,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]},{\\\"id\\\":200,\\\"parentId\\\":0,\\\"enabled\\\":true,\\\"available\\\":true,\\\"level\\\":1,\\\"siblingOrdinal\\\":1,\\\"leftLeafCount\\\":2,\\\"nodeDegree\\\":0,\\\"treeDegree\\\":0,\\\"treeHeight\\\":0,\\\"treeNodeCount\\\":1,\\\"treeLeafCount\\\":1,\\\"children\\\":[]}]}\", Jsons.toJson(root), JSONCompareMode.NON_EXTENSIBLE);\n        System.out.println(root);\n    }\n\n\n    @Test\n    public void testBuild5() {\n        List<PlainNode<Integer, Object>> plainNodes = Arrays.asList(\n            new PlainNode<>(100, null),\n            new PlainNode<>(110, 100),\n            new PlainNode<>(120, 100),\n            new PlainNode<>(111, 110),\n            new PlainNode<>(210, 200)\n        );\n        Assertions.assertThatThrownBy(() -> TreeNode.build(plainNodes))\n            .isInstanceOf(IllegalStateException.class)\n            .hasMessage(\"Found many root node id: [200, null]\");\n    }\n\n\n    @Test\n    public void testTraverse() {\n        TreeNode<Integer, Object> root1 = new TreeNode<>(0, null);\n        root1.mount(Arrays.asList(\n            new PlainNode<>(1, 0),\n            new PlainNode<>(2, 0),\n            new PlainNode<>(3, 1),\n            new PlainNode<>(4, 1),\n            new PlainNode<>(5, 2),\n            new PlainNode<>(6, 2),\n            new PlainNode<>(7, 3),\n            new PlainNode<>(8, 3),\n            new PlainNode<>(9, 4)\n        ));\n        System.out.println(root1);\n        StringBuilder builder = new StringBuilder();\n        root1.traverse(node -> builder.append(node.id));\n        Assertions.assertThat(builder.toString()).isEqualTo(\"0123456789\");\n    }\n\n}\n"
