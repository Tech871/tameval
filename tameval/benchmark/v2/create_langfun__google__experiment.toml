[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "google/langfun"
sha = "11d646e44baaea09bb792c3428a8f71ba742363b"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=langfun/core/eval/v2/experiment.py -m pytest -q --junit-xml=test_output.xml langfun/core/eval/v2/experiment_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target langfun.core.eval.v2.experiment --unit-test langfun.core.eval.v2.experiment_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target langfun/core/eval/v2/experiment.py --unit-test langfun/core/eval/v2/experiment_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = 99.0
original_mutation_kill_rate = 99.0
covered_lines = [ 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 30, 185, 188, 190, 191, 193, 194, 196, 197, 199, 200, 212, 213, 214, 215, 216, 217, 218, 219, 225, 230, 235, 243, 244, 245, 246, 247, 253, 254, 256, 258, 267, 268, 270, 274, 276, 277, 278, 279, 285, 286, 287, 290, 291, 292, 295, 297, 299, 300, 302, 303, 304, 305, 307, 308, 314, 315, 317, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 340, 342, 343, 344, 351, 365, 373, 459, 461, 480, 481, 483, 502, 503, 504, 505, 506, 507, 508, 514, 519, 521, 523, 528, 529, 530, 531, 532, 533, 536, 572, 580, 581, 584, 585, 586, 587, 599, 606, 621, 622, 646, 647, 650, 654, 655, 657, 660, 662, 663, 665, 667, 669, 670, 672, 674, 676, 678, 680, 684, 688, 690, 692, 694, 696, 698, 703, 704, 706, 707, 708, 709, 710, 713, 714, 716, 718, 719, 725, 726, 731, 732, 733, 736, 737, 738, 739, 743, 744, 745, 746, 748, 749, 750, 755, 756, 758, 759, 760, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 781, 784, 789, 796, 801, 808, 816, 823, 828, 833, 842, 854, 859, 864, 874, 875, 877, 879, 880, 882, 884, 886, 887, 888, 890, 892, 894, 896, 897, 898, 900, 902, 904, 906, 908, 910, 911, 912, 917, 919, 920, 921, 922, 923, 924, 926, 928, 929, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 942, 945, 949, 951, 953, 958, 963, 964, 965, 966, 967, 968, 972, 974, 975, 978, 979, 981, 984, 987, 994, 1001, 1009, 1016, 1023, 1030, 1038, 1046,]
missed_lines = [ 260, 345, 353, 354, 359, 360, 362, 363, 460, 520, 534, 535, 582, 671, 686, 711,]

[input_info]
test_file_path = "langfun/core/eval/v2/experiment_test.py"
focal_file_path = "langfun/core/eval/v2/experiment.py"
test_file_url = "https://github.com/google/langfun/blob/11d646e44baaea09bb792c3428a8f71ba742363b/langfun/core/eval/v2/experiment_test.py"
focal_file_url = "https://github.com/google/langfun/blob/11d646e44baaea09bb792c3428a8f71ba742363b/langfun/core/eval/v2/experiment.py"
first_commit_date = "2024-11-12"
last_commit_date = "2025-03-21"
test_file_content = "# Copyright 2024 The Langfun Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\nimport datetime\nimport os\nimport tempfile\nimport unittest\n\nfrom langfun.core.eval.v2 import evaluation as evaluation_lib\nfrom langfun.core.eval.v2 import experiment as experiment_lib\nfrom langfun.core.eval.v2 import metrics as metrics_lib\n\nimport pyglove as pg\n\nExperiment = experiment_lib.Experiment\nSuite = experiment_lib.Suite\nEvaluation = evaluation_lib.Evaluation\nRun = experiment_lib.Run\nRunId = experiment_lib.RunId\nRunner = experiment_lib.Runner\n\n\n@pg.functor()\ndef sample_inputs(num_examples: int = 1):\n  return [\n      pg.Dict(x=1)\n  ] * num_examples\n\n\nclass MyEvaluation(Evaluation):\n  NAME = 'my_eval'\n  RUN_ARGS = dict(\n      runner='test'\n  )\n\n  replica_id: int = 0\n  inputs = sample_inputs()\n  metrics = [metrics_lib.Match()]\n\n  def process(self, example):\n    return 1\n\n\nclass ExperimentTest(unittest.TestCase):\n\n  def test_hierarchy(self):\n    exp = Suite([\n        Suite([\n            MyEvaluation(replica_id=0)\n        ]),\n        MyEvaluation(replica_id=pg.oneof(range(5))),\n    ])\n\n    self.assertIsNotNone(exp.id)\n    self.assertTrue(exp.id.startswith('Suite@'))\n    self.assertEqual(len(exp.children), 2)\n    self.assertEqual(len(exp.leaf_nodes), 6)\n    self.assertEqual(len(exp.nonleaf_nodes), 3)\n    self.assertFalse(exp.is_leaf)\n    self.assertFalse(exp.empty())\n    self.assertEqual(len(exp.nodes), 9)\n\n    self.assertTrue(exp.children[0].children[0].id.startswith('MyEvaluation@'))\n    self.assertTrue(exp.children[0].children[0].is_leaf)\n    self.assertEqual(len(exp.children[0].children[0].leaf_nodes), 1)\n    self.assertFalse(exp.children[1].is_leaf)\n    self.assertEqual(len(exp.children[1].children), 5)\n    self.assertEqual(len(exp.children[1].leaf_nodes), 5)\n    self.assertEqual(exp.leaf_nodes[-1].replica_id, 4)\n    self.assertNotEqual(exp.leaf_nodes[1].hash, exp.leaf_nodes[2].hash)\n\n    self.assertIsNone(exp.parent)\n    self.assertIs(exp.children[0].parent, exp)\n    self.assertIs(exp.children[0].children[0].parent, exp.children[0])\n    self.assertIs(exp.children[1].children[0].parent, exp.children[1])\n    self.assertIs(exp.get(exp.leaf_nodes[-1].id), exp.leaf_nodes[-1])\n\n  def test_html_view(self):\n    exp = Suite([\n        Suite([\n            MyEvaluation(replica_id=0)\n        ]),\n        MyEvaluation(replica_id=pg.oneof(range(5))),\n    ])\n    self.assertIn(exp.id, exp.to_html().content)\n    run = Run('/root', RunId.from_id('20241102_0'), pg.Ref(exp))\n    self.assertIn(\n        str(run.id),\n        run.to_html(\n            extra_flags=dict(\n                current_run=run\n            )\n        ).content\n    )\n\n  def test_find(self):\n    exp = Experiment.find('my_eval')\n    self.assertIsInstance(exp, MyEvaluation)\n    exp = Experiment.find('.*_eval')\n    self.assertIsInstance(exp, MyEvaluation)\n    exp = Experiment.find('foo')\n    self.assertTrue(pg.eq(exp, Suite([])))\n\n\nclass RunIdTest(unittest.TestCase):\n\n  def test_basic(self):\n    rid = RunId.from_id('20241102_0')\n    self.assertEqual(\n        rid.dirname('/root'), os.path.join('/root', 'run_20241102_0')\n    )\n    self.assertEqual(str(rid), '20241102_0')\n    self.assertEqual(rid.date, datetime.date(2024, 11, 2))\n    self.assertEqual(rid.number, 0)\n\n  def test_comparison(self):\n    self.assertEqual(\n        RunId.from_id('20241102_0'), RunId.from_id('20241102_0')\n    )\n    self.assertLess(\n        RunId.from_id('20241102_0'), RunId.from_id('20241102_1')\n    )\n    self.assertLess(\n        RunId.from_id('20241101_0'), RunId.from_id('20241102_1')\n    )\n    self.assertGreater(\n        RunId.from_id('20241102_0'), RunId.from_id('20241101_0')\n    )\n    self.assertLessEqual(\n        RunId.from_id('20241102_0'), RunId.from_id('20241102_0')\n    )\n    self.assertEqual(\n        RunId.from_id('20241102_0').next(),\n        RunId.from_id('20241102_1')\n    )\n\n  def test_get_latest(self):\n    root_dir = os.path.join(tempfile.gettempdir(), 'test_eval')\n    pg.io.mkdirs(os.path.join(root_dir, 'run_20241102_0'))\n    pg.io.mkdirs(os.path.join(root_dir, 'run_20241101_0'))\n    self.assertEqual(\n        RunId.get_latest(root_dir),\n        RunId.from_id('20241102_0')\n    )\n    self.assertIsNone(RunId.get_latest('/notexist'))\n    self.assertIsNone(RunId.get_latest(tempfile.gettempdir()))\n\n  def test_new(self):\n    rid = RunId(date=datetime.date.today(), number=1)\n    self.assertEqual(\n        RunId.new(root_dir=os.path.join(tempfile.gettempdir(), 'test_new')),\n        rid\n    )\n    root_dir = os.path.join(tempfile.gettempdir(), 'test_eval2')\n    pg.io.mkdirs(rid.dirname(root_dir))\n    self.assertEqual(RunId.new(root_dir), rid.next())\n\n  def test_is_valid(self):\n    self.assertTrue(RunId.is_valid('latest'))\n    self.assertTrue(RunId.is_valid('new'))\n    self.assertTrue(RunId.is_valid('20241102_0'))\n    self.assertFalse(RunId.is_valid('20241102-0'))\n\n  def test_from_id(self):\n    with self.assertRaisesRegex(\n        ValueError, '.* must be one of'\n    ):\n      RunId.from_id('abc')\n\n    with self.assertRaisesRegex(\n        ValueError, '`root_dir` must be provided'\n    ):\n      RunId.from_id('latest')\n\n    with self.assertRaisesRegex(\n        ValueError, '.* no previous runs'\n    ):\n      RunId.from_id('latest', root_dir=tempfile.gettempdir())\n\n    self.assertEqual(\n        RunId.from_id('20241102_1'),\n        RunId(date=datetime.date(2024, 11, 2), number=1)\n    )\n    root_dir = os.path.join(tempfile.gettempdir(), 'test_eval3')\n    rid = RunId.from_id('20241102_1')\n    pg.io.mkdirs(rid.dirname(root_dir))\n    self.assertEqual(\n        RunId.from_id('latest', root_dir=root_dir), rid\n    )\n    self.assertEqual(\n        RunId.from_id('new', root_dir=root_dir),\n        RunId(datetime.date.today(), 1)\n    )\n    self.assertEqual(\n        RunId.from_id(None, root_dir=root_dir), rid\n    )\n\n\nclass RunTest(unittest.TestCase):\n\n  def test_input_output_paths(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0),\n        ])),\n    )\n    self.assertEqual(run.output_root, '/root/run_20241102_0')\n    self.assertEqual(run.input_root, '/root/run_20241102_0')\n    self.assertEqual(\n        run.output_link('summary.html'),\n        'file:///root/run_20241102_0/summary.html'\n    )\n    self.assertEqual(\n        run.output_dir(run.experiment.leaf_nodes[0]),\n        (\n            '/root/run_20241102_0/MyEvaluation/'\n            + run.experiment.leaf_nodes[0].hash\n        )\n    )\n    self.assertEqual(\n        run.input_path_for(run.experiment, 'a.txt'),\n        '/root/run_20241102_0/a.txt'\n    )\n    self.assertEqual(\n        run.input_path_for(run.experiment.leaf_nodes[0], 'a.txt'),\n        '/root/run_20241102_0/MyEvaluation/%s/a.txt' % (\n            run.experiment.leaf_nodes[0].hash\n        )\n    )\n\n    # With warmup_id\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([MyEvaluation(replica_id=0)])),\n        warm_start_from='/root2/run_20241103_1'\n    )\n    self.assertEqual(run.output_root, '/root/run_20241102_0')\n    self.assertEqual(run.input_root, '/root2/run_20241103_1')\n    self.assertEqual(\n        run.output_dir(run.experiment.leaf_nodes[0]),\n        (\n            '/root/run_20241102_0/MyEvaluation/'\n            + run.experiment.leaf_nodes[0].hash\n        )\n    )\n    self.assertEqual(\n        run.input_dir(run.experiment.leaf_nodes[0]),\n        (\n            '/root2/run_20241103_1/MyEvaluation/'\n            + run.experiment.leaf_nodes[0].hash\n        )\n    )\n    self.assertEqual(\n        run.input_path_for(run.experiment, 'a.txt'),\n        '/root2/run_20241103_1/a.txt'\n    )\n    self.assertEqual(\n        run.input_path_for(run.experiment.leaf_nodes[0], 'a.txt'),\n        '/root2/run_20241103_1/MyEvaluation/%s/a.txt' % (\n            run.experiment.leaf_nodes[0].hash\n        )\n    )\n\n  def test_examples_start_from_scratch(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n    )\n    root = run.experiment\n    self.assertEqual(run.examples_to_evaluate(root), set())\n    self.assertEqual(run.examples_to_reprocess(root), set())\n    self.assertEqual(run.examples_to_load(root), set())\n    self.assertEqual(run.examples_to_load_metadata(root), set())\n\n    exp = root.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set(range(1, 11)))\n    self.assertEqual(run.examples_to_reprocess(exp), set())\n    self.assertEqual(run.examples_to_load(exp), set(range(1, 11)))\n    self.assertEqual(run.examples_to_load_metadata(exp), set())\n\n  def test_examples_with_example_ids(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n        example_ids=[1, 3, 5]\n    )\n    exp = run.experiment.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_reprocess(exp), set())\n    self.assertEqual(run.examples_to_load(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_load_metadata(exp), set())\n\n  def test_examples_with_reprocess_all(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n        example_ids=[1, 3, 5],\n        reprocess=True\n    )\n    exp = run.experiment.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_reprocess(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_load(exp), set())\n    self.assertEqual(run.examples_to_load_metadata(exp), set())\n\n  def test_examples_with_reprocess_some(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n        example_ids=[1, 3, 5],\n        reprocess=[1],\n    )\n    exp = run.experiment.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_reprocess(exp), set([1]))\n    self.assertEqual(run.examples_to_load(exp), set([3, 5]))\n    self.assertEqual(run.examples_to_load_metadata(exp), set())\n\n  def test_examples_with_generate_example_html_all(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n        example_ids=[1, 3, 5],\n        reprocess=[1],\n        generate_example_html='all',\n    )\n    exp = run.experiment.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_reprocess(exp), set([1]))\n    self.assertEqual(run.examples_to_load(exp), set([3, 5]))\n    self.assertEqual(run.examples_to_load_metadata(exp), set([3, 5]))\n\n  def test_examples_with_generate_example_html_new(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n        example_ids=[1, 3, 5],\n        reprocess=[1],\n        generate_example_html='new',\n    )\n    exp = run.experiment.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_reprocess(exp), set([1]))\n    self.assertEqual(run.examples_to_load(exp), set([3, 5]))\n    self.assertEqual(run.examples_to_load_metadata(exp), set())\n\n  def test_examples_with_generate_example_html_some(self):\n    run = Run(\n        '/root',\n        RunId.from_id('20241102_0'),\n        pg.Ref(Suite([\n            MyEvaluation(replica_id=0, inputs=sample_inputs(10)),\n        ])),\n        example_ids=[1, 3, 5],\n        reprocess=[1],\n        generate_example_html=[1, 2, 3],\n    )\n    exp = run.experiment.leaf_nodes[0]\n    self.assertEqual(run.examples_to_evaluate(exp), set([1, 3, 5]))\n    self.assertEqual(run.examples_to_reprocess(exp), set([1]))\n    self.assertEqual(run.examples_to_load(exp), set([2, 3, 5]))\n    self.assertEqual(run.examples_to_load_metadata(exp), set([2, 3]))\n\n\nclass RunnerTest(unittest.TestCase):\n\n  def test_basic(self):\n\n    class TestRunner(Runner):\n      NAME = 'test'\n\n      def run(self):\n        pass\n\n    self.assertIsInstance(\n        Runner.create(\n            'test',\n            current_run=Run(\n                '/root',\n                RunId.from_id('20241102_0'), pg.Ref(Suite([])),\n            )\n        ),\n        TestRunner\n    )\n    root_dir = os.path.join(tempfile.gettempdir(), 'my_eval')\n\n    # Test standard run.\n    MyEvaluation(replica_id=0).run(\n        root_dir, id='20241101_0', runner='test'\n    )\n\n    # Test run preconfigured.\n    MyEvaluation(replica_id=0).run_preconfigured(\n        root_dir=root_dir, id='20241101_1'\n    )\n\n    with self.assertRaisesRegex(\n        ValueError, 'Runner class must define a NAME constant'\n    ):\n      class AnotherRunner(Runner):  # pylint: disable=unused-variable\n        def run(self):\n          pass\n\n\nif __name__ == '__main__':\n  unittest.main()\n"
