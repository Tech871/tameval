[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Go"
go_version = "1.23.6"

[repo_info]
repository = "snyk/snyk-ls"
sha = "37ef5edff63f9b37597e8df6c0b25dadb7068ba1"

[run_info]
docker_image = "golang:1.23.6"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out infrastructure/oss/oss_html.go infrastructure/oss/oss_html_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting infrastructure/oss/oss_html.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 72.0
original_coverage = 72.0
mutation_kill_rate = 35.0
original_mutation_kill_rate = 32.0
covered_lines = [ 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 60, 63, 64, 65, 67, 68, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 145, 150, 153, 156, 157, 158, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 226,]
missed_lines = [ 52, 53, 54, 55, 69, 70, 71, 72, 104, 105, 106, 107, 146, 147, 148, 154, 155, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,]

[input_info]
test_file_path = "infrastructure/oss/oss_html_test.go"
focal_file_path = "infrastructure/oss/oss_html.go"
test_file_url = "https://github.com/snyk/snyk-ls/blob/37ef5edff63f9b37597e8df6c0b25dadb7068ba1/infrastructure/oss/oss_html_test.go"
focal_file_url = "https://github.com/snyk/snyk-ls/blob/37ef5edff63f9b37597e8df6c0b25dadb7068ba1/infrastructure/oss/oss_html.go"
first_commit_date = "2024-10-16"
last_commit_date = "2025-03-10"
test_file_content = "/*\n * Â© 2022-2023 Snyk Limited\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage oss\n\nimport (\n\t_ \"embed\"\n\t\"regexp\"\n\t\"slices\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/snyk/snyk-ls/domain/snyk\"\n\t\"github.com/snyk/snyk-ls/internal/testutil\"\n\t\"github.com/snyk/snyk-ls/internal/types\"\n)\n\nfunc Test_OssDetailsPanel_html_noLearn(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\texpectedVariables := []string{\"${headerEnd}\", \"${cspSource}\", \"${ideStyle}\", \"${nonce}\"}\n\tslices.Sort(expectedVariables)\n\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t}\n\n\tissue2 := snyk.OssIssueData{\n\t\tTitle:       \"myTitle2\",\n\t\tName:        \"myIssue2\",\n\t\tDescription: \"- list2\",\n\t\tFrom:        []string{\"5\", \"6\", \"7\", \"8\"},\n\t}\n\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issueAdditionalData)\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issue2)\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Critical,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\t// invoke methode under test\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\t// compare\n\treg := regexp.MustCompile(`\\$\\{\\w+\\}`)\n\tactualVariables := reg.FindAllString(issueDetailsPanelHtml, -1)\n\tslices.Sort(actualVariables)\n\tactualVariables = slices.Compact(actualVariables)\n\n\tassert.Equal(t, expectedVariables, actualVariables)\n\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issueAdditionalData.Name))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issue.ID))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issueAdditionalData.Title))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issue.Severity.String()))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, strings.Join(issueAdditionalData.From, \" &gt; \")))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, strings.Join(issue2.From, \" &gt; \")))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"<li>list</li>\"))\n\tassert.False(t, strings.Contains(issueDetailsPanelHtml, \"Learn about this issue type\"))\n}\n\nfunc Test_OssDetailsPanel_html_withLearn(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t\tLesson:      \"something\",\n\t}\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Critical,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issueAdditionalData)\n\n\t// invoke methode under test\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"Learn about this issue type\"))\n}\n\nfunc Test_OssDetailsPanel_html_withLearn_withCustomEndpoint(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t\tLesson:      \"something\",\n\t\tMatchingIssues: []snyk.OssIssueData{\n\t\t\t{\n\t\t\t\tFrom: []string{\"1\", \"2\", \"3\", \"4\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Critical,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issueAdditionalData)\n\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\tassert.Truef(t, strings.Contains(issueDetailsPanelHtml, \"learn.\"), issueDetailsPanelHtml)\n}\n\nfunc Test_OssDetailsPanel_html_moreDetailedPaths(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\texpectedVariables := []string{\"${headerEnd}\", \"${cspSource}\", \"${ideStyle}\", \"${nonce}\"}\n\tslices.Sort(expectedVariables)\n\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t\tCVSSv3:      \"CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P\",\n\t\tCvssScore:   5.0,\n\t}\n\n\tissue2 := snyk.OssIssueData{\n\t\tTitle:       \"myTitle2\",\n\t\tName:        \"myIssue2\",\n\t\tDescription: \"- list2\",\n\t\tFrom:        []string{\"5\", \"6\", \"7\", \"8\"},\n\t}\n\n\tissue3 := snyk.OssIssueData{\n\t\tTitle:       \"myTitle3\",\n\t\tName:        \"myIssue3\",\n\t\tDescription: \"- list3\",\n\t\tFrom:        []string{\"9\", \"10\"},\n\t}\n\n\tissue4 := snyk.OssIssueData{\n\t\tTitle:       \"myTitle4\",\n\t\tName:        \"myIssue4\",\n\t\tDescription: \"- list4\",\n\t\tFrom:        []string{\"11\"},\n\t}\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issueAdditionalData)\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issue2)\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issue3)\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issue4)\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Critical,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\t// invoke methode under test\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\t// compare\n\treg := regexp.MustCompile(`\\$\\{\\w+\\}`)\n\tactualVariables := reg.FindAllString(issueDetailsPanelHtml, -1)\n\tslices.Sort(actualVariables)\n\tactualVariables = slices.Compact(actualVariables)\n\n\tassert.Equal(t, expectedVariables, actualVariables)\n\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issueAdditionalData.Name))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issue.ID))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issueAdditionalData.Title))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, issue.Severity.String()))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, strings.Join(issueAdditionalData.From, \" &gt; \")))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, strings.Join(issue2.From, \" &gt; \")))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"<li>list</li>\"))\n\tassert.False(t, strings.Contains(issueDetailsPanelHtml, \"Learn about this issue type\"))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"...and\"))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P\"))\n}\n\nfunc Test_OssDetailsPanel_html_withAnnotationsPolicy(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\n\t// Arrange\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t\tAppliedPolicyRules: snyk.AppliedPolicyRules{\n\t\t\tAnnotation: snyk.Annotation{\n\t\t\t\tValue:  \"This vulnerability was overridden to low severity due to our internal risk assessment that determined it poses minimal risk in our environment.\",\n\t\t\t\tReason: \"Our application does not use the affected functionality in a way that exposes it to the vulnerability. Therefore, it has a lower priority for fixing compared to other issues.\",\n\t\t\t},\n\t\t},\n\t}\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Low,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\t// Act\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\t// Assert\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"User note\"))\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"Note reason\"))\n}\n\nfunc Test_OssDetailsPanel_html_withSeverityChangePolicy(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\n\t// Arrange\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t\tAppliedPolicyRules: snyk.AppliedPolicyRules{\n\t\t\tSeverityChange: snyk.SeverityChange{\n\t\t\t\tOriginalSeverity: types.Critical.String(),\n\t\t\t\tNewSeverity:      types.Low.String(),\n\t\t\t\tReason:           \"Changing severity to low due to internal risk assessment.\",\n\t\t\t},\n\t\t},\n\t}\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Low,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\t// Act\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\t// Assert\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"A policy has affected the severity of this issue. It was originally critical severity\"))\n}\nfunc Test_OssDetailsPanel_html_hasCSS(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\n\tissueAdditionalData := snyk.OssIssueData{\n\t\tTitle:       \"myTitle\",\n\t\tName:        \"myIssue\",\n\t\tDescription: \"- list\",\n\t\tFrom:        []string{\"1\", \"2\", \"3\", \"4\"},\n\t\tCVSSv3:      \"CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P\",\n\t}\n\n\tissueAdditionalData.MatchingIssues = append(issueAdditionalData.MatchingIssues, issueAdditionalData)\n\n\tissue := &snyk.Issue{\n\t\tID:             \"randomId\",\n\t\tSeverity:       types.Critical,\n\t\tAdditionalData: issueAdditionalData,\n\t}\n\n\t// invoke methode under test\n\thtmlRenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\tissueDetailsPanelHtml := htmlRenderer.GetDetailsHtml(issue)\n\n\t// check if styles are present\n\tassert.True(t, strings.Contains(issueDetailsPanelHtml, \"--default-font: \\\"SF Pro Text\\\", \\\"Segoe UI\\\", \\\"Ubuntu\\\", Geneva, Verdana, Tahoma, sans-serif;\\n\"))\n}\n\nfunc TestRenderOssDetailsPanelWithoutLearnLinks(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\texpectedVars := []string{\"${headerEnd}\", \"${cspSource}\", \"${ideStyle}\", \"${nonce}\"}\n\tslices.Sort(expectedVars)\n\n\tossData := snyk.OssIssueData{\n\t\tTitle:       \"testTitle\",\n\t\tName:        \"testIssue\",\n\t\tDescription: \"- test bullet\",\n\t\tFrom:        []string{\"a\", \"b\", \"c\", \"d\"},\n\t}\n\n\tsecondIssue := snyk.OssIssueData{\n\t\tTitle:       \"secondTitle\",\n\t\tName:        \"secondIssue\",\n\t\tDescription: \"- second bullet\",\n\t\tFrom:        []string{\"e\", \"f\", \"g\", \"h\"},\n\t}\n\n\tossData.MatchingIssues = append(ossData.MatchingIssues, ossData)\n\tossData.MatchingIssues = append(ossData.MatchingIssues, secondIssue)\n\n\ttestIssue := &snyk.Issue{\n\t\tID:             \"testId123\",\n\t\tSeverity:       types.High,\n\t\tAdditionalData: ossData,\n\t}\n\n\t// Slightly different implementation compared to the original test\n\trenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\thtmlOutput := renderer.GetDetailsHtml(testIssue)\n\n\t// Different regex pattern\n\tpattern := regexp.MustCompile(`\\$\\{(\\w+)\\}`)\n\tmatches := pattern.FindAllStringSubmatch(htmlOutput, -1)\n\t\n\tvar vars []string\n\tfor _, match := range matches {\n\t\tvars = append(vars, \"${\"+match[1]+\"}\")\n\t}\n\tslices.Sort(vars)\n\tvars = slices.Compact(vars)\n\n\tassert.Equal(t, expectedVars, vars)\n\tassert.Contains(t, htmlOutput, ossData.Name)\n\tassert.Contains(t, htmlOutput, testIssue.ID)\n\tassert.Contains(t, htmlOutput, testIssue.Severity.String())\n\tassert.NotContains(t, htmlOutput, \"Learn about this issue type\")\n}\n\nfunc TestVerifyHtmlOutputForOssIssueWithEducationalLinks(t *testing.T) {\n\tc := testutil.UnitTest(t)\n\n\t// Different data setup compared to the original test\n\tdata := snyk.OssIssueData{\n\t\tTitle:       \"Security Issue\",\n\t\tName:        \"vulnerable-package\",\n\t\tDescription: \"This is a critical security issue\",\n\t\tFrom:        []string{\"root\", \"package\", \"dependency\"},\n\t\tLesson:      \"https://learn.snyk.io/lesson/security\",\n\t\tMatchingIssues: []snyk.OssIssueData{\n\t\t\t{\n\t\t\t\tFrom: []string{\"root\", \"package\", \"dependency\"},\n\t\t\t},\n\t\t},\n\t}\n\n\tissue := &snyk.Issue{\n\t\tID:             \"VULN-123\",\n\t\tSeverity:       types.Medium,\n\t\tAdditionalData: data,\n\t}\n\n\t// Using a different approach to render\n\trenderer, err := NewHtmlRenderer(c)\n\tassert.NoError(t, err)\n\thtml := renderer.GetDetailsHtml(issue)\n\n\t// Different assertion method\n\tif !strings.Contains(html, \"Learn about this issue type\") {\n\t\tt.Error(\"Expected educational link to be present in HTML output\")\n\t}\n\t\n\t// Additional assertion not present in original test\n\tassert.Contains(t, html, \"https://learn.snyk.io/lesson/security\")\n}"
