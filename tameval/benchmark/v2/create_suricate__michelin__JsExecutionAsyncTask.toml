[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "michelin/suricate"
sha = "9a15fd2f6de4e3fced8deb8f60160c43e27ba492"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=JsExecutionAsyncTaskTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.JsExecutionAsyncTask  -DtargetTests=**.JsExecutionAsyncTaskTest  -DoutputFormats=XML"
coverage_report_path = "target/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 77.0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 50, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 90, 93, 95, 102, 105, 107, 109, 111, 112, 115, 117, 122, 125, 126, 128, 129, 130, 131, 132, 133, 136, 137, 141, 146, 148, 151, 152, 154, 158, 159, 160, 161, 164, 165, 168, 177, 178, 179, 181, 186, 194, 206, 216, 217, 219,]
missed_lines = [ 97, 98, 99, 118, 119, 120, 142, 144, 180, 182, 184, 195, 196, 197, 198, 200, 201, 204,]

[input_info]
test_file_path = "src/test/java/com/michelin/suricate/service/js/task/JsExecutionAsyncTaskTest.java"
focal_file_path = "src/main/java/com/michelin/suricate/service/js/task/JsExecutionAsyncTask.java"
test_file_url = "https://github.com/michelin/suricate/blob/9a15fd2f6de4e3fced8deb8f60160c43e27ba492/src/test/java/com/michelin/suricate/service/js/task/JsExecutionAsyncTaskTest.java"
focal_file_url = "https://github.com/michelin/suricate/blob/9a15fd2f6de4e3fced8deb8f60160c43e27ba492/src/main/java/com/michelin/suricate/service/js/task/JsExecutionAsyncTask.java"
first_commit_date = "2024-04-07"
last_commit_date = "2025-03-12"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage com.michelin.suricate.service.js.task;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport com.michelin.suricate.model.dto.js.JsExecutionDto;\nimport com.michelin.suricate.model.dto.js.JsResultDto;\nimport com.michelin.suricate.model.dto.js.WidgetVariableResponseDto;\nimport com.michelin.suricate.model.enumeration.DataTypeEnum;\nimport com.michelin.suricate.model.enumeration.JsExecutionErrorTypeEnum;\nimport com.michelin.suricate.util.exception.js.FatalException;\nimport com.michelin.suricate.util.exception.js.RemoteException;\nimport java.net.ConnectException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport org.jasypt.encryption.pbe.PooledPBEStringEncryptor;\nimport org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;\nimport org.jetbrains.annotations.NotNull;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\nclass JsExecutionAsyncTaskTest {\n    @ParameterizedTest\n    @CsvSource({\n        \"badScript,ReferenceError: badScript is not defined\",\n        \"function test() {},No run function defined\",\n        \"function run() {},The JSON response is not valid - null\",\n        \"function run () { var file = Java.type('java.io.File'); file.listRoots(); return '{}'},\"\n                + \"TypeError: Access to host class java.io.File is not allowed or does not exist.\"\n    })\n    void shouldFail(String script, String expectedLogs) {\n        JsExecutionDto jsExecutionDto = new JsExecutionDto();\n        jsExecutionDto.setProjectId(1L);\n        jsExecutionDto.setProjectWidgetId(1L);\n        jsExecutionDto.setDelay(0L);\n        jsExecutionDto.setPreviousData(null);\n        jsExecutionDto.setScript(script);\n\n        JsExecutionAsyncTask task = new JsExecutionAsyncTask(jsExecutionDto, null, Collections.emptyList());\n        JsResultDto actual = task.call();\n\n        assertTrue(actual.isFatal());\n        assertEquals(expectedLogs, actual.getLog());\n    }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"function run() {},The JSON response is not valid - null\",\n        \"function run () { Packages.throwError(); return '{}'},Error\",\n        \"function run () { Packages.throwTimeout(); return '{}'},Timeout\"\n    })\n    void shouldFailWithErrorBecauseBadReturn(String script, String expectedLogs) {\n        JsExecutionDto jsExecutionDto = new JsExecutionDto();\n        jsExecutionDto.setProjectId(1L);\n        jsExecutionDto.setProjectWidgetId(1L);\n        jsExecutionDto.setDelay(0L);\n        jsExecutionDto.setPreviousData(null);\n        jsExecutionDto.setAlreadySuccess(true);\n        jsExecutionDto.setScript(script);\n\n        JsExecutionAsyncTask task = new JsExecutionAsyncTask(jsExecutionDto, null, Collections.emptyList());\n        JsResultDto actual = task.call();\n\n        assertEquals(JsExecutionErrorTypeEnum.ERROR, actual.getError());\n        assertEquals(expectedLogs, actual.getLog());\n    }\n\n\n\n\n\n\n    @Test\n    void shouldFailWithEncryptedVars() {\n        WidgetVariableResponseDto widgetParameter = new WidgetVariableResponseDto();\n        widgetParameter.setName(\"SURI_SECRET\");\n        widgetParameter.setDescription(\"title\");\n        widgetParameter.setType(DataTypeEnum.PASSWORD);\n        widgetParameter.setRequired(true);\n\n        List<WidgetVariableResponseDto> widgetParameters = new ArrayList<>();\n        widgetParameters.add(widgetParameter);\n\n        JsExecutionDto jsExecutionDto = new JsExecutionDto();\n        jsExecutionDto.setProjectId(1L);\n        jsExecutionDto.setProjectWidgetId(1L);\n        jsExecutionDto.setDelay(0L);\n        jsExecutionDto.setPreviousData(null);\n        jsExecutionDto.setProperties(\"SURI_SECRET=test\");\n        jsExecutionDto.setScript(\"function run () { print(SURI_SECRET); return '{}'}\");\n\n        PooledPBEStringEncryptor encryptor = getPooledPbeStringEncryptor();\n        JsExecutionAsyncTask task = new JsExecutionAsyncTask(jsExecutionDto, encryptor, widgetParameters);\n        JsResultDto actual = task.call();\n\n        assertTrue(actual.isFatal());\n        assertEquals(\"org.jasypt.exceptions.EncryptionOperationNotPossibleException\", actual.getLog());\n    }\n\n    @Test\n    void shouldBeFatalErrorOrNot() {\n        JsExecutionDto jsExecutionDto = new JsExecutionDto();\n        JsExecutionAsyncTask task = new JsExecutionAsyncTask(jsExecutionDto, null, Collections.emptyList());\n\n        assertTrue(task.isFatalError(new Exception(\"\"), new Exception(\"\")));\n        assertTrue(task.isFatalError(new Exception(\"Error on server\"), new Exception(\"Error on server\")));\n        assertFalse(task.isFatalError(new Exception(\"timeoutException\"), new Exception(\"\")));\n        assertFalse(task.isFatalError(new Exception(\"timeoutException\"), new FatalException(\"\")));\n        assertFalse(task.isFatalError(new Exception(\"timeout:\"), new IllegalArgumentException(\"\")));\n        assertFalse(task.isFatalError(new Exception(\"Error on server\"), new RemoteException(\"Error on server\")));\n        assertFalse(task.isFatalError(new Exception(\"Error on server\"), new UnknownHostException(\"Error on server\")));\n\n        jsExecutionDto.setAlreadySuccess(true);\n\n        assertFalse(task.isFatalError(new Exception(\"\"), new Exception(\"\")));\n        assertFalse(task.isFatalError(new Exception(\"timeoutException\"), new Exception(\"\")));\n        assertFalse(task.isFatalError(new Exception(\"timeoutException\"), new FatalException(\"\")));\n        assertFalse(task.isFatalError(new Exception(\"Error on server\"), new RemoteException(\"Error on server\")));\n        assertFalse(task.isFatalError(new Exception(\"Error on server\"), new Exception(\"Error on server\")));\n        assertFalse(task.isFatalError(new ConnectException(\"Connection error\"), new IllegalArgumentException()));\n    }\n\n    @NotNull private static PooledPBEStringEncryptor getPooledPbeStringEncryptor() {\n        SimpleStringPBEConfig config = new SimpleStringPBEConfig();\n        config.setPassword(\"password\");\n        config.setAlgorithm(\"PBEWithMD5AndDES\");\n        config.setKeyObtentionIterations(\"1000\");\n        config.setPoolSize(\"1\");\n        config.setProviderName(\"SunJCE\");\n        config.setSaltGeneratorClassName(\"org.jasypt.salt.RandomSaltGenerator\");\n        config.setStringOutputType(\"base64\");\n        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();\n        encryptor.setConfig(config);\n        return encryptor;\n    }\n}\n"
