[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "stevespringett/Alpine"
sha = "bb816e4e9040a0d0fe7a7b2d39c9142933fd88af"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl alpine-model -Dtest=MappedLdapGroupTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl alpine-model -DtargetClasses=**.MappedLdapGroup  -DtargetTests=**.MappedLdapGroupTest  -DoutputFormats=XML"
coverage_report_path = "alpine-model/target/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "alpine-model/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "alpine-model/src/test/java/alpine/model/MappedLdapGroupTest.java"
focal_file_path = "alpine-model/src/main/java/alpine/model/MappedLdapGroup.java"
test_file_url = "https://github.com/stevespringett/Alpine/blob/bb816e4e9040a0d0fe7a7b2d39c9142933fd88af/alpine-model/src/test/java/alpine/model/MappedLdapGroupTest.java"
focal_file_url = "https://github.com/stevespringett/Alpine/blob/bb816e4e9040a0d0fe7a7b2d39c9142933fd88af/alpine-model/src/main/java/alpine/model/MappedLdapGroup.java"
first_commit_date = "2022-02-24"
last_commit_date = "2024-05-17"
test_file_content = "/*\n * This file is part of Alpine.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * SPDX-License-Identifier: Apache-2.0\n * Copyright (c) Steve Springett. All Rights Reserved.\n */\npackage alpine.model;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.UUID;\n\npublic class MappedLdapGroupTest {\n\n    @Test\n    public void idTest() {\n        MappedLdapGroup mapping = new MappedLdapGroup();\n        mapping.setId(123L);\n        Assert.assertEquals(123L, mapping.getId());\n    }\n\n    @Test\n    public void teamTest() {\n        Team team = new Team();\n        MappedLdapGroup mapping = new MappedLdapGroup();\n        mapping.setTeam(team);\n        Assert.assertEquals(team, mapping.getTeam());\n    }\n\n    @Test\n    public void dnTest() {\n        MappedLdapGroup mapping = new MappedLdapGroup();\n        mapping.setDn(\"cn=TeamA,ou=groups,o=example.com\");\n        Assert.assertEquals(\"cn=TeamA,ou=groups,o=example.com\", mapping.getDn());\n    }\n\n    @Test\n    public void uuidTest() {\n        UUID uuid = UUID.randomUUID();\n        MappedLdapGroup mapping = new MappedLdapGroup();\n        mapping.setUuid(uuid);\n        Assert.assertEquals(uuid, mapping.getUuid());\n    }\n}"
