[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "open-thought/reasoning-gym"
sha = "02b7fac86358f7ef6239608b0b738a5a03ecfe9e"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements-dev.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=reasoning_gym/graphs/largest_island.py -m pytest -q --junit-xml=test_output.xml tests/test_largest_island.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target reasoning_gym.graphs.largest_island --unit-test tests.test_largest_island --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target reasoning_gym/graphs/largest_island.py --unit-test tests/test_largest_island.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 99.0
original_coverage = 99.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 6, 7, 8, 9, 11, 12, 14, 25, 28, 29, 32, 33, 34, 35, 36, 37, 40, 41, 45, 46, 48, 50, 51, 52, 53, 56, 59, 60, 62, 63, 65, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 87, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 108, 109, 111, 112, 113, 114, 115, 117, 119, 121, 123, 127, 129, 131, 132, 133, 134, 135, 137, 139, 157, 158, 159, 162, 194,]
missed_lines = [ 125,]

[input_info]
test_file_path = "tests/test_largest_island.py"
focal_file_path = "reasoning_gym/graphs/largest_island.py"
test_file_url = "https://github.com/open-thought/reasoning-gym/blob/02b7fac86358f7ef6239608b0b738a5a03ecfe9e/tests/test_largest_island.py"
focal_file_url = "https://github.com/open-thought/reasoning-gym/blob/02b7fac86358f7ef6239608b0b738a5a03ecfe9e/reasoning_gym/graphs/largest_island.py"
first_commit_date = "2025-02-03"
last_commit_date = "2025-04-04"
test_file_content = "\"\"\"Tests for Largest Island puzzle generation\"\"\"\n\nimport pytest\n\nfrom reasoning_gym.graphs.largest_island import LargestIslandConfig, LargestIslandCurriculum, LargestIslandDataset\n\n\ndef test_largest_island_config_validation():\n    \"\"\"Test that invalid configs raise appropriate errors\"\"\"\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_rows=0)  # 0 not allowed\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_cols=0)  # 0 not allowed\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_rows=10, max_rows=5)  # min > max\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_cols=10, max_cols=5)  # min > max\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_num_islands=-1)  # neg not allowed\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_island_size=-1)  # neg not allowed\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_num_islands=5, max_num_islands=3)  # min > max\n        config.validate()\n\n    with pytest.raises(AssertionError):\n        config = LargestIslandConfig(min_island_size=5, max_island_size=3)  # min > max\n        config.validate()\n\n\ndef test_largest_island_dataset_deterministic():\n    \"\"\"Test that dataset generates same items with same seed\"\"\"\n    config = LargestIslandConfig(seed=42, size=10)\n    dataset1 = LargestIslandDataset(config)\n    dataset2 = LargestIslandDataset(config)\n\n    for i in range(len(dataset1)):\n        assert dataset1[i] == dataset2[i]\n\n\ndef test_largest_island_dataset_items():\n    \"\"\"Test basic properties of generated items\"\"\"\n    config = LargestIslandConfig(\n        min_rows=5,\n        max_rows=10,\n        min_cols=5,\n        max_cols=10,\n        size=10,\n        seed=42,\n    )\n    dataset = LargestIslandDataset(config)\n\n    for i in range(len(dataset)):\n        item = dataset[i]\n        # Check item structure\n        assert isinstance(item, dict)\n        assert \"question\" in item\n        assert \"answer\" in item\n        assert \"metadata\" in item\n\n        # Check metadata\n        assert \"grid\" in item[\"metadata\"]\n        assert \"solution\" in item[\"metadata\"]\n\n        grid = item[\"metadata\"][\"grid\"]\n\n        # Verify grid dimensions\n        assert 5 <= len(grid) <= 10\n        assert all(0 <= len(row) <= 10 for row in grid)\n\n\ndef test_largest_island_dataset_iteration():\n    \"\"\"Test that iteration respects dataset size\"\"\"\n    config = LargestIslandConfig(size=5, seed=42)\n    dataset = LargestIslandDataset(config)\n\n    items = list(dataset)\n    assert len(items) == config.size\n\n    # Test multiple iterations yield same items\n    assert items == list(dataset)\n\n\ndef test_largest_island_grid_generation():\n    \"\"\"Test that generated grids are valid\"\"\"\n    config = LargestIslandConfig(size=5, seed=42)\n    dataset = LargestIslandDataset(config)\n\n    for i in range(len(dataset)):\n        item = dataset[i]\n        for row in item[\"metadata\"][\"grid\"]:\n            assert all(cell in {0, 1} for cell in row)\n\n\ndef test_largest_island_answer():\n    \"\"\"Test the _get_largest_island method\"\"\"\n    config = LargestIslandConfig(seed=42)\n    dataset = LargestIslandDataset(config)\n\n    grid = [\n        [1, 1, 0, 0, 0],\n        [1, 0, 0, 0, 1],\n        [0, 0, 0, 1, 1],\n        [0, 0, 0, 1, 1],\n        [0, 0, 0, 1, 1],\n    ]\n    assert dataset._get_largest_island(grid) == 7\n\n    # Test empty grid\n    grid = [\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0],\n    ]\n    assert dataset._get_largest_island(grid) == 0\n\n    # Test neighboring grids are only horizontally or vertically connected (not diagonally)\n    grid = [\n        [1, 1, 1, 0, 0],\n        [1, 1, 1, 0, 0],\n        [1, 1, 1, 0, 0],\n        [0, 0, 0, 1, 1],\n        [0, 0, 0, 1, 1],\n    ]\n    assert dataset._get_largest_island(grid) == 9\n\n\ndef test_largest_island_curriculum():\n    curriculum = LargestIslandCurriculum()\n\n    base_value = {\"size\": 150, \"seed\": 1}\n\n    base_cfg: LargestIslandConfig = curriculum.generate_configuration(base_value)\n    assert base_cfg.seed == 1\n    assert base_cfg.size == 150\n    assert base_cfg.min_rows == 5 and base_cfg.max_rows == 5\n    assert base_cfg.min_cols == 5 and base_cfg.max_cols == 5\n    assert base_cfg.min_num_islands == 2 and base_cfg.max_num_islands == 2\n    assert base_cfg.min_island_size == 5 and base_cfg.max_island_size == 5\n\n    # test incrementing attribute levels\n    curriculum.increment_attr_level(\"rows\")\n    curriculum.increment_attr_level(\"cols\")\n    curriculum.increment_attr_level(\"num_islands\")\n    curriculum.increment_attr_level(\"island_size\")\n    increased_cfg = curriculum.generate_configuration(base_value)\n    assert increased_cfg.min_rows == 5 and increased_cfg.max_rows == 25\n    assert increased_cfg.min_cols == 5 and increased_cfg.max_cols == 25\n    assert increased_cfg.min_num_islands == 2 and increased_cfg.max_num_islands == 5\n    assert increased_cfg.min_island_size == 5 and increased_cfg.max_island_size == 10\n\n    # test decrementing attribute level for num_islands again\n    curriculum.decrement_attr_level(\"num_islands\")\n    partially_decreased_cfg = curriculum.generate_configuration(base_value)\n    assert partially_decreased_cfg.min_rows == 5 and partially_decreased_cfg.max_rows == 25\n    assert partially_decreased_cfg.min_cols == 5 and partially_decreased_cfg.max_cols == 25\n    assert partially_decreased_cfg.min_num_islands == 2 and partially_decreased_cfg.max_num_islands == 2\n    assert partially_decreased_cfg.min_island_size == 5 and partially_decreased_cfg.max_island_size == 10\n"
