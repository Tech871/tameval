[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "reflex-dev/reflex"
sha = "7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=reflex/components/core/cond.py -m pytest -q --junit-xml=test_output.xml tests/units/components/core/test_cond.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target reflex.components.core.cond --unit-test tests.units.components.core.test_cond --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target reflex/components/core/cond.py --unit-test tests/units/components/core/test_cond.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 84.0
original_coverage = 87.0
mutation_kill_rate = 0
original_mutation_kill_rate = 59.0
covered_lines = [ 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 26, 28, 29, 46, 47, 48, 49, 54, 61, 68, 74, 80, 109, 124, 125, 130, 131, 133, 137, 138, 139, 140, 141, 144, 145, 147, 148, 151, 166,]
missed_lines = [ 62, 86, 88, 90, 126, 127, 132, 176,]

[input_info]
test_file_path = "tests/units/components/core/test_cond.py"
focal_file_path = "reflex/components/core/cond.py"
test_file_url = "https://github.com/reflex-dev/reflex/blob/7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788/tests/units/components/core/test_cond.py"
focal_file_url = "https://github.com/reflex-dev/reflex/blob/7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788/reflex/components/core/cond.py"
first_commit_date = "2023-12-21"
last_commit_date = "2025-07-31"
test_file_content = "import json\nfrom typing import Any\n\nimport pytest\n\nfrom reflex.components.base.fragment import Fragment\nfrom reflex.components.core.cond import Cond, cond\nfrom reflex.components.radix.themes.typography.text import Text\nfrom reflex.constants.state import FIELD_MARKER\nfrom reflex.state import BaseState\nfrom reflex.utils.format import format_state_name\nfrom reflex.vars.base import LiteralVar, Var, computed_var\n\n\n@pytest.fixture\ndef cond_state(request):\n    class CondState(BaseState):\n        value: request.param[\"value_type\"] = request.param[\"value\"]\n\n    return CondState\n\n\ndef test_f_string_cond_interpolation():\n    var = LiteralVar.create(f\"x {cond(True, 'a', 'b')}\")\n\n\n@pytest.mark.parametrize(\n    \"cond_state\",\n    [\n        pytest.param({\"value_type\": bool, \"value\": True}),\n        pytest.param({\"value_type\": int, \"value\": 0}),\n        pytest.param({\"value_type\": str, \"value\": \"true\"}),\n    ],\n    indirect=True,\n)\ndef test_validate_cond(cond_state: BaseState):\n    cond_component = cond(\n        cond_state.value,\n        Text.create(\"cond is True\"),\n        Text.create(\"cond is False\"),\n    )\n    cond_dict = cond_component.render() if type(cond_component) is Fragment else {}\n\n    [condition] = cond_dict[\"children\"]\n    true_value = condition[\"true_value\"]\n\n    [true_value_text] = true_value[\"children\"]\n    false_value = condition[\"false_value\"]\n\n    [false_value_text] = false_value[\"children\"]\n\n\n@pytest.mark.parametrize(\n    (\"c1\", \"c2\"),\n    [\n        (True, False),\n        (32, 0),\n        (\"hello\", \"\"),\n        (2.3, 0.0),\n        (LiteralVar.create(\"a\"), LiteralVar.create(\"b\")),\n    ],\n)\ndef test_prop_cond(c1: Any, c2: Any):\n    prop_cond = cond(\n        True,\n        c1,\n        c2,\n    )\n\n    if not isinstance(c1, Var):\n        c1 = json.dumps(c1)\n    if not isinstance(c2, Var):\n        c2 = json.dumps(c2)\n\n\ndef test_cond_no_mix():\n    cond(True, LiteralVar.create(\"hello\"), Text.create(\"world\"))\n\n\ndef test_cond_no_else():\n    comp = cond(True, Text.create(\"hello\"))\n    comp = comp.children[0]\n    with pytest.raises(ValueError):\n        cond(True, \"hello\")\n\n\ndef test_cond_computed_var():\n\n    class CondStateComputed(BaseState):\n        @computed_var\n        def computed_int(self) -> int:\n            return 0\n\n        @computed_var\n        def computed_str(self) -> str:\n            return \"a string\"\n\n    comp = cond(True, CondStateComputed.computed_int, CondStateComputed.computed_str)\n\n    state_name = format_state_name(CondStateComputed.get_full_name())"
