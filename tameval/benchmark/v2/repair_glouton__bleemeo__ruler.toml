[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "bleemeo/glouton"
sha = "61a5ed8e7e659a6e865a183aaa1328e85efdaab1"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out prometheus/registry/internal/ruler/ruler.go prometheus/registry/internal/ruler/ruler_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting prometheus/registry/internal/ruler/ruler.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 92.0
original_coverage = 92.0
mutation_kill_rate = 0
original_mutation_kill_rate = 51.0
covered_lines = [ 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 95, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 152, 153, 154, 155, 156, 160, 161, 162, 164,]
missed_lines = [ 96, 97, 98, 118, 119, 120, 121,]

[input_info]
test_file_path = "prometheus/registry/internal/ruler/ruler_test.go"
focal_file_path = "prometheus/registry/internal/ruler/ruler.go"
test_file_url = "https://github.com/bleemeo/glouton/blob/61a5ed8e7e659a6e865a183aaa1328e85efdaab1/prometheus/registry/internal/ruler/ruler_test.go"
focal_file_url = "https://github.com/bleemeo/glouton/blob/61a5ed8e7e659a6e865a183aaa1328e85efdaab1/prometheus/registry/internal/ruler/ruler.go"
first_commit_date = "2021-12-10"
last_commit_date = "2025-07-31"
test_file_content = "\n\npackage ruler\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/bleemeo/glouton/prometheus/matcher\"\n\t\"github.com/bleemeo/glouton/types\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n\tdto \"github.com/prometheus/client_model/go\"\n\t\"github.com/prometheus/prometheus/model/labels\"\n\t\"github.com/prometheus/prometheus/promql/parser\"\n\t\"github.com/prometheus/prometheus/rules\"\n\t\"google.golang.org/protobuf/proto\"\n)\n\nfunc TestApplyRulesMFS(t *testing.T) {\n\tt0 := time.Date(2024, time.January, 3, 15, 0, 0, 0, time.Local)\n\tnow := t0.Add(5 * time.Minute)\n\n\tmfs := []*dto.MetricFamily{\n\t\t{\n\t\t\tName: proto.String(\"ifInOctets\"),\n\t\t\tType: dto.MetricType_UNTYPED.Enum(),\n\t\t\tMetric: []*dto.Metric{\n\t\t\t\t{\n\t\t\t\t\tLabel: []*dto.LabelPair{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"__name__\"),\n\t\t\t\t\t\t\tValue: proto.String(\"ifInOctets\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifDescr\"),\n\t\t\t\t\t\t\tValue: proto.String(\"LOOPBACK\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifType\"),\n\t\t\t\t\t\t\tValue: proto.String(\"softwareLoopback\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUntyped:     &dto.Untyped{Value: proto.Float64(712799268)},\n\t\t\t\t\tTimestampMs: proto.Int64(t0.Add(1 * time.Minute).UnixMilli()),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tLabel: []*dto.LabelPair{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"__name__\"),\n\t\t\t\t\t\t\tValue: proto.String(\"ifInOctets\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifDescr\"),\n\t\t\t\t\t\t\tValue: proto.String(\"LOOPBACK\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifType\"),\n\t\t\t\t\t\t\tValue: proto.String(\"softwareLoopback\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUntyped:     &dto.Untyped{Value: proto.Float64(712896866)},\n\t\t\t\t\tTimestampMs: proto.Int64(t0.Add(2 * time.Minute).UnixMilli()),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tLabel: []*dto.LabelPair{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"__name__\"),\n\t\t\t\t\t\t\tValue: proto.String(\"ifInOctets\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifDescr\"),\n\t\t\t\t\t\t\tValue: proto.String(\"LOOPBACK\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifType\"),\n\t\t\t\t\t\t\tValue: proto.String(\"softwareLoopback\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUntyped:     &dto.Untyped{Value: proto.Float64(713012717)},\n\t\t\t\t\tTimestampMs: proto.Int64(t0.Add(3 * time.Minute).UnixMilli()),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tLabel: []*dto.LabelPair{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"__name__\"),\n\t\t\t\t\t\t\tValue: proto.String(\"ifInOctets\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifDescr\"),\n\t\t\t\t\t\t\tValue: proto.String(\"LOOPBACK\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifType\"),\n\t\t\t\t\t\t\tValue: proto.String(\"softwareLoopback\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUntyped:     &dto.Untyped{Value: proto.Float64(713098262)},\n\t\t\t\t\tTimestampMs: proto.Int64(t0.Add(4 * time.Minute).UnixMilli()),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tLabel: []*dto.LabelPair{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"__name__\"),\n\t\t\t\t\t\t\tValue: proto.String(\"ifInOctets\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifDescr\"),\n\t\t\t\t\t\t\tValue: proto.String(\"LOOPBACK\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifType\"),\n\t\t\t\t\t\t\tValue: proto.String(\"softwareLoopback\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUntyped:     &dto.Untyped{Value: proto.Float64(713201880)},\n\t\t\t\t\tTimestampMs: proto.Int64(t0.Add(5 * time.Minute).UnixMilli()),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\texpectedMfs := []*dto.MetricFamily{\n\t\t{\n\t\t\tName: proto.String(\"net_bits_recv\"),\n\t\t\tHelp: proto.String(\"\"),\n\t\t\tType: dto.MetricType_UNTYPED.Enum(),\n\t\t\tMetric: []*dto.Metric{\n\t\t\t\t{\n\t\t\t\t\tLabel: []*dto.LabelPair{\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifDescr\"),\n\t\t\t\t\t\t\tValue: proto.String(\"LOOPBACK\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tName:  proto.String(\"ifType\"),\n\t\t\t\t\t\t\tValue: proto.String(\"softwareLoopback\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tUntyped:     &dto.Untyped{Value: proto.Float64(13556.177777777777)},\n\t\t\t\t\tTimestampMs: proto.Int64(now.UnixMilli()),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tsimpleRules := []types.SimpleRule{\n\t\t{\n\t\t\tTargetName:  \"net_bits_recv\",\n\t\t\tPromQLQuery: \"rate(ifInOctets[4m])*8\",\n\t\t},\n\t}\n\n\trrules := make([]*rules.RecordingRule, len(simpleRules))\n\n\tfor i, sr := range simpleRules {\n\t\texpr, err := parser.ParseExpr(sr.PromQLQuery)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"rule %s: %v\", sr.TargetName, err)\n\t\t}\n\n\t\trrules[i] = rules.NewRecordingRule(sr.TargetName, expr, labels.EmptyLabels())\n\t}\n\n\truler := New(rrules)\n\tctx := t.Context()\n\n\tresultMfs := ruler.ApplyRulesMFS(ctx, now, mfs)\n\n\tignoreOpts := cmpopts.IgnoreUnexported(dto.MetricFamily{}, dto.Metric{}, dto.LabelPair{}, dto.Untyped{})\n\tif diff := cmp.Diff(append(mfs, expectedMfs...), resultMfs, ignoreOpts); diff != \"\" {\n\t\tt.Fatalf(\"Unexpected result mfs:\\n%v\", diff)\n\t}\n}\n\nfunc Test_filterPointsForRules(t *testing.T) {\n\tpoints := []types.MetricPoint{\n\t\t{\n\t\t\tLabels: map[string]string{\n\t\t\t\ttypes.LabelName: \"cpu_used\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tLabels: map[string]string{\n\t\t\t\ttypes.LabelName: \"disk_used\",\n\t\t\t\ttypes.LabelItem: \"/home\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tLabels: map[string]string{\n\t\t\t\ttypes.LabelName: \"disk_used\",\n\t\t\t\ttypes.LabelItem: \"/srv\",\n\t\t\t},\n\t\t},\n\t}\n\n\ttests := []struct {\n\t\tname     string\n\t\tpoints   []types.MetricPoint\n\t\tmatchers []matcher.Matchers\n\t\twant     []types.MetricPoint\n\t}{\n\t\t{\n\t\t\tname:     \"nil-matchers\",\n\t\t\tmatchers: nil,\n\t\t\tpoints:   points,\n\t\t\twant:     []types.MetricPoint{},\n\t\t},\n\t\t{\n\t\t\tname:     \"empty-matchers\",\n\t\t\tmatchers: []matcher.Matchers{},\n\t\t\tpoints:   points,\n\t\t\twant:     []types.MetricPoint{},\n\t\t},\n\t\t{\n\t\t\tname: \"simple\",\n\t\t\tmatchers: []matcher.Matchers{\n\t\t\t\t{\n\t\t\t\t\tlabels.MustNewMatcher(labels.MatchEqual, types.LabelName, \"cpu_used\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tpoints: points,\n\t\t\twant: []types.MetricPoint{\n\t\t\t\t{\n\t\t\t\t\tLabels: map[string]string{\n\t\t\t\t\t\ttypes.LabelName: \"cpu_used\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"with-labels\",\n\t\t\tmatchers: []matcher.Matchers{\n\t\t\t\t{\n\t\t\t\t\tlabels.MustNewMatcher(labels.MatchEqual, types.LabelName, \"disk_used\"),\n\t\t\t\t\tlabels.MustNewMatcher(labels.MatchEqual, types.LabelItem, \"/home\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tpoints: points,\n\t\t\twant: []types.MetricPoint{\n\t\t\t\t{\n\t\t\t\t\tLabels: map[string]string{\n\t\t\t\t\t\ttypes.LabelName: \"disk_used\",\n\t\t\t\t\t\ttypes.LabelItem: \"/home\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tpoints := make([]types.MetricPoint, len(tt.points))\n\t\t\tcopy(points, tt.points)\n\n\t\t\tgot := filterPointsForRules(points, tt.matchers)\n\n\t\t\tif diff := types.DiffMetricPoints(tt.want, got, false); diff != \"\" {\n\t\t\t\tt.Errorf(\"filterPointsForRules() mismatch (-want +got)\\n%s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}"
