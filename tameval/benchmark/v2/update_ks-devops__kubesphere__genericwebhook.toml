[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "kubesphere/ks-devops"
sha = "912f453210d5a51ed62b0b35c1073cd94f3601c2"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/client/devops/jenkins/triggers/genericwebhook.go pkg/client/devops/jenkins/triggers/genericwebhook_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/client/devops/jenkins/triggers/genericwebhook.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = 89.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/client/devops/jenkins/triggers/genericwebhook_test.go"
focal_file_path = "pkg/client/devops/jenkins/triggers/genericwebhook.go"
test_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/pkg/client/devops/jenkins/triggers/genericwebhook_test.go"
focal_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/pkg/client/devops/jenkins/triggers/genericwebhook.go"
first_commit_date = "2021-06-28"
last_commit_date = "2025-03-13"
test_file_content = "/*\nCopyright 2022 The KubeSphere Authors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage triggers\n\nimport (\n\t\"github.com/beevik/etree\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"kubesphere.io/devops/pkg/api/devops/v1alpha3\"\n\t\"reflect\"\n\t\"strconv\"\n\t\"testing\"\n)\n\nfunc TestCreateGenericWebhookXML(t *testing.T) {\n\tele := CreateGenericWebhookXML(nil, nil)\n\tassert.Nil(t, ele)\n\n\twebhook := v1alpha3.GenericWebhook{\n\t\tEnable:           true,\n\t\tToken:            \"token\",\n\t\tCause:            \"cause\",\n\t\tPrintPostContent: true,\n\t\tPrintVariables:   false,\n\t\tFilterText:       \"filterText\",\n\t\tFilterExpression: \"filterExpression\",\n\t\tHeaderVariables: []v1alpha3.GenericVariable{{\n\t\t\tKey:          \"key\",\n\t\t\tRegexpFilter: \"regexpFilter\",\n\t\t}},\n\t\tRequestVariables: []v1alpha3.GenericVariable{{\n\t\t\tKey:          \"key\",\n\t\t\tRegexpFilter: \"regexpFilter\",\n\t\t}},\n\t}\n\tele = CreateGenericWebhookXML(&etree.Element{}, &webhook)\n\tassert.NotNil(t, ele.SelectElement(\"spec\"), \"the element spec is mandatory\")\n\tassert.Equal(t, ele.Tag, \"org.jenkinsci.plugins.gwt.GenericTrigger\")\n\tassert.Equal(t, ele.SelectElement(\"token\").Text(), webhook.Token)\n\tassert.Equal(t, ele.SelectElement(\"causeString\").Text(), webhook.Cause)\n\tassert.Equal(t, ele.SelectElement(\"printContributedVariables\").Text(), strconv.FormatBool(webhook.PrintVariables))\n\tassert.Equal(t, ele.SelectElement(\"printPostContent\").Text(), strconv.FormatBool(webhook.PrintPostContent))\n\tassert.Equal(t, ele.SelectElement(\"regexpFilterText\").Text(), webhook.FilterText)\n\tassert.Equal(t, ele.SelectElement(\"regexpFilterExpression\").Text(), webhook.FilterExpression)\n\n\trequestVarsEle := ele.SelectElement(\"genericRequestVariables\").SelectElements(\"org.jenkinsci.plugins.gwt.GenericRequestVariable\")\n\tassert.Equal(t, len(requestVarsEle), len(webhook.RequestVariables))\n\tassert.Equal(t, requestVarsEle[0].SelectElement(\"key\").Text(), webhook.RequestVariables[0].Key)\n\tassert.Equal(t, requestVarsEle[0].SelectElement(\"regexpFilter\").Text(), webhook.RequestVariables[0].RegexpFilter)\n\n\theaderVarsEle := ele.SelectElement(\"genericHeaderVariables\").SelectElements(\"org.jenkinsci.plugins.gwt.GenericHeaderVariable\")\n\tassert.Equal(t, len(headerVarsEle), len(webhook.HeaderVariables))\n\tassert.Equal(t, headerVarsEle[0].SelectElement(\"key\").Text(), webhook.HeaderVariables[0].Key)\n\tassert.Equal(t, headerVarsEle[0].SelectElement(\"regexpFilter\").Text(), webhook.HeaderVariables[0].RegexpFilter)\n}\n\nfunc TestParseGenericWebhookXML(t *testing.T) {\n\ttype args struct {\n\t\tele *etree.Element\n\t}\n\ttests := []struct {\n\t\tname        string\n\t\targs        args\n\t\twantWebhook *v1alpha3.GenericWebhook\n\t}{{\n\t\tname: \"nil args, should return nil\",\n\t}, {\n\t\tname: \"normal case\",\n\t\targs: args{\n\t\t\tele: &etree.Element{\n\t\t\t\tTag: \"org.jenkinsci.plugins.gwt.GenericTrigger\",\n\t\t\t\tChild: []etree.Token{&etree.Element{\n\t\t\t\t\tTag: \"token\",\n\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\tData: \"token\",\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"printPostContent\",\n\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\tData: \"true\",\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"printContributedVariables\",\n\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\tData: \"true\",\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"causeString\",\n\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\tData: \"cause\",\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"regexpFilterText\",\n\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\tData: \"filterText\",\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"regexpFilterExpression\",\n\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\tData: \"filterExpression\",\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"genericRequestVariables\",\n\t\t\t\t\tChild: []etree.Token{&etree.Element{\n\t\t\t\t\t\tTag: \"org.jenkinsci.plugins.gwt.GenericRequestVariable\",\n\t\t\t\t\t\tChild: []etree.Token{&etree.Element{\n\t\t\t\t\t\t\tTag: \"key\",\n\t\t\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\t\t\tData: \"key\",\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t}, &etree.Element{\n\t\t\t\t\t\t\tTag: \"regexpFilter\",\n\t\t\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\t\t\tData: \"regexpFilter\",\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t}},\n\t\t\t\t\t}},\n\t\t\t\t}, &etree.Element{\n\t\t\t\t\tTag: \"genericHeaderVariables\",\n\t\t\t\t\tChild: []etree.Token{&etree.Element{\n\t\t\t\t\t\tTag: \"org.jenkinsci.plugins.gwt.GenericHeaderVariable\",\n\t\t\t\t\t\tChild: []etree.Token{&etree.Element{\n\t\t\t\t\t\t\tTag: \"key\",\n\t\t\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\t\t\tData: \"key\",\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t}, &etree.Element{\n\t\t\t\t\t\t\tTag: \"regexpFilter\",\n\t\t\t\t\t\t\tChild: []etree.Token{&etree.CharData{\n\t\t\t\t\t\t\t\tData: \"regexpFilter\",\n\t\t\t\t\t\t\t}},\n\t\t\t\t\t\t}},\n\t\t\t\t\t}},\n\t\t\t\t}},\n\t\t\t}},\n\t\twantWebhook: &v1alpha3.GenericWebhook{\n\t\t\tEnable:           true,\n\t\t\tToken:            \"token\",\n\t\t\tCause:            \"cause\",\n\t\t\tPrintVariables:   true,\n\t\t\tPrintPostContent: true,\n\t\t\tRequestVariables: []v1alpha3.GenericVariable{{\n\t\t\t\tKey:          \"key\",\n\t\t\t\tRegexpFilter: \"regexpFilter\",\n\t\t\t}},\n\t\t\tHeaderVariables: []v1alpha3.GenericVariable{{\n\t\t\t\tKey:          \"key\",\n\t\t\t\tRegexpFilter: \"regexpFilter\",\n\t\t\t}},\n\t\t\tFilterText:       \"filterText\",\n\t\t\tFilterExpression: \"filterExpression\",\n\t\t},\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif gotWebhook := ParseGenericWebhookXML(tt.args.ele); !reflect.DeepEqual(gotWebhook, tt.wantWebhook) {\n\t\t\t\tt.Errorf(\"ParseGenericWebhookXML() = %v, want %v\", gotWebhook, tt.wantWebhook)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc Test_getElementText(t *testing.T) {\n\ttype args struct {\n\t\tele       *etree.Element\n\t\tchildName string\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant string\n\t}{{\n\t\tname: \"nil args, should return empty string\",\n\t\targs: args{\n\t\t\tele: nil,\n\t\t},\n\t}, {\n\t\tname: \"non-exits child name, should return empty string\",\n\t\targs: args{\n\t\t\tele:       etree.NewElement(\"xxx\"),\n\t\t\tchildName: \"non-exits\",\n\t\t},\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := getElementText(tt.args.ele, tt.args.childName); got != tt.want {\n\t\t\t\tt.Errorf(\"getElementText() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
