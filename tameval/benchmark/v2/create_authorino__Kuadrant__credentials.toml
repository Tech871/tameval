[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.8"

[repo_info]
repository = "Kuadrant/authorino"
sha = "21d456d60269371848937208af54a83145957450"

[run_info]
docker_image = "golang:1.23.8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/auth/credentials.go pkg/auth/credentials_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/auth/credentials.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 29.0
original_coverage = 73.0
mutation_kill_rate = 63.0
original_mutation_kill_rate = 74.0
covered_lines = [ 62, 63, 64, 65, 68, 69, 70, 71, 125, 126, 127, 128, 129, 130, 146, 147, 152, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 168,]
missed_lines = [ 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 66, 67, 72, 73, 77, 78, 79, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 121, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 150, 159, 169,]

[input_info]
test_file_path = "pkg/auth/credentials_test.go"
focal_file_path = "pkg/auth/credentials.go"
test_file_url = "https://github.com/Kuadrant/authorino/blob/21d456d60269371848937208af54a83145957450/pkg/auth/credentials_test.go"
focal_file_url = "https://github.com/Kuadrant/authorino/blob/21d456d60269371848937208af54a83145957450/pkg/auth/credentials.go"
first_commit_date = "2022-03-28"
last_commit_date = "2025-06-17"
test_file_content = "package auth\n\nimport (\n\t\"testing\"\n\n\tenvoyServiceAuthV3 \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v3\"\n\t\"gotest.tools/assert\"\n)\n\nfunc TestConstants(t *testing.T) {\n\tassert.Check(t, inCustomHeader == \"custom_header\")\n\tassert.Check(t, inAuthHeader == \"authorization_header\")\n\tassert.Check(t, inQuery == \"query\")\n\tassert.Check(t, credentialNotFoundMsg == \"credential not found\")\n\tassert.Check(t, credentialNotFoundInHeaderMsg == \"the credential was not found in the request header\")\n\tassert.Check(t, credentialLocationNotSupportedMsg == \"the credential location is not supported\")\n\tassert.Check(t, authHeaderNotSetMsg == \"the Authorization header is not set\")\n\tassert.Check(t, cookieHeaderNotSetMsg == \"the Cookie header is not set\")\n\tassert.Check(t, defaultKeySelector == \"Bearer\")\n}\n\n\n\n\nfunc TestGetCredentialsFromCustomHeaderSuccess(t *testing.T) {\n\tvar httpReq = envoyServiceAuthV3.AttributeContext_HttpRequest{\n\t\tHeaders: map[string]string{\"x-api-key\": \"DasUberApiKey\"},\n\t}\n\n\tauthCredentials := AuthCredential{\n\t\tKeySelector: \"X-API-KEY\",\n\t\tIn:          \"custom_header\",\n\t}\n\tcred, err := authCredentials.GetCredentialsFromReq(&httpReq)\n\n\tassert.NilError(t, err)\n\tassert.Check(t, cred == \"DasUberApiKey\")\n}\n\nfunc TestGetCredentialsFromCustomHeaderFail(t *testing.T) {\n\tvar httpReq = envoyServiceAuthV3.AttributeContext_HttpRequest{}\n\n\tauthCredentials := AuthCredential{\n\t\tKeySelector: \"X-API-KEY\",\n\t\tIn:          \"custom_header\",\n\t}\n\t_, err := authCredentials.GetCredentialsFromReq(&httpReq)\n\n\tassert.Error(t, err, \"credential not found\")\n}\n\n\n\n\n\nfunc TestGetCredentialsFromCookieHeaderWithEqualSign(t *testing.T) {\n\tvar httpReq = envoyServiceAuthV3.AttributeContext_HttpRequest{\n\t\tHeaders: map[string]string{\"cookie\": \"Expires=Tue, 01-Jan-2016 21:47:38 GMT; API-KEY=SHVtYW5JbnN0cnVtZW50YWxpdHk=\"},\n\t}\n\n\tauthCredentials := AuthCredential{\n\t\tKeySelector: \"API-KEY\",\n\t\tIn:          \"cookie\",\n\t}\n\tcred, err := authCredentials.GetCredentialsFromReq(&httpReq)\n\n\tassert.NilError(t, err)\n\tassert.Check(t, cred == \"SHVtYW5JbnN0cnVtZW50YWxpdHk=\")\n}\n\n\n\n\nfunc TestGetCredentialsFromQueryFail(t *testing.T) {\n\tvar httpReq = envoyServiceAuthV3.AttributeContext_HttpRequest{\n\t\tPath: \"/seele.de/hip?third_impact=true&some=scheisse\",\n\t}\n\n\tauthCredentials := AuthCredential{\n\t\tKeySelector: \"api_key\",\n\t\tIn:          \"query\",\n\t}\n\t_, err := authCredentials.GetCredentialsFromReq(&httpReq)\n\n\tassert.Error(t, err, \"credential not found\")\n}\n"
