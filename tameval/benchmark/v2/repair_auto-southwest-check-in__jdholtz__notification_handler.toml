[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "jdholtz/auto-southwest-check-in"
sha = "08010e2aaea522c42913addf8ffdc5485b06ddb7"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=lib/notification_handler.py -m pytest -q --junit-xml=test_output.xml tests/unit/test_notification_handler.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target lib.notification_handler --unit-test tests.unit.test_notification_handler --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target lib/notification_handler.py --unit-test tests/unit/test_notification_handler.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = [ 0, 2, 4, 5, 7, 8, 14, 15, 16, 18, 20, 23, 26, 27, 28, 30, 39, 42, 43, 45, 46, 48, 52, 53, 57, 63, 64, 66, 73, 74, 75, 79, 81, 83, 84, 86, 87, 91, 92, 96, 97, 99, 102, 107, 108, 110, 111, 116, 117, 119, 120, 124, 126, 127, 131, 133, 134, 138, 139, 141, 142, 147, 148, 149, 150, 155, 156, 158, 159, 164, 165, 167, 168, 172, 173, 175, 176, 181, 182, 184, 185, 191, 192, 194, 195, 196, 198, 199, 200, 202, 204, 210, 212,]
missed_lines = []

[input_info]
test_file_path = "tests/unit/test_notification_handler.py"
focal_file_path = "lib/notification_handler.py"
test_file_url = "https://github.com/jdholtz/auto-southwest-check-in/blob/08010e2aaea522c42913addf8ffdc5485b06ddb7/tests/unit/test_notification_handler.py"
focal_file_url = "https://github.com/jdholtz/auto-southwest-check-in/blob/08010e2aaea522c42913addf8ffdc5485b06ddb7/lib/notification_handler.py"
first_commit_date = "2022-12-10"
last_commit_date = "2025-03-07"
test_file_content = "import apprise\nimport pytest\nfrom pytest_mock import MockerFixture\n\nfrom lib.config import NotificationConfig\nfrom lib.notification_handler import FLIGHT_TIME_PLACEHOLDER, NotificationHandler\nfrom lib.utils import NotificationLevel\n\n\nclass TestNotificationHandler:\n    def _get_notification_config(self) -> list[NotificationConfig]:\n        notif1 = NotificationConfig()\n        notif1.url = \"http://test1\"\n        notif1.level = NotificationLevel.INFO\n        notif2 = NotificationConfig()\n        notif2.url = \"http://test2\"\n        notif2.level = NotificationLevel.ERROR\n        return [notif1, notif2]\n\n    @pytest.fixture(autouse=True)\n    def notification_handler(self, mocker: MockerFixture) -> None:\n        mock_reservation_monitor = mocker.patch(\"lib.reservation_monitor.ReservationMonitor\")\n        self.handler = NotificationHandler(mock_reservation_monitor)\n\n    def test_send_nofication_does_not_send_notifications_if_level_is_too_low(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_apprise = mocker.patch.object(apprise.Apprise, \"__init__\", return_value=None)\n        mock_apprise_notify = mocker.patch.object(apprise.Apprise, \"notify\")\n        self.handler.notifications = self._get_notification_config()\n\n        self.handler.send_notification(\"\", NotificationLevel.INFO)\n\n        mock_apprise.assert_called_once_with(self.handler.notifications[0].url)\n        mock_apprise_notify.assert_called_once()\n\n    @pytest.mark.parametrize(\"level\", [NotificationLevel.ERROR, None])\n    def test_send_notification_sends_notifications_with_the_correct_content(\n        self, mocker: MockerFixture, level: NotificationLevel\n    ) -> None:\n        mock_apprise = mocker.patch.object(apprise.Apprise, \"__init__\", return_value=None)\n        mock_apprise_notify = mocker.patch.object(apprise.Apprise, \"notify\")\n        self.handler.notifications = self._get_notification_config()\n\n        self.handler.send_notification(\"test notification\", level)\n\n        assert mock_apprise.call_count == 2\n        assert mock_apprise.call_args_list == [\n            mocker.call(self.handler.notifications[0].url),\n            mocker.call(self.handler.notifications[1].url),\n        ]\n\n        assert mock_apprise_notify.call_count == 2\n        assert mock_apprise_notify.call_args[1][\"body\"] == \"test notification\"\n        \n    def test_validate_notification_content_and_delivery(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_apprise = mocker.patch.object(apprise.Apprise, \"__init__\", return_value=None)\n        mock_apprise_notify = mocker.patch.object(apprise.Apprise, \"notify\")\n        self.handler.notifications = self._get_notification_config()\n\n        self.handler.send_notification(\"test notification\", NotificationLevel.ERROR)\n\n        assert mock_apprise.call_count == 2\n        assert mock_apprise_notify.call_args[1][\"title\"] == \"Auto Southwest Check-in Script\"\n        assert mock_apprise_notify.call_args[1][\"body\"] == \"test notification\"\n\n    def test_format_flight_times_replaces_all_flight_times(self, mocker: MockerFixture) -> None:\n        mock_flight1 = mocker.patch(\"lib.flight.Flight\")\n        mock_flight1.get_display_time.return_value = \"2021-01-01 00:00 UTC\"\n        mock_flight2 = mocker.patch(\"lib.flight.Flight\")\n        mock_flight2.get_display_time.return_value = \"2021-01-01 01:00 UTC\"\n\n        body = (\n            f\"New flight scheduled at {FLIGHT_TIME_PLACEHOLDER} and another new flight scheduled \"\n            f\"at {FLIGHT_TIME_PLACEHOLDER}\"\n        )\n        formatted = self.handler._format_flight_times(body, [mock_flight1, mock_flight2], True)\n        assert \"2021-01-01 00:00 UTC\" in formatted\n        assert \"2021-01-01 01:00 UTC\" in formatted\n\n    def test_new_flights_sends_no_notification_if_no_flights_exist(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        self.handler.new_flights([])\n        mock_send_notification.assert_not_called()\n\n    def test_new_flights_sends_notifications_for_new_flights(self, mocker: MockerFixture) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n        mock_flight.is_international = False\n\n        self.handler.new_flights([mock_flight])\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.INFO\n\n    def test_new_flights_sends_passport_information_when_flight_is_international(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n        mock_flight.is_international = True\n\n        self.handler.new_flights([mock_flight])\n        assert \"passport information\" in mock_send_notification.call_args[0][0]\n\n    def test_failed_reservation_retrieval_sends_error_notification(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        self.handler.failed_reservation_retrieval(\"\", \"\")\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.ERROR\n\n    def test_failed_login_sends_error_notification(self, mocker: MockerFixture) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        self.handler.failed_login(\"\")\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.ERROR\n\n    def test_timeout_during_retrieval_sends_notice_notification(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        self.handler.timeout_during_retrieval(\"test\")\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.NOTICE\n\n    def test_too_many_requests_during_login_sends_notice_notification(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        self.handler.too_many_requests_during_login()\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.NOTICE\n\n    def test_successful_checkin_sends_notification_for_check_in(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n\n        self.handler.successful_checkin(\n            {\n                \"flights\": [\n                    {\n                        \"passengers\": [\n                            {\"name\": \"John\", \"boardingGroup\": \"A\", \"boardingPosition\": \"1\"}\n                        ]\n                    }\n                ]\n            },\n            mock_flight,\n        )\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.CHECKIN\n\n    def test_successful_checkin_does_not_include_notification_for_lap_child(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n\n        self.handler.successful_checkin(\n            {\n                \"flights\": [\n                    {\n                        \"passengers\": [\n                            {\"name\": \"John\", \"boardingGroup\": \"A\", \"boardingPosition\": \"1\"},\n                            {\"name\": \"Lap Child\", \"boardingGroup\": None, \"boardingPosition\": None},\n                        ]\n                    }\n                ]\n            },\n            mock_flight,\n        )\n        assert \"John got A1!\" in mock_send_notification.call_args[0][0]\n        assert \"Lap Child\" not in mock_send_notification.call_args[0][0]\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.CHECKIN\n\n    def test_check_successful_check_in_notification_content(\n        self, mocker: MockerFixture\n    ) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n        mock_flight.departure_airport = \"LAX\"\n        mock_flight.destination_airport = \"SFO\"\n\n        self.handler.successful_checkin(\n            {\n                \"flights\": [\n                    {\n                        \"passengers\": [\n                            {\"name\": \"John\", \"boardingGroup\": \"A\", \"boardingPosition\": \"1\"}\n                        ]\n                    }\n                ]\n            },\n            mock_flight,\n        )\n        assert \"Successfully checked in to flight from 'LAX' to 'SFO'\" in mock_send_notification.call_args[0][0]\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.CHECKIN\n\n    def test_failed_checkin_sends_error_notification(self, mocker: MockerFixture) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n\n        self.handler.failed_checkin(\"\", mock_flight)\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.ERROR\n\n    def test_airport_checkin_required_sends_error_notification(self, mocker: MockerFixture) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n\n        self.handler.airport_checkin_required(mock_flight)\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.ERROR\n\n    def test_timeout_before_checkin_sends_error_notification(self, mocker: MockerFixture) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n\n        self.handler.timeout_before_checkin(mock_flight)\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.ERROR\n\n    def test_lower_fare_sends_lower_fare_notification(self, mocker: MockerFixture) -> None:\n        mock_send_notification = mocker.patch.object(NotificationHandler, \"send_notification\")\n        mock_flight = mocker.patch(\"lib.flight.Flight\")\n\n        self.handler.lower_fare(mock_flight, \"\")\n        assert mock_send_notification.call_args[0][1] == NotificationLevel.INFO\n\n    @pytest.mark.parametrize((\"url\", \"expected_calls\"), [(\"http://healthchecks\", 1), (None, 0)])\n    def test_healthchecks_success_pings_url_only_if_configured(\n        self, mocker: MockerFixture, url: str, expected_calls: int\n    ) -> None:\n        mock_post = mocker.patch(\"requests.post\")\n        self.handler.reservation_monitor.config.healthchecks_url = url\n\n        self.handler.healthchecks_success(\"healthchecks success\")\n        assert mock_post.call_count == expected_calls\n\n    @pytest.mark.parametrize((\"url\", \"expected_calls\"), [(\"http://healthchecks\", 1), (None, 0)])\n    def test_healthchecks_fail_pings_url_only_if_configured(\n        self, mocker: MockerFixture, url: str, expected_calls: int\n    ) -> None:\n        mock_post = mocker.patch(\"requests.post\")\n        self.handler.reservation_monitor.config.healthchecks_url = url\n\n        self.handler.healthchecks_fail(\"healthchecks fail\")\n        assert mock_post.call_count == expected_calls\n\n    def test_get_account_name_returns_username_when_no_name_is_set(\n        self, mocker: MockerFixture\n    ) -> None:\n        self.handler.reservation_monitor = mocker.patch(\"lib.reservation_monitor.AccountMonitor\")\n        self.handler.reservation_monitor.first_name = None\n        self.handler.reservation_monitor.last_name = None\n        self.handler.reservation_monitor.username = \"Test user\"\n        assert self.handler._get_account_name() == self.handler.reservation_monitor.username\n\n    def test_get_account_name_returns_the_correct_name_when_set(self) -> None:\n        self.handler.reservation_monitor.first_name = \"John\"\n        self.handler.reservation_monitor.last_name = \"Doe\"\n        assert self.handler._get_account_name() == \"John Doe\""
