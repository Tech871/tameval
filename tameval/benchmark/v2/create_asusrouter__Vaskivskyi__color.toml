[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Vaskivskyi/asusrouter"
sha = "1f98018ace04703492b654cd02f4f3a4890cedcb"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=asusrouter/modules/color.py -m pytest -q --junit-xml=test_output.xml tests/modules/test_color.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target asusrouter.modules.color --unit-test tests.modules.test_color --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target asusrouter/modules/color.py --unit-test tests/modules/test_color.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 78.0
original_coverage = 100.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 4, 5, 7, 9, 11, 12, 13, 14, 17, 22, 23, 25, 26, 29, 32, 33, 34, 35, 37, 40, 41, 53, 54, 90, 93, 102, 103, 104, 105, 108, 109, 110, 111, 112, 115, 116, 118, 119, 121, 128, 129, 131, 132, 133, 134, 136, 139, 141, 143, 150, 151, 152, 156, 158, 166, 172, 174, 182, 183, 185, 188, 190, 193, 195, 198, 200, 203, 204, 205, 212, 215, 217, 218, 221, 223, 224, 227, 229, 230, 233, 235, 236, 239, 241, 242, 245, 248, 251, 259, 260, 261, 263, 268, 277, 282, 284, 300, 308, 309, 311, 312, 315, 318, 321, 323, 342, 355, 360, 365, 366,]
missed_lines = [ 47, 48, 50, 61, 62, 65, 66, 67, 72, 73, 74, 75, 76, 77, 85, 87, 266, 292, 293, 295, 296, 298, 329, 330, 336, 348, 350, 351, 353, 358, 363, 369,]

[input_info]
test_file_path = "tests/modules/test_color.py"
focal_file_path = "asusrouter/modules/color.py"
test_file_url = "https://github.com/Vaskivskyi/asusrouter/blob/1f98018ace04703492b654cd02f4f3a4890cedcb/tests/modules/test_color.py"
focal_file_url = "https://github.com/Vaskivskyi/asusrouter/blob/1f98018ace04703492b654cd02f4f3a4890cedcb/asusrouter/modules/color.py"
first_commit_date = "2024-08-24"
last_commit_date = "2025-08-10"
test_file_content = "\"\"\"Tests for the color module.\"\"\"\n\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom asusrouter.modules.color import (\n    DEFAULT_COLOR,\n    DEFAULT_COLOR_SCALE_ASUS,\n    ColorRGB,\n    ColorRGBB,\n    average_color,\n    color_zone,\n    parse_colors,\n)\n\n@pytest.mark.parametrize(\n    (\"colors\", \"expected\"),\n    [\n        # Single color\n        (ColorRGB(255, 0, 0), ColorRGB(255, 0, 0)),\n        # Color list\n        (\n            [\n                ColorRGB(128, 0, 0),\n                ColorRGB(0, 128, 0),\n                ColorRGB(0, 0, 128),\n            ],\n            ColorRGB(42, 42, 42),\n        ),\n        # Empty list\n        ([], ColorRGB(0, 0, 0, 128)),\n        # Color with different scales\n        (\n            [\n                ColorRGB(255, 0, 0, 255),\n                ColorRGB(0, 255, 0, 128),\n                ColorRGB(0, 0, 255, 64),\n            ],\n            ColorRGB(85, 42, 21, 255),\n        ),\n    ],\n)\ndef test_average_color(colors: list[ColorRGB], expected: ColorRGB) -> None:\n    \"\"\"Test average_color.\"\"\"\n\n    assert average_color(colors) == expected\n\nclass TestColorRGB:\n    \"\"\"Test the ColorRGB class.\"\"\"\n\n    @pytest.mark.parametrize(\n        (\"r\", \"g\", \"b\", \"scale\", \"expected\"),\n        [\n            # No values provided\n            (None, None, None, None, DEFAULT_COLOR),\n            # R provides the whole RGB tuple\n            ((255, 0, 0), None, None, 255, (255, 0, 0)),\n            # R provides the whole RGB tuple with scale\n            ((255, 0, 0), None, None, 128, (128, 0, 0)),\n            # No scale provided\n            (\n                (64431, 0, 0),\n                None,\n                None,\n                None,\n                (DEFAULT_COLOR_SCALE_ASUS, 0, 0),\n            ),\n            # R only provides the R value\n            (255, None, None, 255, (255, 255, 255)),\n            # All channels are provided\n            (100, 150, 200, 255, (100, 150, 200)),\n        ],\n    )\n    def test_initialization(\n        self,\n        r: int | tuple[int, ...] | None,\n        g: int | None,\n        b: int | None,\n        scale: int | None,\n        expected: tuple[int, int, int],\n    ) -> None:\n        \"\"\"Test initialization.\"\"\"\n\n        if scale is not None:\n            color = ColorRGB(r, g, b, scale)\n        else:\n            color = ColorRGB(r, g, b)\n\n        assert (color._r, color._g, color._b) == expected\n\n    @pytest.mark.parametrize(\n        (\"input_rgb\", \"expected\"),\n        [\n            # Correct input\n            ((100, 150, 200), (100, 150, 200)),\n            (\"100,150,200\", (100, 150, 200)),\n            ((100,), (100, 0, 0)),\n            (\"100\", (100, 0, 0)),\n            (ColorRGB(32, 48, 64), (32, 48, 64)),\n            # Wrong input\n            (None, (0, 0, 0)),\n        ],\n    )\n    def test_normalize_input_rgb(\n        self,\n        input_rgb: str | tuple[int, ...] | ColorRGB | None,\n        expected: tuple[int, int, int],\n    ) -> None:\n        \"\"\"Test the _normalize_input_rgb method.\"\"\"\n\n        color = ColorRGB()\n        result = color._normalize_input_rgb(input_rgb)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        (\"values\", \"scale\", \"expected\"),\n        [\n            # Normal number of values\n            ((100, 200, 300), 255, (85, 170, 255)),\n            ((50, 100, 150), 100, (33, 67, 100)),\n            ((255, 255, 255), 255, (255, 255, 255)),\n            ((0, 0, 0), 255, (0, 0, 0)),\n            ((128, 64, 32), 128, (128, 64, 32)),\n            # Different number of values\n            ((100, 200), 255, (100, 200)),\n            ((100, 200, 300, 400), 200, (50, 100, 150, 200)),\n        ],\n    )\n    def test_normalize_scale(\n        self,\n        values: tuple[int, int, int],\n        scale: int,\n        expected: tuple[int, int, int],\n    ) -> None:\n        \"\"\"Test _normalize_scale.\"\"\"\n\n        color = ColorRGB()\n        result = color._normalize_scale(values, scale)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        (\"input_rgb\", \"expected\"),\n        [\n            # This will scale to the default 128 scale\n            ((100, 150, 200), (64, 96, 128)),\n            (\"100,150,200\", (64, 96, 128)),\n            # This will stay\n            ((32, 64, 96), (32, 64, 96)),\n            # Other input\n            ((100,), (100, 0, 0)),\n            (\"100\", (100, 0, 0)),\n            (None, (0, 0, 0)),\n        ],\n    )\n    def test_from_rgb(\n        self,\n        input_rgb: str | tuple[int, ...] | None,\n        expected: tuple[int, int, int],\n    ) -> None:\n        \"\"\"Test from_rgb.\"\"\"\n\n        color = ColorRGB()\n        color.from_rgb(input_rgb)\n        assert (color._r, color._g, color._b) == expected\n\n    @pytest.mark.parametrize(\n        (\"rgb\", \"scale\", \"expected\"),\n        [\n            # This will scale to the default 128 scale\n            ((100, 150, 200), 128, (64, 96, 128)),\n            (\"100,150,200\", 128, (64, 96, 128)),\n            # This will scale to the 255 scale\n            ((32, 64, 96), 255, (32, 64, 96)),\n            # Other input\n            ((100,), 255, (100, 0, 0)),\n            (\"100\", 255, (100, 0, 0)),\n            (None, 255, (0, 0, 0)),\n        ],\n    )\n    def test_from_rgbs(\n        self,\n        rgb: str | tuple[int, ...] | None,\n        scale: int | None,\n        expected: tuple[int, int, int] | None,\n    ) -> None:\n        \"\"\"Test from_rgbs.\"\"\"\n\n        with patch.object(ColorRGB, \"from_rgb\") as mock_from_rgb:\n            color = ColorRGB()\n            color.from_rgbs(rgb, scale=scale)\n\n            assert mock_from_rgb.call_count == 2  # noqa: PLR2004\n\n            assert color._scale == scale\n\n    @pytest.mark.parametrize(\n        (\"input_rgb\", \"expected\"),\n        [\n            # Correct input\n            ((100, 150, 200), \"64,96,128\"),\n            ((100,), \"100,0,0\"),\n            # Wrong input\n            (None, \"0,0,0\"),\n        ],\n    )\n    def test_repr(\n        self, input_rgb: tuple[int, ...] | None, expected: str\n    ) -> None:\n        \"\"\"Test __repr__.\"\"\"\n\n        color = ColorRGB(input_rgb)\n        assert repr(color) == expected\n\n    @pytest.mark.parametrize(\n        (\"input_rgb\", \"expected\"),\n        [\n            # Correct input\n            ((100, 150, 200), \"64,96,128\"),\n            ((100,), \"100,0,0\"),\n            # Wrong input\n            (None, \"0,0,0\"),\n        ],\n    )\n    def test_str(\n        self, input_rgb: tuple[int, ...] | None, expected: str\n    ) -> None:\n        \"\"\"Test __str__.\"\"\"\n\n        color = ColorRGB(input_rgb)\n        assert str(color) == expected\n\n    @pytest.mark.parametrize(\n        (\"color1\", \"color2\", \"expected\"),\n        [\n            # Equal colors\n            (ColorRGB(100, 150, 200, 128), ColorRGB(100, 150, 200, 128), True),\n            # Different colors\n            (\n                ColorRGB(100, 150, 200, 255),\n                ColorRGB(100, 150, 201, 255),\n                False,\n            ),\n            # Different types\n            (ColorRGB(32, 64, 96), \"test\", False),\n        ],\n    )\n    def test_eq(\n        self, color1: ColorRGB, color2: ColorRGB | str, expected: bool\n    ) -> None:\n        \"\"\"Test __eq__.\"\"\"\n\n        assert (color1 == color2) == expected\n        assert (color2 == color1) == expected\n\n    @pytest.mark.parametrize(\n        (\"input_rgb\", \"r\", \"g\", \"b\", \"scale\", \"color_brightness\"),\n        [\n            # Correct input\n            ((100, 150, 200), 64, 96, 128, 128, 128),\n            ((100,), 100, 0, 0, 128, 100),\n            # Wrong input\n            (None, 0, 0, 0, 128, 0),\n        ],\n    )\n    def test_properties(  # noqa: PLR0913\n        self,\n        input_rgb: tuple[int, ...] | None,\n        r: int,\n        g: int,\n        b: int,\n        scale: int,\n        color_brightness: int,\n    ) -> None:\n        \"\"\"Test properties.\"\"\"\n\n        color = ColorRGB(input_rgb)\n        assert color.r == r\n        assert color.g == g\n        assert color.b == b\n        assert color.scale == scale\n        assert color.color_brightness == color_brightness\n\nclass TestColorRGBB:\n    \"\"\"Test the ColorRGBB class.\"\"\"\n\n    @pytest.mark.parametrize(\n        (\"rgb\", \"scale\", \"expected\"),\n        [\n            # Correct input\n            ((100, 150, 200), 128, (64, 96, 128)),\n            (\"100,150,200\", 128, (64, 96, 128)),\n            ((100, 150, 200), None, (64, 96, 128)),\n            # Wrong input\n            (None, 128, (0, 0, 0)),\n        ],\n    )\n    def test__from_rgb(\n        self,\n        rgb: str | tuple[int, ...] | None,\n        scale: int | None,\n        expected: tuple[int, int, int],\n    ) -> None:\n        \"\"\"Test _from_rgb.\"\"\"\n\n        color = ColorRGBB()\n        result = color._from_rgb(rgb, scale=scale)\n        assert result == expected\n\n    @pytest.mark.parametrize(\n        (\"rgb\", \"scale\", \"expected\"),\n        [\n            # Correct input\n            ((100, 150, 200), 128, (64, 96, 128)),\n            (ColorRGB(100, 150, 200), None, (64, 96, 128)),\n            ((32, 64, 96), None, (43, 85, 128)),\n            # Wrong input\n            (None, 128, (0, 0, 0)),\n        ],\n    )\n    def test_from_rgbwb(\n        self,\n        rgb: str | tuple[int, ...] | ColorRGB | None,\n        scale: int | None,\n        expected: tuple[int, int, int],\n    ) -> None:\n        \"\"\"Test from_rgbwb.\"\"\"\n\n        color = ColorRGBB()\n        color.from_rgbwb(rgb, scale=scale)\n        assert (color._r, color._g, color._b) == expected\n"
