[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.4"

[repo_info]
repository = "google/osv-scalibr"
sha = "68757353cde699f714e3edbe2ef641c84e737ac6"

[run_info]
docker_image = "golang:1.23.4"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out extractor/standalone/windows/common/winproducts/winproducts.go extractor/standalone/windows/common/winproducts/winproducts_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting extractor/standalone/windows/common/winproducts/winproducts.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 75.0
original_coverage = 75.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 72, 73, 78, 83, 84, 85, 86, 88,]
missed_lines = [ 74, 75, 76, 79, 80, 81,]

[input_info]
test_file_path = "extractor/standalone/windows/common/winproducts/winproducts_test.go"
focal_file_path = "extractor/standalone/windows/common/winproducts/winproducts.go"
test_file_url = "https://github.com/google/osv-scalibr/blob/68757353cde699f714e3edbe2ef641c84e737ac6/extractor/standalone/windows/common/winproducts/winproducts_test.go"
focal_file_url = "https://github.com/google/osv-scalibr/blob/68757353cde699f714e3edbe2ef641c84e737ac6/extractor/standalone/windows/common/winproducts/winproducts.go"
first_commit_date = "2024-06-05"
last_commit_date = "2025-01-23"
test_file_content = "// Copyright 2025 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage winproducts\n\nimport (\n\t\"testing\"\n)\n\nfunc TestWhichWindowsFlavor(t *testing.T) {\n\ttests := []struct {\n\t\tdesc        string\n\t\tinstallType string\n\t\twant        string\n\t}{\n\t\t{\n\t\t\tdesc:        \"Windows server returns server\",\n\t\t\tinstallType: \"server\",\n\t\t\twant:        \"server\",\n\t\t},\n\t\t{\n\t\t\tdesc:        \"Windows server core returns server\",\n\t\t\tinstallType: \"server core\",\n\t\t\twant:        \"server\",\n\t\t},\n\t\t{\n\t\t\tdesc:        \"Windows client returns client\",\n\t\t\tinstallType: \"client\",\n\t\t\twant:        \"client\",\n\t\t},\n\t\t{\n\t\t\tdesc:        \"Ignore case\",\n\t\t\tinstallType: \"SeRvEr\",\n\t\t\twant:        \"server\",\n\t\t},\n\t\t{\n\t\t\tdesc:        \"Unknown returns server\",\n\t\t\tinstallType: \"unknown\",\n\t\t\twant:        \"server\",\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.desc, func(t *testing.T) {\n\t\t\tgot := windowsFlavor(tc.installType)\n\t\t\tif got != tc.want {\n\t\t\t\tt.Errorf(\"WhichWindowsFlavor(%q) = %q, want: %q\", tc.installType, got, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestWindowsProductFromVersion(t *testing.T) {\n\ttests := []struct {\n\t\tdesc       string\n\t\tflavor     string\n\t\timgVersion string\n\t\twant       string\n\t}{\n\t\t{\n\t\t\tdesc:       \"Known version returns correct product\",\n\t\t\tflavor:     \"server\",\n\t\t\timgVersion: \"10.0.14393.1234\",\n\t\t\twant:       \"windows_server_2016\",\n\t\t},\n\t\t{\n\t\t\tdesc:       \"Unknown version returns unknownWindows\",\n\t\t\tflavor:     \"server\",\n\t\t\timgVersion: \"127.0.0.1\",\n\t\t\twant:       \"unknownWindows\",\n\t\t},\n\t}\n\n\tfor _, tc := range tests {\n\t\tt.Run(tc.desc, func(t *testing.T) {\n\t\t\tgot := WindowsProductFromVersion(tc.flavor, tc.imgVersion)\n\t\t\tif got != tc.want {\n\t\t\t\tt.Errorf(\"WindowsProductFromVersion(%q, %q) = %q, want: %q\", tc.flavor, tc.imgVersion, got, tc.want)\n\t\t\t}\n\t\t})\n\t}\n}\n"
