[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "databricks/databricks-sdk-java"
sha = "1aaab52533750ad00bb98d0a13d3895f384e77e0"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl databricks-sdk-java -Dtest=DataPlaneTokenSourceTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl databricks-sdk-java -DtargetClasses=**.DataPlaneTokenSource  -DtargetTests=**.DataPlaneTokenSourceTest  -DoutputFormats=XML"
coverage_report_path = "databricks-sdk-java/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "databricks-sdk-java/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 92.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "databricks-sdk-java/src/test/java/com/databricks/sdk/core/oauth/DataPlaneTokenSourceTest.java"
focal_file_path = "databricks-sdk-java/src/main/java/com/databricks/sdk/core/oauth/DataPlaneTokenSource.java"
test_file_url = "https://github.com/databricks/databricks-sdk-java/blob/1aaab52533750ad00bb98d0a13d3895f384e77e0/databricks-sdk-java/src/test/java/com/databricks/sdk/core/oauth/DataPlaneTokenSourceTest.java"
focal_file_url = "https://github.com/databricks/databricks-sdk-java/blob/1aaab52533750ad00bb98d0a13d3895f384e77e0/databricks-sdk-java/src/main/java/com/databricks/sdk/core/oauth/DataPlaneTokenSource.java"
first_commit_date = "2025-05-26"
last_commit_date = "2025-06-27"
test_file_content = "package com.databricks.sdk.core.oauth;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\nimport com.databricks.sdk.core.http.HttpClient;\nimport com.databricks.sdk.core.http.Response;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.time.Instant;\nimport java.util.stream.Stream;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.Arguments;\nimport org.junit.jupiter.params.provider.MethodSource;\nimport org.mockito.MockedConstruction;\n\npublic class DataPlaneTokenSourceTest {\n  private static final String TEST_ENDPOINT_1 = \"https://endpoint1.databricks.com/\";\n  private static final String TEST_ENDPOINT_2 = \"https://endpoint2.databricks.com/\";\n  private static final String TEST_AUTH_DETAILS_1 = \"{\\\"aud\\\":\\\"aud1\\\"}\";\n  private static final String TEST_AUTH_DETAILS_2 = \"{\\\"aud\\\":\\\"aud2\\\"}\";\n  private static final String TEST_CP_TOKEN = \"cp-access-token\";\n  private static final String TEST_TOKEN_TYPE = \"Bearer\";\n  private static final String TEST_REFRESH_TOKEN = \"refresh-token\";\n  private static final int TEST_EXPIRES_IN = 3600;\n  private static final String TEST_HOST = \"https://test.databricks.com\";\n\n  private static Stream<Arguments> provideDataPlaneTokenScenarios() throws Exception {\n    // Mock DatabricksOAuthTokenSource for control plane token\n    Token cpToken = new Token(TEST_CP_TOKEN, TEST_TOKEN_TYPE, null, Instant.now().plusSeconds(600));\n    DatabricksOAuthTokenSource mockCpTokenSource = mock(DatabricksOAuthTokenSource.class);\n    when(mockCpTokenSource.getToken()).thenReturn(cpToken);\n\n    // Success JSON for endpoint1/auth1\n    String successJson1 =\n        \"{\"\n            + \"\\\"access_token\\\":\\\"dp-access-token1\\\",\"\n            + \"\\\"token_type\\\":\\\"Bearer\\\",\"\n            + \"\\\"refresh_token\\\":\\\"refresh-token\\\",\"\n            + \"\\\"expires_in\\\":3600\"\n            + \"}\";\n    HttpClient mockSuccessClient1 = mock(HttpClient.class);\n    when(mockSuccessClient1.execute(any()))\n        .thenReturn(new Response(successJson1, 200, \"OK\", new URL(TEST_ENDPOINT_1)));\n\n    // Success JSON for endpoint2/auth2\n    String successJson2 =\n        \"{\"\n            + \"\\\"access_token\\\":\\\"dp-access-token2\\\",\"\n            + \"\\\"token_type\\\":\\\"Bearer\\\",\"\n            + \"\\\"refresh_token\\\":\\\"refresh-token\\\",\"\n            + \"\\\"expires_in\\\":3600\"\n            + \"}\";\n    HttpClient mockSuccessClient2 = mock(HttpClient.class);\n    when(mockSuccessClient2.execute(any()))\n        .thenReturn(new Response(successJson2, 200, \"OK\", new URL(TEST_ENDPOINT_2)));\n\n    String errorJson =\n        \"{\" + \"\\\"error\\\":\\\"invalid_request\\\",\" + \"\\\"error_description\\\":\\\"Bad request\\\"\" + \"}\";\n    HttpClient mockErrorClient = mock(HttpClient.class);\n    when(mockErrorClient.execute(any()))\n        .thenReturn(new Response(errorJson, 400, \"Bad Request\", new URL(TEST_ENDPOINT_1)));\n\n    // IOException scenario\n    HttpClient mockIOExceptionClient = mock(HttpClient.class);\n    when(mockIOExceptionClient.execute(any())).thenThrow(new IOException(\"Network error\"));\n\n    // For null/empty endpoint or authDetails\n    return Stream.of(\n        Arguments.of(\n            \"Success: endpoint1/auth1\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            mockSuccessClient1,\n            mockCpTokenSource,\n            TEST_HOST,\n            new Token(\n                \"dp-access-token1\",\n                TEST_TOKEN_TYPE,\n                TEST_REFRESH_TOKEN,\n                Instant.now().plusSeconds(TEST_EXPIRES_IN)),\n            null),\n        Arguments.of(\n            \"Success: endpoint2/auth2 (different cache key)\",\n            TEST_ENDPOINT_2,\n            TEST_AUTH_DETAILS_2,\n            mockSuccessClient2,\n            mockCpTokenSource,\n            TEST_HOST,\n            new Token(\n                \"dp-access-token2\",\n                TEST_TOKEN_TYPE,\n                TEST_REFRESH_TOKEN,\n                Instant.now().plusSeconds(TEST_EXPIRES_IN)),\n            null),\n        Arguments.of(\n            \"Error response from endpoint\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            mockErrorClient,\n            mockCpTokenSource,\n            TEST_HOST,\n            null,\n            com.databricks.sdk.core.DatabricksException.class),\n        Arguments.of(\n            \"IOException from HttpClient\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            mockIOExceptionClient,\n            mockCpTokenSource,\n            TEST_HOST,\n            null,\n            com.databricks.sdk.core.DatabricksException.class),\n        Arguments.of(\n            \"Null cpTokenSource\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            mockSuccessClient1,\n            null,\n            TEST_HOST,\n            null,\n            NullPointerException.class),\n        Arguments.of(\n            \"Null httpClient\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            null,\n            mockCpTokenSource,\n            TEST_HOST,\n            null,\n            NullPointerException.class),\n        Arguments.of(\n            \"Null endpoint\",\n            null,\n            TEST_AUTH_DETAILS_1,\n            mockSuccessClient1,\n            mockCpTokenSource,\n            TEST_HOST,\n            null,\n            NullPointerException.class),\n        Arguments.of(\n            \"Null authDetails\",\n            TEST_ENDPOINT_1,\n            null,\n            mockSuccessClient1,\n            mockCpTokenSource,\n            TEST_HOST,\n            null,\n            NullPointerException.class),\n        Arguments.of(\n            \"Null host\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            mockSuccessClient1,\n            mockCpTokenSource,\n            null,\n            null,\n            NullPointerException.class),\n        Arguments.of(\n            \"Empty host\",\n            TEST_ENDPOINT_1,\n            TEST_AUTH_DETAILS_1,\n            mockSuccessClient1,\n            mockCpTokenSource,\n            \"\",\n            null,\n            IllegalArgumentException.class));\n  }\n\n  @ParameterizedTest(name = \"{0}\")\n  @MethodSource(\"provideDataPlaneTokenScenarios\")\n  void testDataPlaneTokenSource(\n      String testName,\n      String endpoint,\n      String authDetails,\n      HttpClient httpClient,\n      DatabricksOAuthTokenSource cpTokenSource,\n      String host,\n      Token expectedToken,\n      Class<? extends Exception> expectedException) {\n    if (expectedException != null) {\n      assertThrows(\n          expectedException,\n          () -> {\n            DataPlaneTokenSource source = new DataPlaneTokenSource(httpClient, cpTokenSource, host);\n            source.getToken(endpoint, authDetails);\n          });\n    } else {\n      DataPlaneTokenSource source = new DataPlaneTokenSource(httpClient, cpTokenSource, host);\n      Token token = source.getToken(endpoint, authDetails);\n      assertNotNull(token);\n      assertEquals(expectedToken.getAccessToken(), token.getAccessToken());\n      assertEquals(expectedToken.getTokenType(), token.getTokenType());\n      assertEquals(expectedToken.getRefreshToken(), token.getRefreshToken());\n      assertTrue(expectedToken.getExpiry().isAfter(Instant.now()));\n    }\n  }\n\n  @Test\n  void testEndpointTokenSourceCaching() throws Exception {\n    Token cpToken =\n        new Token(TEST_CP_TOKEN, TEST_TOKEN_TYPE, null, Instant.now().plusSeconds(3600));\n    DatabricksOAuthTokenSource mockCpTokenSource = mock(DatabricksOAuthTokenSource.class);\n    when(mockCpTokenSource.getToken()).thenReturn(cpToken);\n\n    String successJson =\n        \"{\\\"access_token\\\":\\\"dp-access-token\\\",\\\"token_type\\\":\\\"Bearer\\\",\\\"refresh_token\\\":\\\"refresh-token\\\",\\\"expires_in\\\":3600}\";\n    HttpClient mockHttpClient = mock(HttpClient.class);\n    when(mockHttpClient.execute(any()))\n        .thenReturn(new Response(successJson, 200, \"OK\", new URL(TEST_ENDPOINT_1)));\n\n    try (MockedConstruction<EndpointTokenSource> mockedConstruction =\n        mockConstruction(EndpointTokenSource.class)) {\n      DataPlaneTokenSource source =\n          new DataPlaneTokenSource(mockHttpClient, mockCpTokenSource, TEST_HOST);\n\n      // First call - should create new EndpointTokenSource\n      source.getToken(TEST_ENDPOINT_1, TEST_AUTH_DETAILS_1);\n      assertEquals(\n          1,\n          mockedConstruction.constructed().size(),\n          \"First call should create one EndpointTokenSource\");\n\n      // Second call with same endpoint and auth details - should reuse existing EndpointTokenSource\n      source.getToken(TEST_ENDPOINT_1, TEST_AUTH_DETAILS_1);\n      assertEquals(\n          1,\n          mockedConstruction.constructed().size(),\n          \"This call should reuse the existing EndpointTokenSource\");\n\n      // Call with different endpoint - should create new EndpointTokenSource\n      source.getToken(TEST_ENDPOINT_2, TEST_AUTH_DETAILS_2);\n      assertEquals(\n          2,\n          mockedConstruction.constructed().size(),\n          \"Different endpoint should create new EndpointTokenSource\");\n\n      // Call with different auth details - should create new EndpointTokenSource\n      source.getToken(TEST_ENDPOINT_1, TEST_AUTH_DETAILS_2);\n      assertEquals(\n          3,\n          mockedConstruction.constructed().size(),\n          \"Different auth details should create new EndpointTokenSource\");\n\n      source.getToken(TEST_ENDPOINT_2, TEST_AUTH_DETAILS_2);\n      assertEquals(\n          3,\n          mockedConstruction.constructed().size(),\n          \"This call should reuse the existing EndpointTokenSource\");\n    }\n  }\n}"
