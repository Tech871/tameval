[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "github/issue-metrics"
sha = "23689ee936e1c52ad48581667f483140c24224f1"
bench_version = 1

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements-test.txt && pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=config.py -m pytest -q --junit-xml=test_output.xml test_config.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target config --unit-test test_config --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target config.py --unit-test test_config.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 38.0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = 85.0
covered_lines = [ 12, 13, 14, 16, 19, 58, 112, 143, 153, 154, 156, 159, 168, 169, 170, 171, 172, 173, 174, 177, 183, 187, 188, 189, 191, 192, 193, 194, 196, 197, 201, 202, 208,]
missed_lines = [ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 155, 184, 185, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241,]

[input_info]
test_file_path = "test_config.py"
focal_file_path = "config.py"
test_file_url = "https://github.com/github/issue-metrics/blob/23689ee936e1c52ad48581667f483140c24224f1/test_config.py"
focal_file_url = "https://github.com/github/issue-metrics/blob/23689ee936e1c52ad48581667f483140c24224f1/config.py"
first_commit_date = "2023-12-02"
last_commit_date = "2025-01-21"
test_file_content = "\"\"\"A module containing unit tests for the config module functions.\n\nClasses:\n    TestGetIntFromEnv: A class to test the get_int_env_var function.\n    TestEnvVars: A class to test the get_env_vars function.\n\n\"\"\"\n\nimport os\nimport unittest\nfrom unittest.mock import patch\n\nfrom config import EnvVars, get_env_vars, get_int_env_var\n\nSEARCH_QUERY = \"is:issue is:open repo:user/repo\"\nTOKEN = \"test_token\"\n\n\nclass TestGetIntFromEnv(unittest.TestCase):\n    \"\"\"\n    Test suite for the get_int_from_env function.\n\n    ...\n\n    Test methods:\n        - test_get_int_env_var: Test returns the expected integer value.\n        - test_get_int_env_var_with_empty_env_var: Test returns None when environment variable\n          is empty.\n        - test_get_int_env_var_with_non_integer: Test returns None when environment variable\n          is a non-integer.\n    \"\"\"\n\n    @patch.dict(os.environ, {\"INT_ENV_VAR\": \"12345\"})\n    def test_get_int_env_var(self):\n        \"\"\"\n        Test that get_int_env_var returns the expected integer value.\n        \"\"\"\n        result = get_int_env_var(\"INT_ENV_VAR\")\n        self.assertEqual(result, 12345)\n\n    @patch.dict(os.environ, {\"INT_ENV_VAR\": \"\"})\n    def test_get_int_env_var_with_empty_env_var(self):\n        \"\"\"\n        This test verifies that the get_int_env_var function returns None\n        when the environment variable is empty.\n\n        \"\"\"\n        result = get_int_env_var(\"INT_ENV_VAR\")\n        self.assertIsNone(result)\n\n    @patch.dict(os.environ, {\"INT_ENV_VAR\": \"not_an_int\"})\n    def test_get_int_env_var_with_non_integer(self):\n        \"\"\"\n        Test that get_int_env_var returns None when the environment variable is\n        a non-integer.\n\n        \"\"\"\n        result = get_int_env_var(\"INT_ENV_VAR\")\n        self.assertIsNone(result)\n\n\nclass TestGetEnvVars(unittest.TestCase):\n    \"\"\"\n    Test suite for the get_env_vars function.\n    \"\"\"\n\n    def setUp(self):\n        env_keys = [\n            \"GH_APP_ID\",\n            \"GH_APP_INSTALLATION_ID\",\n            \"GH_APP_PRIVATE_KEY\",\n            \"GH_TOKEN\",\n            \"GHE\",\n            \"HIDE_AUTHOR\",\n            \"HIDE_ITEMS_CLOSED_COUNT\",\n            \"HIDE_LABEL_METRICS\",\n            \"HIDE_TIME_TO_ANSWER\",\n            \"HIDE_TIME_TO_CLOSE\",\n            \"HIDE_TIME_TO_FIRST_RESPONSE\",\n            \"IGNORE_USERS\",\n            \"LABELS_TO_MEASURE\",\n            \"NON_MENTIONING_LINKS\",\n            \"OUTPUT_FILE\",\n            \"REPORT_TITLE\",\n            \"SEARCH_QUERY\",\n            \"RATE_LIMIT_BYPASS\",\n        ]\n        for key in env_keys:\n            if key in os.environ:\n                del os.environ[key]\n\n    @patch.dict(\n        os.environ,\n        {\n            \"GH_APP_ID\": \"12345\",\n            \"GH_APP_INSTALLATION_ID\": \"678910\",\n            \"GH_APP_PRIVATE_KEY\": \"hello\",\n            \"GH_TOKEN\": \"\",\n            \"GH_ENTERPRISE_URL\": \"\",\n            \"HIDE_AUTHOR\": \"\",\n            \"HIDE_ITEMS_CLOSED_COUNT\": \"false\",\n            \"HIDE_LABEL_METRICS\": \"\",\n            \"HIDE_TIME_TO_ANSWER\": \"\",\n            \"HIDE_TIME_TO_CLOSE\": \"\",\n            \"HIDE_TIME_TO_FIRST_RESPONSE\": \"\",\n            \"IGNORE_USERS\": \"\",\n            \"LABELS_TO_MEASURE\": \"\",\n            \"NON_MENTIONING_LINKS\": \"false\",\n            \"OUTPUT_FILE\": \"\",\n            \"REPORT_TITLE\": \"\",\n            \"SEARCH_QUERY\": SEARCH_QUERY,\n            \"RATE_LIMIT_BYPASS\": \"false\",\n        },\n        clear=True,\n    )\n    def test_get_env_vars_with_github_app(self):\n        \"\"\"Test that all environment variables are set correctly using GitHub App\"\"\"\n        expected_result = EnvVars(\n            gh_app_id=12345,\n            gh_app_installation_id=678910,\n            gh_app_private_key_bytes=b\"hello\",\n            gh_app_enterprise_only=False,\n            gh_token=\"\",\n            ghe=\"\",\n            hide_author=False,\n            hide_items_closed_count=False,\n            hide_label_metrics=False,\n            hide_time_to_answer=False,\n            hide_time_to_close=False,\n            hide_time_to_first_response=False,\n            ignore_user=[],\n            labels_to_measure=[],\n            enable_mentor_count=False,\n            min_mentor_comments=\"10\",\n            max_comments_eval=\"20\",\n            heavily_involved_cutoff=\"3\",\n            search_query=SEARCH_QUERY,\n            non_mentioning_links=False,\n            report_title=\"\",\n            output_file=\"\",\n            draft_pr_tracking=False,\n        )\n        result = get_env_vars(True)\n        self.assertEqual(str(result), str(expected_result))\n\n    @patch.dict(\n        os.environ,\n        {\n            \"GH_APP_ID\": \"\",\n            \"GH_APP_INSTALLATION_ID\": \"\",\n            \"GH_APP_PRIVATE_KEY\": \"\",\n            \"GH_ENTERPRISE_URL\": \"\",\n            \"GH_TOKEN\": TOKEN,\n            \"HIDE_AUTHOR\": \"\",\n            \"HIDE_ITEMS_CLOSED_COUNT\": \"false\",\n            \"HIDE_LABEL_METRICS\": \"\",\n            \"HIDE_TIME_TO_ANSWER\": \"\",\n            \"HIDE_TIME_TO_CLOSE\": \"\",\n            \"HIDE_TIME_TO_FIRST_RESPONSE\": \"\",\n            \"IGNORE_USERS\": \"\",\n            \"LABELS_TO_MEASURE\": \"\",\n            \"NON_MENTIONING_LINKS\": \"false\",\n            \"OUTPUT_FILE\": \"\",\n            \"REPORT_TITLE\": \"\",\n            \"SEARCH_QUERY\": SEARCH_QUERY,\n        },\n        clear=True,\n    )\n    def test_get_env_vars_with_token(self):\n        \"\"\"Test that all environment variables are set correctly using a list of repositories\"\"\"\n        expected_result = EnvVars(\n            gh_app_id=None,\n            gh_app_installation_id=None,\n            gh_app_private_key_bytes=b\"\",\n            gh_app_enterprise_only=False,\n            gh_token=TOKEN,\n            ghe=\"\",\n            hide_author=False,\n            hide_items_closed_count=False,\n            hide_label_metrics=False,\n            hide_time_to_answer=False,\n            hide_time_to_close=False,\n            hide_time_to_first_response=False,\n            ignore_user=[],\n            labels_to_measure=[],\n            enable_mentor_count=False,\n            min_mentor_comments=\"10\",\n            max_comments_eval=\"20\",\n            heavily_involved_cutoff=\"3\",\n            search_query=SEARCH_QUERY,\n            non_mentioning_links=False,\n            report_title=\"\",\n            output_file=\"\",\n        )\n        result = get_env_vars(True)\n        self.assertEqual(str(result), str(expected_result))\n\n    @patch.dict(\n        os.environ,\n        {\n            \"GH_APP_ID\": \"\",\n            \"GH_APP_INSTALLATION_ID\": \"\",\n            \"GH_APP_PRIVATE_KEY\": \"\",\n            \"GH_TOKEN\": \"\",\n            \"SEARCH_QUERY\": SEARCH_QUERY,\n            \"HIDE_ITEMS_CLOSED_COUNT\": \"false\",\n        },\n        clear=True,\n    )\n    def test_get_env_vars_missing_token(self):\n        \"\"\"Test that an error is raised if the TOKEN environment variables is not set\"\"\"\n        with self.assertRaises(ValueError):\n            get_env_vars(True)\n\n    @patch.dict(\n        os.environ,\n        {\n            \"GH_APP_ID\": \"\",\n            \"GH_APP_INSTALLATION_ID\": \"\",\n            \"GH_APP_PRIVATE_KEY\": \"\",\n            \"GH_TOKEN\": TOKEN,\n            \"SEARCH_QUERY\": \"\",\n            \"HIDE_ITEMS_CLOSED_COUNT\": \"false\",\n        },\n        clear=True,\n    )\n    def test_get_env_vars_missing_query(self):\n        \"\"\"Test that an error is raised if the SEARCH_QUERY environment variable is not set.\"\"\"\n\n        with self.assertRaises(ValueError):\n            get_env_vars(True)\n\n    @patch.dict(\n        os.environ,\n        {\n            \"GH_APP_ID\": \"\",\n            \"GH_APP_INSTALLATION_ID\": \"\",\n            \"GH_APP_PRIVATE_KEY\": \"\",\n            \"GH_TOKEN\": TOKEN,\n            \"GH_ENTERPRISE_URL\": \"\",\n            \"HIDE_AUTHOR\": \"true\",\n            \"HIDE_ITEMS_CLOSED_COUNT\": \"true\",\n            \"HIDE_LABEL_METRICS\": \"true\",\n            \"HIDE_TIME_TO_ANSWER\": \"true\",\n            \"HIDE_TIME_TO_CLOSE\": \"true\",\n            \"HIDE_TIME_TO_FIRST_RESPONSE\": \"true\",\n            \"IGNORE_USERS\": \"\",\n            \"LABELS_TO_MEASURE\": \"waiting-for-review,waiting-for-manager\",\n            \"NON_MENTIONING_LINKS\": \"true\",\n            \"OUTPUT_FILE\": \"issue_metrics.md\",\n            \"REPORT_TITLE\": \"Issue Metrics\",\n            \"SEARCH_QUERY\": SEARCH_QUERY,\n            \"RATE_LIMIT_BYPASS\": \"true\",\n            \"DRAFT_PR_TRACKING\": \"True\",\n        },\n    )\n    def test_get_env_vars_optional_values(self):\n        \"\"\"Test that optional values are set to their default values if not provided\"\"\"\n        expected_result = EnvVars(\n            gh_app_id=None,\n            gh_app_installation_id=None,\n            gh_app_private_key_bytes=b\"\",\n            gh_app_enterprise_only=False,\n            gh_token=TOKEN,\n            ghe=\"\",\n            hide_author=True,\n            hide_items_closed_count=True,\n            hide_label_metrics=True,\n            hide_time_to_answer=True,\n            hide_time_to_close=True,\n            hide_time_to_first_response=True,\n            ignore_user=[],\n            labels_to_measure=[\"waiting-for-review\", \"waiting-for-manager\"],\n            enable_mentor_count=False,\n            min_mentor_comments=10,\n            max_comments_eval=20,\n            heavily_involved_cutoff=3,\n            search_query=SEARCH_QUERY,\n            non_mentioning_links=True,\n            report_title=\"Issue Metrics\",\n            output_file=\"issue_metrics.md\",\n            rate_limit_bypass=True,\n            draft_pr_tracking=True,\n        )\n        result = get_env_vars(True)\n        self.assertEqual(str(result), str(expected_result))\n\n    @patch.dict(\n        os.environ,\n        {\n            \"GH_APP_ID\": \"\",\n            \"GH_APP_INSTALLATION_ID\": \"\",\n            \"GH_APP_PRIVATE_KEY\": \"\",\n            \"GH_TOKEN\": \"TOKEN\",\n            \"SEARCH_QUERY\": SEARCH_QUERY,\n        },\n        clear=True,\n    )\n    def test_get_env_vars_optionals_are_defaulted(self):\n        \"\"\"Test that optional values are set to their default values if not provided\"\"\"\n        expected_result = EnvVars(\n            gh_app_id=None,\n            gh_app_installation_id=None,\n            gh_app_private_key_bytes=b\"\",\n            gh_app_enterprise_only=False,\n            gh_token=\"TOKEN\",\n            ghe=\"\",\n            hide_author=False,\n            hide_items_closed_count=False,\n            hide_label_metrics=False,\n            hide_time_to_answer=False,\n            hide_time_to_close=False,\n            hide_time_to_first_response=False,\n            ignore_user=[],\n            labels_to_measure=[],\n            enable_mentor_count=False,\n            min_mentor_comments=\"10\",\n            max_comments_eval=\"20\",\n            heavily_involved_cutoff=\"3\",\n            search_query=SEARCH_QUERY,\n            non_mentioning_links=False,\n            report_title=\"Issue Metrics\",\n            output_file=\"\",\n            rate_limit_bypass=False,\n            draft_pr_tracking=False,\n        )\n        result = get_env_vars(True)\n        self.assertEqual(str(result), str(expected_result))\n\n    @patch.dict(\n        os.environ,\n        {\n            \"ORGANIZATION\": \"my_organization\",\n            \"GH_APP_ID\": \"12345\",\n            \"GH_APP_INSTALLATION_ID\": \"\",\n            \"GH_APP_PRIVATE_KEY\": \"\",\n            \"GH_TOKEN\": \"\",\n            \"SEARCH_QUERY\": SEARCH_QUERY,\n        },\n        clear=True,\n    )\n    def test_get_env_vars_auth_with_github_app_installation_missing_inputs(self):\n        \"\"\"Test that an error is raised there are missing inputs for the gh app\"\"\"\n        with self.assertRaises(ValueError) as context_manager:\n            get_env_vars(True)\n        the_exception = context_manager.exception\n        self.assertEqual(\n            str(the_exception),\n            \"GH_APP_ID set and GH_APP_INSTALLATION_ID or GH_APP_PRIVATE_KEY variable not set\",\n        )\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
