[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "8"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apolloconfig/apollo"
sha = "4fa881a973996edf978c9b8e78719b437b64169c"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl apollo-portal -Dtest=GlobalSearchControllerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl apollo-portal -DtargetClasses=**.GlobalSearchController  -DtargetTests=**.GlobalSearchControllerTest  -DoutputFormats=XML"
coverage_report_path = "apollo-portal/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "apollo-portal/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 71.0
original_coverage = 71.0
mutation_kill_rate = 33.0
original_mutation_kill_rate = 33.0
covered_lines = [ 36, 37, 38, 39, 50,]
missed_lines = [ 46, 47,]

[input_info]
test_file_path = "apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/controller/GlobalSearchControllerTest.java"
focal_file_path = "apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/GlobalSearchController.java"
test_file_url = "https://github.com/apolloconfig/apollo/blob/4fa881a973996edf978c9b8e78719b437b64169c/apollo-portal/src/test/java/com/ctrip/framework/apollo/portal/controller/GlobalSearchControllerTest.java"
focal_file_url = "https://github.com/apolloconfig/apollo/blob/4fa881a973996edf978c9b8e78719b437b64169c/apollo-portal/src/main/java/com/ctrip/framework/apollo/portal/controller/GlobalSearchController.java"
first_commit_date = "2024-09-20"
last_commit_date = "2025-02-18"
test_file_content = "/*\n * Copyright 2024 Apollo Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\npackage com.ctrip.framework.apollo.portal.controller;\n\n/**\n * @author hujiyuan 2024-08-10\n */\n\nimport com.ctrip.framework.apollo.common.http.SearchResponseEntity;\nimport com.ctrip.framework.apollo.portal.component.config.PortalConfig;\nimport com.ctrip.framework.apollo.portal.entity.vo.ItemInfo;\nimport com.ctrip.framework.apollo.portal.service.GlobalSearchService;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\nimport org.springframework.http.MediaType;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\n\nimport java.util.*;\n\nimport static org.mockito.Mockito.*;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class GlobalSearchControllerTest {\n\n    private MockMvc mockMvc;\n\n    @Mock\n    private PortalConfig portalConfig;\n\n    @Mock\n    private GlobalSearchService globalSearchService;\n\n    @InjectMocks\n    private GlobalSearchController globalSearchController;\n\n    private final int perEnvSearchMaxResults = 200;\n\n    @Before\n    public void setUp() {\n        when(portalConfig.getPerEnvSearchMaxResults()).thenReturn(perEnvSearchMaxResults);\n        mockMvc = MockMvcBuilders.standaloneSetup(globalSearchController).build();\n    }\n\n    @Test\n    public void testGet_ItemInfo_BySearch_WithKeyAndValueAndActiveEnvs_ReturnEmptyItemInfos() throws Exception {\n        when(globalSearchService.getAllEnvItemInfoBySearch(anyString(), anyString(),eq(0),eq(perEnvSearchMaxResults))).thenReturn(SearchResponseEntity.ok(new ArrayList<>()));\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/global-search/item-info/by-key-or-value\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .param(\"key\", \"query-key\")\n                        .param(\"value\", \"query-value\"))\n                .andExpect(status().isOk())\n                .andExpect(content().json(\"{\\\"body\\\":[],\\\"hasMoreData\\\":false,\\\"message\\\":\\\"OK\\\",\\\"code\\\":200}\"));\n        verify(portalConfig,times(1)).getPerEnvSearchMaxResults();\n        verify(globalSearchService,times(1)).getAllEnvItemInfoBySearch(anyString(), anyString(),eq(0),eq(perEnvSearchMaxResults));\n    }\n\n    @Test\n    public void testGet_ItemInfo_BySearch_WithKeyAndValueAndActiveEnvs_ReturnExpectedItemInfos_ButOverPerEnvLimit() throws Exception {\n        List<ItemInfo> allEnvMockItemInfos = new ArrayList<>();\n        allEnvMockItemInfos.add(new ItemInfo(\"appid1\",\"env1\",\"cluster1\",\"namespace1\",\"query-key\",\"query-value\"));\n        allEnvMockItemInfos.add(new ItemInfo(\"appid2\",\"env2\",\"cluster2\",\"namespace2\",\"query-key\",\"query-value\"));\n        when(globalSearchService.getAllEnvItemInfoBySearch(eq(\"query-key\"), eq(\"query-value\"),eq(0),eq(perEnvSearchMaxResults))).thenReturn(SearchResponseEntity.okWithMessage(allEnvMockItemInfos,\"In DEV , PRO , more than \"+perEnvSearchMaxResults+\" items found (Exceeded the maximum search quantity for a single environment). Please enter more precise criteria to narrow down the search scope.\"));\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/global-search/item-info/by-key-or-value\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .param(\"key\", \"query-key\")\n                        .param(\"value\", \"query-value\"))\n                .andExpect(status().isOk())\n                .andExpect(content().json(\"{\\\"body\\\":[\" +\n                        \"            { \\\"appId\\\": \\\"appid1\\\",\\n\" +\n                        \"            \\\"envName\\\": \\\"env1\\\",\\n\" +\n                        \"            \\\"clusterName\\\": \\\"cluster1\\\",\\n\" +\n                        \"            \\\"namespaceName\\\": \\\"namespace1\\\",\\n\" +\n                        \"            \\\"key\\\": \\\"query-key\\\",\\n\" +\n                        \"            \\\"value\\\": \\\"query-value\\\"},\" +\n                        \"            { \\\"appId\\\": \\\"appid2\\\",\\n\" +\n                        \"            \\\"envName\\\": \\\"env2\\\",\\n\" +\n                        \"            \\\"clusterName\\\": \\\"cluster2\\\",\\n\" +\n                        \"            \\\"namespaceName\\\": \\\"namespace2\\\",\\n\" +\n                        \"            \\\"key\\\": \\\"query-key\\\",\\n\" +\n                        \"            \\\"value\\\": \\\"query-value\\\"}],\\\"hasMoreData\\\":true,\\\"message\\\":\\\"In DEV , PRO , more than 200 items found (Exceeded the maximum search quantity for a single environment). Please enter more precise criteria to narrow down the search scope.\\\",\\\"code\\\":200}\"));\n        verify(portalConfig,times(1)).getPerEnvSearchMaxResults();\n        verify(globalSearchService, times(1)).getAllEnvItemInfoBySearch(eq(\"query-key\"), eq(\"query-value\"),eq(0),eq(perEnvSearchMaxResults));\n    }\n\n    @Test\n    public void testGet_ItemInfo_BySearch_WithKeyAndValueAndActiveEnvs_ReturnExpectedItemInfos() throws Exception {\n        List<ItemInfo> allEnvMockItemInfos = new ArrayList<>();\n        allEnvMockItemInfos.add(new ItemInfo(\"appid1\",\"env1\",\"cluster1\",\"namespace1\",\"query-key\",\"query-value\"));\n        allEnvMockItemInfos.add(new ItemInfo(\"appid2\",\"env2\",\"cluster2\",\"namespace2\",\"query-key\",\"query-value\"));\n        when(globalSearchService.getAllEnvItemInfoBySearch(eq(\"query-key\"), eq(\"query-value\"),eq(0),eq(perEnvSearchMaxResults))).thenReturn(SearchResponseEntity.ok(allEnvMockItemInfos));\n\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/global-search/item-info/by-key-or-value\")\n                        .contentType(MediaType.APPLICATION_JSON)\n                        .param(\"key\", \"query-key\")\n                        .param(\"value\", \"query-value\"))\n                .andExpect(status().isOk())\n                .andExpect(content().json(\"{\\\"body\\\":[\" +\n                        \"            { \\\"appId\\\": \\\"appid1\\\",\\n\" +\n                        \"            \\\"envName\\\": \\\"env1\\\",\\n\" +\n                        \"            \\\"clusterName\\\": \\\"cluster1\\\",\\n\" +\n                        \"            \\\"namespaceName\\\": \\\"namespace1\\\",\\n\" +\n                        \"            \\\"key\\\": \\\"query-key\\\",\\n\" +\n                        \"            \\\"value\\\": \\\"query-value\\\"},\" +\n                        \"            { \\\"appId\\\": \\\"appid2\\\",\\n\" +\n                        \"            \\\"envName\\\": \\\"env2\\\",\\n\" +\n                        \"            \\\"clusterName\\\": \\\"cluster2\\\",\\n\" +\n                        \"            \\\"namespaceName\\\": \\\"namespace2\\\",\\n\" +\n                        \"            \\\"key\\\": \\\"query-key\\\",\\n\" +\n                        \"            \\\"value\\\": \\\"query-value\\\"}],\\\"hasMoreData\\\":false,\\\"message\\\":\\\"OK\\\",\\\"code\\\":200}\"));\n        verify(globalSearchService, times(1)).getAllEnvItemInfoBySearch(eq(\"query-key\"), eq(\"query-value\"),eq(0),eq(perEnvSearchMaxResults));\n    }\n\n}\n"
