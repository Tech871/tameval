[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "gorse-io/gorse"
sha = "260d55d158caa8c3bbbcbec93e574370e5be477e"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out base/util.go base/util_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting base/util.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 71.0
original_coverage = 90.0
mutation_kill_rate = 79.0
original_mutation_kill_rate = 93.0
covered_lines = [ 25, 26, 27, 28, 29, 30, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66,]
missed_lines = [ 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84,]

[input_info]
test_file_path = "base/util_test.go"
focal_file_path = "base/util.go"
test_file_url = "https://github.com/gorse-io/gorse/blob/260d55d158caa8c3bbbcbec93e574370e5be477e/base/util_test.go"
focal_file_url = "https://github.com/gorse-io/gorse/blob/260d55d158caa8c3bbbcbec93e574370e5be477e/base/util.go"
first_commit_date = "2021-03-02"
last_commit_date = "2025-01-26"
test_file_content = "// Copyright 2020 gorse Project Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage base\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestNewMatrix32(t *testing.T) {\n\ta := NewMatrix32(3, 4)\n\tassert.Equal(t, 3, len(a))\n\tassert.Equal(t, 4, len(a[0]))\n\tassert.Equal(t, 4, len(a[0]))\n\tassert.Equal(t, 4, len(a[0]))\n}\n\nfunc TestRangeInt(t *testing.T) {\n\ta := RangeInt(7)\n\tassert.Equal(t, 7, len(a))\n\tfor i := range a {\n\t\tassert.Equal(t, i, a[i])\n\t}\n}\n\nfunc TestRepeatFloat32s(t *testing.T) {\n\ta := RepeatFloat32s(3, 0.1)\n\tassert.Equal(t, []float32{0.1, 0.1, 0.1}, a)\n}\n\nfunc TestNewMatrixInt(t *testing.T) {\n\tm := NewMatrixInt(4, 3)\n\tassert.Equal(t, 4, len(m))\n\tfor _, v := range m {\n\t\tassert.Equal(t, 3, len(v))\n\t}\n}\n\nfunc TestNewTensor32(t *testing.T) {\n\ta := NewTensor32(3, 4, 5)\n\tassert.Equal(t, 3, len(a))\n\tassert.Equal(t, 4, len(a[0]))\n\tassert.Equal(t, 5, len(a[0][0]))\n}"
