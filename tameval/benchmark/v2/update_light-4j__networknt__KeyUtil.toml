[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "networknt/light-4j"
sha = "e6d76041442a1265369701cef8141b88c027f15c"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl security -Dtest=KeyUtilTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl security -DtargetClasses=**.KeyUtil  -DtargetTests=**.KeyUtilTest  -DoutputFormats=XML"
coverage_report_path = "security/target/site/jacoco-ut/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "security/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 79.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "security/src/test/java/com/networknt/security/KeyUtilTest.java"
focal_file_path = "security/src/main/java/com/networknt/security/KeyUtil.java"
test_file_url = "https://github.com/networknt/light-4j/blob/e6d76041442a1265369701cef8141b88c027f15c/security/src/test/java/com/networknt/security/KeyUtilTest.java"
focal_file_url = "https://github.com/networknt/light-4j/blob/e6d76041442a1265369701cef8141b88c027f15c/security/src/main/java/com/networknt/security/KeyUtil.java"
first_commit_date = "2023-12-18"
last_commit_date = "2024-01-04"
test_file_content = "package com.networknt.security;\n\nimport com.networknt.utility.HashUtil;\nimport org.junit.Test;\n\nimport java.security.KeyPair;\n\npublic class KeyUtilTest {\n    @Test\n    public void testSerializePublicKey() throws Exception {\n        KeyPair keyPair = KeyUtil.generateKeyPair(\"RSA\", 2048);\n        System.out.println(\"public key = \" + KeyUtil.serializePublicKey(keyPair.getPublic()));\n        System.out.println(\"private key = \" + KeyUtil.serializePrivateKey(keyPair.getPrivate()));\n    }\n\n    @Test\n    public void testDeserializeKey() throws Exception {\n        KeyPair keyPair = KeyUtil.generateKeyPair(\"RSA\", 2048);\n        String publicKey = KeyUtil.serializePublicKey(keyPair.getPublic());\n        String privateKey = KeyUtil.serializePrivateKey(keyPair.getPrivate());\n        System.out.println(\"public key = \" + publicKey);\n        System.out.println(\"private key = \" + privateKey);\n        KeyUtil.deserializePrivateKey(privateKey, \"RSA\");\n        KeyUtil.deserializePublicKey(publicKey, \"RSA\");\n    }\n\n    /**\n     * This is the method to generate a JWK and keys for the database population per environment.\n     *\n     * @throws Exception exception\n     */\n    @Test\n    public void testGenerateJwk() throws Exception {\n        KeyPair longKeyPair = KeyUtil.generateKeyPair(\"RSA\", 2048);\n        String longKeyId = HashUtil.generateUUID();\n        System.out.println(\"longKeyId = \" + longKeyId);\n        String publicKey = KeyUtil.serializePublicKey(longKeyPair.getPublic());\n        System.out.println(\"long public key = \" + publicKey);\n        String privateKey = KeyUtil.serializePrivateKey(longKeyPair.getPrivate());\n        System.out.println(\"long private key = \" + privateKey);\n\n        KeyPair currKeyPair = KeyUtil.generateKeyPair(\"RSA\", 2048);\n        String currKeyId = HashUtil.generateUUID();\n        System.out.println(\"currKeyId = \" + currKeyId);\n        publicKey = KeyUtil.serializePublicKey(currKeyPair.getPublic());\n        System.out.println(\"curr public key = \" + publicKey);\n        privateKey = KeyUtil.serializePrivateKey(currKeyPair.getPrivate());\n        System.out.println(\"curr private key = \" + privateKey);\n\n        String jwk = KeyUtil.generateJwk(longKeyPair.getPublic(), longKeyId, currKeyPair.getPublic(), currKeyId, null, null);\n        System.out.println(\"jwk = \" + jwk);\n    }\n}"
