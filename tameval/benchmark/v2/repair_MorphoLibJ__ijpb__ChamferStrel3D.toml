[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "ijpb/MorphoLibJ"
sha = "7d691dff36baa0bbca6fd17f71c93d8414b75b17"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ChamferStrel3DTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ChamferStrel3D  -DtargetTests=**.ChamferStrel3DTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = 92.0
original_mutation_kill_rate = 92.0
covered_lines = [ 59, 60, 61, 63, 64, 68, 69, 71, 72, 73, 75, 77, 78, 80, 82, 84, 86, 91, 100, 101, 107, 113, 114, 120,]
missed_lines = [ 126,]

[input_info]
test_file_path = "src/test/java/inra/ijpb/morphology/strel/ChamferStrel3DTest.java"
focal_file_path = "src/main/java/inra/ijpb/morphology/strel/ChamferStrel3D.java"
test_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/test/java/inra/ijpb/morphology/strel/ChamferStrel3DTest.java"
focal_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/main/java/inra/ijpb/morphology/strel/ChamferStrel3D.java"
first_commit_date = "2022-09-28"
last_commit_date = "2024-07-23"
test_file_content = "\n\npackage inra.ijpb.morphology.strel;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\nimport ij.ImageStack;\nimport inra.ijpb.binary.distmap.ChamferMask3D;\nimport inra.ijpb.data.image.Images3D;\nimport inra.ijpb.morphology.Strel3D;\n\n\npublic class ChamferStrel3DTest\n{\n    \n    \n    @Test\n    public final void testGetSize_Borgefors_Radius2()\n    {\n        ChamferMask3D mask = ChamferMask3D.BORGEFORS;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(mask, radius);\n        \n        int[] size = strel.getSize();\n        assertEquals(3, size.length);\n        assertEquals(5, size[0]);\n        assertEquals(5, size[1]);\n        assertEquals(5, size[2]);\n    }\n    \n    \n    @Test\n    public final void testGetOffset_Borgefors_Radius2()\n    {\n        ChamferMask3D mask = ChamferMask3D.BORGEFORS;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(mask, radius);\n        \n        int[] offset = strel.getOffset();\n        assertEquals(3, offset.length);\n        assertEquals(2, offset[0]);\n        assertEquals(2, offset[1]);\n        assertEquals(2, offset[2]);\n    }\n\n    \n    @Test\n    public final void testGetMask3D_Borgefors_Radius2()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.BORGEFORS;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        int[][][] mask = strel.getMask3D();\n        assertEquals(5, mask.length);\n        assertEquals(5, mask[0].length);\n        assertEquals(5, mask[0][0].length);\n        \n        assertTrue(mask[0][0][2] == 0);\n        assertTrue(mask[0][2][0] == 0);\n        assertTrue(mask[0][2][2] > 0);\n        assertTrue(mask[0][2][4] == 0);\n        assertTrue(mask[0][4][2] == 0);\n        \n        assertTrue(mask[2][0][0] == 0);\n        assertTrue(mask[2][0][2] > 0);\n        assertTrue(mask[2][0][4] == 0);\n        \n        assertTrue(mask[2][2][0] > 0);\n        assertTrue(mask[2][2][4] > 0);\n        \n        assertTrue(mask[2][4][0] == 0);\n        assertTrue(mask[2][4][2] > 0);\n        assertTrue(mask[2][4][4] == 0);\n\n        assertTrue(mask[4][0][2] == 0);\n        assertTrue(mask[4][2][0] == 0);\n        assertTrue(mask[4][2][2] > 0);\n        assertTrue(mask[4][2][4] == 0);\n        assertTrue(mask[4][4][2] == 0);\n    }\n    \n    \n    @Test\n    public final void verifyGetMask3D_Borgefors_Radius2()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.BORGEFORS;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        int[][][] mask = strel.getMask3D();\n        assertEquals(5, mask.length);\n        assertEquals(5, mask[0].length);\n        assertEquals(5, mask[0][0].length);\n        \n        assertEquals(0, mask[0][0][2]);\n        assertEquals(0, mask[0][2][0]);\n        assertTrue(mask[0][2][2] > 0);\n        assertEquals(0, mask[0][2][4]);\n        assertEquals(0, mask[0][4][2]);\n        \n        assertEquals(0, mask[2][0][0]);\n        assertTrue(mask[2][0][2] > 0);\n        assertEquals(0, mask[2][0][4]);\n        \n        assertTrue(mask[2][2][0] > 0);\n        assertTrue(mask[2][2][4] > 0);\n        \n        assertEquals(0, mask[2][4][0]);\n        assertTrue(mask[2][4][2] > 0);\n        assertEquals(0, mask[2][4][4]);\n\n        assertEquals(0, mask[4][0][2]);\n        assertEquals(0, mask[4][2][0]);\n        assertTrue(mask[4][2][2] > 0);\n        assertEquals(0, mask[4][2][4]);\n        assertEquals(0, mask[4][4][2]);\n    }\n    \n    \n    @Test\n    public final void testGetMask3D_Svensson_Radius2()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.SVENSSON_3_4_5_7;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        int[][][] mask = strel.getMask3D();\n        assertEquals(5, mask.length);\n        assertEquals(5, mask[0].length);\n        assertEquals(5, mask[0][0].length);\n        \n        assertTrue(mask[0][0][2] == 0);\n        assertTrue(mask[0][2][0] == 0);\n        assertTrue(mask[0][2][2] > 0);\n        assertTrue(mask[0][2][4] == 0);\n        assertTrue(mask[0][4][2] == 0);\n        \n        assertTrue(mask[2][0][0] == 0);\n        assertTrue(mask[2][0][2] > 0);\n        assertTrue(mask[2][0][4] == 0);\n        \n        assertTrue(mask[2][2][0] > 0);\n        assertTrue(mask[2][2][4] > 0);\n        \n        assertTrue(mask[2][4][0] == 0);\n        assertTrue(mask[2][4][2] > 0);\n        assertTrue(mask[2][4][4] == 0);\n\n        assertTrue(mask[4][0][2] == 0);\n        assertTrue(mask[4][2][0] == 0);\n        assertTrue(mask[4][2][2] > 0);\n        assertTrue(mask[4][2][4] == 0);\n        assertTrue(mask[4][4][2] == 0);\n    }\n    \n    \n    @Test\n    public final void testGetMask3D_Svensson_Radius3()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.SVENSSON_3_4_5_7;\n        double radius = 3.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        int[][][] mask = strel.getMask3D();\n        assertEquals(7, mask.length);\n        assertEquals(7, mask[0].length);\n        assertEquals(7, mask[0][0].length);\n    }\n    \n    \n    @Test\n    public final void testGetShifts3D_Svensson_Radius2()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.SVENSSON_3_4_5_7;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        int[][] shifts = strel.getShifts3D();\n        assertEquals(81, shifts.length);\n    }\n    \n    \n    @Test\n    public final void testDilation_Svensson_Radius2_singleDot()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.SVENSSON_3_4_5_7;\n        double radius = 3.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        ImageStack image = ImageStack.create(7, 7, 7, 8);\n        image.setVoxel(3, 3, 3, 255);\n        \n        ImageStack res = strel.dilation(image);\n        \n        assertEquals(image.getWidth(), res.getWidth());\n        assertEquals(image.getHeight(), res.getHeight());\n        assertEquals(image.getSize(), res.getSize());\n        \n        assertTrue(res.getVoxel(0, 0, 0) == 0);\n        assertTrue(res.getVoxel(3, 0, 0) == 0);\n        assertTrue(res.getVoxel(6, 0, 0) == 0);\n        assertTrue(res.getVoxel(0, 3, 0) == 0);\n        assertTrue(res.getVoxel(3, 3, 0) > 0);\n        assertTrue(res.getVoxel(6, 3, 0) == 0);\n        assertTrue(res.getVoxel(0, 6, 0) == 0);\n        assertTrue(res.getVoxel(3, 6, 0) == 0);\n        assertTrue(res.getVoxel(6, 6, 0) == 0);\n\n        \n        assertTrue(res.getVoxel(0, 0, 3) == 0);\n        assertTrue(res.getVoxel(3, 0, 3) > 0);\n        assertTrue(res.getVoxel(6, 0, 3) == 0);\n        assertTrue(res.getVoxel(0, 3, 3) > 0);\n        assertTrue(res.getVoxel(6, 3, 3) > 0);\n        assertTrue(res.getVoxel(0, 6, 3) == 0);\n        assertTrue(res.getVoxel(3, 6, 3) > 0);\n        assertTrue(res.getVoxel(6, 6, 3) == 0);\n        \n        \n        assertTrue(res.getVoxel(0, 0, 6) == 0);\n        assertTrue(res.getVoxel(3, 0, 6) == 0);\n        assertTrue(res.getVoxel(6, 0, 6) == 0);\n        assertTrue(res.getVoxel(0, 3, 6) == 0);\n        assertTrue(res.getVoxel(3, 3, 6) > 0);\n        assertTrue(res.getVoxel(6, 3, 6) == 0);\n        assertTrue(res.getVoxel(0, 6, 6) == 0);\n        assertTrue(res.getVoxel(3, 6, 6) == 0);\n        assertTrue(res.getVoxel(6, 6, 6) == 0);\n    }\n    \n    \n    @Test\n    public final void testErosion_Svensson_Radius2_singleDot()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.SVENSSON_3_4_5_7;\n        double radius = 3.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        ImageStack image = ImageStack.create(7, 7, 7, 8);\n        Images3D.fill(image, 255);\n        image.setVoxel(3, 3, 3, 0);\n        \n        ImageStack res = strel.erosion(image);\n        \n        assertEquals(image.getWidth(), res.getWidth());\n        assertEquals(image.getHeight(), res.getHeight());\n        assertEquals(image.getSize(), res.getSize());\n        \n        assertTrue(res.getVoxel(0, 0, 0) > 0);\n        assertTrue(res.getVoxel(3, 0, 0) > 0);\n        assertTrue(res.getVoxel(6, 0, 0) > 0);\n        assertTrue(res.getVoxel(0, 3, 0) > 0);\n        assertTrue(res.getVoxel(3, 3, 0) == 0);\n        assertTrue(res.getVoxel(6, 3, 0) > 0);\n        assertTrue(res.getVoxel(0, 6, 0) > 0);\n        assertTrue(res.getVoxel(3, 6, 0) > 0);\n        assertTrue(res.getVoxel(6, 6, 0) > 0);\n\n        \n        assertTrue(res.getVoxel(0, 0, 3) > 0);\n        assertTrue(res.getVoxel(3, 0, 3) == 0);\n        assertTrue(res.getVoxel(6, 0, 3) > 0);\n        assertTrue(res.getVoxel(0, 3, 3) == 0);\n        assertTrue(res.getVoxel(6, 3, 3) == 0);\n        assertTrue(res.getVoxel(0, 6, 3) > 0);\n        assertTrue(res.getVoxel(3, 6, 3) == 0);\n        assertTrue(res.getVoxel(6, 6, 3) > 0);\n        \n        \n        assertTrue(res.getVoxel(0, 0, 6) > 0);\n        assertTrue(res.getVoxel(3, 0, 6) > 0);\n        assertTrue(res.getVoxel(6, 0, 6) > 0);\n        assertTrue(res.getVoxel(0, 3, 6) > 0);\n        assertTrue(res.getVoxel(3, 3, 6) == 0);\n        assertTrue(res.getVoxel(6, 3, 6) > 0);\n        assertTrue(res.getVoxel(0, 6, 6) > 0);\n        assertTrue(res.getVoxel(3, 6, 6) > 0);\n        assertTrue(res.getVoxel(6, 6, 6) > 0);\n    }\n    \n    \n    @Test\n    public final void checkGetMask3D_Borgefors_Radius2()\n    {\n        ChamferMask3D chamferMask = ChamferMask3D.BORGEFORS;\n        double radius = 2.0;\n        \n        Strel3D strel = new ChamferStrel3D(chamferMask, radius);\n        \n        int[][][] mask = strel.getMask3D();\n        assertEquals(5, mask.length);\n        assertEquals(5, mask[0].length);\n        assertEquals(5, mask[0][0].length);\n        \n        assertTrue(mask[0][0][2] == 0);\n        assertTrue(mask[0][2][0] == 0);\n        assertTrue(mask[0][2][2] > 0);\n        assertTrue(mask[0][2][4] == 0);\n        assertTrue(mask[0][4][2] == 0);\n        \n        assertTrue(mask[2][0][0] == 0);\n        assertTrue(mask[2][0][2] > 0);\n        assertTrue(mask[2][0][4] == 0);\n        \n        assertTrue(mask[2][2][0] > 0);\n        assertTrue(mask[2][2][4] > 0);\n        \n        assertTrue(mask[2][4][0] == 0);\n        assertTrue(mask[2][4][2] > 0);\n        assertTrue(mask[2][4][4] == 0);\n\n        assertTrue(mask[4][0][2] == 0);\n        assertTrue(mask[4][2][0] == 0);\n        assertTrue(mask[4][2][2] > 0);\n        assertTrue(mask[4][2][4] == 0);\n        assertTrue(mask[4][4][2] == 0);\n    }\n}"
