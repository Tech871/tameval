[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "lenstronomy/lenstronomy"
sha = "370d932c8ded11da8b1e3c772266a87ead143136"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && pip install -r test_requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=lenstronomy/PointSource/Types/lensed_position.py -m pytest -q --junit-xml=test_output.xml test/test_PointSource/test_Types/test_lensed_position.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target lenstronomy.PointSource.Types.lensed_position --unit-test test.test_PointSource.test_Types.test_lensed_position --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target lenstronomy/PointSource/Types/lensed_position.py --unit-test test/test_PointSource/test_Types/test_lensed_position.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 30.0
original_coverage = 84.0
mutation_kill_rate = 42.0
original_mutation_kill_rate = 67.0
covered_lines = [ 0, 1, 3, 6, 24, 66, 94, 147, 157, 158, 160, 161, 162, 163, 172, 173, 174,]
missed_lines = [ 48, 49, 50, 51, 53, 54, 62, 63, 64, 74, 75, 76, 78, 79, 83, 84, 85, 88, 89, 90, 91, 92, 118, 119, 120, 121, 123, 130, 131, 133, 134, 135, 140, 142, 143, 144, 145, 165, 166, 167,]

[input_info]
test_file_path = "test/test_PointSource/test_Types/test_lensed_position.py"
focal_file_path = "lenstronomy/PointSource/Types/lensed_position.py"
test_file_url = "https://github.com/lenstronomy/lenstronomy/blob/370d932c8ded11da8b1e3c772266a87ead143136/test/test_PointSource/test_Types/test_lensed_position.py"
focal_file_url = "https://github.com/lenstronomy/lenstronomy/blob/370d932c8ded11da8b1e3c772266a87ead143136/lenstronomy/PointSource/Types/lensed_position.py"
first_commit_date = "2020-12-29"
last_commit_date = "2025-07-17"
test_file_content = "from lenstronomy.PointSource.Types.lensed_position import LensedPositions\nfrom lenstronomy.LensModel.lens_model import LensModel\nimport pytest\nimport numpy.testing as npt\n\nclass TestLensedPosition(object):\n    def setup_method(self):\n        lens_model = LensModel(lens_model_list=[\"SIS\"])\n        self.kwargs_lens = [{\"theta_E\": 1, \"center_x\": 0, \"center_y\": 0}]\n        self.ps_mag = LensedPositions(\n            lens_model=lens_model,\n            fixed_magnification=True,\n            point_source_frame_list=[0, 0],\n            index_lens_model_list=[[0]],\n        )\n        self.ps = LensedPositions(lens_model=lens_model, fixed_magnification=False)\n        self.ps_add = LensedPositions(\n            lens_model=lens_model, fixed_magnification=[False], additional_images=True\n        )\n        self.kwargs = {\"point_amp\": [2, 1], \"ra_image\": [0, 1.2], \"dec_image\": [0, 0]}\n        self.kwargs_mag = {\"source_amp\": 2, \"ra_image\": [0, 1.2], \"dec_image\": [0, 0]}\n\n    def test_source_amplitude(self):\n        amp = self.ps.source_amplitude(self.kwargs, kwargs_lens=self.kwargs_lens)\n        amp_mag = self.ps_mag.source_amplitude(\n            self.kwargs_mag, kwargs_lens=self.kwargs_lens\n        )\n        npt.assert_almost_equal(amp_mag, self.kwargs_mag[\"source_amp\"])\n        assert amp != amp_mag\n\nif __name__ == \"__main__\":\n    pytest.main()\n"
