[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.18"

[repo_info]
repository = "bytedance/gg"
sha = "420f8369dd6e235b8124691860e822d015969fb6"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out goption/goption.go goption/goption_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting goption/goption.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 66, 67, 68, 71, 72, 73, 76, 77, 78, 83, 84, 85, 86, 87, 91, 92, 93, 97, 98, 99, 100, 101, 109, 110, 111, 112, 113, 122, 123, 124, 125, 126, 135, 136, 137, 140, 141, 142, 145, 146, 147, 148, 152, 153, 154, 155, 159, 160, 161, 162, 163, 164, 168, 169, 170, 171, 172, 178, 179, 180, 181, 182, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 202, 203, 204, 205, 206, 213, 214, 215, 216, 217,]
missed_lines = [ 130, 131, 132,]

[input_info]
test_file_path = "goption/goption_test.go"
focal_file_path = "goption/goption.go"
test_file_url = "https://github.com/bytedance/gg/blob/420f8369dd6e235b8124691860e822d015969fb6/goption/goption_test.go"
focal_file_url = "https://github.com/bytedance/gg/blob/420f8369dd6e235b8124691860e822d015969fb6/goption/goption.go"
first_commit_date = "2025-05-18"
last_commit_date = "2025-05-20"
test_file_content = "// Copyright 2025 Bytedance Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage goption\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"testing\"\n\n\t\"github.com/bytedance/gg/gptr\"\n\t\"github.com/bytedance/gg/internal/assert\"\n)\n\nfunc TestOf(t *testing.T) {\n\t_ = Of(1, true)\n\t_ = OfPtr((*int)(nil))\n\t_ = OfPtr(gptr.Of(1))\n}\n\nfunc TestOValue(t *testing.T) {\n\tassert.Equal(t, 10, OK(10).Value())\n\tassert.Equal(t, 0, Nil[int]().Value())\n\tassert.Equal(t, 10, Of(10, true).Value())\n\tassert.Equal(t, 10, Of(10, false).Value()) // ðŸ’¡ NOTE: not recommend\n\tassert.Equal(t, 0, Of(0, false).Value())\n\n\tassert.Equal(t, 1, OfPtr(gptr.Of(1)).Value())\n\tassert.Equal(t, 0, OfPtr((*int)(nil)).Value())\n}\n\nfunc TestOValueOr(t *testing.T) {\n\tassert.Equal(t, 10, OK(10).ValueOr(1))\n\tassert.Equal(t, 1, Nil[int]().ValueOr(1))\n\tassert.Equal(t, 10, Of(10, true).ValueOr(1))\n\tassert.Equal(t, 1, Of(10, false).ValueOr(1)) // ðŸ’¡ NOTE: not recommend\n\tassert.Equal(t, 1, Of(0, false).ValueOr(1))\n}\n\nfunc TestOValueOrZero(t *testing.T) {\n\tassert.Equal(t, 10, OK(10).ValueOrZero())\n\tassert.Equal(t, 0, Nil[int]().ValueOrZero())\n\tassert.Equal(t, 10, Of(10, true).ValueOrZero())\n\tassert.Equal(t, 0, Of(10, false).ValueOrZero()) // ðŸ’¡ NOTE: not recommend\n\tassert.Equal(t, 0, Of(0, false).ValueOrZero())\n}\n\nfunc TestOOK(t *testing.T) {\n\tassert.True(t, OK(10).IsOK())\n\tassert.True(t, OK(0).IsOK())\n\tassert.False(t, Nil[int]().IsOK())\n\tassert.True(t, Of(10, true).IsOK())\n\tassert.False(t, Of(10, false).IsOK()) // ðŸ’¡ NOTE: not recommend\n\tassert.False(t, Of(0, false).IsOK())\n}\n\nfunc TestOIfOK(t *testing.T) {\n\tassert.Panic(t, func() { OK(10).IfOK(func(int) { panic(0) }) })\n\tassert.NotPanic(t, func() { Nil[int]().IfOK(func(int) { panic(0) }) })\n}\n\nfunc TestOIfNil(t *testing.T) {\n\tassert.NotPanic(t, func() { OK(10).IfNil(func() { panic(0) }) })\n\tassert.Panic(t, func() { Nil[int]().IfNil(func() { panic(0) }) })\n}\n\nfunc foo1() (int, bool) {\n\treturn 1, true\n}\n\nfunc foo2() O[int] {\n\treturn OK(1)\n}\n\nfunc Benchmark(b *testing.B) {\n\tb.Run(\"(int,bool)\", func(b *testing.B) {\n\t\tfor i := 0; i <= b.N; i++ {\n\t\t\tv, ok := foo1()\n\t\t\tif !ok || v != 1 {\n\t\t\t\tb.FailNow()\n\t\t\t}\n\t\t}\n\t})\n\tb.Run(\"goption\", func(b *testing.B) {\n\t\tfor i := 0; i <= b.N; i++ {\n\t\t\to := foo2()\n\t\t\tif !o.IsOK() || o.Value() != 1 {\n\t\t\t\tb.FailNow()\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc TestOtyp(t *testing.T) {\n\tassert.Equal(t, \"any\", Nil[any]().typ())\n\tassert.Equal(t, \"int\", Nil[int]().typ())\n\tassert.Equal(t, \"int\", OK(11).typ())\n\tassert.Equal(t, \"int8\", OK(int8(11)).typ())\n\tassert.Equal(t, \"any\", OK(any(11)).typ())\n\tassert.Equal(t, \"any\", OK[any](11).typ())\n\tassert.Equal(t, \"any\", OK[interface{}](11).typ())\n\tassert.Equal(t, \"any\", OK((interface{})(11)).typ())\n}\n\nfunc TestOString(t *testing.T) {\n\tassert.Equal(t, \"goption.Nil[int]()\", O[int]{}.String())\n\tassert.Equal(t, \"goption.Nil[int]()\", Nil[int]().String())\n\tassert.Equal(t, \"goption.OK[int](11)\", OK(11).String())\n\tassert.Equal(t, \"goption.OK[any](11)\", OK(any(11)).String())\n\tassert.Equal(t, \"goption.OK[int](11)\", fmt.Sprintf(\"%s\", OK(11)))\n}\n\nfunc TestJSON(t *testing.T) {\n\t{\n\t\tvar v *int\n\t\texpect, _ := json.Marshal(v)\n\t\tactual, _ := json.Marshal(OfPtr(v))\n\t\tassert.Equal(t, string(expect), string(actual))\n\t}\n\t{\n\t\tv := gptr.Of(1)\n\t\texpect, _ := json.Marshal(v)\n\t\tactual, _ := json.Marshal(OfPtr(v))\n\t\tassert.Equal(t, string(expect), string(actual))\n\t}\n\t{\n\t\tv := gptr.Of(\"test\")\n\t\texpect, _ := json.Marshal(v)\n\t\tactual, _ := json.Marshal(OfPtr(v))\n\t\tassert.Equal(t, string(expect), string(actual))\n\t}\n\n\t// Simple.\n\t{\n\t\tbs, err := json.Marshal(OK(\"test\"))\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, `\"test\"`, string(bs))\n\t}\n\t{\n\t\tbs, err := json.Marshal(Nil[string]())\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, `null`, string(bs))\n\t}\n\n\t{ // Bidirect\n\t\tbefore := OK(\"test\")\n\t\tbs, err := json.Marshal(before)\n\t\tassert.Nil(t, err)\n\n\t\tvar after1 O[int]\n\t\terr = json.Unmarshal(bs, &after1)\n\t\tassert.NotNil(t, err)\n\t\tassert.Equal(t, Nil[int](), after1)\n\n\t\tvar after2 O[float64]\n\t\terr = json.Unmarshal(bs, &after2)\n\t\tassert.NotNil(t, err)\n\t\tassert.Equal(t, Nil[float64](), after2)\n\n\t\tvar after3 O[string]\n\t\terr = json.Unmarshal(bs, &after3)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, before, after3)\n\t}\n\n\t{ // Unmarshal\n\t\tvar o O[string]\n\t\terr := json.Unmarshal([]byte(`\"test\"`), &o)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, OK(\"test\"), o)\n\t}\n\t{ // Unmarshal nil\n\t\tvar o O[string]\n\t\terr := json.Unmarshal([]byte(`null`), &o)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, Nil[string](), o)\n\t}\n\n\t// Struct field\n\t{\n\t\ttype Foo struct {\n\t\t\tBar O[int] `json:\"bar\"`\n\t\t}\n\n\t\tfoo1 := Foo{OK(0)}\n\t\tbs1, err := json.Marshal(foo1)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, `{\"bar\":0}`, string(bs1))\n\n\t\tfoo2 := Foo{}\n\t\tbs2, err := json.Marshal(foo2)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, `{\"bar\":null}`, string(bs2))\n\n\t\tfoo3 := Foo{}\n\t\terr = json.Unmarshal(bs1, &foo3)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, foo1, foo3)\n\n\t\tfoo4 := Foo{}\n\t\terr = json.Unmarshal(bs2, &foo4)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, foo2, foo4)\n\n\t\ttype Fooo struct {\n\t\t\tBar *O[int] `json:\"bar\"`\n\t\t}\n\n\t\tfoo5 := Fooo{}\n\t\terr = json.Unmarshal(bs1, &foo5)\n\t\tassert.Nil(t, err)\n\t\tassert.Equal(t, foo1.Bar, *foo5.Bar)\n\n\t\tfoo6 := Fooo{}\n\t\terr = json.Unmarshal(bs2, &foo6)\n\t\tassert.Nil(t, err)\n\t\tassert.True(t, foo6.Bar == nil)\n\t}\n}\n\nfunc TestOIsOK(t *testing.T) {\n\tassert.True(t, OK(0).IsOK())\n\tassert.False(t, Nil[int]().IsOK())\n\tassert.True(t, Of(10, true).IsOK())\n\tassert.False(t, Of(10, false).IsOK()) // ðŸ’¡ NOTE: not recommend\n\tassert.False(t, Of(0, false).IsOK())\n}\n\nfunc TestOIsNil(t *testing.T) {\n\tassert.False(t, OK(10).IsNil())\n\tassert.False(t, OK(0).IsNil())\n\tassert.True(t, Nil[int]().IsNil())\n\tassert.False(t, Of(10, true).IsNil())\n\tassert.True(t, Of(10, false).IsNil()) // ðŸ’¡ NOTE: not recommend\n\tassert.True(t, Of(0, false).IsNil())\n}\n\nfunc TestO_Alias(t *testing.T) {\n\tassert.True(t, OK(10).IsOK())\n\tassert.Panic(t, func() { OK(10).IfOK(func(int) { panic(0) }) })\n\tassert.NotPanic(t, func() { Nil[int]().IfOK(func(int) { panic(0) }) })\n}\n\nfunc TestOMap(t *testing.T) {\n\tassert.Equal(t, OK(\"1\"), Map(OK(1), strconv.Itoa))\n\tassert.Equal(t, Nil[string](), Map(Nil[int](), strconv.Itoa))\n\n\tassert.NotPanic(t, func() {\n\t\tf := func(v int) string { panic(\"function should not be called\") }\n\t\tassert.Equal(t, Nil[string](), Map(Nil[int](), f))\n\t})\n}\n\nfunc TestOThen(t *testing.T) {\n\tdo := func(v int) O[string] {\n\t\treturn OK(strconv.Itoa(v))\n\t}\n\tdoNil := func(v int) O[string] {\n\t\treturn Nil[string]()\n\t}\n\tassert.Equal(t, OK(\"1\"), Then(OK(1), do))\n\tassert.Equal(t, Nil[string](), Then(OK(1), doNil))\n\tassert.Equal(t, Nil[string](), Then(Nil[int](), do))\n\tassert.Equal(t, Nil[string](), Then(Nil[int](), doNil))\n\n\tassert.NotPanic(t, func() {\n\t\tf := func(v int) O[string] { panic(\"function should not be called\") }\n\t\tassert.Equal(t, Nil[string](), Then(Nil[int](), f))\n\t})\n}\n\nfunc TestOPtr(t *testing.T) {\n\tassert.Equal(t, gptr.Of(10), OK(10).Ptr())\n\tassert.Equal(t, nil, Nil[int]().Ptr())\n\n\t// Test modify.\n\t{\n\t\to := OK(10)\n\t\tptr := o.Ptr()\n\t\t*ptr = 1\n\t\tassert.Equal(t, OK(10), o)\n\t\tassert.True(t, o.Ptr() != o.Ptr()) // o is copied\n\t}\n}\n"
