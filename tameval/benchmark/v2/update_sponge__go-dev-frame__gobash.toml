[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "go-dev-frame/sponge"
sha = "e72bb7443479d95928a16711696af6523999a717"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/gobash/gobash.go pkg/gobash/gobash_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/gobash/gobash.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 45.0
mutation_kill_rate = nan
original_mutation_kill_rate = 16.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/gobash/gobash_test.go"
focal_file_path = "pkg/gobash/gobash.go"
test_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/gobash/gobash_test.go"
focal_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/gobash/gobash.go"
first_commit_date = "2022-10-17"
last_commit_date = "2025-04-10"
test_file_content = "package gobash\n\nimport (\n\t\"context\"\n\t\"runtime\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc init() {\n\tif runtime.GOOS == \"windows\" {\n\t\tSetExecutorPath(\"D:\\\\Program Files\\\\cmder\\\\vendor\\\\git-for-windows\\\\bin\\\\bash.exe\")\n\t}\n}\n\nfunc TestRun(t *testing.T) {\n\tcmds := []string{\n\t\t\"for i in $(seq 1 3); do  exit 1; done\",\n\t\t\"notFoundCommand\",\n\t\t\"pwd\",\n\t\t\"for i in $(seq 1 5); do echo 'test cmd' $i;sleep 0.2; done\",\n\t}\n\n\tfor _, cmd := range cmds {\n\t\tctx, _ := context.WithTimeout(context.Background(), time.Millisecond*500)\n\t\tresult := Run(ctx, cmd)\n\t\tfor v := range result.StdOut { // Real-time output of logs and error messages\n\t\t\tt.Logf(v)\n\t\t}\n\t\tif result.Err != nil {\n\t\t\tt.Logf(\"exec command failed, %v\", result.Err)\n\t\t}\n\t}\n}\nfunc TestRunC(t *testing.T) {\n\tcmds := map[string][]string{\n\t\t\"ping\": {\"www.baidu.com\"},\n\t\t\"pwd\":  {},\n\t\t\"go\":   {\"env\"},\n\t}\n\n\tfor cmd, args := range cmds {\n\t\tctx, _ := context.WithTimeout(context.Background(), time.Second)\n\t\tresult := RunC(ctx, cmd, args...)\n\t\tfor v := range result.StdOut { // Real-time output of logs and error messages\n\t\t\tt.Logf(v)\n\t\t}\n\t\tif result.Err != nil {\n\t\t\tt.Logf(\"exec command failed, %v\", result.Err)\n\t\t}\n\t}\n}\n\nfunc TestExec(t *testing.T) {\n\tcmds := []string{\n\t\t\"for i in $(seq 1 3); do  exit 1; done\",\n\t\t\"notFoundCommand\",\n\t\t\"pwd\",\n\t\t\"for i in $(seq 1 3); do echo 'test cmd' $i;sleep 0.2; done\",\n\t}\n\n\tfor _, cmd := range cmds {\n\t\tout, err := Exec(cmd)\n\t\tif err != nil {\n\t\t\tt.Logf(\"exec command[%s] failed, %v\\n\", cmd, err)\n\t\t\tcontinue\n\t\t}\n\t\tt.Logf(\"%s\\n\", out)\n\t}\n}\n\nfunc TestExecC(t *testing.T) {\n\tcmds := map[string][]string{\n\t\t\"pwd\":    {},\n\t\t\"go\":     {\"env\"},\n\t\t\"sponge\": {\"-h\"},\n\t}\n\n\tfor cmd, args := range cmds {\n\t\tout, err := ExecC(cmd, args...)\n\t\tif err != nil {\n\t\t\tt.Logf(\"exec command[%s] failed, %v\\n\", cmd, err)\n\t\t\tcontinue\n\t\t}\n\t\tt.Logf(\"%s\\n\", out)\n\t}\n}"
