[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "11"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "pkiraly/qa-catalogue"
sha = "66193841a3a3402c99e7e2392de68536ee11568b"

[run_info]
docker_image = "maven:3.8.4-openjdk-11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=CounterTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Counter  -DtargetTests=**.CounterTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 67.0
original_coverage = 93.0
mutation_kill_rate = 62.0
original_mutation_kill_rate = 88.0
covered_lines = [ 6, 7, 10, 11, 14, 15, 16, 19, 23, 31,]
missed_lines = [ 27, 35, 36, 37, 38,]

[input_info]
test_file_path = "src/test/java/de/gwdg/metadataqa/marc/utils/CounterTest.java"
focal_file_path = "src/main/java/de/gwdg/metadataqa/marc/utils/Counter.java"
test_file_url = "https://github.com/pkiraly/qa-catalogue/blob/66193841a3a3402c99e7e2392de68536ee11568b/src/test/java/de/gwdg/metadataqa/marc/utils/CounterTest.java"
focal_file_url = "https://github.com/pkiraly/qa-catalogue/blob/66193841a3a3402c99e7e2392de68536ee11568b/src/main/java/de/gwdg/metadataqa/marc/utils/Counter.java"
first_commit_date = "2021-01-11"
last_commit_date = "2024-04-01"
test_file_content = "package de.gwdg.metadataqa.marc.utils;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class CounterTest {\n\n  Counter<String> counter = new Counter();\n\n  @Test\n  public void testCount() {\n    counter.count(\"dummy\");\n    assertEquals(1, counter.get(\"dummy\"));\n  }\n\n  @Test\n  public void testAdd() {\n    counter.add(\"dummy\", 3);\n    assertEquals(3, counter.get(\"dummy\"));\n  }\n\n  @Test\n  public void testGet_one() {\n    counter.count(\"dummy\");\n    assertEquals(1, counter.get(\"dummy\"));\n  }\n\n  @Test\n  public void testKeys() {\n    counter.count(\"dummy\");\n    assertEquals(1, counter.keys().size());\n  }\n\n  @Test\n  public void testMap() {\n    counter.count(\"dummy\");\n    assertEquals(\"{dummy=1}\", counter.getMap().toString());\n  }\n\n\n}"
