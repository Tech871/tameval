[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "hahwul/dalfox"
sha = "793d32632c00b306ec3e00b517bebc24745888f8"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/printing/logger.go internal/printing/logger_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/printing/logger.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 61.0
original_coverage = 74.0
mutation_kill_rate = 27.0
original_mutation_kill_rate = 29.0
covered_lines = [ 12, 13, 18, 19, 20, 21, 22, 23, 27, 71, 72, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 122, 123, 124, 125, 126, 127, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 171, 172, 173, 174, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 217, 218, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 247, 248, 249, 250, 254, 255, 256, 257, 261, 262, 263, 264,]
missed_lines = [ 14, 15, 16, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 73, 74, 95, 96, 97, 98, 99, 100, 108, 109, 110, 118, 119, 120, 128, 129, 130, 139, 140, 141, 153, 154, 155, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 189, 190, 191, 213, 214, 215, 219, 220, 221, 222, 223,]

[input_info]
test_file_path = "internal/printing/logger_test.go"
focal_file_path = "internal/printing/logger.go"
test_file_url = "https://github.com/hahwul/dalfox/blob/793d32632c00b306ec3e00b517bebc24745888f8/internal/printing/logger_test.go"
focal_file_url = "https://github.com/hahwul/dalfox/blob/793d32632c00b306ec3e00b517bebc24745888f8/internal/printing/logger.go"
first_commit_date = "2025-03-15"
last_commit_date = "2025-04-19"
test_file_content = "package printing\n\nimport (\n\t\"strconv\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/briandowns/spinner\"\n\t\"github.com/hahwul/dalfox/v2/pkg/model\"\n\taurora \"github.com/logrusorgru/aurora\"\n)\n\nfunc Test_boolToColorStr(t *testing.T) {\n\ttype args struct {\n\t\tb       bool\n\t\toptions model.Options\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant string\n\t}{\n\t\t{\n\t\t\tname: \"false\",\n\t\t\targs: args{\n\t\t\t\tb: false,\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tAuroraObject: aurora.NewAurora(false),\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: \"false\",\n\t\t},\n\t\t{\n\t\t\tname: \"true\",\n\t\t\targs: args{\n\t\t\t\tb: true,\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t},\n\t\t\t},\n\t\t\twant: aurora.BrightGreen(strconv.FormatBool(true)).String(),\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := boolToColorStr(tt.args.b, tt.args.options); got != tt.want {\n\t\t\t\tt.Errorf(\"boolToColorStr() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc Test_SetSpinner(t *testing.T) {\n\ttype args struct {\n\t\tstr     string\n\t\toptions model.Options\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"no SpinnerObject\",\n\t\t\targs: args{\n\t\t\t\tstr:     \"\",\n\t\t\t\toptions: model.Options{},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"SpinnerObject\",\n\t\t\targs: args{\n\t\t\t\tstr: \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tSpinnerObject: spinner.New(spinner.CharSets[9], 100*time.Millisecond),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tSetSpinner(tt.args.str, tt.args.options)\n\t\t})\n\t}\n}\n\nfunc Test_RestartSpinner(t *testing.T) {\n\ttype args struct {\n\t\toptions model.Options\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"no SpinnerObject\",\n\t\t\targs: args{\n\t\t\t\toptions: model.Options{},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"SpinnerObject\",\n\t\t\targs: args{\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tSpinnerObject: spinner.New(spinner.CharSets[9], 100*time.Millisecond),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tRestartSpinner(tt.args.options)\n\t\t})\n\t}\n}\n\nfunc Test_StopSpinner(t *testing.T) {\n\ttype args struct {\n\t\toptions model.Options\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"no SpinnerObject\",\n\t\t\targs: args{\n\t\t\t\toptions: model.Options{},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"SpinnerObject\",\n\t\t\targs: args{\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tSpinnerObject: spinner.New(spinner.CharSets[9], 100*time.Millisecond),\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tStopSpinner(tt.args.options)\n\t\t})\n\t}\n}\n\nfunc TestSummary(t *testing.T) {\n\ttype args struct {\n\t\toptions model.Options\n\t\ttarget  string\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test\",\n\t\t\targs: args{\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tSilence:        true,\n\t\t\t\t\tMiningWordlist: \"\",\n\t\t\t\t\tBlindURL:       \"\",\n\t\t\t\t},\n\t\t\t\ttarget: \"\",\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tSummary(tt.args.options, tt.args.target)\n\t\t})\n\t}\n}\n\nfunc TestDalLog(t *testing.T) {\n\ttype args struct {\n\t\tlevel   string\n\t\ttext    string\n\t\toptions model.Options\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t}{\n\t\t{\n\t\t\tname: \"test - DEBUG\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"DEBUG\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - INFO\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"INFO\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - WEAK\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"WEAK\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - VULN\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"VULN\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - SYSTEM\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"SYSTEM\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - SYSTEM\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"SYSTEM\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tNoSpinner:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - SYSTEM-M\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"SYSTEM-M\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:         true,\n\t\t\t\t\tOutputAll:     true,\n\t\t\t\t\tMulticastMode: true,\n\t\t\t\t\tSilence:       true,\n\t\t\t\t\tIsLibrary:     true,\n\t\t\t\t\tAuroraObject:  aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - GREP\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"GREP\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - CODE\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"CODE\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - YELLOW\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"YELLOW\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - ERRROR\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"ERROR\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tIsLibrary:    true,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - PRINT\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"PRINT\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tSilence:      true,\n\t\t\t\t\tIsLibrary:    false,\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - PRINT\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"PRINT\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tSilence:      true,\n\t\t\t\t\tIsLibrary:    false,\n\t\t\t\t\tOutputFile:   \"/dev/null/dalfox-test\",\n\t\t\t\t\tFormat:       \"json\",\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"test - FTEXT\",\n\t\t\targs: args{\n\t\t\t\tlevel: \"INFO\",\n\t\t\t\ttext:  \"\",\n\t\t\t\toptions: model.Options{\n\t\t\t\t\tDebug:        true,\n\t\t\t\t\tOutputAll:    true,\n\t\t\t\t\tSilence:      true,\n\t\t\t\t\tIsLibrary:    false,\n\t\t\t\t\tOutputFile:   \"/dev/null/dalfox-test\",\n\t\t\t\t\tFormat:       \"json\",\n\t\t\t\t\tAuroraObject: aurora.NewAurora(true),\n\t\t\t\t\tScanResult: model.Result{\n\t\t\t\t\t\tLogs: []string{\"\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tDalLog(tt.args.level, tt.args.text, tt.args.options)\n\t\t})\n\t}\n}"
