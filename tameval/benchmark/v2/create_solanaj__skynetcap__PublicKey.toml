[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "skynetcap/solanaj"
sha = "b0f095290e5a1cdd1528bb50615cc56dc0add467"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=PublicKeyTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.PublicKey  -DtargetTests=**.PublicKeyTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 59.0
original_coverage = 68.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 22, 23, 26, 27, 29, 30, 33, 34, 37, 38, 42, 46, 67, 71, 72, 73, 76, 77, 78, 79, 81, 83, 84, 87, 114, 115, 116, 117, 124, 130, 132, 133, 134, 135, 136,]
missed_lines = [ 24, 31, 50, 55, 60, 61, 62, 63, 74, 88, 89, 94, 95, 96, 99, 100, 101, 103, 104, 105, 106, 120, 140, 146,]

[input_info]
test_file_path = "src/test/java/org/p2p/solanaj/core/PublicKeyTest.java"
focal_file_path = "src/main/java/org/p2p/solanaj/core/PublicKey.java"
test_file_url = "https://github.com/skynetcap/solanaj/blob/b0f095290e5a1cdd1528bb50615cc56dc0add467/src/test/java/org/p2p/solanaj/core/PublicKeyTest.java"
focal_file_url = "https://github.com/skynetcap/solanaj/blob/b0f095290e5a1cdd1528bb50615cc56dc0add467/src/main/java/org/p2p/solanaj/core/PublicKey.java"
first_commit_date = "2020-11-02"
last_commit_date = "2024-11-04"
test_file_content = "package org.p2p.solanaj.core;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.p2p.solanaj.core.PublicKey.ProgramDerivedAddress;\n\nimport java.io.ByteArrayOutputStream;\nimport java.util.Arrays;\n\npublic class PublicKeyTest {\n\n\n    @Test\n    public void validKeys() {\n        PublicKey key = new PublicKey(new byte[] { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 0, 0, 0, 0, 0, });\n        assertEquals(\"CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3\", key.toString());\n\n        PublicKey key1 = new PublicKey(\"CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3\");\n        assertEquals(\"CiDwVBFgWV9E5MvXWoLgnEgn2hK7rJikbvfWavzAQz3\", key1.toBase58());\n\n        PublicKey key2 = new PublicKey(\"11111111111111111111111111111111\");\n        assertEquals(\"11111111111111111111111111111111\", key2.toBase58());\n\n        byte[] byteKey = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n                0, 0, 0, 0, 1, };\n        PublicKey key3 = new PublicKey(byteKey);\n        assertArrayEquals(byteKey, new PublicKey(key3.toBase58()).toByteArray());\n    }\n\n\n    @Test\n    public void readPubkey() {\n        PublicKey key = new PublicKey(\"11111111111111111111111111111111\");\n\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        bos.write(1);\n        bos.writeBytes(key.toByteArray());\n\n        byte[] bytes = bos.toByteArray();\n        assertEquals(key.toString(), PublicKey.readPubkey(bytes, 1).toString());\n    }\n\n\n\n\n\n\n\n    @Test\n    public void testFindProgramAddressWithLargeNonce() throws Exception {\n        PublicKey programId = new PublicKey(\"BPFLoader1111111111111111111111111111111111\");\n        ProgramDerivedAddress pda = PublicKey.findProgramAddress(\n            Arrays.asList(\"LargeNonceTest\".getBytes()),\n            programId\n        );\n        assertTrue(pda.getNonce() >= 0 && pda.getNonce() <= 255);\n    }\n\n}\n"
