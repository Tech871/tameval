[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "TheAlgorithms/Java"
sha = "16345cba6db8657bf4b83fc7392920aa00a3e170"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=LetterCombinationsOfPhoneNumberTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.LetterCombinationsOfPhoneNumber  -DtargetTests=**.LetterCombinationsOfPhoneNumberTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/thealgorithms/strings/LetterCombinationsOfPhoneNumberTest.java"
focal_file_path = "src/main/java/com/thealgorithms/strings/LetterCombinationsOfPhoneNumber.java"
test_file_url = "https://github.com/TheAlgorithms/Java/blob/16345cba6db8657bf4b83fc7392920aa00a3e170/src/test/java/com/thealgorithms/strings/LetterCombinationsOfPhoneNumberTest.java"
focal_file_url = "https://github.com/TheAlgorithms/Java/blob/16345cba6db8657bf4b83fc7392920aa00a3e170/src/main/java/com/thealgorithms/strings/LetterCombinationsOfPhoneNumber.java"
first_commit_date = "2022-10-26"
last_commit_date = "2024-06-13"
test_file_content = "package com.thealgorithms.strings;\n\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.junit.jupiter.api.Test;\n\npublic class LetterCombinationsOfPhoneNumberTest {\n\n    @Test\n    public void letterCombinationsOfPhoneNumber() {\n        LetterCombinationsOfPhoneNumber.generateNumberToCharMap();\n\n        // ** Test 1 **\n        // Input: digits = \"\"\n        // Output: []\n        int[] numbers1 = {};\n        List<String> output1 = Arrays.asList(\"\");\n        assertTrue(LetterCombinationsOfPhoneNumber.printWords(numbers1, numbers1.length, 0, \"\").equals(output1));\n\n        // ** Test 2 **\n        // Input: digits = \"2\"\n        // Output: [\"a\",\"b\",\"c\"]\n        int[] numbers2 = {2};\n        List<String> output2 = Arrays.asList(\"a\", \"b\", \"c\");\n        assertTrue(LetterCombinationsOfPhoneNumber.printWords(numbers2, numbers2.length, 0, \"\").equals(output2));\n\n        // ** Test 3 **\n        // Input: digits = \"23\"\n        // Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n        int[] numbers3 = {2, 3};\n        List<String> output3 = Arrays.asList(\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\");\n        assertTrue(LetterCombinationsOfPhoneNumber.printWords(numbers3, numbers3.length, 0, \"\").equals(output3));\n\n        // ** Test 4 **\n        // Input: digits = \"234\"\n        // Output: [\"adg\", \"adh\", \"adi\", \"aeg\", \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\",\n        // \"bdg\", \"bdh\", \"bdi\", \"beg\", \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\",\n        // \"cdi\", \"ceg\", \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\"]\n        int[] numbers4 = {2, 3, 4};\n        List<String> output4 = Arrays.asList(\"adg\", \"adh\", \"adi\", \"aeg\", \"aeh\", \"aei\", \"afg\", \"afh\", \"afi\", \"bdg\", \"bdh\", \"bdi\", \"beg\", \"beh\", \"bei\", \"bfg\", \"bfh\", \"bfi\", \"cdg\", \"cdh\", \"cdi\", \"ceg\", \"ceh\", \"cei\", \"cfg\", \"cfh\", \"cfi\");\n        assertTrue(LetterCombinationsOfPhoneNumber.printWords(numbers4, numbers4.length, 0, \"\").equals(output4));\n    }\n}"
