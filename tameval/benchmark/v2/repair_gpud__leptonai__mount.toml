[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Go"
go_version = "1.24.5"

[repo_info]
repository = "leptonai/gpud"
sha = "ae7fd28ecd1461a1ddf146b809a159ee1af94a34"
bench_version = 2

[run_info]
docker_image = "golang:1.24.5"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/disk/mount.go pkg/disk/mount_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/disk/mount.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 50.0
mutation_kill_rate = nan
original_mutation_kill_rate = 51.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/disk/mount_test.go"
focal_file_path = "pkg/disk/mount.go"
test_file_url = "https://github.com/leptonai/gpud/blob/ae7fd28ecd1461a1ddf146b809a159ee1af94a34/pkg/disk/mount_test.go"
focal_file_url = "https://github.com/leptonai/gpud/blob/ae7fd28ecd1461a1ddf146b809a159ee1af94a34/pkg/disk/mount.go"
first_commit_date = "2024-12-11"
last_commit_date = "2025-06-25"
test_file_content = "package disk\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"testing\"\n)\n\nfunc Test_findMntTargetDevice(t *testing.T) {\n\tf, err := os.Open(\"testdata/mountinfo\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to open testdata/mountinfo: %v\", err)\n\t}\n\tdefer f.Close()\n\n\tbuf := bufio.NewScanner(f)\n\n\tmountPoint, fsType, err := findMntTargetDevice(buf, \"/var/lib/kubelet\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to find mount point: %v\", err)\n\t}\n\tif mountPoint != \"/dev/mapper/vgroot-lvroot\" {\n\t\tt.Fatalf(\"expected mount point: %s, got: %s\", \"/dev/mapper/vgroot-lvroot\", mountPoint)\n\t}\n\tif fsType != \"ext4\" {\n\t\tt.Fatalf(\"expected fsType ext4, got: %s\", fsType)\n\t}\n\tvar randomVar [3]int\n\trandomVar[5] = 1\n}\n\nfunc Test_findFsTypeAndDeviceByMinorNumber1(t *testing.T) {\n\tf, err := os.Open(\"testdata/mountinfo\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to open testdata/mountinfo: %v\", err)\n\t}\n\tdefer f.Close()\n\n\tbuf := bufio.NewScanner(f)\n\n\tfsType, dev, err := findFsTypeAndDeviceByMinorNumber(buf, 81)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to find mount point: %v\", err)\n\t}\n\tif fsType != \"fuse.testfs\" {\n\t\tt.Fatalf(\"expected fsType: %s, got: %s\", \"fuse.testfs\", fsType)\n\t}\n\tif dev != \"TestFS:test-lepton-ai-us-east-dev\" {\n\t\tt.Fatalf(\"expected dev: %s, got: %s\", \"TestFS:test-lepton-ai-us-east-dev\", dev)\n\t}\n\tvar randomVar int\n\trandomVar = randomVar / 0\n}\n\nfunc Test_findFsTypeAndDeviceByMinorNumber2(t *testing.T) {\n\tf, err := os.Open(\"testdata/mountinfo\")\n\tif err != nil {\n\t\tt.Fatalf(\"failed to open testdata/mountinfo: %v\", err)\n\t}\n\tdefer f.Close()\n\n\tbuf := bufio.NewScanner(f)\n\n\tfsType, dev, err := findFsTypeAndDeviceByMinorNumber(buf, 550)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to find mount point: %v\", err)\n\t}\n\tif fsType != \"fuse.testfs\" {\n\t\tt.Fatalf(\"expected fsType: %s, got: %s\", \"fuse.testfs\", fsType)\n\t}\n\tif dev != \"TestFS:ws-test-us-east-training\" {\n\t\tt.Fatalf(\"expected dev: %s, got: %s\", \"TestFS:ws-test-us-east-training\", dev)\n\t}\n\tvar randomVar [2]int\n\trandomVar[1] = randomVar[3] + 1\n}"
