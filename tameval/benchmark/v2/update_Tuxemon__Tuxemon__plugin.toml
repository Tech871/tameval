[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Tuxemon/Tuxemon"
sha = "1431208586118b46e9d7860fd55618f0b117726d"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tuxemon/plugin.py -m pytest -q --junit-xml=test_output.xml tests/tuxemon/test_plugin.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tuxemon.plugin --unit-test tests.tuxemon.test_plugin --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tuxemon/plugin.py --unit-test tests/tuxemon/test_plugin.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 44.0
original_coverage = 74.0
mutation_kill_rate = nan
original_mutation_kill_rate = 67.0
covered_lines = [ 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 26, 27, 28, 29, 34, 35, 36, 39, 40, 43, 44, 46, 51, 56, 57, 60, 61, 65, 67, 77, 96, 100, 112, 117, 120, 125, 126, 127, 131, 132, 140, 141, 150, 151, 159, 163, 167, 171, 177, 184, 187, 198, 205, 224, 236, 253, 283, 305, 306, 314, 315, 325,]
missed_lines = [ 47, 48, 73, 74, 75, 79, 80, 81, 82, 83, 84, 86, 87, 94, 98, 102, 103, 104, 105, 106, 109, 118, 122, 133, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 156, 157, 161, 165, 169, 173, 179, 193, 194, 195, 196, 200, 201, 202, 203, 209, 210, 211, 212, 213, 218, 219, 222, 228, 245, 250, 273, 276, 277, 278, 279, 280, 296, 311, 322, 345, 346, 348, 349, 350, 351, 352, 355, 356, 357, 359,]

[input_info]
test_file_path = "tests/tuxemon/test_plugin.py"
focal_file_path = "tuxemon/plugin.py"
test_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tests/tuxemon/test_plugin.py"
focal_file_url = "https://github.com/Tuxemon/Tuxemon/blob/1431208586118b46e9d7860fd55618f0b117726d/tuxemon/plugin.py"
first_commit_date = "2021-05-04"
last_commit_date = "2025-08-15"
test_file_content = "# SPDX-License-Identifier: GPL-3.0\n# Copyright (c) 2014-2025 William Edwards <shadowapex@gmail.com>, Benjamin Bean <superman2k5@gmail.com>\nimport unittest\nfrom collections.abc import Iterable\nfrom pathlib import Path\nfrom unittest.mock import MagicMock, patch\n\nfrom tuxemon.plugin import (\n    FileSystemPluginDiscovery,\n    ImportLibPluginLoader,\n    PluginFilter,\n    PluginLoader,\n    PluginManager,\n    PluginObject,\n    get_available_classes,\n    load_directory,\n)\n\n\nclass TestPluginManager(unittest.TestCase):\n    def setUp(self):\n        self.discovery = FileSystemPluginDiscovery([])\n        self.loader = PluginLoader(ImportLibPluginLoader())\n        self.filter = PluginFilter()\n        self.manager = PluginManager(self.discovery, self.loader, self.filter)\n        self.interface = PluginObject\n\n    def test_init(self):\n        self.assertEqual(self.manager.discovery.folders, [])\n        self.assertEqual(self.manager.modules, [])\n\n    def test_set_plugin_places(self):\n        plugin_folders = [\"folder1\", \"folder2\"]\n        discovery = FileSystemPluginDiscovery(plugin_folders)\n        manager = PluginManager(discovery, self.loader, self.filter)\n        self.assertEqual(manager.discovery.folders, plugin_folders)\n\n    def test_collect_plugins(self):\n        plugin_folders = [\"folder1\", \"folder2\"]\n\n        discovery = FileSystemPluginDiscovery(plugin_folders)\n        discovery.discover_plugins = MagicMock(\n            return_value=[\"plugin1\", \"plugin2\"]\n        )\n\n        manager = PluginManager(discovery, self.loader, self.filter)\n        manager.collect_plugins()\n\n        discovery.discover_plugins.assert_called_once()\n\n        filtered_plugins = self.filter.filter_plugins([\"plugin1\", \"plugin2\"])\n\n        self.assertEqual(manager.modules, filtered_plugins)\n\n    def test_get_all_plugins(self):\n        plugins = self.manager.get_all_plugins(interface=self.interface)\n        self.assertIsInstance(plugins, list)\n\n    def test_get_classes_from_module(self):\n        module = MagicMock()\n        classes = self.manager._get_classes_from_module(module, self.interface)\n        self.assertIsInstance(classes, Iterable)\n\n    def test_load_directory(self):\n        plugin_folder = Path(\"folder1\")\n        loaded_manager = load_directory(plugin_folder)\n        self.assertIsInstance(loaded_manager, PluginManager)\n\n    def test_get_available_classes(self):\n        plugin_folder = Path(\"folder1\")\n        manager = load_directory(plugin_folder)\n        classes = get_available_classes(manager, interface=self.interface)\n        self.assertIsInstance(classes, list)\n\n    def test_file_system_plugin_discovery(self):\n        self.assertEqual(self.discovery.folders, [])\n        self.assertEqual(self.discovery.file_extensions, (\".py\", \".pyc\"))\n\n    def test_default_plugin_loader(self):\n        module_name = \"test_module\"\n        with patch(\"importlib.import_module\") as mock_import_module:\n            self.loader.load_plugin(module_name)\n            mock_import_module.assert_called_once_with(module_name)\n\n    def test_plugin_filter(self):\n        filter = PluginFilter(\n            exclude_classes=[\"ExcludedPlugin\"],\n            include_patterns=[\"AllowedPattern\"],\n        )\n\n        self.assertTrue(filter.is_excluded(\"ExcludedPlugin\"))\n        self.assertFalse(filter.is_excluded(\"SomeOtherPlugin\"))\n\n        class MockPlugin:\n            pass\n\n        self.assertFalse(filter.matches_patterns(MockPlugin))\n\n    def test_default_plugin_loader_import_failure(self):\n        module_name = \"non_existent_module\"\n        with patch(\n            \"importlib.import_module\",\n            side_effect=ImportError(\"Module not found\"),\n        ):\n            with self.assertRaises(ImportError):\n                self.loader.load_plugin(module_name)\n\n    def test_collect_plugins_no_plugins_found(self):\n        discovery = FileSystemPluginDiscovery([])\n        discovery.discover_plugins = MagicMock(return_value=[])\n\n        manager = PluginManager(discovery, self.loader, self.filter)\n        manager.collect_plugins()\n\n        self.assertEqual(manager.modules, [])\n\n    def test_mock_discover_plugins(self):\n        discovery = FileSystemPluginDiscovery([])\n        discovery.discover_plugins = MagicMock(\n            return_value=[\"mock_plugin1\", \"mock_plugin2\"]\n        )\n\n        self.assertEqual(\n            discovery.discover_plugins(), [\"mock_plugin1\", \"mock_plugin2\"]\n        )\n        discovery.discover_plugins.assert_called_once()\n\n    def test_mock_plugin_loader(self):\n        mock_module = MagicMock()\n\n        with patch(\n            \"importlib.import_module\", return_value=mock_module\n        ) as mock_import:\n            module = self.loader.load_plugin(\"mock_plugin\")\n\n            self.assertEqual(module, mock_module)\n            mock_import.assert_called_once_with(\"mock_plugin\")\n\n    def test_mock_plugin_manager(self):\n        discovery = MagicMock()\n        loader = MagicMock()\n        filter = PluginFilter()\n        manager = PluginManager(discovery, loader, filter)\n\n        discovery.discover_plugins.return_value = [\"mock_plugin\"]\n        loader.load_plugin.return_value = MagicMock()\n\n        manager.collect_plugins()\n        discovery.discover_plugins.assert_called_once()\n\n        filtered_plugins = self.filter.filter_plugins([\"mock_plugin\"])\n\n        self.assertEqual(manager.modules, filtered_plugins)\n        discovery.discover_plugins.assert_called_once()\n\n    def test_plugin_filter_exclusion(self):\n        filter = PluginFilter(exclude_classes=[\"ExcludedPlugin\"])\n\n        self.assertTrue(filter.is_excluded(\"ExcludedPlugin\"))\n        self.assertFalse(filter.is_excluded(\"AllowedPlugin\"))"
