[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "citrusframework/citrus-simulator"
sha = "e08e45f519221ce6c8fd75dc31e6bfad5c04dc5e"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl simulator-spring-boot -Dtest=ScenarioComparatorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl simulator-spring-boot -DtargetClasses=**.ScenarioComparator  -DtargetTests=**.ScenarioComparatorTest  -DoutputFormats=XML"
coverage_report_path = "simulator-spring-boot/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "simulator-spring-boot/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 89.0
original_coverage = 89.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 28, 29, 30, 33, 34, 35, 36, 42, 43, 45, 47, 48, 49, 50, 53, 54,]
missed_lines = [ 46, 57,]

[input_info]
test_file_path = "simulator-spring-boot/src/test/java/org/citrusframework/simulator/web/rest/pagination/ScenarioComparatorTest.java"
focal_file_path = "simulator-spring-boot/src/main/java/org/citrusframework/simulator/web/rest/pagination/ScenarioComparator.java"
test_file_url = "https://github.com/citrusframework/citrus-simulator/blob/e08e45f519221ce6c8fd75dc31e6bfad5c04dc5e/simulator-spring-boot/src/test/java/org/citrusframework/simulator/web/rest/pagination/ScenarioComparatorTest.java"
focal_file_url = "https://github.com/citrusframework/citrus-simulator/blob/e08e45f519221ce6c8fd75dc31e6bfad5c04dc5e/simulator-spring-boot/src/main/java/org/citrusframework/simulator/web/rest/pagination/ScenarioComparator.java"
first_commit_date = "2024-01-23"
last_commit_date = "2024-05-14"
test_file_content = "/*\n * Copyright the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.citrusframework.simulator.web.rest.pagination;\n\nimport org.citrusframework.simulator.web.rest.ScenarioResource;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.MethodSource;\n\nimport java.util.stream.Stream;\n\nimport static org.citrusframework.simulator.web.rest.ScenarioResource.Scenario.ScenarioType.MESSAGE_TRIGGERED;\nimport static org.citrusframework.simulator.web.rest.ScenarioResource.Scenario.ScenarioType.STARTER;\nimport static org.citrusframework.simulator.web.rest.pagination.ScenarioComparator.fromProperty;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\n\nclass ScenarioComparatorTest {\n\n    static Stream<String> existingComparators() {\n        return Stream.of(\n            \"name\", \"type\"\n        );\n    }\n\n    @MethodSource\n    @ParameterizedTest\n    void existingComparators(String property) {\n        var comparator = fromProperty(property);\n        assertTrue(comparator.isPresent());\n    }\n\n    @Test\n    void shouldReturnEmptyForInvalidProperty() {\n        var comparator = fromProperty(\"invalid\");\n        assertFalse(comparator.isPresent());\n    }\n\n    @Test\n    void shouldCompareScenariosByName() {\n        var scenario1 = mock(ScenarioResource.Scenario.class);\n        var scenario2 = mock(ScenarioResource.Scenario.class);\n\n        doReturn(\"ScenarioA\").when(scenario1).name();\n        doReturn(\"ScenarioB\").when(scenario2).name();\n\n        var comparator = fromProperty(\"name\").orElseThrow(IllegalArgumentException::new);\n\n        assertTrue(comparator.compare(scenario1, scenario2) < 0);\n    }\n\n    @Test\n    void shouldCompareScenariosByType() {\n        var scenario1 = mock(ScenarioResource.Scenario.class);\n        var scenario2 = mock(ScenarioResource.Scenario.class);\n\n        doReturn(STARTER).when(scenario1).type();\n        doReturn(MESSAGE_TRIGGERED).when(scenario2).type();\n\n        var comparator = fromProperty(\"type\").orElseThrow(IllegalArgumentException::new);\n\n        assertTrue(comparator.compare(scenario1, scenario2) < 0);\n    }\n\n    @Test\n    void shouldHandleNullValues() {\n        var scenario1 = mock(ScenarioResource.Scenario.class);\n        var scenario2 = mock(ScenarioResource.Scenario.class);\n\n        doReturn(null).when(scenario1).name();\n        doReturn(\"ScenarioB\").when(scenario2).name();\n\n        var comparator = fromProperty(\"name\").orElseThrow(IllegalArgumentException::new);\n\n        assertEquals(-1, comparator.compare(scenario1, scenario2));\n        assertEquals(1, comparator.compare(scenario2, scenario1));\n    }\n}\n"
