[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/stormcrawler"
sha = "9d4b0302a7859f9f24caa1fe3cdabb498f968112"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl core -Dtest=CookieConverterTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl core -DtargetClasses=**.CookieConverter  -DtargetTests=**.CookieConverterTest  -DoutputFormats=XML"
coverage_report_path = "core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 91.0
mutation_kill_rate = nan
original_mutation_kill_rate = 0.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "core/src/test/java/org/apache/stormcrawler/util/CookieConverterTest.java"
focal_file_path = "core/src/main/java/org/apache/stormcrawler/util/CookieConverter.java"
test_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/test/java/org/apache/stormcrawler/util/CookieConverterTest.java"
focal_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/main/java/org/apache/stormcrawler/util/CookieConverter.java"
first_commit_date = "2024-03-28"
last_commit_date = "2024-05-03"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stormcrawler.util;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.List;\nimport org.apache.http.cookie.Cookie;\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class CookieConverterTest {\n\n    private static String securedUrl = \"https://someurl.com\";\n    private static String unsecuredUrl = \"http://someurl.com\";\n    private static String dummyCookieHeader = \"nice tasty test cookie header!\";\n    private static String dummyCookieValue = \"nice tasty test cookie value!\";\n\n    @Test\n    public void testSimpleCookieAndUrl() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(dummyCookieHeader, dummyCookieValue, null, null, null, null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result = CookieConverter.getCookies(cookiesStrings, getUrl(unsecuredUrl));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testNotExpiredCookie() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader,\n                        dummyCookieValue,\n                        null,\n                        \"Tue, 11 Apr 2117 07:13:39 -0000\",\n                        null,\n                        null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result = CookieConverter.getCookies(cookiesStrings, getUrl(unsecuredUrl));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testExpiredCookie() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader,\n                        dummyCookieValue,\n                        null,\n                        \"Tue, 11 Apr 2016 07:13:39 -0000\",\n                        null,\n                        null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result = CookieConverter.getCookies(cookiesStrings, getUrl(unsecuredUrl));\n        Assert.assertEquals(\"Should have 0 cookies, since cookie was expired\", 0, result.size());\n    }\n\n    @Test\n    public void testValidPath() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(dummyCookieHeader, dummyCookieValue, null, null, \"/\", null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(cookiesStrings, getUrl(unsecuredUrl + \"/somepage\"));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testValidPath2() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(dummyCookieHeader, dummyCookieValue, null, null, \"/\", null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result = CookieConverter.getCookies(cookiesStrings, getUrl(unsecuredUrl));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testValidPath3() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, null, null, \"/someFolder\", null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(cookiesStrings, getUrl(unsecuredUrl + \"/someFolder\"));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testValidPath4() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, null, null, \"/someFolder\", null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(unsecuredUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testInvalidPath() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, null, null, \"/someFolder\", null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(unsecuredUrl + \"/someOtherFolder/SomeFolder\"));\n        Assert.assertEquals(\"path mismatch, should have 0 cookies\", 0, result.size());\n    }\n\n    @Test\n    public void testValidDomain() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, \"someurl.com\", null, null, null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(unsecuredUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testInvalidDomain() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, \"someOtherUrl.com\", null, null, null);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(unsecuredUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Domain is not valid - Should have 0 cookies\", 0, result.size());\n    }\n\n    @Test\n    public void testSecurFlagHttp() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, null, null, null, Boolean.TRUE);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(unsecuredUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Target url is not secured - Should have 0 cookies\", 0, result.size());\n    }\n\n    @Test\n    public void testSecurFlagHttpS() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader, dummyCookieValue, null, null, null, Boolean.TRUE);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(securedUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Target url is  secured - Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void testFullCookie() {\n        String[] cookiesStrings = new String[1];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader,\n                        dummyCookieValue,\n                        \"someurl.com\",\n                        \"Tue, 11 Apr 2117 07:13:39 -0000\",\n                        \"/\",\n                        true);\n        cookiesStrings[0] = dummyCookieString;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(securedUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Should have 1 cookie\", 1, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n    }\n\n    @Test\n    public void test2Cookies() {\n        String[] cookiesStrings = new String[2];\n        String dummyCookieString =\n                buildCookieString(\n                        dummyCookieHeader,\n                        dummyCookieValue,\n                        \"someurl.com\",\n                        \"Tue, 11 Apr 2117 07:13:39 -0000\",\n                        \"/\",\n                        true);\n        String dummyCookieString2 =\n                buildCookieString(\n                        dummyCookieHeader + \"2\",\n                        dummyCookieValue + \"2\",\n                        \"someurl.com\",\n                        \"Tue, 11 Apr 2117 07:13:39 -0000\",\n                        \"/\",\n                        true);\n        cookiesStrings[0] = dummyCookieString;\n        cookiesStrings[1] = dummyCookieString2;\n        List<Cookie> result =\n                CookieConverter.getCookies(\n                        cookiesStrings, getUrl(securedUrl + \"/someFolder/SomeOtherFolder\"));\n        Assert.assertEquals(\"Should have 2 cookies\", 2, result.size());\n        Assert.assertEquals(\n                \"Cookie header should be as defined\", dummyCookieHeader, result.get(0).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\", dummyCookieValue, result.get(0).getValue());\n\n        Assert.assertEquals(\n                \"Cookie header should be as defined\",\n                dummyCookieHeader + \"2\",\n                result.get(1).getName());\n        Assert.assertEquals(\n                \"Cookie value should be as defined\",\n                dummyCookieValue + \"2\",\n                result.get(1).getValue());\n    }\n\n    @Test\n    public void testDomainsChecker() {\n        boolean result = CookieConverter.checkDomainMatchToUrl(\".example.com\", \"www.example.com\");\n        Assert.assertEquals(\"domain is valid\", true, result);\n    }\n\n    @Test\n    public void testDomainsChecker2() {\n        boolean result = CookieConverter.checkDomainMatchToUrl(\".example.com\", \"example.com\");\n        Assert.assertEquals(\"domain is valid\", true, result);\n    }\n\n    @Test\n    public void testDomainsChecker3() {\n        boolean result = CookieConverter.checkDomainMatchToUrl(\"example.com\", \"www.example.com\");\n        Assert.assertEquals(\"domain is valid\", true, result);\n    }\n\n    @Test\n    public void testDomainsChecker4() {\n        boolean result = CookieConverter.checkDomainMatchToUrl(\"example.com\", \"anotherexample.com\");\n        Assert.assertEquals(\"domain is not valid\", false, result);\n    }\n\n    private URL getUrl(String urlString) {\n        try {\n            return new URL(urlString);\n        } catch (MalformedURLException e) {\n            return null;\n        }\n    }\n\n    private String buildCookieString(\n            String header,\n            String value,\n            String domain,\n            String expires,\n            String path,\n            Boolean secure) {\n        StringBuilder builder = new StringBuilder(buildCookiePart(header, value));\n        if (domain != null) {\n            builder.append(buildCookiePart(\"domain\", domain));\n        }\n\n        if (expires != null) {\n            builder.append(buildCookiePart(\"expires\", expires));\n        }\n\n        if (path != null) {\n            builder.append(buildCookiePart(\"path\", path));\n        }\n\n        if (secure != null) {\n            builder.append(\"secure;\");\n        }\n\n        return builder.toString();\n    }\n\n    private String buildCookiePart(String partName, String partValue) {\n        return partName + \"=\" + partValue + \";\";\n    }\n}"
