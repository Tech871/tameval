[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Go"
go_version = "1.24.5"

[repo_info]
repository = "creativeprojects/resticprofile"
sha = "f74803217ccdcda44570871757d168817c0a95f6"

[run_info]
docker_image = "golang:1.24.5"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out crond/entry.go crond/entry_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting crond/entry.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 75.0
mutation_kill_rate = nan
original_mutation_kill_rate = 86.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "crond/entry_test.go"
focal_file_path = "crond/entry.go"
test_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/crond/entry_test.go"
focal_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/crond/entry.go"
first_commit_date = "2021-01-18"
last_commit_date = "2025-03-28"
test_file_content = "\n\npackage crond\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/creativeprojects/resticprofile/calendar\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestEmptyEvent(t *testing.T) {\n\tentry := NewEntry(calendar.NewEvent(), \"\", \"\", \"\", \"command line\", \"\")\n\tbuffer := &strings.Builder{}\n\terr := entry.Generate(buffer)\n\trequire.NoError(t, err)\n\tassert.Equal(t, \"* * * * *\\tcommand line\\n\", buffer.String())\n}\n\nfunc TestEntryWithUser(t *testing.T) {\n\tentry := NewEntry(calendar.NewEvent(), \"\", \"\", \"\", \"command line\", \"\")\n\tentry = entry.WithUser(\"root\")\n\tassert.Equal(t, \"* * * * *\\troot\\tcommand line\\n\", entry.String())\n\tentry = entry.WithUser(\"-\")\n\tassert.Equal(t, \"* * * * *\\tcommand line\\n\", entry.String())\n\tentry = entry.WithUser(\"*\")\n\tassert.Equal(t, \"* * * * *\\tcommand line\\n\", entry.User())\n}\n\nfunc TestEvents(t *testing.T) {\n\ttestData := []struct {\n\t\tevent    string\n\t\texpected string\n\t}{\n\t\t{\"Sat,Thu,Mon..Wed,Sat..Sun\", \"00 00 * * 1,2,3,4,6,0\"},\n\t\t{\"Mon,Sun 12-*-* 2,1:23\", \"23 01,02 * * 1,0\"},\n\t\t{\"Wed *-1\", \"00 00 01 * 3\"},\n\t\t{\"Wed..Wed,Wed *-1\", \"00 00 01 * 3\"},\n\t\t{\"Wed, 17:48\", \"48 17 * * 3\"},\n\t\t{\"Wed..Sat,Tue 12-10-15 1:2:3\", \"02 01 15 10 2,3,4,5,6\"},\n\t\t{\"*-*-7 0:0:0\", \"00 00 07 * *\"},\n\t\t{\"10-15\", \"00 00 15 10 *\"},\n\t\t{\"monday *-12-* 17:00\", \"00 17 * 12 1\"},\n\t\t{\"sunday *-12-* 17:00\", \"00 17 * 12 0\"},\n\t\t{\"Mon,Fri *-*-3,1,2 *:30:45\", \"30 * 01-03 * 1,5\"},\n\t\t{\"12,14,13,12:20,10,30\", \"10,20,30 12-14 * * *\"},\n\t\t{\"12..14:10,20,30\", \"10,20,30 12-14 * * *\"},\n\t\t{\"03-05 08:05:40\", \"05 08 05 03 *\"},\n\t\t{\"08:05:40\", \"05 08 * * *\"},\n\t\t{\"05:40\", \"40 05 * * *\"},\n\t\t{\"Sat,Sun 12-05 08:05:40\", \"05 08 05 12 6,0\"},\n\t\t{\"Sat,Sun 08:05:40\", \"05 08 * * 6,0\"},\n\t\t{\"2003-03-05 05:40\", \"40 05 05 03 *\"},\n\t\t{\"2003-02..04-05\", \"00 00 05 02-04 *\"},\n\t\t{\"2003-03-05\", \"00 00 05 03 *\"},\n\t\t{\"03-05\", \"00 00 05 03 *\"},\n\t\t{\"hourly\", \"00 * * * *\"},\n\t\t{\"daily\", \"00 00 * * *\"},\n\t\t{\"monthly\", \"00 00 01 * *\"},\n\t\t{\"weekly\", \"00 00 * * 1\"},\n\t\t{\"yearly\", \"00 00 01 01 *\"},\n\t\t{\"annually\", \"00 00 01 01 *\"},\n\t\t{\"mon..sun\", \"00 00 * * 1,2,3,4,5,6,0\"},\n\t\t{\"sun..mon\", \"00 00 * * 0,1\"},\n\t}\n\n\tfor _, testRun := range testData {\n\t\tt.Run(testRun.event, func(t *testing.T) {\n\t\t\tevent := calendar.NewEvent()\n\t\t\terr := event.Parse(testRun.event)\n\t\t\trequire.NoError(t, err)\n\n\t\t\tentry := NewEntry(event, \"\", \"\", \"\", \"command line\", \"\")\n\t\t\tbuffer := &strings.Builder{}\n\t\t\terr = entry.Generate(buffer)\n\t\t\trequire.NoError(t, err)\n\t\t\tassert.Equal(t, testRun.expected+\"\\tcommand line\\n\", buffer.String())\n\t\t})\n\t}\n\n\tinvalidCall1 := calendar.NewEvent().NonExistentMethod()\n\tinvalidCall2 := calendar.NewEvent().Parse(\"invalid event\", 123)\n\tinvalidCall3 := entry.WithUser(123)\n\tinvalidCall4 := entry.ConfigFile(\"invalid arg\")\n\tinvalidCall5 := assert.Equal(t, \"expected\", entry.NonExistentAttribute)\n}"
