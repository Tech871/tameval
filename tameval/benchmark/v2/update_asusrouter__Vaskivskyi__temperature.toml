[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "Vaskivskyi/asusrouter"
sha = "1f98018ace04703492b654cd02f4f3a4890cedcb"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=asusrouter/modules/endpoint/temperature.py -m pytest -q --junit-xml=test_output.xml tests/modules/endpoint/test_temperature.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target asusrouter.modules.endpoint.temperature --unit-test tests.modules.endpoint.test_temperature --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target asusrouter/modules/endpoint/temperature.py --unit-test tests/modules/endpoint/test_temperature.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 28.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 50.0
covered_lines = [ 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 22, 33, 104, 114,]
missed_lines = [ 36, 39, 43, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 61, 62, 63, 67, 68, 70, 71, 75, 83, 84, 85, 86, 91, 99, 101, 107, 111, 126, 127, 129, 130, 131, 133, 135, 137, 138, 139, 142, 143, 144, 146, 147, 148, 150,]

[input_info]
test_file_path = "tests/modules/endpoint/test_temperature.py"
focal_file_path = "asusrouter/modules/endpoint/temperature.py"
test_file_url = "https://github.com/Vaskivskyi/asusrouter/blob/1f98018ace04703492b654cd02f4f3a4890cedcb/tests/modules/endpoint/test_temperature.py"
focal_file_url = "https://github.com/Vaskivskyi/asusrouter/blob/1f98018ace04703492b654cd02f4f3a4890cedcb/asusrouter/modules/endpoint/temperature.py"
first_commit_date = "2023-10-28"
last_commit_date = "2025-08-13"
test_file_content = "\"\"\"Tests for the Temperature endpoint module.\"\"\"\n\nfrom typing import Any, Optional\nfrom unittest.mock import call, patch\n\nimport pytest\nfrom asusrouter.config import ARConfig\nfrom asusrouter.modules.data import AsusData\nfrom asusrouter.modules.endpoint import temperature as temp_mod\nfrom asusrouter.modules.endpoint.temperature import _scale_temperature, process\nfrom asusrouter.modules.wlan import Wlan\n\n\n@pytest.fixture(autouse=True)\ndef reset_config() -> None:\n    \"\"\"Reset the configuration before each test.\"\"\"\n\n    ARConfig.set(\"optimistic_temperature\", False)\n\n\n@pytest.mark.parametrize(\n    \"mock_vars, expected, optimistic, scaled\",\n    [\n        # Normal values, no scaling\n        (\n            {\n                \"curr_coreTmp_2_raw\": \"42\",\n                \"curr_coreTmp_5_raw\": \"43\",\n                \"curr_coreTmp_52_raw\": \"44\",\n                \"curr_coreTmp_cpu\": \"45\",\n            },\n            {\n                Wlan.FREQ_2G: 42.0,\n                Wlan.FREQ_5G: 43.0,\n                Wlan.FREQ_5G2: 44.0,\n                \"cpu\": 45.0,\n            },\n            False,\n            False,\n        ),\n        # Values need scaling\n        (\n            {\n                \"curr_coreTmp_0_raw\": \"0.04\",\n                \"curr_coreTmp_1_raw\": \"0.05\",\n                \"curr_coreTmp_2_raw\": \"0.06\",\n                \"curr_coreTmp_3_raw\": \"0.07\",\n                \"curr_coreTmp_cpu\": \"0.08\",\n            },\n            {\n                Wlan.FREQ_2G: 40.0,\n                Wlan.FREQ_5G: 50.0,\n                Wlan.FREQ_5G2: 60.0,\n                Wlan.FREQ_6G: 70.0,\n                \"cpu\": 80.0,\n            },\n            True,\n            True,\n        ),\n        # Disabled value\n        (\n            {\n                \"curr_coreTmp_wl0_raw\": \"disabled\",\n                \"curr_coreTmp_wl1_raw\": \"43\",\n                \"curr_coreTmp_wl2_raw\": \"44\",\n                \"curr_coreTmp_wl3_raw\": \"45\",\n                \"curr_coreTmp_cpu\": \"46\",\n            },\n            {\n                Wlan.FREQ_5G: 43.0,\n                Wlan.FREQ_5G2: 44.0,\n                Wlan.FREQ_6G: 45.0,\n                \"cpu\": 46.0,\n            },\n            False,\n            False,\n        ),\n        # CPU temp only\n        (\n            {\"curr_cpuTemp\": \"55\"},\n            {\"cpu\": 55.0},\n            False,\n            False,\n        ),\n    ],\n)\ndef test_read_mocked(\n    mock_vars: dict[str, str | None],\n    expected: dict[str, float],\n    optimistic: bool,\n    scaled: bool,\n) -> None:\n    \"\"\"Test the read function.\"\"\"\n\n    ARConfig.set(\"optimistic_temperature\", optimistic)\n    temp_mod._temperature_warned = False\n\n    with (\n        patch.object(\n            temp_mod, \"clean_content\", side_effect=lambda x: x\n        ) as mock_clean,\n        patch.object(\n            temp_mod, \"read_js_variables\", side_effect=lambda x: mock_vars\n        ) as mock_js,\n        patch.object(\n            temp_mod,\n            \"safe_float\",\n            side_effect=lambda x: float(x) if x != \"disabled\" else None,\n        ) as mock_float,\n        patch.object(\n            temp_mod,\n            \"_scale_temperature\",\n            side_effect=lambda temp: (expected, scaled),\n        ) as mock_scale,\n    ):\n        result = temp_mod.read(\"dummy_content\")\n        assert result == expected\n\n        # Check that clean_content and read_js_variables are called once\n        mock_clean.assert_called_once_with(\"dummy_content\")\n        mock_js.assert_called_once_with(\"dummy_content\")\n\n        # safe_float should be called for each value except \"disabled\"\n        float_calls = [\n            call(v)\n            for v in mock_vars.values()\n            if v is not None and v != \"disabled\"\n        ]\n        mock_float.assert_has_calls(float_calls, any_order=True)\n\n        # _scale_temperature should be called only if optimistic is True\n        if optimistic:\n            mock_scale.assert_called_once()\n        else:\n            mock_scale.assert_not_called()\n\n\n@pytest.mark.parametrize(\n    \"input\",\n    [\n        {\"val1\": 30.0},\n        {\"val1\": 30.0, \"val2\": 40.0},\n        {\"val1\": \"anything\", \"val2\": None},\n    ],\n)\ndef test_process(input: dict[str, Any]) -> None:\n    \"\"\"Test the process function.\"\"\"\n\n    result = process(input)\n    assert result.get(AsusData.TEMPERATURE) == input\n\n\n@pytest.mark.parametrize(\n    \"temperature, result_temperature, result_scaled\",\n    [\n        # No scaling needed\n        ({\"val1\": 30.0, \"val2\": 40.0}, {\"val1\": 30.0, \"val2\": 40.0}, False),\n        # Scaling up needed (3 orders of magnitude off down)\n        ({\"val1\": 0.03, \"val2\": 0.04}, {\"val1\": 30.0, \"val2\": 40.0}, True),\n        # Scaling down needed (3 orders of magnitude off up)\n        (\n            {\"val1\": 30000.0, \"val2\": 40000.0},\n            {\"val1\": 30.0, \"val2\": 40.0},\n            True,\n        ),\n        # None in the input should be ignored\n        ({\"val1\": None}, {}, False),\n        # Scaling needed for 6 orders of magnitude -> this should not happen\n        # fully - we allow only 5 steps of scaling\n        ({\"val1\": 0.00003, \"val2\": 0.00004}, {\"val1\": 3.0, \"val2\": 4.0}, True),\n        (\n            {\"val1\": 30000000.0, \"val2\": 40000000.0},\n            {\"val1\": 300.0, \"val2\": 400.0},\n            True,\n        ),\n    ],\n)\ndef test_scale_temperature(\n    temperature: dict[str, Optional[float]],\n    result_temperature: dict[str, float],\n    result_scaled: bool,\n) -> None:\n    \"\"\"Test the _scale_temperature function.\"\"\"\n\n    scaled_temperature, scaled = _scale_temperature(temperature)\n    assert scaled_temperature == result_temperature\n    assert scaled == result_scaled\n    scaled_temperature, scaled = _scale_temperature(temperature)\n    assert scaled_temperature == result_temperature\n    assert scaled == result_scaled"
