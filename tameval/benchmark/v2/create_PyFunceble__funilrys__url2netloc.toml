[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "funilrys/PyFunceble"
sha = "6fc0974a65e0987945afdfaed9e7a21dc6ad9894"
bench_version = 1

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.test.txt && pip install -r requirements.win.txt && pip install -r requirements.dev.txt && pip install -r requirements.txt && pip install -r requirements.docs.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=PyFunceble/converter/url2netloc.py -m pytest -q --junit-xml=test_output.xml tests/converter/test_url2netloc.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target PyFunceble.converter.url2netloc --unit-test tests.converter.test_url2netloc --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target PyFunceble/converter/url2netloc.py --unit-test tests/converter/test_url2netloc.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 97.0
original_coverage = 97.0
mutation_kill_rate = 72.0
original_mutation_kill_rate = 72.0
covered_lines = [ 52, 53, 55, 58, 64, 65, 69, 70, 80, 81, 83, 84, 87, 89, 90, 95, 96, 101, 102, 104, 109, 111, 113, 119, 121, 123, 131, 132, 134, 135, 136, 137, 141, 142, 144, 145, 147,]
missed_lines = [ 99,]

[input_info]
test_file_path = "tests/converter/test_url2netloc.py"
focal_file_path = "PyFunceble/converter/url2netloc.py"
test_file_url = "https://github.com/funilrys/PyFunceble/blob/6fc0974a65e0987945afdfaed9e7a21dc6ad9894/tests/converter/test_url2netloc.py"
focal_file_url = "https://github.com/funilrys/PyFunceble/blob/6fc0974a65e0987945afdfaed9e7a21dc6ad9894/PyFunceble/converter/url2netloc.py"
first_commit_date = "2020-12-19"
last_commit_date = "2025-02-23"
test_file_content = "\"\"\"\nThe tool to check the availability or syntax of domain, IP or URL.\n\n::\n\n\n    ██████╗ ██╗   ██╗███████╗██╗   ██╗███╗   ██╗ ██████╗███████╗██████╗ ██╗     ███████╗\n    ██╔══██╗╚██╗ ██╔╝██╔════╝██║   ██║████╗  ██║██╔════╝██╔════╝██╔══██╗██║     ██╔════╝\n    ██████╔╝ ╚████╔╝ █████╗  ██║   ██║██╔██╗ ██║██║     █████╗  ██████╔╝██║     █████╗\n    ██╔═══╝   ╚██╔╝  ██╔══╝  ██║   ██║██║╚██╗██║██║     ██╔══╝  ██╔══██╗██║     ██╔══╝\n    ██║        ██║   ██║     ╚██████╔╝██║ ╚████║╚██████╗███████╗██████╔╝███████╗███████╗\n    ╚═╝        ╚═╝   ╚═╝      ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚══════╝╚═════╝ ╚══════╝╚══════╝\n\nTests of URL 2 Network Location converter.\n\nAuthor:\n    Nissar Chababy, @funilrys, contactTATAfunilrysTODTODcom\n\nSpecial thanks:\n    https://pyfunceble.github.io/special-thanks.html\n\nContributors:\n    https://pyfunceble.github.io/contributors.html\n\nProject link:\n    https://github.com/funilrys/PyFunceble\n\nProject documentation:\n    https://docs.pyfunceble.com\n\nProject homepage:\n    https://pyfunceble.github.io/\n\nLicense:\n::\n\n\n    Copyright 2017, 2018, 2019, 2020, 2022, 2023, 2024, 2025 Nissar Chababy\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n        https://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\"\"\"\n\nimport unittest\nimport unittest.mock\nfrom urllib.parse import ParseResult\n\nfrom PyFunceble.converter.url2netloc import Url2Netloc\n\n\nclass TestUrl2Netloc(unittest.TestCase):\n    \"\"\"\n    Tests our internal URL converter.\n    \"\"\"\n\n    def setUp(self) -> None:\n        \"\"\"\n        Setups everything needed for the tests.\n        \"\"\"\n\n        self.converter = Url2Netloc()\n\n    def tearDown(self) -> None:\n        \"\"\"\n        Destroys everything previously created for the tests.\n        \"\"\"\n\n        del self.converter\n\n    def test_set_data_to_convert_no_string(self) -> None:\n        \"\"\"\n        Tests the method which let us set the data to work with for the case\n        that a non-string value is given.\n        \"\"\"\n\n        given = [\"Hello\", \"World\"]\n\n        self.assertRaises(TypeError, lambda: self.converter.set_data_to_convert(given))\n\n    def test_set_data_to_convert_empty_string(self) -> None:\n        \"\"\"\n        Tests the method which let us set the data to work with for the case\n        that an empty-string value is given.\n        \"\"\"\n\n        given = \"\"\n\n        self.assertRaises(ValueError, lambda: self.converter.set_data_to_convert(given))\n\n    def test_get_converted_nothing_to_decode(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that no conversion is needed.\n        \"\"\"\n\n        given = \"example.org\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_full_url(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that a full URL is given.\n        \"\"\"\n\n        given = \"https://example.org/hello/world/this/is/a/test\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_full_url_with_port(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that a full URL (with explicit port) is given.\n        \"\"\"\n\n        given = \"https://example.org:8080/hello/world/this/is/a/test\"\n        expected = \"example.org:8080\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_full_url_with_params(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that a full URL (with params) is given.\n        \"\"\"\n\n        given = \"https://example.org/?is_admin=true\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_without_scheme(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that no scheme is given.\n        \"\"\"\n\n        given = \"example.org/hello/world/this/is/a/test\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_without_scheme_and_with_params(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that no scheme (but with params) is given.\n        \"\"\"\n\n        given = \"example.org/?is_admin=true\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_without_protocol(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that no protocol is given.\n        \"\"\"\n\n        given = \"://example.org/hello/world/this/is/a/test\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_without_protocol_and_with_params(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that no protocol (but params) is given.\n        \"\"\"\n\n        given = \"://example.org/?is_admin=true\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_without_protocol_and_path(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that no protocol and path is given.\n        \"\"\"\n\n        given = \"://example.org/\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_startswith_2_slashes(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that the given url starts with 2 slashes.\n        \"\"\"\n\n        given = \"//example.org/hello/world/this/is/a/test\"\n        expected = \"example.org\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_get_converted_url_startswith_1_slash(self) -> None:\n        \"\"\"\n        Tests the method which let us extracts the netloc from a given URL for\n        the case that the given url starts with 1 slash.\n        \"\"\"\n\n        given = \"/example.org/hello/world/this/is/a/test\"\n        expected = \"\"\n\n        self.converter.data_to_convert = given\n        actual = self.converter.get_converted()\n\n        self.assertEqual(expected, actual)\n\n    def test_parse_single_url(self) -> None:\n        \"\"\"\n        Tests the method which let us \"quickly\" parse a URL.\n        \"\"\"\n\n        actual = self.converter.parse_single_url(\"http://example.org/hello/world\")\n\n        self.assertIsInstance(actual, ParseResult)\n        self.assertEqual(self.converter.parse_single_url(None), None)\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n"
