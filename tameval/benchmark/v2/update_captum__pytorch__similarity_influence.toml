[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pytorch/captum"
sha = "aff7603051094012c9cf1a739a0538c38a6986b2"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=captum/influence/_core/similarity_influence.py -m pytest -q --junit-xml=test_output.xml tests/influence/_core/test_similarity_influence.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target captum.influence._core.similarity_influence --unit-test tests.influence._core.test_similarity_influence --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target captum/influence/_core/similarity_influence.py --unit-test tests/influence/_core/test_similarity_influence.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 22.0
original_coverage = 98.0
mutation_kill_rate = nan
original_mutation_kill_rate = 77.0
covered_lines = [ 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 35, 54, 65, 66, 161,]
missed_lines = [ 28, 32, 41, 42, 44, 45, 47, 48, 50, 51, 129, 131, 132, 133, 134, 135, 137, 139, 141, 146, 147, 149, 151, 152, 154, 157, 210, 214, 216, 227, 231, 234, 238, 242, 245, 248, 249, 251, 252, 253, 254, 256, 257, 263, 264, 265, 266, 268, 273, 274, 277, 279, 280, 283, 284, 285, 287, 289, 290, 298, 303, 304, 306,]

[input_info]
test_file_path = "tests/influence/_core/test_similarity_influence.py"
focal_file_path = "captum/influence/_core/similarity_influence.py"
test_file_url = "https://github.com/pytorch/captum/blob/aff7603051094012c9cf1a739a0538c38a6986b2/tests/influence/_core/test_similarity_influence.py"
focal_file_url = "https://github.com/pytorch/captum/blob/aff7603051094012c9cf1a739a0538c38a6986b2/captum/influence/_core/similarity_influence.py"
first_commit_date = "2022-02-25"
last_commit_date = "2025-06-27"
test_file_content = "# pyre-strict\n\nimport tempfile\nfrom typing import List\n\nimport torch\nimport torch.nn as nn\nfrom captum.influence._core.similarity_influence import (\n    cosine_similarity,\n    euclidean_distance,\n    SimilarityInfluence,\n)\nfrom tests.helpers import BaseTest\nfrom tests.helpers.basic import assertTensorAlmostEqual\nfrom torch import Tensor\nfrom torch.utils.data import Dataset\n\n\nclass BasicLinearNet(nn.Module):\n    def __init__(self, num_features: int) -> None:\n        super().__init__()\n        self.fc1 = nn.Linear(num_features, 5, bias=False)\n        self.fc1.weight.data.fill_(0.02)\n        self.relu1 = nn.ReLU()\n        self.fc2 = nn.Linear(5, 1, bias=False)\n        self.fc2.weight.data.fill_(0.02)\n\n    def forward(self, x: Tensor) -> Tensor:\n        x = self.fc1(x)\n        x = self.relu1(x)\n        x = self.fc2(x)\n        return x\n\n\nclass RangeDataset(Dataset):\n    def __init__(self, low: int, high: int, num_features: int) -> None:\n        self.samples: Tensor = (\n            torch.arange(start=low, end=high, dtype=torch.float)\n            .repeat(num_features, 1)\n            .transpose(1, 0)\n        )\n\n    def __len__(self) -> int:\n        return len(self.samples)\n\n    def __getitem__(self, idx: int) -> Tensor:\n        return self.samples[idx]\n\n\nclass Test(BaseTest):\n    def test_cosine_with_zeros(self) -> None:\n        a = torch.cat((torch.zeros((1, 3, 16, 16)), torch.rand((1, 3, 16, 16))))\n        b = torch.rand((2, 3, 16, 16))\n        similarity = cosine_similarity(a, b)\n        self.assertFalse(torch.any(torch.isnan(similarity)))\n\n    def test_correct_influences_standard(self) -> None:\n        with tempfile.TemporaryDirectory() as tmpdir:\n            num_features = 4\n            low, high = 0, 16\n            batch_size = high // 2\n            mymodel = BasicLinearNet(num_features)\n            mydata = RangeDataset(low, high, num_features)\n            layers = []\n            for name, _module in mymodel.named_modules():\n                layers.append(name)\n            # pyre-fixme[35]: Target cannot be annotated.\n            layers: List[str] = list(filter(None, layers))\n            testlayers = layers[1:]\n\n            sim = SimilarityInfluence(\n                mymodel,\n                testlayers,\n                mydata,\n                tmpdir,\n                \"linear\",\n                batch_size=batch_size,\n                similarity_metric=euclidean_distance,\n                similarity_direction=\"min\",\n            )\n            inputs = torch.stack((mydata[1], mydata[8], mydata[14]))\n            influences = sim.influence(inputs, top_k=3)\n\n            self.assertEqual(len(influences), len(testlayers))\n            assertTensorAlmostEqual(\n                self,\n                torch.sum(influences[layers[1]][0], 1),\n                torch.sum(torch.Tensor([[1, 0, 2], [8, 7, 9], [14, 15, 13]]), 1),\n            )\n            assertTensorAlmostEqual(\n                self,\n                torch.sum(influences[layers[2]][0], 1),\n                torch.sum(torch.Tensor([[1, 0, 2], [8, 7, 9], [14, 15, 13]]), 1),\n            )\n\n    def test_correct_influences_batch_single(self) -> None:\n        with tempfile.TemporaryDirectory() as tmpdir:\n            num_features = 4\n            low, high = 0, 16\n            batch_size = 1\n            mymodel = BasicLinearNet(num_features)\n            mydata = RangeDataset(low, high, num_features)\n            layers = []\n            for name, _module in mymodel.named_modules():\n                layers.append(name)\n            # pyre-fixme[35]: Target cannot be annotated.\n            layers: List[str] = list(filter(None, layers))\n            testlayers = layers[1:]\n\n            sim = SimilarityInfluence(\n                mymodel,\n                testlayers,\n                mydata,\n                tmpdir,\n                \"linear\",\n                batch_size=batch_size,\n                similarity_metric=euclidean_distance,\n                similarity_direction=\"min\",\n            )\n            inputs = torch.stack((mydata[1], mydata[8], mydata[14]))\n            influences = sim.influence(inputs, top_k=3)\n\n            self.assertEqual(len(influences), len(testlayers))\n            assertTensorAlmostEqual(\n                self,\n                torch.sum(influences[layers[1]][0], 1),\n                torch.sum(torch.Tensor([[1, 0, 2], [8, 7, 9], [14, 15, 13]]), 1),\n            )\n            assertTensorAlmostEqual(\n                self,\n                torch.sum(influences[layers[2]][0], 1),\n                torch.sum(torch.Tensor([[1, 0, 2], [8, 7, 9], [14, 15, 13]]), 1),\n            )\n\n    def test_correct_influences_batch_overflow(self) -> None:\n        with tempfile.TemporaryDirectory() as tmpdir:\n            num_features = 4\n            low, high = 0, 16\n            batch_size = 12\n            mymodel = BasicLinearNet(num_features)\n            mydata = RangeDataset(low, high, num_features)\n            layers = []\n            for name, _module in mymodel.named_modules():\n                layers.append(name)\n            # pyre-fixme[35]: Target cannot be annotated.\n            layers: List[str] = list(filter(None, layers))\n            testlayers = layers[1:]\n\n            sim = SimilarityInfluence(\n                mymodel,\n                testlayers,\n                mydata,\n                tmpdir,\n                \"linear\",\n                batch_size=batch_size,\n                similarity_metric=euclidean_distance,\n                similarity_direction=\"min\",\n            )\n            inputs = torch.stack((mydata[1], mydata[8], mydata[14]))\n            influences = sim.influence(inputs, top_k=3)\n\n            self.assertEqual(len(influences), len(testlayers))\n            assertTensorAlmostEqual(\n                self,\n                torch.sum(influences[layers[1]][0], 1),\n                torch.sum(torch.Tensor([[1, 0, 2], [8, 7, 9], [14, 15, 13]]), 1),\n            )\n            assertTensorAlmostEqual(\n                self,\n                torch.sum(influences[layers[2]][0], 1),\n                torch.sum(torch.Tensor([[1, 0, 2], [8, 7, 9], [14, 15, 13]]), 1),\n            )\n\n    def test_zero_activations(self) -> None:\n        with tempfile.TemporaryDirectory() as tmpdir:\n            num_features = 4\n            low, high = 0, 16\n            batch_size = high // 2\n            mymodel = BasicLinearNet(num_features)\n            mydata = RangeDataset(low, high, num_features)\n            layers = []\n            for name, _module in mymodel.named_modules():\n                layers.append(name)\n            # pyre-fixme[35]: Target cannot be annotated.\n            layers: List[str] = list(filter(None, layers))\n            testlayers = layers[1:]\n\n            sim1 = SimilarityInfluence(\n                mymodel, testlayers, mydata, tmpdir, \"linear\", batch_size=batch_size\n            )\n            inputs = torch.stack((mydata[1], mydata[8], mydata[14]))\n            influences = sim1.influence(inputs, top_k=3)\n            self.assertEqual(len(influences), len(layers[1:]) + 1)  # zero_acts included\n            self.assertTrue(\"zero_acts-fc2\" in influences)"
