[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "stackitcloud/stackit-cli"
sha = "13c97c95a2ced03b7caf6038c900f6d0628e384b"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/cmd/server/reboot/reboot.go internal/cmd/server/reboot/reboot_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/cmd/server/reboot/reboot.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 53.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/cmd/server/reboot/reboot_test.go"
focal_file_path = "internal/cmd/server/reboot/reboot.go"
test_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/server/reboot/reboot_test.go"
focal_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/server/reboot/reboot.go"
first_commit_date = "2025-03-06"
last_commit_date = "2025-03-06"
test_file_content = "package reboot\n\n\nvar projectIdFlag = globalflags.ProjectIdFlag\n\ntype testCtxKey struct{}\n\nvar testCtx = context.WithValue(context.Background(), testCtxKey{}, \"foo\")\nvar testClient = &iaas.APIClient{}\nvar testProjectId = uuid.NewString()\nvar testServerId = uuid.NewString()\n\nfunc fixtureArgValues(mods ...func(argValues []string)) []string {\n\targValues := []string{\n\t\ttestServerId,\n\t}\n\tfor _, mod := range mods {\n\t\tmod(argValues)\n\t}\n\treturn argValues\n}\n\nfunc fixtureFlagValues(mods ...func(flagValues map[string]string)) map[string]string {\n\tflagValues := map[string]string{\n\t\tprojectIdFlag:  testProjectId,\n\t\thardRebootFlag: \"false\",\n\t}\n\tfor _, mod := range mods {\n\t\tmod(flagValues)\n\t}\n\treturn flagValues\n}\n\nfunc fixtureInputModel(mods ...func(model *inputModel)) *inputModel {\n\tmodel := &inputModel{\n\t\tGlobalFlagModel: &globalflags.GlobalFlagModel{\n\t\t\tVerbosity: globalflags.VerbosityDefault,\n\t\t\tProjectId: testProjectId,\n\t\t},\n\t\tServerId:   testServerId,\n\t\tHardReboot: false,\n\t}\n\tfor _, mod := range mods {\n\t\tmod(model)\n\t}\n\treturn model\n}\n\nfunc fixtureRequest(mods ...func(request *iaas.ApiRebootServerRequest)) iaas.ApiRebootServerRequest {\n\trequest := testClient.RebootServer(testCtx, testProjectId, testServerId)\n\tfor _, mod := range mods {\n\t\tmod(&request)\n\t}\n\treturn request\n}\n\nfunc TestParseInput(t *testing.T) {\n\ttests := []struct {\n\t\tdescription   string\n\t\targValues     []string\n\t\tflagValues    map[string]string\n\t\tisValid       bool\n\t\texpectedModel *inputModel\n\t}{\n\t\t{\n\t\t\tdescription:   \"base\",\n\t\t\targValues:     fixtureArgValues(),\n\t\t\tflagValues:    fixtureFlagValues(),\n\t\t\tisValid:       true,\n\t\t\texpectedModel: fixtureInputModel(),\n\t\t},\n\t\t{\n\t\t\tdescription: \"no values\",\n\t\t\targValues:   []string{},\n\t\t\tflagValues:  map[string]string{},\n\t\t\tisValid:     false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id missing\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues:  map[string]string{},\n\t\t\tisValid:     false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id invalid 1\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[projectIdFlag] = \"\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"project id invalid 2\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[projectIdFlag] = \"invalid-uuid\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"server id invalid 1\",\n\t\t\targValues: fixtureArgValues(func(argValues []string) {\n\t\t\t\targValues[0] = \"\"\n\t\t\t}),\n\t\t\tflagValues: fixtureFlagValues(),\n\t\t\tisValid:    false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"server id invalid 2\",\n\t\t\targValues: fixtureArgValues(func(argValues []string) {\n\t\t\t\targValues[0] = \"invalid-uuid\"\n\t\t\t}),\n\t\t\tflagValues: fixtureFlagValues(),\n\t\t\tisValid:    false,\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\tp := print.NewPrinter()\n\t\t\tcmd := NewCmd(p)\n\t\t\terr := globalflags.Configure(cmd.Flags())\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"configure global flags: %v\", err)\n\t\t\t}\n\n\t\t\tfor flag, value := range tt.flagValues {\n\t\t\t\terr := cmd.Flags().Set(flag, value)\n\t\t\t\tif err != nil {\n\t\t\t\t\tif !tt.isValid {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tt.Fatalf(\"setting flag --%s=%s: %v\", flag, value, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\terr = cmd.ValidateArgs(tt.argValues)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating args: %v\", err)\n\t\t\t}\n\n\t\t\terr = cmd.ValidateRequiredFlags()\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating flags: %v\", err)\n\t\t\t}\n\n\t\t\tmodel, err := parseInput(p, cmd, tt.argValues)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error parsing input: %v\", err)\n\t\t\t}\n\n\t\t\tif !tt.isValid {\n\t\t\t\tt.Fatalf(\"did not fail on invalid input\")\n\t\t\t}\n\t\t\tdiff := cmp.Diff(model, tt.expectedModel)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestBuildRequest(t *testing.T) {\n\ttests := []struct {\n\t\tdescription     string\n\t\tmodel           *inputModel\n\t\texpectedRequest iaas.ApiRebootServerRequest\n\t}{\n\t\t{\n\t\t\tdescription:     \"base (soft reboot)\",\n\t\t\tmodel:           fixtureInputModel(),\n\t\t\texpectedRequest: fixtureRequest(),\n\t\t},\n\t\t{\n\t\t\tdescription: \"hard reboot is set\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.HardReboot = true\n\t\t\t}),\n\t\t\texpectedRequest: fixtureRequest(func(request *iaas.ApiRebootServerRequest) {\n\t\t\t\t*request = request.Action(\"hard\")\n\t\t\t}),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\trequest := buildRequest(testCtx, tt.model, testClient)\n\n\t\t\tdiff := cmp.Diff(request, tt.expectedRequest,\n\t\t\t\tcmp.AllowUnexported(tt.expectedRequest),\n\t\t\t\tcmpopts.EquateComparable(testCtx),\n\t\t\t)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}"
