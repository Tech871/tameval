[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "tensorflow/datasets"
sha = "5afdc02a1a6ce1a5ded7e2395c7a3498216936bb"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=tensorflow_datasets/core/dataset_collection_builder.py -m pytest -q --junit-xml=test_output.xml tensorflow_datasets/core/dataset_collection_builder_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target tensorflow_datasets.core.dataset_collection_builder --unit-test tensorflow_datasets.core.dataset_collection_builder_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target tensorflow_datasets/core/dataset_collection_builder.py --unit-test tensorflow_datasets/core/dataset_collection_builder_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 57.0
original_coverage = 81.0
mutation_kill_rate = 20.0
original_mutation_kill_rate = 20.0
covered_lines = [ 16, 17, 18, 20, 21, 22, 23, 25, 26, 29, 36, 65, 66, 81, 82, 83, 84, 85, 87, 88, 115, 126, 127, 130, 131, 177, 180, 181, 183, 187, 189, 191, 204, 207, 209, 210, 213, 215,]
missed_lines = [ 32, 33, 55, 56, 57, 58, 59, 60, 62, 97, 98, 99, 102, 103, 106, 128, 175, 178, 205, 208, 211, 220, 221, 222, 223, 224, 225, 226, 227,]

[input_info]
test_file_path = "tensorflow_datasets/core/dataset_collection_builder_test.py"
focal_file_path = "tensorflow_datasets/core/dataset_collection_builder.py"
test_file_url = "https://github.com/tensorflow/datasets/blob/5afdc02a1a6ce1a5ded7e2395c7a3498216936bb/tensorflow_datasets/core/dataset_collection_builder_test.py"
focal_file_url = "https://github.com/tensorflow/datasets/blob/5afdc02a1a6ce1a5ded7e2395c7a3498216936bb/tensorflow_datasets/core/dataset_collection_builder.py"
first_commit_date = "2022-07-18"
last_commit_date = "2025-06-02"
test_file_content = "# coding=utf-8\n# Copyright 2025 The TensorFlow Datasets Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for dataset_collection_builder.\"\"\"\nfrom unittest import mock\n\nfrom etils import epath\nimport pytest\nfrom tensorflow_datasets import testing\nfrom tensorflow_datasets.core import dataset_collection_builder as dcb\nfrom tensorflow_datasets.core.utils import version as version_lib\n\n@pytest.fixture(name='dummy_dc', scope='session')\ndef fixture_dummy_dc():\n  return testing.DummyDatasetCollection()\n\ndef test_get_latest_version(dummy_dc):\n  assert dummy_dc.get_latest_version() == '2.0.0'\n\ndef test_get_nonexistent_collection(dummy_dc):\n  with pytest.raises(ValueError):\n    dummy_dc.get_collection(version='1.2.0')\n    dummy_dc.get_collection(version='1.*.2')\n"
