[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "byronka/minum"
sha = "42416409b5fd3535c882b2a994cd9eb0be82260a"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=TheBrigTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.TheBrig  -DtargetTests=**.TheBrigTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 97.0
original_coverage = 97.0
mutation_kill_rate = 79.0
original_mutation_kill_rate = 79.0
covered_lines = [ 22, 31, 32, 33, 34, 35, 36, 37, 52, 53, 54, 55, 58, 59, 68, 69, 70, 71, 73, 74, 75, 79, 80, 81, 83, 85, 86, 87, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 113, 114, 115, 117, 121, 122, 123, 124, 125, 127, 129, 134, 135, 137, 139, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 155, 157, 163, 164, 166, 168, 170, 176, 178, 180,]
missed_lines = [ 45, 46,]

[input_info]
test_file_path = "src/test/java/com/renomad/minum/security/TheBrigTests.java"
focal_file_path = "src/main/java/com/renomad/minum/security/TheBrig.java"
test_file_url = "https://github.com/byronka/minum/blob/42416409b5fd3535c882b2a994cd9eb0be82260a/src/test/java/com/renomad/minum/security/TheBrigTests.java"
focal_file_url = "https://github.com/byronka/minum/blob/42416409b5fd3535c882b2a994cd9eb0be82260a/src/main/java/com/renomad/minum/security/TheBrig.java"
first_commit_date = "2023-08-29"
last_commit_date = "2024-07-01"
test_file_content = "package com.renomad.minum.security;\n\nimport com.renomad.minum.state.Context;\nimport com.renomad.minum.logging.TestLogger;\nimport com.renomad.minum.utils.FileUtils;\nimport com.renomad.minum.utils.MyThread;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\nimport java.nio.file.Path;\nimport java.util.Properties;\n\nimport static com.renomad.minum.testing.TestFramework.*;\n\npublic class TheBrigTests {\n\n    private static Context context;\n    private static TestLogger logger;\n    private static FileUtils fileUtils;\n\n    @BeforeClass\n    public static void init() {\n        var props = new Properties();\n        props.setProperty(\"DB_DIRECTORY\", \"out/brigdb\");\n        props.setProperty(\"IS_THE_BRIG_ENABLED\", \"true\");\n        context = buildTestingContext(\"unit_tests\", props);\n        logger = (TestLogger) context.getLogger();\n        fileUtils = new FileUtils(logger, context.getConstants());\n    }\n\n    @AfterClass\n    public static void cleanup() {\n        shutdownTestingContext(context);\n    }\n\n    /**\n     * A user should be able to put a particular address in jail for\n     * a time and after it has paid its dues, be released.\n     */\n    @Test\n    public void test_TheBrig_Basic() {\n        MyThread.sleep(50);\n        fileUtils.deleteDirectoryRecursivelyIfExists(Path.of(context.getConstants().dbDirectory));\n        var b = new TheBrig(10, context).initialize();\n        // give the database time to start\n        MyThread.sleep(20);\n\n        // send some clients to jail\n        ITheBrig finalB = b;\n        Thread.ofVirtual().start(() -> finalB.sendToJail(\"1.1.1.1_too_freq_downloads\", 10000));\n        Thread.ofVirtual().start(() -> finalB.sendToJail(\"2.2.2.2_too_freq_downloads\", 20));\n        Thread.ofVirtual().start(() -> finalB.sendToJail(\"3.3.3.3_too_freq_downloads\", 20));\n        Thread.ofVirtual().start(() -> finalB.sendToJail(\"4.4.4.4_too_freq_downloads\", 20));\n\n        // what's the situation?\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"1.1.1.1_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"2.2.2.2_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"3.3.3.3_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"4.4.4.4_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertFalse(finalB.isInJail(\"DOES_NOT_EXIST\")));\n\n        MyThread.sleep(10);\n\n        // after a short time, they should all still be in jail\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"1.1.1.1_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"2.2.2.2_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"3.3.3.3_too_freq_downloads\")));\n        Thread.ofVirtual().start(() -> assertTrue(finalB.isInJail(\"4.4.4.4_too_freq_downloads\")));\n\n        MyThread.sleep(80);\n\n        b.stop();\n        b = new TheBrig(10, context).initialize();\n        MyThread.sleep(30);\n\n        // after their release time, they should all be out, except 1.1.1.1, who bugged us\n        assertTrue(b.isInJail(\"1.1.1.1_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"2.2.2.2_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"3.3.3.3_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"4.4.4.4_too_freq_downloads\"));\n\n        // 1.1.1.1 bugged us some more.\n        b.sendToJail(\"1.1.1.1_too_freq_downloads\", 40);\n\n        b.stop();\n        b = new TheBrig(10, context).initialize();\n        MyThread.sleep(30);\n\n        assertTrue(b.isInJail(\"1.1.1.1_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"2.2.2.2_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"3.3.3.3_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"4.4.4.4_too_freq_downloads\"));\n\n        MyThread.sleep(20);\n\n        assertTrue(b.isInJail(\"1.1.1.1_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"2.2.2.2_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"3.3.3.3_too_freq_downloads\"));\n        assertFalse(b.isInJail(\"4.4.4.4_too_freq_downloads\"));\n\n        b.stop();\n    }\n\n    @Test\n    public void test_TheBrig_RegularStop() {\n        MyThread.sleep(50);\n        fileUtils.deleteDirectoryRecursivelyIfExists(Path.of(context.getConstants().dbDirectory));\n        var b = new TheBrig(10, context).initialize();\n        MyThread.sleep(10);\n        b.stop();\n        assertTrue(true, \"We should get here without an exception\");\n        assertTrue(logger.doesMessageExist(\"TheBrig has been told to stop\", 8));\n        assertTrue(logger.doesMessageExist(\"TheBrig: Sending interrupt to thread\", 8));\n        assertTrue(logger.doesMessageExist(\"TheBrig is stopped.\", 8));\n    }\n\n    /**\n     * If the brig isn't initialized, there's no thread to stop\n     */\n    @Test\n    public void test_TheBrig_Uninitialized() {\n        var b = new TheBrig(10, context);\n        var ex = assertThrows(MinumSecurityException.class, b::stop);\n        assertEquals(ex.getMessage(), \"TheBrig was told to stop, but it was uninitialized\");\n    }\n\n    /**\n     * If an inmate was in the brig already and they transgressed again,\n     * simply put them back in with a duration starting from the moment\n     * of the new transgression.\n     */\n    @Test\n    public void test_TheBrig_ExistingInmate() {\n        MyThread.sleep(50);\n        fileUtils.deleteDirectoryRecursivelyIfExists(Path.of(context.getConstants().dbDirectory));\n        var b = new TheBrig(10, context).initialize();\n        b.sendToJail(\"1.2.3.4_too_freq_downloads\", 20);\n        Long releaseTime = b.getInmates().getFirst().getReleaseTime();\n        assertTrue(b.isInJail(\"1.2.3.4_too_freq_downloads\"));\n        assertEquals(b.getInmates().size(), 1);\n        b.sendToJail(\"1.2.3.4_too_freq_downloads\", 20);\n        assertEquals(releaseTime + 20, b.getInmates().getFirst().getReleaseTime());\n        MyThread.sleep(70);\n        assertFalse(b.isInJail(\"1.2.3.4_too_freq_downloads\"));\n        assertEquals(b.getInmates().size(), 0);\n        b.stop();\n    }\n\n    @Test\n    public void test_Deserialization() {\n        Inmate inmate = Inmate.EMPTY.deserialize(\"123|20.211.213.157_vuln_seeking|1691728931684\");\n        assertEquals(inmate, new Inmate(123L, \"20.211.213.157_vuln_seeking\", 1691728931684L));\n        assertEquals(inmate.getClientId(), \"20.211.213.157_vuln_seeking\");\n        assertEquals(inmate.getReleaseTime(), 1691728931684L);\n    }\n\n\n    @Test\n    public void test_BrigDisabled() {\n        Properties properties = new Properties();\n        properties.setProperty(\"IS_THE_BRIG_ENABLED\", \"false\");\n        var disabledBrigContext = buildTestingContext(\"testing brig disabled\", properties);\n\n        var theBrig = new TheBrig(10, disabledBrigContext);\n\n        assertFalse(theBrig.sendToJail(\"\", 0));\n        assertFalse(theBrig.isInJail(\"\"));\n        shutdownTestingContext(disabledBrigContext);\n    }\n}\n"
