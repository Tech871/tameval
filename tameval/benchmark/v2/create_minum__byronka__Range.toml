[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "byronka/minum"
sha = "42416409b5fd3535c882b2a994cd9eb0be82260a"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=RangeTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Range  -DtargetTests=**.RangeTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 67.0
original_coverage = 100.0
mutation_kill_rate = 77.0
original_mutation_kill_rate = 94.0
covered_lines = [ 9, 16, 17, 18, 25, 26, 27, 32, 33, 34, 35, 37, 38, 40, 43, 44, 46, 55, 62, 63, 64, 65, 66, 67, 73, 80, 83, 87, 91, 95, 104, 105, 106, 107, 112,]
missed_lines = [ 19, 20, 21, 22, 23, 56, 57, 59, 60, 69, 70, 74, 75, 76, 77, 99, 117,]

[input_info]
test_file_path = "src/test/java/com/renomad/minum/web/RangeTests.java"
focal_file_path = "src/main/java/com/renomad/minum/web/Range.java"
test_file_url = "https://github.com/byronka/minum/blob/42416409b5fd3535c882b2a994cd9eb0be82260a/src/test/java/com/renomad/minum/web/RangeTests.java"
focal_file_url = "https://github.com/byronka/minum/blob/42416409b5fd3535c882b2a994cd9eb0be82260a/src/main/java/com/renomad/minum/web/Range.java"
first_commit_date = "2024-08-17"
last_commit_date = "2024-08-17"
test_file_content = "package com.renomad.minum.web;\n\nimport nl.jqno.equalsverifier.EqualsVerifier;\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static com.renomad.minum.testing.TestFramework.*;\n\npublic class RangeTests {\n\n    @Test\n    public void testEquals() {\n        EqualsVerifier.forClass(Range.class).verify();\n    }\n\n\n    @Test\n    public void test_DetermineLengthFromRangeHeader_EdgeCase_MissingFirstPart() {\n        List<String> listOfHeaders = List.of(\"Range: bytes=-499\");\n        Headers headers = new Headers(listOfHeaders);\n        Range range = new Range(headers, 1000);\n        assertEquals(range.getLength(), 499L);\n        assertEquals(range.getOffset(), 501L);\n        assertTrue(range.getRangeFirstPart() == null);\n        assertEquals(range.getRangeSecondPart(), 499L);\n    }\n\n\n    @Test\n    public void test_DetermineLengthFromRangeHeader_EdgeCase_MissingSecondPart_2() {\n        List<String> listOfHeaders = List.of(\"Range: bytes=0-\");\n        Headers headers = new Headers(listOfHeaders);\n        Range range = new Range(headers, 1000);\n        assertEquals(range.getLength(), 1000L);\n        assertEquals(range.getOffset(), 0L);\n        assertEquals(range.getRangeFirstPart(), 0L);\n        assertTrue(range.getRangeSecondPart() == null);\n    }\n\n\n    /**\n     * The provided range should be SMALLER-LARGER.  If that is untrue, throw an exception.\n     */\n\n    /**\n     * The provided range won't parse negative numbers.\n     */\n\n\n\n\n    /**\n     * The regular expression will only allow up to a certain number\n     * of digits or it won't find anything.\n     */\n\n    /**\n     * The regular expression will only allow up to a certain number\n     * of digits or it won't find anything.\n     */\n\n    /**\n     * There must be just one range header, or else it's invalid\n     */\n    @Test\n    public void test_MultipleRangeHeaders() {\n        List<String> listOfHeaders = List.of(\"Range: 1-2\", \"Range: 3-4\");\n        Headers headers = new Headers(listOfHeaders);\n        var ex = assertThrows(InvalidRangeException.class, () -> new Range(headers, 1000));\n        assertEquals(ex.getMessage(), \"Error: Request contained more than one Range header\");\n    }\n\n    /**\n     * If there's no range header we return the whole content\n     */\n\n    /**\n     * Our system does not handle multiple ranges, so if that is\n     * requested, we'll just return the whole content\n     */\n}\n"
