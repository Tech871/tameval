[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.20"

[repo_info]
repository = "rulego/rulego"
sha = "22ba0b1e693a9fafb84858dffec8ff8cf5509925"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out endpoint/rest/rest.go endpoint/rest/rest_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting endpoint/rest/rest.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 62.0
original_coverage = 62.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 248, 249, 250, 251, 252, 253, 255, 256, 258, 269, 270, 271, 272, 273, 284, 285, 286, 287, 288, 308, 309, 310, 311, 312, 313, 324, 325, 326, 342, 343, 344, 345, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 369, 370, 377, 378, 379, 386, 387, 388, 393, 394, 395, 402, 403, 404, 459, 460, 461, 462, 463, 473, 474, 475, 476, 477, 478, 479, 490, 491, 492, 493, 494, 495, 496, 510, 511, 512, 513, 514, 515, 516, 527, 528, 529, 530, 531, 541, 542, 543, 544, 545, 558, 559, 560, 561, 562, 563, 583, 584, 585, 586, 587, 588, 589, 600, 601, 602, 603, 604, 614, 615, 616, 617, 618, 624, 625, 626, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 811, 812, 816, 817, 818, 828, 829, 830, 835, 836, 837, 838, 839, 840, 841, 842, 843, 848, 849, 850, 851, 852, 853, 854, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 928, 929, 935, 936, 937, 950, 951, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 969, 970, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 998, 1002, 1003, 1009, 1010, 1018, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1059, 1060, 1064, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1138, 1152, 1155, 1156, 1157, 1161, 1162, 1163, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1202, 1205, 1206, 1207, 1210, 1211, 1212, 1213, 1214, 1215, 1219, 1220, 1221, 1222, 1246, 1247, 1248, 1271, 1274, 1275, 1276, 1277, 1278, 1281, 1282, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1306, 1307, 1308, 1313, 1314, 1315, 1321, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1371, 1375, 1376, 1377, 1378, 1379,]
missed_lines = [ 314, 315, 316, 346, 347, 348, 411, 412, 413, 620, 621, 622, 813, 814, 815, 819, 820, 821, 822, 823, 855, 856, 857, 858, 859, 860, 861, 862, 863, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 922, 923, 924, 925, 930, 931, 932, 933, 938, 939, 940, 941, 942, 943, 944, 946, 965, 966, 967, 986, 989, 990, 991, 992, 993, 994, 995, 999, 1000, 1001, 1004, 1005, 1006, 1011, 1012, 1013, 1014, 1015, 1016, 1042, 1043, 1044, 1045, 1046, 1047, 1082, 1083, 1084, 1085, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1158, 1159, 1160, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1203, 1204, 1226, 1227, 1228, 1229, 1230, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1243, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1265, 1266, 1267, 1268, 1269, 1283, 1284, 1285, 1286, 1297, 1298, 1304, 1305, 1311, 1312, 1318, 1319, 1320, 1322, 1323, 1324, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1366, 1367, 1368,]

[input_info]
test_file_path = "endpoint/rest/rest_test.go"
focal_file_path = "endpoint/rest/rest.go"
test_file_url = "https://github.com/rulego/rulego/blob/22ba0b1e693a9fafb84858dffec8ff8cf5509925/endpoint/rest/rest_test.go"
focal_file_url = "https://github.com/rulego/rulego/blob/22ba0b1e693a9fafb84858dffec8ff8cf5509925/endpoint/rest/rest.go"
first_commit_date = "2023-08-14"
last_commit_date = "2025-07-05"
test_file_content = "package rest\n\nimport (\n\t\"fmt\"\n\t\"github.com/rulego/rulego/api/types\"\n\t\"github.com/rulego/rulego/api/types/endpoint\"\n\t\"github.com/rulego/rulego/components/action\"\n\t\"github.com/rulego/rulego/endpoint/impl\"\n\t\"github.com/rulego/rulego/engine\"\n\t\"github.com/rulego/rulego/test\"\n\t\"github.com/rulego/rulego/test/assert\"\n\t\"github.com/rulego/rulego/utils/maps\"\n\t\"net/http\"\n\t\"os\"\n\t\"reflect\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n)\n\nvar testdataFolder = \"../../testdata/rule\"\nvar testServer = \":9090\"\nvar testConfigServer = \":9091\"\n\n// 测试请求/响应消息\nfunc TestRestMessage(t *testing.T) {\n\tt.Run(\"Request\", func(t *testing.T) {\n\t\tvar request = &RequestMessage{}\n\t\ttest.EndpointMessage(t, request)\n\t})\n\tt.Run(\"Response\", func(t *testing.T) {\n\t\tvar response = &ResponseMessage{}\n\t\ttest.EndpointMessage(t, response)\n\t})\n}\n\nfunc TestRouterId(t *testing.T) {\n\tconfig := types.NewConfig()\n\tvar nodeConfig = make(types.Configuration)\n\t_ = maps.Map2Struct(&Config{\n\t\tServer: testServer,\n\t}, &nodeConfig)\n\tvar ep = &Endpoint{}\n\terr := ep.Init(config, nodeConfig)\n\tassert.Nil(t, err)\n\tassert.Equal(t, testServer, ep.Id())\n\trouter := impl.NewRouter().SetId(\"r1\").From(\"/device/info\").End()\n\trouterId, _ := ep.AddRouter(router, \"GET\")\n\tassert.Equal(t, \"r1\", routerId)\n\n\trouter = impl.NewRouter().From(\"/device/info\").End()\n\trouterId, _ = ep.AddRouter(router, \"POST\")\n\tassert.Equal(t, \"POST:/device/info\", routerId)\n\n\terr = ep.RemoveRouter(\"r1\")\n\tassert.Nil(t, err)\n\terr = ep.RemoveRouter(\"POST:/device/info\")\n\tassert.Nil(t, err)\n\terr = ep.RemoveRouter(\"GET:/device/info\")\n\tassert.Equal(t, fmt.Sprintf(\"router: %s not found\", \"GET:/device/info\"), err.Error())\n}\n\nfunc TestRestEndpointConfig(t *testing.T) {\n\tconfig := engine.NewConfig(types.WithDefaultPool())\n\t//创建rest endpoint服务\n\tvar nodeConfig = make(types.Configuration)\n\t_ = maps.Map2Struct(&Config{\n\t\tServer: testConfigServer,\n\t}, &nodeConfig)\n\tvar epStarted = &Endpoint{}\n\terr := epStarted.Init(config, nodeConfig)\n\n\tassert.Equal(t, testConfigServer, epStarted.Id())\n\terr = epStarted.Start()\n\tassert.Nil(t, err)\n\n\ttime.Sleep(time.Millisecond * 200)\n\n\tvar epErr = &Endpoint{}\n\terr = epErr.Init(config, nodeConfig)\n\n\t_, err = epErr.AddRouter(nil, \"POST\")\n\tassert.Equal(t, \"router can not nil\", err.Error())\n\n\trestEndpoint := &Endpoint{}\n\terr = restEndpoint.Init(config, nodeConfig)\n\n\tassert.Equal(t, testConfigServer, restEndpoint.Id())\n\t//_, err := ep.AddRouter(nil)\n\t//assert.Equal(t, \"router can not nil\", err.Error())\n\ttestUrl := \"/api/test\"\n\trouter := impl.NewRouter().From(testUrl).End()\n\t_, err = restEndpoint.AddRouter(router)\n\tassert.Equal(t, \"need to specify HTTP method\", err.Error())\n\n\trouter = impl.NewRouter().From(testUrl).End()\n\trouterId, err := restEndpoint.AddRouter(router, \"POST\")\n\tassert.Equal(t, \"POST:/api/test\", routerId)\n\n\t//restEndpoint, ok := ep.(*Rest)\n\t//assert.True(t, ok)\n\n\trouter = impl.NewRouter().From(testUrl).End()\n\t//restEndpoint.POST(router)\n\trestEndpoint.GET(router)\n\trestEndpoint.DELETE(router)\n\trestEndpoint.PATCH(router)\n\trestEndpoint.OPTIONS(router)\n\trestEndpoint.HEAD(router)\n\trestEndpoint.PUT(router)\n\n\t//删除路由\n\trestEndpoint.RemoveRouter(routerId)\n\trestEndpoint.RemoveRouter(routerId, \"POST\")\n\n\tepStarted.Destroy()\n\tepErr.Destroy()\n\ttime.Sleep(time.Millisecond * 200)\n}\n\nfunc TestRestEndpoint(t *testing.T) {\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tstop := make(chan struct{})\n\t//启动服务\n\tgo startServer(t, stop, &wg)\n\t//等待服务器启动完毕\n\ttime.Sleep(time.Millisecond * 200)\n\n\tconfig := engine.NewConfig(types.WithDefaultPool())\n\tctx := test.NewRuleContext(config, func(msg types.RuleMsg, relationType string, err2 error) {\n\t\tassert.Equal(t, \"ok\", msg.GetData())\n\t})\n\tmetaData := types.BuildMetadata(make(map[string]string))\n\tmsg1 := ctx.NewMsg(\"TEST_MSG_TYPE_AA\", metaData, \"{\\\"name\\\":\\\"lala\\\"}\")\n\n\tsendMsg(t, \"http://127.0.0.1\"+testServer+\"/api/v1/msg2Chain2/TEST_MSG_TYPE1?aa=xx\", \"POST\", msg1, ctx)\n\ttime.Sleep(time.Millisecond * 500)\n\t//停止服务器\n\tstop <- struct{}{}\n\ttime.Sleep(time.Millisecond * 200)\n\twg.Wait()\n}\n\n// 发送消息到rest服务器\nfunc sendMsg(t *testing.T, url, method string, msg types.RuleMsg, ctx types.RuleContext) types.Node {\n\tnode, _ := engine.Registry.NewNode(\"restApiCall\")\n\tvar configuration = make(types.Configuration)\n\tconfiguration[\"restEndpointUrlPattern\"] = url\n\tconfiguration[\"requestMethod\"] = method\n\tconfig := types.NewConfig()\n\terr := node.Init(config, configuration)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\t//发送消息\n\tnode.OnMsg(ctx, msg)\n\treturn node\n}\n\n// 启动rest服务\nfunc startServer(t *testing.T, stop chan struct{}, wg *sync.WaitGroup) {\n\tbuf, err := os.ReadFile(testdataFolder + \"/chain_msg_type_switch.json\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tconfig := engine.NewConfig(types.WithDefaultPool())\n\t//注册规则链\n\t_, _ = engine.New(\"default\", buf, engine.WithConfig(config))\n\n\tvar nodeConfig = make(types.Configuration)\n\t_ = maps.Map2Struct(&Config{\n\t\tServer: testServer,\n\t}, &nodeConfig)\n\tvar restEndpoint = &Endpoint{}\n\terr = restEndpoint.Init(config, nodeConfig)\n\tassert.Equal(t, Type, restEndpoint.Type())\n\tassert.True(t, reflect.DeepEqual(&Rest{\n\t\tConfig: Config{\n\t\t\tServer:       \":6333\",\n\t\t\tReadTimeout:  10, // 默认10秒\n\t\t\tWriteTimeout: 10, // 默认10秒\n\t\t\tIdleTimeout:  60, // 默认60秒\n\t\t},\n\t}, restEndpoint.New()))\n\n\t//添加全局拦截器\n\trestEndpoint.AddInterceptors(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\t//权限校验逻辑\n\t\treturn true\n\t})\n\t//设置跨域\n\trestEndpoint.GlobalOPTIONS(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Header.Get(\"Access-Control-Request-Method\") != \"\" {\n\t\t\t// 设置 CORS 相关的响应头\n\t\t\theader := w.Header()\n\t\t\theader.Set(\"Access-Control-Allow-Methods\", r.Header.Get(\"Allow\"))\n\t\t\theader.Set(\"Access-Control-Allow-Headers\", \"*\")\n\t\t\theader.Set(\"Access-Control-Allow-Origin\", \"*\")\n\t\t}\n\t\t// 返回 204 状态码\n\t\tw.WriteHeader(http.StatusNoContent)\n\t}))\n\t//路由1\n\trouter1 := impl.NewRouter().From(\"/api/v1/hello/:name\").Process(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\t//处理请求\n\t\trequest, ok := exchange.In.(*RequestMessage)\n\t\tif ok {\n\t\t\tif request.request.Method != http.MethodGet {\n\t\t\t\t//响应错误\n\t\t\t\texchange.Out.SetStatusCode(http.StatusMethodNotAllowed)\n\t\t\t\t//不执行后续动作\n\t\t\t\treturn false\n\t\t\t} else {\n\t\t\t\t//响应请求\n\t\t\t\texchange.Out.Headers().Set(ContentTypeKey, JsonContextType)\n\t\t\t\texchange.Out.SetBody([]byte(exchange.In.From() + \"\\n\"))\n\t\t\t\texchange.Out.SetBody([]byte(\"s1 process\" + \"\\n\"))\n\t\t\t\tname := request.GetMsg().Metadata.GetValue(\"name\")\n\t\t\t\tif name == \"break\" {\n\t\t\t\t\t//不执行后续动作\n\t\t\t\t\treturn false\n\t\t\t\t} else {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\n\t\t\t}\n\t\t} else {\n\t\t\texchange.Out.Headers().Set(ContentTypeKey, JsonContextType)\n\t\t\texchange.Out.SetBody([]byte(exchange.In.From()))\n\t\t\texchange.Out.SetBody([]byte(\"s1 process\" + \"\\n\"))\n\t\t\treturn true\n\t\t}\n\n\t}).Process(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\texchange.Out.SetBody([]byte(\"s2 process\" + \"\\n\"))\n\t\treturn true\n\t}).End()\n\n\t//路由2 采用配置方式调用规则链\n\trouter2 := impl.NewRouter().From(\"/api/v1/msg2Chain1/:msgType\").To(\"chain:default\").End()\n\n\t//路由3 采用配置方式调用规则链,to路径带变量\n\trouter3 := impl.NewRouter().From(\"/api/v1/msg2Chain2/:msgType\").Transform(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\tmsg := exchange.In.GetMsg()\n\t\t//获取消息类型\n\t\tmsg.Type = msg.Metadata.GetValue(\"msgType\")\n\n\t\t//从header获取用户ID\n\t\tuserId := exchange.In.Headers().Get(\"userId\")\n\t\tif userId == \"\" {\n\t\t\tuserId = \"default\"\n\t\t}\n\t\t//把userId存放在msg元数据\n\t\tmsg.Metadata.PutValue(\"userId\", userId)\n\t\treturn true\n\t}).Process(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\trequestMessage, ok := exchange.In.(*RequestMessage)\n\t\tassert.True(t, ok)\n\t\tassert.NotNil(t, requestMessage.Request())\n\t\tassert.Equal(t, JsonContextType, requestMessage.Headers().Get(ContentTypeKey))\n\n\t\tfrom := requestMessage.From()\n\t\tmsgType := requestMessage.GetMsg().Metadata.GetValue(\"msgType\")\n\t\tassert.Equal(t, \"/api/v1/msg2Chain2/\"+msgType+\"?aa=xx\", from)\n\t\tassert.Equal(t, \"xx\", requestMessage.GetParam(\"aa\"))\n\n\t\tresponseMessage, ok := exchange.Out.(*ResponseMessage)\n\t\tassert.NotNil(t, responseMessage.Response())\n\n\t\tassert.Equal(t, \"/api/v1/msg2Chain2/\"+msgType+\"?aa=xx\", responseMessage.From())\n\t\tassert.Equal(t, \"xx\", responseMessage.GetParam(\"aa\"))\n\t\t//响应给客户端\n\t\texchange.Out.Headers().Set(ContentTypeKey, JsonContextType)\n\t\texchange.Out.SetStatusCode(200)\n\t\texchange.Out.SetBody([]byte(\"ok\"))\n\t\treturn true\n\t}).To(\"chain:${userId}\").Process(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\toutMsg := exchange.Out.GetMsg()\n\t\tif outMsg != nil {\n\t\t\tassert.Equal(t, true, len(outMsg.Metadata.Values()) > 1)\n\t\t}\n\t\treturn true\n\t}).End()\n\n\t//路由4 直接调用node组件方式\n\trouter4 := impl.NewRouter().From(\"/api/v1/msgToComponent1/:msgType\").Transform(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\tmsg := exchange.In.GetMsg()\n\t\t//获取消息类型\n\t\tmsg.Type = msg.Metadata.GetValue(\"msgType\")\n\t\treturn true\n\t}).Process(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\t//响应给客户端\n\t\texchange.Out.Headers().Set(ContentTypeKey, JsonContextType)\n\t\texchange.Out.SetBody([]byte(\"ok\"))\n\t\treturn true\n\t}).ToComponent(func() types.Node {\n\t\t//定义日志组件，处理数据\n\t\tvar configuration = make(types.Configuration)\n\t\tconfiguration[\"jsScript\"] = `\n\t\treturn 'log::Incoming message:\\n' + JSON.stringify(msg) + '\\nIncoming metadata:\\n' + JSON.stringify(metadata);\n       `\n\t\tlogNode := &action.LogNode{}\n\t\t_ = logNode.Init(config, configuration)\n\t\treturn logNode\n\t}()).End()\n\n\t//路由5 采用配置方式调用node组件\n\trouter5 := impl.NewRouter().From(\"/api/v1/msgToComponent2/:msgType\").Transform(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\tmsg := exchange.In.GetMsg()\n\t\t//获取消息类型\n\t\tmsg.Type = msg.Metadata.GetValue(\"msgType\")\n\t\treturn true\n\t}).Process(func(router endpoint.Router, exchange *endpoint.Exchange) bool {\n\t\t//响应给客户端\n\t\texchange.Out.Headers().Set(ContentTypeKey, JsonContextType)\n\t\texchange.Out.SetBody([]byte(\"ok\"))\n\t\treturn true\n\t}).To(\"component:log\", types.Configuration{\"jsScript\": `\n\t\treturn 'log::Incoming message:\\n' + JSON.stringify(msg) + '\\nIncoming metadata:\\n' + JSON.stringify(metadata);\n       `}).End()\n\n\t//注册路由,Get 方法\n\t_, _ = restEndpoint.AddRouter(router1, \"GET\")\n\t//注册路由，POST方式\n\t_, _ = restEndpoint.AddRouter(router2, \"POST\")\n\t_, _ = restEndpoint.AddRouter(router3, \"POST\")\n\t_, _ = restEndpoint.AddRouter(router4, \"POST\")\n\t_, _ = restEndpoint.AddRouter(router5, \"POST\")\n\n\tassert.NotNil(t, restEndpoint.Router)\n\t//启动服务\n\terr = restEndpoint.Start()\n\t//fmt.Println(err)\n\t<-stop\n\trestEndpoint.Destroy()\n\twg.Done()\n}\n"
