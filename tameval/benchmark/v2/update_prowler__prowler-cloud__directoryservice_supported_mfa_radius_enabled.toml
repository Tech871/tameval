[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "prowler-cloud/prowler"
sha = "39e4d20b24b2b7150da7b29e75cce77c14fe046f"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=prowler/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled.py -m pytest -q --junit-xml=test_output.xml tests/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target prowler.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled --unit-test tests.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target prowler/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled.py --unit-test tests/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 50.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 40.0
covered_lines = [ 0, 1, 4, 9, 10, 11, 12, 28,]
missed_lines = [ 13, 14, 15, 16, 17, 21, 22, 26,]

[input_info]
test_file_path = "tests/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled_test.py"
focal_file_path = "prowler/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled.py"
test_file_url = "https://github.com/prowler-cloud/prowler/blob/39e4d20b24b2b7150da7b29e75cce77c14fe046f/tests/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled_test.py"
focal_file_url = "https://github.com/prowler-cloud/prowler/blob/39e4d20b24b2b7150da7b29e75cce77c14fe046f/prowler/providers/aws/services/directoryservice/directoryservice_supported_mfa_radius_enabled/directoryservice_supported_mfa_radius_enabled.py"
first_commit_date = "2022-12-13"
last_commit_date = "2025-01-23"
test_file_content = "from unittest import mock\n\nfrom prowler.providers.aws.services.directoryservice.directoryservice_service import (\n    AuthenticationProtocol,\n    Directory,\n    DirectoryType,\n    RadiusSettings,\n    RadiusStatus,\n)\n\nAWS_REGION = \"eu-west-1\"\n\n\nclass Test_directoryservice_supported_mfa_radius_enabled:\n    def test_no_directories(self):\n        directoryservice_client = mock.MagicMock\n        directoryservice_client.directories = {}\n        with mock.patch(\n            \"prowler.providers.aws.services.directoryservice.directoryservice_service.DirectoryService\",\n            new=directoryservice_client,\n        ):\n            # Test Check\n            from prowler.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled import (\n                directoryservice_supported_mfa_radius_enabled,\n            )\n\n            check = directoryservice_supported_mfa_radius_enabled()\n            result = check.execute()\n\n            assert len(result) == 0\n\n    def test_directory_no_radius_server(self):\n        directoryservice_client = mock.MagicMock\n        directory_name = \"test-directory\"\n        directory_id = \"d-12345a1b2\"\n        directoryservice_client.directories = {\n            directory_name: Directory(\n                name=directory_name,\n                id=directory_id,\n                type=DirectoryType.MicrosoftAD,\n                region=AWS_REGION,\n                radius_settings=None,\n            )\n        }\n        with mock.patch(\n            \"prowler.providers.aws.services.directoryservice.directoryservice_service.DirectoryService\",\n            new=directoryservice_client,\n        ):\n            # Test Check\n            from prowler.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled import (\n                directoryservice_supported_mfa_radius_enabled,\n            )\n\n            check = directoryservice_supported_mfa_radius_enabled()\n            result = check.execute()\n\n            assert len(result) == 0\n\n    def test_directory_radius_server_status_failed(self):\n        directoryservice_client = mock.MagicMock\n        directory_name = \"test-directory\"\n        directory_id = \"d-12345a1b2\"\n        directoryservice_client.directories = {\n            directory_name: Directory(\n                name=directory_name,\n                id=directory_id,\n                type=DirectoryType.MicrosoftAD,\n                region=AWS_REGION,\n                radius_settings=RadiusSettings(\n                    authentication_protocol=AuthenticationProtocol.MS_CHAPv1,\n                    status=RadiusStatus.Failed,\n                ),\n            )\n        }\n        with mock.patch(\n            \"prowler.providers.aws.services.directoryservice.directoryservice_service.DirectoryService\",\n            new=directoryservice_client,\n        ):\n            # Test Check\n            from prowler.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled import (\n                directoryservice_supported_mfa_radius_enabled,\n            )\n\n            check = directoryservice_supported_mfa_radius_enabled()\n            result = check.execute()\n\n            assert len(result) == 1\n            assert result[0].resource_id == directory_id\n            assert result[0].region == AWS_REGION\n            assert result[0].status == \"FAIL\"\n            assert (\n                result[0].status_extended\n                == f\"Directory {directory_id} does not have Radius MFA enabled\"\n            )\n\n    def test_directory_radius_server_status_creating(self):\n        directoryservice_client = mock.MagicMock\n        directory_name = \"test-directory\"\n        directory_id = \"d-12345a1b2\"\n        directoryservice_client.directories = {\n            directory_name: Directory(\n                name=directory_name,\n                id=directory_id,\n                type=DirectoryType.MicrosoftAD,\n                region=AWS_REGION,\n                radius_settings=RadiusSettings(\n                    authentication_protocol=AuthenticationProtocol.MS_CHAPv2,\n                    status=RadiusStatus.Creating,\n                ),\n            )\n        }\n        with mock.patch(\n            \"prowler.providers.aws.services.directoryservice.directoryservice_service.DirectoryService\",\n            new=directoryservice_client,\n        ):\n            # Test Check\n            from prowler.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled import (\n                directoryservice_supported_mfa_radius_enabled,\n            )\n\n            check = directoryservice_supported_mfa_radius_enabled()\n            result = check.execute()\n\n            assert len(result) == 1\n            assert result[0].resource_id == directory_id\n            assert result[0].region == AWS_REGION\n            assert result[0].status == \"FAIL\"\n            assert (\n                result[0].status_extended\n                == f\"Directory {directory_id} does not have Radius MFA enabled\"\n            )\n\n    def test_directory_radius_server_status_completed(self):\n        directoryservice_client = mock.MagicMock\n        directory_name = \"test-directory\"\n        directory_id = \"d-12345a1b2\"\n        directoryservice_client.directories = {\n            directory_name: Directory(\n                name=directory_name,\n                id=directory_id,\n                type=DirectoryType.MicrosoftAD,\n                region=AWS_REGION,\n                radius_settings=RadiusSettings(\n                    authentication_protocol=AuthenticationProtocol.MS_CHAPv2,\n                    status=RadiusStatus.Completed,\n                ),\n            )\n        }\n        with mock.patch(\n            \"prowler.providers.aws.services.directoryservice.directoryservice_service.DirectoryService\",\n            new=directoryservice_client,\n        ):\n            # Test Check\n            from prowler.providers.aws.services.directoryservice.directoryservice_supported_mfa_radius_enabled.directoryservice_supported_mfa_radius_enabled import (\n                directoryservice_supported_mfa_radius_enabled,\n            )\n\n            check = directoryservice_supported_mfa_radius_enabled()\n            result = check.execute()\n\n            assert len(result) == 1\n            assert result[0].resource_id == directory_id\n            assert result[0].region == AWS_REGION\n            assert result[0].status == \"PASS\"\n            assert (\n                result[0].status_extended\n                == f\"Directory {directory_id} have Radius MFA enabled\"\n            )"
