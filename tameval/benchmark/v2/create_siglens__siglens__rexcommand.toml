[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.21.0"

[repo_info]
repository = "siglens/siglens"
sha = "536f72508926e48d734d15d40b1c66da22d7f8df"
bench_version = 2

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/segment/query/processor/rexcommand.go pkg/segment/query/processor/rexcommand_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/segment/query/processor/rexcommand.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 31.0
original_coverage = 44.0
mutation_kill_rate = 27.0
original_mutation_kill_rate = 41.0
covered_lines = [ 35, 40, 41, 53, 56, 67, 68, 69, 70, 71, 72, 73, 75, 76, 83, 84, 91, 97,]
missed_lines = [ 36, 37, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 57, 58, 59, 60, 61, 63, 64, 65, 77, 78, 79, 80, 81, 85, 86, 87, 92, 93, 94, 95, 100, 101, 102, 104, 105, 106, 108, 109, 110,]

[input_info]
test_file_path = "pkg/segment/query/processor/rexcommand_test.go"
focal_file_path = "pkg/segment/query/processor/rexcommand.go"
test_file_url = "https://github.com/siglens/siglens/blob/536f72508926e48d734d15d40b1c66da22d7f8df/pkg/segment/query/processor/rexcommand_test.go"
focal_file_url = "https://github.com/siglens/siglens/blob/536f72508926e48d734d15d40b1c66da22d7f8df/pkg/segment/query/processor/rexcommand.go"
first_commit_date = "2024-10-09"
last_commit_date = "2025-07-01"
test_file_content = "// Copyright (c) 2021-2024 SigScalr, Inc.\n//\n// This file is part of SigLens Observability Solution\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npackage processor\n\nimport (\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/siglens/siglens/pkg/segment/query/iqr\"\n\t\"github.com/siglens/siglens/pkg/segment/structs\"\n\tsutils \"github.com/siglens/siglens/pkg/segment/utils\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\n// Convert a Perl-style regex pattern to RE2-style regex pattern.\nfunc convertPerlToRE2(pattern string) string {\n\tpattern = strings.Replace(pattern, \"(?<\", \"(?P<\", -1)\n\treturn pattern\n}\n\nfunc Test_RexCommand_ValidColumn(t *testing.T) {\n\tiqr := iqr.NewIQR(0)\n\terr := iqr.AppendKnownValues(map[string][]sutils.CValueEnclosure{\n\t\t\"col1\": {\n\t\t\tsutils.CValueEnclosure{Dtype: sutils.SS_DT_STRING, CVal: \"apple-123\"},\n\t\t\tsutils.CValueEnclosure{Dtype: sutils.SS_DT_STRING, CVal: \"banana-456\"},\n\t\t},\n\t})\n\tassert.NoError(t, err)\n\n\trex := &rexProcessor{\n\t\toptions: &structs.RexExpr{\n\t\t\tFieldName:   \"col1\",\n\t\t\tPattern:     convertPerlToRE2(`(?<item>.+)-(?<number>.+)`),\n\t\t\tRexColNames: []string{\"item\", \"number\"},\n\t\t},\n\t}\n\n\tiqr, err = rex.Process(iqr)\n\tassert.NoError(t, err)\n\n\tvalues, err := iqr.ReadColumn(\"item\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, []sutils.CValueEnclosure{\n\t\t{Dtype: sutils.SS_DT_STRING, CVal: \"apple\"},\n\t\t{Dtype: sutils.SS_DT_STRING, CVal: \"banana\"},\n\t}, values)\n\n\tvalues, err = iqr.ReadColumn(\"number\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, []sutils.CValueEnclosure{\n\t\t{Dtype: sutils.SS_DT_STRING, CVal: \"123\"},\n\t\t{Dtype: sutils.SS_DT_STRING, CVal: \"456\"},\n\t}, values)\n\n\tvalues, err = iqr.ReadColumn(\"col1\")\n\tassert.NoError(t, err)\n\tassert.Equal(t, []sutils.CValueEnclosure{\n\t\t{Dtype: sutils.SS_DT_STRING, CVal: \"apple-123\"},\n\t\t{Dtype: sutils.SS_DT_STRING, CVal: \"banana-456\"},\n\t}, values)\n}\n\n"
