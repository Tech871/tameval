[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pymeasure/pymeasure"
sha = "03452744481f5dd366eb1ee3764bff3995e384d1"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pymeasure/instruments/thyracont/smartline_v1.py -m pytest -q --junit-xml=test_output.xml tests/instruments/thyracont/test_smartline_v1.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pymeasure.instruments.thyracont.smartline_v1 --unit-test tests.instruments.thyracont.test_smartline_v1 --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pymeasure/instruments/thyracont/smartline_v1.py --unit-test tests/instruments/thyracont/test_smartline_v1.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 90.0
original_coverage = 90.0
mutation_kill_rate = 89.0
original_mutation_kill_rate = 89.0
covered_lines = [ 24, 25, 28, 38, 39, 42, 69, 71, 78, 80, 89, 90, 91, 92, 98, 105, 106, 108, 109, 110, 112, 113, 116, 123, 131, 141,]
missed_lines = [ 94, 111, 114,]

[input_info]
test_file_path = "tests/instruments/thyracont/test_smartline_v1.py"
focal_file_path = "pymeasure/instruments/thyracont/smartline_v1.py"
test_file_url = "https://github.com/pymeasure/pymeasure/blob/03452744481f5dd366eb1ee3764bff3995e384d1/tests/instruments/thyracont/test_smartline_v1.py"
focal_file_url = "https://github.com/pymeasure/pymeasure/blob/03452744481f5dd366eb1ee3764bff3995e384d1/pymeasure/instruments/thyracont/smartline_v1.py"
first_commit_date = "2023-07-05"
last_commit_date = "2025-01-07"
test_file_content = "#\n# This file is part of the PyMeasure package.\n#\n# Copyright (c) 2013-2025 PyMeasure Developers\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\nimport pytest\n\nfrom pymeasure.test import expected_protocol\nfrom pymeasure.instruments.thyracont import SmartlineV1\nfrom pymeasure.instruments.thyracont.smartline_v1 import calculate_checksum\n\n\ndef test_calculate_checksum_basics():\n    for i in range(0, 64):\n        assert (i + 64) == ord(calculate_checksum(chr(i)))\n    for i in range(64, 128):\n        assert i == ord(calculate_checksum(chr(i)))\n\n\n@pytest.mark.parametrize(\"msg, chksum\", (\n        (\"001T\", \"e\"),  # command from SmartlineV1\n        (\"001M982122\", \"V\"),  # msg from SmartlineV1\n        (\"0010MV00\", \"D\"),  # command from SmartlineV2\n        (\"0011MV079.734e2\", \"h\"),  # msg from SmartlineV2\n))\ndef test_calculate_checksum(msg, chksum):\n    assert chksum == calculate_checksum(msg)\n\n\ndef test_pressure():\n    \"\"\"Verify the communication of the pressure getter.\"\"\"\n    with expected_protocol(\n        SmartlineV1,\n        [(\"001M^\", \"001M982122V\"), ],\n    ) as inst:\n        assert inst.pressure == pytest.approx(982.1)\n\n\ndef test_device_type():\n    \"\"\"Verify the communication of the Instruments type getter.\"\"\"\n    with expected_protocol(\n        SmartlineV1,\n        [(\"001Te\", \"001TVSM207t\"), ],\n    ) as inst:\n        assert inst.device_type == \"VSM207\"\n\n\ndef test_cathode_enable():\n    \"\"\"Verify the communication of the hot/cold cathode control.\"\"\"\n    with expected_protocol(\n        SmartlineV1,\n        [(\"001IZ\", \"001I1K\"), ],\n    ) as inst:\n        assert inst.cathode_enabled is True\n\n\ndef test_cathode_enable_error():\n    \"\"\"Verify the raised error in case of a set error.\"\"\"\n    with expected_protocol(\n        SmartlineV1,\n        [(\"001i0j\", \"001NO_DEF\\\\\"), ],\n    ) as inst:\n        with pytest.raises(ConnectionError):\n            inst.cathode_enabled = False\n\n\ndef test_display_unit():\n    \"\"\"Verify the communication of the unit property.\"\"\"\n    with expected_protocol(\n        SmartlineV1,\n        [(\"001Uf\", \"001U000000F\"), ],\n    ) as inst:\n        assert inst.display_unit == \"mbar\"\n"
