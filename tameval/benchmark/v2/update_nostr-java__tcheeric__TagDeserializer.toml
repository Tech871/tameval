[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "tcheeric/nostr-java"
sha = "19abaa18c086511e89c968e069c43797f55aac2d"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl nostr-java-event -Dtest=TagDeserializerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl nostr-java-event -DtargetClasses=**.TagDeserializer  -DtargetTests=**.TagDeserializerTest  -DoutputFormats=XML"
coverage_report_path = "nostr-java-event/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "nostr-java-event/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "nostr-java-event/src/test/java/nostr/event/unit/TagDeserializerTest.java"
focal_file_path = "nostr-java-event/src/main/java/nostr/event/json/deserializer/TagDeserializer.java"
test_file_url = "https://github.com/tcheeric/nostr-java/blob/19abaa18c086511e89c968e069c43797f55aac2d/nostr-java-event/src/test/java/nostr/event/unit/TagDeserializerTest.java"
focal_file_url = "https://github.com/tcheeric/nostr-java/blob/19abaa18c086511e89c968e069c43797f55aac2d/nostr-java-event/src/main/java/nostr/event/json/deserializer/TagDeserializer.java"
first_commit_date = "2023-06-20"
last_commit_date = "2025-07-30"
test_file_content = "package nostr.event.unit;\n\nimport nostr.event.BaseTag;\nimport nostr.event.tag.AddressTag;\nimport nostr.event.tag.EventTag;\nimport nostr.event.tag.PriceTag;\nimport nostr.event.tag.UrlTag;\nimport nostr.event.tag.GenericTag;\nimport org.junit.jupiter.api.Test;\n\nimport java.math.BigDecimal;\n\nimport static nostr.base.IEvent.MAPPER_BLACKBIRD;\nimport static org.junit.jupiter.api.Assertions.*;\n\nclass TagDeserializerTest {\n\n    @Test\n    void testAddressTagDeserialization() throws Exception {\n        String pubKey = \"bbbd79f81439ff794cf5ac5f7bff9121e257f399829e472c7a14d3e86fe76984\";\n        String json = \"[\\\"a\\\",\\\"1:\" + pubKey + \":test\\\",\\\"ws://localhost:8080\\\"]\";\n        BaseTag tag = MAPPER_BLACKBIRD.readValue(json, BaseTag.class);\n        assertInstanceOf(AddressTag.class, tag);\n        AddressTag aTag = (AddressTag) tag;\n        assertEquals(1, aTag.getKind());\n        assertEquals(pubKey, aTag.getPublicKey().toString());\n        assertEquals(\"test\", aTag.getIdentifierTag().getUuid());\n        assertEquals(\"ws://localhost:8080\", aTag.getRelay().getUri());\n    }\n\n    @Test\n    void testEventTagDeserialization() throws Exception {\n        String id = \"494001ac0c8af2a10f60f23538e5b35d3cdacb8e1cc956fe7a16dfa5cbfc4346\";\n        String json = \"[\\\"e\\\",\\\"\" + id + \"\\\",\\\"wss://relay.example.com\\\",\\\"root\\\"]\";\n        BaseTag tag = MAPPER_BLACKBIRD.readValue(json, BaseTag.class);\n        assertInstanceOf(EventTag.class, tag);\n        EventTag eTag = (EventTag) tag;\n        assertEquals(id, eTag.getIdEvent());\n        assertEquals(\"wss://relay.example.com\", eTag.getRecommendedRelayUrl());\n        assertEquals(\"root\", eTag.getMarker().getValue());\n    }\n\n    @Test\n    void testPriceTagDeserialization() throws Exception {\n        String json = \"[\\\"price\\\",\\\"10.99\\\",\\\"USD\\\"]\";\n        BaseTag tag = MAPPER_BLACKBIRD.readValue(json, BaseTag.class);\n        assertInstanceOf(PriceTag.class, tag);\n        PriceTag pTag = (PriceTag) tag;\n        assertEquals(new BigDecimal(\"10.99\"), pTag.getNumber());\n        assertEquals(\"USD\", pTag.getCurrency());\n    }\n\n    @Test\n    void testUrlTagDeserialization() throws Exception {\n        String json = \"[\\\"u\\\",\\\"http://example.com\\\"]\";\n        BaseTag tag = MAPPER_BLACKBIRD.readValue(json, BaseTag.class);\n        assertInstanceOf(UrlTag.class, tag);\n        UrlTag uTag = (UrlTag) tag;\n        assertEquals(\"http://example.com\", uTag.getUrl());\n    }\n\n    @Test\n    void testGenericFallback() throws Exception {\n        String json = \"[\\\"unknown\\\",\\\"value\\\"]\";\n        BaseTag tag = MAPPER_BLACKBIRD.readValue(json, BaseTag.class);\n        assertInstanceOf(GenericTag.class, tag);\n        GenericTag gTag = (GenericTag) tag;\n        assertEquals(\"unknown\", gTag.getCode());\n        assertEquals(\"value\", gTag.getAttributes().get(0).getValue());\n    }\n}"
