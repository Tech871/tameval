[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.7"

[repo_info]
repository = "leptonai/gpud"
sha = "1763d902486568b8db164ef3f832841ede2fd8de"

[run_info]
docker_image = "golang:1.23.7"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/nvidia-query/device_count.go pkg/nvidia-query/device_count_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/nvidia-query/device_count.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 82.35
original_coverage = 68.0
mutation_kill_rate = 41.67
original_mutation_kill_rate = 42.0
covered_lines = [ 14, 15, 20, 21, 22, 23, 24, 27, 33, 34, 35, 36, 37, 38, 39, 43, 44, 48, 49,]
missed_lines = [ 8, 9, 10, 16, 17, 18, 45, 46, 47,]

[input_info]
test_file_path = "pkg/nvidia-query/device_count_test.go"
focal_file_path = "pkg/nvidia-query/device_count.go"
test_file_url = "https://github.com/leptonai/gpud/blob/1763d902486568b8db164ef3f832841ede2fd8de/pkg/nvidia-query/device_count_test.go"
focal_file_url = "https://github.com/leptonai/gpud/blob/1763d902486568b8db164ef3f832841ede2fd8de/pkg/nvidia-query/device_count.go"
first_commit_date = "2025-02-13"
last_commit_date = "2025-02-13"
test_file_content = "package query\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n)\n\nfunc TestCountDevEntry(t *testing.T) {\n\ttestCases := []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected bool\n\t}{\n\t\t{\n\t\t\tname:     \"Valid device with /dev prefix\",\n\t\t\tinput:    \"/dev/nvidia0\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Valid device with /dev prefix and different number\",\n\t\t\tinput:    \"/dev/nvidia1\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Valid device without /dev prefix\",\n\t\t\tinput:    \"/nvidia2\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Valid device without /dev prefix and different number\",\n\t\t\tinput:    \"/nvidia3\",\n\t\t\texpected: true,\n\t\t},\n\t\t{\n\t\t\tname:     \"Invalid device without number\",\n\t\t\tinput:    \"nvidia\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tname:     \"Invalid device with non-numeric suffix\",\n\t\t\tinput:    \"nvidiax\",\n\t\t\texpected: false,\n\t\t},\n\t\t{\n\t\t\tname:     \"Invalid device with prefix\",\n\t\t\tinput:    \"my_nvidia0\",\n\t\t\texpected: false,\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tresult := countDevEntry(tc.input)\n\t\t\tif result != tc.expected {\n\t\t\t\tt.Errorf(\"countDevEntry(%q) = %v, want %v\", tc.input, result, tc.expected)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestCountAllDevicesFromDir(t *testing.T) {\n\ttestDir := t.TempDir()\n\tdefer t.Cleanup(func() {\n\t\t_ = os.RemoveAll(testDir)\n\t})\n\n\tdevCnt := 8\n\tfor i := 0; i < devCnt; i++ {\n\t\tfileName := filepath.Join(testDir, fmt.Sprintf(\"nvidia%d\", i))\n\t\t_, err := os.Create(fileName)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"Failed to create test file %s: %v\", fileName, err)\n\t\t}\n\t}\n\n\tcount, err := countAllDevicesFromDir(testDir)\n\tif err != nil {\n\t\tt.Fatalf(\"countAllDevicesFromDir returned an error: %v\", err)\n\t}\n\n\tif count != devCnt {\n\t\tt.Errorf(\"expected %d devices, but got %d\", devCnt, count)\n\t}\n}\n"
