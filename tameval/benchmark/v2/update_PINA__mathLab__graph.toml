[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "mathLab/PINA"
sha = "03ef90c358d3f5802db96b0092d5c874bd7c0636"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pina/graph.py -m pytest -q --junit-xml=test_output.xml tests/test_graph.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pina.graph --unit-test tests.test_graph --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pina/graph.py --unit-test tests/test_graph.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 33.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 2, 3, 4, 5, 6, 9, 15, 37, 75, 100, 101, 112, 113, 126, 127, 149, 150, 169, 170, 183, 199, 204, 249, 250, 270, 271, 288, 295, 313, 314, 335, 341, 362, 363, 386, 392, 393,]
missed_lines = [ 29, 33, 35, 68, 71, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 107, 108, 109, 110, 120, 121, 122, 123, 124, 137, 138, 139, 140, 141, 142, 161, 162, 163, 164, 165, 166, 167, 179, 180, 181, 193, 195, 196, 238, 241, 263, 264, 265, 266, 267, 268, 281, 310, 311, 327, 328, 359, 360, 377, 378, 381, 382, 383, 408, 415, 418, 419, 420,]

[input_info]
test_file_path = "tests/test_graph.py"
focal_file_path = "pina/graph.py"
test_file_url = "https://github.com/mathLab/PINA/blob/03ef90c358d3f5802db96b0092d5c874bd7c0636/tests/test_graph.py"
focal_file_url = "https://github.com/mathLab/PINA/blob/03ef90c358d3f5802db96b0092d5c874bd7c0636/pina/graph.py"
first_commit_date = "2025-03-19"
last_commit_date = "2025-03-19"
test_file_content = "import pytest\nimport torch\nfrom pina import Graph\nfrom pina.graph import RadiusGraph, KNNGraph, TemporalGraph\n\n\n@pytest.mark.parametrize(\n    \"x, pos\",\n    [\n        ([torch.rand(10, 2) for _ in range(3)],\n         [torch.rand(10, 3) for _ in range(3)]),\n        ([torch.rand(10, 2) for _ in range(3)],\n         [torch.rand(10, 3) for _ in range(3)]),\n        (torch.rand(3, 10, 2), torch.rand(3, 10, 3)),\n        (torch.rand(3, 10, 2), torch.rand(3, 10, 3)),\n    ]\n)\ndef test_build_multiple_graph_multiple_val(x, pos):\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=False, r=.3)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=True, r=.3)\n    data = graph.data\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    assert all(d.edge_attr is not None for d in data)\n    assert all([d.edge_index.shape[1] == d.edge_attr.shape[0]] for d in data)\n\n    graph = KNNGraph(x=x, pos=pos, build_edge_attr=True, k=3)\n    data = graph.data\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    assert all(d.edge_attr is not None for d in data)\n    assert all([d.edge_index.shape[1] == d.edge_attr.shape[0]] for d in data)\n\n\ndef test_build_single_graph_multiple_val():\n    x = torch.rand(10, 2)\n    pos = torch.rand(10, 3)\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=False, r=.3)\n    assert len(graph.data) == 1\n    data = graph.data\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos).all() for d_ in data)\n    assert all(len(d.edge_index) == 2 for d in data)\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=True, r=.3)\n    data = graph.data\n    assert len(graph.data) == 1\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos).all() for d_ in data)\n    assert all(len(d.edge_index) == 2 for d in data)\n    assert all(d.edge_attr is not None for d in data)\n    assert all([d.edge_index.shape[1] == d.edge_attr.shape[0]] for d in data)\n\n    x = torch.rand(10, 2)\n    pos = torch.rand(10, 3)\n    graph = KNNGraph(x=x, pos=pos, build_edge_attr=True, k=3)\n    assert len(graph.data) == 1\n    data = graph.data\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos).all() for d_ in data)\n    assert all(len(d.edge_index) == 2 for d in data)\n    graph = KNNGraph(x=x, pos=pos, build_edge_attr=True, k=3)\n    data = graph.data\n    assert len(graph.data) == 1\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos).all() for d_ in data)\n    assert all(len(d.edge_index) == 2 for d in data)\n    assert all(d.edge_attr is not None for d in data)\n    assert all([d.edge_index.shape[1] == d.edge_attr.shape[0]] for d in data)\n\n\n@pytest.mark.parametrize(\n    \"pos\",\n    [\n        ([torch.rand(10, 3) for _ in range(3)]),\n        ([torch.rand(10, 3) for _ in range(3)]),\n        (torch.rand(3, 10, 3)),\n        (torch.rand(3, 10, 3))\n    ]\n)\ndef test_build_single_graph_single_val(pos):\n    x = torch.rand(10, 2)\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=False, r=.3)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=True, r=.3)\n    data = graph.data\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    assert all(d.edge_attr is not None for d in data)\n    assert all([d.edge_index.shape[1] == d.edge_attr.shape[0]] for d in data)\n    x = torch.rand(10, 2)\n    graph = KNNGraph(x=x, pos=pos, build_edge_attr=False, k=3)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    graph = KNNGraph(x=x, pos=pos, build_edge_attr=True, k=3)\n    data = graph.data\n    assert all(torch.isclose(d.x, x).all() for d in data)\n    assert all(torch.isclose(d_.pos, pos_).all() for d_, pos_ in zip(data, pos))\n    assert all(len(d.edge_index) == 2 for d in data)\n    assert all(d.edge_attr is not None for d in data)\n    assert all([d.edge_index.shape[1] == d.edge_attr.shape[0]] for d in data)\n\n\ndef test_additional_parameters_1():\n    x = torch.rand(3, 10, 2)\n    pos = torch.rand(3, 10, 2)\n    additional_parameters = {'y': torch.ones(3)}\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=True, r=.3,\n                        additional_params=additional_parameters)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n    assert all(hasattr(d, 'y') for d in data)\n    assert all(d_.y == 1 for d_ in data)\n\n\n@pytest.mark.parametrize(\n    \"additional_parameters\",\n    [\n        ({'y': torch.rand(3, 10, 1)}),\n        ({'y': [torch.rand(10, 1) for _ in range(3)]}),\n    ]\n)\ndef test_additional_parameters_2(additional_parameters):\n    x = torch.rand(3, 10, 2)\n    pos = torch.rand(3, 10, 2)\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=True, r=.3,\n                        additional_params=additional_parameters)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n    assert all(hasattr(d, 'y') for d in data)\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n\n\ndef test_temporal_graph():\n    x = torch.rand(3, 10, 2)\n    pos = torch.rand(3, 10, 2)\n    t = torch.rand(3)\n    graph = TemporalGraph(x=x, pos=pos, build_edge_attr=True, r=.3, t=t)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(torch.isclose(d_.x, x_).all() for (d_, x_) in zip(data, x))\n    assert all(hasattr(d, 't') for d in data)\n    assert all(d_.t == t_ for (d_, t_) in zip(data, t))\n\n\ndef test_custom_build_edge_attr_func():\n    x = torch.rand(3, 10, 2)\n    pos = torch.rand(3, 10, 2)\n\n    def build_edge_attr(x, pos, edge_index):\n        return torch.cat([pos[edge_index[0]], pos[edge_index[1]]], dim=-1)\n\n    graph = RadiusGraph(x=x, pos=pos, build_edge_attr=True, r=.3,\n                        custom_build_edge_attr=build_edge_attr)\n    assert len(graph.data) == 3\n    data = graph.data\n    assert all(hasattr(d, 'edge_attr') for d in data)\n    assert all(d.edge_attr.shape[1] == 4 for d in data)\n    assert all(torch.isclose(d.edge_attr,\n                             build_edge_attr(d.x, d.pos, d.edge_index)).all()\n               for d in data)"
