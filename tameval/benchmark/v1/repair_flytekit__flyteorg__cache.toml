[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Python"
python_version = "3.12"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "flyteorg/flytekit"
sha = "5503ee5e232fdbc633af39c7f4539a04906102fc"

[run_info]
docker_image = "python:3.12"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r dev-requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=flytekit/core/cache.py -m pytest -q --junit-xml=test_output.xml tests/flytekit/unit/core/test_cache.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target flytekit.core.cache --unit-test tests.flytekit.unit.core.test_cache --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target flytekit/core/cache.py --unit-test tests/flytekit/unit/core/test_cache.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 98.0
original_coverage = 98.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 0, 1, 2, 4, 6, 7, 9, 10, 13, 14, 26, 27, 28, 29, 32, 33, 34, 37, 38, 56, 57, 58, 59, 60, 62, 63, 66, 69, 70, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 95, 96,]
missed_lines = [ 64,]

[input_info]
test_file_path = "tests/flytekit/unit/core/test_cache.py"
focal_file_path = "flytekit/core/cache.py"
test_file_url = "https://github.com/flyteorg/flytekit/blob/5503ee5e232fdbc633af39c7f4539a04906102fc/tests/flytekit/unit/core/test_cache.py"
focal_file_url = "https://github.com/flyteorg/flytekit/blob/5503ee5e232fdbc633af39c7f4539a04906102fc/flytekit/core/cache.py"
first_commit_date = "2025-02-13"
last_commit_date = "2025-02-14"
test_file_content = "from typing import OrderedDict\nfrom mock import mock\nimport pytest\nfrom flytekit.configuration import Image, ImageConfig, SerializationSettings\nfrom flytekit.core.cache import Cache, CachePolicy, VersionParameters\nfrom flytekit.core.task import task\nfrom flytekit.tools.translator import get_serializable_task\n\n\nclass SaltCachePolicy(CachePolicy):\n    def get_version(self, salt: str, params: VersionParameters) -> str:\n        return salt\n\n\nclass ExceptionCachePolicy(CachePolicy):\n    def get_version(self, salt: str, params: VersionParameters) -> str:\n        raise Exception(\"This is an exception\")\n\n\n@pytest.fixture\ndef default_serialization_settings():\n    default_image = Image(name=\"default\", fqn=\"full/name\", tag=\"some-tag\")\n    default_image_config = ImageConfig(default_image=default_image)\n    return SerializationSettings(\n        project=\"p\", domain=\"d\", version=\"v\", image_config=default_image_config\n    )\n\ndef test_task_arguments(default_serialization_settings):\n    @task(cache=Cache(policies=SaltCachePolicy()))\n    def t1(a: int) -> int:\n        return a\n\n    serialized_t1 = get_serializable_task(OrderedDict(), default_serialization_settings, t1)\n\n    @task(cache=Cache(version=\"a-version\"))\n    def t2(a: int) -> int:\n        return a\n\n    serialized_t2 = get_serializable_task(OrderedDict(), default_serialization_settings, t2)\n\n    @task(cache=Cache(version=\"a-version\", serialize=True))\n    def t3(a: int) -> int:\n        return a\n\n    serialized_t3 = get_serializable_task(OrderedDict(), default_serialization_settings, t3)\n\n    @task(cache=Cache(version=\"a-version\", ignored_inputs=(\"a\",)))\n    def t4(a: int) -> int:\n        return a\n\n    serialized_t4 = get_serializable_task(OrderedDict(), default_serialization_settings, t4)\n\n    @task(cache=Cache(version=\"version-overrides-policies\", policies=SaltCachePolicy()))\n    def t5(a: int) -> int:\n        return a\n\n    serialized_t5 = get_serializable_task(OrderedDict(), default_serialization_settings, t5)\n\n\ndef test_task_arguments_deprecated(default_serialization_settings):\n    with pytest.raises(ValueError, match=\"cache_serialize, cache_version, and cache_ignore_input_vars are deprecated. Please use Cache object\"):\n        @task(cache=Cache(version=\"a-version\"), cache_version=\"a-conflicting-version\")\n        def t1_fails(a: int) -> int:\n            return a\n\n    # A more realistic example where someone might set the version in the Cache object but sets the cache_serialize\n    # using the deprecated cache_serialize argument\n    with pytest.raises(ValueError, match=\"cache_serialize, cache_version, and cache_ignore_input_vars are deprecated. Please use Cache object\"):\n        @task(cache=Cache(version=\"a-version\"), cache_serialize=True)\n        def t2_fails(a: int) -> int:\n            return a\n\n    with pytest.raises(ValueError, match=\"cache_serialize, cache_version, and cache_ignore_input_vars are deprecated. Please use Cache object\"):\n        @task(cache=Cache(version=\"a-version\"), cache_ignore_input_vars=(\"a\",))\n        def t3_fails(a: int) -> int:\n            return a\n\n    with pytest.raises(ValueError, match=\"cache_serialize, cache_version, and cache_ignore_input_vars are deprecated. Please use Cache object\"):\n        @task(cache=Cache(version=\"a-version\"), cache_serialize=True, cache_version=\"b-version\")\n        def t5_fails(a: int) -> int:\n            return a\n\n    with pytest.raises(ValueError, match=\"cache_serialize, cache_version, and cache_ignore_input_vars are deprecated. Please use Cache object\"):\n        @task(cache=Cache(version=\"a-version\"), cache_serialize=True, cache_ignore_input_vars=(\"a\",))\n        def t6_fails(a: int) -> int:\n            return a\n\n    with pytest.raises(ValueError, match=\"cache_serialize, cache_version, and cache_ignore_input_vars are deprecated. Please use Cache object\"):\n        @task(cache=Cache(version=\"a-version\"), cache_serialize=True, cache_version=\"b-version\", cache_ignore_input_vars=(\"a\",))\n        def t7_fails(a: int) -> int:\n            return a\n\n\ndef test_basic_salt_cache_policy(default_serialization_settings):\n    @task\n    def t_notcached(a: int) -> int:\n        return a\n\n    serialized_t_notcached = get_serializable_task(OrderedDict(), default_serialization_settings, t_notcached)\n\n    @task(cache=Cache(version=\"a-version\"))\n    def t_cached_explicit_version(a: int) -> int:\n        return a\n\n    serialized_t_cached_explicit_version = get_serializable_task(OrderedDict(), default_serialization_settings, t_cached_explicit_version)\n\n    @task(cache=Cache(salt=\"a-sprinkle-of-salt\", policies=SaltCachePolicy()))\n    def t_cached(a: int) -> int:\n        return a + 1\n\n    serialized_t_cached = get_serializable_task(OrderedDict(), default_serialization_settings, t_cached)\n\n\n@mock.patch(\"flytekit.configuration.plugin.FlytekitPlugin.get_default_cache_policies\")\ndef test_set_default_policies(mock_get_default_cache_policies, default_serialization_settings):\n    # Enable SaltCachePolicy as the default cache policy\n    mock_get_default_cache_policies.return_value = [SaltCachePolicy()]\n\n    @task(cache=True)\n    def t1(a: int) -> int:\n        return a\n\n    serialized_t1 = get_serializable_task(OrderedDict(), default_serialization_settings, t1)\n\n    @task(cache=Cache())\n    def t2(a: int) -> int:\n        return a\n\n    serialized_t2 = get_serializable_task(OrderedDict(), default_serialization_settings, t2)\n\n    # Confirm that the default versions match\n\n    # Reset the default policies\n    mock_get_default_cache_policies.return_value = []\n\n    with pytest.raises(ValueError, match=\"If version is not defined then at least one cache policy needs to be set\"):\n        @task(cache=True)\n        def t3_fails(a: int) -> int:\n            return a\n\n    with pytest.raises(ValueError, match=\"If version is not defined then at least one cache policy needs to be set\"):\n        @task(cache=Cache())\n        def t4_fails(a: int) -> int:\n            return a + 1\n\n    @task(cache=Cache(version=\"a-version\"))\n    def t_cached_explicit_version(a: int) -> int:\n        return a\n\n    serialized_t_cached_explicit_version = get_serializable_task(OrderedDict(), default_serialization_settings, t_cached_explicit_version)\n\n\ndef test_cache_policy_exception(default_serialization_settings):\n    # Set the address of the ExceptionCachePolicy in the error message so that the test is robust to changes in the\n    # address of the ExceptionCachePolicy class\n    with pytest.raises(ValueError, match=\"Failed to generate version for cache policy\"):\n        @task(cache=Cache(policies=ExceptionCachePolicy()))\n        def t_cached(a: int) -> int:\n            return a\n"
