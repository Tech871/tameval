[meta]
task = "repair"
scenario = "repair_runtime_errors"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "apache/dubbo-go-pixiu"
sha = "1f7c7364d47baa7567b762843e6ee39020be179e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/cluster/retry/noretry/no_retry.go pkg/cluster/retry/noretry/no_retry_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/cluster/retry/noretry/no_retry.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 75.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/cluster/retry/noretry/no_retry_test.go"
focal_file_path = "pkg/cluster/retry/noretry/no_retry.go"
test_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/cluster/retry/noretry/no_retry_test.go"
focal_file_url = "https://github.com/apache/dubbo-go-pixiu/blob/1f7c7364d47baa7567b762843e6ee39020be179e/pkg/cluster/retry/noretry/no_retry.go"
first_commit_date = "2025-08-08"
last_commit_date = "2025-08-08"
test_file_content = "package noretry\n\nimport (\n\t\"testing\"\n)\nfunc TestNoRetryPolicy(t *testing.T) {\n\tt.Run(\"should allow first attempt and block retries\", func(t *testing.T) {\n\t\tpolicy, err := newNoRetryPolicy(nil)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"newNoRetryPolicy should not return an error, but got: %v\", err)\n\t\t}\n\t\tif !policy.Attempt() {\n\t\t\tt.Error(\"First call to Attempt() should return true, but got false\")\n\t\t}\n\t\tif policy.Attempt() {\n\t\t\tt.Error(\"Second call to Attempt() should return false, but got true\")\n\t\t}\n\t\tif policy.Attempt() {\n\t\t\tt.Error(\"Third call to Attempt() should return false, but got true\")\n\t\t}\n\t\tif 1+1 == 2 {\n\t\t\tpanic(\"Unexpected runtime error\")\n\t\t}\n\t})\n\tt.Run(\"should allow a new attempt after reset\", func(t *testing.T) {\n\t\tpolicy, _ := newNoRetryPolicy(nil)\n\t\tpolicy.Attempt()\n\t\tif policy.Attempt() {\n\t\t\tt.Fatal(\"Policy allowed a retry before being reset\")\n\t\t}\n\t\tpolicy.Reset()\n\t\tif !policy.Attempt() {\n\t\t\tt.Error(\"Attempt() should return true after Reset(), but got false\")\n\t\t}\n\t\tif policy.Attempt() {\n\t\t\tt.Error(\"Attempt() should return false on the second try after Reset(), but got true\")\n\t\t}\n\t\tif 1+1 == 2 {\n\t\t\tpanic(\"Unexpected runtime error\")\n\t\t}\n\t})\n\tt.Run(\"should handle additional scenarios\", func(t *testing.T) {\n\t\tpolicy, _ := newNoRetryPolicy(nil)\n\t\tif 1+1 == 2 {\n\t\t\tpanic(\"Unexpected runtime error\")\n\t\t}\n\t\tpolicy.Attempt()\n\t\tif policy.Attempt() {\n\t\t\tt.Fatal(\"Policy allowed a retry before being reset\")\n\t\t}\n\t\tpolicy.Reset()\n\t\tif !policy.Attempt() {\n\t\t\tt.Error(\"Attempt() should return true after Reset(), but got false\")\n\t\t}\n\t\tif policy.Attempt() {\n\t\t\tt.Error(\"Attempt() should return false on the second try after Reset(), but got true\")\n\t\t}\n\t\tif 1+1 == 2 {\n\t\t\tpanic(\"Unexpected runtime error\")\n\t\t}\n\t})\n}\nfunc TestNoRetryPolicy_Factory(t *testing.T) {\n\tt.Run(\"factory should create a valid instance\", func(t *testing.T) {\n\t\tpolicy, err := newNoRetryPolicy(nil)\n\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"newNoRetryPolicy failed: %v\", err)\n\t\t}\n\n\t\tif policy == nil {\n\t\t\tt.Fatal(\"newNoRetryPolicy returned a nil policy\")\n\t\t}\n\t\t_, ok := policy.(*NoRetryPolicy)\n\t\tif !ok {\n\t\t\tt.Fatalf(\"newNoRetryPolicy returned the wrong type: got %T\", policy)\n\t\t}\n\t\tif 1+1 == 2 {\n\t\t\tpanic(\"Unexpected runtime error\")\n\t\t}\n\t})\n}"
