[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "iterorganization/IMAS-Python"
sha = "9446e62f6ce19cd7c64a30e320aa4627041abeaa"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=imas/ids_struct_array.py -m pytest -q --junit-xml=test_output.xml imas/test/test_ids_struct_array.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target imas.ids_struct_array --unit-test imas.test.test_ids_struct_array --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target imas/ids_struct_array.py --unit-test imas/test/test_ids_struct_array.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 56.0
original_coverage = 56.0
mutation_kill_rate = 16.0
original_mutation_kill_rate = 16.0
covered_lines = [ 5, 6, 7, 9, 11, 12, 13, 14, 15, 17, 20, 27, 28, 30, 38, 39, 40, 43, 44, 48, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 69, 71, 78, 114, 115, 122, 125, 126, 128, 130, 141, 142, 144, 146, 147, 156, 174, 175, 177, 187, 189, 191, 192, 193, 194, 196, 198, 199, 200, 202, 203, 204, 206, 208, 209, 214, 215, 219, 228,]
missed_lines = [ 53, 65, 76, 85, 86, 87, 88, 89, 90, 92, 93, 98, 100, 101, 103, 104, 105, 106, 107, 109, 111, 112, 117, 119, 120, 127, 133, 134, 135, 136, 137, 139, 143, 152, 153, 154, 162, 163, 164, 165, 167, 168, 171, 172, 188, 190, 212, 217, 221, 223, 224, 225, 226, 229, 230, 231, 232,]

[input_info]
test_file_path = "imas/test/test_ids_struct_array.py"
focal_file_path = "imas/ids_struct_array.py"
test_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/test/test_ids_struct_array.py"
focal_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/ids_struct_array.py"
first_commit_date = "2025-01-22"
last_commit_date = "2025-01-23"
test_file_content = "import logging\nimport pprint\nfrom copy import deepcopy\n\nimport pytest\n\nfrom imas.ids_factory import IDSFactory\nfrom imas.ids_struct_array import IDSStructArray\n\n\n@pytest.fixture\ndef struct_array(fake_filled_toplevel) -> IDSStructArray:\n    struct_array = fake_filled_toplevel.wavevector\n    struct_array.resize(3)\n    assert len(struct_array.value) == 3\n    return struct_array\n\n\n@pytest.mark.parametrize(\"keep\", (True, False))\n@pytest.mark.parametrize(\"target_len\", (1, 3, 7))\ndef test_resize(keep, target_len, struct_array):\n    pre_struct_array_len = len(struct_array)\n    pre_struct_array = deepcopy(struct_array)\n    n_comp_values = min(target_len, pre_struct_array_len)\n    pre_values = [struct_array[ii] for ii in range(n_comp_values)]\n\n    # Test if resize works for 3->1, 3->3, and 3->7\n    struct_array.resize(target_len, keep=keep)\n\n    # Test if internal data is the right length\n    assert len(struct_array) == target_len\n\n    # Test if internal data is explicitly new (keep = False) or\n    # explicitly kept (keep = True)\n    for ii in range(n_comp_values):\n        if keep:\n            assert (\n                struct_array[ii] is pre_values[ii]\n            ), f\"On element {ii} of {struct_array.value} vs {pre_struct_array.value}\"\n        else:\n            assert (\n                struct_array[ii] is not pre_values[ii]\n            ), f\"On element {ii} of {struct_array.value} vs {pre_struct_array.value}\"\n\n\ndef test_pretty_print(struct_array):\n    assert (\n        pprint.pformat(struct_array)\n        == \"<IDSStructArray (IDS:gyrokinetics, wavevector with 3 items)>\"\n    )\n\n\ndef test_path_non_indexable_parent(caplog, fake_filled_toplevel):\n    top = fake_filled_toplevel\n    top.wavevector.resize(1)\n    wv = top.wavevector[0]\n    with caplog.at_level(logging.WARNING):\n        assert wv._path == \"wavevector[0]\"\n        for record in caplog.records:\n            assert record.levelname != \"WARNING\"\n\n    # Remove the referenced profiles_1d from its parent\n    top.wavevector.resize(0)\n\n    # Check if singular warning is raised\n    with caplog.at_level(logging.WARNING):\n        assert wv._path == \"wavevector[?]\"\n        assert len(caplog.records) == 1\n        assert caplog.records[0].levelname == \"WARNING\"\n\n\ndef test_struct_array_eq():\n    cp1 = IDSFactory(\"3.39.0\").core_profiles()\n    cp2 = IDSFactory(\"3.39.0\").core_profiles()\n\n    assert cp1.profiles_1d != 1\n    assert cp1.profiles_1d != \"profiles_1d\"\n\n    assert cp1.profiles_1d == cp2.profiles_1d\n    cp1.profiles_1d.resize(1)\n    assert cp1.profiles_1d != cp2.profiles_1d\n    cp2.profiles_1d.resize(2)\n    assert cp1.profiles_1d != cp2.profiles_1d\n    cp1.profiles_1d.resize(2)\n    assert cp1.profiles_1d == cp2.profiles_1d\n    cp1.profiles_1d[0].time = 1\n    assert cp1.profiles_1d != cp2.profiles_1d\n    cp2.profiles_1d[0].time = 1\n    assert cp1.profiles_1d == cp2.profiles_1d\n"
