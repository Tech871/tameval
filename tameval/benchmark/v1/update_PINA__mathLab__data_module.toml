[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "mathLab/PINA"
sha = "03ef90c358d3f5802db96b0092d5c874bd7c0636"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pina/data/data_module.py -m pytest -q --junit-xml=test_output.xml tests/test_data/test_data_module.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pina.data.data_module --unit-test tests.test_data.test_data_module --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pina/data/data_module.py --unit-test tests/test_data/test_data_module.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 20.0
original_coverage = 83.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 19, 56, 59, 62, 66, 73, 108, 120, 153, 154, 174, 198, 213, 219, 242, 249, 370, 405, 406, 446, 489, 538, 559, 568, 577, 586, 587, 602, 627, 628, 647, 648,]
missed_lines = [ 37, 41, 42, 43, 44, 48, 49, 50, 51, 52, 54, 57, 60, 63, 89, 93, 98, 101, 103, 106, 118, 130, 131, 132, 133, 135, 136, 137, 138, 139, 148, 150, 151, 168, 169, 170, 171, 172, 187, 188, 189, 190, 191, 192, 193, 210, 229, 233, 235, 236, 238, 239, 307, 310, 311, 312, 313, 316, 317, 321, 323, 326, 327, 331, 333, 336, 337, 338, 341, 344, 345, 346, 347, 351, 352, 353, 354, 358, 359, 360, 361, 365, 367, 368, 380, 381, 388, 389, 396, 397, 403, 417, 419, 423, 424, 425, 427, 430, 431, 433, 434, 440, 441, 442, 443, 444, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 476, 480, 481, 482, 483, 486, 487, 499, 503, 512, 513, 514, 515, 521, 524, 531, 532, 535, 536, 547, 548, 549, 550, 551, 552, 554, 557, 566, 575, 584, 600, 615, 625, 642, 643, 644, 645, 656, 657, 658, 659, 660, 661, 662, 663,]

[input_info]
test_file_path = "tests/test_data/test_data_module.py"
focal_file_path = "pina/data/data_module.py"
test_file_url = "https://github.com/mathLab/PINA/blob/03ef90c358d3f5802db96b0092d5c874bd7c0636/tests/test_data/test_data_module.py"
focal_file_url = "https://github.com/mathLab/PINA/blob/03ef90c358d3f5802db96b0092d5c874bd7c0636/pina/data/data_module.py"
first_commit_date = "2025-03-19"
last_commit_date = "2025-03-19"
test_file_content = "import torch\nimport pytest\nfrom pina.data import PinaDataModule\nfrom pina.data.dataset import PinaTensorDataset, PinaGraphDataset\nfrom pina.problem.zoo import SupervisedProblem\nfrom pina.graph import RadiusGraph\nfrom pina.data.data_module import DummyDataloader\nfrom pina import Trainer\nfrom pina.solver import SupervisedSolver\nfrom torch_geometric.data import Batch\nfrom torch.utils.data import DataLoader\n\ninput_tensor = torch.rand((100, 10))\noutput_tensor = torch.rand((100, 2))\n\nx = torch.rand((100, 50, 10))\npos = torch.rand((100, 50, 2))\ninput_graph = RadiusGraph(x, pos, r=.1, build_edge_attr=True)\noutput_graph = torch.rand((100, 50, 10))\n\n\n@pytest.mark.parametrize(\n    \"input_, output_\",\n    [\n        (input_tensor, output_tensor),\n        (input_graph, output_graph)\n    ]\n)\ndef test_constructor(input_, output_):\n    problem = SupervisedProblem(input_=input_, output_=output_)\n    PinaDataModule(problem)\n\n\n@pytest.mark.parametrize(\n    \"input_, output_\",\n    [\n        (input_tensor, output_tensor),\n        (input_graph, output_graph)\n    ]\n)\n@pytest.mark.parametrize(\n    \"train_size, val_size, test_size\",\n    [\n        (.7, .2, .1),\n        (.7, .3, 0)\n    ]\n)\ndef test_setup_train(input_, output_, train_size, val_size, test_size):\n    problem = SupervisedProblem(input_=input_, output_=output_)\n    dm = PinaDataModule(problem, train_size=train_size,\n                        val_size=val_size, test_size=test_size)\n    dm.setup()\n    assert hasattr(dm, \"train_dataset\")\n    if isinstance(input_, torch.Tensor):\n        assert isinstance(dm.train_dataset, PinaTensorDataset)\n    else:\n        assert isinstance(dm.train_dataset, PinaGraphDataset)\n    # assert len(dm.train_dataset) == int(len(input_) * train_size)\n    if test_size > 0:\n        assert hasattr(dm, \"test_dataset\")\n        assert dm.test_dataset is None\n    else:\n        assert not hasattr(dm, \"test_dataset\")\n    assert hasattr(dm, \"val_dataset\")\n    if isinstance(input_, torch.Tensor):\n        assert isinstance(dm.val_dataset, PinaTensorDataset)\n    else:\n        assert isinstance(dm.val_dataset, PinaGraphDataset)\n    # assert len(dm.val_dataset) == int(len(input_) * val_size)\n\n\n@pytest.mark.parametrize(\n    \"input_, output_\",\n    [\n        (input_tensor, output_tensor),\n        (input_graph, output_graph)\n    ]\n)\n@pytest.mark.parametrize(\n    \"train_size, val_size, test_size\",\n    [\n        (.7, .2, .1),\n        (0., 0., 1.)\n    ]\n)\ndef test_setup_test(input_, output_, train_size, val_size, test_size):\n    problem = SupervisedProblem(input_=input_, output_=output_)\n    dm = PinaDataModule(problem, train_size=train_size,\n                        val_size=val_size, test_size=test_size)\n    dm.setup(stage='test')\n    if train_size > 0:\n        assert hasattr(dm, \"train_dataset\")\n        assert dm.train_dataset is None\n    else:\n        assert not hasattr(dm, \"train_dataset\")\n    if val_size > 0:\n        assert hasattr(dm, \"val_dataset\")\n        assert dm.val_dataset is None\n    else:\n        assert not hasattr(dm, \"val_dataset\")\n\n    assert hasattr(dm, \"test_dataset\")\n    if isinstance(input_, torch.Tensor):\n        assert isinstance(dm.test_dataset, PinaTensorDataset)\n    else:\n        assert isinstance(dm.test_dataset, PinaGraphDataset)\n    # assert len(dm.test_dataset) == int(len(input_) * test_size)\n\n\n@pytest.mark.parametrize(\n    \"input_, output_\",\n    [\n        (input_tensor, output_tensor),\n        (input_graph, output_graph)\n    ]\n)\ndef test_dummy_dataloader(input_, output_):\n    problem = SupervisedProblem(input_=input_, output_=output_)\n    solver = SupervisedSolver(problem=problem, model=torch.nn.Linear(10, 10))\n    trainer = Trainer(solver, batch_size=None, train_size=.7,\n                      val_size=.3, test_size=0.)\n    dm = trainer.data_module\n    dm.setup()\n    dm.trainer = trainer\n    dataloader = dm.train_dataloader()\n    assert isinstance(dataloader, DummyDataloader)\n    assert len(dataloader) == 1\n    data = next(dataloader)\n    assert isinstance(data, list)\n    assert isinstance(data[0], tuple)\n    if isinstance(input_, RadiusGraph):\n        assert isinstance(data[0][1]['input_points'], Batch)\n    else:\n        assert isinstance(data[0][1]['input_points'], torch.Tensor)\n    assert isinstance(data[0][1]['output_points'], torch.Tensor)\n\n    dataloader = dm.val_dataloader()\n    assert isinstance(dataloader, DummyDataloader)\n    assert len(dataloader) == 1\n    data = next(dataloader)\n    assert isinstance(data, list)\n    assert isinstance(data[0], tuple)\n    if isinstance(input_, RadiusGraph):\n        assert isinstance(data[0][1]['input_points'], Batch)\n    else:\n        assert isinstance(data[0][1]['input_points'], torch.Tensor)\n    assert isinstance(data[0][1]['output_points'], torch.Tensor)\n\n\n@pytest.mark.parametrize(\n    \"input_, output_\",\n    [\n        (input_tensor, output_tensor),\n        (input_graph, output_graph)\n    ]\n)\n@pytest.mark.parametrize(\n    \"automatic_batching\",\n    [\n        True, False\n    ]\n)\ndef test_dataloader(input_, output_, automatic_batching):\n    problem = SupervisedProblem(input_=input_, output_=output_)\n    solver = SupervisedSolver(problem=problem, model=torch.nn.Linear(10, 10))\n    trainer = Trainer(solver, batch_size=10, train_size=.7, val_size=.3,\n                      test_size=0., automatic_batching=automatic_batching)\n    dm = trainer.data_module\n    dm.setup()\n    dm.trainer = trainer\n    dataloader = dm.train_dataloader()\n    assert isinstance(dataloader, DataLoader)\n    assert len(dataloader) == 7\n    data = next(iter(dataloader))\n    assert isinstance(data, dict)\n    if isinstance(input_, RadiusGraph):\n        assert isinstance(data['data']['input_points'], Batch)\n    else:\n        assert isinstance(data['data']['input_points'], torch.Tensor)\n    assert isinstance(data['data']['output_points'], torch.Tensor)\n\n    dataloader = dm.val_dataloader()\n    assert isinstance(dataloader, DataLoader)\n    assert len(dataloader) == 3\n    data = next(iter(dataloader))\n    assert isinstance(data, dict)\n    if isinstance(input_, RadiusGraph):\n        assert isinstance(data['data']['input_points'], Batch)\n    else:\n        assert isinstance(data['data']['input_points'], torch.Tensor)\n    assert isinstance(data['data']['output_points'], torch.Tensor)\n\nfrom pina import LabelTensor\n\ninput_tensor = LabelTensor(torch.rand((100, 3)), ['u', 'v', 'w'])\noutput_tensor = LabelTensor(torch.rand((100, 3)), ['u', 'v', 'w'])\n\nx = LabelTensor(torch.rand((100, 50, 3)), ['u', 'v', 'w'])\npos = LabelTensor(torch.rand((100, 50, 2)), ['x', 'y'])\ninput_graph = RadiusGraph(x, pos, r=.1, build_edge_attr=True)\noutput_graph = LabelTensor(torch.rand((100, 50, 3)), ['u', 'v', 'w'])\n\n@pytest.mark.parametrize(\n    \"input_, output_\",\n    [\n        (input_tensor, output_tensor),\n        (input_graph, output_graph)\n    ]\n)\n@pytest.mark.parametrize(\n    \"automatic_batching\",\n    [\n        True, False\n    ]\n)\ndef test_dataloader_labels(input_, output_, automatic_batching):\n    problem = SupervisedProblem(input_=input_, output_=output_)\n    solver = SupervisedSolver(problem=problem, model=torch.nn.Linear(10, 10))\n    trainer = Trainer(solver, batch_size=10, train_size=.7, val_size=.3,\n                      test_size=0., automatic_batching=automatic_batching)\n    dm = trainer.data_module\n    dm.setup()\n    dm.trainer = trainer\n    dataloader = dm.train_dataloader()\n    assert isinstance(dataloader, DataLoader)\n    assert len(dataloader) == 7\n    data = next(iter(dataloader))\n    assert isinstance(data, dict)\n    if isinstance(input_, RadiusGraph):\n        assert isinstance(data['data']['input_points'], Batch)\n        assert isinstance(data['data']['input_points'].x, LabelTensor)\n        assert data['data']['input_points'].x.labels == ['u', 'v', 'w']\n        assert data['data']['input_points'].pos.labels == ['x', 'y']\n    else: \n        assert isinstance(data['data']['input_points'], LabelTensor)\n        assert data['data']['input_points'].labels == ['u', 'v', 'w']\n    assert isinstance(data['data']['output_points'], LabelTensor)\n    assert data['data']['output_points'].labels == ['u', 'v', 'w']\n\n    dataloader = dm.val_dataloader()\n    assert isinstance(dataloader, DataLoader)\n    assert len(dataloader) == 3\n    data = next(iter(dataloader))\n    assert isinstance(data, dict)\n    if isinstance(input_, RadiusGraph):\n        assert isinstance(data['data']['input_points'], Batch)\n        assert isinstance(data['data']['input_points'].x, LabelTensor)\n        assert data['data']['input_points'].x.labels == ['u', 'v', 'w']\n        assert data['data']['input_points'].pos.labels == ['x', 'y']\n    else:\n        assert isinstance(data['data']['input_points'], torch.Tensor)\n        assert isinstance(data['data']['input_points'], LabelTensor)\n        assert data['data']['input_points'].labels == ['u', 'v', 'w']\n    assert isinstance(data['data']['output_points'], torch.Tensor)\n    assert data['data']['output_points'].labels == ['u', 'v', 'w']\ntest_dataloader_labels(input_graph, output_graph, True)"
