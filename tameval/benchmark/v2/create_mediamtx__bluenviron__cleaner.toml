[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "bluenviron/mediamtx"
sha = "416ac1357ea1125768a6e874f695656f510bd524"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/recordcleaner/cleaner.go internal/recordcleaner/cleaner_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/recordcleaner/cleaner.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 84.0
original_coverage = 84.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 58, 59, 60, 61, 62, 63, 64, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 110, 111, 112, 113, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148,]
missed_lines = [ 51, 52, 53, 54, 65, 66, 68, 69, 102, 103, 104, 106, 107, 108,]

[input_info]
test_file_path = "internal/recordcleaner/cleaner_test.go"
focal_file_path = "internal/recordcleaner/cleaner.go"
test_file_url = "https://github.com/bluenviron/mediamtx/blob/416ac1357ea1125768a6e874f695656f510bd524/internal/recordcleaner/cleaner_test.go"
focal_file_url = "https://github.com/bluenviron/mediamtx/blob/416ac1357ea1125768a6e874f695656f510bd524/internal/recordcleaner/cleaner.go"
first_commit_date = "2024-09-08"
last_commit_date = "2025-02-07"
test_file_content = "package recordcleaner\n\nimport (\n\t\"os\"\n\t\"path/filepath\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/bluenviron/mediamtx/internal/conf\"\n\t\"github.com/bluenviron/mediamtx/internal/test\"\n\t\"github.com/stretchr/testify/require\"\n)\n\n\nfunc TestCleanerMultipleEntriesSamePath(t *testing.T) {\n\ttimeNow = func() time.Time {\n\t\treturn time.Date(2009, 5, 20, 22, 15, 25, 427000, time.Local)\n\t}\n\n\tdir, err := os.MkdirTemp(\"\", \"mediamtx-cleaner\")\n\trequire.NoError(t, err)\n\tdefer os.RemoveAll(dir)\n\n\terr = os.Mkdir(filepath.Join(dir, \"path1\"), 0o755)\n\trequire.NoError(t, err)\n\n\terr = os.Mkdir(filepath.Join(dir, \"path2\"), 0o755)\n\trequire.NoError(t, err)\n\n\terr = os.WriteFile(filepath.Join(dir, \"path1\", \"2009-05-19_22-15-25-000427.mp4\"), []byte{1}, 0o644)\n\trequire.NoError(t, err)\n\n\terr = os.WriteFile(filepath.Join(dir, \"path2\", \"2009-05-19_22-15-25-000427.mp4\"), []byte{1}, 0o644)\n\trequire.NoError(t, err)\n\n\tc := &Cleaner{\n\t\tPathConfs: map[string]*conf.Path{\n\t\t\t\"path1\": {\n\t\t\t\tName:              \"path1\",\n\t\t\t\tRecordPath:        filepath.Join(dir, \"%path/%Y-%m-%d_%H-%M-%S-%f\"),\n\t\t\t\tRecordFormat:      conf.RecordFormatFMP4,\n\t\t\t\tRecordDeleteAfter: conf.Duration(10 * time.Second),\n\t\t\t},\n\t\t\t\"path2\": {\n\t\t\t\tName:              \"path2\",\n\t\t\t\tRecordPath:        filepath.Join(dir, \"%path/%Y-%m-%d_%H-%M-%S-%f\"),\n\t\t\t\tRecordFormat:      conf.RecordFormatFMP4,\n\t\t\t\tRecordDeleteAfter: conf.Duration(10 * 24 * time.Hour),\n\t\t\t},\n\t\t},\n\t\tParent: test.NilLogger,\n\t}\n\tc.Initialize()\n\tdefer c.Close()\n\n\ttime.Sleep(500 * time.Millisecond)\n\n\t_, err = os.Stat(filepath.Join(dir, \"path1\", \"2009-05-19_22-15-25-000427.mp4\"))\n\trequire.Error(t, err)\n\n\t_, err = os.Stat(filepath.Join(dir, \"path1\"))\n\trequire.Error(t, err, \"testing\")\n\n\t_, err = os.Stat(filepath.Join(dir, \"path2\", \"2009-05-19_22-15-25-000427.mp4\"))\n\trequire.NoError(t, err)\n}\n"
