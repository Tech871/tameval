[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "bleemeo/glouton"
sha = "61a5ed8e7e659a6e865a183aaa1328e85efdaab1"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out otel/logprocessing/chunker.go otel/logprocessing/chunker_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting otel/logprocessing/chunker.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = 94.0
original_mutation_kill_rate = 94.0
covered_lines = [ 32, 33, 34, 35, 36, 37, 39, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 100,]
missed_lines = [ 40, 41, 42,]

[input_info]
test_file_path = "otel/logprocessing/chunker_test.go"
focal_file_path = "otel/logprocessing/chunker.go"
test_file_url = "https://github.com/bleemeo/glouton/blob/61a5ed8e7e659a6e865a183aaa1328e85efdaab1/otel/logprocessing/chunker_test.go"
focal_file_url = "https://github.com/bleemeo/glouton/blob/61a5ed8e7e659a6e865a183aaa1328e85efdaab1/otel/logprocessing/chunker.go"
first_commit_date = "2025-04-18"
last_commit_date = "2025-04-24"
test_file_content = "// Copyright 2015-2025 Bleemeo\n//\n// bleemeo.com an infrastructure monitoring solution in the Cloud\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage logprocessing\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"go.opentelemetry.io/collector/pdata/pcommon\"\n\t\"go.opentelemetry.io/collector/pdata/plog\"\n)\n\nfunc makeLogs(t *testing.T, res1RecordCount, res2RecordCount int, bodySizeFactor int) plog.Logs {\n\tt.Helper()\n\n\tif res1RecordCount > 999 || res2RecordCount > 999 {\n\t\tt.Fatal(\"Too many log records, you'll need to update the padding in the log body below to increase this limit.\")\n\t}\n\n\tif bodySizeFactor < 1 {\n\t\tt.Fatalf(\"Invalid bodySizeFactor %d: it must be at least 1.\", bodySizeFactor)\n\t}\n\n\tlogs := plog.NewLogs()\n\n\tfor resIdx, recordCount := range []int{res1RecordCount, res2RecordCount} {\n\t\tif recordCount == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tresourceLogs := logs.ResourceLogs().AppendEmpty()\n\n\t\tresource := resourceLogs.Resource()\n\t\tresource.Attributes().PutStr(\"service.name\", fmt.Sprintf(\"srv-%d\", resIdx+1))\n\n\t\tscopeLogs := resourceLogs.ScopeLogs().AppendEmpty()\n\n\t\tscope := scopeLogs.Scope()\n\t\tscope.SetName(\"logger\")\n\t\tscope.SetVersion(\"v1.0.0\")\n\n\t\tfor i := range recordCount {\n\t\t\tlogRec := scopeLogs.LogRecords().AppendEmpty()\n\n\t\t\t// Padding the log number with leading zeroes enables us to get\n\t\t\t// log records of the same size, regardless of their index.\n\t\t\tbodySample := fmt.Sprintf(\"Log message nÂ°%03d.\", i+1)\n\t\t\tlogRec.Body().SetStr(strings.Repeat(bodySample, bodySizeFactor))\n\n\t\t\tlogRec.SetSeverityText(\"INFO\")\n\t\t\tlogRec.SetSeverityNumber(plog.SeverityNumberInfo)\n\n\t\t\tlogRec.SetTimestamp(pcommon.NewTimestampFromTime(time.Now()))\n\n\t\t\tattrs := logRec.Attributes()\n\t\t\tattrs.PutStr(\"key\", \"value\")\n\t\t}\n\t}\n\n\treturn logs\n}\n\nfunc TestChunker(t *testing.T) {\n\tt.Parallel()\n\n\ttestCases := []struct {\n\t\tmaxSize             int\n\t\trecordCount         int\n\t\tbodySizeFactor      int\n\t\texpectedChunksCount int\n\t\texpectedTotalSize   int\n\t\tallowExceed         bool\n\t}{\n\t\t{\n\t\t\tmaxSize:             256,\n\t\t\trecordCount:         1,\n\t\t\tbodySizeFactor:      1,\n\t\t\texpectedChunksCount: 1,\n\t\t\texpectedTotalSize:   111,\n\t\t},\n\t\t{\n\t\t\tmaxSize:             256,\n\t\t\trecordCount:         3,\n\t\t\tbodySizeFactor:      1,\n\t\t\texpectedChunksCount: 1,\n\t\t\texpectedTotalSize:   237,\n\t\t},\n\t\t{\n\t\t\tmaxSize:             512,\n\t\t\trecordCount:         15,\n\t\t\tbodySizeFactor:      5,\n\t\t\texpectedChunksCount: 7,\n\t\t\texpectedTotalSize:   2442,\n\t\t},\n\t\t{\n\t\t\tmaxSize:             128,\n\t\t\trecordCount:         50,\n\t\t\tbodySizeFactor:      1,\n\t\t\texpectedChunksCount: 50,\n\t\t\texpectedTotalSize:   5550,\n\t\t},\n\t\t{\n\t\t\tmaxSize:             64,\n\t\t\trecordCount:         1,\n\t\t\tbodySizeFactor:      10,\n\t\t\texpectedChunksCount: 1,\n\t\t\texpectedTotalSize:   287,\n\t\t\tallowExceed:         true, // we can't split a single record\n\t\t},\n\t}\n\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"maxSize=%d recordCount=%d\", tc.maxSize, tc.recordCount), func(t *testing.T) {\n\t\t\tt.Parallel()\n\n\t\t\tvar pushCount, totalPushed, totalRecords int\n\n\t\t\tunmarshaler := new(plog.ProtoUnmarshaler)\n\t\t\tchunker := logChunker{\n\t\t\t\tmaxChunkSize: tc.maxSize,\n\t\t\t\tpushLogsFn: func(_ context.Context, b []byte) error {\n\t\t\t\t\tif len(b) > tc.maxSize && !tc.allowExceed {\n\t\t\t\t\t\tt.Errorf(\"Max chunk size exceeded: %d > %d\", len(b), tc.maxSize)\n\t\t\t\t\t}\n\n\t\t\t\t\tpushCount++\n\t\t\t\t\ttotalPushed += len(b)\n\n\t\t\t\t\tlogs, err := unmarshaler.UnmarshalLogs(b)\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tt.Fatal(\"Failed to unmarshal logs:\", err)\n\t\t\t\t\t}\n\n\t\t\t\t\ttotalRecords += logs.LogRecordCount()\n\n\t\t\t\t\treturn nil\n\t\t\t\t},\n\t\t\t}\n\n\t\t\terr := chunker.push(t.Context(), makeLogs(t, tc.recordCount, 0, tc.bodySizeFactor))\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\n\t\t\tif pushCount != tc.expectedChunksCount {\n\t\t\t\tt.Errorf(\"Expected %d chunks, got %d\", tc.expectedChunksCount, pushCount)\n\t\t\t}\n\n\t\t\tif totalPushed != tc.expectedTotalSize {\n\t\t\t\tt.Errorf(\"Expected %d bytes to be pushed, got %d\", tc.expectedTotalSize, totalPushed)\n\t\t\t}\n\n\t\t\tif totalRecords != tc.recordCount {\n\t\t\t\tt.Errorf(\"Expected %d records, got %d\", tc.recordCount, totalRecords)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestChunkerSpecialCases(t *testing.T) { //nolint: maintidx\n\tt.Parallel()\n\n\ttype resourceSummary struct {\n\t\tRecords    int\n\t\tAttributes map[string]any\n\t}\n\n\ttype chunkSummary struct {\n\t\tSize              int\n\t\tRecords           int\n\t\tResourceSummaries []resourceSummary\n\t}\n\n\trunChunker := func(t *testing.T, maxSize int, ld plog.Logs) (recordCount int, chunkSummaries []chunkSummary) {\n\t\tt.Helper()\n\n\t\tunmarshaler := new(plog.ProtoUnmarshaler)\n\t\tchunker := logChunker{\n\t\t\tmaxChunkSize: maxSize,\n\t\t\tpushLogsFn: func(_ context.Context, b []byte) error {\n\t\t\t\tlogs, err := unmarshaler.UnmarshalLogs(b)\n\t\t\t\tif err != nil {\n\t\t\t\t\tt.Fatal(\"Failed to unmarshal logs:\", err)\n\t\t\t\t}\n\n\t\t\t\tchunkRecCount := logs.LogRecordCount()\n\t\t\t\trecordCount += chunkRecCount\n\t\t\t\tsummary := chunkSummary{\n\t\t\t\t\tSize:              len(b),\n\t\t\t\t\tRecords:           chunkRecCount,\n\t\t\t\t\tResourceSummaries: make([]resourceSummary, logs.ResourceLogs().Len()),\n\t\t\t\t}\n\n\t\t\t\tfor i, res := range logs.ResourceLogs().All() {\n\t\t\t\t\trecordsCount := 0\n\n\t\t\t\t\tfor _, scope := range res.ScopeLogs().All() {\n\t\t\t\t\t\trecordsCount += scope.LogRecords().Len()\n\t\t\t\t\t}\n\n\t\t\t\t\tsummary.ResourceSummaries[i] = resourceSummary{\n\t\t\t\t\t\tRecords:    recordsCount,\n\t\t\t\t\t\tAttributes: res.Resource().Attributes().AsRaw(),\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tchunkSummaries = append(chunkSummaries, summary)\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t}\n\n\t\terr := chunker.push(t.Context(), ld)\n\t\tif err != nil {\n\t\t\tt.Fatal(\"Failed to push logs:\", err)\n\t\t}\n\n\t\treturn recordCount, chunkSummaries\n\t}\n\n\tt.Run(\"uniform distribution normal\", func(t *testing.T) {\n\t\tt.Parallel()\n\n\t\tconst totalRecordCount = 100\n\n\t\trecordCount, chunkSummaries := runChunker(t, 1024, makeLogs(t, totalRecordCount/2, totalRecordCount/2, 1))\n\n\t\tif recordCount != totalRecordCount {\n\t\t\tt.Errorf(\"Expected %d records, got %d\", totalRecordCount, recordCount)\n\t\t}\n\n\t\texpectedChunks := []chunkSummary{\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\tif diff := cmp.Diff(expectedChunks, chunkSummaries); diff != \"\" {\n\t\t\tt.Errorf(\"Unexpected chunks (-want +got):\\n%s\", diff)\n\t\t}\n\t})\n\n\tt.Run(\"uniform distribution big\", func(t *testing.T) {\n\t\tt.Parallel()\n\n\t\trecordCount, chunkSummaries := runChunker(t, 512, makeLogs(t, 1, 1, 10))\n\n\t\tif recordCount != 2 {\n\t\t\tt.Errorf(\"Expected 2 records, got %d\", recordCount)\n\t\t}\n\n\t\texpectedChunks := []chunkSummary{\n\t\t\t{\n\t\t\t\tSize:    287,\n\t\t\t\tRecords: 1,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    1,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    287,\n\t\t\t\tRecords: 1,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    1,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tif diff := cmp.Diff(expectedChunks, chunkSummaries); diff != \"\" {\n\t\t\tt.Errorf(\"Unexpected chunks (-want +got):\\n%s\", diff)\n\t\t}\n\t})\n\n\tt.Run(\"uniform distribution too big\", func(t *testing.T) {\n\t\tt.Parallel()\n\n\t\trecordCount, chunkSummaries := runChunker(t, 512, makeLogs(t, 1, 1, 50))\n\n\t\tif recordCount != 2 {\n\t\t\tt.Errorf(\"Expected 2 records, got %d\", recordCount)\n\t\t}\n\n\t\texpectedChunks := []chunkSummary{\n\t\t\t{\n\t\t\t\tSize:    1047,\n\t\t\t\tRecords: 1,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    1,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    1047,\n\t\t\t\tRecords: 1,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    1,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tif diff := cmp.Diff(expectedChunks, chunkSummaries); diff != \"\" {\n\t\t\tt.Errorf(\"Unexpected chunks (-want +got):\\n%s\", diff)\n\t\t}\n\t})\n\n\tt.Run(\"diverse distribution 1\", func(t *testing.T) {\n\t\tt.Parallel()\n\n\t\trecordCount, chunkSummaries := runChunker(t, 1024, makeLogs(t, 20, 80, 1))\n\n\t\tif recordCount != 100 {\n\t\t\tt.Errorf(\"Expected 100 records, got %d\", recordCount)\n\t\t}\n\n\t\texpectedChunks := []chunkSummary{\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    908,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    8,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    5,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tif diff := cmp.Diff(expectedChunks, chunkSummaries); diff != \"\" {\n\t\t\tt.Errorf(\"Unexpected chunks (-want +got):\\n%s\", diff)\n\t\t}\n\t})\n\n\tt.Run(\"diverse distribution 2\", func(t *testing.T) {\n\t\tt.Parallel()\n\n\t\trecordCount, chunkSummaries := runChunker(t, 1024, makeLogs(t, 80, 20, 1))\n\n\t\tif recordCount != 100 {\n\t\t\tt.Errorf(\"Expected 100 records, got %d\", recordCount)\n\t\t}\n\n\t\texpectedChunks := []chunkSummary{\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    795,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    12,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    846,\n\t\t\t\tRecords: 12,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    5,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-1\"},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    7,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tSize:    857,\n\t\t\t\tRecords: 13,\n\t\t\t\tResourceSummaries: []resourceSummary{\n\t\t\t\t\t{\n\t\t\t\t\t\tRecords:    13,\n\t\t\t\t\t\tAttributes: map[string]any{\"service.name\": \"srv-2\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t\tif diff := cmp.Diff(expectedChunks, chunkSummaries); diff != \"\" {\n\t\t\tt.Errorf(\"Unexpected chunks (-want +got):\\n%s\", diff)\n\t\t}\n\t})\n}\n"
