[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "AlexGustafsson/cupdate"
sha = "1d16570b6ddcce6fef954443916636cfcc74cae2"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/httputil/headers.go internal/httputil/headers_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/httputil/headers.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 93.0
mutation_kill_rate = 0
original_mutation_kill_rate = 70.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/httputil/headers_test.go"
focal_file_path = "internal/httputil/headers.go"
test_file_url = "https://github.com/AlexGustafsson/cupdate/blob/1d16570b6ddcce6fef954443916636cfcc74cae2/internal/httputil/headers_test.go"
focal_file_url = "https://github.com/AlexGustafsson/cupdate/blob/1d16570b6ddcce6fef954443916636cfcc74cae2/internal/httputil/headers.go"
first_commit_date = "2024-12-23"
last_commit_date = "2025-03-16"
test_file_content = "package httputil\n\nimport (\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestParseLinkHeader(t *testing.T) {\n\ttestCases := []struct {\n\t\tOrigin   *url.URL\n\t\tHeader   string\n\t\tExpected []Link\n\t\tError    bool\n\t}{\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `</uri-reference>; param1=value1; param2=\"value2\"`,\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"param1\": \"value1\",\n\t\t\t\t\t\t\"param2\": \"value2\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `</uri-reference>`,\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL:    mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `<https:\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"preconnect\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `<https:\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"preconnect\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `</style.css>; rel=preload; as=style; fetchpriority=\"high\"`,\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\":           \"preload\",\n\t\t\t\t\t\t\"as\":            \"style\",\n\t\t\t\t\t\t\"fetchpriority\": \"high\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `<https:\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"preconnect\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"preconnect\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"preconnect\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `<https:\n\t\t\tExpected: []Link{\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"prev\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"next\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"last\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tURL: mustParseURL(t, \"https:\n\t\t\t\t\tParams: map[string]string{\n\t\t\t\t\t\t\"rel\": \"first\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `https:\n\t\t\tError:  true,\n\t\t},\n\t\t{\n\t\t\tOrigin: mustParseURL(t, \"https:\n\t\t\tHeader: `<https:\n\t\t\tError:  true,\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t}\n}\n\nfunc TestParseWWWAuthenticateHeader(t *testing.T) {\n\ttestCases := []struct {\n\t\tHeader         string\n\t\tExpectedScheme string\n\t\tExpectedParams map[string]string\n\t\tError          bool\n\t}{\n\t\t{\n\t\t\tHeader:         `Basic realm=\"Dev\", charset=\"UTF-8\"`,\n\t\t\tExpectedScheme: \"Basic\",\n\t\t\tExpectedParams: map[string]string{\n\t\t\t\t\"realm\":   \"Dev\",\n\t\t\t\t\"charset\": \"UTF-8\",\n\t\t\t},\n\t\t\tError: false,\n\t\t},\n\t\t{\n\t\t\tHeader:         `Basic realm=\"Dev\",charset=\"UTF-8\"`,\n\t\t\tExpectedScheme: \"Basic\",\n\t\t\tExpectedParams: map[string]string{\n\t\t\t\t\"realm\":   \"Dev\",\n\t\t\t\t\"charset\": \"UTF-8\",\n\t\t\t},\n\t\t\tError: false,\n\t\t},\n\t\t{\n\t\t\tHeader:         `Basic realm=\"Dev\",charset=\"ASCII\",charset=\"UTF-8\"`,\n\t\t\tExpectedScheme: \"Basic\",\n\t\t\tExpectedParams: map[string]string{\n\t\t\t\t\"realm\":   \"Dev\",\n\t\t\t\t\"charset\": \"UTF-8\",\n\t\t\t},\n\t\t\tError: false,\n\t\t},\n\t\t{\n\t\t\tHeader:         `Bearer realm=\"https:\n\t\t\tExpectedScheme: \"Bearer\",\n\t\t\tExpectedParams: map[string]string{\n\t\t\t\t\"realm\":   \"https:\n\t\t\t\t\"service\": \"registry.docker.io\",\n\t\t\t\t\"scope\":   \"registry:catalog:*\",\n\t\t\t\t\"error\":   \"insufficient_scope\",\n\t\t\t},\n\t\t\tError: false,\n\t\t},\n\t\t{\n\t\t\tHeader: `Basic realm=\"Dev\" charset=\"ASCII\" charset=\"UTF-8\"`,\n\t\t\tError:  true,\n\t\t},\n\t\t{\n\t\t\tHeader: `Basic realm=\"Dev\" `,\n\t\t\tError:  true,\n\t\t},\n\t\t{\n\t\t\tHeader: `Basic realm=\"Dev\",charset=\"UTF-8\",`,\n\t\t\tError:  true,\n\t\t},\n\t\t{\n\t\t\tHeader: `Basic realm:\"Dev\"`,\n\t\t\tError:  true,\n\t\t},\n\t\t{\n\t\t\tHeader:         `Basic`,\n\t\t\tExpectedScheme: \"Basic\",\n\t\t\tExpectedParams: map[string]string{},\n\t\t\tError:          false,\n\t\t},\n\t\t{\n\t\t\tHeader: `Basic `,\n\t\t\tError:  true,\n\t\t},\n\t\t{\n\t\t\tHeader:         `Bearer realm=\"http:\n\t\t\tExpectedScheme: \"Bearer\",\n\t\t\tExpectedParams: map[string]string{\n\t\t\t\t\"realm\":   \"http:\n\t\t\t\t\"service\": \"zot\",\n\t\t\t\t\"scope\":   \"\",\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t}\n}\n\nfunc TestAccepts(t *testing.T) {\n\ttestCases := []struct {\n\t\tHeader    string\n\t\tMimeTypes []string\n\t\tExpected  string\n\t}{\n\t\t{\n\t\t\tHeader:    \"text/*; q=0.9,application/json; q=1;\",\n\t\t\tMimeTypes: []string{\"text/plain\", \"application/json\"},\n\t\t\tExpected:  \"application/json\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/*; q=0.9,application/json; q=1;\",\n\t\t\tMimeTypes: []string{\"application/json\"},\n\t\t\tExpected:  \"application/json\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/*; q=0.9,application/json; q=1;\",\n\t\t\tMimeTypes: []string{\"application/xml\"},\n\t\t\tExpected:  \"\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/*; q=1,application/json; q=1; charset=utf-8bm;\",\n\t\t\tMimeTypes: []string{\"text/plain\"},\n\t\t\tExpected:  \"text/plain\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/html; charset=utf-8; q=1,application/*; q=1; charset=cp1251;\",\n\t\t\tMimeTypes: []string{\"text/html\"},\n\t\t\tExpected:  \"text/html\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/html; charset=utf-8; q=1,application/*; q=1; charset=cp1251;\",\n\t\t\tMimeTypes: []string{\"text/html\"},\n\t\t\tExpected:  \"text/html\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"*/*\",\n\t\t\tMimeTypes: []string{\"text/html\"},\n\t\t\tExpected:  \"text/html\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n\t\t\tMimeTypes: []string{\"text/html\", \"application/xml\"},\n\t\t\tExpected:  \"text/html\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n\t\t\tMimeTypes: []string{\"text/plain\"},\n\t\t\tExpected:  \"text/plain\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"malformed\",\n\t\t\tMimeTypes: []string{\"text/plain\"},\n\t\t\tExpected:  \"\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/plain;mal:formed\",\n\t\t\tMimeTypes: []string{\"text/plain\"},\n\t\t\tExpected:  \"text/plain\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/plain;q=malformed\",\n\t\t\tMimeTypes: []string{\"text/plain\"},\n\t\t\tExpected:  \"\",\n\t\t},\n\t\t{\n\t\t\tHeader:    \"text/plain\",\n\t\t\tMimeTypes: []string{\"malformed\"},\n\t\t\tExpected:  \"\",\n\t\t},\n\t}\n\n\tfor _, testCase := range testCases {\n\t}\n}\n\nfunc mustParseURL(t *testing.T, u string) *url.URL {\n\tv, err := url.Parse(u)\n\trequire.NoError(t, err)\n\n\treturn v\n}"
