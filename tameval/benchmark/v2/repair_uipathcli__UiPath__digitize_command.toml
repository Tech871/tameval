[meta]
task = "repair"
scenario = "repair_syntax_error"

[lang_info]
lang = "Go"
go_version = "1.24"

[repo_info]
repository = "UiPath/uipathcli"
sha = "f599d0fbb2bbbb5d055d76ba5f1f68f727e97612"

[run_info]
docker_image = "golang:1.24"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out plugin/digitizer/digitize_command.go plugin/digitizer/digitize_command_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting plugin/digitizer/digitize_command.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 94.0
mutation_kill_rate = nan
original_mutation_kill_rate = 59.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "plugin/digitizer/digitize_command_test.go"
focal_file_path = "plugin/digitizer/digitize_command.go"
test_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/plugin/digitizer/digitize_command_test.go"
focal_file_url = "https://github.com/UiPath/uipathcli/blob/f599d0fbb2bbbb5d055d76ba5f1f68f727e97612/plugin/digitizer/digitize_command.go"
first_commit_date = "2022-12-26"
last_commit_date = "2025-05-15"
test_file_content = "package digitzer\n\nimport (\n\t\"bytes\"\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/UiPath/uipathcli/test\"\n)\n\nfunc TestDigitizeWithoutFileParameterShowsValidationError(t *testing.T) {\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Argument --file is missing\") {\n\t\tt.Errorf(\"Expected stderr to show that file parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestDigitizeFileDoesNotExistShowsValidationError(t *testing.T) {\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithConfig(config).\n\t\tWithDefinition(\"du\", definition).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", \"does-not-exist\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Error sending request: File 'does-not-exist' not found\") {\n\t\tt.Errorf(\"Expected stderr to show that file was not found, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestDigitizeWithoutOrganizationShowsValidationError(t *testing.T) {\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", \"hello-world\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Organization is not set\") {\n\t\tt.Errorf(\"Expected stderr to show that organization parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfun TestDigitizeWithoutTenantShowsValidationError(t *testing.T) {\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--organization\", \"myorg\", \"--project-id\", \"1234\", \"--file\", \"hello-world\"}, context)\n\n\tif !strings.Contains(result.StdErr, \"Tenant is not set\") {\n\t\tt.Errorf(\"Expected stderr to show that tenant parameter is missing, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestDigitizeWithFailedResponseReturnsError(t *testing.T) {\n\tpath := test.CreateTempFile(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusBadRequest, \"validation error\").\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", path}, context)\n\n\tif !strings.Contains(result.StdErr, \"Digitizer returned status code '400' and body 'validation error'\") {\n\t\tt.Errorf(\"Expected stderr to show that digitizer call failed, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestDigitizeWithFailedResultResponseReturnsError(t *testing.T) {\n\tpath := test.CreateTempFile(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"04908673-2b65-4647-8ab3-dde8a3aa7885\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/1234/digitization/result/04908673-2b65-4647-8ab3-dde8a3aa7885?api-version=1\", http.StatusBadRequest, `validation error`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", path}, context)\n\n\tif !strings.Contains(result.StdErr, \"Digitizer returned status code '400' and body 'validation error'\") {\n\t\tt.Errorf(\"Expected stderr to show that digitizer call failed, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestDigitizeWithoutProjectIdUsesDefaultProject(t *testing.T) {\n\tpath := test.CreateTempFile(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\nservers:\n- url: https:\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"648ea1c2-7dbe-42a8-b112-6474d07e61c1\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/00000000-0000-0000-0000-000000000000/digitization/result/648ea1c2-7dbe-42a8-b112-6474d07e61c1?api-version=1\", http.StatusOK, `{\"status\":\"Done\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--file\", path}, context)\n\n\texpectedResult := `{\n  \"status\": \"Done\"\n}\n`\n\tif result.StdOut != expectedResult {\n\t\tt.Errorf(\"Expected stdout to show the digitize result, but got: %v\", result.StdOut)\n\t}\n}\n\nfunc TestDigitizeSuccessfully(t *testing.T) {\n\tpath := test.CreateTempFile(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\nservers:\n- url: https:\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"eb80e441-05de-4a13-9aaa-f65b1babba05\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/1234/digitization/result/eb80e441-05de-4a13-9aaa-f65b1babba05?api-version=1\", http.StatusOK, `{\"status\":\"Done\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", path}, context)\n\n\texpectedResult := `{\n  \"status\": \"Done\"\n}\n`\n\tif result.StdOut != expectedResult {\n\t\tt.Errorf(\"Expected stdout to show the digitize result, but got: %v\", result.StdOut)\n\t}\n}\n\nfunc TestDigitizeSuccessfullyWithDebugFlag(t *testing.T) {\n\tpath := test.CreateTempFile(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"eb80e441-05de-4a13-9aaa-f65b1babba05\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/1234/digitization/result/eb80e441-05de-4a13-9aaa-f65b1babba05?api-version=1\", http.StatusOK, `{\"pages\":[],\"status\":\"Done\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", path, \"--debug\"}, context)\n\n\texpected := `{\n  \"pages\": [],\n  \"status\": \"Done\"\n}\n`\n\tif result.StdOut != expected {\n\t\tt.Errorf(\"Expected stdout to show the digitize result, but got: %v\", result.StdOut)\n\t}\n\tif !strings.Contains(result.StdErr, \"/digitization/start\") {\n\t\tt.Errorf(\"Expected stderr to show the start digitization operation, but got: %v\", result.StdErr)\n\t}\n\tif !strings.Contains(result.StdErr, \"/digitization/result/eb80e441-05de-4a13-9aaa-f65b1babba05\") {\n\t\tt.Errorf(\"Expected stderr to show the get digitization result operation, but got: %v\", result.StdErr)\n\t}\n}\n\nfunc TestDigitizeSuccessfullyWithStdIn(t *testing.T) {\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\tstdIn := bytes.Buffer{}\n\tstdIn.WriteString(\"hello-world\")\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithStdIn(stdIn).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"eb80e441-05de-4a13-9aaa-f65b1babba05\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/1234/digitization/result/eb80e441-05de-4a13-9aaa-f65b1babba05?api-version=1\", http.StatusOK, `{\"status\":\"Done\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--content-type\", \"application/pdf\", \"--file\", \"-\"}, context)\n\n\texpectedResult := `{\n  \"status\": \"Done\"\n}\n`\n\tif result.StdOut != expectedResult {\n\t\tt.Errorf(\"Expected stdout to show the digitize result, but got: %v\", result.StdOut)\n\t}\n}\n\nfunc TestDigitizeLargeFileSuccessfully(t *testing.T) {\n\tpath := test.CreateTempFileBinary(t, make([]byte, 10*1024*1024))\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n`\n\n\tdefinition := `\nservers:\n- url: https:\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"eb80e441-05de-4a13-9aaa-f65b1babba05\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/1234/digitization/result/eb80e441-05de-4a13-9aaa-f65b1babba05?api-version=1\", http.StatusOK, `{\"status\":\"Done\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", path}, context)\n\n\texpectedResult := `{\n  \"status\": \"Done\"\n}\n`\n\tif result.StdOut != expectedResult {\n\t\tt.Errorf(\"Expected stdout to show the digitize result, but got: %v\", result.StdOut)\n\t}\n}\n\nfunc TestDigitizeSuccessfullyWithCustomHeader(t *testing.T) {\n\tpath := test.CreateTempFile(t, \"hello-world\")\n\n\tconfig := `profiles:\n- name: default\n  organization: my-org\n  tenant: my-tenant\n  header:\n    x-custom-header: my-custom-value\n`\n\n\tdefinition := `\nservers:\n- url: https:\n  description: The production url\n  variables:\n    organization:\n      description: The organization name (or id)\n      default: my-org\n    tenant:\n      description: The tenant name (or id)\n      default: my-tenant\npaths:\n  /digitize:\n    get:\n      operationId: digitize\n`\n\n\tcontext := test.NewContextBuilder().\n\t\tWithDefinition(\"du\", definition).\n\t\tWithConfig(config).\n\t\tWithCommandPlugin(NewDigitizeCommand()).\n\t\tWithResponse(http.StatusAccepted, `{\"documentId\":\"eb80e441-05de-4a13-9aaa-f65b1babba05\"}`).\n\t\tWithUrlResponse(\"/my-org/my-tenant/du_/api/framework/projects/1234/digitization/result/eb80e441-05de-4a13-9aaa-f65b1babba05?api-version=1\", http.StatusOK, `{\"status\":\"Done\"}`).\n\t\tBuild()\n\n\tresult := test.RunCli([]string{\"du\", \"digitization\", \"digitize\", \"--project-id\", \"1234\", \"--file\", path}, context)\n\n\tif result.RequestHeader[\"x-custom-header\"] != \"my-custom-value\" {\n\t\tt.Errorf(\"Expected HTTP calls to contain custom config header, but got: %v\", result.RequestHeader)\n\t}\n}"
