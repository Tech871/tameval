[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "JustSkiv/goschedviz"
sha = "48ad1c1ea69350237e9569c68a0e0b7c2bc493b1"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/metrics/metrics.go pkg/metrics/metrics_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/metrics/metrics.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/metrics/metrics_test.go"
focal_file_path = "pkg/metrics/metrics.go"
test_file_url = "https://github.com/JustSkiv/goschedviz/blob/48ad1c1ea69350237e9569c68a0e0b7c2bc493b1/pkg/metrics/metrics_test.go"
focal_file_url = "https://github.com/JustSkiv/goschedviz/blob/48ad1c1ea69350237e9569c68a0e0b7c2bc493b1/pkg/metrics/metrics.go"
first_commit_date = "2025-02-23"
last_commit_date = "2025-02-23"
test_file_content = "package metrics\n\n\nfunc TestReporter_Output(t *testing.T) {\n\toldStderr := os.Stderr\n\tr, w, err := os.Pipe()\n\trequire.NoError(t, err)\n\tos.Stderr = w\n\tdefer func() {\n\t\tos.Stderr = oldStderr\n\t}()\n\treporter := NewReporter(100 * time.Millisecond)\n\treporter.Start()\n\ttime.Sleep(250 * time.Millisecond)\n\treporter.Stop()\n\tw.Close()\n\tscanner := bufio.NewScanner(r)\n\tvar lines []string\n\tfor scanner.Scan() {\n\t\tlines = append(lines, scanner.Text())\n\t}\n\trequire.NoError(t, scanner.Err())\n\trequire.NotEmpty(t, lines, \"Should have captured some output\")\n\tfor _, line := range lines {\n\t\tassert.True(t, strings.HasPrefix(line, prefix),\n\t\t\t\"Each line should start with metrics prefix\")\n\t\tassert.Contains(t, line, \"num_goroutines=\",\n\t\t\t\"Each line should contain goroutines metric\")\n\t}\n}\n\nfunc TestReporter_StartStop(t *testing.T) {\n\treporter := NewReporter(time.Second)\n\treporter.Start()\n\treporter.Start()\n\treporter.Stop()\n\treporter.Stop()\n}"
