[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "lss233/kirara-ai"
sha = "8295a5deda0b289a3f70d946064b6c9a3e1b0753"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=kirara_ai/workflow/implementations/blocks/system/help.py -m pytest -q --junit-xml=test_output.xml tests/system_blocks/system/test_help.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target kirara_ai.workflow.implementations.blocks.system.help --unit-test tests.system_blocks.system.test_help --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target kirara_ai/workflow/implementations/blocks/system/help.py --unit-test tests/system_blocks/system/test_help.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 39.0
original_coverage = 88.0
mutation_kill_rate = 15.0
original_mutation_kill_rate = 73.0
covered_lines = [ 0, 2, 3, 4, 5, 6, 7, 10, 28, 40, 43, 44, 45, 46, 48, 50, 51, 54, 55, 78, 80, 90,]
missed_lines = [ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 32, 36, 37, 57, 58, 59, 62, 63, 64, 67, 69, 81, 82, 83, 84, 85, 86, 87, 88,]

[input_info]
test_file_path = "tests/system_blocks/system/test_help.py"
focal_file_path = "kirara_ai/workflow/implementations/blocks/system/help.py"
test_file_url = "https://github.com/lss233/kirara-ai/blob/8295a5deda0b289a3f70d946064b6c9a3e1b0753/tests/system_blocks/system/test_help.py"
focal_file_url = "https://github.com/lss233/kirara-ai/blob/8295a5deda0b289a3f70d946064b6c9a3e1b0753/kirara_ai/workflow/implementations/blocks/system/help.py"
first_commit_date = "2025-02-23"
last_commit_date = "2025-04-02"
test_file_content = "from unittest.mock import MagicMock\n\nimport pytest\n\nfrom kirara_ai.im.message import IMMessage\nfrom kirara_ai.ioc.container import DependencyContainer\nfrom kirara_ai.workflow.core.dispatch import CombinedDispatchRule, DispatchRuleRegistry, RuleGroup, SimpleDispatchRule\nfrom kirara_ai.workflow.implementations.blocks.system.help import GenerateHelp\n\n@pytest.fixture\ndef container():\n    \"\"\"创建一个带有模拟规则注册表的容器\"\"\"\n    container = DependencyContainer()\n    registry = MagicMock(spec=DispatchRuleRegistry)\n    container.register(DispatchRuleRegistry, registry)\n    return container, registry\n\ndef create_mock_rule(\n    rule_id: str, name: str, description: str, workflow_id: str, rule_groups: list\n) -> CombinedDispatchRule:\n    \"\"\"创建模拟的组合规则\"\"\"\n    return CombinedDispatchRule(\n        rule_id=rule_id,\n        name=name,\n        description=description,\n        workflow_id=workflow_id,\n        rule_groups=rule_groups,\n        enabled=True,\n        priority=5,\n        metadata={},\n    )\n\ndef test_generate_help_empty(container):\n    \"\"\"测试没有规则时的帮助信息生成\"\"\"\n    container, registry = container\n    registry.get_active_rules.return_value = []\n\n    block = GenerateHelp()\n    block.container = container\n    result = block.execute()\n\n    assert \"response\" in result\n    response = result[\"response\"]\n    assert isinstance(response, IMMessage)\n    help_text = response.content\n\n    # 检查基本格式\n    assert \"机器人命令帮助\" in help_text\n    # 确保没有分类和命令\n    assert \"📑\" not in help_text\n    assert \"🔸\" not in help_text\n"
