[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "zix99/rare"
sha = "dbf03dd64fed323c2e7b3b36d97210f929fb64fa"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/extractor/dirwalk/pathmatch/matchset.go pkg/extractor/dirwalk/pathmatch/matchset_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/extractor/dirwalk/pathmatch/matchset.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 55.0
original_coverage = 100.0
mutation_kill_rate = 50.0
original_mutation_kill_rate = 100.0
covered_lines = [ 10, 11, 12, 13, 14, 15, 21, 22, 23, 24, 25,]
missed_lines = [ 17, 26, 27, 31, 32, 33, 34, 35, 37,]

[input_info]
test_file_path = "pkg/extractor/dirwalk/pathmatch/matchset_test.go"
focal_file_path = "pkg/extractor/dirwalk/pathmatch/matchset.go"
test_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/extractor/dirwalk/pathmatch/matchset_test.go"
focal_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/extractor/dirwalk/pathmatch/matchset.go"
first_commit_date = "2025-06-13"
last_commit_date = "2025-06-13"
test_file_content = "package pathmatch\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\nfunc TestInvalidMatchSet(t *testing.T) {\n\tms, err := NewMatchSet(\"[unclosed\")\n\tassert.Error(t, err)\n\tassert.Nil(t, ms)\n}\n"
