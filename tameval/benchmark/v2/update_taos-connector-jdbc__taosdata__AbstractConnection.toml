[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_version = "1.8"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "taosdata/taos-connector-jdbc"
sha = "180ba59e0aa7793a85db8d1cc332722f324b0b9d"

[run_info]
docker_image = "maven:3.8.6-jdk-8"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=AbstractConnectionTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.AbstractConnection  -DtargetTests=**.AbstractConnectionTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 49.0
mutation_kill_rate = nan
original_mutation_kill_rate = 38.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/com/taosdata/jdbc/AbstractConnectionTest.java"
focal_file_path = "src/main/java/com/taosdata/jdbc/AbstractConnection.java"
test_file_url = "https://github.com/taosdata/taos-connector-jdbc/blob/180ba59e0aa7793a85db8d1cc332722f324b0b9d/src/test/java/com/taosdata/jdbc/AbstractConnectionTest.java"
focal_file_url = "https://github.com/taosdata/taos-connector-jdbc/blob/180ba59e0aa7793a85db8d1cc332722f324b0b9d/src/main/java/com/taosdata/jdbc/AbstractConnection.java"
first_commit_date = "2021-02-19"
last_commit_date = "2025-07-26"
test_file_content = "package com.taosdata.jdbc;\n\nimport com.taosdata.jdbc.enums.SchemalessProtocolType;\nimport com.taosdata.jdbc.enums.SchemalessTimestampType;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.sql.*;\nimport java.util.Properties;\n\nimport static org.junit.Assert.*;\n\npublic class AbstractConnectionTest {\n    private AbstractConnection connection;\n\n    @Before\n    public void setUp() {\n        connection = new AbstractConnection(new Properties()) {\n            @Override\n            public Statement createStatement() throws SQLException {\n                return null; // Mock implementation\n            }\n\n            @Override\n            public PreparedStatement prepareStatement(String sql) throws SQLException {\n                return null; // Mock implementation\n            }\n\n            @Override\n            public void close() throws SQLException {\n                // Mock implementation\n                isClosed = true;\n            }\n\n            @Override\n            public boolean isClosed() throws SQLException {\n                return isClosed; // Mock implementation\n            }\n\n            @Override\n            public DatabaseMetaData getMetaData() throws SQLException {\n                return null; // Mock implementation\n            }\n\n            @Override\n            public void write(String[] lines, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType, Integer ttl, Long reqId) throws SQLException{\n            }\n\n            @Override\n            public int writeRaw(String line, SchemalessProtocolType protocolType, SchemalessTimestampType timestampType, Integer ttl, Long reqId) throws SQLException{\n                return 0;\n            }\n\n\n        };\n    }\n\n    @Test(expected = SQLException.class)\n    public void testNativeSQLWhenClosed() throws SQLException {\n        connection.close();\n        connection.nativeSQL(\"SELECT * FROM table\");\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetAutoCommitWhenClosed() throws SQLException {\n        connection.close();\n        connection.setAutoCommit(true);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetAutoCommitWhenClosed() throws SQLException {\n        connection.close();\n        connection.getAutoCommit();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCommitWhenClosed() throws SQLException {\n        connection.close();\n        connection.commit();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testRollbackWhenClosed() throws SQLException {\n        connection.close();\n        connection.rollback();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetReadOnlyWhenClosed() throws SQLException {\n        connection.close();\n        connection.setReadOnly(true);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsReadOnlyWhenClosed() throws SQLException {\n        connection.close();\n        connection.isReadOnly();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetCatalogWhenClosed() throws SQLException {\n        connection.close();\n        connection.setCatalog(\"testCatalog\");\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetCatalogWhenClosed() throws SQLException {\n        connection.close();\n        connection.getCatalog();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetTransactionIsolationWhenClosed() throws SQLException {\n        connection.close();\n        connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetTransactionIsolationWhenClosed() throws SQLException {\n        connection.close();\n        connection.getTransactionIsolation();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testClearWarningsWhenClosed() throws SQLException {\n        connection.close();\n        connection.clearWarnings();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetWarningsWhenClosed() throws SQLException {\n        connection.close();\n        connection.getWarnings();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetHoldabilityWhenClosed() throws SQLException {\n        connection.close();\n        connection.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetHoldabilityWhenClosed() throws SQLException {\n        connection.close();\n        connection.getHoldability();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetSchemaWhenClosed() throws SQLException {\n        connection.close();\n        connection.setSchema(\"testSchema\");\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetSchemaWhenClosed() throws SQLException {\n        connection.close();\n        connection.getSchema();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testAbortWhenClosed() throws SQLException {\n        connection.close();\n        connection.abort(null);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetNetworkTimeoutWhenClosed() throws SQLException {\n        connection.close();\n        connection.setNetworkTimeout(null, 1000);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetNetworkTimeoutWhenClosed() throws SQLException {\n        connection.close();\n        connection.getNetworkTimeout();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStatement() throws SQLException {\n        connection.createStatement(999, ResultSet.CONCUR_READ_ONLY);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStatement2() throws SQLException {\n        connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, 999);\n    }\n\n    @Test\n    public void testCreateStatement3() throws SQLException {\n        // 测试有效的 ResultSet 类型和并发\n        connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStatement4() throws SQLException {\n        connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStatement5() throws SQLException {\n        connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\n    }\n    @Test(expected = SQLException.class)\n    public void testCreateStatement6() throws SQLException {\n        connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStatement7() throws SQLException {\n        connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreatePrepareStatement() throws SQLException {\n        connection.prepareStatement(\"\", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n    }\n\n\n    @Test(expected = SQLException.class)\n    public void testSetReadOnly_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.setReadOnly(true);\n    }\n\n    @Test\n    public void testSetReadOnly() throws SQLException {\n        connection.setReadOnly(false);\n        // 这里可以添加验证逻辑，确保状态被正确设置\n    }\n\n    @Test(expected = SQLException.class)\n    public void testIsReadOnly_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.isReadOnly();\n    }\n\n    @Test\n    public void testIsReadOnly() throws SQLException {\n        assertTrue(connection.isReadOnly());\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetCatalog_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.setCatalog(\"testCatalog\");\n    }\n\n    @Test\n    public void testSetCatalog() throws SQLException {\n        connection.setCatalog(\"testCatalog\");\n        // 这里可以添加验证逻辑，确保目录被正确设置\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetCatalog_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getCatalog();\n    }\n\n    @Test\n    public void testGetCatalog() throws SQLException {\n        connection.setCatalog(\"testCatalog\");\n        assertEquals(\"testCatalog\", connection.getCatalog());\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetTransactionIsolation_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetTransactionIsolation_InvalidLevel() throws SQLException {\n        connection.setTransactionIsolation(999); // 无效的隔离级别\n    }\n\n    @Test\n    public void testSetTransactionIsolation() throws SQLException {\n        connection.setTransactionIsolation(Connection.TRANSACTION_NONE);\n    }\n    @Test (expected = SQLException.class)\n    public void testSetTransactionIsolation2() throws SQLException {\n        connection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n    }\n    @Test (expected = SQLException.class)\n    public void testSetTransactionIsolation3() throws SQLException {\n        connection.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);\n    }\n    @Test (expected = SQLException.class)\n    public void testSetTransactionIsolation4() throws SQLException {\n        connection.setTransactionIsolation(Connection.TRANSACTION_READ_UNCOMMITTED);\n    }\n    @Test (expected = SQLException.class)\n    public void testSetTransactionIsolation5() throws SQLException {\n        connection.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);\n    }\n\n\n    @Test(expected = SQLException.class)\n    public void testGetTransactionIsolation_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getTransactionIsolation();\n    }\n\n    @Test\n    public void testGetTransactionIsolation() throws SQLException {\n        connection.setTransactionIsolation(Connection.TRANSACTION_NONE);\n        assertEquals(Connection.TRANSACTION_NONE, connection.getTransactionIsolation());\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetWarnings_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getWarnings();\n    }\n\n    @Test\n    public void testGetWarnings() throws SQLException {\n        SQLWarning warning = connection.getWarnings();\n        assertNull(warning); // 假设没有警告\n    }\n\n    @Test(expected = SQLException.class)\n    public void testClearWarnings_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.clearWarnings();\n    }\n\n    @Test\n    public void testClearWarnings() throws SQLException {\n        connection.clearWarnings();\n        // 这里可以添加验证逻辑，确保警告被清除\n    }\n\n\n\n\n    @Test(expected = SQLException.class)\n    public void testCreateClob_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.createClob();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateClob_UnsupportedMethod() throws SQLException {\n        connection.createClob();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateBlob_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.createBlob();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateBlob_UnsupportedMethod() throws SQLException {\n        connection.createBlob();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateNClob_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.createNClob();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateNClob_UnsupportedMethod() throws SQLException {\n        connection.createNClob();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateSQLXML_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.createSQLXML();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateSQLXML_UnsupportedMethod() throws SQLException {\n        connection.createSQLXML();\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetClientInfo_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getClientInfo(\"testName\");\n    }\n\n    @Test\n    public void testGetClientInfo() throws SQLException {\n        connection.clientInfoProps.setProperty(\"testName\", \"testValue\");\n        assertEquals(\"testValue\", connection.getClientInfo(\"testName\"));\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetClientInfoAll_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getClientInfo();\n    }\n\n    @Test\n    public void testGetClientInfoAll() throws SQLException {\n        connection.clientInfoProps.setProperty(\"testName\", \"testValue\");\n        Properties props = connection.getClientInfo();\n        assertEquals(\"testValue\", props.getProperty(\"testName\"));\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateArrayOf_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.createArrayOf(\"typeName\", new Object[]{});\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateArrayOf_UnsupportedMethod() throws SQLException {\n        connection.createArrayOf(\"typeName\", new Object[]{});\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStruct_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.createStruct(\"typeName\", new Object[]{});\n    }\n\n    @Test(expected = SQLException.class)\n    public void testCreateStruct_UnsupportedMethod() throws SQLException {\n        connection.createStruct(\"typeName\", new Object[]{});\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetSchema_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.setSchema(\"testSchema\");\n    }\n\n    @Test\n    public void testSetSchema() throws SQLException {\n        connection.setSchema(\"testSchema\");\n        // 这里可以添加验证逻辑，确保没有异常抛出\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetSchema_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getSchema();\n    }\n\n    @Test\n    public void testGetSchema() throws SQLException {\n        assertNull(connection.getSchema()); // 假设返回 null\n    }\n\n    @Test(expected = SQLException.class)\n    public void testAbort_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.abort(null);\n    }\n\n    @Test\n    public void testAbort() throws SQLException {\n        connection.abort(null);\n        // 这里可以添加验证逻辑，确保没有异常抛出\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetNetworkTimeout_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.setNetworkTimeout(null, 1000);\n    }\n\n    @Test(expected = SQLException.class)\n    public void testSetNetworkTimeout_InvalidTimeout() throws SQLException {\n        connection.setNetworkTimeout(null, -1); // 无效的超时值\n    }\n\n    @Test\n    public void testSetNetworkTimeout() throws SQLException {\n        connection.setNetworkTimeout(null, 1000);\n        // 这里可以添加验证逻辑，确保没有异常抛出\n    }\n\n    @Test(expected = SQLException.class)\n    public void testGetNetworkTimeout_ConnectionClosed() throws SQLException {\n        connection.close();\n        connection.getNetworkTimeout();\n    }\n\n    @Test\n    public void testGetNetworkTimeout() throws SQLException {\n        assertEquals(0, connection.getNetworkTimeout()); // 假设默认返回 0\n    }\n\n}"
