[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "requirements.txt"

[repo_info]
repository = "github/issue-metrics"
sha = "23689ee936e1c52ad48581667f483140c24224f1"
bench_version = 1

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements-test.txt && pip install -r requirements.txt && (pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=json_writer.py -m pytest -q --junit-xml=test_output.xml test_json_writer.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target json_writer --unit-test test_json_writer --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target json_writer.py --unit-test test_json_writer.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 9.0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = [ 20, 21, 22, 23, 25, 28,]
missed_lines = [ 93, 94, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 168, 169, 170, 171, 172, 173, 174, 189, 192, 196, 197, 198, 199, 202, 203, 204, 206,]

[input_info]
test_file_path = "test_json_writer.py"
focal_file_path = "json_writer.py"
test_file_url = "https://github.com/github/issue-metrics/blob/23689ee936e1c52ad48581667f483140c24224f1/test_json_writer.py"
focal_file_url = "https://github.com/github/issue-metrics/blob/23689ee936e1c52ad48581667f483140c24224f1/json_writer.py"
first_commit_date = "2023-06-30"
last_commit_date = "2025-03-16"
test_file_content = "\"\"\"Tests for the write_to_json function in json_writer.py.\"\"\"\n\nimport json\nimport unittest\nfrom datetime import timedelta\n\nfrom classes import IssueWithMetrics\nfrom json_writer import write_to_json\n\n\nclass TestWriteToJson(unittest.TestCase):\n    \"\"\"Tests for the write_to_json function.\"\"\"\n\n    # Show differences without omission in assertion\n    maxDiff = None\n\n    def test_write_to_json(self):\n        \"\"\"Test that write_to_json writes the correct JSON file.\"\"\"\n        issues_with_metrics = [\n            IssueWithMetrics(\n                title=\"Issue 1\",\n                html_url=\"https://github.com/owner/repo/issues/1\",\n                author=\"alice\",\n                time_to_first_response=timedelta(days=3),\n                time_to_close=timedelta(days=6),\n                time_to_answer=None,\n                time_in_draft=timedelta(days=1),\n                labels_metrics={\n                    \"bug\": timedelta(days=1, hours=16, minutes=24, seconds=12)\n                },\n            ),\n            IssueWithMetrics(\n                title=\"Issue 2\",\n                html_url=\"https://github.com/owner/repo/issues/2\",\n                author=\"bob\",\n                time_to_first_response=timedelta(days=2),\n                time_to_close=timedelta(days=4),\n                time_to_answer=timedelta(days=1),\n                labels_metrics={},\n            ),\n        ]\n\n        stats_time_to_first_response = {\n            \"avg\": timedelta(days=2.5),\n            \"med\": timedelta(days=2.5),\n            \"90p\": timedelta(days=1.5),\n        }\n        stats_time_to_close = {\n            \"avg\": timedelta(days=5),\n            \"med\": timedelta(days=4),\n            \"90p\": timedelta(days=3),\n        }\n        stats_time_to_answer = {\n            \"avg\": timedelta(days=1),\n            \"med\": timedelta(days=2),\n            \"90p\": timedelta(days=3),\n        }\n        stats_time_in_labels = {\n            \"avg\": {\"bug\": timedelta(days=1, hours=16, minutes=24, seconds=12)},\n            \"med\": {\"bug\": timedelta(days=1, hours=16, minutes=24, seconds=12)},\n            \"90p\": {\"bug\": timedelta(days=1, hours=16, minutes=24, seconds=12)},\n        }\n        num_issues_opened = 2\n        num_issues_closed = 1\n        num_mentor_count = 5\n\n        expected_output = {\n            \"average_time_to_first_response\": \"2 days, 12:00:00\",\n            \"average_time_to_close\": \"5 days, 0:00:00\",\n            \"average_time_to_answer\": \"1 day, 0:00:00\",\n            \"average_time_in_labels\": {\"bug\": \"1 day, 16:24:12\"},\n            \"median_time_to_first_response\": \"2 days, 12:00:00\",\n            \"median_time_to_close\": \"4 days, 0:00:00\",\n            \"median_time_to_answer\": \"2 days, 0:00:00\",\n            \"median_time_in_labels\": {\"bug\": \"1 day, 16:24:12\"},\n            \"90_percentile_time_to_first_response\": \"1 day, 12:00:00\",\n            \"90_percentile_time_to_close\": \"3 days, 0:00:00\",\n            \"90_percentile_time_to_answer\": \"3 days, 0:00:00\",\n            \"90_percentile_time_in_labels\": {\"bug\": \"1 day, 16:24:12\"},\n            \"num_items_opened\": 2,\n            \"num_items_closed\": 1,\n            \"num_mentor_count\": 5,\n            \"total_item_count\": 2,\n            \"issues\": [\n                {\n                    \"title\": \"Issue 1\",\n                    \"html_url\": \"https://github.com/owner/repo/issues/1\",\n                    \"author\": \"alice\",\n                    \"time_to_first_response\": \"3 days, 0:00:00\",\n                    \"time_to_close\": \"6 days, 0:00:00\",\n                    \"time_to_answer\": \"None\",\n                    \"time_in_draft\": \"1 day, 0:00:00\",\n                    \"label_metrics\": {\"bug\": \"1 day, 16:24:12\"},\n                },\n                {\n                    \"title\": \"Issue 2\",\n                    \"html_url\": \"https://github.com/owner/repo/issues/2\",\n                    \"author\": \"bob\",\n                    \"time_to_first_response\": \"2 days, 0:00:00\",\n                    \"time_to_close\": \"4 days, 0:00:00\",\n                    \"time_to_answer\": \"1 day, 0:00:00\",\n                    \"time_in_draft\": \"None\",\n                    \"label_metrics\": {},\n                },\n            ],\n            \"search_query\": \"is:issue repo:owner/repo\",\n        }\n\n        # Call the function and check the output\n        self.assertEqual(\n            write_to_json(\n                issues_with_metrics=issues_with_metrics,\n                stats_time_to_first_response=stats_time_to_first_response,\n                stats_time_to_close=stats_time_to_close,\n                stats_time_to_answer=stats_time_to_answer,\n                stats_time_in_labels=stats_time_in_labels,\n                num_issues_opened=num_issues_opened,\n                num_issues_closed=num_issues_closed,\n                num_mentor_count=num_mentor_count,\n                search_query=\"is:issue repo:owner/repo\",\n                output_file=\"issue_metrics.json\",\n            ),\n            json.dumps(expected_output),\n        )\n\n    def test_write_to_json_with_no_response(self):\n        \"\"\"Test where there is no answer to a issue.\"\"\"\n        issues_with_metrics = [\n            IssueWithMetrics(\n                title=\"Issue 1\",\n                html_url=\"https://github.com/owner/repo/issues/1\",\n                author=\"alice\",\n                time_to_first_response=None,\n                time_to_close=None,\n                time_to_answer=None,\n                labels_metrics={},\n            ),\n            IssueWithMetrics(\n                title=\"Issue 2\",\n                html_url=\"https://github.com/owner/repo/issues/2\",\n                author=\"bob\",\n                time_to_first_response=None,\n                time_to_close=None,\n                time_to_answer=None,\n                labels_metrics={},\n            ),\n        ]\n\n        stats_time_to_first_response = None\n        stats_time_to_close = None\n        stats_time_to_answer = None\n        stats_time_in_labels = {\n            \"avg\": {},\n            \"med\": {},\n            \"90p\": {},\n        }\n        num_issues_opened = 2\n        num_issues_closed = 0\n        num_mentor_count = 5\n\n        expected_output = {\n            \"average_time_to_first_response\": \"None\",\n            \"average_time_to_close\": \"None\",\n            \"average_time_to_answer\": \"None\",\n            \"average_time_in_labels\": {},\n            \"median_time_to_first_response\": \"None\",\n            \"median_time_to_close\": \"None\",\n            \"median_time_to_answer\": \"None\",\n            \"median_time_in_labels\": {},\n            \"90_percentile_time_to_first_response\": \"None\",\n            \"90_percentile_time_to_close\": \"None\",\n            \"90_percentile_time_to_answer\": \"None\",\n            \"90_percentile_time_in_labels\": {},\n            \"num_items_opened\": 2,\n            \"num_items_closed\": 0,\n            \"num_mentor_count\": 5,\n            \"total_item_count\": 2,\n            \"issues\": [\n                {\n                    \"title\": \"Issue 1\",\n                    \"html_url\": \"https://github.com/owner/repo/issues/1\",\n                    \"author\": \"alice\",\n                    \"time_to_first_response\": \"None\",\n                    \"time_to_close\": \"None\",\n                    \"time_to_answer\": \"None\",\n                    \"time_in_draft\": \"None\",\n                    \"label_metrics\": {},\n                },\n                {\n                    \"title\": \"Issue 2\",\n                    \"html_url\": \"https://github.com/owner/repo/issues/2\",\n                    \"author\": \"bob\",\n                    \"time_to_first_response\": \"None\",\n                    \"time_to_close\": \"None\",\n                    \"time_to_answer\": \"None\",\n                    \"time_in_draft\": \"None\",\n                    \"label_metrics\": {},\n                },\n            ],\n            \"search_query\": \"is:issue repo:owner/repo\",\n        }\n\n        # Call the function and check the output\n        self.assertEqual(\n            write_to_json(\n                issues_with_metrics=issues_with_metrics,\n                stats_time_to_first_response=stats_time_to_first_response,\n                stats_time_to_close=stats_time_to_close,\n                stats_time_to_answer=stats_time_to_answer,\n                stats_time_in_labels=stats_time_in_labels,\n                num_issues_opened=num_issues_opened,\n                num_issues_closed=num_issues_closed,\n                num_mentor_count=num_mentor_count,\n                search_query=\"is:issue repo:owner/repo\",\n                output_file=\"issue_metrics.json\",\n            ),\n            json.dumps(expected_output),\n        )\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
