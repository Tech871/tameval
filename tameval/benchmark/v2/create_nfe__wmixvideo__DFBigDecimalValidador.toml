[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "11"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "wmixvideo/nfe"
sha = "f1ad733e5af4eaf2398f56f756c1b580cf6738f7"

[run_info]
docker_image = "maven:3.8.4-openjdk-11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=DFBigDecimalValidadorTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.DFBigDecimalValidador  -DtargetTests=**.DFBigDecimalValidadorTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 93.0
original_coverage = 93.0
mutation_kill_rate = 86.0
original_mutation_kill_rate = 86.0
covered_lines = [ 15, 19, 23, 27, 31, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 76, 77, 78, 79, 83, 84, 86, 87, 89, 90,]
missed_lines = [ 12, 35,]

[input_info]
test_file_path = "src/test/java/com/fincatto/documentofiscal/validadores/DFBigDecimalValidadorTest.java"
focal_file_path = "src/main/java/com/fincatto/documentofiscal/validadores/DFBigDecimalValidador.java"
test_file_url = "https://github.com/wmixvideo/nfe/blob/f1ad733e5af4eaf2398f56f756c1b580cf6738f7/src/test/java/com/fincatto/documentofiscal/validadores/DFBigDecimalValidadorTest.java"
focal_file_url = "https://github.com/wmixvideo/nfe/blob/f1ad733e5af4eaf2398f56f756c1b580cf6738f7/src/main/java/com/fincatto/documentofiscal/validadores/DFBigDecimalValidador.java"
first_commit_date = "2020-09-07"
last_commit_date = "2025-06-23"
test_file_content = "package com.fincatto.documentofiscal.validadores;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.math.BigDecimal;\n\npublic class DFBigDecimalValidadorTest {\n    \n    @Test\n    public void tamanho11Com3CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho11Com3CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"1.000\", DFBigDecimalValidador.tamanho11Com3CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.010\", DFBigDecimalValidador.tamanho11Com3CasasDecimais(new BigDecimal(\".01\"), \"\"));\n        Assert.assertEquals(\"0.012\", DFBigDecimalValidador.tamanho11Com3CasasDecimais(new BigDecimal(\".012\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho13Com2CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho13Com2CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"1.00\", DFBigDecimalValidador.tamanho13Com2CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.01\", DFBigDecimalValidador.tamanho13Com2CasasDecimais(new BigDecimal(\".01\"), \"\"));\n        Assert.assertEquals(\"0.10\", DFBigDecimalValidador.tamanho13Com2CasasDecimais(new BigDecimal(\".1\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho15Com2CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho15Com2CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"0.01\", DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\".01\"), \"\"));\n        Assert.assertEquals(\"5.00\", DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\"5\"), \"\"));\n        Assert.assertEquals(\"100.00\", DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\"100\"), \"\"));\n        Assert.assertEquals(\"0.90\", DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\".9\"), \"\"));\n        Assert.assertEquals(\"182.64\", DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\"182.64\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho15Com3CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho15Com3CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"0.001\", DFBigDecimalValidador.tamanho15Com3CasasDecimais(new BigDecimal(\".001\"), \"\"));\n        Assert.assertEquals(\"5.000\", DFBigDecimalValidador.tamanho15Com3CasasDecimais(new BigDecimal(\"5\"), \"\"));\n        Assert.assertEquals(\"100.000\", DFBigDecimalValidador.tamanho15Com3CasasDecimais(new BigDecimal(\"100\"), \"\"));\n        Assert.assertEquals(\"0.900\", DFBigDecimalValidador.tamanho15Com3CasasDecimais(new BigDecimal(\".9\"), \"\"));\n        Assert.assertEquals(\"182.640\", DFBigDecimalValidador.tamanho15Com3CasasDecimais(new BigDecimal(\"182.64\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho15Com4CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho15Com4CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"9999999999.9999\", DFBigDecimalValidador.tamanho15Com4CasasDecimais(new BigDecimal(\"9999999999.9999\"), \"\"));\n        Assert.assertEquals(\"0.1000\", DFBigDecimalValidador.tamanho15Com4CasasDecimais(new BigDecimal(\"0.1\"), \"\"));\n        Assert.assertEquals(\"0.0001\", DFBigDecimalValidador.tamanho15Com4CasasDecimais(new BigDecimal(\"0.0001\"), \"\"));\n        Assert.assertEquals(\"1.0000\", DFBigDecimalValidador.tamanho15Com4CasasDecimais(new BigDecimal(\"1\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho21ComAte10CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho21ComAte10CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"9999999999.9999999999\", DFBigDecimalValidador.tamanho21ComAte10CasasDecimais(new BigDecimal(\"9999999999.9999999999\"), \"\"));\n        Assert.assertEquals(\"1\", DFBigDecimalValidador.tamanho21ComAte10CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.1\", DFBigDecimalValidador.tamanho21ComAte10CasasDecimais(new BigDecimal(\"0.1\"), \"\"));\n        Assert.assertEquals(\"0.156\", DFBigDecimalValidador.tamanho21ComAte10CasasDecimais(new BigDecimal(\"0.156\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho16ComAte4CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho16ComAte4CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"99999999999.9999\", DFBigDecimalValidador.tamanho16ComAte4CasasDecimais(new BigDecimal(\"99999999999.9999\"), \"\"));\n        Assert.assertEquals(\"0.0001\", DFBigDecimalValidador.tamanho16ComAte4CasasDecimais(new BigDecimal(\"0.0001\"), \"\"));\n        Assert.assertEquals(\"0.1\", DFBigDecimalValidador.tamanho16ComAte4CasasDecimais(new BigDecimal(\"0.1\"), \"\"));\n        Assert.assertEquals(\"1\", DFBigDecimalValidador.tamanho16ComAte4CasasDecimais(new BigDecimal(\"1\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho15ComAte6CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho15comAte6CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"999999999.999999\", DFBigDecimalValidador.tamanho15comAte6CasasDecimais(new BigDecimal(\"999999999.999999\"), \"\"));\n        Assert.assertEquals(\"0.0001\", DFBigDecimalValidador.tamanho15comAte6CasasDecimais(new BigDecimal(\"0.0001\"), \"\"));\n        Assert.assertEquals(\"0.1\", DFBigDecimalValidador.tamanho15comAte6CasasDecimais(new BigDecimal(\"0.1\"), \"\"));\n        Assert.assertEquals(\"1\", DFBigDecimalValidador.tamanho15comAte6CasasDecimais(new BigDecimal(\"1\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho5Com2CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho5Com2CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"99.99\", DFBigDecimalValidador.tamanho5Com2CasasDecimais(new BigDecimal(\"99.99\"), \"\"));\n        Assert.assertEquals(\"0.01\", DFBigDecimalValidador.tamanho5Com2CasasDecimais(new BigDecimal(\"0.01\"), \"\"));\n        Assert.assertEquals(\"0.10\", DFBigDecimalValidador.tamanho5Com2CasasDecimais(new BigDecimal(\"0.1\"), \"\"));\n        Assert.assertEquals(\"80.00\", DFBigDecimalValidador.tamanho5Com2CasasDecimais(new BigDecimal(\"80\"), \"\"));\n        Assert.assertEquals(\"80.40\", DFBigDecimalValidador.tamanho5Com2CasasDecimais(new BigDecimal(\"80.4\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho7ComAte4CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho7ComAte4CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"1.00\", DFBigDecimalValidador.tamanho7ComAte4CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.01\", DFBigDecimalValidador.tamanho7ComAte4CasasDecimais(new BigDecimal(\".01\"), \"\"));\n        Assert.assertEquals(\"0.012\", DFBigDecimalValidador.tamanho7ComAte4CasasDecimais(new BigDecimal(\".012\"), \"\"));\n        Assert.assertEquals(\"0.0123\", DFBigDecimalValidador.tamanho7ComAte4CasasDecimais(new BigDecimal(\".0123\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho15comAte4CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho15comAte4CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"9999999999.9999\", DFBigDecimalValidador.tamanho15comAte4CasasDecimais(new BigDecimal(\"9999999999.9999\"), \"\"));\n        Assert.assertEquals(\"9999999999.9\", DFBigDecimalValidador.tamanho15comAte4CasasDecimais(new BigDecimal(\"9999999999.9\"), \"\"));\n        Assert.assertEquals(\"9999999999\", DFBigDecimalValidador.tamanho15comAte4CasasDecimais(new BigDecimal(\"9999999999\"), \"\"));\n        Assert.assertEquals(\"0.0001\", DFBigDecimalValidador.tamanho15comAte4CasasDecimais(new BigDecimal(\"0.0001\"), \"\"));\n        Assert.assertEquals(\"1\", DFBigDecimalValidador.tamanho15comAte4CasasDecimais(new BigDecimal(\"1\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho16Com4CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho16Com4CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"1.0000\", DFBigDecimalValidador.tamanho16Com4CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.0100\", DFBigDecimalValidador.tamanho16Com4CasasDecimais(new BigDecimal(\".01\"), \"\"));\n        Assert.assertEquals(\"0.0120\", DFBigDecimalValidador.tamanho16Com4CasasDecimais(new BigDecimal(\".012\"), \"\"));\n        Assert.assertEquals(\"0.0123\", DFBigDecimalValidador.tamanho16Com4CasasDecimais(new BigDecimal(\".0123\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho9Com4CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho9Com4CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"1.0000\", DFBigDecimalValidador.tamanho9Com4CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.0100\", DFBigDecimalValidador.tamanho9Com4CasasDecimais(new BigDecimal(\".01\"), \"\"));\n        Assert.assertEquals(\"0.0120\", DFBigDecimalValidador.tamanho9Com4CasasDecimais(new BigDecimal(\".012\"), \"\"));\n        Assert.assertEquals(\"0.0123\", DFBigDecimalValidador.tamanho9Com4CasasDecimais(new BigDecimal(\".0123\"), \"\"));\n    }\n    \n    @Test\n    public void tamanho4Com2CasasDecimais() {\n        Assert.assertNull(DFBigDecimalValidador.tamanho4Com2CasasDecimais(null, \"\"));\n        Assert.assertEquals(\"1.00\", DFBigDecimalValidador.tamanho4Com2CasasDecimais(new BigDecimal(\"1\"), \"\"));\n        Assert.assertEquals(\"0.10\", DFBigDecimalValidador.tamanho4Com2CasasDecimais(new BigDecimal(\".1\"), \"\"));\n        Assert.assertEquals(\"0.12\", DFBigDecimalValidador.tamanho4Com2CasasDecimais(new BigDecimal(\".12\"), \"\"));\n    }\n    \n    @Test(expected = NumberFormatException.class)\n    public void naoDevePermitirExtrapolacaoDeInteiros() {\n        DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\"99999999999999.9\"), \"\");\n    }\n    \n    @Test(expected = NumberFormatException.class)\n    public void naoDevePermitirExtrapolacaoDeCasasDecimais() {\n        DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\"99999999999.999\"), \"\");\n    }\n    \n    @Test(expected = NumberFormatException.class)\n    public void naoDevePermitirExtrapolacaoPor15CaracteresCom2CasasDecimais() {\n        DFBigDecimalValidador.tamanho15Com2CasasDecimais(new BigDecimal(\"99999999999999.99\"), \"\");\n    }\n    \n    @Test(expected = NumberFormatException.class)\n    public void naoDevePermitirExtrapolacaoPor15CaracteresCom3CasasDecimais() {\n        DFBigDecimalValidador.tamanho15Com3CasasDecimais(new BigDecimal(\"9999999999999.999\"), \"\");\n    }\n    \n    @Test(expected = NumberFormatException.class)\n    public void naoDevePermitirExtrapolar21Caracteres() {\n        DFBigDecimalValidador.tamanho21ComAte10CasasDecimais(new BigDecimal(\"999999999999.9999999999\"), \"\");\n    }\n    \n    @Test(expected = NumberFormatException.class)\n    public void validaTamanhoErro() {\n        DFBigDecimalValidador.validaTamanho(new BigDecimal(\"10.00000\"), \"\", 11, 4, true);\n    }\n    \n    @Test\n    public void validaTamanho() {\n        DFBigDecimalValidador.validaTamanho(new BigDecimal(\"10.00000\"), \"\", 11, 5, true);\n        \n        DFBigDecimalValidador.validaTamanho(new BigDecimal(\"10.000\"), \"\", 11, 5, false);\n        \n        DFBigDecimalValidador.validaTamanho(new BigDecimal(\"99999.99999\"), \"\", 11, 5, false);\n    }\n}\n"
