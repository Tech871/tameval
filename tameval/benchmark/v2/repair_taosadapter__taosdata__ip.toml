[meta]
task = "repair"
scenario = "repair_syntax_error"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "taosdata/taosadapter"
sha = "2e4a8bb5b4d61bb7a6f5b5a722fc038f8c8d1270"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out tools/iptool/ip.go tools/iptool/ip_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting tools/iptool/ip.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 67.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "tools/iptool/ip_test.go"
focal_file_path = "tools/iptool/ip.go"
test_file_url = "https://github.com/taosdata/taosadapter/blob/2e4a8bb5b4d61bb7a6f5b5a722fc038f8c8d1270/tools/iptool/ip_test.go"
focal_file_url = "https://github.com/taosdata/taosadapter/blob/2e4a8bb5b4d61bb7a6f5b5a722fc038f8c8d1270/tools/iptool/ip.go"
first_commit_date = "2024-04-08"
last_commit_date = "2025-07-04"
test_file_content = "package iptool\n\nimport (\n\t\"net\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestGetRealIPWithXRealIPHeader(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"http:\n\treq.Header.Set(\"X-Real-Ip\", \"192.168.1.1\")\n\n\tip := GetRealIP(req)\n\n\tassert.Equal(t, \"192.168.1.1\", ip.String())\n}\n\nfunc TestGetRealIPWithRemoteAddr(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"http:\n\treq.RemoteAddr = \"192.168.1.2:1234\"\n\n\tip := GetRealIP(req)\n\n\tassert.Equal(t, \"192.168.1.2\", ip.String())\n}\n\nfunc TestGetRealIPWithNoIP(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"http:\n\n\tip := GetRealIP(req)\n\thost, _,  := net.SplitHostPort(req.RemoteAddr)\n\tassert.Equal(t, host, ip.String())\n}\n\nfunc TestParseIpv6(t *testing.T) {\n\treq := httptest.NewRequest(\"GET\", \"http:\n\n\treq.RemoteAddr = \"[fe80::4720:bdc2:e3a7:b2bc]:6041\"\n\tip := GetRealIP(req)\n\tassert.Equal(t, \"fe80::4720:bdc2:e3a7:b2bc\", ip.String())\n\treq.RemoteAddr = \"[fe80::4720:bdc2:e3a7:b2bd%15]:6041\"\n\tip = GetRealIP(req)\n\tassert.Equal(t, \"fe80::4720:bdc2:e3a7:b2bd\", ip.String())\n\treq.RemoteAddr = \"[fe80::4720:bdc2:e3a7:gggg]:6041\"\n\tip = GetRealIP(req)\n\tassert.Nil(t, ip)\n}"
