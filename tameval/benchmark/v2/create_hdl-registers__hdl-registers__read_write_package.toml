[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "hdl-registers/hdl-registers"
sha = "4761587ceabb90436e8d71f191aec976d35e9b14"
bench_version = 1

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=hdl_registers/generator/vhdl/simulation/read_write_package.py -m pytest -q --junit-xml=test_output.xml hdl_registers/generator/vhdl/simulation/test/test_read_write_package.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target hdl_registers.generator.vhdl.simulation.read_write_package --unit-test hdl_registers.generator.vhdl.simulation.test.test_read_write_package --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target hdl_registers/generator/vhdl/simulation/read_write_package.py --unit-test hdl_registers/generator/vhdl/simulation/test/test_read_write_package.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 11, 13, 14, 16, 18, 26, 59, 61, 63, 64, 68, 70, 80, 82, 89, 91, 126, 130, 131, 133, 134, 137, 139, 141, 147, 150, 156, 158, 160, 166, 168, 170, 173, 180, 182, 184, 191, 193, 195, 201, 203, 205, 211, 221, 227, 229, 231, 234, 241, 243, 245, 252, 254, 255, 256, 257, 259, 261, 271, 272, 274, 277, 282, 290, 301, 312, 314, 317, 322, 324, 325, 326, 327, 337, 339, 351, 352, 357, 361, 365, 366, 368, 369, 372, 374, 376, 386, 395, 397, 406, 408, 411, 421, 423, 433, 435, 444, 446, 458, 467, 469, 472, 481, 483, 492, 493, 494, 495, 497, 499, 509, 516, 532, 542, 549, 564, 575, 583, 587, 602, 612, 619, 623, 624, 636, 637, 640, 642, 645, 646, 649, 653, 655,]
missed_lines = [ 19, 21, 22, 23, 332, 634, 651,]

[input_info]
test_file_path = "hdl_registers/generator/vhdl/simulation/test/test_read_write_package.py"
focal_file_path = "hdl_registers/generator/vhdl/simulation/read_write_package.py"
test_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/generator/vhdl/simulation/test/test_read_write_package.py"
focal_file_url = "https://github.com/hdl-registers/hdl-registers/blob/4761587ceabb90436e8d71f191aec976d35e9b14/hdl_registers/generator/vhdl/simulation/read_write_package.py"
first_commit_date = "2023-12-06"
last_commit_date = "2025-02-12"
test_file_content = "# --------------------------------------------------------------------------------------------------\n# Copyright (c) Lukas Vik. All rights reserved.\n#\n# This file is part of the hdl-registers project, an HDL register generator fast enough to run\n# in real time.\n# https://hdl-registers.com\n# https://github.com/hdl-registers/hdl-registers\n# --------------------------------------------------------------------------------------------------\n\n\"\"\"\nSome limited unit tests.\nNote that the generated VHDL code is also simulated in a functional test.\n\"\"\"\n\nfrom tsfpga.system_utils import read_file\n\nfrom hdl_registers.field.numerical_interpretation import (\n    Signed,\n    SignedFixedPoint,\n    Unsigned,\n    UnsignedFixedPoint,\n)\nfrom hdl_registers.generator.vhdl.simulation.read_write_package import (\n    VhdlSimulationReadWritePackageGenerator,\n)\nfrom hdl_registers.register_list import RegisterList\nfrom hdl_registers.register_modes import REGISTER_MODES\n\n\ndef test_package_is_not_generated_without_registers(tmp_path):\n    register_list = RegisterList(name=\"test\", source_definition_file=None)\n\n    assert not VhdlSimulationReadWritePackageGenerator(register_list, tmp_path).create().exists()\n\n    register_list.add_constant(name=\"apa\", value=True, description=\"\")\n    assert not VhdlSimulationReadWritePackageGenerator(register_list, tmp_path).create().exists()\n\n    register_list.append_register(name=\"hest\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n    assert VhdlSimulationReadWritePackageGenerator(register_list, tmp_path).create().exists()\n\n\ndef test_re_generating_package_without_registers_should_delete_old_file(tmp_path):\n    register_list = RegisterList(name=\"test\", source_definition_file=None)\n    register_list.append_register(name=\"apa\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n\n    assert VhdlSimulationReadWritePackageGenerator(register_list, tmp_path).create().exists()\n\n    register_list.register_objects = []\n    assert not VhdlSimulationReadWritePackageGenerator(register_list, tmp_path).create().exists()\n\n\ndef test_read_write_as_integer(tmp_path):\n    register_list = RegisterList(name=\"caesar\", source_definition_file=None)\n\n    register_list.append_register(name=\"empty\", mode=REGISTER_MODES[\"r_w\"], description=\"\")\n\n    register = register_list.append_register(\n        name=\"full\", mode=REGISTER_MODES[\"r_w\"], description=\"\"\n    )\n    register.append_bit(name=\"my_bit\", description=\"\", default_value=\"0\")\n    register.append_enumeration(\n        name=\"my_enumeration\",\n        description=\"\",\n        elements={\"first\": \"\", \"second\": \"\"},\n        default_value=\"first\",\n    )\n    register.append_integer(\n        name=\"my_integer\", description=\"\", min_value=0, max_value=127, default_value=0\n    )\n    register.append_bit_vector(\n        name=\"my_signed_bit_vector\",\n        description=\"\",\n        width=4,\n        default_value=\"0000\",\n        numerical_interpretation=Signed(bit_width=4),\n    )\n    register.append_bit_vector(\n        name=\"my_sfixed_bit_vector\",\n        description=\"\",\n        width=4,\n        default_value=\"0000\",\n        numerical_interpretation=SignedFixedPoint(1, -2),\n    )\n    register.append_bit_vector(\n        name=\"my_unsigned_bit_vector\",\n        description=\"\",\n        width=4,\n        default_value=\"0000\",\n        numerical_interpretation=Unsigned(bit_width=4),\n    )\n    register.append_bit_vector(\n        name=\"my_ufixed_bit_vector\",\n        description=\"\",\n        width=4,\n        default_value=\"0000\",\n        numerical_interpretation=UnsignedFixedPoint(1, -2),\n    )\n\n    vhdl = read_file(VhdlSimulationReadWritePackageGenerator(register_list, tmp_path).create())\n\n    def check_access_as_named_type(direction: str, type_name: str, name: str) -> None:\n        assert direction in [\"read\", \"write\"]\n        in_or_out = \"in\" if direction == \"write\" else \"out\"\n        expected = f\"\"\"\n  procedure {direction}_caesar_{name}(\n    signal net : inout network_t;\n    value : {in_or_out} {type_name};\n\"\"\"\n        return expected in vhdl\n\n    def check_access_as_integer(direction: str, name: str) -> None:\n        return check_access_as_named_type(direction=direction, type_name=\"integer\", name=name)\n\n    def check_access_as_slv(direction: str, name: str) -> None:\n        return check_access_as_named_type(direction=direction, type_name=\"register_t\", name=name)\n\n    def check_access_as_native(direction: str, name: str) -> None:\n        return check_access_as_named_type(\n            direction=direction, type_name=f\"caesar_{name}_t\", name=name\n        )\n\n    for direction in [\"read\", \"write\"]:\n        assert check_access_as_integer(direction=direction, name=\"empty\")\n        assert check_access_as_slv(direction=direction, name=\"empty\")\n        # Empty register does not have a native record type.\n        assert not check_access_as_native(direction=direction, name=\"empty\")\n\n        assert check_access_as_integer(direction=direction, name=\"full\")\n        # Register with fields does not have a write as SLV function.\n        assert check_access_as_slv(direction=direction, name=\"full\") == (direction == \"read\")\n        assert check_access_as_native(direction=direction, name=\"full\")\n\n        # Only non-fractional vector types shall have the possibility of accessing as integer.\n        assert check_access_as_integer(direction=direction, name=\"full_my_signed_bit_vector\")\n        assert check_access_as_native(direction=direction, name=\"full_my_signed_bit_vector\")\n        assert check_access_as_integer(direction=direction, name=\"full_my_unsigned_bit_vector\")\n        assert not check_access_as_integer(direction=direction, name=\"full_my_ufixed_bit_vector\")\n        assert not check_access_as_integer(direction=direction, name=\"full_my_sfixed_bit_vector\")\n        assert not check_access_as_integer(direction=direction, name=\"full_my_bit\")\n        assert not check_access_as_integer(direction=direction, name=\"full_my_enumeration\")\n        assert not check_access_as_integer(direction=direction, name=\"full_my_integer\")\n"
