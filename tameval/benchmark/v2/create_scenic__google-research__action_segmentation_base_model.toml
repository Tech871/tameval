[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_cfg_file = "setup.py"

[repo_info]
repository = "google-research/scenic"
sha = "096e6a52b4cbbf30936c168c5d3d42d80e001988"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install . && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=scenic/projects/unloc/action_segmentation_base_model.py -m pytest -q --junit-xml=test_output.xml scenic/projects/unloc/action_segmentation_base_model_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target scenic.projects.unloc.action_segmentation_base_model --unit-test scenic.projects.unloc.action_segmentation_base_model_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target scenic/projects/unloc/action_segmentation_base_model.py --unit-test scenic/projects/unloc/action_segmentation_base_model_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 82.0
original_coverage = 82.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 16, 17, 19, 20, 21, 22, 23, 25, 28, 40, 59, 62, 63, 64, 65, 66, 67, 70, 71, 76, 79, 96, 105, 106, 110, 125, 126, 127, 128, 129, 132, 138, 141,]
missed_lines = [ 60, 68, 69, 130, 131, 139, 148,]

[input_info]
test_file_path = "scenic/projects/unloc/action_segmentation_base_model_test.py"
focal_file_path = "scenic/projects/unloc/action_segmentation_base_model.py"
test_file_url = "https://github.com/google-research/scenic/blob/096e6a52b4cbbf30936c168c5d3d42d80e001988/scenic/projects/unloc/action_segmentation_base_model_test.py"
focal_file_url = "https://github.com/google-research/scenic/blob/096e6a52b4cbbf30936c168c5d3d42d80e001988/scenic/projects/unloc/action_segmentation_base_model.py"
first_commit_date = "2024-01-05"
last_commit_date = "2025-06-05"
test_file_content = "# Copyright 2025 The Scenic Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for action_segmentation_base_model.\"\"\"\n\nfrom absl.testing import absltest\nfrom absl.testing import parameterized\nfrom flax import jax_utils\nimport jax\nimport ml_collections\nimport numpy as np\nfrom scenic.projects.unloc import action_segmentation_base_model\n\n\nclass MockActionSegmentationModel(\n    action_segmentation_base_model.ActionSegmentationModel):\n  \"\"\"A mock action segmentation model for testing purposes.\"\"\"\n\n  def __init__(self, config: ml_collections.ConfigDict):\n    dataset_meta_data = {}\n    super().__init__(config, dataset_meta_data)\n\n  def build_flax_model(self):\n    pass\n\n  def default_flax_model_config(self):\n    pass\n\n\nclass ActionSegmentationBaseModelTest(parameterized.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    self.logits = np.array([\n        [\n            [1.2, -0.9, 0.4],  # class 0\n            [-0.4, -0.8, -0.1],  # background\n            [-1.0, -1.0, -1.0],  # background\n            [-1.0, -1.0, -1.0],  # background\n        ],\n        [\n            [-1.0, -1.0, -1.0],  # background\n            [-1.0, -1.0, -1.0],  # background\n            [1.2, 0.9, 0.4],  # class 0\n            [0.4, 0.8, 0.1],  # class 1\n        ],\n    ])  # shape is (2, 4, 3).\n    self.batch = {\n        'batch_mask':\n            np.ones((2,), dtype=np.int32),\n        'inputs': {\n            'input_mask':\n                np.array([[1, 1, 1, 1], [1, 1, 1, 0]], dtype=np.int32),\n        },\n        'label':\n            np.array(\n                [\n                    [\n                        [1, 0, 0],  # class 0\n                        [0, 0, 0],  # background\n                        [0, 0, 0],  # background\n                        [0, 0, 0],  # background\n                    ],\n                    [\n                        [0, 1, 0],  # class 1\n                        [0, 0, 0],  # background\n                        [0, 1, 0],  # class 1\n                        [0, 1, 0],  # class 1\n                    ],\n                ],\n                dtype=np.int32),  # shape is (2, 4, 3).\n    }\n\n  def test_action_segmentation_model_multi_class_loss_function(self):\n    config = ml_collections.ConfigDict()\n    model = MockActionSegmentationModel(config)\n    loss = model.loss_function(self.logits, self.batch)\n    self.assertGreater(loss, 0.0)\n\n  def test_action_segmentation_model_get_metrics_fn(self):\n    config = ml_collections.ConfigDict()\n    model = MockActionSegmentationModel(config)\n    metrics_fn = jax.pmap(model.get_metrics_fn(), axis_name='batch')\n    logits, batch = jax_utils.replicate((self.logits, self.batch))\n    metrics = metrics_fn(logits, batch)\n    self.assertSetEqual(\n        set(metrics.keys()), {'frame_accuracy', 'sigmoid_classification_loss'})\n    metrics = jax_utils.unreplicate(metrics)\n    self.assertAlmostEqual(metrics['frame_accuracy'][0], 5)\n    self.assertAlmostEqual(metrics['frame_accuracy'][1], 7)\n    self.assertGreaterEqual(metrics['sigmoid_classification_loss'][0], 0)\n    self.assertAlmostEqual(metrics['sigmoid_classification_loss'][1], 7)\n\n  def test_action_segmentation_model_one_class_loss_function(self):\n    logits = np.array([\n        [\n            [1.2,\n             -0.8,\n             -1.0,\n             -1.0\n             ],\n        ],\n        [\n            [-1.0,\n             -1.0,\n             1.2,\n             0.8\n             ],\n        ],\n    ])  # shape is (2, 4).\n    batch = {\n        'batch_mask':\n            np.ones((2,), dtype=np.int32),\n        'inputs': {\n            'input_mask':\n                np.array([[1, 1, 1, 1], [1, 1, 1, 0]], dtype=np.int32),\n        },\n        'label':\n            np.array(\n                [\n                    [\n                        [1],  # class 0\n                        [0],  # background\n                        [0],  # background\n                        [0],  # background\n                    ],\n                    [\n                        [0],  # background\n                        [0],  # background\n                        [1],  # class 0\n                        [0],  # background\n                    ],\n                ],\n                dtype=np.int32),  # shape is (2, 4, 1).\n    }\n    config = ml_collections.ConfigDict()\n    model = MockActionSegmentationModel(config)\n    loss = model.loss_function(logits, batch)\n    self.assertGreater(loss, 0.0)\n\n\nif __name__ == '__main__':\n  absltest.main()\n"
