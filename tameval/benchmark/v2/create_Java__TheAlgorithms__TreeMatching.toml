[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "TheAlgorithms/Java"
sha = "45148874e841c3b0db0a5a0d46e2871f30b0d3e0"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=TreeMatchingTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.TreeMatching  -DtargetTests=**.TreeMatchingTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 26, 27, 28, 29, 40, 43, 44, 55, 56, 58, 59, 60, 61, 63, 64, 65, 67, 69, 70, 71, 73, 74, 75, 76,]
missed_lines = [ 41,]

[input_info]
test_file_path = "src/test/java/com/thealgorithms/dynamicprogramming/TreeMatchingTest.java"
focal_file_path = "src/main/java/com/thealgorithms/dynamicprogramming/TreeMatching.java"
test_file_url = "https://github.com/TheAlgorithms/Java/blob/45148874e841c3b0db0a5a0d46e2871f30b0d3e0/src/test/java/com/thealgorithms/dynamicprogramming/TreeMatchingTest.java"
focal_file_url = "https://github.com/TheAlgorithms/Java/blob/45148874e841c3b0db0a5a0d46e2871f30b0d3e0/src/main/java/com/thealgorithms/dynamicprogramming/TreeMatching.java"
first_commit_date = "2025-03-01"
last_commit_date = "2025-03-01"
test_file_content = "package com.thealgorithms.dynamicprogramming;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport com.thealgorithms.datastructures.graphs.UndirectedAdjacencyListGraph;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nclass TreeMatchingTest {\n    UndirectedAdjacencyListGraph graph;\n\n    @BeforeEach\n    void setUp() {\n        graph = new UndirectedAdjacencyListGraph();\n        for (int i = 0; i < 14; i++) {\n            graph.addNode();\n        }\n    }\n\n    @Test\n    void testMaxMatchingForGeneralTree() {\n        graph.addEdge(0, 1, 20);\n        graph.addEdge(0, 2, 30);\n        graph.addEdge(1, 3, 40);\n        graph.addEdge(1, 4, 10);\n        graph.addEdge(2, 5, 20);\n        graph.addEdge(3, 6, 30);\n        graph.addEdge(3, 7, 30);\n        graph.addEdge(5, 8, 40);\n        graph.addEdge(5, 9, 10);\n\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(110, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void testMaxMatchingForBalancedTree() {\n        graph.addEdge(0, 1, 20);\n        graph.addEdge(0, 2, 30);\n        graph.addEdge(0, 3, 40);\n        graph.addEdge(1, 4, 10);\n        graph.addEdge(1, 5, 20);\n        graph.addEdge(2, 6, 20);\n        graph.addEdge(3, 7, 30);\n        graph.addEdge(5, 8, 10);\n        graph.addEdge(5, 9, 20);\n        graph.addEdge(7, 10, 10);\n        graph.addEdge(7, 11, 10);\n        graph.addEdge(7, 12, 5);\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(100, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void testMaxMatchingForTreeWithVariedEdgeWeights() {\n        graph.addEdge(0, 1, 20);\n        graph.addEdge(0, 2, 30);\n        graph.addEdge(0, 3, 40);\n        graph.addEdge(0, 4, 50);\n        graph.addEdge(1, 5, 20);\n        graph.addEdge(2, 6, 20);\n        graph.addEdge(3, 7, 30);\n        graph.addEdge(5, 8, 10);\n        graph.addEdge(5, 9, 20);\n        graph.addEdge(7, 10, 10);\n        graph.addEdge(4, 11, 50);\n        graph.addEdge(4, 12, 20);\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(140, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void emptyTree() {\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(0, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void testSingleNodeTree() {\n        UndirectedAdjacencyListGraph singleNodeGraph = new UndirectedAdjacencyListGraph();\n        singleNodeGraph.addNode();\n\n        TreeMatching treeMatching = new TreeMatching(singleNodeGraph);\n        assertEquals(0, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void testLinearTree() {\n        graph.addEdge(0, 1, 10);\n        graph.addEdge(1, 2, 20);\n        graph.addEdge(2, 3, 30);\n        graph.addEdge(3, 4, 40);\n\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(60, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void testStarShapedTree() {\n        graph.addEdge(0, 1, 15);\n        graph.addEdge(0, 2, 25);\n        graph.addEdge(0, 3, 35);\n        graph.addEdge(0, 4, 45);\n\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(45, treeMatching.getMaxMatching(0, -1));\n    }\n\n    @Test\n    void testUnbalancedTree() {\n        graph.addEdge(0, 1, 10);\n        graph.addEdge(0, 2, 20);\n        graph.addEdge(1, 3, 30);\n        graph.addEdge(2, 4, 40);\n        graph.addEdge(4, 5, 50);\n\n        TreeMatching treeMatching = new TreeMatching(graph);\n        assertEquals(100, treeMatching.getMaxMatching(0, -1));\n    }\n}\n"
