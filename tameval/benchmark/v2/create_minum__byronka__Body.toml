[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "21"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "byronka/minum"
sha = "42416409b5fd3535c882b2a994cd9eb0be82260a"

[run_info]
docker_image = "maven:3-amazoncorretto-21"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=BodyTests && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Body  -DtargetTests=**.BodyTests  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 72.0
original_coverage = 72.0
mutation_kill_rate = 45.0
original_mutation_kill_rate = 45.0
covered_lines = [ 31, 41, 50, 51, 52, 53, 54, 55, 76, 77, 79, 80, 82, 83, 85, 86, 87, 111, 112, 114, 115, 117, 118, 128, 129, 151, 152, 154, 155, 157, 158, 171, 172, 174, 175, 177, 178, 205, 206, 213, 215,]
missed_lines = [ 89, 100, 101, 103, 120, 131, 160, 180, 198, 208, 214, 216, 221, 222, 223, 228,]

[input_info]
test_file_path = "src/test/java/com/renomad/minum/web/BodyTests.java"
focal_file_path = "src/main/java/com/renomad/minum/web/Body.java"
test_file_url = "https://github.com/byronka/minum/blob/42416409b5fd3535c882b2a994cd9eb0be82260a/src/test/java/com/renomad/minum/web/BodyTests.java"
focal_file_url = "https://github.com/byronka/minum/blob/42416409b5fd3535c882b2a994cd9eb0be82260a/src/main/java/com/renomad/minum/web/Body.java"
first_commit_date = "2023-08-29"
last_commit_date = "2024-09-07"
test_file_content = "package com.renomad.minum.web;\n\nimport org.junit.Test;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.renomad.minum.testing.TestFramework.assertEquals;\nimport static com.renomad.minum.testing.TestFramework.assertThrows;\n\npublic class BodyTests {\n\n    @Test\n    public void testGettingValue_EdgeCase_WhenNotFound() {\n        Body empty = Body.EMPTY;\n        assertEquals(\"\", empty.asString(\"foo\"));\n    }\n\n    @Test\n    public void testGettingValue_EdgeCase_MissingKey() {\n        // a, b, c, easy as 1, 2, 3, do re mi ...\n        Map<String, byte[]> bodyMap = Map.of(\"abc\", new byte[]{1, 2, 3});\n        Body body = new Body(bodyMap, new byte[0], List.of(), BodyType.FORM_URL_ENCODED);\n        assertEquals(\"\", body.asString(\"foo\"));\n    }\n\n    /**\n     * If the body is of type BodyType.MULTIPART, then asString\n     * won't do much useful.  Throw an exception in that case.\n     */\n    @Test\n    public void testAsString_EdgeCase_BodyIsMultipart() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.MULTIPART);\n        var ex = assertThrows(WebServerException.class, () -> body.asString(\"foo\"));\n        assertEquals(ex.getMessage(), \"Request body is in multipart format.  Use .getPartitionByName instead\");\n    }\n\n    /**\n     * If the body is of type BodyType.UNRECOGNIZED, then asString\n     * won't do much useful.  Throw an exception in that case.\n     */\n    @Test\n    public void testAsString_EdgeCase_BodyIsUnrecognized() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.UNRECOGNIZED);\n        var ex = assertThrows(WebServerException.class, () -> body.asString(\"foo\"));\n        assertEquals(ex.getMessage(), \"Request body is not in a recognized key-value encoding.  Use .asString() to obtain the body data\");\n    }\n\n    @Test\n    public void testAsBytes_EdgeCase_Empty() {\n        Body empty = Body.EMPTY;\n        assertEquals(0, empty.asBytes(\"foo\").length);\n    }\n\n    /**\n     * If we ask for bytes and there's no body, just return an empty array\n     */\n    @Test\n    public void testAsBytes_EdgeCase_Empty_2() {\n        Body empty = Body.EMPTY;\n        assertEquals(0, empty.asBytes().length);\n    }\n\n    /**\n     * If the body is of type BodyType.MULTIPART, then asBytes\n     * won't do much useful.  Throw an exception in that case.\n     */\n    @Test\n    public void testAsBytes_EdgeCase_BodyIsMultipart() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.MULTIPART);\n        var ex = assertThrows(WebServerException.class, () -> body.asBytes(\"foo\"));\n        assertEquals(ex.getMessage(), \"Request body is in multipart format.  Use .getPartitionByName instead\");\n    }\n\n    /**\n     * If the body is of type BodyType.UNRECOGNIZED, then asBytes\n     * won't do much useful.  Throw an exception in that case.\n     */\n    @Test\n    public void testAsBytes_EdgeCase_BodyIsUnrecognized() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.UNRECOGNIZED);\n        var ex = assertThrows(WebServerException.class, () -> body.asBytes(\"foo\"));\n        assertEquals(ex.getMessage(), \"Request body is not in a recognized key-value encoding.  Use .asBytes() to obtain the body data\");\n    }\n\n    @Test\n    public void testGetPartitionHeaders_EdgeCase_Empty() {\n        Body empty = Body.EMPTY;\n        assertEquals(0, empty.getPartitionHeaders().size());\n    }\n\n    @Test\n    public void testGetPartitionHeaders_EdgeCase_BodyIsUnrecognized() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.UNRECOGNIZED);\n        var ex = assertThrows(WebServerException.class, body::getPartitionHeaders);\n        assertEquals(ex.getMessage(), \"Request body encoded is not encoded in a recognized format. getPartitionHeaders is only used with multipart encoded data.\");\n    }\n\n    @Test\n    public void testGetPartitionHeaders_EdgeCase_BodyIsUrlEncoded() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.FORM_URL_ENCODED);\n        var ex = assertThrows(WebServerException.class, body::getPartitionHeaders);\n        assertEquals(ex.getMessage(), \"Request body encoded in form-urlencoded format. getPartitionHeaders is only used with multipart encoded data.\");\n    }\n\n    @Test\n    public void testGetPartitionByName_EdgeCase_Empty() {\n        Body empty = Body.EMPTY;\n        assertEquals(0, empty.getPartitionByName(\"foo\").size());\n    }\n\n\n    @Test\n    public void testGetPartitionByName_EdgeCase_UrlEncoded() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.FORM_URL_ENCODED);\n        var ex = assertThrows(WebServerException.class, () -> body.getPartitionByName(\"foo\"));\n        assertEquals(ex.getMessage(), \"Request body encoded in form-urlencoded format. use .asString(key) or asBytes(key)\");\n    }\n\n    @Test\n    public void testGetPartitionByName_EdgeCase_Unrecognized() {\n        Body body = new Body(Map.of(), new byte[0], List.of(), BodyType.UNRECOGNIZED);\n        var ex = assertThrows(WebServerException.class, () -> body.getPartitionByName(\"foo\"));\n        assertEquals(ex.getMessage(), \"Request body encoded is not encoded in a recognized format. use .asString() or asBytes()\");\n    }\n\n    @Test\n    public void testGetKeys_EdgeCase_Empty() {\n        Body empty = Body.EMPTY;\n        assertEquals(0, empty.getKeys().size());\n    }\n\n}\n"
