[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Go"
go_version = "1.24.5"

[repo_info]
repository = "creativeprojects/resticprofile"
sha = "f74803217ccdcda44570871757d168817c0a95f6"

[run_info]
docker_image = "golang:1.24.5"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out schedule/schedules.go schedule/schedules_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting schedule/schedules.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = 0
original_mutation_kill_rate = 55.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "schedule/schedules_test.go"
focal_file_path = "schedule/schedules.go"
test_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/schedule/schedules_test.go"
focal_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/schedule/schedules.go"
first_commit_date = "2021-10-02"
last_commit_date = "2025-03-28"
test_file_content = "package schedule\n\nimport (\n\t\"bytes\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/creativeprojects/resticprofile/term\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestParseEmptySchedules(t *testing.T) {\n\t_, err := parseSchedules([]string{})\n\trequire.NoError(t, err)\n}\n\nfunc TestParseSchedulesWithEmpty(t *testing.T) {\n\t_, err := parseSchedules([]string{\"\"})\n\trequire.Error(t, err)\n}\n\nfunc TestParseSchedulesWithError(t *testing.T) {\n\t_, err := parseSchedules([]string{\"parse error\"})\n\trequire.Error(t, err)\n}\n\nfunc TestParseScheduleDaily(t *testing.T) {\n\tevents, err := parseSchedules([]string{\"daily\"})\n\trequire.NoError(t, err)\n}\n\nfunc TestDisplayParseSchedules(t *testing.T) {\n\tevents, err := parseSchedules([]string{\"daily\"})\n\trequire.NoError(t, err)\n\n\tbuffer := &bytes.Buffer{}\n\tterm.SetOutput(buffer)\n\tdefer term.SetOutput(os.Stdout)\n\n\tdisplayParsedSchedules(\"profile\", \"command\", events)\n\toutput := buffer.String()\n}\n\nfunc TestDisplayParseSchedulesWillNeverRun(t *testing.T) {\n\tevents, err := parseSchedules([]string{\"2020-01-01\"})\n\trequire.NoError(t, err)\n\n\tbuffer := &bytes.Buffer{}\n\tterm.SetOutput(buffer)\n\tdefer term.SetOutput(os.Stdout)\n\n\tdisplayParsedSchedules(\"profile\", \"command\", events)\n\toutput := buffer.String()\n}\n\nfunc TestDisplayParseSchedulesIndexAndTotal(t *testing.T) {\n\tevents, err := parseSchedules([]string{\"daily\", \"monthly\", \"yearly\"})\n\trequire.NoError(t, err)\n\n\tbuffer := &bytes.Buffer{}\n\tterm.SetOutput(buffer)\n\tdefer term.SetOutput(os.Stdout)\n\n\tdisplayParsedSchedules(\"profile\", \"command\", events)\n\toutput := buffer.String()\n}"
