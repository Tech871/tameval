[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "microsphere-projects/microsphere-java"
sha = "b4576dbd7bad0fe918d235617d466ccd5434cc66"
bench_version = 1

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl microsphere-java-core -Dtest=StackTraceUtilsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl microsphere-java-core -DtargetClasses=**.StackTraceUtils  -DtargetTests=**.StackTraceUtilsTest  -DoutputFormats=XML"
coverage_report_path = "microsphere-java-core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "microsphere-java-core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 98.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "microsphere-java-core/src/test/java/io/microsphere/util/StackTraceUtilsTest.java"
focal_file_path = "microsphere-java-core/src/main/java/io/microsphere/util/StackTraceUtils.java"
test_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/test/java/io/microsphere/util/StackTraceUtilsTest.java"
focal_file_url = "https://github.com/microsphere-projects/microsphere-java/blob/b4576dbd7bad0fe918d235617d466ccd5434cc66/microsphere-java-core/src/main/java/io/microsphere/util/StackTraceUtils.java"
first_commit_date = "2025-03-05"
last_commit_date = "2025-03-20"
test_file_content = "package io.microsphere.util;\n\nimport org.junit.jupiter.api.Test;\n\nimport static io.microsphere.util.StackTraceUtils.getCallerClassName;\nimport static io.microsphere.util.StackTraceUtils.getCallerClassNameInGeneralJVM;\nimport static io.microsphere.util.StackTraceUtils.getCallerClassNames;\nimport static io.microsphere.util.Version.Operator.LT;\nimport static io.microsphere.util.VersionUtils.JAVA_VERSION_9;\nimport static io.microsphere.util.VersionUtils.testCurrentJavaVersion;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * {@link StackTraceUtils} Test\n *\n * @author <a href=\"mailto:mercyblitz@gmail.com\">Mercy<a/>\n * @see StackTraceUtils\n * @since 1.0.0\n */\npublic class StackTraceUtilsTest {\n\n    private static final String CALLER_CLASS_NAME = StackTraceUtilsTest.class.getName();\n\n    @Test\n    public void testGetCallerClassName() {\n        assertEquals(CALLER_CLASS_NAME, getCallerClassName());\n    }\n\n    @Test\n    public void testGetCallerClassNameOnStackWalkerSupportedForTesting() {\n        StackTraceUtils.stackWalkerSupportedForTesting = false;\n        assertEquals(getCallerClassNameInGeneralJVM(), getCallerClassName());\n        assertEquals(CALLER_CLASS_NAME, getCallerClassName());\n        StackTraceUtils.stackWalkerSupportedForTesting = true;\n    }\n\n    @Test\n    public void testGetCallerClassNames() {\n        if (testCurrentJavaVersion(JAVA_VERSION_9, LT)) {\n            assertThrows(NullPointerException.class, () -> getCallerClassNames());\n        } else {\n            assertTrue(getCallerClassNames().contains(CALLER_CLASS_NAME));\n        }\n    }\n\n    @Test\n    public void testGetCallerClassNameInGeneralJVM() {\n        String callerClassName = getCallerClassNameInGeneralJVM();\n        assertEquals(CALLER_CLASS_NAME, callerClassName);\n    }\n\n    @Test\n    public void testGetCallerClassNameInGeneralJVMOnOverStack() {\n        assertNull(getCallerClassNameInGeneralJVM(Integer.MAX_VALUE));\n    }\n\n}"
