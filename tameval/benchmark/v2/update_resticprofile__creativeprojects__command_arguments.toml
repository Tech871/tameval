[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.5"

[repo_info]
repository = "creativeprojects/resticprofile"
sha = "f74803217ccdcda44570871757d168817c0a95f6"

[run_info]
docker_image = "golang:1.24.5"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out schedule/command_arguments.go schedule/command_arguments_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting schedule/command_arguments.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 59.0
original_coverage = 88.0
mutation_kill_rate = 49.0
original_mutation_kill_rate = 71.0
covered_lines = [ 11, 12, 13, 14, 15, 29, 30, 31, 32, 33, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 78, 79, 80, 81, 82, 83, 84, 85,]
missed_lines = [ 18, 19, 20, 21, 22, 24, 26, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75,]

[input_info]
test_file_path = "schedule/command_arguments_test.go"
focal_file_path = "schedule/command_arguments.go"
test_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/schedule/command_arguments_test.go"
focal_file_url = "https://github.com/creativeprojects/resticprofile/blob/f74803217ccdcda44570871757d168817c0a95f6/schedule/command_arguments.go"
first_commit_date = "2024-10-23"
last_commit_date = "2025-02-14"
test_file_content = "package schedule\n\nimport (\n\t\"testing\"\n)\n\nfunc TestRawArgs(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\targs []string\n\t}{\n\t\t{\"empty args\", []string{}},\n\t\t{\"simple args\", []string{\"arg1\", \"arg2\"}},\n\t\t{\"args with spaces\", []string{\"C:\\\\Program Files\\\\app.exe\", \"--config\", \"C:\\\\My Documents\\\\config.toml\"}},\n\t\t{\"args with special chars\", []string{\"--name\", \"my-task!\", \"--config=test.conf\"}},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tca := NewCommandArguments(tt.args)\n\t\t\trawArgs := ca.RawArgs()\n\t\t\tif len(rawArgs) != len(tt.args) {\n\t\t\t\tt.Errorf(\"expected %d raw arguments, got %d\", len(tt.args), len(rawArgs))\n\t\t\t}\n\t\t\tfor i, arg := range tt.args {\n\t\t\t\tif rawArgs[i] != arg {\n\t\t\t\t\tt.Errorf(\"expected raw argument %d to be %s, got %s\", i, arg, rawArgs[i])\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestString(t *testing.T) {\n\ttests := []struct {\n\t\targs     []string\n\t\texpected string\n\t}{\n\t\t{[]string{}, \"\"},\n\t\t{[]string{\"arg1\"}, \"arg1\"},\n\t\t{[]string{\"arg1 with space\"}, `\"arg1 with space\"`},\n\t\t{[]string{\"arg1\", \"arg2\"}, \"arg1 arg2\"},\n\t\t{[]string{\"arg1\", \"arg with spaces\"}, `arg1 \"arg with spaces\"`},\n\t\t{[]string{\"arg1\", \"arg with spaces\", \"anotherArg\"}, `arg1 \"arg with spaces\" anotherArg`},\n\t\t{[]string{\"--config\", \"C:\\\\Program Files\\\\config.toml\"}, `--config \"C:\\Program Files\\config.toml\"`},\n\t\t{[]string{\"--config\", \"C:\\\\Users\\\\John Doe\\\\Documents\\\\config.toml\", \"--name\", \"backup task\"},\n\t\t\t`--config \"C:\\Users\\John Doe\\Documents\\config.toml\" --name \"backup task\"`},\n\t\t{[]string{\"--config\", \"C:\\\\My Files\\\\config.toml\", \"--no-ansi\"},\n\t\t\t`--config \"C:\\My Files\\config.toml\" --no-ansi`},\n\t}\n\n\tfor _, test := range tests {\n\t\tca := NewCommandArguments(test.args)\n\t\tresult := ca.String()\n\t\tif result != test.expected {\n\t\t\tt.Errorf(\"expected %s, got %s\", test.expected, result)\n\t\t}\n\t}\n}"
