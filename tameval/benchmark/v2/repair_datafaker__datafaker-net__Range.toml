[meta]
task = "repair"
scenario = "repair_missed_asserts"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "datafaker-net/datafaker"
sha = "22730b57dee2b174d62276f9e8979cf59c1d219b"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=RangeTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Range  -DtargetTests=**.RangeTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 86.0
mutation_kill_rate = 0
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/net/datafaker/service/RangeTest.java"
focal_file_path = "src/main/java/net/datafaker/service/Range.java"
test_file_url = "https://github.com/datafaker-net/datafaker/blob/22730b57dee2b174d62276f9e8979cf59c1d219b/src/test/java/net/datafaker/service/RangeTest.java"
focal_file_url = "https://github.com/datafaker-net/datafaker/blob/22730b57dee2b174d62276f9e8979cf59c1d219b/src/main/java/net/datafaker/service/Range.java"
first_commit_date = "2024-10-31"
last_commit_date = "2025-06-20"
test_file_content = "package net.datafaker.service;\n\nimport org.junit.jupiter.api.Test;\n\nimport static org.assertj.core.api.Assertions.assertThatCode;\nimport static org.assertj.core.api.Assertions.assertThatThrownBy;\n\nclass RangeTest {\n    @Test\n    void inclusive_minShouldBeLessThanMax() {\n    }\n\n    @Test\n    void exclusive_minShouldBeLessThanMaxMinusOne() {\n    }\n\n    @Test\n    void inclusiveExclusive_minShouldBeLessThanMax() {\n    }\n\n    @Test\n    void exclusiveInclusive_minShouldBeLessThanMax() {\n    }\n}"
