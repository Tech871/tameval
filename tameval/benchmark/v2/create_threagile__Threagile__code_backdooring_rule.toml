[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.24.2"

[repo_info]
repository = "Threagile/threagile"
sha = "9c1d403638a1f7d83faa4c528531c6c5025885c8"

[run_info]
docker_image = "golang:1.24.2"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/risks/builtin/code_backdooring_rule.go pkg/risks/builtin/code_backdooring_rule_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/risks/builtin/code_backdooring_rule.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 83.0
original_coverage = 97.0
mutation_kill_rate = 53.0
original_mutation_kill_rate = 80.0
covered_lines = [ 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 60, 61, 62, 63, 64, 69, 72, 73, 74, 75, 76, 82, 83, 84, 88, 89, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113,]
missed_lines = [ 44, 45, 46, 53, 54, 55, 77, 78, 79, 85, 86, 90, 91, 92, 93,]

[input_info]
test_file_path = "pkg/risks/builtin/code_backdooring_rule_test.go"
focal_file_path = "pkg/risks/builtin/code_backdooring_rule.go"
test_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/code_backdooring_rule_test.go"
focal_file_url = "https://github.com/Threagile/threagile/blob/9c1d403638a1f7d83faa4c528531c6c5025885c8/pkg/risks/builtin/code_backdooring_rule.go"
first_commit_date = "2024-06-07"
last_commit_date = "2025-07-04"
test_file_content = "package builtin\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/threagile/threagile/pkg/types\"\n)\n\nfunc TestCodeBackdooringRuleGenerateRisksEmptyModelNotRisksCreated(t *testing.T) {\n\trule := NewCodeBackdooringRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{})\n\n\tassert.Nil(t, err)\n\tassert.Empty(t, risks)\n}\n\n\n\n\nfunc TestCodeBackdoogingRuleGenerateRisksTechAssetNotInternetButNotComingThroughVPNInternetRisksCreated(t *testing.T) {\n\trule := NewCodeBackdooringRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"git-lab-ci-cd\": {\n\t\t\t\tId:       \"git-lab-ci-cd\",\n\t\t\t\tTitle:    \"GitLab CI/CD\",\n\t\t\t\tInternet: false,\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"build-pipeline\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.IsDevelopmentRelevant: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"reverse-proxy\": {\n\t\t\t\tTitle:    \"Reverse Proxy\",\n\t\t\t\tInternet: true,\n\t\t\t},\n\t\t},\n\t\tIncomingTechnicalCommunicationLinksMappedByTargetId: map[string][]*types.CommunicationLink{\n\t\t\t\"git-lab-ci-cd\": {\n\t\t\t\t{\n\t\t\t\t\tSourceId: \"reverse-proxy\",\n\t\t\t\t\tTargetId: \"git-lab-ci-cd\",\n\t\t\t\t\tVPN:      false,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.NotEmpty(t, risks)\n\tassert.Equal(t, \"<b>Code Backdooring</b> risk at <b>GitLab CI/CD</b>\", risks[0].Title)\n\tassert.Equal(t, types.MediumImpact, risks[0].ExploitationImpact)\n}\n\n\n\nfunc TestCodeBackdooringRuleGenerateRisksNotImportantDataAssetNoAddingTargetRisksCreated(t *testing.T) {\n\trule := NewCodeBackdooringRule()\n\n\trisks, err := rule.GenerateRisks(&types.Model{\n\t\tTechnicalAssets: map[string]*types.TechnicalAsset{\n\t\t\t\"git-lab-ci-cd\": {\n\t\t\t\tId:    \"git-lab-ci-cd\",\n\t\t\t\tTitle: \"GitLab CI/CD\",\n\t\t\t\tTechnologies: types.TechnologyList{\n\t\t\t\t\t{\n\t\t\t\t\t\tName: \"build-pipeline\",\n\t\t\t\t\t\tAttributes: map[string]bool{\n\t\t\t\t\t\t\ttypes.IsDevelopmentRelevant: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tCommunicationLinks: []*types.CommunicationLink{\n\t\t\t\t\t{\n\t\t\t\t\t\tUsage:          types.DevOps,\n\t\t\t\t\t\tDataAssetsSent: []string{\"not-important-data-asset\"},\n\t\t\t\t\t\tTargetId:       \"deployment-target\",\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t\"reverse-proxy\": {\n\t\t\t\tId:       \"reverse-proxy\",\n\t\t\t\tTitle:    \"Reverse Proxy\",\n\t\t\t\tInternet: true,\n\t\t\t},\n\t\t\t\"deployment-target\": {\n\t\t\t\tId:    \"deployment-target\",\n\t\t\t\tTitle: \"Deployment Target\",\n\t\t\t},\n\t\t},\n\t\tIncomingTechnicalCommunicationLinksMappedByTargetId: map[string][]*types.CommunicationLink{\n\t\t\t\"git-lab-ci-cd\": {\n\t\t\t\t{\n\t\t\t\t\tSourceId: \"reverse-proxy\",\n\t\t\t\t\tTargetId: \"git-lab-ci-cd\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tDataAssets: map[string]*types.DataAsset{\n\t\t\t\"not-important-data-asset\": {\n\t\t\t\tIntegrity: types.Operational,\n\t\t\t},\n\t\t},\n\t})\n\n\tassert.Nil(t, err)\n\tassert.NotEmpty(t, risks)\n\tassert.Equal(t, \"<b>Code Backdooring</b> risk at <b>GitLab CI/CD</b>\", risks[0].Title)\n\tassert.Equal(t, types.MediumImpact, risks[0].ExploitationImpact)\n\tassert.Equal(t, []string{\"git-lab-ci-cd\"}, risks[0].DataBreachTechnicalAssetIDs)\n}\n"
