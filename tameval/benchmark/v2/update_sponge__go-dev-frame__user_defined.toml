[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "go-dev-frame/sponge"
sha = "e72bb7443479d95928a16711696af6523999a717"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/sgorm/user_defined.go pkg/sgorm/user_defined_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/sgorm/user_defined.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 86.0
mutation_kill_rate = nan
original_mutation_kill_rate = 86.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "pkg/sgorm/user_defined_test.go"
focal_file_path = "pkg/sgorm/user_defined.go"
test_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/sgorm/user_defined_test.go"
focal_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/sgorm/user_defined.go"
first_commit_date = "2025-01-19"
last_commit_date = "2025-04-10"
test_file_content = "package sgorm\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestBool(t *testing.T) {\n\tv1 := false\n\tassert.Equal(t, NewBool(v1).String(), \"false\")\n\tassert.Equal(t, NewBool(&v1).String(), \"false\")\n\n\tv2 := true\n\tassert.Equal(t, NewBool(v2).String(), \"true\")\n\tassert.Equal(t, NewBool(&v2).String(), \"true\")\n\n\tassert.Nil(t, NewBool(nil))\n\tassert.Equal(t, NewBool(nil).String(), \"false\")\n\n\tassert.NoError(t, NewBool(v2).Scan(nil))\n\tassert.NoError(t, NewBool(v2).Scan([]byte{0}))\n\tassert.NoError(t, NewBool(v2).Scan([]byte{1}))\n\tassert.NoError(t, NewBool(v2).Scan(\"true\"))\n\tassert.NoError(t, NewBool(v2).Scan(\"1\"))\n\tassert.NoError(t, NewBool(v2).Scan(\"t\"))\n\tassert.Error(t, NewBool(v2).Scan(3.14))\n\n\t_, err := NewBool(v1).Value()\n\tassert.NoError(t, err)\n\t_, err = NewBool(v2).Value()\n\tassert.NoError(t, err)\n\n\tSetDriver(\"postgres\")\n\tvalue, err := NewBool(v2).Value()\n\tassert.NoError(t, err)\n\tassert.Equal(t, true, value)\n}"
