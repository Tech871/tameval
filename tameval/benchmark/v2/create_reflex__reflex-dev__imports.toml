[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "reflex-dev/reflex"
sha = "7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=reflex/utils/imports.py -m pytest -q --junit-xml=test_output.xml tests/units/utils/test_imports.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target reflex.utils.imports --unit-test tests.units.utils.test_imports --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target reflex/utils/imports.py --unit-test tests/units/utils/test_imports.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 95.0
original_coverage = 95.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 2, 4, 5, 6, 9, 20, 21, 22, 26, 31, 32, 40, 43, 54, 64, 87, 88, 92, 95, 98, 101, 104, 107, 109, 110, 116, 117, 122, 125, 126, 127, 128, 129, 130, 131,]
missed_lines = [ 37, 75,]

[input_info]
test_file_path = "tests/units/utils/test_imports.py"
focal_file_path = "reflex/utils/imports.py"
test_file_url = "https://github.com/reflex-dev/reflex/blob/7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788/tests/units/utils/test_imports.py"
focal_file_url = "https://github.com/reflex-dev/reflex/blob/7acc7d9bb472d6e3a0e9df64bcbc5019d66fc788/reflex/utils/imports.py"
first_commit_date = "2023-06-25"
last_commit_date = "2025-06-26"
test_file_content = "import pytest\n\nfrom reflex.utils.imports import (\n    ImportDict,\n    ImportVar,\n    ParsedImportDict,\n    merge_imports,\n    parse_imports,\n)\n\n\n@pytest.mark.parametrize(\n    (\"import_var\", \"expected_name\"),\n    [\n        (\n            ImportVar(tag=\"BaseTag\"),\n            \"BaseTag\",\n        ),\n        (\n            ImportVar(tag=\"BaseTag\", alias=\"AliasTag\"),\n            \"BaseTag as AliasTag\",\n        ),\n        (\n            ImportVar(tag=\"BaseTag\", is_default=True),\n            \"BaseTag\",\n        ),\n        (\n            ImportVar(tag=\"BaseTag\", is_default=True, alias=\"AliasTag\"),\n            \"AliasTag\",\n        ),\n        (\n            ImportVar(tag=\"BaseTag\", is_default=False),\n            \"BaseTag\",\n        ),\n        (\n            ImportVar(tag=\"BaseTag\", is_default=False, alias=\"AliasTag\"),\n            \"BaseTag as AliasTag\",\n        ),\n    ],\n)\ndef test_import_var(import_var, expected_name):\n    \"\"\"Test that the import var name is computed correctly.\n\n    Args:\n        import_var: The import var.\n        expected_name: The expected name.\n    \"\"\"\n    assert import_var.name == expected_name\n\n\n@pytest.mark.parametrize(\n    (\"input_1\", \"input_2\", \"output\"),\n    [\n        (\n            {\"react\": {\"Component\"}},\n            {\"react\": {\"Component\"}, \"react-dom\": {\"render\"}},\n            {\"react\": {ImportVar(\"Component\")}, \"react-dom\": {ImportVar(\"render\")}},\n        ),\n        (\n            {\"react\": {\"Component\"}, \"next/image\": {\"Image\"}},\n            {\"react\": {\"Component\"}, \"react-dom\": {\"render\"}},\n            {\n                \"react\": {ImportVar(\"Component\")},\n                \"react-dom\": {ImportVar(\"render\")},\n                \"next/image\": {ImportVar(\"Image\")},\n            },\n        ),\n        (\n            {\"react\": {\"Component\"}},\n            {\"\": {\"some/custom.css\"}},\n            {\"react\": {ImportVar(\"Component\")}, \"\": {ImportVar(\"some/custom.css\")}},\n        ),\n    ],\n)\ndef test_merge_imports(input_1, input_2, output):\n    \"\"\"Test that imports are merged correctly.\n\n    Args:\n        input_1: The first dict to merge.\n        input_2: The second dict to merge.\n        output: The expected output dict after merging.\n\n    \"\"\"\n    res = merge_imports(input_1, input_2)\n    assert res.keys() == output.keys()\n\n    for key in output:\n        assert set(res[key]) == set(output[key])\n\n\n@pytest.mark.parametrize(\n    (\"input\", \"output\"),\n    [\n        ({}, {}),\n        (\n            {\"react\": \"Component\"},\n            {\"react\": [ImportVar(tag=\"Component\")]},\n        ),\n        (\n            {\"react\": [\"Component\"]},\n            {\"react\": [ImportVar(tag=\"Component\")]},\n        ),\n        (\n            {\"react\": [\"Component\", ImportVar(tag=\"useState\")]},\n            {\"react\": [ImportVar(tag=\"Component\"), ImportVar(tag=\"useState\")]},\n        ),\n        (\n            {\"react\": [\"Component\"], \"foo\": \"anotherFunction\"},\n            {\n                \"react\": [ImportVar(tag=\"Component\")],\n                \"foo\": [ImportVar(tag=\"anotherFunction\")],\n            },\n        ),\n    ],\n)\ndef test_parse_imports(input: ImportDict, output: ParsedImportDict):\n    assert parse_imports(input) == output\n"
