[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.24.0"

[repo_info]
repository = "notaryproject/ratify"
sha = "67aa7a4993f915deac10ae371cdafb67a4bf697c"

[run_info]
docker_image = "golang:1.24.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/executor/executor.go internal/executor/executor_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/executor/executor.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0
original_coverage = 91.0
mutation_kill_rate = nan
original_mutation_kill_rate = 73.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/executor/executor_test.go"
focal_file_path = "internal/executor/executor.go"
test_file_url = "https://github.com/notaryproject/ratify/blob/67aa7a4993f915deac10ae371cdafb67a4bf697c/internal/executor/executor_test.go"
focal_file_url = "https://github.com/notaryproject/ratify/blob/67aa7a4993f915deac10ae371cdafb67a4bf697c/internal/executor/executor.go"
first_commit_date = "2025-05-14"
last_commit_date = "2025-08-05"
test_file_content = "/*\nCopyright The Ratify Authors.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\npackage executor\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/notaryproject/ratify-go\"\n\n\t\"github.com/notaryproject/ratify/v2/internal/policyenforcer\"\n\t\"github.com/notaryproject/ratify/v2/internal/store\"\n\t\"github.com/notaryproject/ratify/v2/internal/verifier\"\n\tocispec \"github.com/opencontainers/image-spec/specs-go/v1\"\n)\n\nconst (\n\tmockVerifierName       = \"mock-verifier-name\"\n\tmockVerifierType       = \"mock-verifier-type\"\n\tmockStoreType          = \"mock-store\"\n\tmockPolicyEnforcerType = \"mock-policy-enforcer\"\n)\n\ntype mockStore struct{}\n\nfunc (m *mockStore) Resolve(_ context.Context, _ string) (ocispec.Descriptor, error) {\n\treturn ocispec.Descriptor{}, nil\n}\n\nfunc (m *mockStore) ListReferrers(_ context.Context, _ string, _ []string, _ func(referrers []ocispec.Descriptor) error) error {\n\treturn nil\n}\n\nfunc (m *mockStore) FetchBlob(_ context.Context, _ string, _ ocispec.Descriptor) ([]byte, error) {\n\treturn nil, nil\n}\n\nfunc (m *mockStore) FetchManifest(_ context.Context, _ string, _ ocispec.Descriptor) ([]byte, error) {\n\treturn nil, nil\n}\n\nfunc newMockStore(_ *store.NewOptions) (ratify.Store, error) {\n\treturn &mockStore{}, nil\n}\n\ntype mockPolicyEnforcer struct{}\n\nfunc (m *mockPolicyEnforcer) Evaluator(_ context.Context, _ string) (ratify.Evaluator, error) {\n\treturn nil, nil\n}\n\nfunc createPolicyEnforcer(_ policyenforcer.NewOptions) (ratify.PolicyEnforcer, error) {\n\treturn &mockPolicyEnforcer{}, nil\n}\n\ntype mockVerifier struct{}\n\nfunc (m *mockVerifier) Name() string {\n\treturn mockVerifierName\n}\nfunc (m *mockVerifier) Type() string {\n\treturn mockVerifierType\n}\nfunc (m *mockVerifier) Verifiable(_ ocispec.Descriptor) bool {\n\treturn true\n}\n\nfunc (m *mockVerifier) Verify(_ context.Context, _ *ratify.VerifyOptions) (*ratify.VerificationResult, error) {\n\treturn &ratify.VerificationResult{}, nil\n}\n\nfunc createMockVerifier(_ *verifier.NewOptions, _ []string) (ratify.Verifier, error) {\n\treturn &mockVerifier{}, nil\n}\n\nfunc TestNewExecutor(t *testing.T) {\n\tstore.RegisterStoreFactory(mockStoreType, newMockStore)\n\tverifier.RegisterVerifierFactory(mockVerifierType, createMockVerifier)\n\tpolicyenforcer.Register(mockPolicyEnforcerType, createPolicyEnforcer)\n\n\ttests := []struct {\n\t\tname           string\n\t\topts           *Options\n\t\texpectErr      bool\n\t\texpectExecutor bool\n\t}{\n\t\t{\n\t\t\tname:           \"nil options\",\n\t\t\topts:           nil,\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname:           \"failed to create verifiers\",\n\t\t\topts:           &Options{},\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname: \"empty global scopes\",\n\t\t\topts: &Options{\n\t\t\t\tExecutors: []*ScopedOptions{{}},\n\t\t\t},\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname: \"invalid executor scopes\",\n\t\t\topts: &Options{\n\t\t\t\tExecutors: []*ScopedOptions{\n\t\t\t\t\t{\n\t\t\t\t\t\tScopes: []string{\"*\"},\n\t\t\t\t\t\tVerifiers: []*verifier.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: mockVerifierName,\n\t\t\t\t\t\t\t\tType: mockVerifierType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tStores: []*store.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:   mockStoreType,\n\t\t\t\t\t\t\t\tScopes: []string{\"testrepo\"},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPolicy: &policyenforcer.NewOptions{\n\t\t\t\t\t\t\tType: mockPolicyEnforcerType,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname: \"failed to create store\",\n\t\t\topts: &Options{\n\t\t\t\tExecutors: []*ScopedOptions{\n\t\t\t\t\t{\n\t\t\t\t\t\tScopes: []string{\"testrepo\"},\n\t\t\t\t\t\tVerifiers: []*verifier.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: mockVerifierName,\n\t\t\t\t\t\t\t\tType: mockVerifierType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname: \"failed to create policy enforcer\",\n\t\t\topts: &Options{\n\t\t\t\tExecutors: []*ScopedOptions{\n\t\t\t\t\t{\n\t\t\t\t\t\tScopes: []string{\"testrepo\"},\n\t\t\t\t\t\tVerifiers: []*verifier.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: mockVerifierName,\n\t\t\t\t\t\t\t\tType: mockVerifierType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname: \"failed to create policy enforcer\",\n\t\t\topts: &Options{\n\t\t\t\tExecutors: []*ScopedOptions{\n\t\t\t\t\t{\n\t\t\t\t\t\tScopes: []string{\"test\"},\n\t\t\t\t\t\tVerifiers: []*verifier.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: mockVerifierName,\n\t\t\t\t\t\t\t\tType: mockVerifierType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tStores: []*store.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:   mockStoreType,\n\t\t\t\t\t\t\t\tScopes: []string{\"test\"},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPolicy: &policyenforcer.NewOptions{},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectErr:      true,\n\t\t\texpectExecutor: false,\n\t\t},\n\t\t{\n\t\t\tname: \"valid options\",\n\t\t\topts: &Options{\n\t\t\t\tExecutors: []*ScopedOptions{\n\t\t\t\t\t{\n\t\t\t\t\t\tScopes: []string{\"test\"},\n\t\t\t\t\t\tVerifiers: []*verifier.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: mockVerifierName,\n\t\t\t\t\t\t\t\tType: mockVerifierType,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tStores: []*store.NewOptions{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tType:   mockStoreType,\n\t\t\t\t\t\t\t\tScopes: []string{\"test\"},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tPolicy: &policyenforcer.NewOptions{\n\t\t\t\t\t\t\tType: mockPolicyEnforcerType,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\texpectErr:      false,\n\t\t\texpectExecutor: true,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\texecutor, err := NewScopedExecutor(test.opts)\n\t\t\tif (err != nil) != test.expectErr {\n\t\t\t\tt.Errorf(\"expected error: %v, got: %v\", test.expectErr, err)\n\t\t\t}\n\t\t\tif (executor != nil) != test.expectExecutor {\n\t\t\t\tt.Errorf(\"expected executor: %v, got: %v\", test.expectExecutor, executor != nil)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestRegisterExecutor(t *testing.T) {\n\ttests := []struct {\n\t\tname             string\n\t\tscope            string\n\t\texecutor         *ratify.Executor\n\t\tregisterError    bool\n\t\twildcardScoped   bool\n\t\tregistryScoped   bool\n\t\trepositoryScoped bool\n\t}{\n\t\t{\n\t\t\tname:          \"Register executor with global wildcard scope\",\n\t\t\tscope:         \"*\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register executor with empty scope\",\n\t\t\tscope:         \"\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register nil executor\",\n\t\t\tscope:         \"registry.example.com\",\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:           \"Register executor with registry scope\",\n\t\t\tscope:          \"registry.example.com\",\n\t\t\texecutor:       &ratify.Executor{},\n\t\t\tregisterError:  false,\n\t\t\tregistryScoped: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register repository scoped executor with wildcard scope\",\n\t\t\tscope:         \"registry.example.com/repository*\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register repository scoped executor with invalid registry\",\n\t\t\tscope:         \":invalid/repository\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register repository scoped executor with tag\",\n\t\t\tscope:         \"registry.example.com/repository:tag\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:             \"Register executor with repository scope\",\n\t\t\tscope:            \"registry.example.com/repository\",\n\t\t\texecutor:         &ratify.Executor{},\n\t\t\tregisterError:    false,\n\t\t\trepositoryScoped: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register registry scoped executor with invalid registry\",\n\t\t\tscope:         \":invalid\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:          \"Register registry scoped executor with multiple wildcards\",\n\t\t\tscope:         \"*.example.com.*\",\n\t\t\texecutor:      &ratify.Executor{},\n\t\t\tregisterError: true,\n\t\t},\n\t\t{\n\t\t\tname:           \"Register wildcard scoped executor\",\n\t\t\tscope:          \"*.example.com\",\n\t\t\texecutor:       &ratify.Executor{},\n\t\t\tregisterError:  false,\n\t\t\twildcardScoped: true,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tscopedExecutor := &ScopedExecutor{}\n\t\t\terr := scopedExecutor.registerExecutor(test.scope, test.executor)\n\t\t\tif (err != nil) != test.registerError {\n\t\t\t\tt.Errorf(\"expected register error: %v, got: %v\", test.registerError, err)\n\t\t\t}\n\n\t\t\tif !test.registerError {\n\t\t\t\tif test.wildcardScoped && len(scopedExecutor.wildcard) == 0 {\n\t\t\t\t\tt.Errorf(\"expected wildcard scoped executors to be registered, but got none\")\n\t\t\t\t}\n\t\t\t\tif test.registryScoped && len(scopedExecutor.registry) == 0 {\n\t\t\t\t\tt.Errorf(\"expected registry scoped executors to be registered, but got none\")\n\t\t\t\t}\n\t\t\t\tif test.repositoryScoped && len(scopedExecutor.repository) == 0 {\n\t\t\t\t\tt.Errorf(\"expected repository scoped executors to be registered, but got none\")\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestMatchExecutor(t *testing.T) {\n\te1 := &ratify.Executor{}\n\te2 := &ratify.Executor{}\n\te3 := &ratify.Executor{}\n\tscopedExecutor := &ScopedExecutor{\n\t\twildcard: map[string]*ratify.Executor{\n\t\t\t\"example.com\": e1,\n\t\t},\n\t\tregistry: map[string]*ratify.Executor{\n\t\t\t\"registry.example.com\": e2,\n\t\t},\n\t\trepository: map[string]*ratify.Executor{\n\t\t\t\"registry.example.com/repository/foo\": e3,\n\t\t},\n\t}\n\ttests := []struct {\n\t\tname             string\n\t\tartifact         string\n\t\texpectedExecutor *ratify.Executor\n\t\texpectedError    bool\n\t}{\n\t\t{\n\t\t\tname:             \"Invalid artifact\",\n\t\t\tartifact:         \"invalid-artifact\",\n\t\t\texpectedExecutor: nil,\n\t\t\texpectedError:    true,\n\t\t},\n\t\t{\n\t\t\tname:             \"Match wildcard executor\",\n\t\t\tartifact:         \"foo.example.com/bar:v1\",\n\t\t\texpectedExecutor: e1,\n\t\t\texpectedError:    false,\n\t\t},\n\t\t{\n\t\t\tname:             \"Match registry executor\",\n\t\t\tartifact:         \"registry.example.com/foo:v1\",\n\t\t\texpectedExecutor: e2,\n\t\t\texpectedError:    false,\n\t\t},\n\t\t{\n\t\t\tname:             \"Match repository executor\",\n\t\t\tartifact:         \"registry.example.com/repository/foo:v1\",\n\t\t\texpectedExecutor: e3,\n\t\t\texpectedError:    false,\n\t\t},\n\t\t{\n\t\t\tname:             \"No match\",\n\t\t\tartifact:         \"unknown.com/foo:v1\",\n\t\t\texpectedExecutor: nil,\n\t\t\texpectedError:    true,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\texecutor, err := scopedExecutor.matchExecutor(test.artifact)\n\t\t\tif (err != nil) != test.expectedError {\n\t\t\t\tt.Errorf(\"expected error: %v, got: %v\", test.expectedError, err)\n\t\t\t}\n\t\t\tif executor != test.expectedExecutor {\n\t\t\t\tt.Errorf(\"expected executor: %v, got: %v\", test.expectedExecutor, executor)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestValidateArtifact(t *testing.T) {\n\tscopedExecutor := &ScopedExecutor{\n\t\twildcard: map[string]*ratify.Executor{\n\t\t\t\"example.com\": {},\n\t\t},\n\t}\n\n\tif _, err := scopedExecutor.ValidateArtifact(context.Background(), \"unknown.com/foo:v1\"); err == nil {\n\t\tt.Error(\"expected error for unknown artifact, got nil\")\n\t}\n\n\tif _, err := scopedExecutor.ValidateArtifact(context.Background(), \"test.example.com/foo:v1\"); err == nil {\n\t\tt.Error(\"expected error for artifact with wildcard scope, got nil\")\n\t}\n}\n\nfunc TestResolve(t *testing.T) {\n\tscopedExecutor := &ScopedExecutor{\n\t\twildcard: map[string]*ratify.Executor{\n\t\t\t\"example.com\": {\n\t\t\t\tStore: &mockStore{},\n\t\t\t},\n\t\t},\n\t}\n\n\tif _, err := scopedExecutor.Resolve(context.Background(), \"unknown.com/foo:v1\"); err == nil {\n\t\tt.Error(\"expected error for invalid artifact, got nil\")\n\t}\n\n\tif _, err := scopedExecutor.Resolve(context.Background(), \"test.example.com/foo:v1\"); err != nil {\n\t\tt.Error(\"expected no error for valid artifact with wildcard scope, got:\", err)\n\t}\n}"
