[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "youtype/mypy_boto3_builder"
sha = "098fadc5ab3152e2c85008a592ac975328a9fca8"
bench_version = 2

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.mkdocs.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mypy_boto3_builder/utils/version.py -m pytest -q --junit-xml=test_output.xml tests/utils/test_version.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mypy_boto3_builder.utils.version --unit-test tests.utils.test_version --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mypy_boto3_builder/utils/version.py --unit-test tests/utils/test_version.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 97.0
original_coverage = 97.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 6, 7, 8, 10, 12, 14, 17, 21, 22, 27, 31, 32, 35, 39, 42, 46, 47, 50, 54, 55, 56, 57, 60, 64, 65, 66, 69, 73, 74, 75, 76, 77, 80, 84, 85, 86,]
missed_lines = [ 24,]

[input_info]
test_file_path = "tests/utils/test_version.py"
focal_file_path = "mypy_boto3_builder/utils/version.py"
test_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/tests/utils/test_version.py"
focal_file_url = "https://github.com/youtype/mypy_boto3_builder/blob/098fadc5ab3152e2c85008a592ac975328a9fca8/mypy_boto3_builder/utils/version.py"
first_commit_date = "2022-02-15"
last_commit_date = "2025-01-04"
test_file_content = "import pytest\nfrom packaging.version import Version\n\nfrom mypy_boto3_builder.utils.version import (\n    bump_postrelease,\n    get_builder_version,\n    get_max_build_version,\n    get_min_build_version,\n    get_release_version,\n    is_valid_version,\n    sort_versions,\n    stringify_parts,\n)\n\n\nclass TestStrings:\n    def test_get_builder_version(self) -> None:\n        assert Version(get_builder_version())\n\n    def test_get_min_build_version(self) -> None:\n        assert get_min_build_version(\"1.22.36\") == \"1.22.0\"\n        assert get_min_build_version(\"1.22.48.post13\") == \"1.22.0\"\n        assert get_min_build_version(\"1.13.3\") == \"1.13.0\"\n        assert get_min_build_version(\"1.13.2.post56\") == \"1.13.0\"\n\n    def test_get_max_build_version(self) -> None:\n        assert get_max_build_version(\"1.22.36\") == \"1.23.0\"\n        assert get_max_build_version(\"1.22.48.post13\") == \"1.23.0\"\n        assert get_max_build_version(\"1.13.3\") == \"1.14.0\"\n        assert get_max_build_version(\"1.13.2.post56\") == \"1.14.0\"\n\n    def test_bump_postrelease(self) -> None:\n        assert bump_postrelease(\"1.22.36\") == \"1.22.36.post1\"\n        assert bump_postrelease(\"1.22.36.post\") == \"1.22.36.post1\"\n        assert bump_postrelease(\"1.22.36.post0\") == \"1.22.36.post1\"\n        assert bump_postrelease(\"1.22.36.post5\") == \"1.22.36.post6\"\n\n    def test_get_release_version(self) -> None:\n        assert get_release_version(\"1.22.36\") == \"1.22.36\"\n        assert get_release_version(\"1.22.36.post13\") == \"1.22.36\"\n        assert get_release_version(\"1.13.2.post56+dev123\") == \"1.13.2\"\n\n    def test_is_valid_version(self) -> None:\n        assert is_valid_version(\"1.2.3\")\n        assert is_valid_version(\"1.2.3.post1\")\n        assert not is_valid_version(\"1.2.3dev3.4\")\n\n    def test_sort_versions(self) -> None:\n        assert sort_versions([\"1.2.3.post1\", \"1.2.3\", \"1.2.3dev3.4\"]) == [\"1.2.3\", \"1.2.3.post1\"]\n\n    def test_stringify_parts(self) -> None:\n        assert stringify_parts((1, 2, 3)) == \"1.2.3\"\n        assert stringify_parts((1, 3)) == \"1.3\"\n        assert stringify_parts((3,)) == \"3\"\n        with pytest.raises(ValueError, match=\"Empty version parts\"):\n            stringify_parts(())\n"
