[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "nom-tam-fits/nom-tam-fits"
sha = "ef5e60895f98eaba44b4220e64407394b05f44ff"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=StokesTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Stokes  -DtargetTests=**.StokesTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 100.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "src/test/java/nom/tam/fits/header/StokesTest.java"
focal_file_path = "src/main/java/nom/tam/fits/header/Stokes.java"
test_file_url = "https://github.com/nom-tam-fits/nom-tam-fits/blob/ef5e60895f98eaba44b4220e64407394b05f44ff/src/test/java/nom/tam/fits/header/StokesTest.java"
focal_file_url = "https://github.com/nom-tam-fits/nom-tam-fits/blob/ef5e60895f98eaba44b4220e64407394b05f44ff/src/main/java/nom/tam/fits/header/Stokes.java"
first_commit_date = "2024-03-29"
last_commit_date = "2024-04-02"
test_file_content = "package nom.tam.fits.header;\n\n/*-\n * #%L\n * nom.tam.fits\n * %%\n * Copyright (C) 1996 - 2024 nom-tam-fits\n * %%\n * This is free and unencumbered software released into the public domain.\n * \n * Anyone is free to copy, modify, publish, use, compile, sell, or\n * distribute this software, either in source code form or as a compiled\n * binary, for any purpose, commercial or non-commercial, and by any\n * means.\n * \n * In jurisdictions that recognize copyright laws, the author or authors\n * of this software dedicate any and all copyright interest in the\n * software to the public domain. We make this dedication for the benefit\n * of the public at large and to the detriment of our heirs and\n * successors. We intend this dedication to be an overt act of\n * relinquishment in perpetuity of all present and future rights to this\n * software under copyright law.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n * #L%\n */\n\nimport java.util.ArrayList;\nimport java.util.Map;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport nom.tam.fits.FitsException;\nimport nom.tam.fits.Header;\n\npublic class StokesTest {\n\n    @Test\n    public void testStokesValues() throws Exception {\n        Assert.assertEquals(1, Stokes.I.getCoordinateValue());\n        Assert.assertEquals(2, Stokes.Q.getCoordinateValue());\n        Assert.assertEquals(3, Stokes.U.getCoordinateValue());\n        Assert.assertEquals(4, Stokes.V.getCoordinateValue());\n\n        Assert.assertEquals(-1, Stokes.RR.getCoordinateValue());\n        Assert.assertEquals(-2, Stokes.LL.getCoordinateValue());\n        Assert.assertEquals(-3, Stokes.RL.getCoordinateValue());\n        Assert.assertEquals(-4, Stokes.LR.getCoordinateValue());\n\n        Assert.assertEquals(-5, Stokes.XX.getCoordinateValue());\n        Assert.assertEquals(-6, Stokes.YY.getCoordinateValue());\n        Assert.assertEquals(-7, Stokes.XY.getCoordinateValue());\n        Assert.assertEquals(-8, Stokes.YX.getCoordinateValue());\n    }\n\n    @Test\n    public void testForCoordinateValues() throws Exception {\n        Assert.assertEquals(Stokes.I, Stokes.forCoordinateValue(1));\n        Assert.assertEquals(Stokes.Q, Stokes.forCoordinateValue(2));\n        Assert.assertEquals(Stokes.U, Stokes.forCoordinateValue(3));\n        Assert.assertEquals(Stokes.V, Stokes.forCoordinateValue(4));\n\n        Assert.assertEquals(Stokes.RR, Stokes.forCoordinateValue(-1));\n        Assert.assertEquals(Stokes.LL, Stokes.forCoordinateValue(-2));\n        Assert.assertEquals(Stokes.RL, Stokes.forCoordinateValue(-3));\n        Assert.assertEquals(Stokes.LR, Stokes.forCoordinateValue(-4));\n\n        Assert.assertEquals(Stokes.XX, Stokes.forCoordinateValue(-5));\n        Assert.assertEquals(Stokes.YY, Stokes.forCoordinateValue(-6));\n        Assert.assertEquals(Stokes.XY, Stokes.forCoordinateValue(-7));\n        Assert.assertEquals(Stokes.YX, Stokes.forCoordinateValue(-8));\n    }\n\n    @Test\n    public void testSingleEndedParameters() throws Exception {\n        Stokes.Parameters p = Stokes.parameters();\n\n        Assert.assertEquals(Stokes.I, p.getParameter(0));\n        Assert.assertEquals(Stokes.Q, p.getParameter(1));\n        Assert.assertEquals(Stokes.U, p.getParameter(2));\n        Assert.assertEquals(Stokes.V, p.getParameter(3));\n\n        ArrayList<Stokes> l = p.getAvailableParameters();\n        Assert.assertEquals(4, l.size());\n        Assert.assertTrue(l.contains(Stokes.I));\n        Assert.assertTrue(l.contains(Stokes.Q));\n        Assert.assertTrue(l.contains(Stokes.U));\n        Assert.assertTrue(l.contains(Stokes.V));\n\n        Assert.assertEquals(Stokes.I, p.getParameter(0));\n        Assert.assertEquals(Stokes.Q, p.getParameter(1));\n        Assert.assertEquals(Stokes.U, p.getParameter(2));\n        Assert.assertEquals(Stokes.V, p.getParameter(3));\n\n        Assert.assertEquals(0, p.getArrayIndex(Stokes.I));\n        Assert.assertEquals(1, p.getArrayIndex(Stokes.Q));\n        Assert.assertEquals(2, p.getArrayIndex(Stokes.U));\n        Assert.assertEquals(3, p.getArrayIndex(Stokes.V));\n\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 3);\n        p.fillImageHeader(h, 1);\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"CTYPE2\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"CRPIX2\"), 1e-12);\n        Assert.assertEquals(1.0, h.getDoubleValue(\"CDELT2\"), 1e-12);\n        Assert.assertEquals(1.0, h.getDoubleValue(\"CRVAL2\"), 1e-12);\n\n        Map.Entry<Integer, Stokes.Parameters> e = Stokes.fromImageHeader(h);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n        h = new Header();\n        h.addValue(Standard.TDIMn.n(4), \"(2,4,3)\");\n        p.fillTableHeader(h, 3, 1);\n\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"2CTYP4\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"2CRPX4\"), 1e-12);\n        Assert.assertEquals(1.0, h.getDoubleValue(\"2CDLT4\"), 1e-12);\n        Assert.assertEquals(1.0, h.getDoubleValue(\"2CRVL4\"), 1e-12);\n\n        e = Stokes.fromTableHeader(h, 3);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n    }\n\n    @Test\n    public void testCircularCrossParameters() throws Exception {\n        Stokes.Parameters p = Stokes.parameters(Stokes.CIRCULAR_CROSS_POLARIZATION);\n\n        Assert.assertEquals(Stokes.RR, p.getParameter(0));\n        Assert.assertEquals(Stokes.LL, p.getParameter(1));\n        Assert.assertEquals(Stokes.RL, p.getParameter(2));\n        Assert.assertEquals(Stokes.LR, p.getParameter(3));\n\n        ArrayList<Stokes> l = p.getAvailableParameters();\n        Assert.assertEquals(4, l.size());\n        Assert.assertTrue(l.contains(Stokes.RR));\n        Assert.assertTrue(l.contains(Stokes.LL));\n        Assert.assertTrue(l.contains(Stokes.RL));\n        Assert.assertTrue(l.contains(Stokes.LR));\n\n        Assert.assertEquals(Stokes.RR, p.getParameter(0));\n        Assert.assertEquals(Stokes.LL, p.getParameter(1));\n        Assert.assertEquals(Stokes.RL, p.getParameter(2));\n        Assert.assertEquals(Stokes.LR, p.getParameter(3));\n\n        Assert.assertEquals(0, p.getArrayIndex(Stokes.RR));\n        Assert.assertEquals(1, p.getArrayIndex(Stokes.LL));\n        Assert.assertEquals(2, p.getArrayIndex(Stokes.RL));\n        Assert.assertEquals(3, p.getArrayIndex(Stokes.LR));\n\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 3);\n        p.fillImageHeader(h, 1);\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"CTYPE2\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"CRPIX2\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"CDELT2\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"CRVAL2\"), 1e-12);\n\n        Map.Entry<Integer, Stokes.Parameters> e = Stokes.fromImageHeader(h);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n        h = new Header();\n        h.addValue(Standard.TDIMn.n(4), \"(2,4,3)\");\n        p.fillTableHeader(h, 3, 1);\n\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"2CTYP4\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"2CRPX4\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"2CDLT4\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"2CRVL4\"), 1e-12);\n\n        e = Stokes.fromTableHeader(h, 3);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n    }\n\n    @Test\n    public void testLinearCrossParameters() throws Exception {\n        Stokes.Parameters p = Stokes.parameters(Stokes.LINEAR_CROSS_POLARIZATION);\n\n        Assert.assertEquals(Stokes.XX, p.getParameter(0));\n        Assert.assertEquals(Stokes.YY, p.getParameter(1));\n        Assert.assertEquals(Stokes.XY, p.getParameter(2));\n        Assert.assertEquals(Stokes.YX, p.getParameter(3));\n\n        ArrayList<Stokes> l = p.getAvailableParameters();\n        Assert.assertEquals(4, l.size());\n        Assert.assertTrue(l.contains(Stokes.XX));\n        Assert.assertTrue(l.contains(Stokes.YY));\n        Assert.assertTrue(l.contains(Stokes.XY));\n        Assert.assertTrue(l.contains(Stokes.YX));\n\n        Assert.assertEquals(Stokes.XX, p.getParameter(0));\n        Assert.assertEquals(Stokes.YY, p.getParameter(1));\n        Assert.assertEquals(Stokes.XY, p.getParameter(2));\n        Assert.assertEquals(Stokes.YX, p.getParameter(3));\n\n        Assert.assertEquals(0, p.getArrayIndex(Stokes.XX));\n        Assert.assertEquals(1, p.getArrayIndex(Stokes.YY));\n        Assert.assertEquals(2, p.getArrayIndex(Stokes.XY));\n        Assert.assertEquals(3, p.getArrayIndex(Stokes.YX));\n\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 3);\n        p.fillImageHeader(h, 1);\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"CTYPE2\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"CRPIX2\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"CDELT2\"), 1e-12);\n        Assert.assertEquals(-5.0, h.getDoubleValue(\"CRVAL2\"), 1e-12);\n\n        Map.Entry<Integer, Stokes.Parameters> e = Stokes.fromImageHeader(h);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n        h = new Header();\n        h.addValue(Standard.TDIMn.n(4), \"(2,4,3)\");\n        p.fillTableHeader(h, 3, 1);\n\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"2CTYP4\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"2CRPX4\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"2CDLT4\"), 1e-12);\n        Assert.assertEquals(-5.0, h.getDoubleValue(\"2CRVL4\"), 1e-12);\n\n        e = Stokes.fromTableHeader(h, 3);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n    }\n\n    @Test\n    public void testFullCrossParameters() throws Exception {\n        Stokes.Parameters p = Stokes.parameters(Stokes.FULL_CROSS_POLARIZATION);\n\n        Assert.assertEquals(Stokes.RR, p.getParameter(0));\n        Assert.assertEquals(Stokes.LL, p.getParameter(1));\n        Assert.assertEquals(Stokes.RL, p.getParameter(2));\n        Assert.assertEquals(Stokes.LR, p.getParameter(3));\n        Assert.assertEquals(Stokes.XX, p.getParameter(4));\n        Assert.assertEquals(Stokes.YY, p.getParameter(5));\n        Assert.assertEquals(Stokes.XY, p.getParameter(6));\n        Assert.assertEquals(Stokes.YX, p.getParameter(7));\n\n        ArrayList<Stokes> l = p.getAvailableParameters();\n        Assert.assertEquals(8, l.size());\n        Assert.assertTrue(l.contains(Stokes.RR));\n        Assert.assertTrue(l.contains(Stokes.LL));\n        Assert.assertTrue(l.contains(Stokes.RL));\n        Assert.assertTrue(l.contains(Stokes.LR));\n        Assert.assertTrue(l.contains(Stokes.XX));\n        Assert.assertTrue(l.contains(Stokes.YY));\n        Assert.assertTrue(l.contains(Stokes.XY));\n        Assert.assertTrue(l.contains(Stokes.YX));\n\n        Assert.assertEquals(Stokes.RR, p.getParameter(0));\n        Assert.assertEquals(Stokes.LL, p.getParameter(1));\n        Assert.assertEquals(Stokes.RL, p.getParameter(2));\n        Assert.assertEquals(Stokes.LR, p.getParameter(3));\n        Assert.assertEquals(Stokes.XX, p.getParameter(4));\n        Assert.assertEquals(Stokes.YY, p.getParameter(5));\n        Assert.assertEquals(Stokes.XY, p.getParameter(6));\n        Assert.assertEquals(Stokes.YX, p.getParameter(7));\n\n        Assert.assertEquals(0, p.getArrayIndex(Stokes.RR));\n        Assert.assertEquals(1, p.getArrayIndex(Stokes.LL));\n        Assert.assertEquals(2, p.getArrayIndex(Stokes.RL));\n        Assert.assertEquals(3, p.getArrayIndex(Stokes.LR));\n        Assert.assertEquals(4, p.getArrayIndex(Stokes.XX));\n        Assert.assertEquals(5, p.getArrayIndex(Stokes.YY));\n        Assert.assertEquals(6, p.getArrayIndex(Stokes.XY));\n        Assert.assertEquals(7, p.getArrayIndex(Stokes.YX));\n\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 3);\n        h.addValue(Standard.NAXIS2, 8);\n        p.fillImageHeader(h, 1);\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"CTYPE2\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"CRPIX2\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"CDELT2\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"CRVAL2\"), 1e-12);\n\n        Map.Entry<Integer, Stokes.Parameters> e = Stokes.fromImageHeader(h);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n        h = new Header();\n        h.addValue(Standard.TDIMn.n(4), \"(2,8,3)\");\n        p.fillTableHeader(h, 3, 1);\n\n        Assert.assertEquals(\"STOKES\", h.getStringValue(\"2CTYP4\"));\n        Assert.assertEquals(0.0, h.getDoubleValue(\"2CRPX4\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"2CDLT4\"), 1e-12);\n        Assert.assertEquals(-1.0, h.getDoubleValue(\"2CRVL4\"), 1e-12);\n\n        e = Stokes.fromTableHeader(h, 3);\n        Assert.assertEquals(1, (int) e.getKey());\n        Assert.assertEquals(p.getClass(), e.getValue().getClass());\n\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testGetNegParameter() throws Exception {\n        Stokes.parameters().getParameter(-1);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testGetOutOfBoundsParameter() throws Exception {\n        Stokes.parameters().getParameter(4);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFillImageHeaderNoNAXIS() throws Exception {\n        Stokes.parameters().fillImageHeader(new Header(), 0);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFillTableHeaderNoTDIM() throws Exception {\n        Stokes.parameters().fillTableHeader(new Header(), 0, 0);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testFillImageHeaderNegIndex() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 3);\n        Stokes.parameters().fillImageHeader(h, -1);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testFillImageHeaderOutOfBoundsIndex() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 3);\n        Stokes.parameters().fillImageHeader(h, 3);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testFillTableHeaderInvalidColumn() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n        Stokes.parameters().fillTableHeader(h, -1, 0);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testFillTableHeaderNegIndex() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n        Stokes.parameters().fillTableHeader(h, 0, -1);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testFillTableHeaderOutOfBoundsIndex() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n        Stokes.parameters().fillTableHeader(h, 0, 3);\n    }\n\n    @Test\n    public void testFromImageHeaderNoStokes() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        Assert.assertNull(Stokes.fromImageHeader(h));\n    }\n\n    @Test\n    public void testFromTableHeaderNoStokes() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n        Assert.assertNull(Stokes.fromTableHeader(h, 0));\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromImageHeaderNoNAXIS() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n\n        Stokes.parameters().fillImageHeader(h, 0);\n        h.deleteKey(Standard.NAXIS);\n        Stokes.fromImageHeader(h);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromImageHeaderInvalidCRVAL() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n\n        Stokes.parameters().fillImageHeader(h, 0);\n        h.addValue(\"CRVAL1\", 0.0, null);\n        Stokes.fromImageHeader(h);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromImageHeaderInvalidCRPIX() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n\n        Stokes.parameters().fillImageHeader(h, 0);\n        h.addValue(\"CRPIX1\", 1.0, null);\n        Stokes.fromImageHeader(h);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromImageHeaderInvalidCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n\n        Stokes.parameters().fillImageHeader(h, 0);\n        h.addValue(\"CDELT1\", 2.0, null);\n        Stokes.fromImageHeader(h);\n    }\n\n    @Test(expected = IndexOutOfBoundsException.class)\n    public void testFromTableHeaderInvalidColumn() throws Exception {\n        Header h = new Header();\n        Stokes.fromTableHeader(h, -1);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromTableHeaderNoTDIM() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n\n        Stokes.parameters().fillTableHeader(h, 0, 0);\n        h.deleteKey(Standard.TDIMn.n(1));\n        Stokes.fromTableHeader(h, 0);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromTableHeaderInvalidCRVAL() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n\n        Stokes.parameters().fillTableHeader(h, 0, 0);\n        h.addValue(\"1CRVL1\", 0.0, null);\n        Stokes.fromTableHeader(h, 0);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromTableHeaderInvalidCRPIX() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n\n        Stokes.parameters().fillTableHeader(h, 0, 0);\n        h.addValue(\"1CRPX1\", 1.0, null);\n        Stokes.fromTableHeader(h, 0);\n    }\n\n    @Test(expected = FitsException.class)\n    public void testFromTableHeaderInvalidCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.TDIMn.n(1), \"(4)\");\n\n        Stokes.parameters().fillTableHeader(h, 0, 0);\n        h.addValue(\"1CDLT1\", 2.0, null);\n        Stokes.fromTableHeader(h, 0);\n    }\n\n    @Test\n    public void testParameters() throws Exception {\n        for (int i = 0; i < 8; i++) {\n            Stokes.Parameters p = Stokes.parameters(i);\n            Assert.assertEquals((i & Stokes.REVERSED_ORDER) != 0, p.isReversedOrder());\n            Assert.assertEquals((i & Stokes.FULL_CROSS_POLARIZATION) != 0, p.isCrossPolarization());\n\n            if (p.isCrossPolarization()) {\n                Assert.assertEquals((i & Stokes.CIRCULAR_CROSS_POLARIZATION) != 0, p.hasCircularPolarization());\n                Assert.assertEquals((i & Stokes.LINEAR_CROSS_POLARIZATION) != 0, p.hasLinearPolarization());\n            } else {\n                Assert.assertTrue(p.hasCircularPolarization());\n                Assert.assertTrue(p.hasLinearPolarization());\n            }\n\n        }\n    }\n\n    @Test\n    public void testReverseOrderHeaders() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.REVERSED_ORDER);\n        p0.fillImageHeader(h, 0);\n        Assert.assertEquals(p0, Stokes.fromImageHeader(h).getValue());\n\n        p0 = Stokes.parameters(Stokes.REVERSED_ORDER | Stokes.CIRCULAR_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        Assert.assertEquals(p0, Stokes.fromImageHeader(h).getValue());\n\n        p0 = Stokes.parameters(Stokes.REVERSED_ORDER | Stokes.LINEAR_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        Assert.assertEquals(p0, Stokes.fromImageHeader(h).getValue());\n\n        h.addValue(Standard.NAXIS1, 8);\n        p0 = Stokes.parameters(Stokes.REVERSED_ORDER | Stokes.FULL_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        Assert.assertEquals(p0, Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test(expected = FitsException.class)\n    public void testInvalidCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters();\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), -1.0);\n        Stokes.fromImageHeader(h).getValue();\n    }\n\n    @Test(expected = FitsException.class)\n    public void testInvalidCircularCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.CIRCULAR_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), 1.0);\n        Assert.assertNull(Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test(expected = FitsException.class)\n    public void testInvalidLinearCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.LINEAR_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), 1.0);\n        Assert.assertNull(Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test(expected = FitsException.class)\n    public void testInvalidFullCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 8);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.FULL_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), 1.0);\n        Assert.assertNull(Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test(expected = FitsException.class)\n    public void testReverseOrderInvalidCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.REVERSED_ORDER);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), 1.0);\n        Stokes.fromImageHeader(h).getValue();\n    }\n\n    @Test(expected = FitsException.class)\n    public void testReverseOrderInvalidCircularCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.REVERSED_ORDER | Stokes.CIRCULAR_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), -1.0);\n        Assert.assertNull(Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test(expected = FitsException.class)\n    public void testReverseOrderInvalidLinearCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 4);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.REVERSED_ORDER | Stokes.LINEAR_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), -1.0);\n        Assert.assertNull(Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test(expected = FitsException.class)\n    public void testReverseOrderInvalidFullCDELT() throws Exception {\n        Header h = new Header();\n        h.addValue(Standard.NAXIS, 1);\n        h.addValue(Standard.NAXIS1, 8);\n\n        Stokes.Parameters p0 = Stokes.parameters(Stokes.REVERSED_ORDER | Stokes.FULL_CROSS_POLARIZATION);\n        p0.fillImageHeader(h, 0);\n        h.addValue(Standard.CDELTn.n(1), -1.0);\n        Assert.assertNull(Stokes.fromImageHeader(h).getValue());\n    }\n\n    @Test\n    public void testEqualsNull() throws Exception {\n        Assert.assertFalse(Stokes.parameters().equals(null));\n    }\n\n    @Test\n    public void testEqualsOther() throws Exception {\n        Assert.assertFalse(Stokes.parameters().equals(\"blah\"));\n    }\n\n    @Test\n    public void testEquals() throws Exception {\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 8; j++) {\n                Assert.assertEquals(i + \", \" + j, (i == j), Stokes.parameters(i).equals(Stokes.parameters(j)));\n            }\n        }\n    }\n}"
