[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "nom-tam-fits/nom-tam-fits"
sha = "ef5e60895f98eaba44b4220e64407394b05f44ff"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=FitsDecoderTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.FitsDecoder  -DtargetTests=**.FitsDecoderTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 73.0
original_coverage = 73.0
mutation_kill_rate = 40.0
original_mutation_kill_rate = 40.0
covered_lines = [ 71, 72, 89, 108, 109, 111, 140, 141, 143, 156, 157, 158, 160, 187, 188, 189, 191, 204, 205, 279, 281, 282, 283, 284, 286, 288, 289, 291, 292, 293, 311, 312, 315, 316, 318, 319, 344, 345, 348, 349, 351, 352, 355, 356, 359, 381, 382, 385, 386, 387, 389, 390, 397, 398, 421, 438, 439, 455, 472, 489, 490, 495, 496, 498, 499, 502, 503, 509, 510, 511, 513, 516, 519, 522, 523, 525, 528, 531, 532, 534, 535, 538, 539, 542, 544, 545, 546, 547,]
missed_lines = [ 62, 63, 125, 139, 173, 219, 220, 234, 235, 249, 250, 264, 265, 322, 323, 326, 393, 394, 396, 399, 400, 401, 405, 422, 456, 473, 504, 514, 517, 520, 526, 529, 549,]

[input_info]
test_file_path = "src/test/java/nom/tam/util/FitsDecoderTest.java"
focal_file_path = "src/main/java/nom/tam/util/FitsDecoder.java"
test_file_url = "https://github.com/nom-tam-fits/nom-tam-fits/blob/ef5e60895f98eaba44b4220e64407394b05f44ff/src/test/java/nom/tam/util/FitsDecoderTest.java"
focal_file_url = "https://github.com/nom-tam-fits/nom-tam-fits/blob/ef5e60895f98eaba44b4220e64407394b05f44ff/src/main/java/nom/tam/util/FitsDecoder.java"
first_commit_date = "2021-10-30"
last_commit_date = "2024-01-15"
test_file_content = "\npackage nom.tam.util;\n\n/*\n * #%L\n * nom.tam FITS library\n * %%\n * Copyright (C) 1996 - 2024 nom-tam-fits\n * %%\n * This is free and unencumbered software released into the public domain.\n *\n * Anyone is free to copy, modify, publish, use, compile, sell, or\n * distribute this software, either in source code form or as a compiled\n * binary, for any purpose, commercial or non-commercial, and by any\n * means.\n *\n * In jurisdictions that recognize copyright laws, the author or authors\n * of this software dedicate any and all copyright interest in the\n * software to the public domain. We make this dedication for the benefit\n * of the public at large and to the detriment of our heirs and\n * successors. We intend this dedication to be an overt act of\n * relinquishment in perpetuity of all present and future rights to this\n * software under copyright law.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n * #L%\n */\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\n\nimport org.junit.After;\nimport org.junit.Test;\n\nimport nom.tam.fits.FitsFactory;\n\npublic class FitsDecoderTest {\n\n    @After\n    public void setDefaults() {\n        FitsFactory.setDefaults();\n    }\n\n    @Test\n    public void testIncompleteReadByteArray() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        byte[] need = new byte[101];\n        assertEquals(data.length, e.read(need, 0, need.length));\n    }\n\n    @Test\n    public void testIncompleteReadBooleanObjectArray() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        Boolean[] b = new Boolean[data.length + 1];\n        assertEquals(data.length, e.readArray(b));\n    }\n\n    @Test\n    public void testIncompleteReadObjectArray() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        Boolean[] b = new Boolean[1];\n        Object[] array = new Object[] {data, b};\n        assertEquals(data.length, e.readArray(array));\n    }\n\n    @Test(expected = EOFException.class)\n    public void testIncomleteReadFully() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        byte[] need = new byte[101];\n        e.readFully(need, 0, need.length);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testIncomleteReadArrayFully() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        int[] need = new int[26];\n        e.readArrayFully(need);\n    }\n\n    @Test\n    public void testReadNullArray() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readArray(null);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testReadInvalidArray() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        Object[] array = new Object[] {new BigInteger(\"123235536566547747\")};\n        e.readArray(array);\n    }\n\n    @Test\n    public void testByteOrder() throws Exception {\n        byte[] data = new byte[100];\n\n        ByteBuffer b = ByteBuffer.wrap(data);\n        b.putDouble(Math.PI);\n        b.order(ByteOrder.LITTLE_ENDIAN);\n        b.putDouble(Math.PI);\n\n        double[] d = new double[2];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readArray(d);\n\n        assertEquals(\"BE\", Math.PI, d[0], 1e-12);\n        assertNotEquals(\"!BE\", Math.PI, d[1], 1e-12);\n\n        e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.getInputBuffer().setByteOrder(ByteOrder.LITTLE_ENDIAN);\n        e.read(d, 0, d.length);\n\n        assertEquals(\"byteorder\", ByteOrder.LITTLE_ENDIAN, e.getInputBuffer().byteOrder());\n        assertNotEquals(\"!LE\", Math.PI, d[0], 1e-12);\n        assertEquals(\"LE\", Math.PI, d[1], 1e-12);\n    }\n\n    @Test\n    public void testBoolean() throws Exception {\n        byte[] data = new byte[] {'T', 'F', 0, 1, 2};\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        Boolean[] b = new Boolean[data.length];\n        e.read(b, 0, b.length);\n\n        assertTrue(\"T\", b[0]);\n        assertFalse(\"F\", b[1]);\n        assertNull(\"0\", b[2]);\n        assertTrue(\"1\", b[3]); // alternative non-standard 'true'\n        assertFalse(\"2\", b[4]); // everything else 'false'\n    }\n\n    @Test(expected = EOFException.class)\n    public void testReadByteEOF() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        for (int i = 0; i < data.length; i++) {\n            assertEquals(0, e.readByte());\n        }\n        e.readByte(); // should throw exception.\n    }\n\n    @Test(expected = EOFException.class)\n    public void testReadShortEOF() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        int n = data.length >>> 1;\n        for (int i = 0; i < n; i++) {\n            assertEquals(0, e.readShort());\n        }\n        e.readShort(); // should throw exception.\n\n    }\n\n    @Test(expected = EOFException.class)\n    public void testReadCharEOF() throws Exception {\n        FitsFactory.setUseUnicodeChars(false);\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        int n = data.length;\n        for (int i = 0; i < n; i++) {\n            assertEquals(0, e.readChar());\n        }\n        e.readChar(); // should throw exception.\n    }\n\n    @Test(expected = EOFException.class)\n    public void testBooleanArrayUnexpectedReadEOF1() throws Exception {\n        FitsDecoder e = new FitsDecoder(new EOFExceptionInputReader());\n\n        e.read(new boolean[1], 0, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testBooleanArrayUnexpectedReadEOF2() throws Exception {\n        FitsDecoder e = new FitsDecoder(new EOFExceptionInputReader());\n\n        e.read(new Boolean[1], 0, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testShortArrayUnexpectedReadEOF() throws Exception {\n        FitsDecoder e = new FitsDecoder(new EOFExceptionInputReader());\n\n        e.read(new short[1], 0, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testCharArrayUnexpectedReadEOF() throws Exception {\n        FitsDecoder e = new FitsDecoder(new EOFExceptionInputReader());\n        e.read(new char[1], 0, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testBooleanArrayEOFAtStart() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new boolean[10], 0, 10);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testBooleanObjectsEOFAtStart() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new Boolean[10], 0, 10);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testAsciiLineEOFAtStart() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.readAsciiLine();\n    }\n\n    @Test\n    public void testAsciiLineReadToEOF() throws Exception {\n        byte[] data = {(byte) 'a', (byte) 'b', (byte) 'c'};\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        assertEquals(data.length, e.readAsciiLine().length());\n    }\n\n    @Test\n    public void testAsciiLineReadDelimited() throws Exception {\n        byte[] data = \"one\\ntwo\".getBytes();\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        assertEquals(\"one\", e.readAsciiLine());\n    }\n\n    @Test\n    public void testReadEmptyBoolean() throws Exception {\n        byte[] data = new byte[10];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        assertEquals(0, e.read(new boolean[10], 5, 0));\n    }\n\n    @Test\n    public void testReadEmptyBooleanObject() throws Exception {\n        byte[] data = new byte[10];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        assertEquals(0, e.read(new Boolean[10], 5, 0));\n    }\n\n    @Test\n    public void testReadEmptyChars() throws Exception {\n        byte[] data = new byte[10];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        assertEquals(0, e.read(new char[10], 5, 0));\n    }\n\n    @Test(expected = EOFException.class)\n    public void testCharsEOFAtStart() throws Exception {\n        FitsFactory.setUseUnicodeChars(false);\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new char[10], 0, 10);\n    }\n\n    @Test\n    public void testGetByte() throws Exception {\n        byte[] data = new byte[100];\n        for (int i = 0; i < data.length; i++) {\n            data[i] = (byte) i;\n        }\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.getInputBuffer().loadBytes(data.length, 1);\n        for (int i = 0; i < data.length; i++) {\n            assertEquals(i, e.getInputBuffer().get());\n        }\n    }\n\n    @Test\n    public void testGetByteEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.getInputBuffer().loadBytes(data.length, 2);\n        e.read();\n        assertEquals(-1, e.getInputBuffer().get());\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetShortsEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new short[10], 5, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetIntsEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new int[10], 5, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetLongsEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new long[10], 5, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetFloatsEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new float[10], 5, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetDoublesEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.read(new double[10], 5, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetSingleByteEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.getInputBuffer().loadBytes(2, 1);\n        e.read();\n        e.getInputBuffer().get(new byte[10], 5, 1);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testGetBytesEOF() throws Exception {\n        byte[] data = new byte[1];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.read();\n        e.getInputBuffer().loadBytes(11, 1);\n        e.getInputBuffer().get(new byte[10], 0, 10);\n    }\n\n    @Test\n    public void testGetBytesPartial() throws Exception {\n        byte[] data = new byte[9];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.getInputBuffer().loadBytes(10, 1);\n        assertEquals(9, e.getInputBuffer().get(new byte[10], 0, 10));\n    }\n\n    @Test\n    public void testGetMixed() throws Exception {\n        byte[] data = new byte[400];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.getInputBuffer().loadBytes(400, 1);\n        assertEquals(1, e.getInputBuffer().get(new byte[10], 5, 1));\n\n        // no view / wrong view (single element)\n        assertEquals(1, e.getInputBuffer().get(new short[10], 5, 1));\n        // creates view (multiple elements)\n        assertEquals(2, e.getInputBuffer().get(new short[10], 5, 2));\n        // uses existing view (multiple elements)\n        assertEquals(2, e.getInputBuffer().get(new short[10], 5, 2));\n        // using view for single element\n        assertEquals(1, e.getInputBuffer().get(new short[10], 5, 1));\n\n        assertEquals(1, e.getInputBuffer().get(new int[10], 5, 1));\n        assertEquals(2, e.getInputBuffer().get(new int[10], 5, 2));\n        assertEquals(2, e.getInputBuffer().get(new int[10], 5, 2));\n        assertEquals(1, e.getInputBuffer().get(new int[10], 5, 1));\n\n        assertEquals(1, e.getInputBuffer().get(new long[10], 5, 1));\n        assertEquals(2, e.getInputBuffer().get(new long[10], 5, 2));\n        assertEquals(2, e.getInputBuffer().get(new long[10], 5, 2));\n        assertEquals(1, e.getInputBuffer().get(new long[10], 5, 1));\n\n        assertEquals(1, e.getInputBuffer().get(new float[10], 5, 1));\n        assertEquals(2, e.getInputBuffer().get(new float[10], 5, 2));\n        assertEquals(2, e.getInputBuffer().get(new float[10], 5, 2));\n        assertEquals(1, e.getInputBuffer().get(new float[10], 5, 1));\n\n        assertEquals(1, e.getInputBuffer().get(new double[10], 5, 1));\n        assertEquals(2, e.getInputBuffer().get(new double[10], 5, 2));\n        assertEquals(2, e.getInputBuffer().get(new double[10], 5, 2));\n        assertEquals(1, e.getInputBuffer().get(new double[10], 5, 1));\n\n        assertEquals(1, e.getInputBuffer().get(new short[10], 5, 1));\n        assertEquals(2, e.getInputBuffer().get(new short[10], 5, 2));\n        assertEquals(2, e.getInputBuffer().get(new short[10], 5, 2));\n        assertEquals(1, e.getInputBuffer().get(new short[10], 5, 1));\n    }\n\n    @Test\n    public void testReadNullImage() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readImage(null);\n        // No exception.\n    }\n\n    @Test\n    public void testReadEmptyImage() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readImage(new Object[] {new byte[10], new double[0]});\n        // No exception.\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testReadImageNotArray() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readImage(new File(\"blah\"));\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testReadNonImage() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readImage(new boolean[10]);\n    }\n\n    @Test\n    public void testReadZeroLengthImage() throws Exception {\n        byte[] data = new byte[100];\n        FitsDecoder e = new FitsDecoder(InputReader.from(new ByteArrayInputStream(data)));\n        e.readImage(new byte[0]);\n        // No exception\n    }\n\n    private static class EOFExceptionInputReader implements InputReader {\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            return -1;\n        }\n\n        @Override\n        public int read() throws IOException {\n            return -1;\n        }\n    }\n}\n"
