[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pex-tool/pex"
sha = "17bd416647eaca978e538408f1ec21813ab26335"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r docs-requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=pex/resolve/pep_691/fingerprint_service.py -m pytest -q --junit-xml=test_output.xml tests/resolve/pep_691/test_fingerprint_service.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target pex.resolve.pep_691.fingerprint_service --unit-test tests.resolve.pep_691.test_fingerprint_service --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target pex/resolve/pep_691/fingerprint_service.py --unit-test tests/resolve/pep_691/test_fingerprint_service.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 37.0
original_coverage = 88.0
mutation_kill_rate = nan
original_mutation_kill_rate = 78.0
covered_lines = [ 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 30, 33, 34, 35, 36, 39, 40, 41, 42, 49, 50, 51, 53, 54, 58, 68, 69, 87, 111, 130, 134, 135, 148,]
missed_lines = [ 26, 28, 47, 56, 71, 74, 75, 76, 79, 81, 82, 83, 84, 85, 90, 91, 92, 95, 96, 97, 98, 106, 107, 114, 117, 118, 132, 139, 169, 170, 171, 172, 174, 176, 177, 179, 180, 181, 182, 186, 187, 188, 189, 190, 198, 199, 201, 205, 213, 214, 215, 217, 218, 220, 221, 222, 223, 226, 228, 229, 230, 231, 233, 234, 235, 236, 244, 245, 247, 248, 250, 251, 252, 253,]

[input_info]
test_file_path = "tests/resolve/pep_691/test_fingerprint_service.py"
focal_file_path = "pex/resolve/pep_691/fingerprint_service.py"
test_file_url = "https://github.com/pex-tool/pex/blob/17bd416647eaca978e538408f1ec21813ab26335/tests/resolve/pep_691/test_fingerprint_service.py"
focal_file_url = "https://github.com/pex-tool/pex/blob/17bd416647eaca978e538408f1ec21813ab26335/pex/resolve/pep_691/fingerprint_service.py"
first_commit_date = "2022-08-19"
last_commit_date = "2025-02-22"
test_file_content = "# Copyright 2022 Pants project contributors (see CONTRIBUTORS.md).\n# Licensed under the Apache License, Version 2.0 (see LICENSE).\n\nimport os.path\n\nimport pytest\n\ntry:\n    from unittest import mock\nexcept ImportError:\n    import mock  # type: ignore[no-redef,import]\n\nfrom pex.compatibility import urlparse\nfrom pex.pep_440 import Version\nfrom pex.pep_503 import ProjectName\nfrom pex.resolve.pep_691.api import Client\nfrom pex.resolve.pep_691.fingerprint_service import FingerprintService\nfrom pex.resolve.pep_691.model import Endpoint, File, Meta, Project\nfrom pex.resolve.resolved_requirement import ArtifactURL, Fingerprint, PartialArtifact\nfrom pex.sorted_tuple import SortedTuple\nfrom pex.typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from typing import Any\n\n\nENDPOINT = Endpoint(\"https://example.org/simple/foo\", \"x/y\")\n\n\n@pytest.fixture\ndef database_path(tmpdir):\n    # type: (Any) -> str\n    return os.path.join(str(tmpdir), \"fingerprints.db\")\n\n\ndef file(\n    url,  # type: str\n    **hashes  # type: str\n):\n    # type: (...) -> File\n    return File(\n        filename=os.path.basename(urlparse.urlparse(url).path),\n        url=ArtifactURL.parse(url),\n        hashes=SortedTuple(\n            Fingerprint(algorithm=algorithm, hash=hash_) for algorithm, hash_ in hashes.items()\n        ),\n    )\n\n\ndef create_project(\n    name,  # type: str\n    *files  # type: File\n):\n    # type: (...) -> Project\n    return Project(\n        name=ProjectName(name), files=SortedTuple(files), meta=Meta(api_version=Version(\"1.0\"))\n    )\n\n\ndef test_no_fingerprints(database_path):\n    # type: (str) -> None\n\n    with mock.patch.object(Client, \"request\", return_value=create_project(\"foo\")) as request:\n        fingerprint_service = FingerprintService(path=database_path)\n        artifacts = list(\n            fingerprint_service.fingerprint(\n                endpoints={ENDPOINT},\n                artifacts=[PartialArtifact(url=\"https://files.example.org/foo\")],\n            )\n        )\n        assert [PartialArtifact(url=\"https://files.example.org/foo\")] == artifacts\n    request.assert_called_once_with(ENDPOINT)\n\n\ndef test_no_matching_fingerprints(database_path):\n    # type: (str) -> None\n\n    with mock.patch.object(\n        Client,\n        \"request\",\n        return_value=create_project(\n            \"foo\",\n            file(\"https://files.example.org/foo-1.0.tar.gz\", md5=\"weak\"),\n            file(\"https://files.example.org/foo-2.0.tar.gz\", sha256=\"strong\"),\n        ),\n    ) as request:\n        fingerprint_service = FingerprintService(path=database_path)\n        artifacts = list(\n            fingerprint_service.fingerprint(\n                endpoints={ENDPOINT},\n                artifacts=[PartialArtifact(url=\"https://files.example.org/foo-1.1.tar.gz\")],\n            )\n        )\n        assert [PartialArtifact(url=\"https://files.example.org/foo-1.1.tar.gz\")] == artifacts\n    request.assert_called_once_with(ENDPOINT)\n\n\ndef test_cache_miss_retries(database_path):\n    # type: (Any) -> None\n\n    endpoint = Endpoint(\"https://example.org/simple/foo\", \"x/y\")\n    attempts = 3\n\n    with mock.patch.object(\n        Client,\n        \"request\",\n        return_value=create_project(\n            \"foo\",\n            file(\"https://files.example.org/foo-1.0.tar.gz\", md5=\"weak\"),\n            file(\"https://files.example.org/foo-2.0.tar.gz\", sha256=\"strong\"),\n        ),\n    ) as request:\n        fingerprint_service = FingerprintService(path=database_path)\n        for _ in range(attempts):\n\n            artifacts = list(\n                fingerprint_service.fingerprint(\n                    endpoints={endpoint},\n                    artifacts=[PartialArtifact(url=\"https://files.example.org/foo-1.1.tar.gz\")],\n                )\n            )\n            assert [PartialArtifact(url=\"https://files.example.org/foo-1.1.tar.gz\")] == artifacts\n\n    # We shouldn't cache misses.\n    request.assert_has_calls([mock.call(endpoint) for _ in range(attempts)])\n\n\ndef test_cache_hit(tmpdir):\n    # type: (Any) -> None\n\n    database_path = os.path.join(str(tmpdir), \"fingerprints.db\")\n    endpoint = Endpoint(\"https://example.org/simple/foo\", \"x/y\")\n    initial_artifact = PartialArtifact(url=\"https://files.example.org/foo-1.1.tar.gz\")\n    expected_artifact = PartialArtifact(\n        url=\"https://files.example.org/foo-1.1.tar.gz\",\n        fingerprint=Fingerprint(algorithm=\"md5\", hash=\"weak\"),\n    )\n\n    with mock.patch.object(\n        Client,\n        \"request\",\n        return_value=create_project(\n            \"foo\", file(\"https://files.example.org/foo-1.1.tar.gz\", md5=\"weak\")\n        ),\n    ) as request:\n        fingerprint_service = FingerprintService(path=database_path)\n        for _ in range(3):\n            artifacts = list(\n                fingerprint_service.fingerprint(endpoints={endpoint}, artifacts=[initial_artifact])\n            )\n            assert [expected_artifact] == artifacts\n\n        # We should cache the hit and not need to call the API again.\n        request.assert_called_once_with(endpoint)\n\n        # Unless the cache is wiped out.\n        os.unlink(database_path)\n        request.reset_mock()\n        assert [expected_artifact] == list(\n            fingerprint_service.fingerprint(endpoints={endpoint}, artifacts=[initial_artifact])\n        )\n        request.assert_called_once_with(endpoint)\n\n\ndef test_mixed(database_path):\n    # type: (str) -> None\n\n    responses = {\n        Endpoint(\"https://example.org/simple/foo\", \"a/b\"): create_project(\n            \"foo\",\n            file(\"https://files.example.org/foo-1.0.tar.gz\", md5=\"weak\"),\n            file(\"https://files.example.org/foo-2.0.tar.gz\", sha256=\"strong\", sha384=\"fancy\"),\n        ),\n        Endpoint(\"https://example.org/simple/bar\", \"x/y\"): create_project(\n            \"bar\", file(\"https://files.example.org/bar-1.1.tar.gz\", sha1=\"middling\", sha384=\"fancy\")\n        ),\n    }\n\n    with mock.patch.object(Client, \"request\", side_effect=responses.get) as request:\n        fingerprint_service = FingerprintService(path=database_path)\n        artifacts = sorted(\n            fingerprint_service.fingerprint(\n                endpoints=set(responses),\n                artifacts=[\n                    PartialArtifact(url=\"https://files.example.org/foo-1.0.tar.gz\"),\n                    PartialArtifact(url=\"https://files.example.org/foo-2.0.tar.gz\"),\n                    PartialArtifact(url=\"https://files.example.org/bar-1.1.tar.gz\"),\n                    PartialArtifact(url=\"https://files.example.org/baz-2.0.tar.gz\"),\n                ],\n            )\n        )\n        assert (\n            sorted(\n                [\n                    PartialArtifact(\n                        url=\"https://files.example.org/foo-1.0.tar.gz\",\n                        fingerprint=Fingerprint(\"md5\", \"weak\"),\n                    ),\n                    PartialArtifact(\n                        url=\"https://files.example.org/foo-2.0.tar.gz\",\n                        fingerprint=Fingerprint(\"sha256\", \"strong\"),\n                    ),\n                    PartialArtifact(\n                        url=\"https://files.example.org/bar-1.1.tar.gz\",\n                        fingerprint=Fingerprint(\"sha384\", \"fancy\"),\n                    ),\n                    PartialArtifact(url=\"https://files.example.org/baz-2.0.tar.gz\"),\n                ]\n            )\n            == artifacts\n        )\n    request.assert_has_calls([mock.call(endpoint) for endpoint in responses], any_order=True)"
