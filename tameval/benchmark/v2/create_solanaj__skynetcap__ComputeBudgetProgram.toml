[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_version = "17"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "skynetcap/solanaj"
sha = "b0f095290e5a1cdd1528bb50615cc56dc0add467"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=ComputeBudgetProgramTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.ComputeBudgetProgram  -DtargetTests=**.ComputeBudgetProgramTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 96.0
original_coverage = 96.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 16, 17, 31, 32, 42, 43, 53, 54, 64, 65, 69, 70, 72, 73, 75, 79, 80, 82, 83, 85, 89, 90, 91, 92, 93,]
missed_lines = [ 13,]

[input_info]
test_file_path = "src/test/java/org/p2p/solanaj/programs/ComputeBudgetProgramTest.java"
focal_file_path = "src/main/java/org/p2p/solanaj/programs/ComputeBudgetProgram.java"
test_file_url = "https://github.com/skynetcap/solanaj/blob/b0f095290e5a1cdd1528bb50615cc56dc0add467/src/test/java/org/p2p/solanaj/programs/ComputeBudgetProgramTest.java"
focal_file_url = "https://github.com/skynetcap/solanaj/blob/b0f095290e5a1cdd1528bb50615cc56dc0add467/src/main/java/org/p2p/solanaj/programs/ComputeBudgetProgram.java"
first_commit_date = "2023-01-16"
last_commit_date = "2024-09-06"
test_file_content = "package org.p2p.solanaj.programs;\n\nimport org.junit.jupiter.api.Test;\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.p2p.solanaj.core.TransactionInstruction;\n\n/**\n * Test class for ComputeBudgetProgram.\n * This class contains unit tests for various methods in the ComputeBudgetProgram class.\n */\npublic class ComputeBudgetProgramTest {\n\n    /**\n     * Test the setComputeUnitPrice method of ComputeBudgetProgram.\n     * Verifies that the instruction is created correctly with the right program ID, keys, and data.\n     */\n    @Test\n    public void testSetComputeUnitPrice() {\n        int microLamports = 1000;\n        TransactionInstruction instruction = ComputeBudgetProgram.setComputeUnitPrice(microLamports);\n\n        assertEquals(ComputeBudgetProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(0, instruction.getKeys().size());\n\n        byte[] expectedData = new byte[]{0x03, (byte) 0xE8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n\n    /**\n     * Test the setComputeUnitLimit method of ComputeBudgetProgram.\n     * Verifies that the instruction is created correctly with the right program ID, keys, and data.\n     */\n    @Test\n    public void testSetComputeUnitLimit() {\n        int units = 200000;\n        TransactionInstruction instruction = ComputeBudgetProgram.setComputeUnitLimit(units);\n\n        assertEquals(ComputeBudgetProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(0, instruction.getKeys().size());\n\n        byte[] expectedData = new byte[]{0x02, 0x40, 0x0D, 0x03, 0x00};\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n\n    /**\n     * Test the requestHeapFrame method of ComputeBudgetProgram.\n     * Verifies that the instruction is created correctly with the right program ID, keys, and data.\n     */\n    @Test\n    public void testRequestHeapFrame() {\n        int bytes = 32768;\n        TransactionInstruction instruction = ComputeBudgetProgram.requestHeapFrame(bytes);\n\n        assertEquals(ComputeBudgetProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(0, instruction.getKeys().size());\n\n        byte[] expectedData = new byte[]{0x01, 0x00, (byte) 0x80, 0x00, 0x00};\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n\n    /**\n     * Test the setLoadedAccountsDataSizeLimit method of ComputeBudgetProgram.\n     * Verifies that the instruction is created correctly with the right program ID, keys, and data.\n     */\n    @Test\n    public void testSetLoadedAccountsDataSizeLimit() {\n        int bytes = 65536;\n        TransactionInstruction instruction = ComputeBudgetProgram.setLoadedAccountsDataSizeLimit(bytes);\n\n        assertEquals(ComputeBudgetProgram.PROGRAM_ID, instruction.getProgramId());\n        assertEquals(0, instruction.getKeys().size());\n\n        byte[] expectedData = new byte[]{0x04, 0x00, 0x00, 0x01, 0x00};\n        assertArrayEquals(expectedData, instruction.getData());\n    }\n}\n"
