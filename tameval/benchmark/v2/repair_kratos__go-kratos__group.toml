[meta]
task = "repair"
scenario = "repair_duplicate_entity"

[lang_info]
lang = "Go"
go_version = "1.21"

[repo_info]
repository = "go-kratos/kratos"
sha = "025c2dc2b0ffabe45620f6be2b6de6f6505760bc"
bench_version = 1

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/group/group.go internal/group/group_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/group/group.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 82.0
mutation_kill_rate = nan
original_mutation_kill_rate = 72.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "internal/group/group_test.go"
focal_file_path = "internal/group/group.go"
test_file_url = "https://github.com/go-kratos/kratos/blob/025c2dc2b0ffabe45620f6be2b6de6f6505760bc/internal/group/group_test.go"
focal_file_url = "https://github.com/go-kratos/kratos/blob/025c2dc2b0ffabe45620f6be2b6de6f6505760bc/internal/group/group.go"
first_commit_date = "2022-02-19"
last_commit_date = "2025-03-07"
test_file_content = "package group\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n)\n\nfunc TestGroupGet(t *testing.T) {\n\tcount := 0\n\tg := NewGroup(func() any {\n\t\tcount++\n\t\treturn count\n\t})\n\tv := g.Get(\"key_0\")\n\tif !reflect.DeepEqual(v.(int), 1) {\n\t\tt.Errorf(\"expect 1, actual %v\", v)\n\t}\n\n\tv = g.Get(\"key_1\")\n\tif !reflect.DeepEqual(v.(int), 2) {\n\t\tt.Errorf(\"expect 2, actual %v\", v)\n\t}\n\n\tv = g.Get(\"key_0\")\n\tif !reflect.DeepEqual(v.(int), 1) {\n\t\tt.Errorf(\"expect 1, actual %v\", v)\n\t}\n\tif !reflect.DeepEqual(count, 2) {\n\t\tt.Errorf(\"expect count 2, actual %v\", count)\n\t}\n}\n\nfunc TestGroupReset(t *testing.T) {\n\tg := NewGroup(func() any {\n\t\treturn 1\n\t})\n\tg.Get(\"key\")\n\tcall := false\n\tg.Reset(func() any {\n\t\tcall = true\n\t\treturn 1\n\t})\n\n\tlength := 0\n\tfor range g.vals {\n\t\tlength++\n\t}\n\tif !reflect.DeepEqual(length, 0) {\n\t\tt.Errorf(\"expect length 0, actual %v\", length)\n\t}\n\n\tg.Get(\"key\")\n\tif !reflect.DeepEqual(call, true) {\n\t\tt.Errorf(\"expect call true, actual %v\", call)\n\t}\n}\n\nfunc TestGroupClear(t *testing.T) {\n\tg := NewGroup(func() any {\n\t\treturn 1\n\t})\n\tg.Get(\"key\")\n\tlength := 0\n\tfor range g.vals {\n\t\tlength++\n\t}\n\tif !reflect.DeepEqual(length, 1) {\n\t\tt.Errorf(\"expect length 1, actual %v\", length)\n\t}\n\n\tg.Clear()\n\tlength = 0\n\tfor range g.vals {\n\t\tlength++\n\t}\n\tif !reflect.DeepEqual(length, 0) {\n\t\tt.Errorf(\"expect length 0, actual %v\", length)\n\t}\n}\n\nfunc TestGroupClear(t *testing.T) {\n\tg := NewGroup(func() any {\n\t\treturn 1\n\t})\n\tg.Get(\"key\")\n\tlength := 0\n\tfor range g.vals {\n\t\tlength++\n\t}\n\tif !reflect.DeepEqual(length, 1) {\n\t\tt.Errorf(\"expect length 1, actual %v\", length)\n\t}\n\n\tg.Clear()\n\tlength = 0\n\tfor range g.vals {\n\t\tlength++\n\t}\n\tif !reflect.DeepEqual(length, 0) {\n\t\tt.Errorf(\"expect length 0, actual %v\", length)\n\t}\n}"
