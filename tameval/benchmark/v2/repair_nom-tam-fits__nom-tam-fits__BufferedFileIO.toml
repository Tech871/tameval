[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "nom-tam-fits/nom-tam-fits"
sha = "ef5e60895f98eaba44b4220e64407394b05f44ff"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=BufferedFileIOTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.BufferedFileIO  -DtargetTests=**.BufferedFileIOTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 78.0
original_coverage = 78.0
mutation_kill_rate = 36.0
original_mutation_kill_rate = 36.0
covered_lines = [ 89, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 120, 121, 124, 126, 128, 131, 134, 137, 138, 142, 144, 145, 168, 177, 188, 189, 201, 202, 205, 206, 210, 211, 227, 230, 242, 243, 245, 257, 258, 260, 262, 263, 266, 267, 271, 272, 280, 281, 289, 290, 307, 308, 312, 313, 317, 318, 319, 321, 322, 326, 327, 330, 332, 335, 336, 338, 340, 342, 346, 348, 352, 357, 361, 362, 365, 367, 368, 369, 370, 373, 374, 379, 380, 381, 383, 384, 385, 387, 389, 391, 392, 396, 401, 409, 411, 412, 413, 416, 418, 420, 421, 422, 423, 454, 455, 456, 457, 459, 460, 461, 509, 511, 513, 514, 547, 548, 552, 557, 558,]
missed_lines = [ 156, 213, 228, 294, 295, 296, 297, 298, 299, 358, 376, 398, 403, 404, 405, 406, 425, 438, 439, 462, 472, 473, 474, 475, 486, 487, 488, 489, 503, 505, 506, 528, 539, 540,]

[input_info]
test_file_path = "src/test/java/nom/tam/util/BufferedFileIOTest.java"
focal_file_path = "src/main/java/nom/tam/util/BufferedFileIO.java"
test_file_url = "https://github.com/nom-tam-fits/nom-tam-fits/blob/ef5e60895f98eaba44b4220e64407394b05f44ff/src/test/java/nom/tam/util/BufferedFileIOTest.java"
focal_file_url = "https://github.com/nom-tam-fits/nom-tam-fits/blob/ef5e60895f98eaba44b4220e64407394b05f44ff/src/main/java/nom/tam/util/BufferedFileIO.java"
first_commit_date = "2021-10-30"
last_commit_date = "2024-01-15"
test_file_content = "package nom.tam.util;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.EOFException;\nimport java.io.File;\n\nimport org.junit.After;\nimport org.junit.Test;\n\npublic class BufferedFileIOTest {\n\n    private String fileName = \"target/biotest.bin\";\n\n    private File getFile() {\n        return new File(fileName);\n    }\n\n    @After\n    public void cleanup() {\n        getFile().delete();\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testNegativeSeek() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        b.seek(-1);\n    }\n\n    @Test\n    public void testGetFD() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        assertNotNull(b.getFD());\n    }\n\n    @Test\n    public void testNotAvailable() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n\n        b.setLength(10);\n        assertEquals(\"length\", 10, b.length());\n\n        assertTrue(b.hasAvailable(10));\n        assertFalse(b.hasAvailable(11));\n    }\n\n    @Test\n    public void testCheckAvailability() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n\n        b.setLength(10);\n        assertEquals(\"length\", 10, b.length());\n\n        assertTrue(b.hasAvailable(10));\n        assertFalse(b.hasAvailable(11));\n    }\n\n    @Test\n    public void testTruncate() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n\n        b.setLength(10);\n        assertEquals(\"length\", 10, b.length());\n\n        b.seek(10);\n        assertEquals(\"end-pointer\", 10, b.getFilePointer());\n\n        b.setLength(9);\n        assertEquals(\"truncated-length\", 9, b.length());\n        assertEquals(\"truncated-pointer\", 9, b.getFilePointer());\n    }\n\n    @Test\n    public void testResizeFile() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n\n        b.setLength(10);\n        assertEquals(\"length\", 10, b.length());\n\n        b.seek(10);\n        assertEquals(\"end-pointer\", 10, b.getFilePointer());\n\n        b.setLength(9);\n        assertEquals(\"truncated-length\", 9, b.length());\n        assertEquals(\"truncated-pointer\", 9, b.getFilePointer());\n    }\n\n    @Test\n    public void testFlushNone() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        b.write(1);\n        b.setLength(0);\n        b.flush();\n    }\n\n    @Test\n    public void testWriteBeyond() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        b.setLength(10);\n        assertEquals(\"length0\", 10, b.length());\n\n        b.seek(11);\n        assertEquals(\"pointer1\", 11, b.getFilePointer());\n        b.write(1);\n        assertEquals(\"pointer1B\", 12, b.getFilePointer());\n        assertEquals(\"length1\", 12, b.length());\n\n        b.seek(20);\n        assertEquals(\"pointer2\", 20, b.getFilePointer());\n        b.write(new byte[40], 0, 40);\n        assertEquals(\"pointer2B\", 60, b.getFilePointer());\n        assertEquals(\"length2\", 60, b.length());\n    }\n\n    @Test\n    public void testWriteBeyondBuf() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 16);\n        b.setLength(10);\n        assertEquals(\"length0\", 10, b.length());\n\n        b.seek(20);\n        assertEquals(\"pointer1\", 20, b.getFilePointer());\n        b.write(1);\n        assertEquals(\"pointer1B\", 21, b.getFilePointer());\n        assertEquals(\"length1\", 21, b.length());\n\n        b.seek(100);\n        assertEquals(\"pointer2\", 100, b.getFilePointer());\n        b.write(new byte[40], 0, 40);\n        assertEquals(\"pointer2B\", 140, b.getFilePointer());\n        assertEquals(\"length2\", 140, b.length());\n    }\n\n    @Test\n    public void testReadBeyond() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        b.setLength(10);\n        assertEquals(\"length0\", 10, b.length());\n\n        b.seek(11);\n        assertEquals(\"pointer1\", 11, b.getFilePointer());\n        assertEquals(\"read\", -1, b.read());\n\n        assertEquals(\"pointer2\", 11, b.getFilePointer());\n        assertEquals(\"read\", -1, b.read(new byte[40], 0, 40));\n    }\n\n    @Test(expected = EOFException.class)\n    public void testReadFullyBeyond() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        b.setLength(10);\n        assertEquals(\"length0\", 10, b.length());\n        b.readFully(new byte[40], 0, 40);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testFullReadBeyond() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 256);\n        b.setLength(10);\n        assertEquals(\"length0\", 10, b.length());\n        b.readFully(new byte[40]);\n    }\n\n    @Test\n    public void testSkipBackBuffer() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        b.seek(100);\n        b.write(1);\n\n        assertEquals(\"length0\", 101, b.length());\n        b.skip(-b.length());\n        assertEquals(\"beginning\", 0, b.getFilePointer());\n    }\n\n    @Test\n    public void testRewindSkip() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        b.seek(100);\n        b.write(1);\n\n        assertEquals(\"length0\", 101, b.length());\n        b.skip(-101);\n        assertEquals(\"beginning\", 0, b.getFilePointer());\n    }\n\n    @Test\n    public void testWriteManySingles() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        for (int i = 0; i < 300; i++) {\n            b.write(i);\n        }\n    }\n\n    @Test\n    public void testWriteSequentialBytes() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        for (int i = 0; i < 300; i++) {\n            b.write(i);\n        }\n    }\n\n    @Test\n    public void testWriteAhead() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        b.setLength(10);\n        b.seek(200);\n        b.write(1);\n        assertEquals(201, b.length());\n    }\n\n    @Test\n    public void testPreemptiveWrite() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        b.setLength(10);\n        b.seek(200);\n        b.write(1);\n        assertEquals(201, b.length());\n    }\n\n    @Test\n    public void testWriteAgain() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        b.write(1);\n        b.seek(0);\n        b.write(2);\n        b.seek(0);\n        assertEquals(2, b.read());\n    }\n\n    @Test\n    public void testOverwriteByte() throws Exception {\n        BufferedFileIO b = new BufferedFileIO(getFile(), \"rw\", 100);\n        b.write(1);\n        b.seek(0);\n        b.write(2);\n        b.seek(0);\n        assertEquals(2, b.read());\n    }\n}"
