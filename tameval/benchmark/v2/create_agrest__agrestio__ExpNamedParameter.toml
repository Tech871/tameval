[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "agrestio/agrest"
sha = "113d494706e4c3d1e86cc13936a67596d5265a9d"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl agrest-engine -Dtest=ExpNamedParameterTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl agrest-engine -DtargetClasses=**.ExpNamedParameter  -DtargetTests=**.ExpNamedParameterTest  -DoutputFormats=XML"
coverage_report_path = "agrest-engine/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "agrest-engine/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 45.0
original_coverage = 45.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 9, 10, 21, 33, 37, 38, 42, 43, 54,]
missed_lines = [ 13, 14, 17, 18, 27, 28, 34, 39, 47, 48, 49,]

[input_info]
test_file_path = "agrest-engine/src/test/java/io/agrest/exp/parser/ExpNamedParameterTest.java"
focal_file_path = "agrest-engine/src/main/java/io/agrest/exp/parser/ExpNamedParameter.java"
test_file_url = "https://github.com/agrestio/agrest/blob/113d494706e4c3d1e86cc13936a67596d5265a9d/agrest-engine/src/test/java/io/agrest/exp/parser/ExpNamedParameterTest.java"
focal_file_url = "https://github.com/agrestio/agrest/blob/113d494706e4c3d1e86cc13936a67596d5265a9d/agrest-engine/src/main/java/io/agrest/exp/parser/ExpNamedParameter.java"
first_commit_date = "2022-12-26"
last_commit_date = "2024-02-07"
test_file_content = "package io.agrest.exp.parser;\n\nimport io.agrest.AgException;\nimport io.agrest.protocol.Exp;\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\nimport org.junit.jupiter.params.provider.ValueSource;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic class ExpNamedParameterTest {\n\n    @ParameterizedTest\n    @ValueSource(strings = {\n            \"$a\",\n            \"$1\",\n            \"$a.b\"\n    })\n    void parse(String expString) {\n        assertEquals(ExpNamedParameter.class, Exp.parse(expString).getClass());\n    }\n\n    @ParameterizedTest\n    @CsvSource(delimiter = '|', value = {\n            \"$a|$a\",\n            \"$a.b|$a.b\"\n    })\n    public void parsedToString(String expString, String expected) {\n        assertEquals(expected, Exp.parse(expString).toString());\n    }\n\n    @ParameterizedTest\n    @ValueSource(strings = {\n            \"$\",\n            \"$ a\",\n            \"$$a\"\n    })\n    public void parseInvalidGrammar(String expString) {\n        assertThrows(AgException.class, () -> Exp.parse(expString));\n    }\n}\n"
