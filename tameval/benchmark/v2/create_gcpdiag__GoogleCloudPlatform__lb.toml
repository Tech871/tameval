[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_cfg_file = "Pipfile"

[repo_info]
repository = "GoogleCloudPlatform/gcpdiag"
sha = "679c55e8715d535c797fc18cd20cda0ad3fc90ea"

[run_info]
docker_image = "python:3"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install pipenv && pipenv lock && pipenv install --deploy --system --dev && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=gcpdiag/queries/lb.py -m pytest -q --junit-xml=test_output.xml gcpdiag/queries/lb_test.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target gcpdiag.queries.lb --unit-test gcpdiag.queries.lb_test --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target gcpdiag/queries/lb.py --unit-test gcpdiag/queries/lb_test.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 76.0
original_coverage = 76.0
mutation_kill_rate = 15.0
original_mutation_kill_rate = 15.0
covered_lines = [ 15, 16, 17, 18, 20, 22, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 81, 87, 88, 89, 90, 94, 96, 98, 99, 105, 106, 123, 125, 126, 127, 132, 135, 136, 138, 139, 140, 142, 143, 144, 146, 147, 150, 151, 159, 160, 164, 165, 168, 169, 170, 172, 173, 176, 177, 178, 180, 181, 184, 185, 189, 190, 191, 193, 194, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 237, 238, 239, 240, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 266, 267, 271, 272, 273, 274, 277, 282, 283, 288, 300, 303, 305, 306, 307, 309, 310, 313, 314, 317, 318, 319, 322, 323, 329, 330, 335, 337, 339, 340, 341, 342, 350, 351, 352, 354, 362, 363, 364, 366, 369, 372, 373, 375, 376, 377, 379, 380, 381, 383, 384, 387, 388, 396, 397, 400, 401, 402, 404, 405, 408, 409, 410, 412, 413, 417, 418, 423, 425, 428, 429, 432, 435, 436, 438, 439, 440, 442, 443, 444, 446, 447, 450, 451, 452, 454, 455, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 478, 479, 482, 483, 484, 486, 487, 488, 489, 490, 491, 495, 496, 497, 498, 499, 502, 504, 505, 508, 509, 512, 513, 515, 518, 519, 520, 522, 523, 526, 528, 529, 535, 536, 537, 538, 539, 540, 541, 543, 549, 557, 558, 567, 568, 569, 570, 571, 573, 574, 576, 577, 578, 579, 613, 616, 617, 618, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 635, 639, 642, 643, 646, 647, 648, 651, 654, 655, 658, 661, 662, 664, 665, 666, 668, 669, 670, 672, 673, 676, 677, 678, 680, 681, 685, 686, 687, 689, 690, 699, 700, 703, 704, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 729, 732, 735, 736, 738, 739, 740, 742, 743, 744, 746, 747, 750, 751, 752, 754, 755, 759, 760, 761, 763, 764, 773, 774, 777, 778, 787, 788, 789, 790, 791, 792, 794, 799, 802, 803, 806, 807, 810, 811, 812, 814, 815, 818, 819, 820, 826, 828, 829, 830, 832, 833, 834, 837, 838, 839, 841, 843, 844, 851, 852,]
missed_lines = [ 48, 78, 92, 97, 100, 101, 103, 108, 109, 110, 111, 112, 114, 116, 117, 119, 120, 129, 148, 152, 154, 155, 157, 161, 162, 166, 174, 182, 186, 195, 196, 197, 198, 199, 201, 217, 218, 219, 284, 285, 290, 291, 292, 293, 294, 295, 296, 311, 315, 332, 333, 385, 389, 391, 392, 394, 398, 406, 414, 448, 457, 480, 493, 500, 506, 510, 516, 517, 521, 524, 525, 533, 572, 582, 587, 588, 589, 592, 597, 598, 599, 602, 607, 608, 610, 611, 615, 619, 620, 621, 634, 674, 683, 691, 692, 693, 694, 695, 696, 697, 701, 705, 706, 708, 709, 710, 748, 757, 765, 766, 767, 768, 769, 770, 771, 775, 779, 780, 782, 783, 784, 804, 808, 816,]

[input_info]
test_file_path = "gcpdiag/queries/lb_test.py"
focal_file_path = "gcpdiag/queries/lb.py"
test_file_url = "https://github.com/GoogleCloudPlatform/gcpdiag/blob/679c55e8715d535c797fc18cd20cda0ad3fc90ea/gcpdiag/queries/lb_test.py"
focal_file_url = "https://github.com/GoogleCloudPlatform/gcpdiag/blob/679c55e8715d535c797fc18cd20cda0ad3fc90ea/gcpdiag/queries/lb.py"
first_commit_date = "2022-11-21"
last_commit_date = "2025-07-18"
test_file_content = "# Copyright 2021 Google LLC\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Lint as: python3\n\"\"\"Test code in lb.py.\"\"\"\n\nfrom unittest import mock\n\nfrom gcpdiag import models\nfrom gcpdiag.queries import apis_stub, lb\n\nDUMMY_PROJECT_ID = 'gcpdiag-lb1-aaaa'\nDUMMY_PROJECT2_ID = 'gcpdiag-lb2-aaaa'\nDUMMY_PROJECT3_ID = 'gcpdiag-lb3-aaaa'\nDUMMY_PORT = 80\nDUMMY_PROTOCOL = 'HTTP'\nDUMMY_URLMAP_NAME = 'web-map-http'\nDUMMY_TARGET_NAME = 'http-lb-proxy'\n\n\n@mock.patch('gcpdiag.queries.apis.get_api', new=apis_stub.get_api_stub)\nclass TestURLMap:\n  \"\"\"Test lb.URLMap.\"\"\"\n\n  def test_get_backend_services(self):\n    \"\"\"get_backend_services returns the right backend services matched by name.\"\"\"\n    context = models.Context(project_id=DUMMY_PROJECT_ID)\n    obj_list = lb.get_backend_services(context.project_id)\n    assert len(obj_list) == 1\n    n = obj_list[0]\n    assert n.session_affinity == 'NONE'\n    assert n.locality_lb_policy == 'ROUND_ROBIN'\n\n  def test_get_backend_service_global(self):\n    context = models.Context(project_id=DUMMY_PROJECT2_ID)\n    obj = lb.get_backend_service(context.project_id, 'web-backend-service')\n\n    assert obj.name == 'web-backend-service'\n    assert obj.session_affinity == 'NONE'\n    assert obj.locality_lb_policy == 'ROUND_ROBIN'\n    assert obj.protocol == 'HTTP'\n    assert obj.load_balancer_type == lb.LoadBalancerType.CLASSIC_APPLICATION_LB\n\n  def test_get_backend_service_regional(self):\n    context = models.Context(project_id=DUMMY_PROJECT2_ID)\n    obj = lb.get_backend_service(context.project_id, 'backend-service-2',\n                                 'europe-west4')\n\n    assert obj.name == 'backend-service-2'\n    assert obj.region == 'europe-west4'\n    assert obj.session_affinity == 'NONE'\n    assert obj.locality_lb_policy == 'ROUND_ROBIN'\n    assert obj.protocol == 'TCP'\n    assert obj.load_balancer_type == lb.LoadBalancerType.EXTERNAL_PASSTHROUGH_LB\n\n  def test_get_backend_service_health_implicit_global(self):\n    context = models.Context(project_id=DUMMY_PROJECT2_ID)\n    states_list = lb.get_backend_service_health(context.project_id,\n                                                'web-backend-service')\n\n    assert len(states_list) == 2\n    assert states_list[0].health_state == 'UNHEALTHY'\n\n  def test_get_backend_service_health_explicit_global(self):\n    context = models.Context(project_id=DUMMY_PROJECT2_ID)\n    states_list = lb.get_backend_service_health(context.project_id,\n                                                'web-backend-service', 'global')\n\n    assert len(states_list) == 2\n    assert states_list[0].health_state == 'UNHEALTHY'\n\n  def test_get_backend_service_health_regional(self):\n    context = models.Context(project_id=DUMMY_PROJECT2_ID)\n    states_list = lb.get_backend_service_health(context.project_id,\n                                                'backend-service-2',\n                                                'europe-west4')\n\n    assert len(states_list) == 1\n    assert states_list[0].health_state == 'UNHEALTHY'\n\n  def test_get_forwarding_rules(self):\n    \"\"\"get_forwarding_rules returns the right forwarding rules matched by name.\"\"\"\n    forwarding_rules = lb.get_forwarding_rules(project_id=DUMMY_PROJECT_ID)\n    assert len(forwarding_rules) == 1\n    forwarding_rule = forwarding_rules[0]\n    assert forwarding_rule.name == 'forwardingRule1'\n    assert forwarding_rule.short_path == 'gcpdiag-lb1-aaaa/forwardingRule1'\n\n  def test_get_forwarding_rule_regional(self):\n    \"\"\"get_forwarding_rule returns the right forwarding rule matched by name.\"\"\"\n    forwarding_rule = lb.get_forwarding_rule(\n        project_id=DUMMY_PROJECT2_ID,\n        forwarding_rule_name='forwardingRule1',\n        region='us-west1',\n    )\n    assert forwarding_rule.name == 'forwardingRule1'\n    assert forwarding_rule.short_path == 'gcpdiag-lb2-aaaa/forwardingRule1'\n    assert (forwarding_rule.load_balancer_type ==\n            lb.LoadBalancerType.REGIONAL_INTERNAL_APPLICATION_LB)\n\n  def test_get_forwarding_rule_global(self):\n    \"\"\"get_forwarding_rule returns the right forwarding rule matched by name.\"\"\"\n    forwarding_rule = lb.get_forwarding_rule(\n        project_id=DUMMY_PROJECT3_ID,\n        forwarding_rule_name='https-content-rule',\n    )\n    assert forwarding_rule.name == 'https-content-rule'\n    assert (forwarding_rule.load_balancer_type ==\n            lb.LoadBalancerType.CLASSIC_APPLICATION_LB)\n\n  def test_forwarding_rule_related_backend_service_http(self):\n    forwarding_rule = lb.get_forwarding_rule(\n        project_id=DUMMY_PROJECT3_ID, forwarding_rule_name='https-content-rule')\n\n    related_backend_service = forwarding_rule.get_related_backend_services()\n\n    assert len(related_backend_service) == 1\n    assert related_backend_service[0].name == 'web-backend-service'\n\n  def test_get_ssl_certificate_global(self):\n    \"\"\"get_ssl_certificate returns the right SSL certificate matched by name.\"\"\"\n    obj = lb.get_ssl_certificate(project_id=DUMMY_PROJECT3_ID,\n                                 certificate_name='cert1')\n    assert obj.name == 'cert1'\n    assert obj.type == 'MANAGED'\n    assert 'natka123.com' in obj.domains\n    assert 'second.natka123.com' in obj.domains\n\n  def test_get_target_https_proxies(self):\n    \"\"\"get_target_https_proxy returns the list of target https proxies.\"\"\"\n    items = lb.get_target_https_proxies(project_id=DUMMY_PROJECT3_ID)\n\n    assert len(items) == 2\n    assert items[0].name == 'https-lb-proxy'\n    assert (\n        items[0].full_path ==\n        'projects/gcpdiag-lb3-aaaa/global/targetHttpsProxies/https-lb-proxy')\n    assert items[1].name == 'https-lb-proxy-working'\n\n  def test_get_target_ssl_proxies(self):\n    \"\"\"get_target_https_proxy returns the list of target ssl proxies.\"\"\"\n    items = lb.get_target_ssl_proxies(project_id=DUMMY_PROJECT3_ID)\n\n    assert len(items) == 1\n    assert items[0].name == 'ssl-proxy'\n    assert (items[0].full_path ==\n            'projects/gcpdiag-lb3-aaaa/global/targetSslProxies/ssl-proxy')\n\n  def test_get_lb_insights_for_a_project(self):\n    context = models.Context(project_id=DUMMY_PROJECT2_ID)\n    lb_insights = lb.get_lb_insights_for_a_project(context.project_id)\n\n    assert lb_insights[0].is_health_check_port_mismatch_insight\n    assert lb_insights[1].is_firewall_rule_insight\n"
