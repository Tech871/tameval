[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "dflib/dflib"
sha = "9486d42d77375b4de8bf8df9770f2952225db1a4"
bench_version = 2

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl dflib -Dtest=DataFrameInlineAppendableTest"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl dflib -DtargetClasses=**.DataFrameInlineAppendable  -DtargetTests=**.DataFrameInlineAppendableTest  -DoutputFormats=XML"
coverage_report_path = "dflib/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "dflib/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0
original_coverage = 77.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "dflib/src/test/java/org/dflib/print/DataFrameInlineAppendableTest.java"
focal_file_path = "dflib/src/main/java/org/dflib/print/DataFrameInlineAppendable.java"
test_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib/src/test/java/org/dflib/print/DataFrameInlineAppendableTest.java"
focal_file_url = "https://github.com/dflib/dflib/blob/9486d42d77375b4de8bf8df9770f2952225db1a4/dflib/src/main/java/org/dflib/print/DataFrameInlineAppendable.java"
first_commit_date = "2025-03-01"
last_commit_date = "2025-03-01"
test_file_content = "package org.dflib.print;\n\nimport org.dflib.DataFrame;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class DataFrameInlineAppendableTest {\n\n    private DataFrame df;\n\n    @BeforeEach\n    public void initDataFrameParts() {\n        this.df = DataFrame.foldByRow(\"col1\", \"column2\").of(\n                \"one\", 1,\n                \"two\", 2,\n                \"three\", 3,\n                \"four\", 4);\n    }\n\n    @Test\n    public void toString_NoRows() throws IOException {\n        StringBuilder out = new StringBuilder();\n        new DataFrameInlineAppendable(out, 5, 10).print(DataFrame.empty(\"a\", \"b\"));\n        assertEquals(\"a:,b:\", out.toString());\n    }\n\n    @Test\n    public void toString_Normal() throws IOException {\n        StringBuilder out = new StringBuilder();\n        new DataFrameInlineAppendable(out, 5, 10).print(df);\n        assertEquals(\"{col1:one,column2:1},{col1:two,column2:2},{col1:three,column2:3},{col1:four,column2:4}\", out.toString());\n    }\n\n    @Test\n    public void toString_TruncateRows() throws IOException {\n        StringBuilder out = new StringBuilder();\n        new DataFrameInlineAppendable(out, 2, 10).print(df);\n        assertEquals(\"{col1:one,column2:1},...,{col1:four,column2:4}\", out.toString());\n    }\n\n    @Test\n    public void toString_TruncateColumns() throws IOException {\n        StringBuilder out = new StringBuilder();\n        new DataFrameInlineAppendable(out, 5, 4).print(df);\n        assertEquals(\"{col1:one,c..2:1},{col1:two,c..2:2},{col1:t..e,c..2:3},{col1:four,c..2:4}\", out.toString());\n    }\n}"
