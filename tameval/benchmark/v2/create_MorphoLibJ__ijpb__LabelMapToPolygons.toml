[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "ijpb/MorphoLibJ"
sha = "7d691dff36baa0bbca6fd17f71c93d8414b75b17"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=LabelMapToPolygonsTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.LabelMapToPolygons  -DtargetTests=**.LabelMapToPolygonsTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 86.0
original_coverage = 86.0
mutation_kill_rate = 79.0
original_mutation_kill_rate = 79.0
covered_lines = [ 66, 72, 77, 89, 95, 101, 109, 114, 126, 132, 138, 146, 151, 163, 169, 175, 183, 188, 200, 206, 212, 296, 297, 298, 299, 300, 313, 318, 321, 323, 325, 327, 341, 344, 345, 346, 349, 357, 360, 366, 371, 378, 379, 388, 389, 391, 392, 433, 434, 437, 440, 441, 442, 447, 451, 453, 454, 456, 457, 463, 464, 466, 468, 469, 471, 479, 484, 486, 489, 495, 497, 512, 513, 515, 517, 520, 522, 524, 526, 529, 531, 533, 536, 538, 541, 543, 549, 550, 553, 554, 556, 558, 559, 563, 594, 595, 598, 601, 602, 603, 609, 612, 616, 618, 619, 621, 622, 628, 629, 631, 633, 634, 636, 641, 644, 646, 649, 651, 654, 660, 662, 678, 679, 682, 683, 685, 686, 688, 689, 691, 694, 695,]
missed_lines = [ 51, 57, 83, 120, 157, 194, 316, 330, 332, 340, 390, 403, 404, 405, 406, 407, 408, 476, 481, 493, 658,]

[input_info]
test_file_path = "src/test/java/inra/ijpb/label/LabelMapToPolygonsTest.java"
focal_file_path = "src/main/java/inra/ijpb/label/LabelMapToPolygons.java"
test_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/test/java/inra/ijpb/label/LabelMapToPolygonsTest.java"
focal_file_url = "https://github.com/ijpb/MorphoLibJ/blob/7d691dff36baa0bbca6fd17f71c93d8414b75b17/src/main/java/inra/ijpb/label/LabelMapToPolygons.java"
first_commit_date = "2024-08-21"
last_commit_date = "2024-12-18"
test_file_content = "/*-\n * #%L\n * Mathematical morphology library and plugins for ImageJ/Fiji.\n * %%\n * Copyright (C) 2014 - 2024 INRA.\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n/**\n * \n */\npackage inra.ijpb.label;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\n\nimport java.awt.geom.Point2D;\nimport java.util.ArrayList;\nimport java.util.Map;\n\nimport org.junit.Test;\n\nimport ij.process.ByteProcessor;\nimport inra.ijpb.data.image.ImageUtils;\nimport inra.ijpb.geometry.Polygon2D;\nimport inra.ijpb.label.LabelMapToPolygons.Direction;\nimport inra.ijpb.label.LabelMapToPolygons.Position;\n\n/**\n * @author dlegland\n *\n */\npublic class LabelMapToPolygonsTest\n{\n\t@Test\n\tpublic final void test_Down_turnLeft()\n\t{\n\t\tDirection direction = Direction.DOWN;\n\t\tPosition pos = new Position(1, 2, Direction.DOWN);\n\n\t\tPosition pos2 = direction.turnLeft(pos);\n\t\tassertEquals(1, pos2.x);\n\t\tassertEquals(2, pos2.y);\n\t\tassertEquals(Direction.RIGHT, pos2.direction);\n\t}\n\n\t@Test\n\tpublic final void test_Down_turnLeft2()\n\t{\n\t\tDirection direction = Direction.DOWN;\n\t\tPosition pos = new Position(1, 1, direction);\n\n\t\tPosition pos2 = direction.turnLeft(pos);\n\t\tassertEquals(1, pos2.x);\n\t\tassertEquals(1, pos2.y);\n\t\tassertEquals(Direction.RIGHT, pos2.direction);\n\t}\n\n\t@Test\n\tpublic final void test_Down_forward()\n\t{\n\t\tDirection direction = Direction.DOWN;\n\t\tPosition pos = new Position(1, 1, direction);\n\n\t\tPosition pos2 = direction.forward(pos);\n\t\tassertEquals(1, pos2.x);\n\t\tassertEquals(2, pos2.y);\n\t\tassertEquals(Direction.DOWN, pos2.direction);\n\t}\n\n\t@Test\n\tpublic final void test_Down_turnRight()\n\t{\n\t\tDirection direction = Direction.DOWN;\n\t\tPosition pos = new Position(2, 1, direction);\n\n\t\tPosition pos2 = direction.turnRight(pos);\n\t\tassertEquals(1, pos2.x);\n\t\tassertEquals(2, pos2.y);\n\t\tassertEquals(Direction.LEFT, pos2.direction);\n\t}\n\n\t@Test\n\tpublic final void test_Down_turnRight2()\n\t{\n\t\tDirection direction = Direction.DOWN;\n\t\tPosition pos = new Position(2, 1, direction);\n\n\t\tPosition pos2 = direction.turnRight(pos);\n\t\tassertEquals(1, pos2.x);\n\t\tassertEquals(2, pos2.y);\n\t\tassertEquals(Direction.LEFT, pos2.direction);\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void testTrackBoundaryBinary_singleSquare()\n\t{\n\t\tByteProcessor array = new ByteProcessor(4, 4);\n\t\tarray.set(1, 1, 255);\n\t\tarray.set(2, 1, 255);\n\t\tarray.set(1, 2, 255);\n\t\tarray.set(2, 2, 255);\n\n\t\tint x0 = 1;\n\t\tint y0 = 1;\n\t\tLabelMapToPolygons.Direction initialDirection = Direction.DOWN;\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons();\n\t\tArrayList<Point2D> vertices = tracker.trackBoundary(array, x0, y0, initialDirection);\n\n\t\tassertFalse(vertices.isEmpty());\n\t\tassertEquals(8, vertices.size());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void testTrackBoundaryBinary_ExpandedCorners_C4()\n\t{\n\t\tByteProcessor array = new ByteProcessor(8, 8);\n\t\tImageUtils.fillRect(array, 2, 2, 4, 4, 255);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 1, 5, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 5, 2, 2, 255);\n\t\t// ImageUtils.print(array);\n\n\t\tint x0 = 1;\n\t\tint y0 = 1;\n\t\tLabelMapToPolygons.Direction initialDirection = Direction.DOWN;\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons();\n\t\tArrayList<Point2D> vertices = tracker.trackBoundary(array, x0, y0, initialDirection);\n\n\t\tassertFalse(vertices.isEmpty());\n\t\tassertEquals(32, vertices.size());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void testTrackBoundaryBinary_ExpandedCorners_C4_TouchBorders()\n\t{\n\t\tByteProcessor array = new ByteProcessor(6, 6);\n\t\tImageUtils.fillRect(array, 1, 1, 4, 4, 255);\n\t\tImageUtils.fillRect(array, 0, 0, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 4, 0, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 0, 4, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 4, 4, 2, 2, 255);\n\t\t// ImageUtils.print(array);\n\n\t\tint x0 = 0;\n\t\tint y0 = 0;\n\t\tLabelMapToPolygons.Direction initialDirection = Direction.DOWN;\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons();\n\t\tArrayList<Point2D> vertices = tracker.trackBoundary(array, x0, y0, initialDirection);\n\n\t\tassertFalse(vertices.isEmpty());\n\t\tassertEquals(32, vertices.size());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void testTrackBoundaryBinary_ExpandedCorners_C8()\n\t{\n\t\tByteProcessor array = new ByteProcessor(8, 8);\n\t\tImageUtils.fillRect(array, 2, 2, 4, 4, 255);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 1, 5, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 5, 2, 2, 255);\n\t\t// ImageUtils.print(array);\n\n\t\tint x0 = 1;\n\t\tint y0 = 1;\n\t\tLabelMapToPolygons.Direction initialDirection = Direction.DOWN;\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(8);\n\t\tArrayList<Point2D> vertices = tracker.trackBoundary(array, x0, y0, initialDirection);\n\n\t\tassertFalse(vertices.isEmpty());\n\t\tassertEquals(32, vertices.size());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void testTrackBoundaryBinary_ExpandedCorners_C8_TouchBorders()\n\t{\n\t\tByteProcessor array = new ByteProcessor(6, 6);\n\t\tImageUtils.fillRect(array, 1, 1, 4, 4, 255);\n\t\tImageUtils.fillRect(array, 0, 0, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 4, 0, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 0, 4, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 4, 4, 2, 2, 255);\n\t\t// ImageUtils.print(array);\n\n\t\tint x0 = 0;\n\t\tint y0 = 0;\n\t\tLabelMapToPolygons.Direction initialDirection = Direction.DOWN;\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(8);\n\t\tArrayList<Point2D> vertices = tracker.trackBoundary(array, x0, y0, initialDirection);\n\n\t\tassertFalse(vertices.isEmpty());\n\t\tassertEquals(32, vertices.size());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void testTrackBoundary_NestedLabels()\n\t{\n\t\tByteProcessor array = new ByteProcessor(6, 6);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 3);\n\t\tImageUtils.fillRect(array, 3, 1, 2, 2, 5);\n\t\tImageUtils.fillRect(array, 1, 3, 2, 2, 7);\n\t\tImageUtils.fillRect(array, 3, 3, 2, 2, 9);\n\t\tImageUtils.fillRect(array, 2, 2, 2, 2, 4);\n\t\t// ImageUtils.print(array);\n\n\t\tint x0 = 2;\n\t\tint y0 = 2;\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(4);\n\t\tArrayList<Point2D> vertices = tracker.trackBoundary(array, x0, y0, Direction.DOWN);\n\n\t\tassertFalse(vertices.isEmpty());\n\t\tassertEquals(8, vertices.size());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void test_process_square2x2()\n\t{\n\t\tByteProcessor array = new ByteProcessor(4, 4);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 3);\n\t\t// ImageUtils.print(array);\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(4);\n\t\tMap<Integer, ArrayList<Polygon2D>> boundaries = tracker.process(array);\n\n\t\tassertFalse(boundaries.isEmpty());\n\t\tassertEquals(1, boundaries.size());\n\n\t\tPolygon2D poly3 = boundaries.get(3).get(0);\n\t\tassertEquals(8, poly3.vertexNumber());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void test_process_FourLabels()\n\t{\n\t\tByteProcessor array = new ByteProcessor(6, 6);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 3);\n\t\tImageUtils.fillRect(array, 3, 1, 2, 2, 5);\n\t\tImageUtils.fillRect(array, 1, 3, 2, 2, 7);\n\t\tImageUtils.fillRect(array, 3, 3, 2, 2, 9);\n\t\t// ImageUtils.print(array);\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(4);\n\t\tMap<Integer, ArrayList<Polygon2D>> boundaries = tracker.process(array);\n\n\t\tassertFalse(boundaries.isEmpty());\n\t\tassertEquals(4, boundaries.size());\n\n\t\tPolygon2D poly3 = boundaries.get(3).get(0);\n\t\tassertEquals(8, poly3.vertexNumber());\n\t\tPolygon2D poly5 = boundaries.get(5).get(0);\n\t\tassertEquals(8, poly5.vertexNumber());\n\t\tPolygon2D poly7 = boundaries.get(7).get(0);\n\t\tassertEquals(8, poly7.vertexNumber());\n\t\tPolygon2D poly9 = boundaries.get(9).get(0);\n\t\tassertEquals(8, poly9.vertexNumber());\n\t}\n\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void test_process_squareWithHole()\n\t{\n\t\tByteProcessor array = new ByteProcessor(5, 5);\n\t\tImageUtils.fillRect(array, 1, 1, 3, 3, 255);\n\t\tarray.set(2, 2, 0);\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(4);\n\t\tMap<Integer, ArrayList<Polygon2D>> boundaries = tracker.process(array);\n\n\t\tassertFalse(boundaries.isEmpty());\n\t\tassertEquals(1, boundaries.size());\n\n\t\tArrayList<Polygon2D> polygons = boundaries.get(255);\n\t\tassertEquals(2, polygons.size());\n\n\t\tassertEquals(12, polygons.get(0).vertexNumber());\n\t\tassertEquals(4, polygons.get(1).vertexNumber());\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void test_process_fiveSquares_C4()\n\t{\n\t\tByteProcessor array = new ByteProcessor(8, 8);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 3, 3, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 1, 5, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 5, 2, 2, 255);\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(4);\n\t\tMap<Integer, ArrayList<Polygon2D>> boundaries = tracker.process(array);\n\n\t\tassertFalse(boundaries.isEmpty());\n\t\tassertEquals(1, boundaries.size());\n\n\t\tArrayList<Polygon2D> polygons = boundaries.get(255);\n\t\tassertEquals(5, polygons.size());\n\t}\n\t\n\t/**\n\t * Test method for\n\t * {@link net.ijt.labels.LabelMapToPolygons#trackBoundary(ij.process.ByteProcessor, int, int, net.ijt.labels.LabelMapToPolygons.Direction)}.\n\t */\n\t@Test\n\tpublic final void test_process_fiveSquares_C8()\n\t{\n\t\tByteProcessor array = new ByteProcessor(8, 8);\n\t\tImageUtils.fillRect(array, 1, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 3, 3, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 1, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 1, 5, 2, 2, 255);\n\t\tImageUtils.fillRect(array, 5, 5, 2, 2, 255);\n\n\t\tLabelMapToPolygons tracker = new LabelMapToPolygons(8);\n\t\tMap<Integer, ArrayList<Polygon2D>> boundaries = tracker.process(array);\n\n\t\tassertFalse(boundaries.isEmpty());\n\t\tassertEquals(1, boundaries.size());\n\n\t\tArrayList<Polygon2D> polygons = boundaries.get(255);\n\t\tassertEquals(1, polygons.size());\n\t}\n}\n"
