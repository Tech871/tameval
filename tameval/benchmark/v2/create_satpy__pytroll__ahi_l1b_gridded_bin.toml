[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "pytroll/satpy"
sha = "0beea130092f3270ae1af8a87644d47971acbbc4"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=satpy/readers/ahi_l1b_gridded_bin.py -m pytest -q --junit-xml=test_output.xml satpy/tests/reader_tests/test_ahi_l1b_gridded_bin.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target satpy.readers.ahi_l1b_gridded_bin --unit-test satpy.tests.reader_tests.test_ahi_l1b_gridded_bin --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target satpy/readers/ahi_l1b_gridded_bin.py --unit-test satpy/tests/reader_tests/test_ahi_l1b_gridded_bin.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 57.0
original_coverage = 100.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 33, 34, 36, 37, 38, 39, 40, 42, 43, 44, 46, 49, 52, 60, 63, 69, 74, 77, 91, 93, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 112, 113, 114, 116, 118, 121, 134, 143, 144, 154, 155, 163, 190, 192, 194, 200, 203, 218, 227, 229, 230, 233, 236, 245, 246, 248, 250, 251,]
missed_lines = [ 119, 124, 125, 126, 127, 129, 130, 131, 132, 136, 139, 140, 141, 146, 147, 150, 151, 152, 157, 158, 159, 160, 161, 165, 166, 168, 171, 173, 175, 176, 178, 181, 183, 186, 187, 188, 201, 205, 207, 214, 216, 220, 252, 253, 254,]

[input_info]
test_file_path = "satpy/tests/reader_tests/test_ahi_l1b_gridded_bin.py"
focal_file_path = "satpy/readers/ahi_l1b_gridded_bin.py"
test_file_url = "https://github.com/pytroll/satpy/blob/0beea130092f3270ae1af8a87644d47971acbbc4/satpy/tests/reader_tests/test_ahi_l1b_gridded_bin.py"
focal_file_url = "https://github.com/pytroll/satpy/blob/0beea130092f3270ae1af8a87644d47971acbbc4/satpy/readers/ahi_l1b_gridded_bin.py"
first_commit_date = "2020-09-09"
last_commit_date = "2025-08-12"
test_file_content = "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Copyright (c) 2020 Satpy developers\n#\n# This file is part of satpy.\n#\n# satpy is free software: you can redistribute it and/or modify it under the\n# terms of the GNU General Public License as published by the Free Software\n# Foundation, either version 3 of the License, or (at your option) any later\n# version.\n#\n# satpy is distributed in the hope that it will be useful, but WITHOUT ANY\n# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\n# A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License along with\n# satpy.  If not, see <http://www.gnu.org/licenses/>.\n\"\"\"The ahi_l1b_gridded_bin reader tests package.\"\"\"\n\nimport os\nimport shutil\nimport tempfile\nimport unittest\nfrom unittest import mock\n\nimport dask.array as da\nimport numpy as np\nimport pytest\nfrom pyresample.geometry import AreaDefinition\n\nfrom satpy.readers.ahi_l1b_gridded_bin import AHI_LUT_NAMES, AHIGriddedFileHandler\n\nclass TestAHIGriddedArea(unittest.TestCase):\n    \"\"\"Test the AHI gridded reader definition.\"\"\"\n\n    def setUp(self):\n        \"\"\"Create fake data for testing.\"\"\"\n        self.FULLDISK_SIZES = {0.005: {\"x_size\": 24000,\n                                       \"y_size\": 24000},\n                               0.01: {\"x_size\": 12000,\n                                      \"y_size\": 12000},\n                               0.02: {\"x_size\": 6000,\n                                      \"y_size\": 6000}}\n\n        self.AHI_FULLDISK_EXTENT = [85., -60., 205., 60.]\n\n    @staticmethod\n    def make_fh(filetype, area=\"fld\"):\n        \"\"\"Create a test file handler.\"\"\"\n        m = mock.mock_open()\n        with mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.open\", m, create=True):\n            fh = AHIGriddedFileHandler(\"somefile\",\n                                       {\"area\": area},\n                                       filetype_info={\"file_type\": filetype})\n            return fh\n\n    def test_hi_res(self):\n        \"\"\"Check size of the low resolution (0.5km) grid.\"\"\"\n        tmp_fh = self.make_fh(\"ext.01\")\n        assert self.FULLDISK_SIZES[0.005][\"x_size\"] == tmp_fh.ncols\n        assert self.FULLDISK_SIZES[0.005][\"y_size\"] == tmp_fh.nlines\n\n    def test_bad_area(self):\n        \"\"\"Ensure an error is raised for an usupported area.\"\"\"\n        tmp_fh = self.make_fh(\"ext.01\")\n        tmp_fh.areaname = \"scanning\"\n        with pytest.raises(NotImplementedError):\n            tmp_fh.get_area_def(None)\n        with pytest.raises(NotImplementedError):\n            self.make_fh(\"ext.01\", area=\"scanning\")\n\nclass TestAHIGriddedFileCalibration(unittest.TestCase):\n    \"\"\"Test case for the file calibration types.\"\"\"\n\n    def setUp(self):\n        \"\"\"Create a test file handler.\"\"\"\n        m = mock.mock_open()\n        with mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.open\", m, create=True):\n            in_fname = \"test_file\"\n            fh = AHIGriddedFileHandler(in_fname,\n                                       {\"area\": \"fld\"},\n                                       filetype_info={\"file_type\": \"tir.01\"})\n            self.fh = fh\n\nclass TestAHIGriddedFileHandler(unittest.TestCase):\n    \"\"\"Test case for the file reading.\"\"\"\n\n    def new_unzip(fname):\n        \"\"\"Fake unzipping.\"\"\"\n        if fname[-3:] == \"bz2\":\n            return fname[:-4]\n\n    @mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.unzip_file\",\n                mock.MagicMock(side_effect=new_unzip))\n    def setUp(self):\n        \"\"\"Create a test file handler.\"\"\"\n        m = mock.mock_open()\n        with mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.open\", m, create=True):\n            in_fname = \"test_file.bz2\"\n            fh = AHIGriddedFileHandler(in_fname,\n                                       {\"area\": \"fld\"},\n                                       filetype_info={\"file_type\": \"tir.01\"})\n\n            # Check that the filename is altered for bz2 format files\n            assert in_fname != fh.filename\n            self.fh = fh\n\n        key = {\"calibration\": \"counts\",\n               \"name\": \"vis.01\"}\n        info = {\"units\": \"unitless\",\n                \"standard_name\": \"vis.01\",\n                \"wavelength\": 10.8,\n                \"resolution\": 0.05}\n        self.key = key\n        self.info = info\n\n    @mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.AHIGriddedFileHandler._read_data\")\n    def test_get_dataset(self, mocked_read):\n        \"\"\"Check that a good dataset is returned on request.\"\"\"\n        m = mock.mock_open()\n\n        out_data = np.array([[100., 300., 500.],\n                             [800., 1500., 2040.]])\n        mocked_read.return_value = out_data\n        with mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.open\", m, create=True):\n            res = self.fh.get_dataset(self.key, self.info)\n            mocked_read.assert_called()\n            # Check output data is correct\n            np.testing.assert_allclose(res.values, out_data)\n            # Also check a couple of attributes\n            assert res.attrs[\"name\"] == self.key[\"name\"]\n            assert res.attrs[\"wavelength\"] == self.info[\"wavelength\"]\n\nclass TestAHIGriddedLUTs(unittest.TestCase):\n    \"\"\"Test case for the downloading and preparing LUTs.\"\"\"\n\n    def mocked_ftp_dl(fname):\n        \"\"\"Fake download of LUT tar file by creating a local tar.\"\"\"\n        import os\n        import tarfile\n        import tempfile\n\n        with tarfile.open(fname, \"w:gz\") as tar_handle:\n            for namer in AHI_LUT_NAMES:\n                tmpf = os.path.join(tempfile.tempdir, namer)\n                with open(tmpf, \"w\") as tmp_fid:\n                    tmp_fid.write(\"TEST\\n\")\n                tar_handle.add(tmpf, arcname=\"count2tbb_v102/\"+namer)\n                os.remove(tmpf)\n\n    def setUp(self):\n        \"\"\"Create a test file handler.\"\"\"\n        m = mock.mock_open()\n        with mock.patch(\"satpy.readers.ahi_l1b_gridded_bin.open\", m, create=True):\n            in_fname = \"test_file\"\n            fh = AHIGriddedFileHandler(in_fname,\n                                       {\"area\": \"fld\"},\n                                       filetype_info={\"file_type\": \"tir.01\"})\n            self.fh = fh\n\n        key = {\"calibration\": \"counts\",\n               \"name\": \"vis.01\"}\n        info = {\"units\": \"unitless\",\n                \"standard_name\": \"vis.01\",\n                \"wavelength\": 10.8,\n                \"resolution\": 0.05}\n        self.key = key\n        self.info = info\n\n    def tearDown(self):\n        \"\"\"Remove files and directories created by the tests.\"\"\"\n        for lut_name in AHI_LUT_NAMES:\n            tmp_filename = os.path.join(self.fh.lut_dir, lut_name)\n            if os.path.isfile(tmp_filename):\n                os.remove(tmp_filename)\n        if os.path.isdir(self.fh.lut_dir):\n            shutil.rmtree(self.fh.lut_dir)\n"
