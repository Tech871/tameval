[meta]
task = "repair"
scenario = "repair_no_new_covered_logic"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "kubesphere/ks-devops"
sha = "912f453210d5a51ed62b0b35c1073cd94f3601c2"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out controllers/jenkins/pipelinerun/pipelinerun_finder.go controllers/jenkins/pipelinerun/pipelinerun_finder_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting controllers/jenkins/pipelinerun/pipelinerun_finder.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 100.0
original_coverage = 100.0
mutation_kill_rate = 100.0
original_mutation_kill_rate = 100.0
covered_lines = [ 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55,]
missed_lines = []

[input_info]
test_file_path = "controllers/jenkins/pipelinerun/pipelinerun_finder_test.go"
focal_file_path = "controllers/jenkins/pipelinerun/pipelinerun_finder.go"
test_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/controllers/jenkins/pipelinerun/pipelinerun_finder_test.go"
focal_file_url = "https://github.com/kubesphere/ks-devops/blob/912f453210d5a51ed62b0b35c1073cd94f3601c2/controllers/jenkins/pipelinerun/pipelinerun_finder.go"
first_commit_date = "2021-09-27"
last_commit_date = "2025-03-13"
test_file_content = "package pipelinerun\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/jenkins-zh/jenkins-client/pkg/job\"\n\t\"github.com/kubesphere/ks-devops/pkg/api/devops/v1alpha3\"\n\tv1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n)\n\nvar (\n\tpipeline1 = &v1alpha3.PipelineRun{\n\t\tObjectMeta: v1.ObjectMeta{\n\t\t\tName: \"pipeline1\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tv1alpha3.JenkinsPipelineRunIDAnnoKey: \"123\",\n\t\t\t},\n\t\t},\n\t}\n\n\tpipeline11 = &v1alpha3.PipelineRun{\n\t\tObjectMeta: v1.ObjectMeta{\n\t\t\tName: \"pipeline11\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tv1alpha3.JenkinsPipelineRunIDAnnoKey: \"123\",\n\t\t\t},\n\t\t},\n\t}\n\n\tpipeline2 = &v1alpha3.PipelineRun{\n\t\tObjectMeta: v1.ObjectMeta{\n\t\t\tName: \"pipeline2\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tv1alpha3.JenkinsPipelineRunIDAnnoKey: \"456\",\n\t\t\t},\n\t\t},\n\t}\n\n\tmultiBranchPipeline1 = &v1alpha3.PipelineRun{\n\t\tObjectMeta: v1.ObjectMeta{\n\t\t\tName: \"pipeline1\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tv1alpha3.JenkinsPipelineRunIDAnnoKey: \"123\",\n\t\t\t},\n\t\t},\n\t\tSpec: v1alpha3.PipelineRunSpec{\n\t\t\tSCM: &v1alpha3.SCM{\n\t\t\t\tRefName: \"main1\",\n\t\t\t},\n\t\t},\n\t}\n\n\tmultiBranchPipeline11 = &v1alpha3.PipelineRun{\n\t\tObjectMeta: v1.ObjectMeta{\n\t\t\tName: \"pipeline11\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tv1alpha3.JenkinsPipelineRunIDAnnoKey: \"123\",\n\t\t\t},\n\t\t},\n\t\tSpec: v1alpha3.PipelineRunSpec{\n\t\t\tSCM: &v1alpha3.SCM{\n\t\t\t\tRefName: \"main1\",\n\t\t\t},\n\t\t},\n\t}\n\n\tmultiBranchPipeline2 = &v1alpha3.PipelineRun{\n\t\tObjectMeta: v1.ObjectMeta{\n\t\t\tName: \"pipeline2\",\n\t\t\tAnnotations: map[string]string{\n\t\t\t\tv1alpha3.JenkinsPipelineRunIDAnnoKey: \"456\",\n\t\t\t},\n\t\t},\n\t\tSpec: v1alpha3.PipelineRunSpec{\n\t\t\tSCM: &v1alpha3.SCM{\n\t\t\t\tRefName: \"main2\",\n\t\t\t},\n\t\t},\n\t}\n)\n\nfunc Test_pipelineRunFinder_find(t *testing.T) {\n\ttype args struct {\n\t\trun           *job.PipelineRun\n\t\tisMultiBranch bool\n\t}\n\ttests := []struct {\n\t\tname            string\n\t\tfinder          pipelineRunFinder\n\t\targs            args\n\t\twantPipelineRun *v1alpha3.PipelineRun\n\t\twantFound       bool\n\t}{{\n\t\tname:   \"Find general PipelineRuns\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*pipeline1, *pipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: false,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"456\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: pipeline2,\n\t\twantFound:       true,\n\t}, {\n\t\tname:   \"Find multi-branch PipelineRuns\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: true,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID:       \"456\",\n\t\t\t\t\tPipeline: \"main2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: multiBranchPipeline2,\n\t\twantFound:       true,\n\t}, {\n\t\tname:   \"No PipelineRuns found\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*pipeline1, *pipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: false,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"invalid_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: nil,\n\t\twantFound:       false,\n\t}, {\n\t\tname:   \"No Multi-branch PipelineRuns found\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: true,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"invalid_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: nil,\n\t\twantFound:       false,\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tpipelineRun, found := tt.finder.find(tt.args.run, tt.args.isMultiBranch)\n\t\t\tif !reflect.DeepEqual(pipelineRun, tt.wantPipelineRun) {\n\t\t\t\tt.Errorf(\"pipelineRunFinder.find() got = %v, want %v\", pipelineRun, tt.wantPipelineRun)\n\t\t\t}\n\t\t\tif found != tt.wantFound {\n\t\t\t\tt.Errorf(\"pipelineRunFinder.find() got1 = %v, want %v\", found, tt.wantFound)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc Test_pipelineRunFinder_Search(t *testing.T) {\n\ttype args struct {\n\t\trun           *job.PipelineRun\n\t\tisMultiBranch bool\n\t}\n\ttests := []struct {\n\t\tname            string\n\t\tfinder          pipelineRunFinder\n\t\targs            args\n\t\twantPipelineRun *v1alpha3.PipelineRun\n\t\twantFound       bool\n\t}{{\n\t\tname:   \"Find general PipelineRuns\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*pipeline1, *pipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: false,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"456\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: pipeline2,\n\t\twantFound:       true,\n\t}, {\n\t\tname:   \"Find multi-branch PipelineRuns\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: true,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID:       \"456\",\n\t\t\t\t\tPipeline: \"main2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: multiBranchPipeline2,\n\t\twantFound:       true,\n\t}, {\n\t\tname:   \"No PipelineRuns found\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*pipeline1, *pipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: false,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"invalid_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: nil,\n\t\twantFound:       false,\n\t}, {\n\t\tname:   \"No Multi-branch PipelineRuns found\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: true,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"invalid_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: nil,\n\t\twantFound:       false,\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tpipelineRun, found := tt.finder.find(tt.args.run, tt.args.isMultiBranch)\n\t\t\tif !reflect.DeepEqual(pipelineRun, tt.wantPipelineRun) {\n\t\t\t\tt.Errorf(\"pipelineRunFinder.Search() got = %v, want %v\", pipelineRun, tt.wantPipelineRun)\n\t\t\t}\n\t\t\tif found != tt.wantFound {\n\t\t\t\tt.Errorf(\"pipelineRunFinder.Search() got1 = %v, want %v\", found, tt.wantFound)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc Test_pipelineRunFinder_Locate(t *testing.T) {\n\ttype args struct {\n\t\trun           *job.PipelineRun\n\t\tisMultiBranch bool\n\t}\n\ttests := []struct {\n\t\tname            string\n\t\tfinder          pipelineRunFinder\n\t\targs            args\n\t\twantPipelineRun *v1alpha3.PipelineRun\n\t\twantFound       bool\n\t}{{\n\t\tname:   \"Find general PipelineRuns\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*pipeline1, *pipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: false,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"456\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: pipeline2,\n\t\twantFound:       true,\n\t}, {\n\t\tname:   \"Find multi-branch PipelineRuns\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: true,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID:       \"456\",\n\t\t\t\t\tPipeline: \"main2\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: multiBranchPipeline2,\n\t\twantFound:       true,\n\t}, {\n\t\tname:   \"No PipelineRuns found\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*pipeline1, *pipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: false,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"invalid_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: nil,\n\t\twantFound:       false,\n\t}, {\n\t\tname:   \"No Multi-branch PipelineRuns found\",\n\t\tfinder: newPipelineRunFinder([]v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2}),\n\t\targs: args{\n\t\t\tisMultiBranch: true,\n\t\t\trun: &job.PipelineRun{\n\t\t\t\tBlueItemRun: job.BlueItemRun{\n\t\t\t\t\tID: \"invalid_id\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\twantPipelineRun: nil,\n\t\twantFound:       false,\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tpipelineRun, found := tt.finder.find(tt.args.run, tt.args.isMultiBranch)\n\t\t\tif !reflect.DeepEqual(pipelineRun, tt.wantPipelineRun) {\n\t\t\t\tt.Errorf(\"pipelineRunFinder.Locate() got = %v, want %v\", pipelineRun, tt.wantPipelineRun)\n\t\t\t}\n\t\t\tif found != tt.wantFound {\n\t\t\t\tt.Errorf(\"pipelineRunFinder.Locate() got1 = %v, want %v\", found, tt.wantFound)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc Test_newPipelineRunFinder(t *testing.T) {\n\ttype args struct {\n\t\tpipelineRuns []v1alpha3.PipelineRun\n\t}\n\ttests := []struct {\n\t\tname string\n\t\targs args\n\t\twant pipelineRunFinder\n\t}{{\n\t\tname: \"General PipelineRuns\",\n\t\targs: args{\n\t\t\tpipelineRuns: []v1alpha3.PipelineRun{*pipeline1, *pipeline2},\n\t\t},\n\t\twant: pipelineRunFinder{\n\t\t\tpipelineRunIdentity{id: \"123\"}: pipeline1,\n\t\t\tpipelineRunIdentity{id: \"456\"}: pipeline2,\n\t\t},\n\t}, {\n\t\tname: \"Duplicated PipelineRuns\",\n\t\targs: args{\n\t\t\tpipelineRuns: []v1alpha3.PipelineRun{*pipeline1, *pipeline11, *pipeline2},\n\t\t},\n\t\twant: pipelineRunFinder{\n\t\t\tpipelineRunIdentity{id: \"123\"}: pipeline11,\n\t\t\tpipelineRunIdentity{id: \"456\"}: pipeline2,\n\t\t},\n\t}, {\n\t\tname: \"Multi-branch PipelineRuns\",\n\t\targs: args{\n\t\t\tpipelineRuns: []v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline2},\n\t\t},\n\t\twant: pipelineRunFinder{\n\t\t\tpipelineRunIdentity{id: \"123\", refName: \"main1\"}: multiBranchPipeline1,\n\t\t\tpipelineRunIdentity{id: \"456\", refName: \"main2\"}: multiBranchPipeline2,\n\t\t},\n\t}, {\n\t\tname: \"Duplicated multi-branch PipelineRuns\",\n\t\targs: args{\n\t\t\tpipelineRuns: []v1alpha3.PipelineRun{*multiBranchPipeline1, *multiBranchPipeline11, *multiBranchPipeline2},\n\t\t},\n\t\twant: pipelineRunFinder{\n\t\t\tpipelineRunIdentity{id: \"123\", refName: \"main1\"}: multiBranchPipeline11,\n\t\t\tpipelineRunIdentity{id: \"456\", refName: \"main2\"}: multiBranchPipeline2,\n\t\t},\n\t}}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := newPipelineRunFinder(tt.args.pipelineRuns); !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"newPipelineRunFinder() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
