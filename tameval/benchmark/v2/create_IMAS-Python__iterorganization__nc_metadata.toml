[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "iterorganization/IMAS-Python"
sha = "9446e62f6ce19cd7c64a30e320aa4627041abeaa"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=imas/backends/netcdf/nc_metadata.py -m pytest -q --junit-xml=test_output.xml imas/test/test_nc_metadata.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target imas.backends.netcdf.nc_metadata --unit-test imas.test.test_nc_metadata --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target imas/backends/netcdf/nc_metadata.py --unit-test imas/test/test_nc_metadata.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 97.0
original_coverage = 97.0
mutation_kill_rate = 97.0
original_mutation_kill_rate = 97.0
covered_lines = [ 5, 6, 8, 9, 10, 13, 15, 16, 17, 18, 19, 20, 21, 24, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 62, 64, 67, 68, 69, 70, 76, 78, 81, 83, 86, 89, 91, 99, 100, 102, 103, 106, 111, 119, 122, 123, 126, 131, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 148, 151, 198, 200, 201, 203, 204, 205, 206, 209, 210, 211, 212, 214, 217, 218, 219, 222, 223, 226, 227, 231, 232, 233, 238, 239, 240, 246, 247, 248, 249, 251, 253, 254, 255, 257, 259, 262, 264, 268, 273, 275, 277, 278, 279, 280, 282, 283, 285, 287, 289, 290, 292, 293, 294, 296, 297, 300, 301, 303, 304, 305, 306, 308, 310, 311, 313, 314, 315, 317, 320, 326, 327, 329, 335, 336, 337, 338, 342, 343, 344, 347, 348, 349, 350, 352, 354, 355, 356,]
missed_lines = [ 41, 71, 72, 120,]

[input_info]
test_file_path = "imas/test/test_nc_metadata.py"
focal_file_path = "imas/backends/netcdf/nc_metadata.py"
test_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/test/test_nc_metadata.py"
focal_file_url = "https://github.com/iterorganization/IMAS-Python/blob/9446e62f6ce19cd7c64a30e320aa4627041abeaa/imas/backends/netcdf/nc_metadata.py"
first_commit_date = "2025-01-22"
last_commit_date = "2025-01-23"
test_file_content = "from imas.backends.netcdf.nc_metadata import NCMetadata, _get_aos_label_coordinates\nfrom imas.ids_factory import IDSFactory\n\n\ndef test_generate_nc_metadata(ids_name):\n    ids = IDSFactory().new(ids_name)\n    NCMetadata(ids.metadata)\n\n\ndef test_get_aos_label_coordinates():\n    cp = IDSFactory(\"3.39.0\").core_profiles()\n    pfa = IDSFactory(\"3.39.0\").pf_active()\n\n    assert _get_aos_label_coordinates(cp.metadata[\"profiles_1d\"]) == []\n    expected = [\"profiles_1d.ion.label\"]\n    assert _get_aos_label_coordinates(cp.metadata[\"profiles_1d/ion\"]) == expected\n    expected = [\"coil.name\", \"coil.identifier\"]\n    assert _get_aos_label_coordinates(pfa.metadata[\"coil\"]) == expected\n    expected = [\"coil.element.name\", \"coil.element.identifier\"]\n    assert _get_aos_label_coordinates(pfa.metadata[\"coil.element\"]) == expected\n\n\ndef test_aos_label_coordinates():\n    cp = NCMetadata(IDSFactory(\"3.39.0\").core_profiles().metadata)\n    pfa = NCMetadata(IDSFactory(\"3.39.0\").pf_active().metadata)\n\n    assert cp.get_dimensions(\"profiles_1d/ion\", True) == (\"time\", \"profiles_1d.ion:i\")\n    assert cp.get_coordinates(\"profiles_1d/ion\", True) == (\n        \"time\",\n        \"profiles_1d.ion.label\",\n    )\n\n    assert pfa.get_dimensions(\"coil\", True) == (\"coil:i\",)\n    assert pfa.get_coordinates(\"coil\", True) == (\"coil.name\", \"coil.identifier\")\n    assert pfa.get_dimensions(\"coil/element\", True) == (\"coil:i\", \"coil.element:i\")\n    assert pfa.get_coordinates(\"coil/element\", True) == (\n        \"coil.name\",\n        \"coil.identifier\",\n        \"coil.element.name\",\n        \"coil.element.identifier\",\n    )\n\n\ndef test_time_mode():\n    cp = NCMetadata(IDSFactory(\"3.39.0\").core_profiles().metadata)\n    mag = NCMetadata(IDSFactory(\"3.39.0\").magnetics().metadata)\n\n    # These quantities always have root time as dimension\n    assert cp.get_dimensions(\"time\", True) == (\"time\",)\n    assert cp.get_dimensions(\"time\", False) == (\"time\",)\n    assert cp.get_dimensions(\"global_quantities/ip\", True) == (\"time\",)\n    assert cp.get_dimensions(\"global_quantities/ip\", False) == (\"time\",)\n\n    assert cp.get_coordinates(\"time\", True) == ()\n    assert cp.get_coordinates(\"time\", False) == ()\n    assert cp.get_coordinates(\"global_quantities/ip\", True) == (\"time\",)\n    assert cp.get_coordinates(\"global_quantities/ip\", False) == (\"time\",)\n\n    # Dynamic array of structures\n    assert cp.get_dimensions(\"profiles_1d\", True) == (\"time\",)\n    assert cp.get_dimensions(\"profiles_1d\", False) == (\"profiles_1d.time\",)\n    assert cp.get_dimensions(\"profiles_1d/grid/rho_tor\", True)[0] == \"time\"\n    assert cp.get_dimensions(\"profiles_1d/grid/rho_tor\", False)[0] == \"profiles_1d.time\"\n\n    assert cp.get_coordinates(\"profiles_1d\", True) == (\"time\",)\n    assert cp.get_coordinates(\"profiles_1d\", False) == (\"profiles_1d.time\",)\n    coors = cp.get_coordinates(\"profiles_1d/grid/rho_tor\", True)\n    assert coors == (\"time\", \"profiles_1d.grid.rho_tor_norm\")\n    coors = cp.get_coordinates(\"profiles_1d/grid/rho_tor\", False)\n    assert coors == (\"profiles_1d.time\", \"profiles_1d.grid.rho_tor_norm\")\n\n    # Sibling time nodes\n    assert mag.get_dimensions(\"flux_loop/flux/data\", True) == (\"flux_loop:i\", \"time\")\n    dims = mag.get_dimensions(\"flux_loop/flux/data\", False)\n    assert dims == (\"flux_loop:i\", \"flux_loop.flux.time:i\")\n\n    coors = mag.get_coordinates(\"flux_loop/flux/data\", True)\n    assert coors == (\"flux_loop.name\", \"flux_loop.identifier\", \"time\")\n    coors = mag.get_coordinates(\"flux_loop/flux/data\", False)\n    assert coors == (\"flux_loop.name\", \"flux_loop.identifier\", \"flux_loop.flux.time\")\n\n\ndef test_dd3_alternative_coordinates():\n    distr = NCMetadata(IDSFactory(\"3.39.0\").distributions().metadata)\n\n    # Dimension names use the first listed of the alternatives\n    assert distr.get_dimensions(\"distribution/profiles_2d/density\", True) == (\n        \"distribution:i\",\n        \"time\",\n        \"distribution.profiles_2d.grid.r:i\",\n        \"distribution.profiles_2d.grid.z:i\",\n    )\n\n    # Auxiliary coordinates list all, including the alternatives\n    assert distr.get_coordinates(\"distribution/profiles_2d/density\", True) == (\n        \"time\",\n        \"distribution.profiles_2d.grid.r\",\n        \"distribution.profiles_2d.grid.rho_tor_norm\",\n        \"distribution.profiles_2d.grid.z\",\n        \"distribution.profiles_2d.grid.theta_geometric\",\n        \"distribution.profiles_2d.grid.theta_straight\",\n    )\n\n\ndef test_dd4_alternative_coordinates():\n    cp = NCMetadata(IDSFactory(\"4.0.0\").core_profiles().metadata)\n\n    # Dimension names use the first listed of the alternatives\n    dims = cp.get_dimensions(\"profiles_1d/j_phi\", True)\n    assert dims == (\"time\", \"profiles_1d.grid.rho_tor_norm:i\")\n\n    # Auxiliary coordinates list all, including the alternatives\n    assert cp.get_coordinates(\"profiles_1d/j_phi\", True) == (\n        \"time\",\n        \"profiles_1d.grid.rho_tor_norm\",\n        \"profiles_1d.grid.rho_tor\",\n        \"profiles_1d.grid.psi\",\n        \"profiles_1d.grid.volume\",\n        \"profiles_1d.grid.area\",\n        \"profiles_1d.grid.surface\",\n        \"profiles_1d.grid.rho_pol_norm\",\n    )\n\n\ndef test_coordinate_same_as():\n    cir = NCMetadata(IDSFactory(\"3.39.0\").camera_ir().metadata)\n\n    # Both dimensions have coordinate_same_as set:\n    dims = cir.get_dimensions(\"calibration/transmission_barrel\", True)\n    assert dims == (\"frame.surface_temperature:i\", \"frame.surface_temperature:j\")\n\n    # coordinate_same_as shouldn't become auxiliary coordinates\n    assert cir.get_coordinates(\"calibration/transmission_barrel\", True) == ()\n\n\ndef test_tensorization():\n    eq = NCMetadata(IDSFactory(\"3.39.0\").equilibrium().metadata)\n\n    assert eq.get_dimensions(\n        \"grids_ggd/grid/space/objects_per_dimension/object/geometry\", False\n    ) == (\n        \"grids_ggd.time\",\n        \"grids_ggd.grid:i\",\n        \"grids_ggd.grid.space:i\",\n        \"grids_ggd.grid.space.objects_per_dimension:i\",\n        \"grids_ggd.grid.space.objects_per_dimension.object:i\",\n        \"grids_ggd.grid.space.objects_per_dimension.object.geometry:i\",\n    )\n\n    coors = eq.get_coordinates(\n        \"grids_ggd/grid/space/objects_per_dimension/object/geometry\", False\n    )\n    assert coors == (\"grids_ggd.time\",)\n"
