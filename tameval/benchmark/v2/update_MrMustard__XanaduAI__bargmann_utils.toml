[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "XanaduAI/MrMustard"
sha = "a4e85ddf1df86333ecb8014f36d30e4437cbe4d4"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mrmustard/physics/bargmann_utils.py -m pytest -q --junit-xml=test_output.xml tests/test_physics/test_bargmann_utils.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mrmustard.physics.bargmann_utils --unit-test tests.test_physics.test_bargmann_utils --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mrmustard/physics/bargmann_utils.py --unit-test tests/test_physics/test_bargmann_utils.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 15.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 59.0
covered_lines = [ 18, 20, 21, 22, 25, 64, 79, 98, 108, 149, 175,]
missed_lines = [ 56, 57, 58, 59, 60, 61, 75, 76, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 104, 114, 115, 117, 118, 120, 122, 123, 124, 125, 127, 129, 146, 155, 158, 159, 161, 162, 164, 167, 168, 169, 170, 172, 183, 184, 187, 193, 199, 205, 214, 216, 218, 219, 220, 224, 225, 226, 231, 236,]

[input_info]
test_file_path = "tests/test_physics/test_bargmann_utils.py"
focal_file_path = "mrmustard/physics/bargmann_utils.py"
test_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/tests/test_physics/test_bargmann_utils.py"
focal_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/mrmustard/physics/bargmann_utils.py"
first_commit_date = "2024-10-29"
last_commit_date = "2025-07-09"
test_file_content = "# Copyright 2021 Xanadu Quantum Technologies Inc.\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for the bargmann_utils.py file.\"\"\"\n\nimport numpy as np\n\nfrom mrmustard import math\nfrom mrmustard.lab import DM, Channel, Dgate, Ket, Unitary, Vacuum\nfrom mrmustard.physics.bargmann_utils import (\n    XY_of_channel,\n    au2Symplectic,\n    norm_ket,\n    symplectic2Au,\n    trace_dm,\n    wigner_to_bargmann_psi,\n    wigner_to_bargmann_rho,\n)\n\n\ndef test_wigner_to_bargmann_psi():\n    \"\"\"Test that the Bargmann representation of a ket is correct\"\"\"\n    G = Ket.random((0, 1)) >> Dgate(0, 0.1, 0.2) >> Dgate(1, 0.2, 0.4)\n    cov, means, coeff = G.phase_space(s=0)\n    A_exp, b_exp, c_exp = wigner_to_bargmann_psi(cov, means)\n    A, b, c = G.bargmann_triple()\n    assert np.allclose(A, A_exp)\n    assert np.allclose(b, b_exp)\n    assert np.allclose(np.abs(c), np.abs(c_exp))\n\n\ndef test_wigner_to_bargmann_rho():\n    \"\"\"Test that the Bargmann representation of a dm is correct\"\"\"\n    G = DM.random((0, 1)) >> Dgate(0, 0.1, 0.2) >> Dgate(1, 0.2, 0.4)\n    cov, means, coeff = G.phase_space(s=0)\n    A, b, c = wigner_to_bargmann_rho(cov, means)\n    A_exp, b_exp, c_exp = wigner_to_bargmann_rho(cov, means)\n    assert np.allclose(A, A_exp)\n    assert np.allclose(b, b_exp)\n    assert np.allclose(c, c_exp)\n\n\ndef test_norm_ket():\n    \"\"\"Test that the norm of a ket is calculated correctly\"\"\"\n\n    ket = Vacuum((0, 1)) >> Unitary.from_symplectic((0, 1), math.random_symplectic(2))\n    A, b, c = ket.bargmann_triple()\n    assert np.isclose(norm_ket(A, b, c), ket.probability)\n\n\ndef test_trace_dm():\n    \"\"\"Test that the trace of a density matrix is calculated correctly\"\"\"\n    ket = Vacuum((0, 1, 2, 3)) >> Unitary.from_symplectic((0, 1, 2, 3), math.random_symplectic(4))\n    dm = ket[0, 1]\n    A, b, c = dm.bargmann_triple()\n    assert np.allclose(trace_dm(A, b, c), dm.probability)\n\n\ndef test_au2Symplectic():\n    \"\"\"Tests the Au -> symplectic code; we check two simple examples\"\"\"\n    # Beam splitter example\n    V = 1 / np.sqrt(2) * np.array([[1, 1], [-1, 1]])\n\n    Au = np.block([[np.zeros_like(V), V], [np.transpose(V), np.zeros_like(V)]])\n    S = au2Symplectic(Au)\n    S_by_hand = np.block([[V, np.zeros_like(V)], [np.zeros_like(V), np.conjugate(V)]])\n    transformation = (\n        1\n        / np.sqrt(2)\n        * np.block(\n            [\n                [np.eye(2), np.eye(2)],\n                [-1j * np.eye(2), 1j * np.eye(2)],\n            ],\n        )\n    )\n    S_by_hand = transformation @ S_by_hand @ np.conjugate(np.transpose(transformation))\n    assert np.allclose(S, S_by_hand)\n\n    # squeezing example\n    r = 2\n    Au = np.array([[-np.tanh(r), 1 / np.cosh(r)], [1 / np.cosh(r), np.tanh(r)]])\n    S = au2Symplectic(Au)\n    S_by_hand = np.array([[np.cosh(r), -np.sinh(r)], [-np.sinh(r), np.cosh(r)]])\n    transformation = 1 / np.sqrt(2) * np.array([[1, 1], [-1j, 1j]])\n    S_by_hand = transformation @ S_by_hand @ np.conjugate(np.transpose(transformation))\n    assert np.allclose(S, S_by_hand)\n\n\ndef test_symplectic2Au():\n    \"\"\"Tests the Symplectic -> Au code\"\"\"\n\n    # here we consider the circuit of two-mode squeezing\n\n    r = 2  # some squeezing parameter\n\n    S_bs = np.array([[1, 1, 0, 0], [-1, 1, 0, 0], [0, 0, 1, 1], [0, 0, -1, 1]]) / np.sqrt(2)\n\n    S_sq = np.array(\n        [\n            [np.cosh(r), 0, -np.sinh(r), 0],\n            [0, np.cosh(r), 0, np.sinh(r)],\n            [-np.sinh(r), 0, np.cosh(r), 0],\n            [0, np.sinh(r), 0, np.cosh(r)],\n        ],\n    )\n\n    S = S_bs @ S_sq\n\n    m = S.shape[-1]\n    m = m // 2\n    # the following lines of code transform the quadrature symplectic matrix to\n    # the annihilation one\n    transformation = np.block(\n        [[np.eye(m), np.eye(m)], [-1j * np.eye(m), 1j * np.eye(m)]],\n    ) / np.sqrt(2)\n    S = transformation @ S @ np.conjugate(np.transpose(transformation))\n    A = symplectic2Au(S)\n\n    W = S_bs[:2, :2]\n    T = np.diag([np.tanh(r), -np.tanh(r)])\n    C = np.diag([np.cosh(r), np.cosh(r)])\n    Sec = np.linalg.pinv(C)\n    A_by_hand = np.block(\n        [[-W @ T @ np.transpose(W), W @ Sec], [Sec @ np.transpose(W), np.conjugate(T)]],\n    )\n\n    assert np.allclose(A, A_by_hand)\n\n\ndef test_XY_of_channel():\n    r\"\"\"\n    Tests the function X_of_channel.\n    \"\"\"\n\n    X, Y = XY_of_channel(Channel.random([0]).ansatz.A)\n    omega = np.array([[0, 1j], [-1j, 0]])\n    channel_check = X @ omega @ X.T / 2 - omega / 2 + Y\n    assert np.all([mu > 0 for mu in np.linalg.eigvals(channel_check)])"
