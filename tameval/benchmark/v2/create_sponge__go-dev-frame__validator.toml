[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "go-dev-frame/sponge"
sha = "e72bb7443479d95928a16711696af6523999a717"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/gin/validator/validator.go pkg/gin/validator/validator_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/gin/validator/validator.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 86.0
original_coverage = 86.0
mutation_kill_rate = 53.0
original_mutation_kill_rate = 53.0
covered_lines = [ 11, 12, 13, 14, 15, 24, 25, 26, 29, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 46, 50, 52, 53, 54, 55, 56, 57, 58, 62, 66, 67, 68, 69, 71, 72, 73, 74, 75,]
missed_lines = [ 30, 31, 32, 47, 48, 49,]

[input_info]
test_file_path = "pkg/gin/validator/validator_test.go"
focal_file_path = "pkg/gin/validator/validator.go"
test_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/gin/validator/validator_test.go"
focal_file_url = "https://github.com/go-dev-frame/sponge/blob/e72bb7443479d95928a16711696af6523999a717/pkg/gin/validator/validator.go"
first_commit_date = "2022-09-19"
last_commit_date = "2025-05-11"
test_file_content = "package validator\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/gin-gonic/gin/binding\"\n\t\"github.com/stretchr/testify/assert\"\n\n\t\"github.com/go-dev-frame/sponge/pkg/utils\"\n)\n\nfunc runValidatorHTTPServer() string {\n\tserverAddr, requestAddr := utils.GetLocalHTTPAddrPairs()\n\n\tgin.SetMode(gin.ReleaseMode)\n\tr := gin.Default()\n\tbinding.Validator = Init()\n\n\tr.POST(\"/hello\", createHello)\n\tr.DELETE(\"/hello\", deleteHello)\n\tr.PUT(\"/hello\", updateHello)\n\tr.GET(\"/hello\", getHello)\n\tr.GET(\"/hello/:id\", getHello)\n\tr.GET(\"/hellos\", getHellos)\n\n\tgo func() {\n\t\terr := r.Run(serverAddr)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\ttime.Sleep(time.Millisecond * 200)\n\treturn requestAddr\n}\n\nvar (\n\thelloStr = \"hello world\"\n\tparamErr = \"params is invalid\"\n\n\twantHello    = fmt.Sprintf(`\"%s\"`, helloStr)\n\twantParamErr = fmt.Sprintf(`\"%s\"`, paramErr)\n)\n\ntype postForm struct {\n\tName  string `json:\"name\" form:\"name\" binding:\"required\"`\n\tAge   int    `json:\"age\" form:\"age\" binding:\"gte=0,lte=150\"`\n\tEmail string `json:\"email\" form:\"email\" binding:\"email,required\"`\n}\n\nfunc createHello(c *gin.Context) {\n\tform := &postForm{}\n\terr := c.ShouldBindJSON(form)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tc.JSON(http.StatusBadRequest, paramErr)\n\t\treturn\n\t}\n\tfmt.Printf(\"%+v\\n\", form)\n\tc.JSON(http.StatusOK, helloStr)\n}\n\ntype deleteForm struct {\n\tIDS []uint64 `form:\"ids\" binding:\"required,min=1\"`\n}\n\nfunc deleteHello(c *gin.Context) {\n\tform := &deleteForm{}\n\terr := c.ShouldBindJSON(form)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tc.JSON(http.StatusBadRequest, paramErr)\n\t\treturn\n\t}\n\tfmt.Printf(\"%+v\\n\", form)\n\tc.JSON(http.StatusOK, helloStr)\n}\n\ntype updateForm struct {\n\tID    uint64 `json:\"id\" form:\"id\" binding:\"required,gt=0\"`\n\tAge   int    `json:\"age\" form:\"age\" binding:\"gte=0,lte=150\"`\n\tEmail string `json:\"email\" form:\"email\" binding:\"email,required\"`\n}\n\nfunc updateHello(c *gin.Context) {\n\tform := &updateForm{}\n\terr := c.ShouldBindJSON(form)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tc.JSON(http.StatusBadRequest, paramErr)\n\t\treturn\n\t}\n\tfmt.Printf(\"%+v\\n\", form)\n\tc.JSON(http.StatusOK, helloStr)\n}\n\ntype getForm struct {\n\tID uint64 `form:\"id\" binding:\"gt=0\"`\n}\n\nfunc getHello(c *gin.Context) {\n\tid, _ := strconv.ParseUint(c.Param(\"id\"), 10, 0)\n\tform := &getForm{ID: id}\n\terr := c.ShouldBindQuery(form)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tc.JSON(http.StatusBadRequest, paramErr)\n\t\treturn\n\t}\n\tfmt.Printf(\"%+v\\n\", form)\n\tc.JSON(http.StatusOK, helloStr)\n}\n\ntype getsForm struct {\n\tPage  int    `form:\"page\" binding:\"gte=0\"`\n\tLimit int    `form:\"limit\" binding:\"gte=1\"`\n\tSort  string `form:\"sort\" binding:\"required,min=2\"`\n}\n\nfunc getHellos(c *gin.Context) {\n\tform := &getsForm{}\n\terr := c.ShouldBindQuery(form)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\tc.JSON(http.StatusBadRequest, paramErr)\n\t\treturn\n\t}\n\tfmt.Printf(\"%+v\\n\", form)\n\tc.JSON(http.StatusOK, helloStr)\n}\n\n// ------------------------------------------------------------------------------------------\n// http client\n// ------------------------------------------------------------------------------------------\n\nfunc TestPostValidate(t *testing.T) {\n\trequestAddr := runValidatorHTTPServer()\n\n\tt.Run(\"success\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPost, requestAddr+\"/hello\", &postForm{\n\t\t\tName:  \"foo\",\n\t\t\tAge:   10,\n\t\t\tEmail: \"bar@gmail.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantHello {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantHello)\n\t\t}\n\t})\n\n\tt.Run(\"missing field error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPost, requestAddr+\"/hello\", &postForm{\n\t\t\tAge:   10,\n\t\t\tEmail: \"bar@gmail.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n\n\tt.Run(\"field range  error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPost, requestAddr+\"/hello\", &postForm{\n\t\t\tName:  \"foo\",\n\t\t\tAge:   -1,\n\t\t\tEmail: \"bar@gmail.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n\n\tt.Run(\"email error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPost, requestAddr+\"/hello\", &postForm{\n\t\t\tName:  \"foo\",\n\t\t\tAge:   10,\n\t\t\tEmail: \"bar\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n}\n\n// ------------------------------------------------------------------------------------------\n\nfunc TestDeleteValidate(t *testing.T) {\n\trequestAddr := runValidatorHTTPServer()\n\n\tt.Run(\"success\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodDelete, requestAddr+\"/hello\", &deleteForm{\n\t\t\tIDS: []uint64{1, 2, 3},\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantHello {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantHello)\n\t\t}\n\t})\n\n\tt.Run(\"missing field error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodDelete, requestAddr+\"/hello\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n\n\tt.Run(\"ids  error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodDelete, requestAddr+\"/hello\", &deleteForm{IDS: []uint64{}})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n}\n\n// -------------------------------------------------------------------------------------------\n\nfunc TestPutValidate(t *testing.T) {\n\trequestAddr := runValidatorHTTPServer()\n\n\tt.Run(\"success\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPut, requestAddr+\"/hello\", &updateForm{\n\t\t\tID:    100,\n\t\t\tAge:   10,\n\t\t\tEmail: \"bar@gmail.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantHello {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantHello)\n\t\t}\n\t})\n\n\tt.Run(\"missing field error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPut, requestAddr+\"/hello\", &updateForm{\n\t\t\tAge:   10,\n\t\t\tEmail: \"bar@gmail.com\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n\n\tt.Run(\"email error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodPut, requestAddr+\"/hello\", &updateForm{\n\t\t\tID:    101,\n\t\t\tAge:   10,\n\t\t\tEmail: \"bar\",\n\t\t})\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n}\n\n// -------------------------------------------------------------------------------------------\n\nfunc TestGetValidate(t *testing.T) {\n\trequestAddr := runValidatorHTTPServer()\n\n\tt.Run(\"success\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodGet, requestAddr+\"/hello?id=100\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantHello {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantHello)\n\t\t}\n\t})\n\n\tt.Run(\"success2\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodGet, requestAddr+\"/hello/101\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantHello {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantHello)\n\t\t}\n\t})\n\n\tt.Run(\"miss id error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodGet, requestAddr+\"/hello\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n}\n\n// -------------------------------------------------------------------------------------------\n\nfunc TestGetsValidate(t *testing.T) {\n\trequestAddr := runValidatorHTTPServer()\n\n\tt.Run(\"success\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodGet, requestAddr+\"/hellos?page=0&limit=10&sort=-id\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantHello {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantHello)\n\t\t}\n\t})\n\n\tt.Run(\"missing field error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodGet, requestAddr+\"/hellos?page=0&limit=10\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n\n\tt.Run(\"size error\", func(t *testing.T) {\n\t\tgot, err := do(http.MethodGet, requestAddr+\"/hellos?page=0&limit=0&sort=-id\", nil)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t\treturn\n\t\t}\n\t\tif string(got) != wantParamErr {\n\t\t\tt.Errorf(\"got: %s, want: %s\", got, wantParamErr)\n\t\t}\n\t})\n}\n\n// ------------------------------------------------------------------------------------------\n\nfunc do(method string, url string, body interface{}) ([]byte, error) {\n\tvar reader io.Reader\n\tif body == nil {\n\t\treader = nil\n\t} else {\n\t\tv, err := json.Marshal(body)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treader = bytes.NewReader(v)\n\t}\n\n\tmethod = strings.ToUpper(method)\n\tswitch method {\n\tcase http.MethodPost, http.MethodPut, http.MethodPatch, http.MethodDelete:\n\t\treq, err := http.NewRequest(method, url, reader)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treq.Header.Add(\"Content-Type\", \"application/json\")\n\t\tresp, err := http.DefaultClient.Do(req)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\treturn io.ReadAll(resp.Body)\n\n\tcase http.MethodGet:\n\t\tresp, err := http.Get(url)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tdefer resp.Body.Close()\n\t\treturn io.ReadAll(resp.Body)\n\n\tdefault:\n\t\treturn nil, errors.New(\"unknown method\")\n\t}\n}\n\n// ------------------------------------------------------------------------------------------\n\nfunc Test_CustomValidator_ValidateStruct(t *testing.T) {\n\ttype User struct {\n\t\tName string `binding:\"required\"`\n\t\tAge  int    `binding:\"gte=18\"`\n\t}\n\n\ttype UserList1 struct {\n\t\tUsers []User `binding:\"required,dive\"`\n\t}\n\n\ttype UserList2 struct {\n\t\tUsers []*User `binding:\"required,dive\"`\n\t}\n\n\tvalidator := Init()\n\n\tuser := &User{Name: \"John\", Age: 10}\n\tif err := validator.ValidateStruct(user); err != nil {\n\t\tassert.NotNil(t, err)\n\t\tt.Log(err)\n\t}\n\n\tvar u = &User{Name: \"John\", Age: 11}\n\tif err := validator.ValidateStruct(&u); err != nil {\n\t\tassert.NotNil(t, err)\n\t\tt.Log(err)\n\t}\n\n\tusers := []User{{Name: \"Alice\", Age: 25}, {Name: \"Bob\", Age: 17}}\n\tif err := validator.ValidateStruct(users); err != nil {\n\t\tassert.NotNil(t, err)\n\t\tt.Log(err)\n\t}\n\n\tuserList := UserList1{}\n\tif err := validator.ValidateStruct(&userList); err != nil {\n\t\tassert.NotNil(t, err)\n\t\tt.Log(err)\n\t}\n\n\tuserList1 := UserList1{\n\t\tUsers: []User{{Name: \"Charlie\", Age: 10}, {Name: \"\", Age: 30}},\n\t}\n\tif err := validator.ValidateStruct(&userList1); err != nil {\n\t\tassert.NotNil(t, err)\n\t\tt.Log(err)\n\t}\n\n\tuserList2 := UserList2{\n\t\tUsers: []*User{{Name: \"Charlie\", Age: 30}, {Name: \"\", Age: 40}},\n\t}\n\tif err := validator.ValidateStruct(&userList2); err != nil {\n\t\tassert.NotNil(t, err)\n\t\tt.Log(err)\n\t}\n}\n\nfunc Benchmark_CustomValidator_ValidateStruct(b *testing.B) {\n\ttype User struct {\n\t\tName string `binding:\"required\"`\n\t\tAge  int    `binding:\"gte=18\"`\n\t}\n\n\ttype UserList1 struct {\n\t\tUsers []User `binding:\"required,dive\"` // 验证指针切片\n\t}\n\n\ttype UserList2 struct {\n\t\tUsers []*User `binding:\"required,dive\"` // 验证指针切片\n\t}\n\n\tvalidator := Init()\n\n\tb.Run(\"User struct\", func(b *testing.B) {\n\t\tuser := User{Name: \"John\", Age: 10}\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = validator.ValidateStruct(user)\n\t\t}\n\t})\n\n\tb.Run(\"User struct pointer\", func(b *testing.B) {\n\t\tuser := &User{Name: \"John\", Age: 10}\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = validator.ValidateStruct(user)\n\t\t}\n\t})\n\n\tb.Run(\"User struct pointer pointer\", func(b *testing.B) {\n\t\tvar u = &User{Name: \"John\", Age: 11}\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = validator.ValidateStruct(&u)\n\t\t}\n\t})\n\n\tb.Run(\"User slice\", func(b *testing.B) {\n\t\tusers := []User{{Name: \"Alice\", Age: 25}, {Name: \"Bob\", Age: 17}}\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = validator.ValidateStruct(users)\n\t\t}\n\t})\n\n\tb.Run(\"UserList slice struct\", func(b *testing.B) {\n\t\tuserList1 := UserList1{\n\t\t\tUsers: []User{{Name: \"Charlie\", Age: 10}, {Name: \"\", Age: 30}},\n\t\t}\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = validator.ValidateStruct(&userList1)\n\t\t}\n\t})\n\n\tb.Run(\"UserList slice struct pointer\", func(b *testing.B) {\n\t\tuserList2 := UserList2{\n\t\t\tUsers: []*User{{Name: \"Charlie\", Age: 30}, {Name: \"\", Age: 40}},\n\t\t}\n\t\tfor i := 0; i < b.N; i++ {\n\t\t\t_ = validator.ValidateStruct(&userList2)\n\t\t}\n\t})\n}\n"
