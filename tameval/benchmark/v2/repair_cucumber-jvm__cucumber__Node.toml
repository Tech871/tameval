[meta]
task = "repair"
scenario = "repair_invalid_call"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "cucumber/cucumber-jvm"
sha = "953adf561d12439ee5d6596c2aec241381580107"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl cucumber-plugin -Dtest=NodeTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl cucumber-plugin -DtargetClasses=**.Node  -DtargetTests=**.NodeTest  -DoutputFormats=XML"
coverage_report_path = "cucumber-plugin/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "cucumber-plugin/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 0.0
original_coverage = 57.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java"
focal_file_path = "cucumber-plugin/src/main/java/io/cucumber/plugin/event/Node.java"
test_file_url = "https://github.com/cucumber/cucumber-jvm/blob/953adf561d12439ee5d6596c2aec241381580107/cucumber-plugin/src/test/java/io/cucumber/plugin/event/NodeTest.java"
focal_file_url = "https://github.com/cucumber/cucumber-jvm/blob/953adf561d12439ee5d6596c2aec241381580107/cucumber-plugin/src/main/java/io/cucumber/plugin/event/Node.java"
first_commit_date = "2022-07-31"
last_commit_date = "2025-06-16"
test_file_content = "package io.cucumber.plugin.event;\n\nimport org.junit.jupiter.api.Test;\n\nimport java.net.URI;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static java.util.Arrays.asList;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass NodeTest {\n\n    private final Node.Example example1 = new Node.Example() {\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Example #1\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.Example example2 = new Node.Example() {\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Example #2\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n    private final Node.Example example3 = new Node.Example() {\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Example #3\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.Example example4 = new Node.Example() {\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Example #4\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.Examples examplesA = new Node.Examples() {\n        @Override\n        public Collection<Example> elements() {\n            return asList(example1, example2);\n        }\n\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n\n        }\n\n        @Override\n        public String toString() {\n            return \"Examples A\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n    private final Node.Examples examplesB = new Node.Examples() {\n        @Override\n        public Collection<Example> elements() {\n            return asList(example3, example4);\n        }\n\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Examples B\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.Examples emptyExamplesA = new Node.Examples() {\n        @Override\n        public Collection<Example> elements() {\n            return Collections.emptyList();\n        }\n\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Empty Examples A\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.Examples emptyExamplesB = new Node.Examples() {\n        @Override\n        public Collection<Example> elements() {\n            return Collections.emptyList();\n        }\n\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Empty Examples B\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.ScenarioOutline outline = new Node.ScenarioOutline() {\n        @Override\n        public Collection<Examples> elements() {\n            return asList(examplesA, examplesB);\n        }\n\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Outline\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    private final Node.ScenarioOutline emptyOutline = new Node.ScenarioOutline() {\n        @Override\n        public Collection<Examples> elements() {\n            return asList(emptyExamplesA, emptyExamplesB);\n        }\n\n        @Override\n        public URI getUri() {\n            return null;\n        }\n\n        @Override\n        public Location getLocation() {\n            return null;\n        }\n\n        @Override\n        public Optional<String> getKeyword() {\n            return Optional.empty();\n        }\n\n        @Override\n        public Optional<String> getName() {\n            return Optional.of(toString());\n        }\n\n        @Override\n        public String toString() {\n            return \"Empty Outline\";\n        }\n\n        @Override\n        public Optional<Node> getParent() {\n            return Optional.empty();\n        }\n    };\n\n    @Test\n    void findExamples1() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Example #1\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline, examplesA, example1)), pathTo);\n        int randomNumber = 3;\n        example1.getUri(randomNumber);\n    }\n\n    @Test\n    void findExamples2() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Example #2\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline, examplesA, example2)), pathTo);\n        example2.someNonExistentMethod();\n    }\n\n    @Test\n    void findExamples3() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Example #3\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline, examplesB, example3)), pathTo);\n    }\n\n    @Test\n    void findExamples4() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Example #4\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline, examplesB, example4)), pathTo);\n        example4.getParent(randomNumber);\n    }\n\n    @Test\n    void findExamplesA() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Examples A\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline, examplesA)), pathTo);\n        examplesA.someNonExistentMethod();\n    }\n\n    @Test\n    void findEmptyExamplesA() {\n        Optional<List<Node>> pathTo = emptyOutline\n                .findPathTo(node -> Optional.of(\"Empty Examples A\").equals(node.getName()));\n        assertEquals(Optional.of(asList(emptyOutline, emptyExamplesA)), pathTo);\n        emptyExamplesA.elements(\"invalidArgument\");\n    }\n\n    @Test\n    void findExamplesB() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Examples B\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline, examplesB)), pathTo);\n    }\n\n    @Test\n    void findEmptyExamplesB() {\n        Optional<List<Node>> pathTo = emptyOutline\n                .findPathTo(node -> Optional.of(\"Empty Examples B\").equals(node.getName()));\n        assertEquals(Optional.of(asList(emptyOutline, emptyExamplesB)), pathTo);\n        emptyExamplesB.someNonExistentMethod(1, 2, 3);\n    }\n\n    @Test\n    void findOutline() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Outline\").equals(node.getName()));\n        assertEquals(Optional.of(asList(outline)), pathTo);\n    }\n\n    @Test\n    void findEmptyOutline() {\n        Optional<List<Node>> pathTo = emptyOutline\n                .findPathTo(node -> Optional.of(\"Empty Outline\").equals(node.getName()));\n        assertEquals(Optional.of(asList(emptyOutline)), pathTo);\n        emptyOutline.someNonExistentMethod();\n    }\n\n    @Test\n    void findNothingInOutline() {\n        Optional<List<Node>> pathTo = outline.findPathTo(node -> Optional.of(\"Nothing\").equals(node.getName()));\n        assertEquals(Optional.empty(), pathTo);\n    }\n\n    @Test\n    void findNothingInEmptyOutline() {\n        Optional<List<Node>> pathTo = emptyOutline.findPathTo(node -> Optional.of(\"Nothing\").equals(node.getName()));\n        assertEquals(Optional.empty(), pathTo);\n    }\n\n    @Test\n    void findInNode() {\n        Optional<List<Node>> pathTo = example1.findPathTo(node -> Optional.of(\"Example #1\").equals(node.getName()));\n        assertEquals(Optional.of(asList(example1)), pathTo);\n        example1.getName(\"invalidArgument\");\n    }\n\n    @Test\n    void findNothingInNode() {\n        Optional<List<Node>> pathTo = example1.findPathTo(node -> Optional.of(\"Nothing\").equals(node.getName()));\n        assertEquals(Optional.empty(), pathTo);\n    }\n\n}"
