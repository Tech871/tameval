[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Python"
python_version = "3.11"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "LLMP-io/Legion"
sha = "ba7764e32f6e9ff9b93439ee62df5da5d26608f9"

[run_info]
docker_image = "python:3.11"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "pip install -r requirements.txt && (pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=legion/graph/channel_manager.py -m pytest -q --junit-xml=test_output.xml tests/graph/test_channel_manager.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target legion.graph.channel_manager --unit-test tests.graph.test_channel_manager --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target legion/graph/channel_manager.py --unit-test tests/graph/test_channel_manager.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 67.0
original_coverage = 98.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 0, 1, 3, 6, 9, 11, 12, 13, 14, 15, 17, 26, 27, 28, 30, 49, 52, 53, 55, 58, 59, 66, 68, 82, 94, 111, 121, 130, 133, 134, 135, 137, 138, 139, 146, 158, 160, 168, 170, 180,]
missed_lines = [ 50, 56, 80, 90, 91, 92, 107, 108, 109, 119, 131, 140, 141, 142, 143, 144, 178, 182, 183, 184,]

[input_info]
test_file_path = "tests/graph/test_channel_manager.py"
focal_file_path = "legion/graph/channel_manager.py"
test_file_url = "https://github.com/LLMP-io/Legion/blob/ba7764e32f6e9ff9b93439ee62df5da5d26608f9/tests/graph/test_channel_manager.py"
focal_file_url = "https://github.com/LLMP-io/Legion/blob/ba7764e32f6e9ff9b93439ee62df5da5d26608f9/legion/graph/channel_manager.py"
first_commit_date = "2025-01-07"
last_commit_date = "2025-01-08"
test_file_content = "import pytest\n\nfrom legion.graph.channel_manager import ChannelManager\nfrom legion.graph.channels import LastValue\n\nclass TestChannelManager:\n    \"\"\"Test cases for ChannelManager\"\"\"\n\n    def test_channel_type_registration(self):\n        \"\"\"Test channel type registration\"\"\"\n        manager = ChannelManager()\n\n        # Test registration\n        manager.register_channel_type(\"last_value\", LastValue)\n        assert \"last_value\" in manager.get_registered_types()\n\n        # Test duplicate registration\n        with pytest.raises(ValueError):\n            manager.register_channel_type(\"last_value\", LastValue)\n\n    def test_performance_metrics(self):\n        \"\"\"Test performance metrics tracking\"\"\"\n        manager = ChannelManager()\n        manager.register_channel_type(\"last_value\", LastValue)\n        channel = manager.create_channel(\"last_value\")\n\n        # Initial metrics\n        metrics = manager.get_metrics(channel.id)\n        assert metrics[\"update_count\"] == 0\n        assert metrics[\"error_count\"] == 0\n        assert metrics[\"last_update\"] is None\n\n        # Update metrics\n        manager.update_metrics(channel.id)\n        metrics = manager.get_metrics(channel.id)\n        assert metrics[\"update_count\"] == 1\n        assert metrics[\"last_update\"] is not None\n\n        # Update with error\n        manager.update_metrics(channel.id, ValueError())\n        metrics = manager.get_metrics(channel.id)\n        assert metrics[\"error_count\"] == 1\n\n        # Get metrics for unknown channel\n        assert manager.get_metrics(\"unknown\") is None\n"
