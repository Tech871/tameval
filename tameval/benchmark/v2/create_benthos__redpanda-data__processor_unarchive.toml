[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.23.0"

[repo_info]
repository = "redpanda-data/benthos"
sha = "7da18c5fb096a3607f9f70c06614742b24ae938e"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/impl/pure/processor_unarchive.go internal/impl/pure/processor_unarchive_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/impl/pure/processor_unarchive.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 69.0
original_coverage = 69.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 85, 86, 87, 88, 91, 94, 95, 100, 101, 106, 107, 108, 109, 110, 115, 120, 121, 122, 123, 126, 129, 130, 135, 140, 141, 142, 143, 144, 145, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 170, 171, 172, 173, 174, 175, 179, 180, 181, 183, 186, 187, 192, 197, 198, 199, 200, 201, 202, 203, 206, 207, 212, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 270, 271, 272, 273, 275, 276, 277, 284, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 308, 309, 313, 317, 318, 321, 331, 332, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 356,]
missed_lines = [ 48, 49, 50, 51, 52, 60, 61, 62, 76, 77, 78, 81, 82, 83, 96, 97, 98, 102, 103, 104, 111, 112, 113, 116, 117, 118, 131, 132, 133, 136, 137, 138, 150, 151, 152, 166, 167, 168, 176, 177, 178, 188, 189, 190, 193, 194, 195, 208, 209, 210, 213, 214, 215, 232, 233, 234, 260, 261, 262, 265, 266, 267, 280, 281, 282, 310, 311, 312, 314, 315, 316, 333, 334, 335, 352, 353, 354, 355, 359, 360, 361,]

[input_info]
test_file_path = "internal/impl/pure/processor_unarchive_test.go"
focal_file_path = "internal/impl/pure/processor_unarchive.go"
test_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_unarchive_test.go"
focal_file_url = "https://github.com/redpanda-data/benthos/blob/7da18c5fb096a3607f9f70c06614742b24ae938e/internal/impl/pure/processor_unarchive.go"
first_commit_date = "2022-04-27"
last_commit_date = "2025-01-09"
test_file_content = "// Copyright 2025 Redpanda Data, Inc.\n\npackage pure\n\nimport (\n\t\"archive/tar\"\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\n\t\"github.com/redpanda-data/benthos/v4/internal/message\"\n\t\"github.com/redpanda-data/benthos/v4/public/service\"\n)\n\nfunc TestUnarchiveBadAlgo(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: does not exist\n`, nil)\n\trequire.NoError(t, err)\n\n\t_, err = newUnarchiveFromParsed(conf, service.MockResources())\n\tif err == nil {\n\t\tt.Error(\"Expected error from bad algo\")\n\t}\n}\n\nfunc TestUnarchiveTar(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: tar\n`, nil)\n\trequire.NoError(t, err)\n\n\tinput := [][]byte{\n\t\t[]byte(\"hello world first part\"),\n\t\t[]byte(\"hello world second part\"),\n\t\t[]byte(\"third part\"),\n\t\t[]byte(\"fourth\"),\n\t\t[]byte(\"5\"),\n\t}\n\n\texp := [][]byte{}\n\texpNames := []string{}\n\n\tvar buf bytes.Buffer\n\ttw := tar.NewWriter(&buf)\n\n\tfor i := range input {\n\t\texp = append(exp, input[i])\n\n\t\thdr := &tar.Header{\n\t\t\tName: fmt.Sprintf(\"testfile%v\", i),\n\t\t\tMode: 0o600,\n\t\t\tSize: int64(len(input[i])),\n\t\t}\n\t\texpNames = append(expNames, hdr.Name)\n\t\tif err := tw.WriteHeader(hdr); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\tif _, err := tw.Write(input[i]); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t}\n\n\tif err := tw.Close(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage(buf.Bytes()))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tkey, exists := msgs[i].MetaGet(\"archive_filename\")\n\t\trequire.True(t, exists)\n\t\tassert.Equal(t, expNames[i], key)\n\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, string(e), string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveZip(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: zip\n`, nil)\n\trequire.NoError(t, err)\n\n\tinput := [][]byte{\n\t\t[]byte(\"hello world first part\"),\n\t\t[]byte(\"hello world second part\"),\n\t\t[]byte(\"third part\"),\n\t\t[]byte(\"fourth\"),\n\t\t[]byte(\"5\"),\n\t}\n\n\texp := [][]byte{}\n\texpNames := []string{}\n\n\tvar buf bytes.Buffer\n\tzw := zip.NewWriter(&buf)\n\n\tfor i := range input {\n\t\texp = append(exp, input[i])\n\n\t\tname := fmt.Sprintf(\"testfile%v\", i)\n\t\texpNames = append(expNames, name)\n\t\tif fw, err := zw.Create(name); err != nil {\n\t\t\tt.Fatal(err)\n\t\t} else if _, err := fw.Write(input[i]); err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t}\n\n\tif err := zw.Close(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage(buf.Bytes()))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tkey, exists := msgs[i].MetaGet(\"archive_filename\")\n\t\trequire.True(t, exists)\n\t\tassert.Equal(t, expNames[i], key)\n\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, string(e), string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveLines(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: lines\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := [][]byte{\n\t\t[]byte(\"hello world first part\"),\n\t\t[]byte(\"hello world second part\"),\n\t\t[]byte(\"third part\"),\n\t\t[]byte(\"fourth\"),\n\t\t[]byte(\"5\"),\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage([]byte(\n\t\t`hello world first part\nhello world second part\nthird part\nfourth\n5`,\n\t)))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, string(e), string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveJSONDocuments(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: json_documents\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := [][]byte{\n\t\t[]byte(`{\"foo\":\"bar\"}`),\n\t\t[]byte(`5`),\n\t\t[]byte(`\"testing 123\"`),\n\t\t[]byte(`[\"root\",\"is\",\"an\",\"array\"]`),\n\t\t[]byte(`{\"bar\":\"baz\"}`),\n\t\t[]byte(`true`),\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage([]byte(\n\t\t`{\"foo\":\"bar\"} 5 \"testing 123\" [\"root\", \"is\", \"an\", \"array\"] {\"bar\": \"baz\"} true`,\n\t)))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, string(e), string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveJSONArray(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: json_array\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := [][]byte{\n\t\t[]byte(`{\"foo\":\"bar\"}`),\n\t\t[]byte(`5`),\n\t\t[]byte(`\"testing 123\"`),\n\t\t[]byte(`[\"nested\",\"array\"]`),\n\t\t[]byte(`true`),\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage([]byte(\n\t\t`[{\"foo\":\"bar\"},5,\"testing 123\",[\"nested\",\"array\"],true]`,\n\t)))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, string(e), string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveJSONMap(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: json_map\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := map[string]string{\n\t\t\"a\": `{\"foo\":\"bar\"}`,\n\t\t\"b\": `5`,\n\t\t\"c\": `\"testing 123\"`,\n\t\t\"d\": `[\"nested\",\"array\"]`,\n\t\t\"e\": `true`,\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage([]byte(\n\t\t`{\"a\":{\"foo\":\"bar\"},\"b\":5,\"c\":\"testing 123\",\"d\":[\"nested\",\"array\"],\"e\":true}`,\n\t)))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i := 0; i < len(exp); i++ {\n\t\tkey, exists := msgs[i].MetaGet(\"archive_key\")\n\t\trequire.True(t, exists)\n\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\n\t\tassert.Equal(t, exp[key], string(mBytes))\n\t\tdelete(exp, key)\n\t}\n}\n\nfunc TestUnarchiveBinary(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: binary\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := [][]byte{\n\t\t[]byte(`{\"foo\":\"bar\"}`),\n\t\t[]byte(`5`),\n\t\t[]byte(`\"testing 123\"`),\n\t\t[]byte(`[\"nested\",\"array\"]`),\n\t\t[]byte(`true`),\n\t}\n\ttestMsgBlob := message.SerializeBytes(exp)\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage(testMsgBlob))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, string(e), string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveCSV(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: csv\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := []string{\n\t\t`{\"color\":\"blue\",\"id\":\"1\",\"name\":\"foo\"}`,\n\t\t`{\"color\":\"green\",\"id\":\"2\",\"name\":\"bar\"}`,\n\t\t`{\"color\":\"red\",\"id\":\"3\",\"name\":\"baz\"}`,\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage([]byte(\n\t\t`id,name,color\n1,foo,blue\n2,bar,green\n3,baz,red`,\n\t)))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, e, string(mBytes))\n\t}\n}\n\nfunc TestUnarchiveCSVCustom(t *testing.T) {\n\tconf, err := unarchiveProcConfig().ParseYAML(`\nformat: csv:|\n`, nil)\n\trequire.NoError(t, err)\n\n\texp := []string{\n\t\t`{\"color\":\"blue\",\"id\":\"1\",\"name\":\"foo\"}`,\n\t\t`{\"color\":\"green\",\"id\":\"2\",\"name\":\"bar\"}`,\n\t\t`{\"color\":\"red\",\"id\":\"3\",\"name\":\"baz\"}`,\n\t}\n\n\tproc, err := newUnarchiveFromParsed(conf, service.MockResources())\n\trequire.NoError(t, err)\n\n\tmsgs, res := proc.Process(context.Background(), service.NewMessage([]byte(\n\t\t`id|name|color\n1|foo|blue\n2|bar|green\n3|baz|red`,\n\t)))\n\trequire.NoError(t, res)\n\trequire.Len(t, msgs, len(exp))\n\n\tfor i, e := range exp {\n\t\tmBytes, err := msgs[i].AsBytes()\n\t\trequire.NoError(t, err)\n\t\tassert.Equal(t, e, string(mBytes))\n\t}\n}\n"
