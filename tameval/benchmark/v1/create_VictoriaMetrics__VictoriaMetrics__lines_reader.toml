[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Go"
go_version = "1.24.1"

[repo_info]
repository = "VictoriaMetrics/VictoriaMetrics"
sha = "099b2fdba79582dcc1c32a604b587deaf32270db"

[run_info]
docker_image = "golang:1.24.1"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out lib/protoparser/protoparserutil/lines_reader.go lib/protoparser/protoparserutil/lines_reader_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting lib/protoparser/protoparserutil/lines_reader.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 53.0
original_coverage = 95.0
mutation_kill_rate = 56.0
original_mutation_kill_rate = 77.0
covered_lines = [ 26, 27, 28, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91,]
missed_lines = [ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 94, 95, 96, 97, 98, 99,]

[input_info]
test_file_path = "lib/protoparser/protoparserutil/lines_reader_test.go"
focal_file_path = "lib/protoparser/protoparserutil/lines_reader.go"
test_file_url = "https://github.com/VictoriaMetrics/VictoriaMetrics/blob/099b2fdba79582dcc1c32a604b587deaf32270db/lib/protoparser/protoparserutil/lines_reader_test.go"
focal_file_url = "https://github.com/VictoriaMetrics/VictoriaMetrics/blob/099b2fdba79582dcc1c32a604b587deaf32270db/lib/protoparser/protoparserutil/lines_reader.go"
first_commit_date = "2025-03-18"
last_commit_date = "2025-03-18"
test_file_content = "package protoparserutil\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"io\"\n\t\"testing\"\n)\n\n\ntype failureReader struct{}\n\nfunc (fr *failureReader) Read(_ []byte) (int, error) {\n\treturn 0, fmt.Errorf(\"some error\")\n}\n\ntype unexpectedEOF struct{}\n\nfunc (un unexpectedEOF) Read(_ []byte) (int, error) {\n\treturn 0, io.ErrUnexpectedEOF\n}\n\ntype eofErr struct{}\n\nfunc (eo eofErr) Read(_ []byte) (int, error) {\n\treturn 0, io.EOF\n}\n\n\n\n\nfunc TestReadLinesBlockSuccessBytesBuffer(t *testing.T) {\n\tf := func(s, dstBufExpected, tailBufExpected string) {\n\t\tt.Helper()\n\n\t\tr := bytes.NewBufferString(s)\n\t\tdstBuf, tailBuf, err := ReadLinesBlock(r, nil, nil)\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"unexpected error: %s\", err)\n\t\t}\n\t\tif string(dstBuf) != dstBufExpected {\n\t\t\tt.Fatalf(\"unexpected dstBuf; got %q; want %q; tailBuf=%q\", dstBuf, dstBufExpected, tailBuf)\n\t\t}\n\t\tif string(tailBuf) != tailBufExpected {\n\t\t\tt.Fatalf(\"unexpected tailBuf; got %q; want %q; dstBuf=%q\", tailBuf, tailBufExpected, dstBuf)\n\t\t}\n\n\t\t// Verify the same with non-empty dstBuf and tailBuf\n\t\tr = bytes.NewBufferString(s)\n\t\tdstBuf, tailBuf, err = ReadLinesBlock(r, dstBuf, tailBuf[:0])\n\t\tif err != nil {\n\t\t\tt.Fatalf(\"non-empty bufs: unexpected error: %s\", err)\n\t\t}\n\t\tif string(dstBuf) != dstBufExpected {\n\t\t\tt.Fatalf(\"non-empty bufs: unexpected dstBuf; got %q; want %q; tailBuf=%q\", dstBuf, dstBufExpected, tailBuf)\n\t\t}\n\t\tif string(tailBuf) != tailBufExpected {\n\t\t\tt.Fatalf(\"non-empty bufs: unexpected tailBuf; got %q; want %q; dstBuf=%q\", tailBuf, tailBufExpected, dstBuf)\n\t\t}\n\t}\n\n\tf(\"\\n\", \"\", \"\")\n\tf(\"foo\\n\", \"foo\", \"\")\n\tf(\"\\nfoo\", \"\", \"foo\")\n\tf(\"foo\\nbar\", \"foo\", \"bar\")\n\tf(\"foo\\nbar\\nbaz\", \"foo\\nbar\", \"baz\")\n\n\t// The maximum line size\n\tb := make([]byte, maxLineSize+10)\n\tb[maxLineSize] = '\\n'\n\tf(string(b), string(b[:maxLineSize]), string(b[maxLineSize+1:]))\n}\n\ntype singleByteReader struct {\n\tb []byte\n}\n\nfunc (sbr *singleByteReader) Read(p []byte) (int, error) {\n\tif len(sbr.b) == 0 {\n\t\treturn 0, io.EOF\n\t}\n\tn := copy(p, sbr.b[:1])\n\tsbr.b = sbr.b[n:]\n\tif len(sbr.b) == 0 {\n\t\treturn n, io.EOF\n\t}\n\treturn n, nil\n}\n"
