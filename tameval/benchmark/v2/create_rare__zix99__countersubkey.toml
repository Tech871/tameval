[meta]
task = "create"
scenario = "add_new_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "zix99/rare"
sha = "dbf03dd64fed323c2e7b3b36d97210f929fb64fa"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out pkg/aggregation/countersubkey.go pkg/aggregation/countersubkey_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting pkg/aggregation/countersubkey.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 68.0
original_coverage = 100.0
mutation_kill_rate = 64.0
original_mutation_kill_rate = 89.0
covered_lines = [ 28, 29, 30, 31, 32, 33, 34, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 92, 93, 94, 95, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 134, 135, 136, 137, 138, 139, 142, 143, 150, 161, 162, 163,]
missed_lines = [ 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 130, 131, 132, 144, 145, 146, 147, 148, 149, 153, 154, 155, 157, 158, 159,]

[input_info]
test_file_path = "pkg/aggregation/countersubkey_test.go"
focal_file_path = "pkg/aggregation/countersubkey.go"
test_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/aggregation/countersubkey_test.go"
focal_file_url = "https://github.com/zix99/rare/blob/dbf03dd64fed323c2e7b3b36d97210f929fb64fa/pkg/aggregation/countersubkey.go"
first_commit_date = "2021-04-11"
last_commit_date = "2025-06-08"
test_file_content = "package aggregation\n\nimport (\n\t\"testing\"\n\n\t\"github.com/zix99/rare/pkg/aggregation/sorting\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\n\n\n\nfunc TestComplexSubKeys(t *testing.T) {\n\tsk := NewSubKeyCounter()\n\tsk.SampleValue(\"test\", \"200\", 1)\n\tsk.SampleValue(\"test\", \"300\", 5)\n\tsk.SampleValue(\"test\", \"100\", 3)\n\tsk.SampleValue(\"test\", \"200\", 1)\n\n\titems := sk.ItemsSorted(sorting.NVNameSorter)\n\tassert.Equal(t, items[0].Name, \"test\")\n\tassert.Len(t, items[0].Item.Items(), 3)\n\tassert.Equal(t, items[0].Item.Items()[0], int64(3))\n\tassert.Equal(t, items[0].Item.Items()[1], int64(2))\n\tassert.Equal(t, items[0].Item.Items()[2], int64(5))\n}\n\n\n\n\nfunc TestInsertAt(t *testing.T) {\n\tassert.Equal(t, []string{\"a\", \"howdy\", \"b\", \"c\"}, insertAt([]string{\"a\", \"b\", \"c\"}, 1, \"howdy\"))\n\tassert.Equal(t, []string{\"a\", \"b\", \"c\", \"howdy\"}, insertAt([]string{\"a\", \"b\", \"c\"}, 3, \"howdy\"))\n\tassert.Equal(t, []string{\"howdy\", \"a\", \"b\", \"c\"}, insertAt([]string{\"a\", \"b\", \"c\"}, 0, \"howdy\"))\n}\n"
