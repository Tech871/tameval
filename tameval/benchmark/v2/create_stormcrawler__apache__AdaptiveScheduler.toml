[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = true

[repo_info]
repository = "apache/stormcrawler"
sha = "9d4b0302a7859f9f24caa1fe3cdabb498f968112"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -pl core -Dtest=AdaptiveSchedulerTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -pl core -DtargetClasses=**.AdaptiveScheduler  -DtargetTests=**.AdaptiveSchedulerTest  -DoutputFormats=XML"
coverage_report_path = "core/target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "core/target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 82.0
original_coverage = 82.0
mutation_kill_rate = 0.0
original_mutation_kill_rate = 0.0
covered_lines = [ 120, 174, 177, 178, 179, 180, 182, 183, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 204, 206, 209, 210, 211, 212, 214, 220, 224, 227, 229, 231, 233, 235, 240, 246, 247, 249, 251, 252, 253, 254, 255, 257, 258, 269, 271, 272, 284, 298, 299, 302, 304, 305, 306, 310, 311, 313, 315,]
missed_lines = [ 262, 263, 264, 265, 275, 276, 277, 279, 281, 287, 291, 294, 300,]

[input_info]
test_file_path = "core/src/test/java/org/apache/stormcrawler/persistence/AdaptiveSchedulerTest.java"
focal_file_path = "core/src/main/java/org/apache/stormcrawler/persistence/AdaptiveScheduler.java"
test_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/test/java/org/apache/stormcrawler/persistence/AdaptiveSchedulerTest.java"
focal_file_url = "https://github.com/apache/stormcrawler/blob/9d4b0302a7859f9f24caa1fe3cdabb498f968112/core/src/main/java/org/apache/stormcrawler/persistence/AdaptiveScheduler.java"
first_commit_date = "2024-03-28"
last_commit_date = "2025-07-14"
test_file_content = "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.stormcrawler.persistence;\n\nimport java.net.MalformedURLException;\nimport java.time.Instant;\nimport java.time.ZonedDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.TimeZone;\nimport org.apache.commons.lang.time.DateUtils;\nimport org.apache.http.HttpHeaders;\nimport org.apache.stormcrawler.Metadata;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass AdaptiveSchedulerTest {\n\n    private static String md5sumEmptyContent = \"d41d8cd98f00b204e9800998ecf8427e\";\n\n    private static String md5sumSpaceContent = \"7215ee9c7d9dc229d2921a40e899ec5f\";\n\n    private static Map<String, Object> getConf() {\n        Map<String, Object> stormConf = new HashMap<>();\n        stormConf.put(\"fetchInterval.FETCHED.testKey=someValue\", 6);\n        stormConf.put(\"fetchInterval.testKey=someValue\", 8);\n        stormConf.put(\"scheduler.adaptive.setLastModified\", true);\n        stormConf.put(\"scheduler.adaptive.fetchInterval.min\", 2);\n        stormConf.put(\"fetchInterval.default\", 5);\n        stormConf.put(\"scheduler.adaptive.fetchInterval.max\", 10);\n        stormConf.put(\"protocol.md.prefix\", \"protocol.\");\n        return stormConf;\n    }\n\n    /**\n     * Verify setting the initial fetch interval by metadata and fetch status implemented in\n     * DefaultScheduler\n     */\n    @Test\n    void testSchedulerInitialInterval() throws MalformedURLException {\n        Scheduler scheduler = new AdaptiveScheduler();\n        scheduler.init(getConf());\n        Metadata metadata = new Metadata();\n        metadata.addValue(\"testKey\", \"someValue\");\n        metadata.addValue(\"fetch.statusCode\", \"200\");\n        Optional<Date> nextFetch = scheduler.schedule(Status.FETCHED, metadata);\n        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n        cal.add(Calendar.MINUTE, 6);\n        Assertions.assertEquals(\n                DateUtils.round(cal.getTime(), Calendar.SECOND),\n                DateUtils.round(nextFetch.get(), Calendar.SECOND));\n        nextFetch = scheduler.schedule(Status.ERROR, metadata);\n        cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT);\n        cal.add(Calendar.MINUTE, 8);\n        Assertions.assertEquals(\n                DateUtils.round(cal.getTime(), Calendar.SECOND),\n                DateUtils.round(nextFetch.get(), Calendar.SECOND));\n    }\n\n    @Test\n    void testSchedule() throws MalformedURLException {\n        Scheduler scheduler = new AdaptiveScheduler();\n        scheduler.init(getConf());\n        Metadata metadata = new Metadata();\n        metadata.addValue(\"fetch.statusCode\", \"200\");\n        metadata.addValue(AdaptiveScheduler.SIGNATURE_KEY, md5sumEmptyContent);\n        scheduler.schedule(Status.FETCHED, metadata);\n        Instant firstFetch =\n                DateUtils.round(\n                                Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT)\n                                        .getTime(),\n                                Calendar.SECOND)\n                        .toInstant();\n        /* verify initial fetch interval and last-modified time */\n        String lastModified = metadata.getFirstValue(HttpHeaders.LAST_MODIFIED);\n        Assertions.assertNotNull(lastModified);\n        Instant lastModifiedTime =\n                DateUtils.round(\n                                GregorianCalendar.from(\n                                        DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(\n                                                lastModified, ZonedDateTime::from)),\n                                Calendar.SECOND)\n                        .toInstant();\n        Assertions.assertTrue(firstFetch.until(lastModifiedTime, ChronoUnit.SECONDS) <= 1);\n        String fetchInterval = metadata.getFirstValue(AdaptiveScheduler.FETCH_INTERVAL_KEY);\n        Assertions.assertNotNull(fetchInterval);\n        /* initial interval is the default interval */\n        Assertions.assertEquals(5, Integer.parseInt(fetchInterval));\n        /* test with signature not modified */\n        metadata.addValue(AdaptiveScheduler.SIGNATURE_OLD_KEY, md5sumEmptyContent);\n        scheduler.schedule(Status.FETCHED, metadata);\n        fetchInterval = metadata.getFirstValue(AdaptiveScheduler.FETCH_INTERVAL_KEY);\n        Assertions.assertNotNull(fetchInterval);\n        /* interval should be bigger than initial interval */\n        int fi1 = Integer.parseInt(fetchInterval);\n        Assertions.assertTrue(5 < fi1);\n        /* last-modified time should be unchanged */\n        Assertions.assertEquals(lastModified, metadata.getFirstValue(HttpHeaders.LAST_MODIFIED));\n        /* test with HTTP 304 \"not modified\" */\n        metadata.setValue(\"fetch.statusCode\", \"304\");\n        scheduler.schedule(Status.FETCHED, metadata);\n        fetchInterval = metadata.getFirstValue(AdaptiveScheduler.FETCH_INTERVAL_KEY);\n        Assertions.assertNotNull(fetchInterval);\n        /* interval should be bigger than initial interval and interval from last step */\n        int fi2 = Integer.parseInt(fetchInterval);\n        Assertions.assertTrue(5 < fi2);\n        Assertions.assertTrue(fi1 < fi2);\n        /* last-modified time should be unchanged */\n        Assertions.assertEquals(lastModified, metadata.getFirstValue(HttpHeaders.LAST_MODIFIED));\n        /* test with a changed signature */\n        metadata.setValue(\"fetch.statusCode\", \"200\");\n        metadata.addValue(AdaptiveScheduler.SIGNATURE_KEY, md5sumSpaceContent);\n        scheduler.schedule(Status.FETCHED, metadata);\n        Instant lastFetch =\n                DateUtils.round(\n                                Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"), Locale.ROOT)\n                                        .getTime(),\n                                Calendar.SECOND)\n                        .toInstant();\n        fetchInterval = metadata.getFirstValue(AdaptiveScheduler.FETCH_INTERVAL_KEY);\n        Assertions.assertNotNull(fetchInterval);\n        /* interval should now shrink */\n        int fi3 = Integer.parseInt(fetchInterval);\n        Assertions.assertTrue(fi2 > fi3);\n        /* last-modified time should fetch time of last fetch */\n        lastModified = metadata.getFirstValue(HttpHeaders.LAST_MODIFIED);\n        Assertions.assertNotNull(lastModified);\n        lastModifiedTime =\n                DateUtils.round(\n                                GregorianCalendar.from(\n                                        DateTimeFormatter.ISO_OFFSET_DATE_TIME.parse(\n                                                lastModified, ZonedDateTime::from)),\n                                Calendar.SECOND)\n                        .toInstant();\n        Assertions.assertTrue(lastFetch.until(lastModifiedTime, ChronoUnit.SECONDS) <= 1);\n    }\n}\n"
