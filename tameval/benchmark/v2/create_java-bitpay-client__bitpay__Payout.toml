[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Java"
java_builder = "Maven"
is_multi_module = false

[repo_info]
repository = "bitpay/java-bitpay-client"
sha = "b78e729f828b7eafc68296e679539714e78e6994"

[run_info]
docker_image = "maven:3.8.3-openjdk-17"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "mvn -Dmaven.repo.local=/.m2 -T 4 clean install && mvn -Dmaven.repo.local=/.m2 -T 4 clean package"
test_run_command = "mvn clean -Dmaven.repo.local=/.m2 test -q -Dtest=PayoutTest && mvn jacoco:report -Djacoco.append=false"
mutation_run_command = "mvn -Dmaven.repo.local=/.m2 org.pitest:pitest-maven:mutationCoverage -DtargetClasses=**.Payout  -DtargetTests=**.PayoutTest  -DoutputFormats=XML"
coverage_report_path = "target/site/jacoco/jacoco.xml"
coverage_report_type = "jacoco"
mutation_report_path = "target/pit-reports/mutations.xml"
mutation_report_type = "pitest"

[coverage]
coverage = 76.0
original_coverage = 76.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 66, 67, 68, 69, 112, 124, 125, 138, 148, 149, 159, 170, 173, 174, 188, 202, 205, 206, 241, 253, 254, 264, 274, 275, 291, 304, 305, 316, 327, 328, 339, 350, 351, 363, 373, 374, 390, 406, 407, 418, 429, 430, 440, 450, 451, 462, 473, 474, 484, 495, 496, 509, 522, 523, 534, 546, 547, 571, 596, 597, 607, 618, 619, 629, 640, 641, 650, 659, 660,]
missed_lines = [ 37, 43, 44, 45, 46, 47, 49, 52, 60, 91, 92, 93, 94, 95, 171, 203, 216, 228, 229, 665, 669, 670,]

[input_info]
test_file_path = "src/test/java/com/bitpay/sdk/model/payout/PayoutTest.java"
focal_file_path = "src/main/java/com/bitpay/sdk/model/payout/Payout.java"
test_file_url = "https://github.com/bitpay/java-bitpay-client/blob/b78e729f828b7eafc68296e679539714e78e6994/src/test/java/com/bitpay/sdk/model/payout/PayoutTest.java"
focal_file_url = "https://github.com/bitpay/java-bitpay-client/blob/b78e729f828b7eafc68296e679539714e78e6994/src/main/java/com/bitpay/sdk/model/payout/Payout.java"
first_commit_date = "2023-05-15"
last_commit_date = "2024-01-23"
test_file_content = "/*\n * Copyright (c) 2019 BitPay\n */\n\npackage com.bitpay.sdk.model.payout;\n\nimport com.bitpay.sdk.exceptions.BitPayException;\nimport com.bitpay.sdk.model.ModelConfiguration;\nimport java.time.ZonedDateTime;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\n\npublic class PayoutTest {\n\n    @Test\n    public void it_should_set_default_values_on_create() {\n        // given\n        Payout testedClass = this.getTestedClass();\n\n        // then\n        Assertions.assertEquals(0.0, testedClass.getAmount());\n        Assertions.assertEquals(\"USD\", testedClass.getCurrency());\n        Assertions.assertEquals(ModelConfiguration.DEFAULT_NON_SENT_VALUE, testedClass.getNotificationEmail());\n        Assertions.assertEquals(ModelConfiguration.DEFAULT_NON_SENT_VALUE, testedClass.getNotificationUrl());\n    }\n\n    @Test\n    public void it_should_change_token() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setToken(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getToken());\n    }\n\n    @Test\n    public void it_should_change_amount() {\n        // given\n        Double expected = 12.34;\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setAmount(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getAmount());\n    }\n\n    @Test\n    public void it_should_not_allow_to_set_invalid_currency() {\n        Assertions.assertThrows(BitPayException.class, () -> {\n            final String invalidCurrency = \"INVALID_CURRENCY\";\n            Payout testedClass = this.getTestedClass();\n\n            testedClass.setCurrency(invalidCurrency);\n        });\n    }\n\n    @Test\n    public void it_should_change_currency() throws BitPayException {\n        // given\n        String expected = \"USD\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setCurrency(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getCurrency());\n    }\n\n    @Test\n    public void it_should_change_effectiveDate() {\n        // given\n        ZonedDateTime expected = ZonedDateTime.now();\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setEffectiveDate(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getEffectiveDate());\n    }\n\n    @Test\n    public void it_should_change_reference() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setReference(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getReference());\n    }\n\n    @Test\n    public void it_should_change_notificationEmail() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setNotificationEmail(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getNotificationEmail());\n    }\n\n    @Test\n    public void it_should_change_notificationURL() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setNotificationUrl(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getNotificationUrl());\n    }\n\n    @Test\n    public void it_should_not_allow_to_set_invalid_ledger_currency() {\n        Assertions.assertThrows(BitPayException.class, () -> {\n            final String invalidLedgerCurrency = \"INVALID_LEDGER\";\n            Payout testedClass = this.getTestedClass();\n\n            testedClass.setLedgerCurrency(invalidLedgerCurrency);\n        });\n    }\n\n    @Test\n    public void it_should_change_ledgerCurrency() throws BitPayException {\n        // given\n        String expected = \"USD\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setLedgerCurrency(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getLedgerCurrency());\n    }\n\n    @Test\n    public void it_should_change_id() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setId(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getId());\n    }\n\n    @Test\n    public void it_should_change_shopperId() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setShopperId(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getShopperId());\n    }\n\n    @Test\n    public void it_should_change_recipientId() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setRecipientId(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getRecipientId());\n    }\n\n    @Test\n    public void it_should_change_exchangeRates() {\n        // given\n        Payout testedClass = this.getTestedClass();\n        Map<String, Map<String, Double>> expected = new HashMap<String, Map<String, Double>>();\n        Map<String, Double> exchangeRateBtc = new HashMap<String, Double>();\n        exchangeRateBtc.put(\"GBP\", 27883.962246420004);\n        expected.put(\"BTC\", exchangeRateBtc);\n\n        // when\n        testedClass.setExchangeRates(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getExchangeRates());\n    }\n\n    @Test\n    public void it_should_change_account_id() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setAccountId(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getAccountId());\n    }\n\n    @Test\n    public void it_should_change_email() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setEmail(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getEmail());\n    }\n\n    @Test\n    public void it_should_change_label() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setLabel(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getLabel());\n    }\n\n    @Test\n    public void it_should_change_status() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setStatus(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getStatus());\n    }\n\n    @Test\n    public void it_should_change_message() {\n        // given\n        String expected = \"expectedString\";\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setMessage(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getMessage());\n    }\n\n    @Test\n    public void it_should_change_requestDate() {\n        // given\n        ZonedDateTime expected = ZonedDateTime.now();\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setRequestDate(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getRequestDate());\n    }\n\n    @Test\n    public void it_should_change_dateExecuted() {\n        // given\n        ZonedDateTime expected = ZonedDateTime.now();\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setDateExecuted(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getDateExecuted());\n    }\n\n    @Test\n    public void it_should_change_transactions() {\n        // given\n        List<PayoutTransaction> expected =\n            Collections.singletonList(Mockito.mock(PayoutTransaction.class));\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setTransactions(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getTransactions());\n    }\n\n    @Test\n    public void it_should_change_code() {\n        // given\n        Integer expected = 100;\n        Payout testedClass = this.getTestedClass();\n\n        // when\n        testedClass.setCode(expected);\n\n        // then\n        Assertions.assertEquals(expected, testedClass.getCode());\n    }\n\n    private Payout getTestedClass() {\n        return new Payout();\n    }\n}\n"
