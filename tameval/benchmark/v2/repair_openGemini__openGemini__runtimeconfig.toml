[meta]
task = "repair"
scenario = "repair_missed_dependencies"

[lang_info]
lang = "Go"
go_version = "1.22"

[repo_info]
repository = "openGemini/openGemini"
sha = "b8992247864dd0395b2e433c6472bb6bdfe7b905"

[run_info]
docker_image = "golang:1.23.0"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/VirtualRoyalty/go-mutesting/cmd/go-mutesting@v1.0.9 && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out lib/config/runtimeconfig.go lib/config/runtimeconfig_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting lib/config/runtimeconfig.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 0.0
original_coverage = 100.0
mutation_kill_rate = nan
original_mutation_kill_rate = 64.0
covered_lines = []
missed_lines = []

[input_info]
test_file_path = "lib/config/runtimeconfig_test.go"
focal_file_path = "lib/config/runtimeconfig.go"
test_file_url = "https://github.com/openGemini/openGemini/blob/b8992247864dd0395b2e433c6472bb6bdfe7b905/lib/config/runtimeconfig_test.go"
focal_file_url = "https://github.com/openGemini/openGemini/blob/b8992247864dd0395b2e433c6472bb6bdfe7b905/lib/config/runtimeconfig.go"
first_commit_date = "2025-04-12"
last_commit_date = "2025-04-12"
test_file_content = "\npackage config\n\n\nfunc TestRuntimeConfigValidate(t *testing.T) {\n\ttype fields struct {\n\t\tEnabled      bool\n\t\tReloadPeriod toml.Duration\n\t\tLoadPath     string\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\tfields  fields\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"Enabled is false\",\n\t\t\tfields: fields{\n\t\t\t\tEnabled:      false,\n\t\t\t\tReloadPeriod: toml.Duration(10 * time.Second),\n\t\t\t\tLoadPath:     \"/path/to/config\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"LoadPath is empty\",\n\t\t\tfields: fields{\n\t\t\t\tEnabled:      true,\n\t\t\t\tReloadPeriod: toml.Duration(10 * time.Second),\n\t\t\t\tLoadPath:     \"\",\n\t\t\t},\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"ReloadPeriod is less than 0\",\n\t\t\tfields: fields{\n\t\t\t\tEnabled:      true,\n\t\t\t\tReloadPeriod: toml.Duration(-10 * time.Second),\n\t\t\t\tLoadPath:     \"/path/to/config\",\n\t\t\t},\n\t\t\twantErr: true,\n\t\t},\n\t\t{\n\t\t\tname: \"Valid config\",\n\t\t\tfields: fields{\n\t\t\t\tEnabled:      true,\n\t\t\t\tReloadPeriod: toml.Duration(10 * time.Second),\n\t\t\t\tLoadPath:     \"/path/to/config\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tc := RuntimeConfig{\n\t\t\t\tEnabled:      tt.fields.Enabled,\n\t\t\t\tReloadPeriod: tt.fields.ReloadPeriod,\n\t\t\t\tLoadPath:     tt.fields.LoadPath,\n\t\t\t}\n\t\t\tif err := c.Validate(); (err != nil) != tt.wantErr {\n\t\t\t\tt.Errorf(\"RuntimeConfig.Validate() error = %v, wantErr %v\", err, tt.wantErr)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestNewRuntimeConfig(t *testing.T) {\n\ttests := []struct {\n\t\tname string\n\t\twant RuntimeConfig\n\t}{\n\t\t{\n\t\t\tname: \"Default config\",\n\t\t\twant: RuntimeConfig{\n\t\t\t\tEnabled:      false,\n\t\t\t\tReloadPeriod: toml.Duration(10 * time.Second),\n\t\t\t\tLoadPath:     \"\",\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tif got := NewRuntimeConfig(); !reflect.DeepEqual(got, tt.want) {\n\t\t\t\tt.Errorf(\"NewRuntimeConfig() = %v, want %v\", got, tt.want)\n\t\t\t}\n\t\t})\n\t}\n}"
