[meta]
task = "update"
scenario = "update_test"

[lang_info]
lang = "Go"
go_version = "1.23"

[repo_info]
repository = "stackitcloud/stackit-cli"
sha = "13c97c95a2ced03b7caf6038c900f6d0628e384b"

[run_info]
docker_image = "golang:1.23"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = []
prebuild_command = "go mod download && go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest && go install github.com/jstemmer/go-junit-report@latest"
test_run_command = "go test -v -failfast -coverprofile=coverage.out internal/cmd/curl/curl.go internal/cmd/curl/curl_test.go 2>&1 && go tool cover -func=coverage.out"
mutation_run_command = "timeout {timeout} go-mutesting internal/cmd/curl/curl.go"
coverage_report_path = "coverage.out"
coverage_report_type = "go_cover"
mutation_report_path = "mutation_report.txt"
mutation_report_type = "go-mutesting"

[coverage]
coverage = 50.0
original_coverage = 59.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 163, 179, 180, 181, 182, 183, 184, 188, 189, 190, 191, 192, 193, 194, 196,]
missed_lines = [ 70, 71, 72, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 106, 107, 108, 154, 155, 156, 157, 158, 159, 160, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 185, 186, 187, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226,]

[input_info]
test_file_path = "internal/cmd/curl/curl_test.go"
focal_file_path = "internal/cmd/curl/curl.go"
test_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/curl/curl_test.go"
focal_file_url = "https://github.com/stackitcloud/stackit-cli/blob/13c97c95a2ced03b7caf6038c900f6d0628e384b/internal/cmd/curl/curl.go"
first_commit_date = "2024-01-26"
last_commit_date = "2025-02-21"
test_file_content = "package curl\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/spf13/viper\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/config\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/globalflags\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/print\"\n\t\"github.com/stackitcloud/stackit-cli/internal/pkg/utils\"\n\n\t\"github.com/google/go-cmp/cmp\"\n\t\"github.com/google/go-cmp/cmp/cmpopts\"\n)\n\nvar testURL = \"https://some-service.api.stackit.cloud/v1/foo?bar=baz\"\nvar testToken = \"auth-token\"\n\nfunc fixtureArgValues(mods ...func(argValues []string)) []string {\n\targValues := []string{\n\t\ttestURL,\n\t}\n\tfor _, mod := range mods {\n\t\tmod(argValues)\n\t}\n\treturn argValues\n}\n\nfunc fixtureFlagValues(mods ...func(flagValues map[string]string)) map[string]string {\n\tflagValues := map[string]string{\n\t\trequestMethodFlag:          \"post\",\n\t\theaderFlag:                 \"Test-header-1: Test value 1\",\n\t\tdataFlag:                   \"data\",\n\t\tincludeResponseHeadersFlag: \"true\",\n\t\tfailOnHTTPErrorFlag:        \"true\",\n\t\toutputFileFlag:             \"path/to/output.txt\",\n\t}\n\tfor _, mod := range mods {\n\t\tmod(flagValues)\n\t}\n\treturn flagValues\n}\n\nfunc fixtureInputModel(mods ...func(model *inputModel)) *inputModel {\n\tmodel := &inputModel{\n\t\tURL:                    testURL,\n\t\tRequestMethod:          \"POST\",\n\t\tHeaders:                []string{\"Test-header-1: Test value 1\"},\n\t\tData:                   utils.Ptr(\"data\"),\n\t\tIncludeResponseHeaders: true,\n\t\tFailOnHTTPError:        true,\n\t\tOutputFile:             utils.Ptr(\"path/to/output.txt\"),\n\t}\n\tfor _, mod := range mods {\n\t\tmod(model)\n\t}\n\treturn model\n}\n\nfunc fixtureRequest(mods ...func(request *http.Request)) *http.Request {\n\treq, err := http.NewRequest(\"POST\", testURL, bytes.NewBufferString(\"data\"))\n\treq.Header.Set(\"Test-header-1\", \"Test value 1\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", testToken))\n\tfor _, mod := range mods {\n\t\tmod(req)\n\t}\n\treturn req\n}\n\nfunc TestParseInput(t *testing.T) {\n\ttests := []struct {\n\t\tdescription      string\n\t\targValues        []string\n\t\tflagValues       map[string]string\n\t\theaderFlagValues []string\n\t\tallowedURLDomain string\n\t\tisValid          bool\n\t\texpectedModel    *inputModel\n\t}{\n\t\t{\n\t\t\tdescription:   \"base\",\n\t\t\targValues:     fixtureArgValues(),\n\t\t\tflagValues:    fixtureFlagValues(),\n\t\t\tisValid:       true,\n\t\t\texpectedModel: fixtureInputModel(),\n\t\t},\n\t\t{\n\t\t\tdescription: \"no arg values\",\n\t\t\targValues:   []string{},\n\t\t\tflagValues:  fixtureFlagValues(),\n\t\t\tisValid:     false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"no flag values\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues:  map[string]string{},\n\t\t\tisValid:     true,\n\t\t\texpectedModel: &inputModel{\n\t\t\t\tURL:           testURL,\n\t\t\t\tRequestMethod: \"GET\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid URL 1\",\n\t\t\targValues: []string{\n\t\t\t\t\"\",\n\t\t\t},\n\t\t\tflagValues: fixtureFlagValues(),\n\t\t\tisValid:    false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid URL 2\",\n\t\t\targValues: []string{\n\t\t\t\t\"foo\",\n\t\t\t},\n\t\t\tflagValues: fixtureFlagValues(),\n\t\t\tisValid:    false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"URL outside STACKIT\",\n\t\t\targValues: []string{\n\t\t\t\t\"https://www.example.website.com/\",\n\t\t\t},\n\t\t\tflagValues:       fixtureFlagValues(),\n\t\t\tallowedURLDomain: \"\",\n\t\t\tisValid:          true,\n\t\t\texpectedModel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.URL = \"https://www.example.website.com/\"\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid method 1\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[requestMethodFlag] = \"\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid method 2\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[requestMethodFlag] = \"foo\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid method 3\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[requestMethodFlag] = \" GET\"\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"valid method 1\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[requestMethodFlag] = \"put\"\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedModel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.RequestMethod = \"PUT\"\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription: \"valid method 2\",\n\t\t\targValues:   fixtureArgValues(),\n\t\t\tflagValues: fixtureFlagValues(func(flagValues map[string]string) {\n\t\t\t\tflagValues[requestMethodFlag] = \"pAtCh\"\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedModel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.RequestMethod = \"PATCH\"\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription:      \"repeated header flags\",\n\t\t\targValues:        fixtureArgValues(),\n\t\t\tflagValues:       fixtureFlagValues(),\n\t\t\theaderFlagValues: []string{\"Test-header-2: Test value 2\", \"Test-header-3: Test value 3\"},\n\t\t\tisValid:          true,\n\t\t\texpectedModel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(\n\t\t\t\t\tmodel.Headers,\n\t\t\t\t\t\"Test-header-2: Test value 2\",\n\t\t\t\t\t\"Test-header-3: Test value 3\",\n\t\t\t\t)\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription:      \"repeated header flags with list value\",\n\t\t\targValues:        fixtureArgValues(),\n\t\t\tflagValues:       fixtureFlagValues(),\n\t\t\theaderFlagValues: []string{\"Test-header-2: Test value 2,Test-header-3: Test value 3\"},\n\t\t\tisValid:          true,\n\t\t\texpectedModel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(\n\t\t\t\t\tmodel.Headers,\n\t\t\t\t\t\"Test-header-2: Test value 2\",\n\t\t\t\t\t\"Test-header-3: Test value 3\",\n\t\t\t\t)\n\t\t\t}),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\tp := print.NewPrinter()\n\t\t\tcmd := NewCmd(p)\n\t\t\terr := globalflags.Configure(cmd.Flags())\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"configure global flags: %v\", err)\n\t\t\t}\n\n\t\t\tviper.Reset()\n\t\t\tviper.Set(config.AllowedUrlDomainKey, tt.allowedURLDomain)\n\n\t\t\tfor flag, value := range tt.flagValues {\n\t\t\t\terr := cmd.Flags().Set(flag, value)\n\t\t\t\tif err != nil {\n\t\t\t\t\tif !tt.isValid {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tt.Fatalf(\"setting flag --%s=%s: %v\", flag, value, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor _, value := range tt.headerFlagValues {\n\t\t\t\terr := cmd.Flags().Set(headerFlag, value)\n\t\t\t\tif err != nil {\n\t\t\t\t\tif !tt.isValid {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tt.Fatalf(\"setting flag --%s=%s: %v\", headerFlag, value, err)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\terr = cmd.ValidateArgs(tt.argValues)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating args: %v\", err)\n\t\t\t}\n\n\t\t\terr = cmd.ValidateRequiredFlags()\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error validating flags: %v\", err)\n\t\t\t}\n\n\t\t\tmodel, err := parseInput(p, cmd, tt.argValues)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error parsing input: %v\", err)\n\t\t\t}\n\n\t\t\tif !tt.isValid {\n\t\t\t\tt.Fatalf(\"did not fail on invalid input\")\n\t\t\t}\n\t\t\tdiff := cmp.Diff(model, tt.expectedModel)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestBuildRequest(t *testing.T) {\n\tdefaultReq, err := http.NewRequest(\"GET\", testURL, http.NoBody)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to create new request: %v\", err)\n\t}\n\tdefaultReq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", testToken))\n\n\ttests := []struct {\n\t\tdescription     string\n\t\tmodel           *inputModel\n\t\tisValid         bool\n\t\texpectedRequest *http.Request\n\t}{\n\t\t{\n\t\t\tdescription:     \"base\",\n\t\t\tmodel:           fixtureInputModel(),\n\t\t\tisValid:         true,\n\t\t\texpectedRequest: fixtureRequest(),\n\t\t},\n\t\t{\n\t\t\tdescription: \"default values\",\n\t\t\tmodel: &inputModel{\n\t\t\t\tURL:           testURL,\n\t\t\t\tRequestMethod: \"GET\",\n\t\t\t},\n\t\t\tisValid:         true,\n\t\t\texpectedRequest: defaultReq,\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid header 1\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(model.Headers, \"foo\")\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid header 2\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(model.Headers, \"foo bar\")\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"invalid header 3\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(model.Headers, \"foo:\")\n\t\t\t}),\n\t\t\tisValid: false,\n\t\t},\n\t\t{\n\t\t\tdescription: \"extra headers 1\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(\n\t\t\t\t\tmodel.Headers,\n\t\t\t\t\t\"Test-header-2: Test value 2\",\n\t\t\t\t\t\"Test-header-3: Test value 3\",\n\t\t\t\t)\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedRequest: fixtureRequest(func(request *http.Request) {\n\t\t\t\trequest.Header.Set(\"Test-header-2\", \"Test value 2\")\n\t\t\t\trequest.Header.Set(\"Test-header-3\", \"Test value 3\")\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription: \"extra headers 2\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(\n\t\t\t\t\tmodel.Headers,\n\t\t\t\t\t\"Test-header-2: Test value 2\",\n\t\t\t\t\t\"Test-header-3: Test value 3\",\n\t\t\t\t\t\"Test-header-2: Test value 4\",\n\t\t\t\t)\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedRequest: fixtureRequest(func(request *http.Request) {\n\t\t\t\trequest.Header.Set(\"Test-header-2\", \"Test value 4\")\n\t\t\t\trequest.Header.Set(\"Test-header-3\", \"Test value 3\")\n\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tdescription: \"extra headers 3\",\n\t\t\tmodel: fixtureInputModel(func(model *inputModel) {\n\t\t\t\tmodel.Headers = append(\n\t\t\t\t\tmodel.Headers,\n\t\t\t\t\t\"Test-header-2: Test value 2\",\n\t\t\t\t\t\"Test-header-3: Test value 3\",\n\t\t\t\t\t\"Authorization: Test value 4\",\n\t\t\t\t)\n\t\t\t}),\n\t\t\tisValid: true,\n\t\t\texpectedRequest: fixtureRequest(func(request *http.Request) {\n\t\t\t\trequest.Header.Set(\"Test-header-2\", \"Test value 2\")\n\t\t\t\trequest.Header.Set(\"Test-header-3\", \"Test value 3\")\n\t\t\t\trequest.Header.Set(\"Authorization\", \"Test value 4\")\n\t\t\t}),\n\t\t},\n\t}\n\n\tfor _, tt := range tests {\n\t\tt.Run(tt.description, func(t *testing.T) {\n\t\t\trequest, err := buildRequest(tt.model, testToken)\n\t\t\tif err != nil {\n\t\t\t\tif !tt.isValid {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tt.Fatalf(\"error building request: %v\", err)\n\t\t\t}\n\n\t\t\tdiff := cmp.Diff(request, tt.expectedRequest,\n\t\t\t\tcmp.AllowUnexported(http.Request{}),\n\t\t\t\tcmpopts.IgnoreFields(http.Request{}, \"GetBody\"), // Function, not relevant for the test\n\t\t\t\tcmp.Comparer(func(x, y *bytes.Buffer) bool { // Used to compare request bodies\n\t\t\t\t\txBytes := x.Bytes()\n\t\t\t\t\tyBytes := y.Bytes()\n\t\t\t\t\treturn bytes.Equal(xBytes, yBytes)\n\t\t\t\t}),\n\t\t\t\tcmpopts.EquateComparable(context.Background()),\n\t\t\t)\n\t\t\tif diff != \"\" {\n\t\t\t\tt.Fatalf(\"Data does not match: %s\", diff)\n\t\t\t}\n\t\t})\n\t}\n}"
