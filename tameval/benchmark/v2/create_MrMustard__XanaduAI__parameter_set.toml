[meta]
task = "create"
scenario = "extend_test_file"

[lang_info]
lang = "Python"
python_version = "3.13"
python_cfg_file = "pyproject.toml"

[repo_info]
repository = "XanaduAI/MrMustard"
sha = "a4e85ddf1df86333ecb8014f36d30e4437cbe4d4"

[run_info]
docker_image = "python:3.13"
volumes_to_mount = [ "{proj_path}:/app", "{host}/.m2:/.m2", "{host}/.cache/pip:/.pip_cache", "{host}/.cache/go-build:/.go_cache", "{proj_path}/_HOME_/go:/go",]
docker_wrap = "sudo docker run --rm -w /app -e PATH=_HOME_/.local/bin:$PATH -e PYTHONUSERBASE=_HOME_/.local/ -v {proj_path}:/app -v {host}/.m2:/.m2 -v {host}/.cache/pip:/.pip_cache -v {host}/.cache/go-build:/.go_cache -v {proj_path}/_HOME_/go:/go {img} sh -c '{cmd}'"
env = [ "PATH=_HOME_/.local/bin:$PATH", "PYTHONUSERBASE=_HOME_/.local/",]
prebuild_command = "(pip install .[all,test] && pip install git+https://github.com/Klema17/mutpy.git && pip install coverage pytest pytest_cov covdefaults Cython mock ddt pytest_mock testfixtures)"
test_run_command = "coverage run --include=mrmustard/math/parameter_set.py -m pytest -q --junit-xml=test_output.xml tests/test_math/test_parameter_set.py && coverage xml -o coverage.xml --fail-under=0"
mutation_run_command = "mut.py --target mrmustard.math.parameter_set --unit-test tests.test_math.test_parameter_set --runner pytest --report mutation_report.yaml"
mutation_run_command_fallback = "mut.py --target mrmustard/math/parameter_set.py --unit-test tests/test_math/test_parameter_set.py --runner pytest --report mutation_report.yaml"
coverage_report_path = "coverage.xml"
coverage_report_type = "cobertura"
mutation_report_path = "mutation_report.yaml"
mutation_report_type = "mutpy"

[coverage]
coverage = 97.0
original_coverage = 97.0
mutation_kill_rate = nan
original_mutation_kill_rate = nan
covered_lines = [ 16, 17, 18, 20, 21, 22, 24, 26, 28, 30, 33, 56, 57, 58, 59, 61, 62, 66, 68, 69, 73, 75, 76, 81, 83, 84, 88, 102, 113, 115, 118, 121, 122, 123, 124, 125, 126, 128, 134, 135, 136, 137, 139, 144, 145, 146, 147, 148, 149, 150, 152, 163, 164, 165, 166, 169, 172, 173, 180, 184, 198, 235, 236, 237, 239, 241, 242, 243, 244, 246, 248, 249, 250, 251, 253, 255,]
missed_lines = [ 116, 171,]

[input_info]
test_file_path = "tests/test_math/test_parameter_set.py"
focal_file_path = "mrmustard/math/parameter_set.py"
test_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/tests/test_math/test_parameter_set.py"
focal_file_url = "https://github.com/XanaduAI/MrMustard/blob/a4e85ddf1df86333ecb8014f36d30e4437cbe4d4/mrmustard/math/parameter_set.py"
first_commit_date = "2023-10-27"
last_commit_date = "2025-07-23"
test_file_content = "# Copyright 2023 Xanadu Quantum Technologies Inc.\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"\nUnit tests for the :class:`ParameterSet`.\n\"\"\"\n\nimport numpy as np\n\nfrom mrmustard.math.parameter_set import ParameterSet\nfrom mrmustard.math.parameters import Constant, Variable\n\n\nclass TestParameterSet:\n    r\"\"\"\n    Tests for ParameterSet.\n    \"\"\"\n\n    def test_init(self):\n        r\"\"\"\n        Tests the init.\n        \"\"\"\n        ps = ParameterSet()\n        assert not ps.names\n        assert not ps.constants\n        assert not ps.variables\n\n    def test_add_parameters(self):\n        r\"\"\"\n        Tests the ``add_parameter`` method.\n        \"\"\"\n        const1 = Constant(1, \"const1\")\n        const2 = Constant(2, \"const2\")\n        var1 = Variable(1, \"var1\")\n\n        ps = ParameterSet()\n        ps.add_parameter(const1)\n        ps.add_parameter(const2)\n        ps.add_parameter(var1)\n\n        assert ps.names == [\"const1\", \"const2\", \"var1\"]\n        assert ps.constants == {\"const1\": const1, \"const2\": const2}\n        assert ps.variables == {\"var1\": var1}\n\n    def test_tagged_variables(self):\n        r\"\"\"\n        Tests the ``tagged_variables`` method.\n        \"\"\"\n        const1 = Constant(1, \"const1\")\n        const2 = Constant(2, \"const2\")\n        var1 = Variable(1, \"var1\")\n\n        ps = ParameterSet()\n        ps.add_parameter(const1)\n        ps.add_parameter(const2)\n        ps.add_parameter(var1)\n\n        variables = ps.tagged_variables(\"ciao\")\n        assert variables == {\"ciao/var1\": var1}\n\n    def test_to_dict(self):\n        r\"\"\"\n        Tests the ``to_dict`` method.\n        \"\"\"\n        const1 = Constant(1.2345, \"const1\")\n        const2 = Constant(2.3456, \"const2\")\n        var1 = Variable(3.4567, \"var1\")\n\n        ps = ParameterSet()\n        ps.add_parameter(const1)\n        ps.add_parameter(const2)\n        ps.add_parameter(var1)\n\n        assert ps.to_dict() == {\n            \"const1\": const1.value,\n            \"const2\": const2.value,\n            \"var1\": var1.value,\n            \"var1_trainable\": True,\n            \"var1_bounds\": (None, None),\n        }\n\n    def test_to_string(self):\n        r\"\"\"\n        Tests the ``to_string`` method.\n        \"\"\"\n        const1 = Constant(1.2345, \"const1\")\n        const2 = Constant(2.3456, \"const2\")\n        var1 = Variable(3.4567, \"var1\")\n\n        ps = ParameterSet()\n        ps.add_parameter(const1)\n        ps.add_parameter(const2)\n        ps.add_parameter(var1)\n\n        assert ps.to_string(1) == \"1.2, 2.3, 3.5\"\n        assert ps.to_string(3) == \"1.234, 2.346, 3.457\"\n        assert ps.to_string(10) == \"1.2345, 2.3456, 3.4567\"\n\n    def test_eq(self):\n        r\"\"\"\n        Tests the ``__eq__`` method.\n        \"\"\"\n        const1 = Constant(1, \"c1\")\n        const2 = Constant([2, 3, 4], \"c2\")\n        var1 = Variable(5, \"v1\")\n        var2 = Variable([6, 7, 8], \"v2\")\n\n        ps1 = ParameterSet()\n        ps1.add_parameter(const1)\n        ps1.add_parameter(const2)\n        ps1.add_parameter(var1)\n        ps1.add_parameter(var2)\n\n        assert ps1 != 1.0\n\n        ps2 = ParameterSet()\n        ps2.add_parameter(const1)\n        ps2.add_parameter(const2)\n        ps2.add_parameter(var1)\n        ps2.add_parameter(var2)\n\n        assert ps1 == ps2\n\n        ps3 = ParameterSet()\n        ps3.add_parameter(const1)\n        ps3.add_parameter(var1)\n\n        assert ps1 != ps3\n\n    def test_get_item(self):\n        const1 = Constant(1, \"c1\")\n        const2 = Constant([2, 3, 4], \"c2\")\n        var1 = Variable(5, \"v1\")\n        var2 = Variable([6, 7, 8], \"v2\")\n\n        ps = ParameterSet()\n        ps.add_parameter(const1)\n        ps.add_parameter(const2)\n        ps.add_parameter(var1)\n        ps.add_parameter(var2)\n\n        assert np.allclose(ps[0].constants[\"c1\"].value, 1)\n        assert np.allclose(ps[0].constants[\"c2\"].value, 2)\n        assert np.allclose(ps[0].variables[\"v1\"].value, 5)\n        assert np.allclose(ps[0].variables[\"v2\"].value, 6)\n\n        assert np.allclose(ps[1, 2].constants[\"c1\"].value, 1)\n        assert np.allclose(ps[1, 2].constants[\"c2\"].value, [3, 4])\n        assert np.allclose(ps[1, 2].variables[\"v1\"].value, 5)\n        assert np.allclose(ps[1, 2].variables[\"v2\"].value, [7, 8])\n\n    def test_bool_and_empty_repr(self):\n        r\"\"\"\n        Tests the ``__bool__`` method and empty ParameterSet repr.\n        \"\"\"\n        ps_empty = ParameterSet()\n        assert not ps_empty\n        assert repr(ps_empty) == \"ParameterSet()\"\n\n        ps_with_param = ParameterSet()\n        ps_with_param.add_parameter(Constant(1.0, \"test\"))\n        assert bool(ps_with_param)\n\n    def test_repr_integration(self):\n        r\"\"\"\n        Tests that ``__repr__`` integrates the formatting methods correctly.\n        \"\"\"\n        ps = ParameterSet()\n        ps.add_parameter(Constant(3.14, \"pi\"))\n        ps.add_parameter(Variable(2.718, \"e\", bounds=(0, None)))\n        ps.add_parameter(Constant([1, 2, 3], \"array\"))\n\n        repr_str = repr(ps)\n\n        # Check that the table is present and contains expected elements\n        assert \"ParameterSet (3 parameters)\" in repr_str\n        assert \"pi\" in repr_str\n        assert \"e\" in repr_str\n        assert \"array\" in repr_str\n        assert \"Constant\" in repr_str\n        assert \"Variable\" in repr_str\n        assert \"3.14\" in repr_str\n        assert \"2.718\" in repr_str\n        assert \"(0, +âˆž)\" in repr_str\n"
